example# 0
from threading import local
example# 1
import warnings
example# 2
from django . conf import settings
example# 3
from django . core import signals
example# 4
from django . core . cache . backends . base import (  InvalidCacheBackendError , CacheKeyWarning , BaseCache )
example# 5
from django . core . exceptions import ImproperlyConfigured
example# 6
from django . utils . deprecation import RemovedInDjango19Warning
example# 7
from django . utils . module_loading import import_string
example# 8
__all__ = [  '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' ,  'CacheKeyWarning' , 'BaseCache' ,  ]
example# 9
DEFAULT_CACHE_ALIAS = '_STR:2_'
example# 10
if DEFAULT_CACHE_ALIAS not in settings . CACHES :pass
example# 11
raise ImproperlyConfigured ( '_STR:0_' % DEFAULT_CACHE_ALIAS )
example# 12
def get_cache ( backend , ** kwargs ) :pass
example# 13
warnings . warn ( '_STR:0_' ,  RemovedInDjango19Warning , stacklevel = 2 )
example# 14
cache = _create_cache ( backend , ** kwargs )
example# 15
signals . request_finished . connect ( cache . close )
example# 16
return cache
example# 17
def _create_cache ( backend , ** kwargs ) :pass
example# 18
try :pass
except: pass
example# 19
try :pass
except: pass
example# 20
conf = settings . CACHES [ backend ]
example# 21
try: pass
except KeyError :pass
example# 22
try :pass
except: pass
example# 23
import_string ( backend )
example# 24
try: pass
except ImportError as e :pass
example# 25
raise InvalidCacheBackendError ( '_STR:0_' % (  backend , e ) )
example# 26
location = kwargs . pop ( '_STR:0_' , '' )
example# 27
params = kwargs
example# 28
if True: pass
else :pass
example# 29
params = conf . copy ( )
example# 30
params . update ( kwargs )
example# 31
backend = params . pop ( '_STR:0_' )
example# 32
location = params . pop ( '_STR:0_' , '' )
example# 33
backend_cls = import_string ( backend )
example# 34
try: pass
except ImportError as e :pass
example# 35
raise InvalidCacheBackendError (  '_STR:0_' % ( backend , e ) )
example# 36
return backend_cls ( location , params )
example# 37
class CacheHandler ( object ) :pass
example# 38
def __init__ ( self ) :pass
example# 39
self . _caches = local ( )
example# 40
def __getitem__ ( self , alias ) :pass
example# 41
try :pass
except: pass
example# 42
return self . _caches . caches [ alias ]
example# 43
try: pass
except AttributeError :pass
example# 44
self . _caches . caches = { }
example# 45
try: pass
except KeyError :pass
example# 46
pass
example# 47
if alias not in settings . CACHES :pass
example# 48
raise InvalidCacheBackendError (  '_STR:0_' % alias  )
example# 49
cache = _create_cache ( alias )
example# 50
self . _caches . caches [ alias ] = cache
example# 51
return cache
example# 52
def all ( self ) :pass
example# 53
return getattr ( self . _caches , '_STR:0_' , { } ) . values ( )
example# 54
caches = CacheHandler ( )
example# 55
class DefaultCacheProxy ( object ) :pass
example# 56
def __getattr__ ( self , name ) :pass
example# 57
return getattr ( caches [ DEFAULT_CACHE_ALIAS ] , name )
example# 58
def __setattr__ ( self , name , value ) :pass
example# 59
return setattr ( caches [ DEFAULT_CACHE_ALIAS ] , name , value )
example# 60
def __delattr__ ( self , name ) :pass
example# 61
return delattr ( caches [ DEFAULT_CACHE_ALIAS ] , name )
example# 62
def __contains__ ( self , key ) :pass
example# 63
return key in caches [ DEFAULT_CACHE_ALIAS ]
example# 64
def __eq__ ( self , other ) :pass
example# 65
return caches [ DEFAULT_CACHE_ALIAS ] == other
example# 66
def __ne__ ( self , other ) :pass
example# 67
return caches [ DEFAULT_CACHE_ALIAS ] != other
example# 68
cache = DefaultCacheProxy ( )
example# 69
def close_caches ( ** kwargs ) :pass
example# 70
for cache in caches . all ( ) :pass
example# 71
cache . close ( )
example# 72
signals . request_finished . connect ( close_caches )
example# 73
from __future__ import unicode_literals
example# 74
import time
example# 75
import warnings
example# 76
from django . core . exceptions import ImproperlyConfigured , DjangoRuntimeWarning
example# 77
from django . utils . module_loading import import_string
example# 78
class InvalidCacheBackendError ( ImproperlyConfigured ) :pass
example# 79
pass
example# 80
class CacheKeyWarning ( DjangoRuntimeWarning ) :pass
example# 81
pass
example# 82
DEFAULT_TIMEOUT = object ( )
example# 83
MEMCACHE_MAX_KEY_LENGTH = 250
example# 84
def default_key_func ( key , key_prefix , version ) :pass
example# 85
return '%s:%s:%s' % ( key_prefix , version , key )
example# 86
def get_key_func ( key_func ) :pass
example# 87
if key_func is not None :pass
example# 88
if callable ( key_func ) :pass
example# 89
return key_func
example# 90
if True: pass
else :pass
example# 91
return import_string ( key_func )
example# 92
return default_key_func
example# 93
class BaseCache ( object ) :pass
example# 94
def __init__ ( self , params ) :pass
example# 95
timeout = params . get ( '_STR:1_' , params . get ( '_STR:0_' , 300 ) )
example# 96
if timeout is not None :pass
example# 97
try :pass
except: pass
example# 98
timeout = int ( timeout )
example# 99
try: pass
except ( ValueError , TypeError ) :pass
example# 100
timeout = 300
example# 101
self . default_timeout = timeout
example# 102
options = params . get ( '_STR:0_' , { } )
example# 103
max_entries = params . get ( '_STR:1_' , options . get ( '_STR:0_' , 300 ) )
example# 104
try :pass
except: pass
example# 105
self . _max_entries = int ( max_entries )
example# 106
try: pass
except ( ValueError , TypeError ) :pass
example# 107
self . _max_entries = 300
example# 108
cull_frequency = params . get ( '_STR:1_' , options . get ( '_STR:0_' , 3 ) )
example# 109
try :pass
except: pass
example# 110
self . _cull_frequency = int ( cull_frequency )
example# 111
try: pass
except ( ValueError , TypeError ) :pass
example# 112
self . _cull_frequency = 3
example# 113
self . key_prefix = params . get ( '_STR:0_' , '' )
example# 114
self . version = params . get ( '_STR:0_' , 1 )
example# 115
self . key_func = get_key_func ( params . get ( '_STR:0_' , None ) )
example# 116
def get_backend_timeout ( self , timeout = DEFAULT_TIMEOUT ) :pass
example# 117
if timeout == DEFAULT_TIMEOUT :pass
example# 118
timeout = self . default_timeout
example# 119
if True: pass
elif timeout == 0 :pass
example# 120
timeout = - 1
example# 121
return None if timeout is None else time . time ( ) + timeout
example# 122
def make_key ( self , key , version = None ) :pass
example# 123
if version is None :pass
example# 124
version = self . version
example# 125
new_key = self . key_func ( key , self . key_prefix , version )
example# 126
return new_key
example# 127
def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :pass
example# 128
"""         Set a value in the cache if the key does not already exist. If         timeout is given, that timeout will be used for the key; otherwise         the default cache timeout will be used.         Returns True if the value was stored, False otherwise.         """
example# 129
raise NotImplementedError ( '_STR:0_' )
example# 130
def get ( self , key , default = None , version = None ) :pass
example# 131
raise NotImplementedError ( '_STR:0_' )
example# 132
def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :pass
example# 133
raise NotImplementedError ( '_STR:0_' )
example# 134
def delete ( self , key , version = None ) :pass
example# 135
raise NotImplementedError ( '_STR:0_' )
example# 136
def get_many ( self , keys , version = None ) :pass
example# 137
d = { }
example# 138
for k in keys :pass
example# 139
val = self . get ( k , version = version )
example# 140
if val is not None :pass
example# 141
d [ k ] = val
example# 142
return d
example# 143
def has_key ( self , key , version = None ) :pass
example# 144
return self . get ( key , version = version ) is not None
example# 145
def incr ( self , key , delta = 1 , version = None ) :pass
example# 146
value = self . get ( key , version = version )
example# 147
if value is None :pass
example# 148
raise ValueError ( '_STR:0_' % key )
example# 149
new_value = value + delta
example# 150
self . set ( key , new_value , version = version )
example# 151
return new_value
example# 152
def decr ( self , key , delta = 1 , version = None ) :pass
example# 153
return self . incr ( key , - delta , version = version )
example# 154
def __contains__ ( self , key ) :pass
example# 155
return self . has_key ( key )
example# 156
def set_many ( self , data , timeout = DEFAULT_TIMEOUT , version = None ) :pass
example# 157
for key , value in data . items ( ) :pass
example# 158
self . set ( key , value , timeout = timeout , version = version )
example# 159
def delete_many ( self , keys , version = None ) :pass
example# 160
for key in keys :pass
example# 161
self . delete ( key , version = version )
example# 162
def clear ( self ) :pass
example# 163
raise NotImplementedError ( '_STR:0_' )
example# 164
def validate_key ( self , key ) :pass
example# 165
if len ( key ) > MEMCACHE_MAX_KEY_LENGTH :pass
example# 166
warnings . warn ( 'Cache key will cause errors if used with memcached: '  '%s (longer than %s)' % ( key , MEMCACHE_MAX_KEY_LENGTH ) ,  CacheKeyWarning )
example# 167
for char in key :pass
example# 168
if ord ( char ) < 33 or ord ( char ) == 127 :pass
example# 169
warnings . warn ( 'Cache key contains characters that will cause '  'errors if used with memcached: %r' % key ,  CacheKeyWarning )
example# 170
def incr_version ( self , key , delta = 1 , version = None ) :pass
example# 171
if version is None :pass
example# 172
version = self . version
example# 173
value = self . get ( key , version = version )
example# 174
if value is None :pass
example# 175
raise ValueError ( '_STR:0_' % key )
example# 176
self . set ( key , value , version = version + delta )
example# 177
self . delete ( key , version = version )
example# 178
return version + delta
example# 179
def decr_version ( self , key , delta = 1 , version = None ) :pass
example# 180
return self . incr_version ( key , - delta , version )
example# 181
def close ( self , ** kwargs ) :pass
example# 182
"""Close the cache connection"""
example# 183
pass
example# 184
import base64
example# 185
from datetime import datetime
example# 186
try :pass
except: pass
example# 187
from django . utils . six . moves import cPickle as pickle
example# 188
try: pass
except ImportError :pass
example# 189
import pickle
example# 190
from django . conf import settings
example# 191
from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
example# 192
from django . db import connections , transaction , router , DatabaseError
example# 193
from django . db . backends . utils import typecast_timestamp
example# 194
from django . utils import timezone , six
example# 195
from django . utils . encoding import force_bytes
example# 196
class Options ( object ) :pass
example# 197
def __init__ ( self , table ) :pass
example# 198
self . db_table = table
example# 199
self . app_label = '_STR:0_'
example# 200
self . model_name = '_STR:0_'
example# 201
self . verbose_name = '_STR:0_'
example# 202
self . verbose_name_plural = '_STR:0_'
example# 203
self . object_name = '_STR:0_'
example# 204
self . abstract = False
example# 205
self . managed = True
example# 206
self . proxy = False
example# 207
class BaseDatabaseCache ( BaseCache ) :pass
example# 208
def __init__ ( self , table , params ) :pass
example# 209
BaseCache . __init__ ( self , params )
example# 210
self . _table = table
example# 211
class CacheEntry ( object ) :pass
example# 212
_meta = Options ( table )
example# 213
self . cache_model_class = CacheEntry
example# 214
class DatabaseCache ( BaseDatabaseCache ) :pass
example# 215
def get ( self , key , default = None , version = None ) :pass
example# 216
key = self . make_key ( key , version = version )
example# 217
self . validate_key ( key )
example# 218
db = router . db_for_read ( self . cache_model_class )
example# 219
table = connections [ db ] . ops . quote_name ( self . _table )
example# 220
with connections [ db ] . cursor ( ) as cursor :pass
example# 221
cursor . execute ( "SELECT cache_key, value, expires FROM %s "  "WHERE cache_key = %%s" % table , [ key ] )
example# 222
row = cursor . fetchone ( )
example# 223
if row is None :pass
example# 224
return default
example# 225
now = timezone . now ( )
example# 226
expires = row [ 2 ]
example# 227
if connections [ db ] . features . needs_datetime_string_cast and not isinstance ( expires , datetime ) :pass
example# 228
expires = typecast_timestamp ( str ( expires ) )
example# 229
if expires < now :pass
example# 230
db = router . db_for_write ( self . cache_model_class )
example# 231
with connections [ db ] . cursor ( ) as cursor :pass
example# 232
cursor . execute ( "DELETE FROM %s "  "WHERE cache_key = %%s" % table , [ key ] )
example# 233
return default
example# 234
value = connections [ db ] . ops . process_clob ( row [ 1 ] )
example# 235
return pickle . loads ( base64 . b64decode ( force_bytes ( value ) ) )
example# 236
def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :pass
example# 237
key = self . make_key ( key , version = version )
example# 238
self . validate_key ( key )
example# 239
self . _base_set ( '_STR:0_' , key , value , timeout )
example# 240
def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :pass
example# 241
key = self . make_key ( key , version = version )
example# 242
self . validate_key ( key )
example# 243
return self . _base_set ( '_STR:0_' , key , value , timeout )
example# 244
def _base_set ( self , mode , key , value , timeout = DEFAULT_TIMEOUT ) :pass
example# 245
timeout = self . get_backend_timeout ( timeout )
example# 246
db = router . db_for_write ( self . cache_model_class )
example# 247
table = connections [ db ] . ops . quote_name ( self . _table )
example# 248
with connections [ db ] . cursor ( ) as cursor :pass
example# 249
cursor . execute ( '_STR:0_' % table )
example# 250
num = cursor . fetchone ( ) [ 0 ]
example# 251
now = timezone . now ( )
example# 252
now = now . replace ( microsecond = 0 )
example# 253
if timeout is None :pass
example# 254
exp = datetime . max
example# 255
if True: pass
elif settings . USE_TZ :pass
example# 256
exp = datetime . utcfromtimestamp ( timeout )
example# 257
if True: pass
else :pass
example# 258
exp = datetime . fromtimestamp ( timeout )
example# 259
exp = exp . replace ( microsecond = 0 )
example# 260
if num > self . _max_entries :pass
example# 261
self . _cull ( db , cursor , now )
example# 262
pickled = pickle . dumps ( value , pickle . HIGHEST_PROTOCOL )
example# 263
b64encoded = base64 . b64encode ( pickled )
example# 264
if six . PY3 :pass
example# 265
b64encoded = b64encoded . decode ( '_STR:0_' )
example# 266
try :pass
except: pass
example# 267
with transaction . atomic ( using = db ) :pass
example# 268
cursor . execute ( "SELECT cache_key, expires FROM %s "  "WHERE cache_key = %%s" % table , [ key ] )
example# 269
result = cursor . fetchone ( )
example# 270
if result :pass
example# 271
current_expires = result [ 1 ]
example# 272
if ( connections [ db ] . features . needs_datetime_string_cast and not  isinstance ( current_expires , datetime ) ) :pass
example# 273
current_expires = typecast_timestamp ( str ( current_expires ) )
example# 274
exp = connections [ db ] . ops . value_to_db_datetime ( exp )
example# 275
if result and ( mode == '_STR:1_' or ( mode == '_STR:0_' and current_expires < now ) ) :pass
example# 276
cursor . execute ( "UPDATE %s SET value = %%s, expires = %%s "  "WHERE cache_key = %%s" % table ,  [ b64encoded , exp , key ] )
example# 277
if True: pass
else :pass
example# 278
cursor . execute ( "INSERT INTO %s (cache_key, value, expires) "  "VALUES (%%s, %%s, %%s)" % table ,  [ key , b64encoded , exp ] )
example# 279
try: pass
except DatabaseError :pass
example# 280
return False
example# 281
if True: pass
else :pass
example# 282
return True
example# 283
def delete ( self , key , version = None ) :pass
example# 284
key = self . make_key ( key , version = version )
example# 285
self . validate_key ( key )
example# 286
db = router . db_for_write ( self . cache_model_class )
example# 287
table = connections [ db ] . ops . quote_name ( self . _table )
example# 288
with connections [ db ] . cursor ( ) as cursor :pass
example# 289
cursor . execute ( '_STR:0_' % table , [ key ] )
example# 290
def has_key ( self , key , version = None ) :pass
example# 291
key = self . make_key ( key , version = version )
example# 292
self . validate_key ( key )
example# 293
db = router . db_for_read ( self . cache_model_class )
example# 294
table = connections [ db ] . ops . quote_name ( self . _table )
example# 295
if settings . USE_TZ :pass
example# 296
now = datetime . utcnow ( )
example# 297
if True: pass
else :pass
example# 298
now = datetime . now ( )
example# 299
now = now . replace ( microsecond = 0 )
example# 300
with connections [ db ] . cursor ( ) as cursor :pass
example# 301
cursor . execute ( "SELECT cache_key FROM %s "  "WHERE cache_key = %%s and expires > %%s" % table ,  [ key , connections [ db ] . ops . value_to_db_datetime ( now ) ] )
example# 302
return cursor . fetchone ( ) is not None
example# 303
def _cull ( self , db , cursor , now ) :pass
example# 304
if self . _cull_frequency == 0 :pass
example# 305
self . clear ( )
example# 306
if True: pass
else :pass
example# 307
now = now . replace ( tzinfo = None )
example# 308
table = connections [ db ] . ops . quote_name ( self . _table )
example# 309
cursor . execute ( '_STR:0_' % table ,  [ connections [ db ] . ops . value_to_db_datetime ( now ) ] )
example# 310
cursor . execute ( '_STR:0_' % table )
example# 311
num = cursor . fetchone ( ) [ 0 ]
example# 312
if num > self . _max_entries :pass
example# 313
cull_num = num // self . _cull_frequency
example# 314
cursor . execute (  connections [ db ] . ops . cache_key_culling_sql ( ) % table ,  [ cull_num ] )
example# 315
cursor . execute ( "DELETE FROM %s "  "WHERE cache_key < %%s" % table ,  [ cursor . fetchone ( ) [ 0 ] ] )
example# 316
def clear ( self ) :pass
example# 317
db = router . db_for_write ( self . cache_model_class )
example# 318
table = connections [ db ] . ops . quote_name ( self . _table )
example# 319
with connections [ db ] . cursor ( ) as cursor :pass
example# 320
cursor . execute ( 'DELETE FROM %s' % table )
example# 321
class CacheClass ( DatabaseCache ) :pass
example# 322
pass
example# 323
from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
example# 324
class DummyCache ( BaseCache ) :pass
example# 325
def __init__ ( self , host , * args , ** kwargs ) :pass
example# 326
BaseCache . __init__ ( self , * args , ** kwargs )
example# 327
def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :pass
example# 328
key = self . make_key ( key , version = version )
example# 329
self . validate_key ( key )
example# 330
return True
example# 331
def get ( self , key , default = None , version = None ) :pass
example# 332
key = self . make_key ( key , version = version )
example# 333
self . validate_key ( key )
example# 334
return default
example# 335
def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :pass
example# 336
key = self . make_key ( key , version = version )
example# 337
self . validate_key ( key )
example# 338
def delete ( self , key , version = None ) :pass
example# 339
key = self . make_key ( key , version = version )
example# 340
self . validate_key ( key )
example# 341
def get_many ( self , keys , version = None ) :pass
example# 342
return { }
example# 343
def has_key ( self , key , version = None ) :pass
example# 344
key = self . make_key ( key , version = version )
example# 345
self . validate_key ( key )
example# 346
return False
example# 347
def set_many ( self , data , timeout = DEFAULT_TIMEOUT , version = None ) :pass
example# 348
pass
example# 349
def delete_many ( self , keys , version = None ) :pass
example# 350
pass
example# 351
def clear ( self ) :pass
example# 352
pass
example# 353
class CacheClass ( DummyCache ) :pass
example# 354
pass
example# 355
import errno
example# 356
import glob
example# 357
import hashlib
example# 358
import io
example# 359
import os
example# 360
import random
example# 361
import tempfile
example# 362
import time
example# 363
import zlib
example# 364
from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
example# 365
from django . core . files . move import file_move_safe
example# 366
from django . utils . encoding import force_bytes
example# 367
try :pass
except: pass
example# 368
from django . utils . six . moves import cPickle as pickle
example# 369
try: pass
except ImportError :pass
example# 370
import pickle
example# 371
class FileBasedCache ( BaseCache ) :pass
example# 372
cache_suffix = '_STR:0_'
example# 373
def __init__ ( self , dir , params ) :pass
example# 374
super ( FileBasedCache , self ) . __init__ ( params )
example# 375
self . _dir = os . path . abspath ( dir )
example# 376
self . _createdir ( )
example# 377
def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :pass
example# 378
if self . has_key ( key , version ) :pass
example# 379
return False
example# 380
self . set ( key , value , timeout , version )
example# 381
return True
example# 382
def get ( self , key , default = None , version = None ) :pass
example# 383
fname = self . _key_to_file ( key , version )
example# 384
if os . path . exists ( fname ) :pass
example# 385
try :pass
except: pass
example# 386
with io . open ( fname , '_STR:0_' ) as f :pass
example# 387
if not self . _is_expired ( f ) :pass
example# 388
return pickle . loads ( zlib . decompress ( f . read ( ) ) )
example# 389
try: pass
except IOError as e :pass
example# 390
if e . errno == errno . ENOENT :pass
example# 391
pass
example# 392
return default
example# 393
def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :pass
example# 394
self . _createdir ( )
example# 395
fname = self . _key_to_file ( key , version )
example# 396
self . _cull ( )
example# 397
fd , tmp_path = tempfile . mkstemp ( dir = self . _dir )
example# 398
renamed = False
example# 399
try :pass
except: pass
example# 400
with io . open ( fd , 'wb' ) as f :pass
example# 401
expiry = self . get_backend_timeout ( timeout )
example# 402
f . write ( pickle . dumps ( expiry , - 1 ) )
example# 403
f . write ( zlib . compress ( pickle . dumps ( value ) , - 1 ) )
example# 404
file_move_safe ( tmp_path , fname , allow_overwrite = True )
example# 405
renamed = True
example# 406
try: pass
finally :pass
example# 407
if not renamed :pass
example# 408
os . remove ( tmp_path )
example# 409
def delete ( self , key , version = None ) :pass
example# 410
self . _delete ( self . _key_to_file ( key , version ) )
example# 411
def _delete ( self , fname ) :pass
example# 412
if not fname . startswith ( self . _dir ) or not os . path . exists ( fname ) :pass
example# 413
return
example# 414
try :pass
except: pass
example# 415
os . remove ( fname )
example# 416
try: pass
except OSError as e :pass
example# 417
if e . errno != errno . ENOENT :pass
example# 418
raise
example# 419
def has_key ( self , key , version = None ) :pass
example# 420
fname = self . _key_to_file ( key , version )
example# 421
if os . path . exists ( fname ) :pass
example# 422
with io . open ( fname , '_STR:0_' ) as f :pass
example# 423
return not self . _is_expired ( f )
example# 424
return False
example# 425
def _cull ( self ) :pass
example# 426
filelist = self . _list_cache_files ( )
example# 427
num_entries = len ( filelist )
example# 428
if num_entries < self . _max_entries :pass
example# 429
return
example# 430
if self . _cull_frequency == 0 :pass
example# 431
return self . clear ( )
example# 432
filelist = random . sample ( filelist ,  int ( num_entries / self . _cull_frequency ) )
example# 433
for fname in filelist :pass
example# 434
self . _delete ( fname )
example# 435
def _createdir ( self ) :pass
example# 436
if not os . path . exists ( self . _dir ) :pass
example# 437
try :pass
except: pass
example# 438
os . makedirs ( self . _dir , 0o700 )
example# 439
try: pass
except OSError as e :pass
example# 440
if e . errno != errno . EEXIST :pass
example# 441
raise EnvironmentError (  "Cache directory '%s' does not exist "  "and could not be created'" % self . _dir )
example# 442
def _key_to_file ( self , key , version = None ) :pass
example# 443
key = self . make_key ( key , version = version )
example# 444
self . validate_key ( key )
example# 445
return os . path . join ( self . _dir , '' . join (  [ hashlib . md5 ( force_bytes ( key ) ) . hexdigest ( ) , self . cache_suffix ] ) )
example# 446
def clear ( self ) :pass
example# 447
if not os . path . exists ( self . _dir ) :pass
example# 448
return
example# 449
for fname in self . _list_cache_files ( ) :pass
example# 450
self . _delete ( fname )
example# 451
def _is_expired ( self , f ) :pass
example# 452
exp = pickle . load ( f )
example# 453
if exp is not None and exp < time . time ( ) :pass
example# 454
f . close ( )
example# 455
self . _delete ( f . name )
example# 456
return True
example# 457
return False
example# 458
def _list_cache_files ( self ) :pass
example# 459
if not os . path . exists ( self . _dir ) :pass
example# 460
return [ ]
example# 461
filelist = [ os . path . join ( self . _dir , fname ) for fname  in glob . glob1 ( self . _dir , '*%s' % self . cache_suffix ) ]
example# 462
return filelist
example# 463
class CacheClass ( FileBasedCache ) :pass
example# 464
pass
example# 465
import time
example# 466
try :pass
except: pass
example# 467
from django . utils . six . moves import cPickle as pickle
example# 468
try: pass
except ImportError :pass
example# 469
import pickle
example# 470
from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
example# 471
from django . utils . synch import RWLock
example# 472
_caches = { }
example# 473
_expire_info = { }
example# 474
_locks = { }
example# 475
class LocMemCache ( BaseCache ) :pass
example# 476
def __init__ ( self , name , params ) :pass
example# 477
BaseCache . __init__ ( self , params )
example# 478
self . _cache = _caches . setdefault ( name , { } )
example# 479
self . _expire_info = _expire_info . setdefault ( name , { } )
example# 480
self . _lock = _locks . setdefault ( name , RWLock ( ) )
example# 481
def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :pass
example# 482
key = self . make_key ( key , version = version )
example# 483
self . validate_key ( key )
example# 484
pickled = pickle . dumps ( value , pickle . HIGHEST_PROTOCOL )
example# 485
with self . _lock . writer ( ) :pass
example# 486
if self . _has_expired ( key ) :pass
example# 487
self . _set ( key , pickled , timeout )
example# 488
return True
example# 489
return False
example# 490
def get ( self , key , default = None , version = None ) :pass
example# 491
key = self . make_key ( key , version = version )
example# 492
self . validate_key ( key )
example# 493
pickled = None
example# 494
with self . _lock . reader ( ) :pass
example# 495
if not self . _has_expired ( key ) :pass
example# 496
pickled = self . _cache [ key ]
example# 497
if pickled is not None :pass
example# 498
try :pass
except: pass
example# 499
return pickle . loads ( pickled )
example# 500
try: pass
except pickle . PickleError :pass
example# 501
return default
example# 502
with self . _lock . writer ( ) :pass
example# 503
try :pass
except: pass
example# 504
del self . _cache [ key ]
example# 505
del self . _expire_info [ key ]
example# 506
try: pass
except KeyError :pass
example# 507
pass
example# 508
return default
example# 509
def _set ( self , key , value , timeout = DEFAULT_TIMEOUT ) :pass
example# 510
if len ( self . _cache ) >= self . _max_entries :pass
example# 511
self . _cull ( )
example# 512
self . _cache [ key ] = value
example# 513
self . _expire_info [ key ] = self . get_backend_timeout ( timeout )
example# 514
def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :pass
example# 515
key = self . make_key ( key , version = version )
example# 516
self . validate_key ( key )
example# 517
pickled = pickle . dumps ( value , pickle . HIGHEST_PROTOCOL )
example# 518
with self . _lock . writer ( ) :pass
example# 519
self . _set ( key , pickled , timeout )
example# 520
def incr ( self , key , delta = 1 , version = None ) :pass
example# 521
value = self . get ( key , version = version )
example# 522
if value is None :pass
example# 523
raise ValueError ( '_STR:0_' % key )
example# 524
new_value = value + delta
example# 525
key = self . make_key ( key , version = version )
example# 526
pickled = pickle . dumps ( new_value , pickle . HIGHEST_PROTOCOL )
example# 527
with self . _lock . writer ( ) :pass
example# 528
self . _cache [ key ] = pickled
example# 529
return new_value
example# 530
def has_key ( self , key , version = None ) :pass
example# 531
key = self . make_key ( key , version = version )
example# 532
self . validate_key ( key )
example# 533
with self . _lock . reader ( ) :pass
example# 534
if not self . _has_expired ( key ) :pass
example# 535
return True
example# 536
with self . _lock . writer ( ) :pass
example# 537
try :pass
except: pass
example# 538
del self . _cache [ key ]
example# 539
del self . _expire_info [ key ]
example# 540
try: pass
except KeyError :pass
example# 541
pass
example# 542
return False
example# 543
def _has_expired ( self , key ) :pass
example# 544
exp = self . _expire_info . get ( key , - 1 )
example# 545
if exp is None or exp > time . time ( ) :pass
example# 546
return False
example# 547
return True
example# 548
def _cull ( self ) :pass
example# 549
if self . _cull_frequency == 0 :pass
example# 550
self . clear ( )
example# 551
if True: pass
else :pass
example# 552
doomed = [ k for ( i , k ) in enumerate ( self . _cache ) if i % self . _cull_frequency == 0 ]
example# 553
for k in doomed :pass
example# 554
self . _delete ( k )
example# 555
def _delete ( self , key ) :pass
example# 556
try :pass
except: pass
example# 557
del self . _cache [ key ]
example# 558
try: pass
except KeyError :pass
example# 559
pass
example# 560
try :pass
except: pass
example# 561
del self . _expire_info [ key ]
example# 562
try: pass
except KeyError :pass
example# 563
pass
example# 564
def delete ( self , key , version = None ) :pass
example# 565
key = self . make_key ( key , version = version )
example# 566
self . validate_key ( key )
example# 567
with self . _lock . writer ( ) :pass
example# 568
self . _delete ( key )
example# 569
def clear ( self ) :pass
example# 570
self . _cache . clear ( )
example# 571
self . _expire_info . clear ( )
example# 572
class CacheClass ( LocMemCache ) :pass
example# 573
pass
example# 574
import time
example# 575
import pickle
example# 576
from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
example# 577
from django . utils import six
example# 578
from django . utils . deprecation import RenameMethodsBase , RemovedInDjango19Warning
example# 579
from django . utils . encoding import force_str
example# 580
from django . utils . functional import cached_property
example# 581
class BaseMemcachedCacheMethods ( RenameMethodsBase ) :pass
example# 582
renamed_methods = (  ( '_STR:0_' , '_STR:1_' , RemovedInDjango19Warning ) ,  )
example# 583
class BaseMemcachedCache ( six . with_metaclass ( BaseMemcachedCacheMethods , BaseCache ) ) :pass
example# 584
def __init__ ( self , server , params , library , value_not_found_exception ) :pass
example# 585
super ( BaseMemcachedCache , self ) . __init__ ( params )
example# 586
if isinstance ( server , six . string_types ) :pass
example# 587
self . _servers = server . split ( '_STR:0_' )
example# 588
if True: pass
else :pass
example# 589
self . _servers = server
example# 590
self . LibraryValueNotFoundException = value_not_found_exception
example# 591
self . _lib = library
example# 592
self . _options = params . get ( '_STR:0_' , None )
example# 593
@ property
def dummy(): pass
example# 594
def _cache ( self ) :pass
example# 595
if getattr ( self , '_STR:0_' , None ) is None :pass
example# 596
self . _client = self . _lib . Client ( self . _servers )
example# 597
return self . _client
example# 598
def get_backend_timeout ( self , timeout = DEFAULT_TIMEOUT ) :pass
example# 599
if timeout == DEFAULT_TIMEOUT :pass
example# 600
timeout = self . default_timeout
example# 601
if timeout is None :pass
example# 602
return 0
example# 603
if True: pass
elif int ( timeout ) == 0 :pass
example# 604
timeout = - 1
example# 605
if timeout > 2592000 :pass
example# 606
timeout += int ( time . time ( ) )
example# 607
return int ( timeout )
example# 608
def make_key ( self , key , version = None ) :pass
example# 609
return force_str ( super ( BaseMemcachedCache , self ) . make_key ( key , version ) )
example# 610
def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :pass
example# 611
key = self . make_key ( key , version = version )
example# 612
return self . _cache . add ( key , value , self . get_backend_timeout ( timeout ) )
example# 613
def get ( self , key , default = None , version = None ) :pass
example# 614
key = self . make_key ( key , version = version )
example# 615
val = self . _cache . get ( key )
example# 616
if val is None :pass
example# 617
return default
example# 618
return val
example# 619
def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :pass
example# 620
key = self . make_key ( key , version = version )
example# 621
self . _cache . set ( key , value , self . get_backend_timeout ( timeout ) )
example# 622
def delete ( self , key , version = None ) :pass
example# 623
key = self . make_key ( key , version = version )
example# 624
self . _cache . delete ( key )
example# 625
def get_many ( self , keys , version = None ) :pass
example# 626
new_keys = [ self . make_key ( x , version = version ) for x in keys ]
example# 627
ret = self . _cache . get_multi ( new_keys )
example# 628
if ret :pass
example# 629
_ = { }
example# 630
m = dict ( zip ( new_keys , keys ) )
example# 631
for k , v in ret . items ( ) :pass
example# 632
_ [ m [ k ] ] = v
example# 633
ret = _
example# 634
return ret
example# 635
def close ( self , ** kwargs ) :pass
example# 636
self . _cache . disconnect_all ( )
example# 637
def incr ( self , key , delta = 1 , version = None ) :pass
example# 638
key = self . make_key ( key , version = version )
example# 639
if delta < 0 :pass
example# 640
return self . _cache . decr ( key , - delta )
example# 641
try :pass
except: pass
example# 642
val = self . _cache . incr ( key , delta )
example# 643
try: pass
except self . LibraryValueNotFoundException :pass
example# 644
val = None
example# 645
if val is None :pass
example# 646
raise ValueError ( '_STR:0_' % key )
example# 647
return val
example# 648
def decr ( self , key , delta = 1 , version = None ) :pass
example# 649
key = self . make_key ( key , version = version )
example# 650
if delta < 0 :pass
example# 651
return self . _cache . incr ( key , - delta )
example# 652
try :pass
except: pass
example# 653
val = self . _cache . decr ( key , delta )
example# 654
try: pass
except self . LibraryValueNotFoundException :pass
example# 655
val = None
example# 656
if val is None :pass
example# 657
raise ValueError ( '_STR:0_' % key )
example# 658
return val
example# 659
def set_many ( self , data , timeout = DEFAULT_TIMEOUT , version = None ) :pass
example# 660
safe_data = { }
example# 661
for key , value in data . items ( ) :pass
example# 662
key = self . make_key ( key , version = version )
example# 663
safe_data [ key ] = value
example# 664
self . _cache . set_multi ( safe_data , self . get_backend_timeout ( timeout ) )
example# 665
def delete_many ( self , keys , version = None ) :pass
example# 666
l = lambda x : self . make_key ( x , version = version )
example# 667
self . _cache . delete_multi ( map ( l , keys ) )
example# 668
def clear ( self ) :pass
example# 669
self . _cache . flush_all ( )
example# 670
class MemcachedCache ( BaseMemcachedCache ) :pass
example# 671
def __init__ ( self , server , params ) :pass
example# 672
import memcache
example# 673
super ( MemcachedCache , self ) . __init__ ( server , params ,  library = memcache ,  value_not_found_exception = ValueError )
example# 674
@ property
def dummy(): pass
example# 675
def _cache ( self ) :pass
example# 676
if getattr ( self , '_STR:0_' , None ) is None :pass
example# 677
self . _client = self . _lib . Client ( self . _servers , pickleProtocol = pickle . HIGHEST_PROTOCOL )
example# 678
return self . _client
example# 679
class PyLibMCCache ( BaseMemcachedCache ) :pass
example# 680
def __init__ ( self , server , params ) :pass
example# 681
import pylibmc
example# 682
super ( PyLibMCCache , self ) . __init__ ( server , params ,  library = pylibmc ,  value_not_found_exception = pylibmc . NotFound )
example# 683
@ cached_property
def dummy(): pass
example# 684
def _cache ( self ) :pass
example# 685
client = self . _lib . Client ( self . _servers )
example# 686
if self . _options :pass
example# 687
client . behaviors = self . _options
example# 688
return client
example# 689
from __future__ import unicode_literals
example# 690
import hashlib
example# 691
from django . utils . encoding import force_bytes
example# 692
from django . utils . http import urlquote
example# 693
TEMPLATE_FRAGMENT_KEY_TEMPLATE = '_STR:0_'
example# 694
def make_template_fragment_key ( fragment_name , vary_on = None ) :pass
example# 695
if vary_on is None :pass
example# 696
vary_on = ( )
example# 697
key = '_STR:0_' . join ( urlquote ( var ) for var in vary_on )
example# 698
args = hashlib . md5 ( force_bytes ( key ) )
example# 699
return TEMPLATE_FRAGMENT_KEY_TEMPLATE % ( fragment_name , args . hexdigest ( ) )
example# 700
from __future__ import unicode_literals
example# 701
from . messages import ( CheckMessage ,  Debug , Info , Warning , Error , Critical ,  DEBUG , INFO , WARNING , ERROR , CRITICAL )
example# 702
from . registry import register , run_checks , tag_exists , Tags
example# 703
import django . core . checks . compatibility . django_1_6_0
example# 704
import django . core . checks . compatibility . django_1_7_0
example# 705
import django . core . checks . model_checks
example# 706
__all__ = [  '_STR:0_' ,  '_STR:1_' , '_STR:2_' , '_STR:3_' , '_STR:4_' , '_STR:5_' ,  'DEBUG' , 'INFO' , 'WARNING' , 'ERROR' , 'CRITICAL' ,  'register' , 'run_checks' , 'tag_exists' , 'Tags' ,  ]
example# 707
from __future__ import unicode_literals
example# 708
from django . apps import apps
example# 709
from . . import Warning , register , Tags
example# 710
@ register ( Tags . compatibility )
def dummy(): pass
example# 711
def check_1_6_compatibility ( ** kwargs ) :pass
example# 712
errors = [ ]
example# 713
errors . extend ( _check_test_runner ( ** kwargs ) )
example# 714
errors . extend ( _check_boolean_field_default_value ( ** kwargs ) )
example# 715
return errors
example# 716
def _check_test_runner ( app_configs = None , ** kwargs ) :pass
example# 717
from django . conf import settings
example# 718
weight = 0
example# 719
if not settings . is_overridden ( '_STR:0_' ) :pass
example# 720
try :pass
except: pass
example# 721
settings . SITE_ID
example# 722
weight += 2
example# 723
try: pass
except AttributeError :pass
example# 724
pass
example# 725
try :pass
except: pass
example# 726
settings . BASE_DIR
example# 727
try: pass
except AttributeError :pass
example# 728
weight += 2
example# 729
if settings . is_overridden ( '_STR:0_' ) :pass
example# 730
weight += 2
example# 731
if settings . is_overridden ( '_STR:0_' ) :pass
example# 732
weight += 2
example# 733
if settings . is_overridden ( '_STR:0_' ) :pass
example# 734
weight += 1
example# 735
if '_STR:0_' not in set ( settings . MIDDLEWARE_CLASSES ) :pass
example# 736
weight += 1
example# 737
if weight >= 6 :pass
example# 738
return [  Warning (  "Some project unittests may not execute as expected." ,  hint = ( "Django 1.6 introduced a new default test runner. It looks like "  "this project was generated using Django 1.5 or earlier. You should "  "ensure your tests are all running & behaving as expected. See "  "https://docs.djangoproject.com/en/dev/releases/1.6/#new-test-runner "  "for more information." ) ,  obj = None ,  id = '1_6.W001' ,  )  ]
example# 739
if True: pass
else :pass
example# 740
return [ ]
example# 741
def _check_boolean_field_default_value ( app_configs = None , ** kwargs ) :pass
example# 742
from django . db import models
example# 743
problem_fields = [  field  for model in apps . get_models ( ** kwargs )  if app_configs is None or model . _meta . app_config in app_configs  for field in model . _meta . local_fields  if isinstance ( field , models . BooleanField ) and not field . has_default ( )  ]
example# 744
return [  Warning (  '_STR:0_' ,  hint = ( "Django 1.6 changed the default value of BooleanField from False to None. "  "See https://docs.djangoproject.com/en/1.6/ref/models/fields/#booleanfield "  "for more information." ) ,  obj = field ,  id = '1_6.W002' ,  )  for field in problem_fields  ]
example# 745
from __future__ import unicode_literals
example# 746
from . . import Warning , register , Tags
example# 747
@ register ( Tags . compatibility )
def dummy(): pass
example# 748
def check_1_7_compatibility ( ** kwargs ) :pass
example# 749
errors = [ ]
example# 750
errors . extend ( _check_middleware_classes ( ** kwargs ) )
example# 751
return errors
example# 752
def _check_middleware_classes ( app_configs = None , ** kwargs ) :pass
example# 753
from django . conf import settings
example# 754
if not settings . is_overridden ( '_STR:0_' ) :pass
example# 755
return [  Warning (  '_STR:0_' ,  hint = ( "Django 1.7 changed the global defaults for the MIDDLEWARE_CLASSES. "  "django.contrib.sessions.middleware.SessionMiddleware, "  "django.contrib.auth.middleware.AuthenticationMiddleware, and "  "django.contrib.messages.middleware.MessageMiddleware were removed from the defaults. "  "If your project needs these middleware then you should configure this setting." ) ,  obj = None ,  id = '1_7.W001' ,  )  ]
example# 756
if True: pass
else :pass
example# 757
return [ ]
example# 758
from __future__ import unicode_literals
example# 759
from django . utils . encoding import python_2_unicode_compatible , force_str
example# 760
DEBUG = 10
example# 761
INFO = 20
example# 762
WARNING = 30
example# 763
ERROR = 40
example# 764
CRITICAL = 50
example# 765
@ python_2_unicode_compatible
def dummy(): pass
example# 766
class CheckMessage ( object ) :pass
example# 767
def __init__ ( self , level , msg , hint = None , obj = None , id = None ) :pass
example# 768
assert isinstance ( level , int ) , '_STR:0_'
example# 769
self . level = level
example# 770
self . msg = msg
example# 771
self . hint = hint
example# 772
self . obj = obj
example# 773
self . id = id
example# 774
def __eq__ ( self , other ) :pass
example# 775
return all ( getattr ( self , attr ) == getattr ( other , attr )  for attr in [ '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' , '_STR:4_' ] )
example# 776
def __ne__ ( self , other ) :pass
example# 777
return not ( self == other )
example# 778
def __str__ ( self ) :pass
example# 779
from django . db import models
example# 780
if self . obj is None :pass
example# 781
obj = '_STR:0_'
example# 782
if True: pass
elif isinstance ( self . obj , models . base . ModelBase ) :pass
example# 783
model = self . obj
example# 784
app = model . _meta . app_label
example# 785
obj = '%s.%s' % ( app , model . _meta . object_name )
example# 786
if True: pass
else :pass
example# 787
obj = force_str ( self . obj )
example# 788
id = "(%s) " % self . id if self . id else ""
example# 789
hint = '_STR:0_' % self . hint if self . hint else ''
example# 790
return '_STR:0_' % ( obj , id , self . msg , hint )
example# 791
def __repr__ ( self ) :pass
example# 792
return '_STR:0_' % ( self . __class__ . __name__ , self . level , self . msg , self . hint , self . obj , self . id )
example# 793
def is_serious ( self ) :pass
example# 794
return self . level >= ERROR
example# 795
def is_silenced ( self ) :pass
example# 796
from django . conf import settings
example# 797
return self . id in settings . SILENCED_SYSTEM_CHECKS
example# 798
class Debug ( CheckMessage ) :pass
example# 799
def __init__ ( self , * args , ** kwargs ) :pass
example# 800
return super ( Debug , self ) . __init__ ( DEBUG , * args , ** kwargs )
example# 801
class Info ( CheckMessage ) :pass
example# 802
def __init__ ( self , * args , ** kwargs ) :pass
example# 803
return super ( Info , self ) . __init__ ( INFO , * args , ** kwargs )
example# 804
class Warning ( CheckMessage ) :pass
example# 805
def __init__ ( self , * args , ** kwargs ) :pass
example# 806
return super ( Warning , self ) . __init__ ( WARNING , * args , ** kwargs )
example# 807
class Error ( CheckMessage ) :pass
example# 808
def __init__ ( self , * args , ** kwargs ) :pass
example# 809
return super ( Error , self ) . __init__ ( ERROR , * args , ** kwargs )
example# 810
class Critical ( CheckMessage ) :pass
example# 811
def __init__ ( self , * args , ** kwargs ) :pass
example# 812
return super ( Critical , self ) . __init__ ( CRITICAL , * args , ** kwargs )
example# 813
from __future__ import unicode_literals
example# 814
from itertools import chain
example# 815
import types
example# 816
from django . apps import apps
example# 817
from . import Error , Tags , register
example# 818
@ register ( Tags . models )
def dummy(): pass
example# 819
def check_all_models ( app_configs = None , ** kwargs ) :pass
example# 820
errors = [ model . check ( ** kwargs )  for model in apps . get_models ( )  if app_configs is None or model . _meta . app_config in app_configs ]
example# 821
return list ( chain ( * errors ) )
example# 822
@ register ( Tags . models , Tags . signals )
def dummy(): pass
example# 823
def check_model_signals ( app_configs = None , ** kwargs ) :pass
example# 824
from django . db import models
example# 825
errors = [ ]
example# 826
for name in dir ( models . signals ) :pass
example# 827
obj = getattr ( models . signals , name )
example# 828
if isinstance ( obj , models . signals . ModelSignal ) :pass
example# 829
for reference , receivers in obj . unresolved_references . items ( ) :pass
example# 830
for receiver , _ , _ in receivers :pass
example# 831
if isinstance ( receiver , types . FunctionType ) :pass
example# 832
description = '_STR:0_' % receiver . __name__
example# 833
if True: pass
else :pass
example# 834
description = '_STR:0_' % receiver . __class__ . __name__
example# 835
errors . append (  Error (  "%s was connected to the '%s' signal "  "with a lazy reference to the '%s' sender, "  "which has not been installed." % (  description , name , '.' . join ( reference )  ) ,  obj = receiver . __module__ ,  hint = None ,  id = 'signals.E001'  )  )
example# 836
return errors
example# 837
from __future__ import unicode_literals
example# 838
from itertools import chain
example# 839
from django . utils . itercompat import is_iterable
example# 840
class Tags ( object ) :pass
example# 841
admin = '_STR:0_'
example# 842
compatibility = '_STR:0_'
example# 843
models = '_STR:0_'
example# 844
signals = '_STR:0_'
example# 845
class CheckRegistry ( object ) :pass
example# 846
def __init__ ( self ) :pass
example# 847
self . registered_checks = [ ]
example# 848
def register ( self , * tags ) :pass
example# 849
def inner ( check ) :pass
example# 850
check . tags = tags
example# 851
if check not in self . registered_checks :pass
example# 852
self . registered_checks . append ( check )
example# 853
return check
example# 854
return inner
example# 855
def run_checks ( self , app_configs = None , tags = None ) :pass
example# 856
errors = [ ]
example# 857
if tags is not None :pass
example# 858
checks = [ check for check in self . registered_checks  if hasattr ( check , '_STR:0_' ) and set ( check . tags ) & set ( tags ) ]
example# 859
if True: pass
else :pass
example# 860
checks = self . registered_checks
example# 861
for check in checks :pass
example# 862
new_errors = check ( app_configs = app_configs )
example# 863
assert is_iterable ( new_errors ) , (  "The function %r did not return a list. All functions registered "  "with the checks registry must return a list." % check )
example# 864
errors . extend ( new_errors )
example# 865
return errors
example# 866
def tag_exists ( self , tag ) :pass
example# 867
return tag in self . tags_available ( )
example# 868
def tags_available ( self ) :pass
example# 869
return set ( chain ( * [ check . tags for check in self . registered_checks if hasattr ( check , '_STR:0_' ) ] ) )
example# 870
registry = CheckRegistry ( )
example# 871
register = registry . register
example# 872
run_checks = registry . run_checks
example# 873
tag_exists = registry . tag_exists
example# 874
from __future__ import unicode_literals
example# 875
from django . conf import settings
example# 876
from django . middleware . csrf import get_token
example# 877
from django . utils import six
example# 878
from django . utils . encoding import smart_text
example# 879
from django . utils . functional import lazy
example# 880
def csrf ( request ) :pass
example# 881
def _get_val ( ) :pass
example# 882
token = get_token ( request )
example# 883
if token is None :pass
example# 884
return '_STR:0_'
example# 885
if True: pass
else :pass
example# 886
return smart_text ( token )
example# 887
_get_val = lazy ( _get_val , six . text_type )
example# 888
return { '_STR:0_' : _get_val ( ) }
example# 889
def debug ( request ) :pass
example# 890
context_extras = { }
example# 891
if settings . DEBUG and request . META . get ( '_STR:0_' ) in settings . INTERNAL_IPS :pass
example# 892
context_extras [ '_STR:0_' ] = True
example# 893
from django . db import connection
example# 894
context_extras [ 'sql_queries' ] = connection . queries
example# 895
return context_extras
example# 896
def i18n ( request ) :pass
example# 897
from django . utils import translation
example# 898
context_extras = { }
example# 899
context_extras [ '_STR:0_' ] = settings . LANGUAGES
example# 900
context_extras [ '_STR:0_' ] = translation . get_language ( )
example# 901
context_extras [ '_STR:0_' ] = translation . get_language_bidi ( )
example# 902
return context_extras
example# 903
def tz ( request ) :pass
example# 904
from django . utils import timezone
example# 905
return { '_STR:0_' : timezone . get_current_timezone_name ( ) }
example# 906
def static ( request ) :pass
example# 907
return { '_STR:0_' : settings . STATIC_URL }
example# 908
def media ( request ) :pass
example# 909
return { '_STR:0_' : settings . MEDIA_URL }
example# 910
def request ( request ) :pass
example# 911
return { '_STR:0_' : request }
example# 912
from functools import reduce
example# 913
import operator
example# 914
from django . utils import six
example# 915
from django . utils . encoding import force_text
example# 916
class DjangoRuntimeWarning ( RuntimeWarning ) :pass
example# 917
pass
example# 918
class AppRegistryNotReady ( Exception ) :pass
example# 919
pass
example# 920
class ObjectDoesNotExist ( Exception ) :pass
example# 921
silent_variable_failure = True
example# 922
class MultipleObjectsReturned ( Exception ) :pass
example# 923
pass
example# 924
class SuspiciousOperation ( Exception ) :pass
example# 925
class SuspiciousMultipartForm ( SuspiciousOperation ) :pass
example# 926
pass
example# 927
class SuspiciousFileOperation ( SuspiciousOperation ) :pass
example# 928
pass
example# 929
class DisallowedHost ( SuspiciousOperation ) :pass
example# 930
pass
example# 931
class DisallowedRedirect ( SuspiciousOperation ) :pass
example# 932
pass
example# 933
class PermissionDenied ( Exception ) :pass
example# 934
pass
example# 935
class ViewDoesNotExist ( Exception ) :pass
example# 936
pass
example# 937
class MiddlewareNotUsed ( Exception ) :pass
example# 938
pass
example# 939
class ImproperlyConfigured ( Exception ) :pass
example# 940
pass
example# 941
class FieldError ( Exception ) :pass
example# 942
pass
example# 943
NON_FIELD_ERRORS = '_STR:0_'
example# 944
class ValidationError ( Exception ) :pass
example# 945
def __init__ ( self , message , code = None , params = None ) :pass
example# 946
super ( ValidationError , self ) . __init__ ( message , code , params )
example# 947
if isinstance ( message , ValidationError ) :pass
example# 948
if hasattr ( message , '_STR:0_' ) :pass
example# 949
message = message . error_dict
example# 950
if True: pass
elif not hasattr ( message , '_STR:0_' if six . PY3 else '_STR:1_' ) :pass
example# 951
message = message . error_list
example# 952
if True: pass
else :pass
example# 953
message , code , params = message . message , message . code , message . params
example# 954
if isinstance ( message , dict ) :pass
example# 955
self . error_dict = { }
example# 956
for field , messages in message . items ( ) :pass
example# 957
if not isinstance ( messages , ValidationError ) :pass
example# 958
messages = ValidationError ( messages )
example# 959
self . error_dict [ field ] = messages . error_list
example# 960
if True: pass
elif isinstance ( message , list ) :pass
example# 961
self . error_list = [ ]
example# 962
for message in message :pass
example# 963
if not isinstance ( message , ValidationError ) :pass
example# 964
message = ValidationError ( message )
example# 965
self . error_list . extend ( message . error_list )
example# 966
if True: pass
else :pass
example# 967
self . message = message
example# 968
self . code = code
example# 969
self . params = params
example# 970
self . error_list = [ self ]
example# 971
@ property
def dummy(): pass
example# 972
def message_dict ( self ) :pass
example# 973
getattr ( self , '_STR:0_' )
example# 974
return dict ( self )
example# 975
@ property
def dummy(): pass
example# 976
def messages ( self ) :pass
example# 977
if hasattr ( self , '_STR:0_' ) :pass
example# 978
return reduce ( operator . add , dict ( self ) . values ( ) )
example# 979
return list ( self )
example# 980
def update_error_dict ( self , error_dict ) :pass
example# 981
if hasattr ( self , '_STR:0_' ) :pass
example# 982
for field , error_list in self . error_dict . items ( ) :pass
example# 983
error_dict . setdefault ( field , [ ] ) . extend ( error_list )
example# 984
if True: pass
else :pass
example# 985
error_dict . setdefault ( NON_FIELD_ERRORS , [ ] ) . extend ( self . error_list )
example# 986
return error_dict
example# 987
def __iter__ ( self ) :pass
example# 988
if hasattr ( self , '_STR:0_' ) :pass
example# 989
for field , errors in self . error_dict . items ( ) :pass
example# 990
yield field , list ( ValidationError ( errors ) )
example# 991
if True: pass
else :pass
example# 992
for error in self . error_list :pass
example# 993
message = error . message
example# 994
if error . params :pass
example# 995
message %= error . params
example# 996
yield force_text ( message )
example# 997
def __str__ ( self ) :pass
example# 998
if hasattr ( self , '_STR:0_' ) :pass
example# 999
return repr ( dict ( self ) )
example# 1000
return repr ( list ( self ) )
example# 1001
def __repr__ ( self ) :pass
example# 1002
return '_STR:0_' % self
example# 1003
from django . core . files . base import File
example# 1004
__all__ = [ '_STR:0_' ]
example# 1005
from __future__ import unicode_literals
example# 1006
import os
example# 1007
from io import BytesIO , StringIO , UnsupportedOperation
example# 1008
from django . utils . encoding import smart_text
example# 1009
from django . core . files . utils import FileProxyMixin
example# 1010
from django . utils import six
example# 1011
from django . utils . encoding import force_bytes , python_2_unicode_compatible
example# 1012
@ python_2_unicode_compatible
def dummy(): pass
example# 1013
class File ( FileProxyMixin ) :pass
example# 1014
DEFAULT_CHUNK_SIZE = 64 * 2 ** 10
example# 1015
def __init__ ( self , file , name = None ) :pass
example# 1016
self . file = file
example# 1017
if name is None :pass
example# 1018
name = getattr ( file , '_STR:0_' , None )
example# 1019
self . name = name
example# 1020
if hasattr ( file , '_STR:0_' ) :pass
example# 1021
self . mode = file . mode
example# 1022
def __str__ ( self ) :pass
example# 1023
return smart_text ( self . name or '' )
example# 1024
def __repr__ ( self ) :pass
example# 1025
return "<%s: %s>" % ( self . __class__ . __name__ , self or "None" )
example# 1026
def __bool__ ( self ) :pass
example# 1027
return bool ( self . name )
example# 1028
def __nonzero__ ( self ) :pass
example# 1029
return type ( self ) . __bool__ ( self )
example# 1030
def __len__ ( self ) :pass
example# 1031
return self . size
example# 1032
def _get_size_from_underlying_file ( self ) :pass
example# 1033
if hasattr ( self . file , '_STR:0_' ) :pass
example# 1034
return self . file . size
example# 1035
if hasattr ( self . file , '_STR:0_' ) :pass
example# 1036
try :pass
except: pass
example# 1037
return os . path . getsize ( self . file . name )
example# 1038
try: pass
except ( OSError , TypeError ) :pass
example# 1039
pass
example# 1040
if hasattr ( self . file , '_STR:0_' ) and hasattr ( self . file , '_STR:1_' ) :pass
example# 1041
pos = self . file . tell ( )
example# 1042
self . file . seek ( 0 , os . SEEK_END )
example# 1043
size = self . file . tell ( )
example# 1044
self . file . seek ( pos )
example# 1045
return size
example# 1046
raise AttributeError ( '_STR:0_' )
example# 1047
def _get_size ( self ) :pass
example# 1048
if hasattr ( self , '_STR:0_' ) :pass
example# 1049
return self . _size
example# 1050
self . _size = self . _get_size_from_underlying_file ( )
example# 1051
return self . _size
example# 1052
def _set_size ( self , size ) :pass
example# 1053
self . _size = size
example# 1054
size = property ( _get_size , _set_size )
example# 1055
def _get_closed ( self ) :pass
example# 1056
return not self . file or self . file . closed
example# 1057
closed = property ( _get_closed )
example# 1058
def chunks ( self , chunk_size = None ) :pass
example# 1059
if not chunk_size :pass
example# 1060
chunk_size = self . DEFAULT_CHUNK_SIZE
example# 1061
try :pass
except: pass
example# 1062
self . seek ( 0 )
example# 1063
try: pass
except ( AttributeError , UnsupportedOperation ) :pass
example# 1064
pass
example# 1065
while True :pass
example# 1066
data = self . read ( chunk_size )
example# 1067
if not data :pass
example# 1068
break
example# 1069
yield data
example# 1070
def multiple_chunks ( self , chunk_size = None ) :pass
example# 1071
if not chunk_size :pass
example# 1072
chunk_size = self . DEFAULT_CHUNK_SIZE
example# 1073
return self . size > chunk_size
example# 1074
def __iter__ ( self ) :pass
example# 1075
buffer_ = None
example# 1076
for chunk in self . chunks ( ) :pass
example# 1077
chunk_buffer = BytesIO ( chunk )
example# 1078
for line in chunk_buffer :pass
example# 1079
if buffer_ :pass
example# 1080
line = buffer_ + line
example# 1081
buffer_ = None
example# 1082
if line [ - 1 : ] in ( b'\n' , b'\r' ) :pass
example# 1083
yield line
example# 1084
if True: pass
else :pass
example# 1085
buffer_ = line
example# 1086
if buffer_ is not None :pass
example# 1087
yield buffer_
example# 1088
def __enter__ ( self ) :pass
example# 1089
return self
example# 1090
def __exit__ ( self , exc_type , exc_value , tb ) :pass
example# 1091
self . close ( )
example# 1092
def open ( self , mode = None ) :pass
example# 1093
if not self . closed :pass
example# 1094
self . seek ( 0 )
example# 1095
if True: pass
elif self . name and os . path . exists ( self . name ) :pass
example# 1096
self . file = open ( self . name , mode or self . mode )
example# 1097
if True: pass
else :pass
example# 1098
raise ValueError ( '_STR:0_' )
example# 1099
def close ( self ) :pass
example# 1100
self . file . close ( )
example# 1101
@ python_2_unicode_compatible
def dummy(): pass
example# 1102
class ContentFile ( File ) :pass
example# 1103
def __init__ ( self , content , name = None ) :pass
example# 1104
if six . PY3 :pass
example# 1105
stream_class = StringIO if isinstance ( content , six . text_type ) else BytesIO
example# 1106
if True: pass
else :pass
example# 1107
stream_class = BytesIO
example# 1108
content = force_bytes ( content )
example# 1109
super ( ContentFile , self ) . __init__ ( stream_class ( content ) , name = name )
example# 1110
self . size = len ( content )
example# 1111
def __str__ ( self ) :pass
example# 1112
return '_STR:0_'
example# 1113
def __bool__ ( self ) :pass
example# 1114
return True
example# 1115
def __nonzero__ ( self ) :pass
example# 1116
return type ( self ) . __bool__ ( self )
example# 1117
def open ( self , mode = None ) :pass
example# 1118
self . seek ( 0 )
example# 1119
def close ( self ) :pass
example# 1120
pass
example# 1121
import zlib
example# 1122
from django . core . files import File
example# 1123
class ImageFile ( File ) :pass
example# 1124
def _get_width ( self ) :pass
example# 1125
return self . _get_image_dimensions ( ) [ 0 ]
example# 1126
width = property ( _get_width )
example# 1127
def _get_height ( self ) :pass
example# 1128
return self . _get_image_dimensions ( ) [ 1 ]
example# 1129
height = property ( _get_height )
example# 1130
def _get_image_dimensions ( self ) :pass
example# 1131
if not hasattr ( self , '_STR:0_' ) :pass
example# 1132
close = self . closed
example# 1133
self . open ( )
example# 1134
self . _dimensions_cache = get_image_dimensions ( self , close = close )
example# 1135
return self . _dimensions_cache
example# 1136
def get_image_dimensions ( file_or_path , close = False ) :pass
example# 1137
from PIL import ImageFile as PillowImageFile
example# 1138
p = PillowImageFile . Parser ( )
example# 1139
if hasattr ( file_or_path , '_STR:0_' ) :pass
example# 1140
file = file_or_path
example# 1141
file_pos = file . tell ( )
example# 1142
file . seek ( 0 )
example# 1143
if True: pass
else :pass
example# 1144
file = open ( file_or_path , 'rb' )
example# 1145
close = True
example# 1146
try :pass
except: pass
example# 1147
chunk_size = 1024
example# 1148
while 1 :pass
example# 1149
data = file . read ( chunk_size )
example# 1150
if not data :pass
example# 1151
break
example# 1152
try :pass
except: pass
example# 1153
p . feed ( data )
example# 1154
try: pass
except zlib . error as e :pass
example# 1155
if e . args [ 0 ] . startswith ( '_STR:0_' ) :pass
example# 1156
pass
example# 1157
if True: pass
else :pass
example# 1158
raise
example# 1159
if p . image :pass
example# 1160
return p . image . size
example# 1161
chunk_size *= 2
example# 1162
return None
example# 1163
try: pass
finally :pass
example# 1164
if close :pass
example# 1165
file . close ( )
example# 1166
if True: pass
else :pass
example# 1167
file . seek ( file_pos )
example# 1168
import os
example# 1169
__all__ = ( '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' , '_STR:4_' )
example# 1170
def _fd ( f ) :pass
example# 1171
return f . fileno ( ) if hasattr ( f , '_STR:0_' ) else f
example# 1172
if os . name == '_STR:0_' :pass
example# 1173
import msvcrt
example# 1174
from ctypes import ( sizeof , c_ulong , c_void_p , c_int64 ,  Structure , Union , POINTER , windll , byref )
example# 1175
from ctypes . wintypes import BOOL , DWORD , HANDLE
example# 1176
LOCK_SH = 0
example# 1177
LOCK_NB = 0x1
example# 1178
LOCK_EX = 0x2
example# 1179
if sizeof ( c_ulong ) != sizeof ( c_void_p ) :pass
example# 1180
ULONG_PTR = c_int64
example# 1181
if True: pass
else :pass
example# 1182
ULONG_PTR = c_ulong
example# 1183
PVOID = c_void_p
example# 1184
class _OFFSET ( Structure ) :pass
example# 1185
_fields_ = [  ( '_STR:0_' , DWORD ) ,  ( '_STR:1_' , DWORD ) ]
example# 1186
class _OFFSET_UNION ( Union ) :pass
example# 1187
_anonymous_ = [ '_STR:0_' ]
example# 1188
_fields_ = [  ( '_STR:0_' , _OFFSET ) ,  ( '_STR:1_' , PVOID ) ]
example# 1189
class OVERLAPPED ( Structure ) :pass
example# 1190
_anonymous_ = [ '_STR:0_' ]
example# 1191
_fields_ = [  ( '_STR:0_' , ULONG_PTR ) ,  ( 'InternalHigh' , ULONG_PTR ) ,  ( '_offset_union' , _OFFSET_UNION ) ,  ( 'hEvent' , HANDLE ) ]
example# 1192
LPOVERLAPPED = POINTER ( OVERLAPPED )
example# 1193
LockFileEx = windll . kernel32 . LockFileEx
example# 1194
LockFileEx . restype = BOOL
example# 1195
LockFileEx . argtypes = [ HANDLE , DWORD , DWORD , DWORD , DWORD , LPOVERLAPPED ]
example# 1196
UnlockFileEx = windll . kernel32 . UnlockFileEx
example# 1197
UnlockFileEx . restype = BOOL
example# 1198
UnlockFileEx . argtypes = [ HANDLE , DWORD , DWORD , DWORD , LPOVERLAPPED ]
example# 1199
def lock ( f , flags ) :pass
example# 1200
hfile = msvcrt . get_osfhandle ( _fd ( f ) )
example# 1201
overlapped = OVERLAPPED ( )
example# 1202
ret = LockFileEx ( hfile , flags , 0 , 0 , 0xFFFF0000 , byref ( overlapped ) )
example# 1203
return bool ( ret )
example# 1204
def unlock ( f ) :pass
example# 1205
hfile = msvcrt . get_osfhandle ( _fd ( f ) )
example# 1206
overlapped = OVERLAPPED ( )
example# 1207
ret = UnlockFileEx ( hfile , 0 , 0 , 0xFFFF0000 , byref ( overlapped ) )
example# 1208
return bool ( ret )
example# 1209
if True: pass
else :pass
example# 1210
try :pass
except: pass
example# 1211
import fcntl
example# 1212
LOCK_SH = fcntl . LOCK_SH
example# 1213
LOCK_NB = fcntl . LOCK_NB
example# 1214
LOCK_EX = fcntl . LOCK_EX
example# 1215
try: pass
except ( ImportError , AttributeError ) :pass
example# 1216
LOCK_EX = LOCK_SH = LOCK_NB = 0
example# 1217
def lock ( f , flags ) :pass
example# 1218
return False
example# 1219
def unlock ( f ) :pass
example# 1220
return True
example# 1221
if True: pass
else :pass
example# 1222
def lock ( f , flags ) :pass
example# 1223
ret = fcntl . flock ( _fd ( f ) , flags )
example# 1224
return ( ret == 0 )
example# 1225
def unlock ( f ) :pass
example# 1226
ret = fcntl . flock ( _fd ( f ) , fcntl . LOCK_UN )
example# 1227
return ( ret == 0 )
example# 1228
import os
example# 1229
from django . core . files import locks
example# 1230
try :pass
except: pass
example# 1231
from shutil import copystat
example# 1232
try: pass
except ImportError :pass
example# 1233
import stat
example# 1234
def copystat ( src , dst ) :pass
example# 1235
st = os . stat ( src )
example# 1236
mode = stat . S_IMODE ( st . st_mode )
example# 1237
if hasattr ( os , '_STR:0_' ) :pass
example# 1238
os . utime ( dst , ( st . st_atime , st . st_mtime ) )
example# 1239
if hasattr ( os , '_STR:0_' ) :pass
example# 1240
os . chmod ( dst , mode )
example# 1241
__all__ = [ '_STR:0_' ]
example# 1242
def _samefile ( src , dst ) :pass
example# 1243
if hasattr ( os . path , '_STR:0_' ) :pass
example# 1244
try :pass
except: pass
example# 1245
return os . path . samefile ( src , dst )
example# 1246
try: pass
except OSError :pass
example# 1247
return False
example# 1248
return ( os . path . normcase ( os . path . abspath ( src ) ) ==  os . path . normcase ( os . path . abspath ( dst ) ) )
example# 1249
def file_move_safe ( old_file_name , new_file_name , chunk_size = 1024 * 64 , allow_overwrite = False ) :pass
example# 1250
if _samefile ( old_file_name , new_file_name ) :pass
example# 1251
return
example# 1252
try :pass
except: pass
example# 1253
if not allow_overwrite and os . access ( new_file_name , os . F_OK ) :pass
example# 1254
raise IOError ( '_STR:0_' % new_file_name )
example# 1255
os . rename ( old_file_name , new_file_name )
example# 1256
return
example# 1257
try: pass
except OSError :pass
example# 1258
pass
example# 1259
with open ( old_file_name , 'rb' ) as old_file :pass
example# 1260
fd = os . open ( new_file_name , ( os . O_WRONLY | os . O_CREAT | getattr ( os , '_STR:0_' , 0 ) |  ( os . O_EXCL if not allow_overwrite else 0 ) ) )
example# 1261
try :pass
except: pass
example# 1262
locks . lock ( fd , locks . LOCK_EX )
example# 1263
current_chunk = None
example# 1264
while current_chunk != b'' :pass
example# 1265
current_chunk = old_file . read ( chunk_size )
example# 1266
os . write ( fd , current_chunk )
example# 1267
try: pass
finally :pass
example# 1268
locks . unlock ( fd )
example# 1269
os . close ( fd )
example# 1270
copystat ( old_file_name , new_file_name )
example# 1271
try :pass
except: pass
example# 1272
os . remove ( old_file_name )
example# 1273
try: pass
except OSError as e :pass
example# 1274
if getattr ( e , '_STR:0_' , 0 ) != 32 and getattr ( e , '_STR:1_' , 0 ) != 13 :pass
example# 1275
raise
example# 1276
import os
example# 1277
import errno
example# 1278
import itertools
example# 1279
from datetime import datetime
example# 1280
from django . conf import settings
example# 1281
from django . core . exceptions import SuspiciousFileOperation
example# 1282
from django . core . files import locks , File
example# 1283
from django . core . files . move import file_move_safe
example# 1284
from django . utils . encoding import force_text , filepath_to_uri
example# 1285
from django . utils . functional import LazyObject
example# 1286
from django . utils . module_loading import import_string
example# 1287
from django . utils . six . moves . urllib . parse import urljoin
example# 1288
from django . utils . text import get_valid_filename
example# 1289
from django . utils . _os import safe_join , abspathu
example# 1290
from django . utils . deconstruct import deconstructible
example# 1291
__all__ = ( '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' )
example# 1292
class Storage ( object ) :pass
example# 1293
def open ( self , name , mode = '_STR:0_' ) :pass
example# 1294
return self . _open ( name , mode )
example# 1295
def save ( self , name , content ) :pass
example# 1296
if name is None :pass
example# 1297
name = content . name
example# 1298
if not hasattr ( content , '_STR:0_' ) :pass
example# 1299
content = File ( content )
example# 1300
name = self . get_available_name ( name )
example# 1301
name = self . _save ( name , content )
example# 1302
return force_text ( name . replace ( '\\' , '/' ) )
example# 1303
def get_valid_name ( self , name ) :pass
example# 1304
return get_valid_filename ( name )
example# 1305
def get_available_name ( self , name ) :pass
example# 1306
dir_name , file_name = os . path . split ( name )
example# 1307
file_root , file_ext = os . path . splitext ( file_name )
example# 1308
count = itertools . count ( 1 )
example# 1309
while self . exists ( name ) :pass
example# 1310
name = os . path . join ( dir_name , '_STR:0_' % ( file_root , next ( count ) , file_ext ) )
example# 1311
return name
example# 1312
def path ( self , name ) :pass
example# 1313
raise NotImplementedError ( '_STR:0_' )
example# 1314
def delete ( self , name ) :pass
example# 1315
raise NotImplementedError ( '_STR:0_' )
example# 1316
def exists ( self , name ) :pass
example# 1317
raise NotImplementedError ( '_STR:0_' )
example# 1318
def listdir ( self , path ) :pass
example# 1319
raise NotImplementedError ( '_STR:0_' )
example# 1320
def size ( self , name ) :pass
example# 1321
raise NotImplementedError ( '_STR:0_' )
example# 1322
def url ( self , name ) :pass
example# 1323
raise NotImplementedError ( '_STR:0_' )
example# 1324
def accessed_time ( self , name ) :pass
example# 1325
raise NotImplementedError ( '_STR:0_' )
example# 1326
def created_time ( self , name ) :pass
example# 1327
raise NotImplementedError ( '_STR:0_' )
example# 1328
def modified_time ( self , name ) :pass
example# 1329
raise NotImplementedError ( '_STR:0_' )
example# 1330
@ deconstructible
def dummy(): pass
example# 1331
class FileSystemStorage ( Storage ) :pass
example# 1332
def __init__ ( self , location = None , base_url = None , file_permissions_mode = None ,  directory_permissions_mode = None ) :pass
example# 1333
if location is None :pass
example# 1334
location = settings . MEDIA_ROOT
example# 1335
self . base_location = location
example# 1336
self . location = abspathu ( self . base_location )
example# 1337
if base_url is None :pass
example# 1338
base_url = settings . MEDIA_URL
example# 1339
if True: pass
elif not base_url . endswith ( '_STR:0_' ) :pass
example# 1340
base_url += '_STR:0_'
example# 1341
self . base_url = base_url
example# 1342
self . file_permissions_mode = (  file_permissions_mode if file_permissions_mode is not None  else settings . FILE_UPLOAD_PERMISSIONS  )
example# 1343
self . directory_permissions_mode = (  directory_permissions_mode if directory_permissions_mode is not None  else settings . FILE_UPLOAD_DIRECTORY_PERMISSIONS  )
example# 1344
def _open ( self , name , mode = '_STR:0_' ) :pass
example# 1345
return File ( open ( self . path ( name ) , mode ) )
example# 1346
def _save ( self , name , content ) :pass
example# 1347
full_path = self . path ( name )
example# 1348
directory = os . path . dirname ( full_path )
example# 1349
if not os . path . exists ( directory ) :pass
example# 1350
try :pass
except: pass
example# 1351
if self . directory_permissions_mode is not None :pass
example# 1352
old_umask = os . umask ( 0 )
example# 1353
try :pass
except: pass
example# 1354
os . makedirs ( directory , self . directory_permissions_mode )
example# 1355
try: pass
finally :pass
example# 1356
os . umask ( old_umask )
example# 1357
if True: pass
else :pass
example# 1358
os . makedirs ( directory )
example# 1359
try: pass
except OSError as e :pass
example# 1360
if e . errno != errno . EEXIST :pass
example# 1361
raise
example# 1362
if not os . path . isdir ( directory ) :pass
example# 1363
raise IOError ( '_STR:0_' % directory )
example# 1364
while True :pass
example# 1365
try :pass
except: pass
example# 1366
if hasattr ( content , '_STR:0_' ) :pass
example# 1367
file_move_safe ( content . temporary_file_path ( ) , full_path )
example# 1368
if True: pass
else :pass
example# 1369
flags = ( os . O_WRONLY | os . O_CREAT | os . O_EXCL |  getattr ( os , 'O_BINARY' , 0 ) )
example# 1370
fd = os . open ( full_path , flags , 0o666 )
example# 1371
_file = None
example# 1372
try :pass
except: pass
example# 1373
locks . lock ( fd , locks . LOCK_EX )
example# 1374
for chunk in content . chunks ( ) :pass
example# 1375
if _file is None :pass
example# 1376
mode = '_STR:0_' if isinstance ( chunk , bytes ) else '_STR:1_'
example# 1377
_file = os . fdopen ( fd , mode )
example# 1378
_file . write ( chunk )
example# 1379
try: pass
finally :pass
example# 1380
locks . unlock ( fd )
example# 1381
if _file is not None :pass
example# 1382
_file . close ( )
example# 1383
if True: pass
else :pass
example# 1384
os . close ( fd )
example# 1385
try: pass
except OSError as e :pass
example# 1386
if e . errno == errno . EEXIST :pass
example# 1387
name = self . get_available_name ( name )
example# 1388
full_path = self . path ( name )
example# 1389
if True: pass
else :pass
example# 1390
raise
example# 1391
if True: pass
else :pass
example# 1392
break
example# 1393
if self . file_permissions_mode is not None :pass
example# 1394
os . chmod ( full_path , self . file_permissions_mode )
example# 1395
return name
example# 1396
def delete ( self , name ) :pass
example# 1397
assert name , '_STR:0_'
example# 1398
name = self . path ( name )
example# 1399
if os . path . exists ( name ) :pass
example# 1400
try :pass
except: pass
example# 1401
os . remove ( name )
example# 1402
try: pass
except OSError as e :pass
example# 1403
if e . errno != errno . ENOENT :pass
example# 1404
raise
example# 1405
def exists ( self , name ) :pass
example# 1406
return os . path . exists ( self . path ( name ) )
example# 1407
def listdir ( self , path ) :pass
example# 1408
path = self . path ( path )
example# 1409
directories , files = [ ] , [ ]
example# 1410
for entry in os . listdir ( path ) :pass
example# 1411
if os . path . isdir ( os . path . join ( path , entry ) ) :pass
example# 1412
directories . append ( entry )
example# 1413
if True: pass
else :pass
example# 1414
files . append ( entry )
example# 1415
return directories , files
example# 1416
def path ( self , name ) :pass
example# 1417
try :pass
except: pass
example# 1418
path = safe_join ( self . location , name )
example# 1419
try: pass
except ValueError :pass
example# 1420
raise SuspiciousFileOperation ( '_STR:0_' % name )
example# 1421
return os . path . normpath ( path )
example# 1422
def size ( self , name ) :pass
example# 1423
return os . path . getsize ( self . path ( name ) )
example# 1424
def url ( self , name ) :pass
example# 1425
if self . base_url is None :pass
example# 1426
raise ValueError ( '_STR:0_' )
example# 1427
return urljoin ( self . base_url , filepath_to_uri ( name ) )
example# 1428
def accessed_time ( self , name ) :pass
example# 1429
return datetime . fromtimestamp ( os . path . getatime ( self . path ( name ) ) )
example# 1430
def created_time ( self , name ) :pass
example# 1431
return datetime . fromtimestamp ( os . path . getctime ( self . path ( name ) ) )
example# 1432
def modified_time ( self , name ) :pass
example# 1433
return datetime . fromtimestamp ( os . path . getmtime ( self . path ( name ) ) )
example# 1434
def get_storage_class ( import_path = None ) :pass
example# 1435
return import_string ( import_path or settings . DEFAULT_FILE_STORAGE )
example# 1436
class DefaultStorage ( LazyObject ) :pass
example# 1437
def _setup ( self ) :pass
example# 1438
self . _wrapped = get_storage_class ( ) ( )
example# 1439
default_storage = DefaultStorage ( )
example# 1440
import os
example# 1441
import tempfile
example# 1442
from django . core . files . utils import FileProxyMixin
example# 1443
__all__ = ( '_STR:0_' , '_STR:1_' , )
example# 1444
if os . name == '_STR:0_' :pass
example# 1445
class TemporaryFile ( FileProxyMixin ) :pass
example# 1446
def __init__ ( self , mode = '_STR:0_' , bufsize = - 1 , suffix = '' , prefix = '' ,  dir = None ) :pass
example# 1447
fd , name = tempfile . mkstemp ( suffix = suffix , prefix = prefix , dir = dir )
example# 1448
self . name = name
example# 1449
self . file = os . fdopen ( fd , mode , bufsize )
example# 1450
self . close_called = False
example# 1451
unlink = os . unlink
example# 1452
def close ( self ) :pass
example# 1453
if not self . close_called :pass
example# 1454
self . close_called = True
example# 1455
try :pass
except: pass
example# 1456
self . file . close ( )
example# 1457
try: pass
except ( OSError , IOError ) :pass
example# 1458
pass
example# 1459
try :pass
except: pass
example# 1460
self . unlink ( self . name )
example# 1461
try: pass
except ( OSError ) :pass
example# 1462
pass
example# 1463
@ property
def dummy(): pass
example# 1464
def closed ( self ) :pass
example# 1465
return self . file . closed
example# 1466
def __del__ ( self ) :pass
example# 1467
self . close ( )
example# 1468
def __enter__ ( self ) :pass
example# 1469
self . file . __enter__ ( )
example# 1470
return self
example# 1471
def __exit__ ( self , exc , value , tb ) :pass
example# 1472
self . file . __exit__ ( exc , value , tb )
example# 1473
NamedTemporaryFile = TemporaryFile
example# 1474
if True: pass
else :pass
example# 1475
NamedTemporaryFile = tempfile . NamedTemporaryFile
example# 1476
gettempdir = tempfile . gettempdir
example# 1477
import errno
example# 1478
import os
example# 1479
from io import BytesIO
example# 1480
from django . conf import settings
example# 1481
from django . core . files . base import File
example# 1482
from django . core . files import temp as tempfile
example# 1483
from django . utils . encoding import force_str
example# 1484
__all__ = ( '_STR:0_' , '_STR:1_' , '_STR:2_' ,  '_STR:3_' )
example# 1485
class UploadedFile ( File ) :pass
example# 1486
DEFAULT_CHUNK_SIZE = 64 * 2 ** 10
example# 1487
def __init__ ( self , file = None , name = None , content_type = None , size = None , charset = None , content_type_extra = None ) :pass
example# 1488
super ( UploadedFile , self ) . __init__ ( file , name )
example# 1489
self . size = size
example# 1490
self . content_type = content_type
example# 1491
self . charset = charset
example# 1492
self . content_type_extra = content_type_extra
example# 1493
def __repr__ ( self ) :pass
example# 1494
return force_str ( '_STR:0_' % (  self . __class__ . __name__ , self . name , self . content_type ) )
example# 1495
def _get_name ( self ) :pass
example# 1496
return self . _name
example# 1497
def _set_name ( self , name ) :pass
example# 1498
if name is not None :pass
example# 1499
name = os . path . basename ( name )
example# 1500
if len ( name ) > 255 :pass
example# 1501
name , ext = os . path . splitext ( name )
example# 1502
ext = ext [ : 255 ]
example# 1503
name = name [ : 255 - len ( ext ) ] + ext
example# 1504
self . _name = name
example# 1505
name = property ( _get_name , _set_name )
example# 1506
class TemporaryUploadedFile ( UploadedFile ) :pass
example# 1507
def __init__ ( self , name , content_type , size , charset , content_type_extra = None ) :pass
example# 1508
if settings . FILE_UPLOAD_TEMP_DIR :pass
example# 1509
file = tempfile . NamedTemporaryFile ( suffix = '_STR:0_' ,  dir = settings . FILE_UPLOAD_TEMP_DIR )
example# 1510
if True: pass
else :pass
example# 1511
file = tempfile . NamedTemporaryFile ( suffix = '_STR:0_' )
example# 1512
super ( TemporaryUploadedFile , self ) . __init__ ( file , name , content_type , size , charset , content_type_extra )
example# 1513
def temporary_file_path ( self ) :pass
example# 1514
return self . file . name
example# 1515
def close ( self ) :pass
example# 1516
try :pass
except: pass
example# 1517
return self . file . close ( )
example# 1518
try: pass
except OSError as e :pass
example# 1519
if e . errno != errno . ENOENT :pass
example# 1520
raise
example# 1521
class InMemoryUploadedFile ( UploadedFile ) :pass
example# 1522
def __init__ ( self , file , field_name , name , content_type , size , charset , content_type_extra = None ) :pass
example# 1523
super ( InMemoryUploadedFile , self ) . __init__ ( file , name , content_type , size , charset , content_type_extra )
example# 1524
self . field_name = field_name
example# 1525
def open ( self , mode = None ) :pass
example# 1526
self . file . seek ( 0 )
example# 1527
def chunks ( self , chunk_size = None ) :pass
example# 1528
self . file . seek ( 0 )
example# 1529
yield self . read ( )
example# 1530
def multiple_chunks ( self , chunk_size = None ) :pass
example# 1531
return False
example# 1532
class SimpleUploadedFile ( InMemoryUploadedFile ) :pass
example# 1533
def __init__ ( self , name , content , content_type = '_STR:0_' ) :pass
example# 1534
content = content or b''
example# 1535
super ( SimpleUploadedFile , self ) . __init__ ( BytesIO ( content ) , None , name ,  content_type , len ( content ) , None , None )
example# 1536
@ classmethod
def dummy(): pass
example# 1537
def from_dict ( cls , file_dict ) :pass
example# 1538
return cls ( file_dict [ '_STR:0_' ] ,  file_dict [ '_STR:1_' ] ,  file_dict . get ( 'content-type' , 'text/plain' ) )
example# 1539
from __future__ import unicode_literals
example# 1540
from io import BytesIO
example# 1541
from django . conf import settings
example# 1542
from django . core . files . uploadedfile import TemporaryUploadedFile , InMemoryUploadedFile
example# 1543
from django . utils . encoding import python_2_unicode_compatible
example# 1544
from django . utils . module_loading import import_string
example# 1545
__all__ = [  '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' ,  'TemporaryFileUploadHandler' , 'MemoryFileUploadHandler' , 'load_handler' ,  'StopFutureHandlers'  ]
example# 1546
class UploadFileException ( Exception ) :pass
example# 1547
pass
example# 1548
@ python_2_unicode_compatible
def dummy(): pass
example# 1549
class StopUpload ( UploadFileException ) :pass
example# 1550
def __init__ ( self , connection_reset = False ) :pass
example# 1551
self . connection_reset = connection_reset
example# 1552
def __str__ ( self ) :pass
example# 1553
if self . connection_reset :pass
example# 1554
return '_STR:0_'
example# 1555
if True: pass
else :pass
example# 1556
return '_STR:0_'
example# 1557
class SkipFile ( UploadFileException ) :pass
example# 1558
pass
example# 1559
class StopFutureHandlers ( UploadFileException ) :pass
example# 1560
pass
example# 1561
class FileUploadHandler ( object ) :pass
example# 1562
chunk_size = 64 * 2 ** 10
example# 1563
def __init__ ( self , request = None ) :pass
example# 1564
self . file_name = None
example# 1565
self . content_type = None
example# 1566
self . content_length = None
example# 1567
self . charset = None
example# 1568
self . content_type_extra = None
example# 1569
self . request = request
example# 1570
def handle_raw_input ( self , input_data , META , content_length , boundary , encoding = None ) :pass
example# 1571
pass
example# 1572
def new_file ( self , field_name , file_name , content_type , content_length , charset = None , content_type_extra = None ) :pass
example# 1573
self . field_name = field_name
example# 1574
self . file_name = file_name
example# 1575
self . content_type = content_type
example# 1576
self . content_length = content_length
example# 1577
self . charset = charset
example# 1578
self . content_type_extra = content_type_extra
example# 1579
def receive_data_chunk ( self , raw_data , start ) :pass
example# 1580
raise NotImplementedError ( '_STR:0_' )
example# 1581
def file_complete ( self , file_size ) :pass
example# 1582
raise NotImplementedError ( '_STR:0_' )
example# 1583
def upload_complete ( self ) :pass
example# 1584
pass
example# 1585
class TemporaryFileUploadHandler ( FileUploadHandler ) :pass
example# 1586
def __init__ ( self , * args , ** kwargs ) :pass
example# 1587
super ( TemporaryFileUploadHandler , self ) . __init__ ( * args , ** kwargs )
example# 1588
def new_file ( self , file_name , * args , ** kwargs ) :pass
example# 1589
super ( TemporaryFileUploadHandler , self ) . new_file ( file_name , * args , ** kwargs )
example# 1590
self . file = TemporaryUploadedFile ( self . file_name , self . content_type , 0 , self . charset , self . content_type_extra )
example# 1591
def receive_data_chunk ( self , raw_data , start ) :pass
example# 1592
self . file . write ( raw_data )
example# 1593
def file_complete ( self , file_size ) :pass
example# 1594
self . file . seek ( 0 )
example# 1595
self . file . size = file_size
example# 1596
return self . file
example# 1597
class MemoryFileUploadHandler ( FileUploadHandler ) :pass
example# 1598
def handle_raw_input ( self , input_data , META , content_length , boundary , encoding = None ) :pass
example# 1599
if content_length > settings . FILE_UPLOAD_MAX_MEMORY_SIZE :pass
example# 1600
self . activated = False
example# 1601
if True: pass
else :pass
example# 1602
self . activated = True
example# 1603
def new_file ( self , * args , ** kwargs ) :pass
example# 1604
super ( MemoryFileUploadHandler , self ) . new_file ( * args , ** kwargs )
example# 1605
if self . activated :pass
example# 1606
self . file = BytesIO ( )
example# 1607
raise StopFutureHandlers ( )
example# 1608
def receive_data_chunk ( self , raw_data , start ) :pass
example# 1609
if self . activated :pass
example# 1610
self . file . write ( raw_data )
example# 1611
if True: pass
else :pass
example# 1612
return raw_data
example# 1613
def file_complete ( self , file_size ) :pass
example# 1614
if not self . activated :pass
example# 1615
return
example# 1616
self . file . seek ( 0 )
example# 1617
return InMemoryUploadedFile (  file = self . file ,  field_name = self . field_name ,  name = self . file_name ,  content_type = self . content_type ,  size = file_size ,  charset = self . charset ,  content_type_extra = self . content_type_extra  )
example# 1618
def load_handler ( path , * args , ** kwargs ) :pass
example# 1619
return import_string ( path ) ( * args , ** kwargs )
example# 1620
class FileProxyMixin ( object ) :pass
example# 1621
encoding = property ( lambda self : self . file . encoding )
example# 1622
fileno = property ( lambda self : self . file . fileno )
example# 1623
flush = property ( lambda self : self . file . flush )
example# 1624
isatty = property ( lambda self : self . file . isatty )
example# 1625
newlines = property ( lambda self : self . file . newlines )
example# 1626
read = property ( lambda self : self . file . read )
example# 1627
readinto = property ( lambda self : self . file . readinto )
example# 1628
readline = property ( lambda self : self . file . readline )
example# 1629
readlines = property ( lambda self : self . file . readlines )
example# 1630
seek = property ( lambda self : self . file . seek )
example# 1631
softspace = property ( lambda self : self . file . softspace )
example# 1632
tell = property ( lambda self : self . file . tell )
example# 1633
truncate = property ( lambda self : self . file . truncate )
example# 1634
write = property ( lambda self : self . file . write )
example# 1635
writelines = property ( lambda self : self . file . writelines )
example# 1636
xreadlines = property ( lambda self : self . file . xreadlines )
example# 1637
def __iter__ ( self ) :pass
example# 1638
return iter ( self . file )
example# 1639
from __future__ import unicode_literals
example# 1640
import logging
example# 1641
import sys
example# 1642
import types
example# 1643
from django import http
example# 1644
from django . conf import settings
example# 1645
from django . core import urlresolvers
example# 1646
from django . core import signals
example# 1647
from django . core . exceptions import MiddlewareNotUsed , PermissionDenied , SuspiciousOperation
example# 1648
from django . db import connections , transaction
example# 1649
from django . utils . encoding import force_text
example# 1650
from django . utils . module_loading import import_string
example# 1651
from django . utils import six
example# 1652
from django . views import debug
example# 1653
logger = logging . getLogger ( '_STR:0_' )
example# 1654
class BaseHandler ( object ) :pass
example# 1655
response_fixes = [  http . fix_location_header ,  http . conditional_content_removal ,  ]
example# 1656
def __init__ ( self ) :pass
example# 1657
self . _request_middleware = self . _view_middleware = self . _template_response_middleware = self . _response_middleware = self . _exception_middleware = None
example# 1658
def load_middleware ( self ) :pass
example# 1659
self . _view_middleware = [ ]
example# 1660
self . _template_response_middleware = [ ]
example# 1661
self . _response_middleware = [ ]
example# 1662
self . _exception_middleware = [ ]
example# 1663
request_middleware = [ ]
example# 1664
for middleware_path in settings . MIDDLEWARE_CLASSES :pass
example# 1665
mw_class = import_string ( middleware_path )
example# 1666
try :pass
except: pass
example# 1667
mw_instance = mw_class ( )
example# 1668
try: pass
except MiddlewareNotUsed :pass
example# 1669
continue
example# 1670
if hasattr ( mw_instance , '_STR:0_' ) :pass
example# 1671
request_middleware . append ( mw_instance . process_request )
example# 1672
if hasattr ( mw_instance , '_STR:0_' ) :pass
example# 1673
self . _view_middleware . append ( mw_instance . process_view )
example# 1674
if hasattr ( mw_instance , '_STR:0_' ) :pass
example# 1675
self . _template_response_middleware . insert ( 0 , mw_instance . process_template_response )
example# 1676
if hasattr ( mw_instance , '_STR:0_' ) :pass
example# 1677
self . _response_middleware . insert ( 0 , mw_instance . process_response )
example# 1678
if hasattr ( mw_instance , '_STR:0_' ) :pass
example# 1679
self . _exception_middleware . insert ( 0 , mw_instance . process_exception )
example# 1680
self . _request_middleware = request_middleware
example# 1681
def make_view_atomic ( self , view ) :pass
example# 1682
non_atomic_requests = getattr ( view , '_STR:0_' , set ( ) )
example# 1683
for db in connections . all ( ) :pass
example# 1684
if ( db . settings_dict [ 'ATOMIC_REQUESTS' ]  and db . alias not in non_atomic_requests ) :pass
example# 1685
view = transaction . atomic ( using = db . alias ) ( view )
example# 1686
return view
example# 1687
def get_exception_response ( self , request , resolver , status_code ) :pass
example# 1688
try :pass
except: pass
example# 1689
callback , param_dict = resolver . resolve_error_handler ( status_code )
example# 1690
response = callback ( request , ** param_dict )
example# 1691
try: pass
except :pass
example# 1692
signals . got_request_exception . send ( sender = self . __class__ , request = request )
example# 1693
response = self . handle_uncaught_exception ( request , resolver , sys . exc_info ( ) )
example# 1694
return response
example# 1695
def get_response ( self , request ) :pass
example# 1696
urlconf = settings . ROOT_URLCONF
example# 1697
urlresolvers . set_urlconf ( urlconf )
example# 1698
resolver = urlresolvers . RegexURLResolver ( r'_STR:0_' , urlconf )
example# 1699
try :pass
except: pass
example# 1700
response = None
example# 1701
for middleware_method in self . _request_middleware :pass
example# 1702
response = middleware_method ( request )
example# 1703
if response :pass
example# 1704
break
example# 1705
if response is None :pass
example# 1706
if hasattr ( request , '_STR:0_' ) :pass
example# 1707
urlconf = request . urlconf
example# 1708
urlresolvers . set_urlconf ( urlconf )
example# 1709
resolver = urlresolvers . RegexURLResolver ( r'_STR:0_' , urlconf )
example# 1710
resolver_match = resolver . resolve ( request . path_info )
example# 1711
callback , callback_args , callback_kwargs = resolver_match
example# 1712
request . resolver_match = resolver_match
example# 1713
for middleware_method in self . _view_middleware :pass
example# 1714
response = middleware_method ( request , callback , callback_args , callback_kwargs )
example# 1715
if response :pass
example# 1716
break
example# 1717
if response is None :pass
example# 1718
wrapped_callback = self . make_view_atomic ( callback )
example# 1719
try :pass
except: pass
example# 1720
response = wrapped_callback ( request , * callback_args , ** callback_kwargs )
example# 1721
try: pass
except Exception as e :pass
example# 1722
for middleware_method in self . _exception_middleware :pass
example# 1723
response = middleware_method ( request , e )
example# 1724
if response :pass
example# 1725
break
example# 1726
if response is None :pass
example# 1727
raise
example# 1728
if response is None :pass
example# 1729
if isinstance ( callback , types . FunctionType ) :pass
example# 1730
view_name = callback . __name__
example# 1731
if True: pass
else :pass
example# 1732
view_name = callback . __class__ . __name__ + '_STR:0_'
example# 1733
raise ValueError ( '_STR:0_'  % ( callback . __module__ , view_name ) )
example# 1734
if hasattr ( response , '_STR:0_' ) and callable ( response . render ) :pass
example# 1735
for middleware_method in self . _template_response_middleware :pass
example# 1736
response = middleware_method ( request , response )
example# 1737
if response is None :pass
example# 1738
raise ValueError (  "%s.process_template_response didn't return an "  "HttpResponse object. It returned None instead."  % ( middleware_method . __self__ . __class__ . __name__ ) )
example# 1739
response = response . render ( )
example# 1740
try: pass
except http . Http404 as e :pass
example# 1741
logger . warning ( '_STR:0_' , request . path ,  extra = {  '_STR:1_' : 404 ,  'request' : request  } )
example# 1742
if settings . DEBUG :pass
example# 1743
response = debug . technical_404_response ( request , e )
example# 1744
if True: pass
else :pass
example# 1745
response = self . get_exception_response ( request , resolver , 404 )
example# 1746
try: pass
except PermissionDenied :pass
example# 1747
logger . warning (  '_STR:0_' , request . path ,  extra = {  'status_code' : 403 ,  'request' : request  } )
example# 1748
response = self . get_exception_response ( request , resolver , 403 )
example# 1749
try: pass
except SuspiciousOperation as e :pass
example# 1750
security_logger = logging . getLogger ( '_STR:0_' %  e . __class__ . __name__ )
example# 1751
security_logger . error (  force_text ( e ) ,  extra = {  'status_code' : 400 ,  'request' : request  } )
example# 1752
if settings . DEBUG :pass
example# 1753
return debug . technical_500_response ( request , * sys . exc_info ( ) , status_code = 400 )
example# 1754
response = self . get_exception_response ( request , resolver , 400 )
example# 1755
try: pass
except SystemExit :pass
example# 1756
raise
example# 1757
try: pass
except :pass
example# 1758
signals . got_request_exception . send ( sender = self . __class__ , request = request )
example# 1759
response = self . handle_uncaught_exception ( request , resolver , sys . exc_info ( ) )
example# 1760
try :pass
except: pass
example# 1761
for middleware_method in self . _response_middleware :pass
example# 1762
response = middleware_method ( request , response )
example# 1763
if response is None :pass
example# 1764
raise ValueError (  "%s.process_response didn't return an "  "HttpResponse object. It returned None instead."  % ( middleware_method . __self__ . __class__ . __name__ ) )
example# 1765
response = self . apply_response_fixes ( request , response )
example# 1766
try: pass
except :pass
example# 1767
signals . got_request_exception . send ( sender = self . __class__ , request = request )
example# 1768
response = self . handle_uncaught_exception ( request , resolver , sys . exc_info ( ) )
example# 1769
response . _closable_objects . append ( request )
example# 1770
return response
example# 1771
def handle_uncaught_exception ( self , request , resolver , exc_info ) :pass
example# 1772
if settings . DEBUG_PROPAGATE_EXCEPTIONS :pass
example# 1773
raise
example# 1774
logger . error ( '_STR:0_' , request . path ,  exc_info = exc_info ,  extra = {  'status_code' : 500 ,  'request' : request  }  )
example# 1775
if settings . DEBUG :pass
example# 1776
return debug . technical_500_response ( request , * exc_info )
example# 1777
if resolver . urlconf_module is None :pass
example# 1778
six . reraise ( * exc_info )
example# 1779
callback , param_dict = resolver . resolve_error_handler ( 500 )
example# 1780
return callback ( request , ** param_dict )
example# 1781
def apply_response_fixes ( self , request , response ) :pass
example# 1782
for func in self . response_fixes :pass
example# 1783
response = func ( request , response )
example# 1784
return response
example# 1785
from __future__ import unicode_literals
example# 1786
import cgi
example# 1787
import codecs
example# 1788
import logging
example# 1789
import sys
example# 1790
from io import BytesIO
example# 1791
from threading import Lock
example# 1792
import warnings
example# 1793
from django import http
example# 1794
from django . conf import settings
example# 1795
from django . core import signals
example# 1796
from django . core . handlers import base
example# 1797
from django . core . urlresolvers import set_script_prefix
example# 1798
from django . utils import datastructures
example# 1799
from django . utils . deprecation import RemovedInDjango19Warning
example# 1800
from django . utils . encoding import force_str , force_text
example# 1801
from django . utils . functional import cached_property
example# 1802
from django . utils import six
example# 1803
from django . http . response import REASON_PHRASES as STATUS_CODE_TEXT
example# 1804
logger = logging . getLogger ( '_STR:0_' )
example# 1805
ISO_8859_1 , UTF_8 = str ( '_STR:0_' ) , str ( '_STR:1_' )
example# 1806
class LimitedStream ( object ) :pass
example# 1807
def __init__ ( self , stream , limit , buf_size = 64 * 1024 * 1024 ) :pass
example# 1808
self . stream = stream
example# 1809
self . remaining = limit
example# 1810
self . buffer = b''
example# 1811
self . buf_size = buf_size
example# 1812
def _read_limited ( self , size = None ) :pass
example# 1813
if size is None or size > self . remaining :pass
example# 1814
size = self . remaining
example# 1815
if size == 0 :pass
example# 1816
return b''
example# 1817
result = self . stream . read ( size )
example# 1818
self . remaining -= len ( result )
example# 1819
return result
example# 1820
def read ( self , size = None ) :pass
example# 1821
if size is None :pass
example# 1822
result = self . buffer + self . _read_limited ( )
example# 1823
self . buffer = b''
example# 1824
if True: pass
elif size < len ( self . buffer ) :pass
example# 1825
result = self . buffer [ : size ]
example# 1826
self . buffer = self . buffer [ size : ]
example# 1827
if True: pass
else :pass
example# 1828
result = self . buffer + self . _read_limited ( size - len ( self . buffer ) )
example# 1829
self . buffer = b''
example# 1830
return result
example# 1831
def readline ( self , size = None ) :pass
example# 1832
while b'\n' not in self . buffer and ( size is None or len ( self . buffer ) < size ) :pass
example# 1833
if size :pass
example# 1834
chunk = self . _read_limited ( size - len ( self . buffer ) )
example# 1835
if True: pass
else :pass
example# 1836
chunk = self . _read_limited ( )
example# 1837
if not chunk :pass
example# 1838
break
example# 1839
self . buffer += chunk
example# 1840
sio = BytesIO ( self . buffer )
example# 1841
if size :pass
example# 1842
line = sio . readline ( size )
example# 1843
if True: pass
else :pass
example# 1844
line = sio . readline ( )
example# 1845
self . buffer = sio . read ( )
example# 1846
return line
example# 1847
class WSGIRequest ( http . HttpRequest ) :pass
example# 1848
def __init__ ( self , environ ) :pass
example# 1849
script_name = get_script_name ( environ )
example# 1850
path_info = get_path_info ( environ )
example# 1851
if not path_info :pass
example# 1852
path_info = '_STR:0_'
example# 1853
self . environ = environ
example# 1854
self . path_info = path_info
example# 1855
self . path = '%s/%s' % ( script_name . rstrip ( '_STR:0_' ) ,  path_info . replace ( '_STR:0_' , '' , 1 ) )
example# 1856
self . META = environ
example# 1857
self . META [ '_STR:0_' ] = path_info
example# 1858
self . META [ 'SCRIPT_NAME' ] = script_name
example# 1859
self . method = environ [ '_STR:0_' ] . upper ( )
example# 1860
_ , content_params = cgi . parse_header ( environ . get ( '_STR:0_' , '' ) )
example# 1861
if '_STR:0_' in content_params :pass
example# 1862
try :pass
except: pass
example# 1863
codecs . lookup ( content_params [ '_STR:0_' ] )
example# 1864
try: pass
except LookupError :pass
example# 1865
pass
example# 1866
if True: pass
else :pass
example# 1867
self . encoding = content_params [ '_STR:0_' ]
example# 1868
self . _post_parse_error = False
example# 1869
try :pass
except: pass
example# 1870
content_length = int ( environ . get ( '_STR:0_' ) )
example# 1871
try: pass
except ( ValueError , TypeError ) :pass
example# 1872
content_length = 0
example# 1873
self . _stream = LimitedStream ( self . environ [ '_STR:0_' ] , content_length )
example# 1874
self . _read_started = False
example# 1875
self . resolver_match = None
example# 1876
def _get_scheme ( self ) :pass
example# 1877
return self . environ . get ( '_STR:0_' )
example# 1878
def _get_request ( self ) :pass
example# 1879
warnings . warn ( '`request.REQUEST` is deprecated, use `request.GET` or '  '`request.POST` instead.' , RemovedInDjango19Warning , 2 )
example# 1880
if not hasattr ( self , '_STR:0_' ) :pass
example# 1881
self . _request = datastructures . MergeDict ( self . POST , self . GET )
example# 1882
return self . _request
example# 1883
@ cached_property
def dummy(): pass
example# 1884
def GET ( self ) :pass
example# 1885
raw_query_string = get_bytes_from_wsgi ( self . environ , '_STR:0_' , '' )
example# 1886
return http . QueryDict ( raw_query_string , encoding = self . _encoding )
example# 1887
def _get_post ( self ) :pass
example# 1888
if not hasattr ( self , '_STR:0_' ) :pass
example# 1889
self . _load_post_and_files ( )
example# 1890
return self . _post
example# 1891
def _set_post ( self , post ) :pass
example# 1892
self . _post = post
example# 1893
@ cached_property
def dummy(): pass
example# 1894
def COOKIES ( self ) :pass
example# 1895
raw_cookie = get_str_from_wsgi ( self . environ , '_STR:0_' , '' )
example# 1896
return http . parse_cookie ( raw_cookie )
example# 1897
def _get_files ( self ) :pass
example# 1898
if not hasattr ( self , '_STR:0_' ) :pass
example# 1899
self . _load_post_and_files ( )
example# 1900
return self . _files
example# 1901
POST = property ( _get_post , _set_post )
example# 1902
FILES = property ( _get_files )
example# 1903
REQUEST = property ( _get_request )
example# 1904
class WSGIHandler ( base . BaseHandler ) :pass
example# 1905
initLock = Lock ( )
example# 1906
request_class = WSGIRequest
example# 1907
def __call__ ( self , environ , start_response ) :pass
example# 1908
if self . _request_middleware is None :pass
example# 1909
with self . initLock :pass
example# 1910
try :pass
except: pass
example# 1911
if self . _request_middleware is None :pass
example# 1912
self . load_middleware ( )
example# 1913
try: pass
except :pass
example# 1914
self . _request_middleware = None
example# 1915
raise
example# 1916
set_script_prefix ( get_script_name ( environ ) )
example# 1917
signals . request_started . send ( sender = self . __class__ )
example# 1918
try :pass
except: pass
example# 1919
request = self . request_class ( environ )
example# 1920
try: pass
except UnicodeDecodeError :pass
example# 1921
logger . warning ( '_STR:0_' ,  exc_info = sys . exc_info ( ) ,  extra = {  'status_code' : 400 ,  }  )
example# 1922
response = http . HttpResponseBadRequest ( )
example# 1923
if True: pass
else :pass
example# 1924
response = self . get_response ( request )
example# 1925
response . _handler_class = self . __class__
example# 1926
status = '_STR:0_' % ( response . status_code , response . reason_phrase )
example# 1927
response_headers = [ ( str ( k ) , str ( v ) ) for k , v in response . items ( ) ]
example# 1928
for c in response . cookies . values ( ) :pass
example# 1929
response_headers . append ( ( str ( '_STR:0_' ) , str ( c . output ( header = '_STR:1_' ) ) ) )
example# 1930
start_response ( force_str ( status ) , response_headers )
example# 1931
return response
example# 1932
def get_path_info ( environ ) :pass
example# 1933
path_info = get_bytes_from_wsgi ( environ , '_STR:0_' , '_STR:1_' )
example# 1934
return path_info . decode ( UTF_8 )
example# 1935
def get_script_name ( environ ) :pass
example# 1936
if settings . FORCE_SCRIPT_NAME is not None :pass
example# 1937
return force_text ( settings . FORCE_SCRIPT_NAME )
example# 1938
script_url = get_bytes_from_wsgi ( environ , '_STR:0_' , '' )
example# 1939
if not script_url :pass
example# 1940
script_url = get_bytes_from_wsgi ( environ , '_STR:0_' , '' )
example# 1941
if script_url :pass
example# 1942
path_info = get_bytes_from_wsgi ( environ , '_STR:0_' , '' )
example# 1943
script_name = script_url [ : - len ( path_info ) ]
example# 1944
if True: pass
else :pass
example# 1945
script_name = get_bytes_from_wsgi ( environ , '_STR:0_' , '' )
example# 1946
return script_name . decode ( UTF_8 )
example# 1947
def get_bytes_from_wsgi ( environ , key , default ) :pass
example# 1948
value = environ . get ( str ( key ) , str ( default ) )
example# 1949
return value if six . PY2 else value . encode ( ISO_8859_1 )
example# 1950
def get_str_from_wsgi ( environ , key , default ) :pass
example# 1951
value = environ . get ( str ( key ) , str ( default ) )
example# 1952
return value if six . PY2 else value . encode ( ISO_8859_1 ) . decode ( UTF_8 )
example# 1953
from __future__ import unicode_literals
example# 1954
from django . conf import settings
example# 1955
from django . utils . module_loading import import_string
example# 1956
from django . core . mail . utils import CachedDnsName , DNS_NAME
example# 1957
from django . core . mail . message import (  EmailMessage , EmailMultiAlternatives ,  SafeMIMEText , SafeMIMEMultipart ,  DEFAULT_ATTACHMENT_MIME_TYPE , make_msgid ,  BadHeaderError , forbid_multi_line_headers )
example# 1958
__all__ = [  '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' ,  '_STR:4_' , 'SafeMIMEMultipart' , 'DEFAULT_ATTACHMENT_MIME_TYPE' ,  'make_msgid' , 'BadHeaderError' , 'forbid_multi_line_headers' ,  'get_connection' , 'send_mail' , 'send_mass_mail' , 'mail_admins' ,  'mail_managers' ,  ]
example# 1959
def get_connection ( backend = None , fail_silently = False , ** kwds ) :pass
example# 1960
klass = import_string ( backend or settings . EMAIL_BACKEND )
example# 1961
return klass ( fail_silently = fail_silently , ** kwds )
example# 1962
def send_mail ( subject , message , from_email , recipient_list ,  fail_silently = False , auth_user = None , auth_password = None ,  connection = None , html_message = None ) :pass
example# 1963
connection = connection or get_connection ( username = auth_user ,  password = auth_password ,  fail_silently = fail_silently )
example# 1964
mail = EmailMultiAlternatives ( subject , message , from_email , recipient_list ,  connection = connection )
example# 1965
if html_message :pass
example# 1966
mail . attach_alternative ( html_message , '_STR:0_' )
example# 1967
return mail . send ( )
example# 1968
def send_mass_mail ( datatuple , fail_silently = False , auth_user = None ,  auth_password = None , connection = None ) :pass
example# 1969
connection = connection or get_connection ( username = auth_user ,  password = auth_password ,  fail_silently = fail_silently )
example# 1970
messages = [ EmailMessage ( subject , message , sender , recipient ,  connection = connection )  for subject , message , sender , recipient in datatuple ]
example# 1971
return connection . send_messages ( messages )
example# 1972
def mail_admins ( subject , message , fail_silently = False , connection = None ,  html_message = None ) :pass
example# 1973
if not settings . ADMINS :pass
example# 1974
return
example# 1975
mail = EmailMultiAlternatives ( '%s%s' % ( settings . EMAIL_SUBJECT_PREFIX , subject ) ,  message , settings . SERVER_EMAIL , [ a [ 1 ] for a in settings . ADMINS ] ,  connection = connection )
example# 1976
if html_message :pass
example# 1977
mail . attach_alternative ( html_message , 'text/html' )
example# 1978
mail . send ( fail_silently = fail_silently )
example# 1979
def mail_managers ( subject , message , fail_silently = False , connection = None ,  html_message = None ) :pass
example# 1980
if not settings . MANAGERS :pass
example# 1981
return
example# 1982
mail = EmailMultiAlternatives ( '%s%s' % ( settings . EMAIL_SUBJECT_PREFIX , subject ) ,  message , settings . SERVER_EMAIL , [ a [ 1 ] for a in settings . MANAGERS ] ,  connection = connection )
example# 1983
if html_message :pass
example# 1984
mail . attach_alternative ( html_message , '_STR:0_' )
example# 1985
mail . send ( fail_silently = fail_silently )
example# 1986
class BaseEmailBackend ( object ) :pass
example# 1987
def __init__ ( self , fail_silently = False , ** kwargs ) :pass
example# 1988
self . fail_silently = fail_silently
example# 1989
def open ( self ) :pass
example# 1990
pass
example# 1991
def close ( self ) :pass
example# 1992
pass
example# 1993
def __enter__ ( self ) :pass
example# 1994
self . open ( )
example# 1995
return self
example# 1996
def __exit__ ( self , exc_type , exc_value , traceback ) :pass
example# 1997
self . close ( )
example# 1998
def send_messages ( self , email_messages ) :pass
example# 1999
raise NotImplementedError ( '_STR:0_' )
example# 2000
import sys
example# 2001
import threading
example# 2002
from django . core . mail . backends . base import BaseEmailBackend
example# 2003
from django . utils import six
example# 2004
class EmailBackend ( BaseEmailBackend ) :pass
example# 2005
def __init__ ( self , * args , ** kwargs ) :pass
example# 2006
self . stream = kwargs . pop ( '_STR:0_' , sys . stdout )
example# 2007
self . _lock = threading . RLock ( )
example# 2008
super ( EmailBackend , self ) . __init__ ( * args , ** kwargs )
example# 2009
def write_message ( self , message ) :pass
example# 2010
msg = message . message ( )
example# 2011
msg_data = msg . as_bytes ( )
example# 2012
if six . PY3 :pass
example# 2013
charset = msg . get_charset ( ) . get_output_charset ( ) if msg . get_charset ( ) else '_STR:0_'
example# 2014
msg_data = msg_data . decode ( charset )
example# 2015
self . stream . write ( '_STR:0_' % msg_data )
example# 2016
self . stream . write ( '_STR:0_' * 79 )
example# 2017
self . stream . write ( '\n' )
example# 2018
def send_messages ( self , email_messages ) :pass
example# 2019
if not email_messages :pass
example# 2020
return
example# 2021
msg_count = 0
example# 2022
with self . _lock :pass
example# 2023
try :pass
except: pass
example# 2024
stream_created = self . open ( )
example# 2025
for message in email_messages :pass
example# 2026
self . write_message ( message )
example# 2027
self . stream . flush ( )
example# 2028
msg_count += 1
example# 2029
if stream_created :pass
example# 2030
self . close ( )
example# 2031
try: pass
except Exception :pass
example# 2032
if not self . fail_silently :pass
example# 2033
raise
example# 2034
return msg_count
example# 2035
from django . core . mail . backends . base import BaseEmailBackend
example# 2036
class EmailBackend ( BaseEmailBackend ) :pass
example# 2037
def send_messages ( self , email_messages ) :pass
example# 2038
return len ( list ( email_messages ) )
example# 2039
import datetime
example# 2040
import os
example# 2041
from django . conf import settings
example# 2042
from django . core . exceptions import ImproperlyConfigured
example# 2043
from django . core . mail . backends . console import EmailBackend as ConsoleEmailBackend
example# 2044
from django . utils import six
example# 2045
class EmailBackend ( ConsoleEmailBackend ) :pass
example# 2046
def __init__ ( self , * args , ** kwargs ) :pass
example# 2047
self . _fname = None
example# 2048
if '_STR:0_' in kwargs :pass
example# 2049
self . file_path = kwargs . pop ( '_STR:0_' )
example# 2050
if True: pass
else :pass
example# 2051
self . file_path = getattr ( settings , '_STR:0_' , None )
example# 2052
if not isinstance ( self . file_path , six . string_types ) :pass
example# 2053
raise ImproperlyConfigured ( '_STR:0_' % self . file_path )
example# 2054
self . file_path = os . path . abspath ( self . file_path )
example# 2055
if os . path . exists ( self . file_path ) and not os . path . isdir ( self . file_path ) :pass
example# 2056
raise ImproperlyConfigured ( '_STR:0_' % self . file_path )
example# 2057
if True: pass
elif not os . path . exists ( self . file_path ) :pass
example# 2058
try :pass
except: pass
example# 2059
os . makedirs ( self . file_path )
example# 2060
try: pass
except OSError as err :pass
example# 2061
raise ImproperlyConfigured ( '_STR:0_' % ( self . file_path , err ) )
example# 2062
if not os . access ( self . file_path , os . W_OK ) :pass
example# 2063
raise ImproperlyConfigured ( '_STR:0_' % self . file_path )
example# 2064
kwargs [ '_STR:0_' ] = None
example# 2065
super ( EmailBackend , self ) . __init__ ( * args , ** kwargs )
example# 2066
def write_message ( self , message ) :pass
example# 2067
self . stream . write ( message . message ( ) . as_bytes ( ) + b'_STR:0_' )
example# 2068
self . stream . write ( b'_STR:0_' * 79 )
example# 2069
self . stream . write ( b'\n' )
example# 2070
def _get_filename ( self ) :pass
example# 2071
if self . _fname is None :pass
example# 2072
timestamp = datetime . datetime . now ( ) . strftime ( '_STR:0_' )
example# 2073
fname = '_STR:0_' % ( timestamp , abs ( id ( self ) ) )
example# 2074
self . _fname = os . path . join ( self . file_path , fname )
example# 2075
return self . _fname
example# 2076
def open ( self ) :pass
example# 2077
if self . stream is None :pass
example# 2078
self . stream = open ( self . _get_filename ( ) , '_STR:0_' )
example# 2079
return True
example# 2080
return False
example# 2081
def close ( self ) :pass
example# 2082
try :pass
except: pass
example# 2083
if self . stream is not None :pass
example# 2084
self . stream . close ( )
example# 2085
try: pass
finally :pass
example# 2086
self . stream = None
example# 2087
from django . core import mail
example# 2088
from django . core . mail . backends . base import BaseEmailBackend
example# 2089
class EmailBackend ( BaseEmailBackend ) :pass
example# 2090
def __init__ ( self , * args , ** kwargs ) :pass
example# 2091
super ( EmailBackend , self ) . __init__ ( * args , ** kwargs )
example# 2092
if not hasattr ( mail , '_STR:0_' ) :pass
example# 2093
mail . outbox = [ ]
example# 2094
def send_messages ( self , messages ) :pass
example# 2095
msg_count = 0
example# 2096
for message in messages :pass
example# 2097
message . message ( )
example# 2098
msg_count += 1
example# 2099
mail . outbox . extend ( messages )
example# 2100
return msg_count
example# 2101
import smtplib
example# 2102
import ssl
example# 2103
import threading
example# 2104
from django . conf import settings
example# 2105
from django . core . mail . backends . base import BaseEmailBackend
example# 2106
from django . core . mail . utils import DNS_NAME
example# 2107
from django . core . mail . message import sanitize_address
example# 2108
class EmailBackend ( BaseEmailBackend ) :pass
example# 2109
def __init__ ( self , host = None , port = None , username = None , password = None ,  use_tls = None , fail_silently = False , use_ssl = None , timeout = None ,  ** kwargs ) :pass
example# 2110
super ( EmailBackend , self ) . __init__ ( fail_silently = fail_silently )
example# 2111
self . host = host or settings . EMAIL_HOST
example# 2112
self . port = port or settings . EMAIL_PORT
example# 2113
self . username = settings . EMAIL_HOST_USER if username is None else username
example# 2114
self . password = settings . EMAIL_HOST_PASSWORD if password is None else password
example# 2115
self . use_tls = settings . EMAIL_USE_TLS if use_tls is None else use_tls
example# 2116
self . use_ssl = settings . EMAIL_USE_SSL if use_ssl is None else use_ssl
example# 2117
self . timeout = timeout
example# 2118
if self . use_ssl and self . use_tls :pass
example# 2119
raise ValueError (  "EMAIL_USE_TLS/EMAIL_USE_SSL are mutually exclusive, so only set "  "one of those settings to True." )
example# 2120
self . connection = None
example# 2121
self . _lock = threading . RLock ( )
example# 2122
def open ( self ) :pass
example# 2123
if self . connection :pass
example# 2124
return False
example# 2125
connection_class = smtplib . SMTP_SSL if self . use_ssl else smtplib . SMTP
example# 2126
connection_params = { '_STR:0_' : DNS_NAME . get_fqdn ( ) }
example# 2127
if self . timeout is not None :pass
example# 2128
connection_params [ '_STR:0_' ] = self . timeout
example# 2129
try :pass
except: pass
example# 2130
self . connection = connection_class ( self . host , self . port , ** connection_params )
example# 2131
if not self . use_ssl and self . use_tls :pass
example# 2132
self . connection . ehlo ( )
example# 2133
self . connection . starttls ( )
example# 2134
self . connection . ehlo ( )
example# 2135
if self . username and self . password :pass
example# 2136
self . connection . login ( self . username , self . password )
example# 2137
return True
example# 2138
try: pass
except smtplib . SMTPException :pass
example# 2139
if not self . fail_silently :pass
example# 2140
raise
example# 2141
def close ( self ) :pass
example# 2142
if self . connection is None :pass
example# 2143
return
example# 2144
try :pass
except: pass
example# 2145
try :pass
except: pass
example# 2146
self . connection . quit ( )
example# 2147
try: pass
except ( ssl . SSLError , smtplib . SMTPServerDisconnected ) :pass
example# 2148
self . connection . close ( )
example# 2149
try: pass
except smtplib . SMTPException :pass
example# 2150
if self . fail_silently :pass
example# 2151
return
example# 2152
raise
example# 2153
try: pass
finally :pass
example# 2154
self . connection = None
example# 2155
def send_messages ( self , email_messages ) :pass
example# 2156
if not email_messages :pass
example# 2157
return
example# 2158
with self . _lock :pass
example# 2159
new_conn_created = self . open ( )
example# 2160
if not self . connection :pass
example# 2161
return
example# 2162
num_sent = 0
example# 2163
for message in email_messages :pass
example# 2164
sent = self . _send ( message )
example# 2165
if sent :pass
example# 2166
num_sent += 1
example# 2167
if new_conn_created :pass
example# 2168
self . close ( )
example# 2169
return num_sent
example# 2170
def _send ( self , email_message ) :pass
example# 2171
if not email_message . recipients ( ) :pass
example# 2172
return False
example# 2173
from_email = sanitize_address ( email_message . from_email , email_message . encoding )
example# 2174
recipients = [ sanitize_address ( addr , email_message . encoding )  for addr in email_message . recipients ( ) ]
example# 2175
message = email_message . message ( )
example# 2176
try :pass
except: pass
example# 2177
self . connection . sendmail ( from_email , recipients , message . as_bytes ( ) )
example# 2178
try: pass
except smtplib . SMTPException :pass
example# 2179
if not self . fail_silently :pass
example# 2180
raise
example# 2181
return False
example# 2182
return True
example# 2183
from __future__ import unicode_literals
example# 2184
import mimetypes
example# 2185
import os
example# 2186
import random
example# 2187
import sys
example# 2188
import time
example# 2189
from email import ( charset as Charset , encoders as Encoders ,  message_from_string , generator )
example# 2190
from email . message import Message
example# 2191
from email . mime . text import MIMEText
example# 2192
from email . mime . multipart import MIMEMultipart
example# 2193
from email . mime . base import MIMEBase
example# 2194
from email . mime . message import MIMEMessage
example# 2195
from email . header import Header
example# 2196
from email . utils import formatdate , getaddresses , formataddr , parseaddr
example# 2197
from django . conf import settings
example# 2198
from django . core . mail . utils import DNS_NAME
example# 2199
from django . utils . encoding import force_text
example# 2200
from django . utils import six
example# 2201
utf8_charset = Charset . Charset ( '_STR:0_' )
example# 2202
utf8_charset . body_encoding = None
example# 2203
DEFAULT_ATTACHMENT_MIME_TYPE = '_STR:0_'
example# 2204
class BadHeaderError ( ValueError ) :pass
example# 2205
pass
example# 2206
def make_msgid ( idstring = None ) :pass
example# 2207
timeval = time . time ( )
example# 2208
utcdate = time . strftime ( '_STR:0_' , time . gmtime ( timeval ) )
example# 2209
try :pass
except: pass
example# 2210
pid = os . getpid ( )
example# 2211
try: pass
except AttributeError :pass
example# 2212
pid = 1
example# 2213
randint = random . randrange ( 100000 )
example# 2214
if idstring is None :pass
example# 2215
idstring = ''
example# 2216
if True: pass
else :pass
example# 2217
idstring = '_STR:0_' + idstring
example# 2218
idhost = DNS_NAME
example# 2219
msgid = '_STR:0_' % ( utcdate , pid , randint , idstring , idhost )
example# 2220
return msgid
example# 2221
ADDRESS_HEADERS = set ( [  '_STR:0_' ,  '_STR:1_' ,  '_STR:2_' ,  '_STR:3_' ,  '_STR:4_' ,  '_STR:5_' ,  '_STR:6_' ,  '_STR:7_' ,  'resent-to' ,  'resent-cc' ,  'resent-bcc' ,  ] )
example# 2222
def forbid_multi_line_headers ( name , val , encoding ) :pass
example# 2223
encoding = encoding or settings . DEFAULT_CHARSET
example# 2224
val = force_text ( val )
example# 2225
if '_STR:0_' in val or '_STR:1_' in val :pass
example# 2226
raise BadHeaderError ( '_STR:0_' % ( val , name ) )
example# 2227
try :pass
except: pass
example# 2228
val . encode ( '_STR:0_' )
example# 2229
try: pass
except UnicodeEncodeError :pass
example# 2230
if name . lower ( ) in ADDRESS_HEADERS :pass
example# 2231
val = '_STR:0_' . join ( sanitize_address ( addr , encoding )  for addr in getaddresses ( ( val , ) ) )
example# 2232
if True: pass
else :pass
example# 2233
val = Header ( val , encoding ) . encode ( )
example# 2234
if True: pass
else :pass
example# 2235
if name . lower ( ) == '_STR:0_' :pass
example# 2236
val = Header ( val ) . encode ( )
example# 2237
return str ( name ) , val
example# 2238
def sanitize_address ( addr , encoding ) :pass
example# 2239
if isinstance ( addr , six . string_types ) :pass
example# 2240
addr = parseaddr ( force_text ( addr ) )
example# 2241
nm , addr = addr
example# 2242
try :pass
except: pass
example# 2243
nm = Header ( nm , encoding ) . encode ( )
example# 2244
try: pass
except UnicodeEncodeError :pass
example# 2245
nm = Header ( nm , '_STR:0_' ) . encode ( )
example# 2246
try :pass
except: pass
example# 2247
addr . encode ( '_STR:0_' )
example# 2248
try: pass
except UnicodeEncodeError :pass
example# 2249
if '_STR:0_' in addr :pass
example# 2250
localpart , domain = addr . split ( '_STR:0_' , 1 )
example# 2251
localpart = str ( Header ( localpart , encoding ) )
example# 2252
domain = domain . encode ( '_STR:1_' ) . decode ( '_STR:0_' )
example# 2253
addr = '_STR:0_' . join ( [ localpart , domain ] )
example# 2254
if True: pass
else :pass
example# 2255
addr = Header ( addr , encoding ) . encode ( )
example# 2256
return formataddr ( ( nm , addr ) )
example# 2257
class MIMEMixin ( ) :pass
example# 2258
def as_string ( self , unixfrom = False ) :pass
example# 2259
fp = six . StringIO ( )
example# 2260
g = generator . Generator ( fp , mangle_from_ = False )
example# 2261
g . flatten ( self , unixfrom = unixfrom )
example# 2262
return fp . getvalue ( )
example# 2263
if six . PY2 :pass
example# 2264
as_bytes = as_string
example# 2265
if True: pass
else :pass
example# 2266
def as_bytes ( self , unixfrom = False ) :pass
example# 2267
fp = six . BytesIO ( )
example# 2268
g = generator . BytesGenerator ( fp , mangle_from_ = False )
example# 2269
g . flatten ( self , unixfrom = unixfrom )
example# 2270
return fp . getvalue ( )
example# 2271
class SafeMIMEMessage ( MIMEMixin , MIMEMessage ) :pass
example# 2272
def __setitem__ ( self , name , val ) :pass
example# 2273
name , val = forbid_multi_line_headers ( name , val , '_STR:0_' )
example# 2274
MIMEMessage . __setitem__ ( self , name , val )
example# 2275
class SafeMIMEText ( MIMEMixin , MIMEText ) :pass
example# 2276
def __init__ ( self , text , subtype , charset ) :pass
example# 2277
self . encoding = charset
example# 2278
if charset == '_STR:0_' :pass
example# 2279
MIMEText . __init__ ( self , text , subtype , None )
example# 2280
del self [ '_STR:0_' ]
example# 2281
if ( 3 , 2 ) < sys . version_info < ( 3 , 3 , 4 ) :pass
example# 2282
payload = text . encode ( utf8_charset . output_charset )
example# 2283
self . _payload = payload . decode ( '_STR:0_' , '_STR:1_' )
example# 2284
self . set_charset ( utf8_charset )
example# 2285
if True: pass
else :pass
example# 2286
self . set_payload ( text , utf8_charset )
example# 2287
self . replace_header ( '_STR:0_' , '_STR:1_' % ( subtype , charset ) )
example# 2288
if True: pass
else :pass
example# 2289
MIMEText . __init__ ( self , text , subtype , charset )
example# 2290
def __setitem__ ( self , name , val ) :pass
example# 2291
name , val = forbid_multi_line_headers ( name , val , self . encoding )
example# 2292
MIMEText . __setitem__ ( self , name , val )
example# 2293
class SafeMIMEMultipart ( MIMEMixin , MIMEMultipart ) :pass
example# 2294
def __init__ ( self , _subtype = '_STR:0_' , boundary = None , _subparts = None , encoding = None , ** _params ) :pass
example# 2295
self . encoding = encoding
example# 2296
MIMEMultipart . __init__ ( self , _subtype , boundary , _subparts , ** _params )
example# 2297
def __setitem__ ( self , name , val ) :pass
example# 2298
name , val = forbid_multi_line_headers ( name , val , self . encoding )
example# 2299
MIMEMultipart . __setitem__ ( self , name , val )
example# 2300
class EmailMessage ( object ) :pass
example# 2301
content_subtype = '_STR:0_'
example# 2302
mixed_subtype = '_STR:0_'
example# 2303
encoding = None
example# 2304
def __init__ ( self , subject = '' , body = '' , from_email = None , to = None , bcc = None ,  connection = None , attachments = None , headers = None , cc = None ) :pass
example# 2305
if to :pass
example# 2306
assert not isinstance ( to , six . string_types ) , '_STR:0_'
example# 2307
self . to = list ( to )
example# 2308
if True: pass
else :pass
example# 2309
self . to = [ ]
example# 2310
if cc :pass
example# 2311
assert not isinstance ( cc , six . string_types ) , '_STR:0_'
example# 2312
self . cc = list ( cc )
example# 2313
if True: pass
else :pass
example# 2314
self . cc = [ ]
example# 2315
if bcc :pass
example# 2316
assert not isinstance ( bcc , six . string_types ) , '_STR:0_'
example# 2317
self . bcc = list ( bcc )
example# 2318
if True: pass
else :pass
example# 2319
self . bcc = [ ]
example# 2320
self . from_email = from_email or settings . DEFAULT_FROM_EMAIL
example# 2321
self . subject = subject
example# 2322
self . body = body
example# 2323
self . attachments = attachments or [ ]
example# 2324
self . extra_headers = headers or { }
example# 2325
self . connection = connection
example# 2326
def get_connection ( self , fail_silently = False ) :pass
example# 2327
from django . core . mail import get_connection
example# 2328
if not self . connection :pass
example# 2329
self . connection = get_connection ( fail_silently = fail_silently )
example# 2330
return self . connection
example# 2331
def message ( self ) :pass
example# 2332
encoding = self . encoding or settings . DEFAULT_CHARSET
example# 2333
msg = SafeMIMEText ( self . body , self . content_subtype , encoding )
example# 2334
msg = self . _create_message ( msg )
example# 2335
msg [ '_STR:0_' ] = self . subject
example# 2336
msg [ '_STR:0_' ] = self . extra_headers . get ( '_STR:0_' , self . from_email )
example# 2337
msg [ '_STR:0_' ] = self . extra_headers . get ( '_STR:0_' , '_STR:1_' . join ( self . to ) )
example# 2338
if self . cc :pass
example# 2339
msg [ '_STR:1_' ] = '_STR:0_' . join ( self . cc )
example# 2340
header_names = [ key . lower ( ) for key in self . extra_headers ]
example# 2341
if '_STR:0_' not in header_names :pass
example# 2342
msg [ '_STR:0_' ] = formatdate ( )
example# 2343
if 'message-id' not in header_names :pass
example# 2344
msg [ '_STR:0_' ] = make_msgid ( )
example# 2345
for name , value in self . extra_headers . items ( ) :pass
example# 2346
if name . lower ( ) in ( '_STR:0_' , 'to' ) :pass
example# 2347
continue
example# 2348
msg [ name ] = value
example# 2349
return msg
example# 2350
def recipients ( self ) :pass
example# 2351
return self . to + self . cc + self . bcc
example# 2352
def send ( self , fail_silently = False ) :pass
example# 2353
if not self . recipients ( ) :pass
example# 2354
return 0
example# 2355
return self . get_connection ( fail_silently ) . send_messages ( [ self ] )
example# 2356
def attach ( self , filename = None , content = None , mimetype = None ) :pass
example# 2357
if isinstance ( filename , MIMEBase ) :pass
example# 2358
assert content is None
example# 2359
assert mimetype is None
example# 2360
self . attachments . append ( filename )
example# 2361
if True: pass
else :pass
example# 2362
assert content is not None
example# 2363
self . attachments . append ( ( filename , content , mimetype ) )
example# 2364
def attach_file ( self , path , mimetype = None ) :pass
example# 2365
filename = os . path . basename ( path )
example# 2366
with open ( path , '_STR:0_' ) as f :pass
example# 2367
content = f . read ( )
example# 2368
self . attach ( filename , content , mimetype )
example# 2369
def _create_message ( self , msg ) :pass
example# 2370
return self . _create_attachments ( msg )
example# 2371
def _create_attachments ( self , msg ) :pass
example# 2372
if self . attachments :pass
example# 2373
encoding = self . encoding or settings . DEFAULT_CHARSET
example# 2374
body_msg = msg
example# 2375
msg = SafeMIMEMultipart ( _subtype = self . mixed_subtype , encoding = encoding )
example# 2376
if self . body :pass
example# 2377
msg . attach ( body_msg )
example# 2378
for attachment in self . attachments :pass
example# 2379
if isinstance ( attachment , MIMEBase ) :pass
example# 2380
msg . attach ( attachment )
example# 2381
if True: pass
else :pass
example# 2382
msg . attach ( self . _create_attachment ( * attachment ) )
example# 2383
return msg
example# 2384
def _create_mime_attachment ( self , content , mimetype ) :pass
example# 2385
basetype , subtype = mimetype . split ( '_STR:0_' , 1 )
example# 2386
if basetype == '_STR:0_' :pass
example# 2387
encoding = self . encoding or settings . DEFAULT_CHARSET
example# 2388
attachment = SafeMIMEText ( content , subtype , encoding )
example# 2389
if True: pass
elif basetype == '_STR:0_' and subtype == '_STR:1_' :pass
example# 2390
if isinstance ( content , EmailMessage ) :pass
example# 2391
content = content . message ( )
example# 2392
if True: pass
elif not isinstance ( content , Message ) :pass
example# 2393
content = message_from_string ( content )
example# 2394
attachment = SafeMIMEMessage ( content , subtype )
example# 2395
if True: pass
else :pass
example# 2396
attachment = MIMEBase ( basetype , subtype )
example# 2397
attachment . set_payload ( content )
example# 2398
Encoders . encode_base64 ( attachment )
example# 2399
return attachment
example# 2400
def _create_attachment ( self , filename , content , mimetype = None ) :pass
example# 2401
if mimetype is None :pass
example# 2402
mimetype , _ = mimetypes . guess_type ( filename )
example# 2403
if mimetype is None :pass
example# 2404
mimetype = DEFAULT_ATTACHMENT_MIME_TYPE
example# 2405
attachment = self . _create_mime_attachment ( content , mimetype )
example# 2406
if filename :pass
example# 2407
try :pass
except: pass
example# 2408
filename . encode ( '_STR:0_' )
example# 2409
try: pass
except UnicodeEncodeError :pass
example# 2410
if six . PY2 :pass
example# 2411
filename = filename . encode ( '_STR:0_' )
example# 2412
filename = ( '_STR:0_' , '' , filename )
example# 2413
attachment . add_header ( '_STR:0_' , '_STR:1_' ,  filename = filename )
example# 2414
return attachment
example# 2415
class EmailMultiAlternatives ( EmailMessage ) :pass
example# 2416
alternative_subtype = '_STR:0_'
example# 2417
def __init__ ( self , subject = '' , body = '' , from_email = None , to = None , bcc = None ,  connection = None , attachments = None , headers = None , alternatives = None ,  cc = None ) :pass
example# 2418
super ( EmailMultiAlternatives , self ) . __init__ ( subject , body , from_email , to , bcc , connection , attachments , headers , cc )
example# 2419
self . alternatives = alternatives or [ ]
example# 2420
def attach_alternative ( self , content , mimetype ) :pass
example# 2421
assert content is not None
example# 2422
assert mimetype is not None
example# 2423
self . alternatives . append ( ( content , mimetype ) )
example# 2424
def _create_message ( self , msg ) :pass
example# 2425
return self . _create_attachments ( self . _create_alternatives ( msg ) )
example# 2426
def _create_alternatives ( self , msg ) :pass
example# 2427
encoding = self . encoding or settings . DEFAULT_CHARSET
example# 2428
if self . alternatives :pass
example# 2429
body_msg = msg
example# 2430
msg = SafeMIMEMultipart ( _subtype = self . alternative_subtype , encoding = encoding )
example# 2431
if self . body :pass
example# 2432
msg . attach ( body_msg )
example# 2433
for alternative in self . alternatives :pass
example# 2434
msg . attach ( self . _create_mime_attachment ( * alternative ) )
example# 2435
return msg
example# 2436
import socket
example# 2437
class CachedDnsName ( object ) :pass
example# 2438
def __str__ ( self ) :pass
example# 2439
return self . get_fqdn ( )
example# 2440
def get_fqdn ( self ) :pass
example# 2441
if not hasattr ( self , '_STR:0_' ) :pass
example# 2442
self . _fqdn = socket . getfqdn ( )
example# 2443
return self . _fqdn
example# 2444
DNS_NAME = CachedDnsName ( )
example# 2445
from __future__ import unicode_literals
example# 2446
import collections
example# 2447
from importlib import import_module
example# 2448
import os
example# 2449
import sys
example# 2450
import django
example# 2451
from django . apps import apps
example# 2452
from django . conf import settings
example# 2453
from django . core . exceptions import ImproperlyConfigured
example# 2454
from django . core . management . base import ( BaseCommand , CommandError ,  CommandParser , handle_default_options )
example# 2455
from django . core . management . color import color_style
example# 2456
from django . utils import lru_cache
example# 2457
from django . utils import six
example# 2458
def find_commands ( management_dir ) :pass
example# 2459
command_dir = os . path . join ( management_dir , '_STR:0_' )
example# 2460
try :pass
except: pass
example# 2461
return [ f [ : - 3 ] for f in os . listdir ( command_dir )  if not f . startswith ( '_STR:0_' ) and f . endswith ( '_STR:1_' ) ]
example# 2462
try: pass
except OSError :pass
example# 2463
return [ ]
example# 2464
def load_command_class ( app_name , name ) :pass
example# 2465
module = import_module ( '_STR:0_' % ( app_name , name ) )
example# 2466
return module . Command ( )
example# 2467
@ lru_cache . lru_cache ( maxsize = None )
def dummy(): pass
example# 2468
def get_commands ( ) :pass
example# 2469
commands = { name : '_STR:0_' for name in find_commands ( __path__ [ 0 ] ) }
example# 2470
if not settings . configured :pass
example# 2471
return commands
example# 2472
for app_config in reversed ( list ( apps . get_app_configs ( ) ) ) :pass
example# 2473
path = os . path . join ( app_config . path , '_STR:0_' )
example# 2474
commands . update ( { name : app_config . name for name in find_commands ( path ) } )
example# 2475
return commands
example# 2476
def call_command ( name , * args , ** options ) :pass
example# 2477
try :pass
except: pass
example# 2478
app_name = get_commands ( ) [ name ]
example# 2479
try: pass
except KeyError :pass
example# 2480
raise CommandError ( '_STR:0_' % name )
example# 2481
if isinstance ( app_name , BaseCommand ) :pass
example# 2482
command = app_name
example# 2483
if True: pass
else :pass
example# 2484
command = load_command_class ( app_name , name )
example# 2485
parser = command . create_parser ( '' , name )
example# 2486
if command . use_argparse :pass
example# 2487
defaults = parser . parse_args ( args = args )
example# 2488
defaults = dict ( defaults . _get_kwargs ( ) , ** options )
example# 2489
if True: pass
else :pass
example# 2490
defaults , _ = parser . parse_args ( args = [ ] )
example# 2491
defaults = dict ( defaults . __dict__ , ** options )
example# 2492
return command . execute ( * args , ** defaults )
example# 2493
class ManagementUtility ( object ) :pass
example# 2494
def __init__ ( self , argv = None ) :pass
example# 2495
self . argv = argv or sys . argv [ : ]
example# 2496
self . prog_name = os . path . basename ( self . argv [ 0 ] )
example# 2497
self . settings_exception = None
example# 2498
def main_help_text ( self , commands_only = False ) :pass
example# 2499
if commands_only :pass
example# 2500
usage = sorted ( get_commands ( ) . keys ( ) )
example# 2501
if True: pass
else :pass
example# 2502
usage = [  "" ,  '_STR:0_' % self . prog_name ,  "" ,  "Available subcommands:" ,  ]
example# 2503
commands_dict = collections . defaultdict ( lambda : [ ] )
example# 2504
for name , app in six . iteritems ( get_commands ( ) ) :pass
example# 2505
if app == '_STR:0_' :pass
example# 2506
app = '_STR:0_'
example# 2507
if True: pass
else :pass
example# 2508
app = app . rpartition ( '_STR:0_' ) [ - 1 ]
example# 2509
commands_dict [ app ] . append ( name )
example# 2510
style = color_style ( )
example# 2511
for app in sorted ( commands_dict . keys ( ) ) :pass
example# 2512
usage . append ( "" )
example# 2513
usage . append ( style . NOTICE ( '_STR:0_' % app ) )
example# 2514
for name in sorted ( commands_dict [ app ] ) :pass
example# 2515
usage . append ( '_STR:0_' % name )
example# 2516
if self . settings_exception is not None :pass
example# 2517
usage . append ( style . NOTICE (  "Note that only Django core commands are listed "  "as settings are not properly configured (error: %s)."  % self . settings_exception ) )
example# 2518
return '\n' . join ( usage )
example# 2519
def fetch_command ( self , subcommand ) :pass
example# 2520
commands = get_commands ( )
example# 2521
try :pass
except: pass
example# 2522
app_name = commands [ subcommand ]
example# 2523
try: pass
except KeyError :pass
example# 2524
settings . INSTALLED_APPS
example# 2525
sys . stderr . write ( '_STR:0_' %  ( subcommand , self . prog_name ) )
example# 2526
sys . exit ( 1 )
example# 2527
if isinstance ( app_name , BaseCommand ) :pass
example# 2528
klass = app_name
example# 2529
if True: pass
else :pass
example# 2530
klass = load_command_class ( app_name , subcommand )
example# 2531
return klass
example# 2532
def autocomplete ( self ) :pass
example# 2533
if '_STR:0_' not in os . environ :pass
example# 2534
return
example# 2535
cwords = os . environ [ '_STR:0_' ] . split ( ) [ 1 : ]
example# 2536
cword = int ( os . environ [ '_STR:0_' ] )
example# 2537
try :pass
except: pass
example# 2538
curr = cwords [ cword - 1 ]
example# 2539
try: pass
except IndexError :pass
example# 2540
curr = ''
example# 2541
subcommands = list ( get_commands ( ) ) + [ '_STR:0_' ]
example# 2542
options = [ ( '_STR:0_' , None ) ]
example# 2543
if cword == 1 :pass
example# 2544
print ( ' ' . join ( sorted ( filter ( lambda x : x . startswith ( curr ) , subcommands ) ) ) )
example# 2545
if True: pass
elif cwords [ 0 ] in subcommands and cwords [ 0 ] != '_STR:0_' :pass
example# 2546
subcommand_cls = self . fetch_command ( cwords [ 0 ] )
example# 2547
if cwords [ 0 ] == '_STR:0_' :pass
example# 2548
from django . core . servers . fastcgi import FASTCGI_OPTIONS
example# 2549
options += [ ( k , 1 ) for k in FASTCGI_OPTIONS ]
example# 2550
if True: pass
elif cwords [ 0 ] in ( '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' ,  '_STR:4_' , 'sqlindexes' , 'sqlsequencereset' , 'test' ) :pass
example# 2551
try :pass
except: pass
example# 2552
app_configs = apps . get_app_configs ( )
example# 2553
options += [ ( app_config . label , 0 ) for app_config in app_configs ]
example# 2554
try: pass
except ImportError :pass
example# 2555
pass
example# 2556
parser = subcommand_cls . create_parser ( '' , cwords [ 0 ] )
example# 2557
if subcommand_cls . use_argparse :pass
example# 2558
options += [ ( sorted ( s_opt . option_strings ) [ 0 ] , s_opt . nargs != 0 ) for s_opt in  parser . _actions if s_opt . option_strings ]
example# 2559
if True: pass
else :pass
example# 2560
options += [ ( s_opt . get_opt_string ( ) , s_opt . nargs ) for s_opt in  parser . option_list ]
example# 2561
prev_opts = [ x . split ( '=' ) [ 0 ] for x in cwords [ 1 : cword - 1 ] ]
example# 2562
options = [ opt for opt in options if opt [ 0 ] not in prev_opts ]
example# 2563
options = sorted ( ( k , v ) for k , v in options if k . startswith ( curr ) )
example# 2564
for option in options :pass
example# 2565
opt_label = option [ 0 ]
example# 2566
if option [ 1 ] :pass
example# 2567
opt_label += '_STR:0_'
example# 2568
print ( opt_label )
example# 2569
sys . exit ( 1 )
example# 2570
def execute ( self ) :pass
example# 2571
try :pass
except: pass
example# 2572
subcommand = self . argv [ 1 ]
example# 2573
try: pass
except IndexError :pass
example# 2574
subcommand = '_STR:0_'
example# 2575
parser = CommandParser ( None , usage = '_STR:0_' , add_help = False )
example# 2576
parser . add_argument ( '_STR:0_' )
example# 2577
parser . add_argument ( '_STR:0_' )
example# 2578
parser . add_argument ( '_STR:0_' , nargs = '_STR:1_' )
example# 2579
try :pass
except: pass
example# 2580
options , args = parser . parse_known_args ( self . argv [ 2 : ] )
example# 2581
handle_default_options ( options )
example# 2582
try: pass
except CommandError :pass
example# 2583
pass
example# 2584
no_settings_commands = [  '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' , '_STR:4_' ,  '_STR:5_' , '_STR:6_' ,  'startapp' , 'startproject' ,  ]
example# 2585
try :pass
except: pass
example# 2586
settings . INSTALLED_APPS
example# 2587
try: pass
except ImproperlyConfigured as exc :pass
example# 2588
self . settings_exception = exc
example# 2589
if subcommand in no_settings_commands :pass
example# 2590
settings . configure ( )
example# 2591
if settings . configured :pass
example# 2592
django . setup ( )
example# 2593
self . autocomplete ( )
example# 2594
if subcommand == '_STR:0_' :pass
example# 2595
if '_STR:0_' in args :pass
example# 2596
sys . stdout . write ( self . main_help_text ( commands_only = True ) + '\n' )
example# 2597
if True: pass
elif len ( options . args ) < 1 :pass
example# 2598
sys . stdout . write ( self . main_help_text ( ) + '\n' )
example# 2599
if True: pass
else :pass
example# 2600
self . fetch_command ( options . args [ 0 ] ) . print_help ( self . prog_name , options . args [ 0 ] )
example# 2601
if True: pass
elif subcommand == '_STR:0_' or self . argv [ 1 : ] == [ '_STR:1_' ] :pass
example# 2602
sys . stdout . write ( django . get_version ( ) + '\n' )
example# 2603
if True: pass
elif self . argv [ 1 : ] in ( [ '_STR:0_' ] , [ '-h' ] ) :pass
example# 2604
sys . stdout . write ( self . main_help_text ( ) + '\n' )
example# 2605
if True: pass
else :pass
example# 2606
self . fetch_command ( subcommand ) . run_from_argv ( self . argv )
example# 2607
def execute_from_command_line ( argv = None ) :pass
example# 2608
utility = ManagementUtility ( argv )
example# 2609
utility . execute ( )
example# 2610
from __future__ import unicode_literals
example# 2611
import os
example# 2612
import sys
example# 2613
import warnings
example# 2614
from argparse import ArgumentParser
example# 2615
from optparse import OptionParser
example# 2616
import django
example# 2617
from django . core import checks
example# 2618
from django . core . exceptions import ImproperlyConfigured
example# 2619
from django . core . management . color import color_style , no_style
example# 2620
from django . utils . deprecation import RemovedInDjango19Warning , RemovedInDjango20Warning
example# 2621
from django . utils . encoding import force_str
example# 2622
class CommandError ( Exception ) :pass
example# 2623
pass
example# 2624
class CommandParser ( ArgumentParser ) :pass
example# 2625
def __init__ ( self , cmd , ** kwargs ) :pass
example# 2626
self . cmd = cmd
example# 2627
super ( CommandParser , self ) . __init__ ( ** kwargs )
example# 2628
def parse_args ( self , args = None , namespace = None ) :pass
example# 2629
if ( hasattr ( self . cmd , '_STR:0_' ) and  not ( args or any ( [ not arg . startswith ( '_STR:1_' ) for arg in args ] ) ) ) :pass
example# 2630
self . error ( self . cmd . missing_args_message )
example# 2631
return super ( CommandParser , self ) . parse_args ( args , namespace )
example# 2632
def error ( self , message ) :pass
example# 2633
if self . cmd . _called_from_command_line :pass
example# 2634
super ( CommandParser , self ) . error ( message )
example# 2635
if True: pass
else :pass
example# 2636
raise CommandError ( '_STR:0_' % message )
example# 2637
def handle_default_options ( options ) :pass
example# 2638
if options . settings :pass
example# 2639
os . environ [ '_STR:0_' ] = options . settings
example# 2640
if options . pythonpath :pass
example# 2641
sys . path . insert ( 0 , options . pythonpath )
example# 2642
class OutputWrapper ( object ) :pass
example# 2643
def __init__ ( self , out , style_func = None , ending = '\n' ) :pass
example# 2644
self . _out = out
example# 2645
self . style_func = None
example# 2646
if hasattr ( out , '_STR:0_' ) and out . isatty ( ) :pass
example# 2647
self . style_func = style_func
example# 2648
self . ending = ending
example# 2649
def __getattr__ ( self , name ) :pass
example# 2650
return getattr ( self . _out , name )
example# 2651
def write ( self , msg , style_func = None , ending = None ) :pass
example# 2652
ending = self . ending if ending is None else ending
example# 2653
if ending and not msg . endswith ( ending ) :pass
example# 2654
msg += ending
example# 2655
style_func = [ f for f in ( style_func , self . style_func , lambda x : x )  if f is not None ] [ 0 ]
example# 2656
self . _out . write ( force_str ( style_func ( msg ) ) )
example# 2657
class BaseCommand ( object ) :pass
example# 2658
option_list = ( )
example# 2659
help = ''
example# 2660
args = ''
example# 2661
_called_from_command_line = False
example# 2662
can_import_settings = True
example# 2663
output_transaction = False
example# 2664
leave_locale_alone = False
example# 2665
def __init__ ( self ) :pass
example# 2666
self . style = color_style ( )
example# 2667
has_old_option = hasattr ( self , '_STR:0_' )
example# 2668
has_new_option = hasattr ( self , '_STR:0_' )
example# 2669
if has_old_option :pass
example# 2670
warnings . warn (  '_STR:0_'  'in favor of "requires_system_checks".' ,  RemovedInDjango19Warning )
example# 2671
if has_old_option and has_new_option :pass
example# 2672
raise ImproperlyConfigured (  '_STR:0_'  'and "requires_system_checks", which is illegal. Use only '  '"requires_system_checks".' % self . __class__ . __name__ )
example# 2673
self . requires_system_checks = (  self . requires_system_checks if has_new_option else  self . requires_model_validation if has_old_option else  True )
example# 2674
@ property
def dummy(): pass
example# 2675
def use_argparse ( self ) :pass
example# 2676
return not bool ( self . option_list )
example# 2677
def get_version ( self ) :pass
example# 2678
return django . get_version ( )
example# 2679
def usage ( self , subcommand ) :pass
example# 2680
usage = '_STR:0_' % ( subcommand , self . args )
example# 2681
if self . help :pass
example# 2682
return '%s\n\n%s' % ( usage , self . help )
example# 2683
if True: pass
else :pass
example# 2684
return usage
example# 2685
def create_parser ( self , prog_name , subcommand ) :pass
example# 2686
if not self . use_argparse :pass
example# 2687
warnings . warn ( '_STR:0_'  "is deprecated, use ArgumentParser instead" ,  RemovedInDjango20Warning )
example# 2688
parser = OptionParser ( prog = prog_name ,  usage = self . usage ( subcommand ) ,  version = self . get_version ( ) )
example# 2689
parser . add_option ( '_STR:0_' , '_STR:1_' , action = '_STR:2_' , dest = 'verbosity' , default = '1' ,  type = 'choice' , choices = [ '0' , '1' , '2' , '3' ] ,  help = 'Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output' )
example# 2690
parser . add_option ( '_STR:7_' ,  help = '_STR:8_' )
example# 2691
parser . add_option ( '_STR:0_' ,  help = '_STR:1_' ) ,
example# 2692
parser . add_option ( '_STR:0_' , action = '_STR:1_' ,  help = 'Raise on exception' )
example# 2693
parser . add_option ( '_STR:1_' , action = '_STR:2_' , dest = 'no_color' , default = False ,  help = "Don't colorize the command output." )
example# 2694
for opt in self . option_list :pass
example# 2695
parser . add_option ( opt )
example# 2696
if True: pass
else :pass
example# 2697
parser = CommandParser ( self , prog = "%s %s" % ( os . path . basename ( prog_name ) , subcommand ) ,  description = self . help or None )
example# 2698
parser . add_argument ( '_STR:0_' , action = '_STR:1_' , version = self . get_version ( ) )
example# 2699
parser . add_argument ( '_STR:0_' , '_STR:1_' , action = '_STR:2_' , dest = 'verbosity' , default = '1' ,  type = int , choices = [ 0 , 1 , 2 , 3 ] ,  help = 'Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output' )
example# 2700
parser . add_argument ( '_STR:2_' ,  help = 'The Python path to a settings module, e.g. "myproject.settings.main". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.' )
example# 2701
parser . add_argument ( '_STR:0_' ,  help = 'A directory to add to the Python path, e.g. "/home/djangoprojects/myproject".' )
example# 2702
parser . add_argument ( '_STR:0_' , action = '_STR:1_' ,  help = 'Raise on exception' )
example# 2703
parser . add_argument ( '_STR:1_' , action = '_STR:2_' , dest = '_STR:3_' , default = False ,  help = "Don't colorize the command output." )
example# 2704
if self . args :pass
example# 2705
parser . add_argument ( '_STR:0_' , nargs = '_STR:1_' )
example# 2706
self . add_arguments ( parser )
example# 2707
return parser
example# 2708
def add_arguments ( self , parser ) :pass
example# 2709
pass
example# 2710
def print_help ( self , prog_name , subcommand ) :pass
example# 2711
parser = self . create_parser ( prog_name , subcommand )
example# 2712
parser . print_help ( )
example# 2713
def run_from_argv ( self , argv ) :pass
example# 2714
self . _called_from_command_line = True
example# 2715
parser = self . create_parser ( argv [ 0 ] , argv [ 1 ] )
example# 2716
if self . use_argparse :pass
example# 2717
options = parser . parse_args ( argv [ 2 : ] )
example# 2718
cmd_options = vars ( options )
example# 2719
if '_STR:0_' in options :pass
example# 2720
args = options . args
example# 2721
del cmd_options [ '_STR:0_' ]
example# 2722
if True: pass
else :pass
example# 2723
args = ( )
example# 2724
if True: pass
else :pass
example# 2725
options , args = parser . parse_args ( argv [ 2 : ] )
example# 2726
cmd_options = vars ( options )
example# 2727
handle_default_options ( options )
example# 2728
try :pass
except: pass
example# 2729
self . execute ( * args , ** cmd_options )
example# 2730
try: pass
except Exception as e :pass
example# 2731
if options . traceback or not isinstance ( e , CommandError ) :pass
example# 2732
raise
example# 2733
stderr = getattr ( self , '_STR:0_' , OutputWrapper ( sys . stderr , self . style . ERROR ) )
example# 2734
stderr . write ( '_STR:0_' % ( e . __class__ . __name__ , e ) )
example# 2735
sys . exit ( 1 )
example# 2736
def execute ( self , * args , ** options ) :pass
example# 2737
self . stdout = OutputWrapper ( options . get ( '_STR:0_' , sys . stdout ) )
example# 2738
if options . get ( '_STR:0_' ) :pass
example# 2739
self . style = no_style ( )
example# 2740
self . stderr = OutputWrapper ( options . get ( '_STR:0_' , sys . stderr ) )
example# 2741
if True: pass
else :pass
example# 2742
self . stderr = OutputWrapper ( options . get ( '_STR:0_' , sys . stderr ) , self . style . ERROR )
example# 2743
if self . can_import_settings :pass
example# 2744
from django . conf import settings
example# 2745
saved_locale = None
example# 2746
if not self . leave_locale_alone :pass
example# 2747
if not self . can_import_settings :pass
example# 2748
raise CommandError ( '_STR:0_'  "(%s) and 'can_import_settings' (%s) command "  "options." % ( self . leave_locale_alone ,  self . can_import_settings ) )
example# 2749
from django . utils import translation
example# 2750
saved_locale = translation . get_language ( )
example# 2751
translation . activate ( '_STR:0_' )
example# 2752
try :pass
except: pass
example# 2753
if ( self . requires_system_checks and  not options . get ( '_STR:0_' ) and  not options . get ( '_STR:1_' ) ) :pass
example# 2754
self . check ( )
example# 2755
output = self . handle ( * args , ** options )
example# 2756
if output :pass
example# 2757
if self . output_transaction :pass
example# 2758
from django . db import connections , DEFAULT_DB_ALIAS
example# 2759
connection = connections [ options . get ( '_STR:0_' , DEFAULT_DB_ALIAS ) ]
example# 2760
if connection . ops . start_transaction_sql ( ) :pass
example# 2761
self . stdout . write ( self . style . SQL_KEYWORD ( connection . ops . start_transaction_sql ( ) ) )
example# 2762
self . stdout . write ( output )
example# 2763
if self . output_transaction :pass
example# 2764
self . stdout . write ( '\n' + self . style . SQL_KEYWORD ( connection . ops . end_transaction_sql ( ) ) )
example# 2765
try: pass
finally :pass
example# 2766
if saved_locale is not None :pass
example# 2767
translation . activate ( saved_locale )
example# 2768
def validate ( self , app_config = None , display_num_errors = False ) :pass
example# 2769
if app_config is None :pass
example# 2770
app_configs = None
example# 2771
if True: pass
else :pass
example# 2772
app_configs = [ app_config ]
example# 2773
return self . check ( app_configs = app_configs , display_num_errors = display_num_errors )
example# 2774
def check ( self , app_configs = None , tags = None , display_num_errors = False ) :pass
example# 2775
all_issues = checks . run_checks ( app_configs = app_configs , tags = tags )
example# 2776
msg = ""
example# 2777
visible_issue_count = 0
example# 2778
if all_issues :pass
example# 2779
debugs = [ e for e in all_issues if e . level < checks . INFO and not e . is_silenced ( ) ]
example# 2780
infos = [ e for e in all_issues if checks . INFO <= e . level < checks . WARNING and not e . is_silenced ( ) ]
example# 2781
warnings = [ e for e in all_issues if checks . WARNING <= e . level < checks . ERROR and not e . is_silenced ( ) ]
example# 2782
errors = [ e for e in all_issues if checks . ERROR <= e . level < checks . CRITICAL ]
example# 2783
criticals = [ e for e in all_issues if checks . CRITICAL <= e . level ]
example# 2784
sorted_issues = [  ( criticals , '_STR:0_' ) ,  ( errors , '_STR:1_' ) ,  ( warnings , '_STR:2_' ) ,  ( infos , 'INFOS' ) ,  ( debugs , 'DEBUGS' ) ,  ]
example# 2785
for issues , group_name in sorted_issues :pass
example# 2786
if issues :pass
example# 2787
visible_issue_count += len ( issues )
example# 2788
formatted = (  color_style ( ) . ERROR ( force_str ( e ) )  if e . is_serious ( )  else color_style ( ) . WARNING ( force_str ( e ) )  for e in issues )
example# 2789
formatted = "\n" . join ( sorted ( formatted ) )
example# 2790
msg += '_STR:0_' % ( group_name , formatted )
example# 2791
if msg :pass
example# 2792
msg = '_STR:0_' % msg
example# 2793
if display_num_errors :pass
example# 2794
if msg :pass
example# 2795
msg += '\n'
example# 2796
msg += '_STR:0_' % (  '_STR:1_' if visible_issue_count == 0 else  "1 issue" if visible_issue_count == 1 else  "%s issues" % visible_issue_count ,  len ( all_issues ) - visible_issue_count ,  )
example# 2797
if any ( e . is_serious ( ) and not e . is_silenced ( ) for e in all_issues ) :pass
example# 2798
raise CommandError ( msg )
example# 2799
if True: pass
elif msg and visible_issue_count :pass
example# 2800
self . stderr . write ( msg )
example# 2801
if True: pass
elif msg :pass
example# 2802
self . stdout . write ( msg )
example# 2803
def handle ( self , * args , ** options ) :pass
example# 2804
raise NotImplementedError ( '_STR:0_' )
example# 2805
class AppCommand ( BaseCommand ) :pass
example# 2806
missing_args_message = '_STR:0_'
example# 2807
def add_arguments ( self , parser ) :pass
example# 2808
parser . add_argument ( '_STR:0_' , metavar = '_STR:1_' , nargs = '_STR:2_' ,  help = 'One or more application label.' )
example# 2809
def handle ( self , * app_labels , ** options ) :pass
example# 2810
from django . apps import apps
example# 2811
try :pass
except: pass
example# 2812
app_configs = [ apps . get_app_config ( app_label ) for app_label in app_labels ]
example# 2813
try: pass
except ( LookupError , ImportError ) as e :pass
example# 2814
raise CommandError ( '_STR:0_' % e )
example# 2815
output = [ ]
example# 2816
for app_config in app_configs :pass
example# 2817
app_output = self . handle_app_config ( app_config , ** options )
example# 2818
if app_output :pass
example# 2819
output . append ( app_output )
example# 2820
return '\n' . join ( output )
example# 2821
def handle_app_config ( self , app_config , ** options ) :pass
example# 2822
try :pass
except: pass
example# 2823
handle_app = self . handle_app
example# 2824
try: pass
except AttributeError :pass
example# 2825
raise NotImplementedError (  "Subclasses of AppCommand must provide"  "a handle_app_config() method." )
example# 2826
if True: pass
else :pass
example# 2827
warnings . warn (  "AppCommand.handle_app() is superseded by "  "AppCommand.handle_app_config()." ,  RemovedInDjango19Warning , stacklevel = 2 )
example# 2828
if app_config . models_module is None :pass
example# 2829
raise CommandError (  "AppCommand cannot handle app '%s' in legacy mode "  "because it doesn't have a models module."  % app_config . label )
example# 2830
return handle_app ( app_config . models_module , ** options )
example# 2831
class LabelCommand ( BaseCommand ) :pass
example# 2832
label = '_STR:0_'
example# 2833
missing_args_message = '_STR:0_' % label
example# 2834
def add_arguments ( self , parser ) :pass
example# 2835
parser . add_argument ( '_STR:0_' , metavar = self . label , nargs = '_STR:1_' )
example# 2836
def handle ( self , * labels , ** options ) :pass
example# 2837
output = [ ]
example# 2838
for label in labels :pass
example# 2839
label_output = self . handle_label ( label , ** options )
example# 2840
if label_output :pass
example# 2841
output . append ( label_output )
example# 2842
return '\n' . join ( output )
example# 2843
def handle_label ( self , label , ** options ) :pass
example# 2844
raise NotImplementedError ( '_STR:0_' )
example# 2845
class NoArgsCommand ( BaseCommand ) :pass
example# 2846
args = ''
example# 2847
def __init__ ( self ) :pass
example# 2848
warnings . warn (  '_STR:0_'  "Use BaseCommand instead, which takes no arguments by default." ,  RemovedInDjango20Warning  )
example# 2849
super ( NoArgsCommand , self ) . __init__ ( )
example# 2850
def handle ( self , * args , ** options ) :pass
example# 2851
if args :pass
example# 2852
raise CommandError ( '_STR:0_' )
example# 2853
return self . handle_noargs ( ** options )
example# 2854
def handle_noargs ( self , ** options ) :pass
example# 2855
raise NotImplementedError ( '_STR:0_' )
example# 2856
import os
example# 2857
import sys
example# 2858
from django . utils import termcolors
example# 2859
def supports_color ( ) :pass
example# 2860
plat = sys . platform
example# 2861
supported_platform = plat != '_STR:0_' and ( plat != '_STR:1_' or  'ANSICON' in os . environ )
example# 2862
is_a_tty = hasattr ( sys . stdout , '_STR:1_' ) and sys . stdout . isatty ( )
example# 2863
if not supported_platform or not is_a_tty :pass
example# 2864
return False
example# 2865
return True
example# 2866
def color_style ( ) :pass
example# 2867
if not supports_color ( ) :pass
example# 2868
style = no_style ( )
example# 2869
if True: pass
else :pass
example# 2870
DJANGO_COLORS = os . environ . get ( '_STR:0_' , '' )
example# 2871
color_settings = termcolors . parse_color_setting ( DJANGO_COLORS )
example# 2872
if color_settings :pass
example# 2873
class dummy :pass
example# 2874
pass
example# 2875
style = dummy ( )
example# 2876
for role in termcolors . PALETTES [ termcolors . NOCOLOR_PALETTE ] :pass
example# 2877
format = color_settings . get ( role , { } )
example# 2878
setattr ( style , role , termcolors . make_style ( ** format ) )
example# 2879
style . ERROR_OUTPUT = style . ERROR
example# 2880
if True: pass
else :pass
example# 2881
style = no_style ( )
example# 2882
return style
example# 2883
def no_style ( ) :pass
example# 2884
class dummy :pass
example# 2885
def __getattr__ ( self , attr ) :pass
example# 2886
return lambda x : x
example# 2887
return dummy ( )
example# 2888
from __future__ import unicode_literals
example# 2889
from django . apps import apps
example# 2890
from django . core import checks
example# 2891
from django . core . checks . registry import registry
example# 2892
from django . core . management . base import BaseCommand , CommandError
example# 2893
class Command ( BaseCommand ) :pass
example# 2894
help = '_STR:0_'
example# 2895
requires_system_checks = False
example# 2896
def add_arguments ( self , parser ) :pass
example# 2897
parser . add_argument ( '_STR:0_' , metavar = '_STR:1_' , nargs = '_STR:2_' )
example# 2898
parser . add_argument ( '_STR:0_' , '_STR:1_' , action = '_STR:2_' , dest = 'tags' ,  help = 'Run only checks labeled with given tag.' )
example# 2899
parser . add_argument ( '_STR:2_' , action = '_STR:3_' , dest = 'list_tags' ,  help = 'List available tags.' )
example# 2900
def handle ( self , * app_labels , ** options ) :pass
example# 2901
if options . get ( '_STR:0_' ) :pass
example# 2902
self . stdout . write ( '\n' . join ( sorted ( registry . tags_available ( ) ) ) )
example# 2903
return
example# 2904
if app_labels :pass
example# 2905
app_configs = [ apps . get_app_config ( app_label ) for app_label in app_labels ]
example# 2906
if True: pass
else :pass
example# 2907
app_configs = None
example# 2908
tags = options . get ( '_STR:0_' , None )
example# 2909
if tags and any ( not checks . tag_exists ( tag ) for tag in tags ) :pass
example# 2910
invalid_tag = next ( tag for tag in tags if not checks . tag_exists ( tag ) )
example# 2911
raise CommandError ( '_STR:0_' % invalid_tag )
example# 2912
self . check ( app_configs = app_configs , tags = tags , display_num_errors = True )
example# 2913
from __future__ import unicode_literals
example# 2914
import codecs
example# 2915
import glob
example# 2916
import os
example# 2917
from django . core . management . base import BaseCommand , CommandError
example# 2918
from django . core . management . utils import find_command , popen_wrapper
example# 2919
from django . utils . _os import npath , upath
example# 2920
def has_bom ( fn ) :pass
example# 2921
with open ( fn , 'rb' ) as f :pass
example# 2922
sample = f . read ( 4 )
example# 2923
return sample [ : 3 ] == b'\xef\xbb\xbf' or sample . startswith ( codecs . BOM_UTF16_LE ) or sample . startswith ( codecs . BOM_UTF16_BE )
example# 2924
def is_writable ( path ) :pass
example# 2925
try :pass
except: pass
example# 2926
with open ( path , 'a' ) :pass
example# 2927
os . utime ( path , None )
example# 2928
try: pass
except ( IOError , OSError ) :pass
example# 2929
return False
example# 2930
return True
example# 2931
class Command ( BaseCommand ) :pass
example# 2932
help = '_STR:0_'
example# 2933
requires_system_checks = False
example# 2934
leave_locale_alone = True
example# 2935
program = '_STR:0_'
example# 2936
program_options = [ '_STR:0_' ]
example# 2937
def add_arguments ( self , parser ) :pass
example# 2938
parser . add_argument ( '_STR:0_' , '_STR:1_' , dest = '_STR:2_' , action = '_STR:3_' , default = [ ] ,  help = 'Locale(s) to process (e.g. de_AT). Default is to process all. '  'Can be used multiple times.' )
example# 2939
parser . add_argument ( '_STR:1_' , '_STR:2_' , dest = '_STR:3_' , action = '_STR:4_' , default = [ ] ,  help = 'Locales to exclude. Default is none. Can be used multiple times.' )
example# 2940
def handle ( self , ** options ) :pass
example# 2941
locale = options . get ( '_STR:0_' )
example# 2942
exclude = options . get ( '_STR:0_' )
example# 2943
self . verbosity = int ( options . get ( 'verbosity' ) )
example# 2944
if find_command ( self . program ) is None :pass
example# 2945
raise CommandError ( "Can't find %s. Make sure you have GNU gettext "  "tools 0.15 or newer installed." % self . program )
example# 2946
basedirs = [ os . path . join ( 'conf' , '_STR:1_' ) , '_STR:1_' ]
example# 2947
if os . environ . get ( '_STR:0_' ) :pass
example# 2948
from django . conf import settings
example# 2949
basedirs . extend ( [ upath ( path ) for path in settings . LOCALE_PATHS ] )
example# 2950
basedirs = set ( map ( os . path . abspath , filter ( os . path . isdir , basedirs ) ) )
example# 2951
if not basedirs :pass
example# 2952
raise CommandError ( "This script should be run from the Django Git "  "checkout or your project or app tree, or with "  "the settings module specified." )
example# 2953
all_locales = [ ]
example# 2954
for basedir in basedirs :pass
example# 2955
locale_dirs = filter ( os . path . isdir , glob . glob ( '%s/*' % basedir ) )
example# 2956
all_locales . extend ( map ( os . path . basename , locale_dirs ) )
example# 2957
locales = locale or all_locales
example# 2958
locales = set ( locales ) - set ( exclude )
example# 2959
for basedir in basedirs :pass
example# 2960
if locales :pass
example# 2961
dirs = [ os . path . join ( basedir , l , '_STR:0_' ) for l in locales ]
example# 2962
if True: pass
else :pass
example# 2963
dirs = [ basedir ]
example# 2964
locations = [ ]
example# 2965
for ldir in dirs :pass
example# 2966
for dirpath , dirnames , filenames in os . walk ( ldir ) :pass
example# 2967
locations . extend ( ( dirpath , f ) for f in filenames if f . endswith ( '_STR:0_' ) )
example# 2968
if locations :pass
example# 2969
self . compile_messages ( locations )
example# 2970
def compile_messages ( self , locations ) :pass
example# 2971
for i , ( dirpath , f ) in enumerate ( locations ) :pass
example# 2972
if self . verbosity > 0 :pass
example# 2973
self . stdout . write ( '_STR:0_' % ( f , dirpath ) )
example# 2974
po_path = os . path . join ( dirpath , f )
example# 2975
if has_bom ( po_path ) :pass
example# 2976
raise CommandError ( "The %s file has a BOM (Byte Order Mark). "  "Django only supports .po files encoded in "  "UTF-8 and without any BOM." % po_path )
example# 2977
base_path = os . path . splitext ( po_path ) [ 0 ]
example# 2978
if i == 0 and not is_writable ( npath ( base_path + '.mo' ) ) :pass
example# 2979
self . stderr . write ( "The po files under %s are in a seemingly not writable location. "  "mo files will not be updated/created." % dirpath )
example# 2980
return
example# 2981
args = [ self . program ] + self . program_options + [ '_STR:0_' ,  npath ( base_path + '.mo' ) , npath ( base_path + '.po' ) ]
example# 2982
output , errors , status = popen_wrapper ( args )
example# 2983
if status :pass
example# 2984
if errors :pass
example# 2985
msg = '_STR:0_' % ( self . program , errors )
example# 2986
if True: pass
else :pass
example# 2987
msg = '_STR:0_' % self . program
example# 2988
raise CommandError ( msg )
example# 2989
from django . conf import settings
example# 2990
from django . core . cache import caches
example# 2991
from django . core . cache . backends . db import BaseDatabaseCache
example# 2992
from django . core . management . base import BaseCommand , CommandError
example# 2993
from django . db import connections , router , transaction , models , DEFAULT_DB_ALIAS
example# 2994
from django . db . utils import DatabaseError
example# 2995
from django . utils . encoding import force_text
example# 2996
class Command ( BaseCommand ) :pass
example# 2997
help = '_STR:0_'
example# 2998
requires_system_checks = False
example# 2999
def add_arguments ( self , parser ) :pass
example# 3000
parser . add_argument ( '_STR:0_' , metavar = '_STR:1_' , nargs = '_STR:2_' ,  help = 'Optional table names. Otherwise, settings.CACHES is used to '  'find cache tables.' )
example# 3001
parser . add_argument ( '_STR:1_' , action = '_STR:2_' , dest = '_STR:3_' ,  default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database onto which the cache tables will be '  'installed. Defaults to the "default" database.' )
example# 3002
def handle ( self , * tablenames , ** options ) :pass
example# 3003
db = options . get ( '_STR:0_' )
example# 3004
self . verbosity = int ( options . get ( '_STR:0_' ) )
example# 3005
if len ( tablenames ) :pass
example# 3006
for tablename in tablenames :pass
example# 3007
self . create_table ( db , tablename )
example# 3008
if True: pass
else :pass
example# 3009
for cache_alias in settings . CACHES :pass
example# 3010
cache = caches [ cache_alias ]
example# 3011
if isinstance ( cache , BaseDatabaseCache ) :pass
example# 3012
self . create_table ( db , cache . _table )
example# 3013
def create_table ( self , database , tablename ) :pass
example# 3014
cache = BaseDatabaseCache ( tablename , { } )
example# 3015
if not router . allow_migrate ( database , cache . cache_model_class ) :pass
example# 3016
return
example# 3017
connection = connections [ database ]
example# 3018
if tablename in connection . introspection . table_names ( ) :pass
example# 3019
if self . verbosity > 0 :pass
example# 3020
self . stdout . write ( '_STR:0_' % tablename )
example# 3021
return
example# 3022
fields = (   models . CharField ( name = 'cache_key' , max_length = 255 , unique = True , primary_key = True ) ,  models . TextField ( name = 'value' ) ,  models . DateTimeField ( name = 'expires' , db_index = True ) ,  )
example# 3023
table_output = [ ]
example# 3024
index_output = [ ]
example# 3025
qn = connection . ops . quote_name
example# 3026
for f in fields :pass
example# 3027
field_output = [ qn ( f . name ) , f . db_type ( connection = connection ) ]
example# 3028
field_output . append ( "%sNULL" % ( "NOT " if not f . null else "" ) )
example# 3029
if f . primary_key :pass
example# 3030
field_output . append ( '_STR:0_' )
example# 3031
if True: pass
elif f . unique :pass
example# 3032
field_output . append ( '_STR:0_' )
example# 3033
if f . db_index :pass
example# 3034
unique = '_STR:0_' if f . unique else ""
example# 3035
index_output . append ( '_STR:0_' %  ( unique , qn ( '%s_%s' % ( tablename , f . name ) ) , qn ( tablename ) ,  qn ( f . name ) ) )
example# 3036
table_output . append ( " " . join ( field_output ) )
example# 3037
full_statement = [ '_STR:0_' % qn ( tablename ) ]
example# 3038
for i , line in enumerate ( table_output ) :pass
example# 3039
full_statement . append ( '_STR:0_' % ( line , '_STR:1_' if i < len ( table_output ) - 1 else '' ) )
example# 3040
full_statement . append ( '_STR:0_' )
example# 3041
with transaction . atomic ( using = database ,  savepoint = connection . features . can_rollback_ddl ) :pass
example# 3042
with connection . cursor ( ) as curs :pass
example# 3043
try :pass
except: pass
example# 3044
curs . execute ( "\n" . join ( full_statement ) )
example# 3045
try: pass
except DatabaseError as e :pass
example# 3046
raise CommandError (  '_STR:0_' %  ( tablename , force_text ( e ) ) )
example# 3047
for statement in index_output :pass
example# 3048
curs . execute ( statement )
example# 3049
if self . verbosity > 1 :pass
example# 3050
self . stdout . write ( '_STR:0_' % tablename )
example# 3051
from django . core . management . base import BaseCommand , CommandError
example# 3052
from django . db import connections , DEFAULT_DB_ALIAS
example# 3053
class Command ( BaseCommand ) :pass
example# 3054
help = ( "Runs the command-line client for specified database, or the "  "default database if none is provided." )
example# 3055
requires_system_checks = False
example# 3056
def add_arguments ( self , parser ) :pass
example# 3057
parser . add_argument ( '_STR:0_' , action = '_STR:1_' , dest = '_STR:2_' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a database onto which to '  'open a shell. Defaults to the "default" database.' )
example# 3058
def handle ( self , ** options ) :pass
example# 3059
connection = connections [ options . get ( '_STR:0_' ) ]
example# 3060
try :pass
except: pass
example# 3061
connection . client . runshell ( )
example# 3062
try: pass
except OSError :pass
example# 3063
raise CommandError ( '_STR:0_' %  connection . client . executable_name )
example# 3064
from django . core . management . base import BaseCommand
example# 3065
def module_to_dict ( module , omittable = lambda k : k . startswith ( '_' ) ) :pass
example# 3066
return dict ( ( k , repr ( v ) ) for k , v in module . __dict__ . items ( ) if not omittable ( k ) )
example# 3067
class Command ( BaseCommand ) :pass
example# 3068
requires_system_checks = False
example# 3069
def add_arguments ( self , parser ) :pass
example# 3070
parser . add_argument ( '_STR:0_' , action = '_STR:1_' , dest = '_STR:2_' , default = False ,  help = 'Display all settings, regardless of their value. '  'Default values are prefixed by "###".' )
example# 3071
def handle ( self , ** options ) :pass
example# 3072
from django . conf import settings , global_settings
example# 3073
settings . _setup ( )
example# 3074
user_settings = module_to_dict ( settings . _wrapped )
example# 3075
default_settings = module_to_dict ( global_settings )
example# 3076
output = [ ]
example# 3077
for key in sorted ( user_settings ) :pass
example# 3078
if key not in default_settings :pass
example# 3079
output . append ( '_STR:0_' % ( key , user_settings [ key ] ) )
example# 3080
if True: pass
elif user_settings [ key ] != default_settings [ key ] :pass
example# 3081
output . append ( '_STR:0_' % ( key , user_settings [ key ] ) )
example# 3082
if True: pass
elif options [ '_STR:0_' ] :pass
example# 3083
output . append ( '_STR:0_' % ( key , user_settings [ key ] ) )
example# 3084
return '\n' . join ( output )
example# 3085
import warnings
example# 3086
from collections import OrderedDict
example# 3087
from django . apps import apps
example# 3088
from django . core . management . base import BaseCommand , CommandError
example# 3089
from django . core import serializers
example# 3090
from django . db import router , DEFAULT_DB_ALIAS
example# 3091
from django . utils . deprecation import RemovedInDjango19Warning
example# 3092
class Command ( BaseCommand ) :pass
example# 3093
help = ( '_STR:0_'  "format (using each model's default manager unless --all is "  "specified)." )
example# 3094
def add_arguments ( self , parser ) :pass
example# 3095
parser . add_argument ( '_STR:0_' , metavar = '_STR:1_' , nargs = '*' ,  help = 'Restricts dumped data to the specified app_label or app_label.ModelName.' )
example# 3096
parser . add_argument ( '_STR:2_' , default = '_STR:3_' , dest = 'format' ,  help = 'Specifies the output serialization format for fixtures.' )
example# 3097
parser . add_argument ( '_STR:2_' , default = None , dest = '_STR:3_' , type = int ,  help = 'Specifies the indent level to use when pretty-printing output.' )
example# 3098
parser . add_argument ( '_STR:1_' , action = '_STR:2_' , dest = '_STR:3_' ,  default = DEFAULT_DB_ALIAS ,  help = 'Nominates a specific database to dump fixtures from. '  'Defaults to the "default" database.' )
example# 3099
parser . add_argument ( '_STR:1_' , '_STR:2_' , dest = '_STR:3_' , action = '_STR:4_' , default = [ ] ,  help = 'An app_label or app_label.ModelName to exclude '  '(use multiple --exclude to exclude multiple apps/models).' )
example# 3100
parser . add_argument ( '_STR:1_' , '_STR:2_' , action = '_STR:3_' , dest = '_STR:4_' , default = False ,  help = 'Use natural keys if they are available (deprecated: use --natural-foreign instead).' )
example# 3101
parser . add_argument ( '_STR:1_' , action = '_STR:2_' , dest = 'use_natural_foreign_keys' , default = False ,  help = 'Use natural foreign keys if they are available.' )
example# 3102
parser . add_argument ( '_STR:2_' , action = '_STR:3_' , dest = 'use_natural_primary_keys' , default = False ,  help = 'Use natural primary keys if they are available.' )
example# 3103
parser . add_argument ( '_STR:2_' , '_STR:3_' , action = '_STR:4_' , dest = 'use_base_manager' , default = False ,  help = "Use Django's base manager to dump all models stored in the database, "  "including those that would otherwise be filtered or modified by a custom manager." )
example# 3104
parser . add_argument ( '_STR:2_' , dest = '_STR:3_' ,  help = "Only dump objects with given primary keys. "  "Accepts a comma separated list of keys. "  "This option will only work when you specify one model." )
example# 3105
parser . add_argument ( '_STR:2_' , '_STR:3_' , default = None , dest = '_STR:4_' ,  help = 'Specifies file to which the output is written.' )
example# 3106
def handle ( self , * app_labels , ** options ) :pass
example# 3107
format = options . get ( '_STR:0_' )
example# 3108
indent = options . get ( '_STR:0_' )
example# 3109
using = options . get ( '_STR:0_' )
example# 3110
excludes = options . get ( '_STR:0_' )
example# 3111
output = options . get ( '_STR:0_' )
example# 3112
show_traceback = options . get ( '_STR:0_' )
example# 3113
use_natural_keys = options . get ( '_STR:0_' )
example# 3114
if use_natural_keys :pass
example# 3115
warnings . warn ( '_STR:0_' ,  RemovedInDjango19Warning )
example# 3116
use_natural_foreign_keys = options . get ( 'use_natural_foreign_keys' ) or use_natural_keys
example# 3117
use_natural_primary_keys = options . get ( '_STR:0_' )
example# 3118
use_base_manager = options . get ( '_STR:0_' )
example# 3119
pks = options . get ( '_STR:0_' )
example# 3120
if pks :pass
example# 3121
primary_keys = pks . split ( '_STR:0_' )
example# 3122
if True: pass
else :pass
example# 3123
primary_keys = [ ]
example# 3124
excluded_apps = set ( )
example# 3125
excluded_models = set ( )
example# 3126
for exclude in excludes :pass
example# 3127
if '_STR:0_' in exclude :pass
example# 3128
try :pass
except: pass
example# 3129
model = apps . get_model ( exclude )
example# 3130
try: pass
except LookupError :pass
example# 3131
raise CommandError ( '_STR:0_' % exclude )
example# 3132
excluded_models . add ( model )
example# 3133
if True: pass
else :pass
example# 3134
try :pass
except: pass
example# 3135
app_config = apps . get_app_config ( exclude )
example# 3136
try: pass
except LookupError :pass
example# 3137
raise CommandError ( '_STR:0_' % exclude )
example# 3138
excluded_apps . add ( app_config )
example# 3139
if len ( app_labels ) == 0 :pass
example# 3140
if primary_keys :pass
example# 3141
raise CommandError ( '_STR:0_' )
example# 3142
app_list = OrderedDict ( ( app_config , None )  for app_config in apps . get_app_configs ( )  if app_config . models_module is not None and app_config not in excluded_apps )
example# 3143
if True: pass
else :pass
example# 3144
if len ( app_labels ) > 1 and primary_keys :pass
example# 3145
raise CommandError ( '_STR:0_' )
example# 3146
app_list = OrderedDict ( )
example# 3147
for label in app_labels :pass
example# 3148
try :pass
except: pass
example# 3149
app_label , model_label = label . split ( '_STR:0_' )
example# 3150
try :pass
except: pass
example# 3151
app_config = apps . get_app_config ( app_label )
example# 3152
try: pass
except LookupError :pass
example# 3153
raise CommandError ( "Unknown application: %s" % app_label )
example# 3154
if app_config . models_module is None or app_config in excluded_apps :pass
example# 3155
continue
example# 3156
try :pass
except: pass
example# 3157
model = app_config . get_model ( model_label )
example# 3158
try: pass
except LookupError :pass
example# 3159
raise CommandError ( "Unknown model: %s.%s" % ( app_label , model_label ) )
example# 3160
app_list_value = app_list . setdefault ( app_config , [ ] )
example# 3161
if app_list_value is not None :pass
example# 3162
if model not in app_list_value :pass
example# 3163
app_list_value . append ( model )
example# 3164
try: pass
except ValueError :pass
example# 3165
if primary_keys :pass
example# 3166
raise CommandError ( '_STR:0_' )
example# 3167
app_label = label
example# 3168
try :pass
except: pass
example# 3169
app_config = apps . get_app_config ( app_label )
example# 3170
try: pass
except LookupError :pass
example# 3171
raise CommandError ( "Unknown application: %s" % app_label )
example# 3172
if app_config . models_module is None or app_config in excluded_apps :pass
example# 3173
continue
example# 3174
app_list [ app_config ] = None
example# 3175
if format not in serializers . get_public_serializer_formats ( ) :pass
example# 3176
try :pass
except: pass
example# 3177
serializers . get_serializer ( format )
example# 3178
try: pass
except serializers . SerializerDoesNotExist :pass
example# 3179
pass
example# 3180
raise CommandError ( "Unknown serialization format: %s" % format )
example# 3181
def get_objects ( ) :pass
example# 3182
for model in sort_dependencies ( app_list . items ( ) ) :pass
example# 3183
if model in excluded_models :pass
example# 3184
continue
example# 3185
if not model . _meta . proxy and router . allow_migrate ( using , model ) :pass
example# 3186
if use_base_manager :pass
example# 3187
objects = model . _base_manager
example# 3188
if True: pass
else :pass
example# 3189
objects = model . _default_manager
example# 3190
queryset = objects . using ( using ) . order_by ( model . _meta . pk . name )
example# 3191
if primary_keys :pass
example# 3192
queryset = queryset . filter ( pk__in = primary_keys )
example# 3193
for obj in queryset . iterator ( ) :pass
example# 3194
yield obj
example# 3195
try :pass
except: pass
example# 3196
self . stdout . ending = None
example# 3197
stream = open ( output , 'w' ) if output else None
example# 3198
try :pass
except: pass
example# 3199
serializers . serialize ( format , get_objects ( ) , indent = indent ,  use_natural_foreign_keys = use_natural_foreign_keys ,  use_natural_primary_keys = use_natural_primary_keys ,  stream = stream or self . stdout )
example# 3200
try: pass
finally :pass
example# 3201
if stream :pass
example# 3202
stream . close ( )
example# 3203
try: pass
except Exception as e :pass
example# 3204
if show_traceback :pass
example# 3205
raise
example# 3206
raise CommandError ( '_STR:0_' % e )
example# 3207
def sort_dependencies ( app_list ) :pass
example# 3208
model_dependencies = [ ]
example# 3209
models = set ( )
example# 3210
for app_config , model_list in app_list :pass
example# 3211
if model_list is None :pass
example# 3212
model_list = app_config . get_models ( )
example# 3213
for model in model_list :pass
example# 3214
models . add ( model )
example# 3215
if hasattr ( model , '_STR:0_' ) :pass
example# 3216
deps = getattr ( model . natural_key , '_STR:0_' , [ ] )
example# 3217
if deps :pass
example# 3218
deps = [ apps . get_model ( dep ) for dep in deps ]
example# 3219
if True: pass
else :pass
example# 3220
deps = [ ]
example# 3221
for field in model . _meta . fields :pass
example# 3222
if hasattr ( field . rel , '_STR:0_' ) :pass
example# 3223
rel_model = field . rel . to
example# 3224
if hasattr ( rel_model , '_STR:0_' ) and rel_model != model :pass
example# 3225
deps . append ( rel_model )
example# 3226
for field in model . _meta . many_to_many :pass
example# 3227
if field . rel . through . _meta . auto_created :pass
example# 3228
rel_model = field . rel . to
example# 3229
if hasattr ( rel_model , '_STR:0_' ) and rel_model != model :pass
example# 3230
deps . append ( rel_model )
example# 3231
model_dependencies . append ( ( model , deps ) )
example# 3232
model_dependencies . reverse ( )
example# 3233
model_list = [ ]
example# 3234
while model_dependencies :pass
example# 3235
skipped = [ ]
example# 3236
changed = False
example# 3237
while model_dependencies :pass
example# 3238
model , deps = model_dependencies . pop ( )
example# 3239
found = True
example# 3240
for candidate in ( ( d not in models or d in model_list ) for d in deps ) :pass
example# 3241
if not candidate :pass
example# 3242
found = False
example# 3243
if found :pass
example# 3244
model_list . append ( model )
example# 3245
changed = True
example# 3246
if True: pass
else :pass
example# 3247
skipped . append ( ( model , deps ) )
example# 3248
if not changed :pass
example# 3249
raise CommandError ( '_STR:0_' %  ', ' . join ( '%s.%s' % ( model . _meta . app_label , model . _meta . object_name )  for model , deps in sorted ( skipped , key = lambda obj : obj [ 0 ] . __name__ ) )  )
example# 3250
model_dependencies = skipped
example# 3251
return model_list
example# 3252
import sys
example# 3253
from importlib import import_module
example# 3254
from django . apps import apps
example# 3255
from django . db import connections , router , transaction , DEFAULT_DB_ALIAS
example# 3256
from django . core . management import call_command
example# 3257
from django . core . management . base import BaseCommand , CommandError
example# 3258
from django . core . management . color import no_style
example# 3259
from django . core . management . sql import sql_flush , emit_post_migrate_signal
example# 3260
from django . utils . six . moves import input
example# 3261
from django . utils import six
example# 3262
class Command ( BaseCommand ) :pass
example# 3263
help = ( '_STR:0_'  'migrations. Unmigrated apps will also have their initial_data '  'fixture reloaded. Does not achieve a "fresh install" state.' )
example# 3264
def add_arguments ( self , parser ) :pass
example# 3265
parser . add_argument ( '_STR:0_' , action = '_STR:1_' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
example# 3266
parser . add_argument ( '_STR:2_' , action = '_STR:3_' , dest = '_STR:4_' ,  default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to flush. Defaults to the "default" database.' )
example# 3267
parser . add_argument ( '_STR:1_' , action = '_STR:2_' ,  dest = 'load_initial_data' , default = True ,  help = 'Tells Django not to load any initial data after database synchronization.' )
example# 3268
def handle ( self , ** options ) :pass
example# 3269
database = options . get ( '_STR:0_' )
example# 3270
connection = connections [ database ]
example# 3271
verbosity = options . get ( '_STR:0_' )
example# 3272
interactive = options . get ( '_STR:0_' )
example# 3273
reset_sequences = options . get ( '_STR:0_' , True )
example# 3274
allow_cascade = options . get ( '_STR:0_' , False )
example# 3275
inhibit_post_migrate = options . get ( '_STR:0_' , False )
example# 3276
self . style = no_style ( )
example# 3277
for app_config in apps . get_app_configs ( ) :pass
example# 3278
try :pass
except: pass
example# 3279
import_module ( '.management' , app_config . name )
example# 3280
try: pass
except ImportError :pass
example# 3281
pass
example# 3282
sql_list = sql_flush ( self . style , connection , only_django = True ,  reset_sequences = reset_sequences ,  allow_cascade = allow_cascade )
example# 3283
if interactive :pass
example# 3284
confirm = input ( """You have requested a flush of the database. This will IRREVERSIBLY DESTROY all data currently in the %r database, and return each table to an empty state. Are you sure you want to do this?     Type 'yes' to continue, or 'no' to cancel: """ % connection . settings_dict [ 'NAME' ] )
example# 3285
if True: pass
else :pass
example# 3286
confirm = '_STR:0_'
example# 3287
if confirm == '_STR:0_' :pass
example# 3288
try :pass
except: pass
example# 3289
with transaction . atomic ( using = database ,  savepoint = connection . features . can_rollback_ddl ) :pass
example# 3290
with connection . cursor ( ) as cursor :pass
example# 3291
for sql in sql_list :pass
example# 3292
cursor . execute ( sql )
example# 3293
try: pass
except Exception as e :pass
example# 3294
new_msg = (  '_STR:0_'  "  * The database isn't running or isn't configured correctly.\n"  "  * At least one of the expected database tables doesn't exist.\n"  "  * The SQL was invalid.\n"  "Hint: Look at the output of 'django-admin.py sqlflush'. That's the SQL this command wasn't able to run.\n"  "The full error: %s" ) % ( connection . settings_dict [ 'NAME' ] , e )
example# 3295
six . reraise ( CommandError , CommandError ( new_msg ) , sys . exc_info ( ) [ 2 ] )
example# 3296
if not inhibit_post_migrate :pass
example# 3297
self . emit_post_migrate ( verbosity , interactive , database )
example# 3298
if options . get ( '_STR:0_' ) :pass
example# 3299
call_command ( '_STR:0_' , '_STR:1_' , ** options )
example# 3300
if True: pass
else :pass
example# 3301
self . stdout . write ( '_STR:0_' )
example# 3302
@ staticmethod
def dummy(): pass
example# 3303
def emit_post_migrate ( verbosity , interactive , database ) :pass
example# 3304
all_models = [ ]
example# 3305
for app_config in apps . get_app_configs ( ) :pass
example# 3306
all_models . extend ( router . get_migratable_models ( app_config , database , include_auto_created = True ) )
example# 3307
emit_post_migrate_signal ( set ( all_models ) , verbosity , interactive , database )
example# 3308
from __future__ import unicode_literals
example# 3309
from collections import OrderedDict
example# 3310
import keyword
example# 3311
import re
example# 3312
from django . core . management . base import BaseCommand , CommandError
example# 3313
from django . db import connections , DEFAULT_DB_ALIAS
example# 3314
class Command ( BaseCommand ) :pass
example# 3315
help = '_STR:0_'
example# 3316
requires_system_checks = False
example# 3317
db_module = '_STR:0_'
example# 3318
def add_arguments ( self , parser ) :pass
example# 3319
parser . add_argument ( '_STR:0_' , action = '_STR:1_' , dest = '_STR:2_' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a database to '  'introspect. Defaults to using the "default" database.' )
example# 3320
def handle ( self , ** options ) :pass
example# 3321
try :pass
except: pass
example# 3322
for line in self . handle_inspection ( options ) :pass
example# 3323
self . stdout . write ( "%s\n" % line )
example# 3324
try: pass
except NotImplementedError :pass
example# 3325
raise CommandError ( '_STR:0_' )
example# 3326
def handle_inspection ( self , options ) :pass
example# 3327
connection = connections [ options [ '_STR:0_' ] ]
example# 3328
table_name_filter = options . get ( '_STR:0_' )
example# 3329
table2model = lambda table_name : re . sub ( r'[^a-zA-Z0-9]' , '' , table_name . title ( ) )
example# 3330
strip_prefix = lambda s : s [ 1 : ] if s . startswith ( "u'" ) else s
example# 3331
with connection . cursor ( ) as cursor :pass
example# 3332
yield '_STR:0_'
example# 3333
yield '_STR:0_'
example# 3334
yield '_STR:0_'
example# 3335
yield '_STR:0_'
example# 3336
yield '_STR:0_'
example# 3337
yield '_STR:0_'
example# 3338
yield '_STR:0_'
example# 3339
yield '_STR:0_'
example# 3340
yield '_STR:0_'
example# 3341
yield '_STR:0_'
example# 3342
yield ''
example# 3343
yield '_STR:0_' % self . db_module
example# 3344
known_models = [ ]
example# 3345
for table_name in connection . introspection . table_names ( cursor ) :pass
example# 3346
if table_name_filter is not None and callable ( table_name_filter ) :pass
example# 3347
if not table_name_filter ( table_name ) :pass
example# 3348
continue
example# 3349
yield ''
example# 3350
yield ''
example# 3351
yield 'class %s(models.Model):' % table2model ( table_name )
example# 3352
known_models . append ( table2model ( table_name ) )
example# 3353
try :pass
except: pass
example# 3354
relations = connection . introspection . get_relations ( cursor , table_name )
example# 3355
try: pass
except NotImplementedError :pass
example# 3356
relations = { }
example# 3357
try :pass
except: pass
example# 3358
indexes = connection . introspection . get_indexes ( cursor , table_name )
example# 3359
try: pass
except NotImplementedError :pass
example# 3360
indexes = { }
example# 3361
used_column_names = [ ]
example# 3362
for i , row in enumerate ( connection . introspection . get_table_description ( cursor , table_name ) ) :pass
example# 3363
comment_notes = [ ]
example# 3364
extra_params = OrderedDict ( )
example# 3365
column_name = row [ 0 ]
example# 3366
is_relation = i in relations
example# 3367
att_name , params , notes = self . normalize_col_name (  column_name , used_column_names , is_relation )
example# 3368
extra_params . update ( params )
example# 3369
comment_notes . extend ( notes )
example# 3370
used_column_names . append ( att_name )
example# 3371
if column_name in indexes :pass
example# 3372
if indexes [ column_name ] [ '_STR:0_' ] :pass
example# 3373
extra_params [ '_STR:0_' ] = True
example# 3374
if True: pass
elif indexes [ column_name ] [ '_STR:0_' ] :pass
example# 3375
extra_params [ '_STR:0_' ] = True
example# 3376
if is_relation :pass
example# 3377
rel_to = "self" if relations [ i ] [ 1 ] == table_name else table2model ( relations [ i ] [ 1 ] )
example# 3378
if rel_to in known_models :pass
example# 3379
field_type = 'ForeignKey(%s' % rel_to
example# 3380
if True: pass
else :pass
example# 3381
field_type = "ForeignKey('%s'" % rel_to
example# 3382
if True: pass
else :pass
example# 3383
field_type , field_params , field_notes = self . get_field_type ( connection , table_name , row )
example# 3384
extra_params . update ( field_params )
example# 3385
comment_notes . extend ( field_notes )
example# 3386
field_type += '_STR:0_'
example# 3387
if att_name == '_STR:0_' and extra_params == { '_STR:1_' : True } :pass
example# 3388
if field_type == '_STR:0_' :pass
example# 3389
continue
example# 3390
if True: pass
elif field_type == '_STR:0_' and not connection . features . can_introspect_autofield :pass
example# 3391
comment_notes . append ( '_STR:0_' )
example# 3392
if row [ 6 ] :pass
example# 3393
if field_type == '_STR:0_' :pass
example# 3394
field_type = '_STR:0_'
example# 3395
if True: pass
else :pass
example# 3396
extra_params [ '_STR:0_' ] = True
example# 3397
if field_type not in ( '_STR:0_' , '_STR:1_' ) :pass
example# 3398
extra_params [ '_STR:0_' ] = True
example# 3399
field_desc = '_STR:0_' % (  att_name ,   '' if '_STR:1_' in field_type else 'models.' ,  field_type ,  )
example# 3400
if extra_params :pass
example# 3401
if not field_desc . endswith ( '_STR:0_' ) :pass
example# 3402
field_desc += '_STR:0_'
example# 3403
field_desc += ', ' . join ( [  '_STR:0_' % ( k , strip_prefix ( repr ( v ) ) )  for k , v in extra_params . items ( ) ] )
example# 3404
field_desc += '_STR:1_'
example# 3405
if comment_notes :pass
example# 3406
field_desc += '  # ' + ' ' . join ( comment_notes )
example# 3407
yield '_STR:0_' % field_desc
example# 3408
for meta_line in self . get_meta ( table_name ) :pass
example# 3409
yield meta_line
example# 3410
def normalize_col_name ( self , col_name , used_column_names , is_relation ) :pass
example# 3411
field_params = { }
example# 3412
field_notes = [ ]
example# 3413
new_name = col_name . lower ( )
example# 3414
if new_name != col_name :pass
example# 3415
field_notes . append ( '_STR:0_' )
example# 3416
if is_relation :pass
example# 3417
if new_name . endswith ( '_STR:0_' ) :pass
example# 3418
new_name = new_name [ : - 3 ]
example# 3419
if True: pass
else :pass
example# 3420
field_params [ '_STR:0_' ] = col_name
example# 3421
new_name , num_repl = re . subn ( r'_STR:0_' , '_STR:1_' , new_name )
example# 3422
if num_repl > 0 :pass
example# 3423
field_notes . append ( '_STR:0_' )
example# 3424
if new_name . find ( '_STR:0_' ) >= 0 :pass
example# 3425
while new_name . find ( '_STR:0_' ) >= 0 :pass
example# 3426
new_name = new_name . replace ( '_STR:0_' , '_STR:1_' )
example# 3427
if col_name . lower ( ) . find ( '_STR:0_' ) >= 0 :pass
example# 3428
field_notes . append ( '_STR:0_' )
example# 3429
if new_name . startswith ( '_STR:0_' ) :pass
example# 3430
new_name = 'field%s' % new_name
example# 3431
field_notes . append ( '_STR:0_' )
example# 3432
if new_name . endswith ( '_STR:0_' ) :pass
example# 3433
new_name = '%sfield' % new_name
example# 3434
field_notes . append ( '_STR:0_' )
example# 3435
if keyword . iskeyword ( new_name ) :pass
example# 3436
new_name += '_STR:0_'
example# 3437
field_notes . append ( 'Field renamed because it was a Python reserved word.' )
example# 3438
if new_name [ 0 ] . isdigit ( ) :pass
example# 3439
new_name = 'number_%s' % new_name
example# 3440
field_notes . append ( '_STR:0_' )
example# 3441
if new_name in used_column_names :pass
example# 3442
num = 0
example# 3443
while '_STR:0_' % ( new_name , num ) in used_column_names :pass
example# 3444
num += 1
example# 3445
new_name = '_STR:0_' % ( new_name , num )
example# 3446
field_notes . append ( 'Field renamed because of name conflict.' )
example# 3447
if col_name != new_name and field_notes :pass
example# 3448
field_params [ '_STR:0_' ] = col_name
example# 3449
return new_name , field_params , field_notes
example# 3450
def get_field_type ( self , connection , table_name , row ) :pass
example# 3451
field_params = OrderedDict ( )
example# 3452
field_notes = [ ]
example# 3453
try :pass
except: pass
example# 3454
field_type = connection . introspection . get_field_type ( row [ 1 ] , row )
example# 3455
try: pass
except KeyError :pass
example# 3456
field_type = '_STR:0_'
example# 3457
field_notes . append ( '_STR:0_' )
example# 3458
if type ( field_type ) is tuple :pass
example# 3459
field_type , new_params = field_type
example# 3460
field_params . update ( new_params )
example# 3461
if field_type == 'CharField' and row [ 3 ] :pass
example# 3462
field_params [ 'max_length' ] = int ( row [ 3 ] )
example# 3463
if field_type == '_STR:0_' :pass
example# 3464
if row [ 4 ] is None or row [ 5 ] is None :pass
example# 3465
field_notes . append (  'max_digits and decimal_places have been guessed, as this '  'database handles decimal fields as float' )
example# 3466
field_params [ '_STR:0_' ] = row [ 4 ] if row [ 4 ] is not None else 10
example# 3467
field_params [ '_STR:1_' ] = row [ 5 ] if row [ 5 ] is not None else 5
example# 3468
if True: pass
else :pass
example# 3469
field_params [ '_STR:0_' ] = row [ 4 ]
example# 3470
field_params [ '_STR:0_' ] = row [ 5 ]
example# 3471
return field_type , field_params , field_notes
example# 3472
def get_meta ( self , table_name ) :pass
example# 3473
return [ "" ,  '_STR:0_' ,  '_STR:1_' ,  "        db_table = '%s'" % table_name ]
example# 3474
from __future__ import unicode_literals
example# 3475
import glob
example# 3476
import gzip
example# 3477
import os
example# 3478
import warnings
example# 3479
import zipfile
example# 3480
from django . apps import apps
example# 3481
from django . conf import settings
example# 3482
from django . core import serializers
example# 3483
from django . core . management . base import BaseCommand , CommandError
example# 3484
from django . core . management . color import no_style
example# 3485
from django . db import ( connections , router , transaction , DEFAULT_DB_ALIAS ,  IntegrityError , DatabaseError )
example# 3486
from django . utils import lru_cache
example# 3487
from django . utils . encoding import force_text
example# 3488
from django . utils . functional import cached_property
example# 3489
from django . utils . _os import upath
example# 3490
from itertools import product
example# 3491
try :pass
except: pass
example# 3492
import bz2
example# 3493
has_bz2 = True
example# 3494
try: pass
except ImportError :pass
example# 3495
has_bz2 = False
example# 3496
class Command ( BaseCommand ) :pass
example# 3497
help = '_STR:0_'
example# 3498
missing_args_message = ( '_STR:0_'  "path of at least one fixture in the command line." )
example# 3499
def add_arguments ( self , parser ) :pass
example# 3500
parser . add_argument ( '_STR:0_' , metavar = '_STR:1_' , nargs = '_STR:2_' ,  help = 'Fixture labels.' )
example# 3501
parser . add_argument ( '_STR:1_' , action = '_STR:2_' , dest = '_STR:3_' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a specific database to load '  'fixtures into. Defaults to the "default" database.' )
example# 3502
parser . add_argument ( '_STR:1_' , action = '_STR:2_' , dest = '_STR:3_' ,  default = None , help = 'Only look for fixtures in the specified app.' )
example# 3503
parser . add_argument ( '_STR:1_' , '_STR:2_' , action = '_STR:3_' ,  dest = 'ignore' , default = False ,  help = 'Ignores entries in the serialized data for fields that do not '  'currently exist on the model.' )
example# 3504
def handle ( self , * fixture_labels , ** options ) :pass
example# 3505
self . ignore = options . get ( '_STR:0_' )
example# 3506
self . using = options . get ( '_STR:0_' )
example# 3507
self . app_label = options . get ( '_STR:0_' )
example# 3508
self . hide_empty = options . get ( '_STR:0_' , False )
example# 3509
self . verbosity = options . get ( '_STR:0_' )
example# 3510
with transaction . atomic ( using = self . using ) :pass
example# 3511
self . loaddata ( fixture_labels )
example# 3512
if transaction . get_autocommit ( self . using ) :pass
example# 3513
connections [ self . using ] . close ( )
example# 3514
def loaddata ( self , fixture_labels ) :pass
example# 3515
connection = connections [ self . using ]
example# 3516
self . fixture_count = 0
example# 3517
self . loaded_object_count = 0
example# 3518
self . fixture_object_count = 0
example# 3519
self . models = set ( )
example# 3520
self . serialization_formats = serializers . get_public_serializer_formats ( )
example# 3521
self . compression_formats = {  None : ( open , '_STR:0_' ) ,  'gz' : ( gzip . GzipFile , '_STR:0_' ) ,  'zip' : ( SingleZipReader , 'r' ) ,  }
example# 3522
if has_bz2 :pass
example# 3523
self . compression_formats [ '_STR:1_' ] = ( bz2 . BZ2File , '_STR:0_' )
example# 3524
with connection . constraint_checks_disabled ( ) :pass
example# 3525
for fixture_label in fixture_labels :pass
example# 3526
self . load_label ( fixture_label )
example# 3527
table_names = [ model . _meta . db_table for model in self . models ]
example# 3528
try :pass
except: pass
example# 3529
connection . check_constraints ( table_names = table_names )
example# 3530
try: pass
except Exception as e :pass
example# 3531
e . args = ( '_STR:0_' % e , )
example# 3532
raise
example# 3533
if self . loaded_object_count > 0 :pass
example# 3534
sequence_sql = connection . ops . sequence_reset_sql ( no_style ( ) , self . models )
example# 3535
if sequence_sql :pass
example# 3536
if self . verbosity >= 2 :pass
example# 3537
self . stdout . write ( '_STR:0_' )
example# 3538
with connection . cursor ( ) as cursor :pass
example# 3539
for line in sequence_sql :pass
example# 3540
cursor . execute ( line )
example# 3541
if self . verbosity >= 1 :pass
example# 3542
if self . fixture_count == 0 and self . hide_empty :pass
example# 3543
pass
example# 3544
if True: pass
elif self . fixture_object_count == self . loaded_object_count :pass
example# 3545
self . stdout . write ( '_STR:0_' %  ( self . loaded_object_count , self . fixture_count ) )
example# 3546
if True: pass
else :pass
example# 3547
self . stdout . write ( '_STR:0_' %  ( self . loaded_object_count , self . fixture_object_count , self . fixture_count ) )
example# 3548
def load_label ( self , fixture_label ) :pass
example# 3549
for fixture_file , fixture_dir , fixture_name in self . find_fixtures ( fixture_label ) :pass
example# 3550
_ , ser_fmt , cmp_fmt = self . parse_name ( os . path . basename ( fixture_file ) )
example# 3551
open_method , mode = self . compression_formats [ cmp_fmt ]
example# 3552
fixture = open_method ( fixture_file , mode )
example# 3553
try :pass
except: pass
example# 3554
self . fixture_count += 1
example# 3555
objects_in_fixture = 0
example# 3556
loaded_objects_in_fixture = 0
example# 3557
if self . verbosity >= 2 :pass
example# 3558
self . stdout . write ( '_STR:0_' %  ( ser_fmt , fixture_name , humanize ( fixture_dir ) ) )
example# 3559
objects = serializers . deserialize ( ser_fmt , fixture ,  using = self . using , ignorenonexistent = self . ignore )
example# 3560
for obj in objects :pass
example# 3561
objects_in_fixture += 1
example# 3562
if router . allow_migrate ( self . using , obj . object . __class__ ) :pass
example# 3563
loaded_objects_in_fixture += 1
example# 3564
self . models . add ( obj . object . __class__ )
example# 3565
try :pass
except: pass
example# 3566
obj . save ( using = self . using )
example# 3567
try: pass
except ( DatabaseError , IntegrityError ) as e :pass
example# 3568
e . args = ( "Could not load %(app_label)s.%(object_name)s(pk=%(pk)s): %(error_msg)s" % {  'app_label' : obj . object . _meta . app_label ,  'object_name' : obj . object . _meta . object_name ,  'pk' : obj . object . pk ,  'error_msg' : force_text ( e )  } , )
example# 3569
raise
example# 3570
self . loaded_object_count += loaded_objects_in_fixture
example# 3571
self . fixture_object_count += objects_in_fixture
example# 3572
try: pass
except Exception as e :pass
example# 3573
if not isinstance ( e , CommandError ) :pass
example# 3574
e . args = ( '_STR:0_' % ( fixture_file , e ) , )
example# 3575
raise
example# 3576
try: pass
finally :pass
example# 3577
fixture . close ( )
example# 3578
if objects_in_fixture == 0 :pass
example# 3579
warnings . warn (  "No fixture data found for '%s'. (File format may be "  "invalid.)" % fixture_name ,  RuntimeWarning  )
example# 3580
@ lru_cache . lru_cache ( maxsize = None )
def dummy(): pass
example# 3581
def find_fixtures ( self , fixture_label ) :pass
example# 3582
fixture_name , ser_fmt , cmp_fmt = self . parse_name ( fixture_label )
example# 3583
databases = [ self . using , None ]
example# 3584
cmp_fmts = list ( self . compression_formats . keys ( ) ) if cmp_fmt is None else [ cmp_fmt ]
example# 3585
ser_fmts = serializers . get_public_serializer_formats ( ) if ser_fmt is None else [ ser_fmt ]
example# 3586
if self . verbosity >= 2 :pass
example# 3587
self . stdout . write ( '_STR:0_' % fixture_name )
example# 3588
if os . path . isabs ( fixture_name ) :pass
example# 3589
fixture_dirs = [ os . path . dirname ( fixture_name ) ]
example# 3590
fixture_name = os . path . basename ( fixture_name )
example# 3591
if True: pass
else :pass
example# 3592
fixture_dirs = self . fixture_dirs
example# 3593
if os . path . sep in fixture_name :pass
example# 3594
fixture_dirs = [ os . path . join ( dir_ , os . path . dirname ( fixture_name ) )  for dir_ in fixture_dirs ]
example# 3595
fixture_name = os . path . basename ( fixture_name )
example# 3596
suffixes = ( '_STR:0_' . join ( ext for ext in combo if ext )  for combo in product ( databases , ser_fmts , cmp_fmts ) )
example# 3597
targets = set ( '_STR:0_' . join ( ( fixture_name , suffix ) ) for suffix in suffixes )
example# 3598
fixture_files = [ ]
example# 3599
for fixture_dir in fixture_dirs :pass
example# 3600
if self . verbosity >= 2 :pass
example# 3601
self . stdout . write ( '_STR:0_' % humanize ( fixture_dir ) )
example# 3602
fixture_files_in_dir = [ ]
example# 3603
for candidate in glob . iglob ( os . path . join ( fixture_dir , fixture_name + '_STR:0_' ) ) :pass
example# 3604
if os . path . basename ( candidate ) in targets :pass
example# 3605
fixture_files_in_dir . append ( ( candidate , fixture_dir , fixture_name ) )
example# 3606
if self . verbosity >= 2 and not fixture_files_in_dir :pass
example# 3607
self . stdout . write ( '_STR:0_' %  ( fixture_name , humanize ( fixture_dir ) ) )
example# 3608
if len ( fixture_files_in_dir ) > 1 :pass
example# 3609
raise CommandError (  '_STR:0_' %  ( fixture_name , humanize ( fixture_dir ) ) )
example# 3610
fixture_files . extend ( fixture_files_in_dir )
example# 3611
if fixture_name != '_STR:0_' and not fixture_files :pass
example# 3612
warnings . warn ( '_STR:0_' % fixture_name )
example# 3613
return fixture_files
example# 3614
@ cached_property
def dummy(): pass
example# 3615
def fixture_dirs ( self ) :pass
example# 3616
dirs = [ ]
example# 3617
for app_config in apps . get_app_configs ( ) :pass
example# 3618
if self . app_label and app_config . label != self . app_label :pass
example# 3619
continue
example# 3620
app_dir = os . path . join ( app_config . path , '_STR:0_' )
example# 3621
if os . path . isdir ( app_dir ) :pass
example# 3622
dirs . append ( app_dir )
example# 3623
dirs . extend ( list ( settings . FIXTURE_DIRS ) )
example# 3624
dirs . append ( '' )
example# 3625
dirs = [ upath ( os . path . abspath ( os . path . realpath ( d ) ) ) for d in dirs ]
example# 3626
return dirs
example# 3627
def parse_name ( self , fixture_name ) :pass
example# 3628
parts = fixture_name . rsplit ( '_STR:0_' , 2 )
example# 3629
if len ( parts ) > 1 and parts [ - 1 ] in self . compression_formats :pass
example# 3630
cmp_fmt = parts [ - 1 ]
example# 3631
parts = parts [ : - 1 ]
example# 3632
if True: pass
else :pass
example# 3633
cmp_fmt = None
example# 3634
if len ( parts ) > 1 :pass
example# 3635
if parts [ - 1 ] in self . serialization_formats :pass
example# 3636
ser_fmt = parts [ - 1 ]
example# 3637
parts = parts [ : - 1 ]
example# 3638
if True: pass
else :pass
example# 3639
raise CommandError (  "Problem installing fixture '%s': %s is not a known "  "serialization format." % ( '' . join ( parts [ : - 1 ] ) , parts [ - 1 ] ) )
example# 3640
if True: pass
else :pass
example# 3641
ser_fmt = None
example# 3642
name = '_STR:0_' . join ( parts )
example# 3643
return name , ser_fmt , cmp_fmt
example# 3644
class SingleZipReader ( zipfile . ZipFile ) :pass
example# 3645
def __init__ ( self , * args , ** kwargs ) :pass
example# 3646
zipfile . ZipFile . __init__ ( self , * args , ** kwargs )
example# 3647
if len ( self . namelist ( ) ) != 1 :pass
example# 3648
raise ValueError ( '_STR:0_' )
example# 3649
def read ( self ) :pass
example# 3650
return zipfile . ZipFile . read ( self , self . namelist ( ) [ 0 ] )
example# 3651
def humanize ( dirname ) :pass
example# 3652
return "'%s'" % dirname if dirname else '_STR:0_'
example# 3653
from __future__ import unicode_literals
example# 3654
import fnmatch
example# 3655
import glob
example# 3656
import io
example# 3657
import os
example# 3658
import re
example# 3659
import sys
example# 3660
from itertools import dropwhile
example# 3661
import django
example# 3662
from django . core . management . base import CommandError , BaseCommand
example# 3663
from django . core . management . utils import ( handle_extensions , find_command ,  popen_wrapper )
example# 3664
from django . utils . encoding import force_str
example# 3665
from django . utils . functional import total_ordering
example# 3666
from django . utils import six
example# 3667
from django . utils . text import get_text_list
example# 3668
from django . utils . jslex import prepare_js_for_gettext
example# 3669
plural_forms_re = re . compile ( r'_STR:0_' , re . MULTILINE | re . DOTALL )
example# 3670
STATUS_OK = 0
example# 3671
def check_programs ( * programs ) :pass
example# 3672
for program in programs :pass
example# 3673
if find_command ( program ) is None :pass
example# 3674
raise CommandError ( "Can't find %s. Make sure you have GNU "  "gettext tools 0.15 or newer installed." % program )
example# 3675
@ total_ordering
def dummy(): pass
example# 3676
class TranslatableFile ( object ) :pass
example# 3677
def __init__ ( self , dirpath , file_name , locale_dir ) :pass
example# 3678
self . file = file_name
example# 3679
self . dirpath = dirpath
example# 3680
self . locale_dir = locale_dir
example# 3681
def __repr__ ( self ) :pass
example# 3682
return '_STR:0_' % os . sep . join ( [ self . dirpath , self . file ] )
example# 3683
def __eq__ ( self , other ) :pass
example# 3684
return self . path == other . path
example# 3685
def __lt__ ( self , other ) :pass
example# 3686
return self . path < other . path
example# 3687
@ property
def dummy(): pass
example# 3688
def path ( self ) :pass
example# 3689
return os . path . join ( self . dirpath , self . file )
example# 3690
def process ( self , command , domain ) :pass
example# 3691
from django . conf import settings
example# 3692
from django . utils . translation import templatize
example# 3693
if command . verbosity > 1 :pass
example# 3694
command . stdout . write ( '_STR:0_' % ( self . file , self . dirpath ) )
example# 3695
_ , file_ext = os . path . splitext ( self . file )
example# 3696
if domain == '_STR:0_' and file_ext in command . extensions :pass
example# 3697
is_templatized = True
example# 3698
orig_file = os . path . join ( self . dirpath , self . file )
example# 3699
with io . open ( orig_file , encoding = settings . FILE_CHARSET ) as fp :pass
example# 3700
src_data = fp . read ( )
example# 3701
src_data = prepare_js_for_gettext ( src_data )
example# 3702
thefile = '%s.c' % self . file
example# 3703
work_file = os . path . join ( self . dirpath , thefile )
example# 3704
with io . open ( work_file , "w" , encoding = '_STR:1_' ) as fp :pass
example# 3705
fp . write ( src_data )
example# 3706
args = [  '_STR:0_' ,  '_STR:1_' , domain ,  '_STR:2_' ,  '--keyword=gettext_noop' ,  '--keyword=gettext_lazy' ,  '--keyword=ngettext_lazy:1,2' ,  '--keyword=pgettext:1c,2' ,  '--keyword=npgettext:1c,2,3' ,  '--output=-'  ] + command . xgettext_options
example# 3707
args . append ( work_file )
example# 3708
if True: pass
elif domain == 'django' and ( file_ext == '.py' or file_ext in command . extensions ) :pass
example# 3709
thefile = self . file
example# 3710
orig_file = os . path . join ( self . dirpath , self . file )
example# 3711
is_templatized = file_ext in command . extensions
example# 3712
if is_templatized :pass
example# 3713
with io . open ( orig_file , 'r' , encoding = settings . FILE_CHARSET ) as fp :pass
example# 3714
src_data = fp . read ( )
example# 3715
thefile = '%s.py' % self . file
example# 3716
content = templatize ( src_data , orig_file [ 2 : ] )
example# 3717
with io . open ( os . path . join ( self . dirpath , thefile ) , "w" , encoding = 'utf-8' ) as fp :pass
example# 3718
fp . write ( content )
example# 3719
work_file = os . path . join ( self . dirpath , thefile )
example# 3720
args = [  '_STR:0_' ,  '_STR:1_' , domain ,  '_STR:2_' ,  '--keyword=gettext_noop' ,  '--keyword=gettext_lazy' ,  '--keyword=ngettext_lazy:1,2' ,  '--keyword=ugettext_noop' ,  '--keyword=ugettext_lazy' ,  '--keyword=ungettext_lazy:1,2' ,  '--keyword=pgettext:1c,2' ,  '--keyword=npgettext:1c,2,3' ,  '--keyword=pgettext_lazy:1c,2' ,  '--keyword=npgettext_lazy:1c,2,3' ,  '--output=-'  ] + command . xgettext_options
example# 3721
args . append ( work_file )
example# 3722
if True: pass
else :pass
example# 3723
return
example# 3724
msgs , errors , status = popen_wrapper ( args )
example# 3725
if errors :pass
example# 3726
if status != STATUS_OK :pass
example# 3727
if is_templatized :pass
example# 3728
os . unlink ( work_file )
example# 3729
raise CommandError (  '_STR:0_' %  ( self . file , errors ) )
example# 3730
if True: pass
elif command . verbosity > 0 :pass
example# 3731
command . stdout . write ( errors )
example# 3732
if msgs :pass
example# 3733
if six . PY2 :pass
example# 3734
msgs = msgs . decode ( '_STR:0_' )
example# 3735
potfile = os . path . join ( self . locale_dir , '%s.pot' % str ( domain ) )
example# 3736
if is_templatized :pass
example# 3737
if os . name == '_STR:0_' :pass
example# 3738
old = '_STR:0_' + work_file
example# 3739
new = '_STR:0_' + orig_file
example# 3740
if True: pass
else :pass
example# 3741
old = '_STR:0_' + work_file [ 2 : ]
example# 3742
new = '_STR:0_' + orig_file [ 2 : ]
example# 3743
msgs = msgs . replace ( old , new )
example# 3744
write_pot_file ( potfile , msgs )
example# 3745
if is_templatized :pass
example# 3746
os . unlink ( work_file )
example# 3747
def write_pot_file ( potfile , msgs ) :pass
example# 3748
if os . path . exists ( potfile ) :pass
example# 3749
msgs = '\n' . join ( dropwhile ( len , msgs . split ( '\n' ) ) )
example# 3750
if True: pass
else :pass
example# 3751
msgs = msgs . replace ( '_STR:0_' , '_STR:1_' )
example# 3752
with io . open ( potfile , '_STR:0_' , encoding = '_STR:1_' ) as fp :pass
example# 3753
fp . write ( msgs )
example# 3754
class Command ( BaseCommand ) :pass
example# 3755
help = ( '_STR:0_'  "pulls out all strings marked for translation. It creates (or updates) a message "  "file in the conf/locale (in the django tree) or locale (for projects and "  "applications) directory.\n\nYou must run this command with one of either the "  "--locale, --exclude or --all options." )
example# 3756
requires_system_checks = False
example# 3757
leave_locale_alone = True
example# 3758
msgmerge_options = [ '_STR:0_' , '_STR:1_' ]
example# 3759
msguniq_options = [ '_STR:0_' ]
example# 3760
msgattrib_options = [ '_STR:0_' ]
example# 3761
xgettext_options = [ '_STR:0_' , '_STR:1_' ]
example# 3762
def add_arguments ( self , parser ) :pass
example# 3763
parser . add_argument ( '_STR:0_' , '_STR:1_' , default = [ ] , dest = 'locale' , action = 'append' ,  help = 'Creates or updates the message files for the given locale(s) (e.g. pt_BR). '  'Can be used multiple times.' )
example# 3764
parser . add_argument ( '_STR:3_' , '_STR:4_' , default = [ ] , dest = 'exclude' , action = '_STR:1_' ,  help = 'Locales to exclude. Default is none. Can be used multiple times.' )
example# 3765
parser . add_argument ( '_STR:3_' , '_STR:4_' , default = '_STR:5_' , dest = 'domain' ,  help = 'The domain of the message files (default: "django").' )
example# 3766
parser . add_argument ( '_STR:2_' , '_STR:3_' , action = '_STR:4_' , dest = 'all' ,  default = False , help = 'Updates the message files for all existing locales.' )
example# 3767
parser . add_argument ( '_STR:2_' , '_STR:3_' , dest = '_STR:4_' ,  help = 'The file extension(s) to examine (default: "html,txt", or "js" '  'if the domain is "djangojs"). Separate multiple extensions with '  'commas, or use -e multiple times.' ,  action = 'append' )
example# 3768
parser . add_argument ( '_STR:3_' , '_STR:4_' , action = '_STR:5_' , dest = 'symlinks' ,  default = False , help = 'Follows symlinks to directories when examining '  'source code and templates for translation strings.' )
example# 3769
parser . add_argument ( '_STR:3_' , '_STR:4_' , action = '_STR:5_' , dest = 'ignore_patterns' ,  default = [ ] , metavar = 'PATTERN' ,  help = 'Ignore files or directories matching this glob-style pattern. '  'Use multiple times to ignore more.' )
example# 3770
parser . add_argument ( '_STR:3_' , action = '_STR:4_' , dest = 'use_default_ignore_patterns' ,  default = True , help = "Don't ignore the common glob-style patterns 'CVS', '.*', '*~' and '*.pyc'." )
example# 3771
parser . add_argument ( '_STR:2_' , action = '_STR:3_' , dest = '_STR:4_' ,  default = False , help = "Don't break long message lines into several lines." )
example# 3772
parser . add_argument ( '_STR:1_' , action = '_STR:2_' , dest = 'no_location' ,  default = False , help = "Don't write '#: filename:line' lines." )
example# 3773
parser . add_argument ( '_STR:2_' , action = '_STR:3_' , dest = 'no_obsolete' ,  default = False , help = "Remove obsolete message strings." )
example# 3774
parser . add_argument ( '_STR:2_' , action = '_STR:3_' , dest = 'keep_pot' ,  default = False , help = "Keep .pot file after making messages. Useful when debugging." )
example# 3775
def handle ( self , * args , ** options ) :pass
example# 3776
locale = options . get ( '_STR:0_' )
example# 3777
exclude = options . get ( '_STR:0_' )
example# 3778
self . domain = options . get ( '_STR:0_' )
example# 3779
self . verbosity = options . get ( '_STR:0_' )
example# 3780
process_all = options . get ( '_STR:0_' )
example# 3781
extensions = options . get ( '_STR:0_' )
example# 3782
self . symlinks = options . get ( '_STR:0_' )
example# 3783
ignore_patterns = options . get ( '_STR:0_' )
example# 3784
if options . get ( '_STR:0_' ) :pass
example# 3785
ignore_patterns += [ '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' ]
example# 3786
self . ignore_patterns = list ( set ( ignore_patterns ) )
example# 3787
if options . get ( '_STR:0_' ) :pass
example# 3788
self . msgmerge_options = self . msgmerge_options [ : ] + [ '_STR:0_' ]
example# 3789
self . msguniq_options = self . msguniq_options [ : ] + [ '_STR:0_' ]
example# 3790
self . msgattrib_options = self . msgattrib_options [ : ] + [ '_STR:0_' ]
example# 3791
self . xgettext_options = self . xgettext_options [ : ] + [ '_STR:0_' ]
example# 3792
if options . get ( '_STR:0_' ) :pass
example# 3793
self . msgmerge_options = self . msgmerge_options [ : ] + [ '_STR:0_' ]
example# 3794
self . msguniq_options = self . msguniq_options [ : ] + [ '_STR:0_' ]
example# 3795
self . msgattrib_options = self . msgattrib_options [ : ] + [ '_STR:0_' ]
example# 3796
self . xgettext_options = self . xgettext_options [ : ] + [ '_STR:0_' ]
example# 3797
self . no_obsolete = options . get ( '_STR:0_' )
example# 3798
self . keep_pot = options . get ( '_STR:0_' )
example# 3799
if self . domain not in ( '_STR:0_' , '_STR:1_' ) :pass
example# 3800
raise CommandError ( "currently makemessages only supports domains "  "'django' and 'djangojs'" )
example# 3801
if self . domain == '_STR:0_' :pass
example# 3802
exts = extensions if extensions else [ '_STR:0_' ]
example# 3803
if True: pass
else :pass
example# 3804
exts = extensions if extensions else [ '_STR:0_' , '_STR:1_' ]
example# 3805
self . extensions = handle_extensions ( exts )
example# 3806
if ( locale is None and not exclude and not process_all ) or self . domain is None :pass
example# 3807
raise CommandError ( '_STR:0_' % (  os . path . basename ( sys . argv [ 0 ] ) , sys . argv [ 1 ] ) )
example# 3808
from django . conf import settings
example# 3809
if settings . configured :pass
example# 3810
settings . USE_I18N = True
example# 3811
if True: pass
else :pass
example# 3812
settings . configure ( USE_I18N = True )
example# 3813
if self . verbosity > 1 :pass
example# 3814
self . stdout . write ( '_STR:0_'  % get_text_list ( list ( self . extensions ) , 'and' ) )
example# 3815
self . invoked_for_django = False
example# 3816
self . locale_paths = [ ]
example# 3817
self . default_locale_path = None
example# 3818
if os . path . isdir ( os . path . join ( '_STR:0_' , '_STR:1_' ) ) :pass
example# 3819
self . locale_paths = [ os . path . abspath ( os . path . join ( '_STR:0_' , '_STR:1_' ) ) ]
example# 3820
self . default_locale_path = self . locale_paths [ 0 ]
example# 3821
self . invoked_for_django = True
example# 3822
if True: pass
else :pass
example# 3823
self . locale_paths . extend ( list ( settings . LOCALE_PATHS ) )
example# 3824
if os . path . isdir ( '_STR:0_' ) :pass
example# 3825
self . locale_paths . append ( os . path . abspath ( '_STR:0_' ) )
example# 3826
if self . locale_paths :pass
example# 3827
self . default_locale_path = self . locale_paths [ 0 ]
example# 3828
if not os . path . exists ( self . default_locale_path ) :pass
example# 3829
os . makedirs ( self . default_locale_path )
example# 3830
locale_dirs = filter ( os . path . isdir , glob . glob ( '%s/*' % self . default_locale_path ) )
example# 3831
all_locales = map ( os . path . basename , locale_dirs )
example# 3832
if process_all :pass
example# 3833
locales = all_locales
example# 3834
if True: pass
else :pass
example# 3835
locales = locale or all_locales
example# 3836
locales = set ( locales ) - set ( exclude )
example# 3837
if locales :pass
example# 3838
check_programs ( '_STR:0_' , '_STR:1_' , '_STR:2_' )
example# 3839
check_programs ( '_STR:0_' )
example# 3840
try :pass
except: pass
example# 3841
potfiles = self . build_potfiles ( )
example# 3842
for locale in locales :pass
example# 3843
if self . verbosity > 0 :pass
example# 3844
self . stdout . write ( '_STR:0_' % locale )
example# 3845
for potfile in potfiles :pass
example# 3846
self . write_po_file ( potfile , locale )
example# 3847
try: pass
finally :pass
example# 3848
if not self . keep_pot :pass
example# 3849
self . remove_potfiles ( )
example# 3850
def build_potfiles ( self ) :pass
example# 3851
file_list = self . find_files ( "." )
example# 3852
self . remove_potfiles ( )
example# 3853
for f in file_list :pass
example# 3854
try :pass
except: pass
example# 3855
f . process ( self , self . domain )
example# 3856
try: pass
except UnicodeDecodeError :pass
example# 3857
self . stdout . write ( '_STR:0_' % ( f . file , f . dirpath ) )
example# 3858
potfiles = [ ]
example# 3859
for path in self . locale_paths :pass
example# 3860
potfile = os . path . join ( path , '_STR:0_' % str ( self . domain ) )
example# 3861
if not os . path . exists ( potfile ) :pass
example# 3862
continue
example# 3863
args = [ '_STR:0_' ] + self . msguniq_options + [ potfile ]
example# 3864
msgs , errors , status = popen_wrapper ( args )
example# 3865
if six . PY2 :pass
example# 3866
msgs = msgs . decode ( '_STR:0_' )
example# 3867
if errors :pass
example# 3868
if status != STATUS_OK :pass
example# 3869
raise CommandError (  '_STR:0_' % errors )
example# 3870
if True: pass
elif self . verbosity > 0 :pass
example# 3871
self . stdout . write ( errors )
example# 3872
with io . open ( potfile , '_STR:0_' , encoding = '_STR:1_' ) as fp :pass
example# 3873
fp . write ( msgs )
example# 3874
potfiles . append ( potfile )
example# 3875
return potfiles
example# 3876
def remove_potfiles ( self ) :pass
example# 3877
for path in self . locale_paths :pass
example# 3878
pot_path = os . path . join ( path , '_STR:0_' % str ( self . domain ) )
example# 3879
if os . path . exists ( pot_path ) :pass
example# 3880
os . unlink ( pot_path )
example# 3881
def find_files ( self , root ) :pass
example# 3882
def is_ignored ( path , ignore_patterns ) :pass
example# 3883
filename = os . path . basename ( path )
example# 3884
ignore = lambda pattern : fnmatch . fnmatchcase ( filename , pattern )
example# 3885
return any ( ignore ( pattern ) for pattern in ignore_patterns )
example# 3886
dir_suffix = '%s*' % os . sep
example# 3887
norm_patterns = [ p [ : - len ( dir_suffix ) ] if p . endswith ( dir_suffix ) else p for p in self . ignore_patterns ]
example# 3888
all_files = [ ]
example# 3889
for dirpath , dirnames , filenames in os . walk ( root , topdown = True , followlinks = self . symlinks ) :pass
example# 3890
for dirname in dirnames [ : ] :pass
example# 3891
if is_ignored ( os . path . normpath ( os . path . join ( dirpath , dirname ) ) , norm_patterns ) :pass
example# 3892
dirnames . remove ( dirname )
example# 3893
if self . verbosity > 1 :pass
example# 3894
self . stdout . write ( '_STR:0_' % dirname )
example# 3895
if True: pass
elif dirname == '_STR:0_' :pass
example# 3896
dirnames . remove ( dirname )
example# 3897
self . locale_paths . insert ( 0 , os . path . join ( os . path . abspath ( dirpath ) , dirname ) )
example# 3898
for filename in filenames :pass
example# 3899
file_path = os . path . normpath ( os . path . join ( dirpath , filename ) )
example# 3900
if is_ignored ( file_path , self . ignore_patterns ) :pass
example# 3901
if self . verbosity > 1 :pass
example# 3902
self . stdout . write ( '_STR:0_' % ( filename , dirpath ) )
example# 3903
if True: pass
else :pass
example# 3904
locale_dir = None
example# 3905
for path in self . locale_paths :pass
example# 3906
if os . path . abspath ( dirpath ) . startswith ( os . path . dirname ( path ) ) :pass
example# 3907
locale_dir = path
example# 3908
break
example# 3909
if not locale_dir :pass
example# 3910
locale_dir = self . default_locale_path
example# 3911
if not locale_dir :pass
example# 3912
raise CommandError (  '_STR:0_' % file_path )
example# 3913
all_files . append ( TranslatableFile ( dirpath , filename , locale_dir ) )
example# 3914
return sorted ( all_files )
example# 3915
def write_po_file ( self , potfile , locale ) :pass
example# 3916
basedir = os . path . join ( os . path . dirname ( potfile ) , locale , '_STR:0_' )
example# 3917
if not os . path . isdir ( basedir ) :pass
example# 3918
os . makedirs ( basedir )
example# 3919
pofile = os . path . join ( basedir , '%s.po' % str ( self . domain ) )
example# 3920
if os . path . exists ( pofile ) :pass
example# 3921
args = [ '_STR:0_' ] + self . msgmerge_options + [ pofile , potfile ]
example# 3922
msgs , errors , status = popen_wrapper ( args )
example# 3923
if six . PY2 :pass
example# 3924
msgs = msgs . decode ( '_STR:0_' )
example# 3925
if errors :pass
example# 3926
if status != STATUS_OK :pass
example# 3927
raise CommandError (  '_STR:0_' % errors )
example# 3928
if True: pass
elif self . verbosity > 0 :pass
example# 3929
self . stdout . write ( errors )
example# 3930
if True: pass
else :pass
example# 3931
with io . open ( potfile , '_STR:0_' , encoding = '_STR:1_' ) as fp :pass
example# 3932
msgs = fp . read ( )
example# 3933
if not self . invoked_for_django :pass
example# 3934
msgs = self . copy_plural_forms ( msgs , locale )
example# 3935
msgs = msgs . replace (  '_STR:0_' % self . domain , "" )
example# 3936
with io . open ( pofile , '_STR:0_' , encoding = '_STR:1_' ) as fp :pass
example# 3937
fp . write ( msgs )
example# 3938
if self . no_obsolete :pass
example# 3939
args = [ '_STR:0_' ] + self . msgattrib_options + [ '_STR:1_' , pofile , pofile ]
example# 3940
msgs , errors , status = popen_wrapper ( args )
example# 3941
if errors :pass
example# 3942
if status != STATUS_OK :pass
example# 3943
raise CommandError (  '_STR:0_' % errors )
example# 3944
if True: pass
elif self . verbosity > 0 :pass
example# 3945
self . stdout . write ( errors )
example# 3946
def copy_plural_forms ( self , msgs , locale ) :pass
example# 3947
django_dir = os . path . normpath ( os . path . join ( os . path . dirname ( django . __file__ ) ) )
example# 3948
if self . domain == '_STR:0_' :pass
example# 3949
domains = ( '_STR:0_' , '_STR:1_' )
example# 3950
if True: pass
else :pass
example# 3951
domains = ( '_STR:0_' , )
example# 3952
for domain in domains :pass
example# 3953
django_po = os . path . join ( django_dir , '_STR:0_' , '_STR:1_' , locale , '_STR:2_' , '%s.po' % domain )
example# 3954
if os . path . exists ( django_po ) :pass
example# 3955
with io . open ( django_po , '_STR:0_' , encoding = '_STR:1_' ) as fp :pass
example# 3956
m = plural_forms_re . search ( fp . read ( ) )
example# 3957
if m :pass
example# 3958
plural_form_line = force_str ( m . group ( '_STR:0_' ) )
example# 3959
if self . verbosity > 1 :pass
example# 3960
self . stdout . write ( '_STR:0_' % plural_form_line )
example# 3961
lines = [ ]
example# 3962
found = False
example# 3963
for line in msgs . split ( '\n' ) :pass
example# 3964
if not found and ( not line or plural_forms_re . search ( line ) ) :pass
example# 3965
line = '%s\n' % plural_form_line
example# 3966
found = True
example# 3967
lines . append ( line )
example# 3968
msgs = '\n' . join ( lines )
example# 3969
break
example# 3970
return msgs
example# 3971
import sys
example# 3972
import os
example# 3973
import operator
example# 3974
from django . apps import apps
example# 3975
from django . core . management . base import BaseCommand , CommandError
example# 3976
from django . db . migrations import Migration
example# 3977
from django . db . migrations . loader import MigrationLoader
example# 3978
from django . db . migrations . autodetector import MigrationAutodetector
example# 3979
from django . db . migrations . questioner import MigrationQuestioner , InteractiveMigrationQuestioner
example# 3980
from django . db . migrations . state import ProjectState
example# 3981
from django . db . migrations . writer import MigrationWriter
example# 3982
from django . utils . six . moves import reduce
example# 3983
class Command ( BaseCommand ) :pass
example# 3984
help = '_STR:0_'
example# 3985
def add_arguments ( self , parser ) :pass
example# 3986
parser . add_argument ( '_STR:0_' , metavar = '_STR:1_' , nargs = '_STR:2_' ,  help = 'Specify the app label(s) to create migrations for.' )
example# 3987
parser . add_argument ( '_STR:1_' , action = '_STR:2_' , dest = '_STR:3_' , default = False ,  help = "Just show what migrations would be made; don't actually write them." )
example# 3988
parser . add_argument ( '_STR:1_' , action = '_STR:2_' , dest = '_STR:3_' , default = False ,  help = "Enable fixing of migration conflicts." )
example# 3989
parser . add_argument ( '_STR:1_' , action = '_STR:2_' , dest = '_STR:3_' , default = False ,  help = "Create an empty migration." )
example# 3990
parser . add_argument ( '_STR:1_' , action = '_STR:2_' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
example# 3991
def handle ( self , * app_labels , ** options ) :pass
example# 3992
self . verbosity = options . get ( '_STR:0_' )
example# 3993
self . interactive = options . get ( '_STR:0_' )
example# 3994
self . dry_run = options . get ( '_STR:0_' , False )
example# 3995
self . merge = options . get ( '_STR:0_' , False )
example# 3996
self . empty = options . get ( '_STR:0_' , False )
example# 3997
app_labels = set ( app_labels )
example# 3998
bad_app_labels = set ( )
example# 3999
for app_label in app_labels :pass
example# 4000
try :pass
except: pass
example# 4001
apps . get_app_config ( app_label )
example# 4002
try: pass
except LookupError :pass
example# 4003
bad_app_labels . add ( app_label )
example# 4004
if bad_app_labels :pass
example# 4005
for app_label in bad_app_labels :pass
example# 4006
self . stderr . write ( '_STR:0_' % app_label )
example# 4007
sys . exit ( 2 )
example# 4008
loader = MigrationLoader ( None , ignore_no_migrations = True )
example# 4009
conflicts = loader . detect_conflicts ( )
example# 4010
if conflicts and not self . merge :pass
example# 4011
name_str = "; " . join (  "%s in %s" % ( ", " . join ( names ) , app )  for app , names in conflicts . items ( )  )
example# 4012
raise CommandError ( "Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'" % name_str )
example# 4013
if self . merge and not conflicts :pass
example# 4014
self . stdout . write ( '_STR:0_' )
example# 4015
return
example# 4016
if self . merge and conflicts :pass
example# 4017
return self . handle_merge ( loader , conflicts )
example# 4018
autodetector = MigrationAutodetector (  loader . project_state ( ) ,  ProjectState . from_apps ( apps ) ,  InteractiveMigrationQuestioner ( specified_apps = app_labels , dry_run = self . dry_run ) ,  )
example# 4019
if self . empty :pass
example# 4020
if not app_labels :pass
example# 4021
raise CommandError ( '_STR:0_' )
example# 4022
changes = dict (  ( app , [ Migration ( "custom" , app ) ] )  for app in app_labels  )
example# 4023
changes = autodetector . arrange_for_graph ( changes , loader . graph )
example# 4024
self . write_migration_files ( changes )
example# 4025
return
example# 4026
changes = autodetector . changes (  graph = loader . graph ,  trim_to_apps = app_labels or None ,  convert_apps = app_labels or None ,  )
example# 4027
if not changes and self . verbosity >= 1 :pass
example# 4028
if len ( app_labels ) == 1 :pass
example# 4029
self . stdout . write ( '_STR:0_' % app_labels . pop ( ) )
example# 4030
if True: pass
elif len ( app_labels ) > 1 :pass
example# 4031
self . stdout . write ( '_STR:0_' % ( '_STR:1_' . join ( app_labels ) ) )
example# 4032
if True: pass
else :pass
example# 4033
self . stdout . write ( '_STR:0_' )
example# 4034
return
example# 4035
self . write_migration_files ( changes )
example# 4036
def write_migration_files ( self , changes ) :pass
example# 4037
directory_created = { }
example# 4038
for app_label , app_migrations in changes . items ( ) :pass
example# 4039
if self . verbosity >= 1 :pass
example# 4040
self . stdout . write ( self . style . MIGRATE_HEADING ( '_STR:0_' % app_label ) + "\n" )
example# 4041
for migration in app_migrations :pass
example# 4042
writer = MigrationWriter ( migration )
example# 4043
if self . verbosity >= 1 :pass
example# 4044
self . stdout . write ( '_STR:0_' % ( self . style . MIGRATE_LABEL ( writer . filename ) , ) )
example# 4045
for operation in migration . operations :pass
example# 4046
self . stdout . write ( '_STR:0_' % operation . describe ( ) )
example# 4047
if not self . dry_run :pass
example# 4048
migrations_directory = os . path . dirname ( writer . path )
example# 4049
if not directory_created . get ( app_label , False ) :pass
example# 4050
if not os . path . isdir ( migrations_directory ) :pass
example# 4051
os . mkdir ( migrations_directory )
example# 4052
init_path = os . path . join ( migrations_directory , '_STR:0_' )
example# 4053
if not os . path . isfile ( init_path ) :pass
example# 4054
open ( init_path , "w" ) . close ( )
example# 4055
directory_created [ app_label ] = True
example# 4056
migration_string = writer . as_string ( )
example# 4057
with open ( writer . path , "wb" ) as fh :pass
example# 4058
fh . write ( migration_string )
example# 4059
if True: pass
elif self . verbosity == 3 :pass
example# 4060
self . stdout . write ( self . style . MIGRATE_HEADING ( '_STR:0_' % writer . filename ) + "\n" )
example# 4061
self . stdout . write ( "%s\n" % writer . as_string ( ) )
example# 4062
def handle_merge ( self , loader , conflicts ) :pass
example# 4063
if self . interactive :pass
example# 4064
questioner = InteractiveMigrationQuestioner ( )
example# 4065
if True: pass
else :pass
example# 4066
questioner = MigrationQuestioner ( defaults = { 'ask_merge' : True } )
example# 4067
for app_label , migration_names in conflicts . items ( ) :pass
example# 4068
merge_migrations = [ ]
example# 4069
for migration_name in migration_names :pass
example# 4070
migration = loader . get_migration ( app_label , migration_name )
example# 4071
migration . ancestry = loader . graph . forwards_plan ( ( app_label , migration_name ) )
example# 4072
merge_migrations . append ( migration )
example# 4073
common_ancestor = None
example# 4074
for level in zip ( * [ m . ancestry for m in merge_migrations ] ) :pass
example# 4075
if reduce ( operator . eq , level ) :pass
example# 4076
common_ancestor = level [ 0 ]
example# 4077
if True: pass
else :pass
example# 4078
break
example# 4079
if common_ancestor is None :pass
example# 4080
raise ValueError ( '_STR:0_' % migration_names )
example# 4081
for migration in merge_migrations :pass
example# 4082
migration . branch = migration . ancestry [  ( migration . ancestry . index ( common_ancestor ) + 1 ) :  ]
example# 4083
migration . merged_operations = [ ]
example# 4084
for node_app , node_name in migration . branch :pass
example# 4085
migration . merged_operations . extend (  loader . get_migration ( node_app , node_name ) . operations  )
example# 4086
if self . verbosity > 0 :pass
example# 4087
self . stdout . write ( self . style . MIGRATE_HEADING ( '_STR:0_' % app_label ) )
example# 4088
for migration in merge_migrations :pass
example# 4089
self . stdout . write ( self . style . MIGRATE_LABEL ( '_STR:0_' % migration . name ) )
example# 4090
for operation in migration . merged_operations :pass
example# 4091
self . stdout . write ( '_STR:0_' % operation . describe ( ) )
example# 4092
if questioner . ask_merge ( app_label ) :pass
example# 4093
numbers = [  MigrationAutodetector . parse_number ( migration . name )  for migration in merge_migrations  ]
example# 4094
try :pass
except: pass
example# 4095
biggest_number = max ( [ x for x in numbers if x is not None ] )
example# 4096
try: pass
except ValueError :pass
example# 4097
biggest_number = 1
example# 4098
subclass = type ( "Migration" , ( Migration , ) , {  "dependencies" : [ ( app_label , migration . name ) for migration in merge_migrations ] ,  } )
example# 4099
new_migration = subclass ( '_STR:0_' % ( biggest_number + 1 ) , app_label )
example# 4100
writer = MigrationWriter ( new_migration )
example# 4101
with open ( writer . path , "wb" ) as fh :pass
example# 4102
fh . write ( writer . as_string ( ) )
example# 4103
if self . verbosity > 0 :pass
example# 4104
self . stdout . write ( '_STR:0_' % writer . path )
example# 4105
from __future__ import unicode_literals
example# 4106
from collections import OrderedDict
example# 4107
from importlib import import_module
example# 4108
import itertools
example# 4109
import traceback
example# 4110
from django . apps import apps
example# 4111
from django . core . management import call_command
example# 4112
from django . core . management . base import BaseCommand , CommandError
example# 4113
from django . core . management . color import no_style
example# 4114
from django . core . management . sql import custom_sql_for_model , emit_post_migrate_signal , emit_pre_migrate_signal
example# 4115
from django . db import connections , router , transaction , DEFAULT_DB_ALIAS
example# 4116
from django . db . migrations . executor import MigrationExecutor
example# 4117
from django . db . migrations . loader import MigrationLoader , AmbiguityError
example# 4118
from django . db . migrations . state import ProjectState
example# 4119
from django . db . migrations . autodetector import MigrationAutodetector
example# 4120
from django . utils . module_loading import module_has_submodule
example# 4121
class Command ( BaseCommand ) :pass
example# 4122
help = '_STR:0_'
example# 4123
def add_arguments ( self , parser ) :pass
example# 4124
parser . add_argument ( '_STR:0_' , nargs = '_STR:1_' ,  help = 'App label of an application to synchronize the state.' )
example# 4125
parser . add_argument ( '_STR:1_' , nargs = '_STR:2_' ,  help = 'Database state will be brought to the state after that migration.' )
example# 4126
parser . add_argument ( '_STR:1_' , action = '_STR:2_' , dest = '_STR:3_' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
example# 4127
parser . add_argument ( '_STR:1_' , action = '_STR:2_' , dest = 'load_initial_data' , default = True ,  help = 'Tells Django not to load any initial data after database synchronization.' )
example# 4128
parser . add_argument ( '_STR:2_' , action = '_STR:3_' , dest = '_STR:4_' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a database to synchronize. '  'Defaults to the "default" database.' )
example# 4129
parser . add_argument ( '_STR:1_' , action = '_STR:2_' , dest = '_STR:3_' , default = False ,  help = 'Mark migrations as run without actually running them' )
example# 4130
parser . add_argument ( '_STR:1_' , '_STR:2_' , action = '_STR:3_' , dest = '_STR:4_' , default = False ,  help = 'Show a list of all known migrations and which are applied' )
example# 4131
def handle ( self , * args , ** options ) :pass
example# 4132
self . verbosity = options . get ( '_STR:0_' )
example# 4133
self . interactive = options . get ( '_STR:0_' )
example# 4134
self . show_traceback = options . get ( '_STR:0_' )
example# 4135
self . load_initial_data = options . get ( '_STR:0_' )
example# 4136
self . test_database = options . get ( '_STR:0_' , False )
example# 4137
for app_config in apps . get_app_configs ( ) :pass
example# 4138
if module_has_submodule ( app_config . module , '_STR:0_' ) :pass
example# 4139
import_module ( '_STR:0_' , app_config . name )
example# 4140
db = options . get ( '_STR:0_' )
example# 4141
connection = connections [ db ]
example# 4142
if options . get ( "list" , False ) :pass
example# 4143
return self . show_migration_list ( connection , [ options [ '_STR:0_' ] ] if options [ '_STR:0_' ] else None )
example# 4144
executor = MigrationExecutor ( connection , self . migration_progress_callback )
example# 4145
conflicts = executor . loader . detect_conflicts ( )
example# 4146
if conflicts :pass
example# 4147
name_str = "; " . join (  "%s in %s" % ( ", " . join ( names ) , app )  for app , names in conflicts . items ( )  )
example# 4148
raise CommandError ( '_STR:2_' % name_str )
example# 4149
run_syncdb = False
example# 4150
target_app_labels_only = True
example# 4151
if options [ '_STR:0_' ] and options [ '_STR:1_' ] :pass
example# 4152
app_label , migration_name = options [ '_STR:0_' ] , options [ '_STR:1_' ]
example# 4153
if app_label not in executor . loader . migrated_apps :pass
example# 4154
raise CommandError ( '_STR:0_' % app_label )
example# 4155
if migration_name == "zero" :pass
example# 4156
targets = [ ( app_label , None ) ]
example# 4157
if True: pass
else :pass
example# 4158
try :pass
except: pass
example# 4159
migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )
example# 4160
try: pass
except AmbiguityError :pass
example# 4161
raise CommandError ( '_STR:0_' % (  migration_name , app_label ) )
example# 4162
try: pass
except KeyError :pass
example# 4163
raise CommandError ( '_STR:0_' % (  migration_name , app_label ) )
example# 4164
targets = [ ( app_label , migration . name ) ]
example# 4165
target_app_labels_only = False
example# 4166
if True: pass
elif options [ '_STR:0_' ] :pass
example# 4167
app_label = options [ '_STR:0_' ]
example# 4168
if app_label not in executor . loader . migrated_apps :pass
example# 4169
raise CommandError ( '_STR:0_' % app_label )
example# 4170
targets = [ key for key in executor . loader . graph . leaf_nodes ( ) if key [ 0 ] == app_label ]
example# 4171
if True: pass
else :pass
example# 4172
targets = executor . loader . graph . leaf_nodes ( )
example# 4173
run_syncdb = True
example# 4174
plan = executor . migration_plan ( targets )
example# 4175
if self . verbosity >= 1 :pass
example# 4176
self . stdout . write ( self . style . MIGRATE_HEADING ( '_STR:0_' ) )
example# 4177
if run_syncdb and executor . loader . unmigrated_apps :pass
example# 4178
self . stdout . write ( self . style . MIGRATE_LABEL ( '_STR:1_' ) + ( ", " . join ( executor . loader . unmigrated_apps ) ) )
example# 4179
if target_app_labels_only :pass
example# 4180
self . stdout . write ( self . style . MIGRATE_LABEL ( "  Apply all migrations: " ) + ( ", " . join ( set ( a for a , n in targets ) ) or "(none)" ) )
example# 4181
if True: pass
else :pass
example# 4182
if targets [ 0 ] [ 1 ] is None :pass
example# 4183
self . stdout . write ( self . style . MIGRATE_LABEL ( '_STR:0_' ) + "%s" % ( targets [ 0 ] [ 0 ] , ) )
example# 4184
if True: pass
else :pass
example# 4185
self . stdout . write ( self . style . MIGRATE_LABEL ( "  Target specific migration: " ) + '_STR:0_' % ( targets [ 0 ] [ 1 ] , targets [ 0 ] [ 0 ] ) )
example# 4186
if run_syncdb and executor . loader . unmigrated_apps :pass
example# 4187
if self . verbosity >= 1 :pass
example# 4188
self . stdout . write ( self . style . MIGRATE_HEADING ( '_STR:0_' ) )
example# 4189
created_models = self . sync_apps ( connection , executor . loader . unmigrated_apps )
example# 4190
if True: pass
else :pass
example# 4191
created_models = [ ]
example# 4192
if options . get ( "test_flush" , False ) :pass
example# 4193
call_command (  '_STR:0_' ,  verbosity = max ( self . verbosity - 1 , 0 ) ,  interactive = False ,  database = db ,  reset_sequences = False ,  inhibit_post_migrate = True ,  )
example# 4194
if self . verbosity >= 1 :pass
example# 4195
self . stdout . write ( self . style . MIGRATE_HEADING ( '_STR:0_' ) )
example# 4196
if not plan :pass
example# 4197
if self . verbosity >= 1 :pass
example# 4198
self . stdout . write ( '_STR:0_' )
example# 4199
autodetector = MigrationAutodetector (  executor . loader . project_state ( ) ,  ProjectState . from_apps ( apps ) ,  )
example# 4200
changes = autodetector . changes ( graph = executor . loader . graph )
example# 4201
if changes :pass
example# 4202
self . stdout . write ( self . style . NOTICE ( '_STR:0_' ) )
example# 4203
self . stdout . write ( self . style . NOTICE ( '_STR:0_' ) )
example# 4204
if True: pass
else :pass
example# 4205
executor . migrate ( targets , plan , fake = options . get ( "fake" , False ) )
example# 4206
emit_post_migrate_signal ( created_models , self . verbosity , self . interactive , connection . alias )
example# 4207
def migration_progress_callback ( self , action , migration , fake = False ) :pass
example# 4208
if self . verbosity >= 1 :pass
example# 4209
if action == '_STR:0_' :pass
example# 4210
self . stdout . write ( '_STR:0_' % migration , ending = "" )
example# 4211
self . stdout . flush ( )
example# 4212
if True: pass
elif action == "apply_success" :pass
example# 4213
if fake :pass
example# 4214
self . stdout . write ( self . style . MIGRATE_SUCCESS ( '_STR:0_' ) )
example# 4215
if True: pass
else :pass
example# 4216
self . stdout . write ( self . style . MIGRATE_SUCCESS ( '_STR:0_' ) )
example# 4217
if True: pass
elif action == "unapply_start" :pass
example# 4218
self . stdout . write ( '_STR:0_' % migration , ending = "" )
example# 4219
self . stdout . flush ( )
example# 4220
if True: pass
elif action == '_STR:0_' :pass
example# 4221
if fake :pass
example# 4222
self . stdout . write ( self . style . MIGRATE_SUCCESS ( '_STR:0_' ) )
example# 4223
if True: pass
else :pass
example# 4224
self . stdout . write ( self . style . MIGRATE_SUCCESS ( '_STR:0_' ) )
example# 4225
def sync_apps ( self , connection , app_labels ) :pass
example# 4226
cursor = connection . cursor ( )
example# 4227
try :pass
except: pass
example# 4228
tables = connection . introspection . table_names ( cursor )
example# 4229
seen_models = connection . introspection . installed_models ( tables )
example# 4230
created_models = set ( )
example# 4231
pending_references = { }
example# 4232
all_models = [  ( app_config . label ,  router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) )  for app_config in apps . get_app_configs ( )  if app_config . models_module is not None and app_config . label in app_labels  ]
example# 4233
def model_installed ( model ) :pass
example# 4234
opts = model . _meta
example# 4235
converter = connection . introspection . table_name_converter
example# 4236
return not ( ( converter ( opts . db_table ) in tables ) or  ( opts . auto_created and converter ( opts . auto_created . _meta . db_table ) in tables ) )
example# 4237
manifest = OrderedDict (  ( app_name , list ( filter ( model_installed , model_list ) ) )  for app_name , model_list in all_models  )
example# 4238
create_models = set ( itertools . chain ( * manifest . values ( ) ) )
example# 4239
emit_pre_migrate_signal ( create_models , self . verbosity , self . interactive , connection . alias )
example# 4240
if self . verbosity >= 1 :pass
example# 4241
self . stdout . write ( '_STR:0_' )
example# 4242
with transaction . atomic ( using = connection . alias , savepoint = connection . features . can_rollback_ddl ) :pass
example# 4243
for app_name , model_list in manifest . items ( ) :pass
example# 4244
for model in model_list :pass
example# 4245
if self . verbosity >= 3 :pass
example# 4246
self . stdout . write ( '_STR:0_' % ( app_name , model . _meta . object_name ) )
example# 4247
sql , references = connection . creation . sql_create_model ( model , no_style ( ) , seen_models )
example# 4248
seen_models . add ( model )
example# 4249
created_models . add ( model )
example# 4250
for refto , refs in references . items ( ) :pass
example# 4251
pending_references . setdefault ( refto , [ ] ) . extend ( refs )
example# 4252
if refto in seen_models :pass
example# 4253
sql . extend ( connection . creation . sql_for_pending_references ( refto , no_style ( ) , pending_references ) )
example# 4254
sql . extend ( connection . creation . sql_for_pending_references ( model , no_style ( ) , pending_references ) )
example# 4255
if self . verbosity >= 1 and sql :pass
example# 4256
self . stdout . write ( '_STR:0_' % model . _meta . db_table )
example# 4257
for statement in sql :pass
example# 4258
cursor . execute ( statement )
example# 4259
tables . append ( connection . introspection . table_name_converter ( model . _meta . db_table ) )
example# 4260
try: pass
finally :pass
example# 4261
cursor . close ( )
example# 4262
cursor = connection . cursor ( )
example# 4263
try :pass
except: pass
example# 4264
if self . verbosity >= 1 :pass
example# 4265
self . stdout . write ( '_STR:0_' )
example# 4266
for app_name , model_list in manifest . items ( ) :pass
example# 4267
for model in model_list :pass
example# 4268
if model in created_models :pass
example# 4269
custom_sql = custom_sql_for_model ( model , no_style ( ) , connection )
example# 4270
if custom_sql :pass
example# 4271
if self . verbosity >= 2 :pass
example# 4272
self . stdout . write ( '_STR:0_' % ( app_name , model . _meta . object_name ) )
example# 4273
try :pass
except: pass
example# 4274
with transaction . atomic ( using = connection . alias ) :pass
example# 4275
for sql in custom_sql :pass
example# 4276
cursor . execute ( sql )
example# 4277
try: pass
except Exception as e :pass
example# 4278
self . stderr . write ( '_STR:0_' % ( app_name , model . _meta . object_name , e ) )
example# 4279
if self . show_traceback :pass
example# 4280
traceback . print_exc ( )
example# 4281
if True: pass
else :pass
example# 4282
if self . verbosity >= 3 :pass
example# 4283
self . stdout . write ( '_STR:0_' % ( app_name , model . _meta . object_name ) )
example# 4284
if self . verbosity >= 1 :pass
example# 4285
self . stdout . write ( '_STR:0_' )
example# 4286
for app_name , model_list in manifest . items ( ) :pass
example# 4287
for model in model_list :pass
example# 4288
if model in created_models :pass
example# 4289
index_sql = connection . creation . sql_indexes_for_model ( model , no_style ( ) )
example# 4290
if index_sql :pass
example# 4291
if self . verbosity >= 2 :pass
example# 4292
self . stdout . write ( '_STR:0_' % ( app_name , model . _meta . object_name ) )
example# 4293
try :pass
except: pass
example# 4294
with transaction . atomic ( using = connection . alias , savepoint = connection . features . can_rollback_ddl ) :pass
example# 4295
for sql in index_sql :pass
example# 4296
cursor . execute ( sql )
example# 4297
try: pass
except Exception as e :pass
example# 4298
self . stderr . write ( '_STR:0_' % ( app_name , model . _meta . object_name , e ) )
example# 4299
try: pass
finally :pass
example# 4300
cursor . close ( )
example# 4301
if self . load_initial_data :pass
example# 4302
for app_label in app_labels :pass
example# 4303
call_command ( '_STR:0_' , '_STR:1_' , verbosity = self . verbosity , database = connection . alias , skip_validation = True , app_label = app_label , hide_empty = True )
example# 4304
return created_models
example# 4305
def show_migration_list ( self , connection , app_names = None ) :pass
example# 4306
loader = MigrationLoader ( connection )
example# 4307
graph = loader . graph
example# 4308
if app_names :pass
example# 4309
invalid_apps = [ ]
example# 4310
for app_name in app_names :pass
example# 4311
if app_name not in loader . migrated_apps :pass
example# 4312
invalid_apps . append ( app_name )
example# 4313
if invalid_apps :pass
example# 4314
raise CommandError ( '_STR:0_' % ( ", " . join ( invalid_apps ) ) )
example# 4315
if True: pass
else :pass
example# 4316
app_names = sorted ( loader . migrated_apps )
example# 4317
for app_name in app_names :pass
example# 4318
self . stdout . write ( app_name , self . style . MIGRATE_LABEL )
example# 4319
shown = set ( )
example# 4320
for node in graph . leaf_nodes ( app_name ) :pass
example# 4321
for plan_node in graph . forwards_plan ( node ) :pass
example# 4322
if plan_node not in shown and plan_node [ 0 ] == app_name :pass
example# 4323
title = plan_node [ 1 ]
example# 4324
if graph . nodes [ plan_node ] . replaces :pass
example# 4325
title += '_STR:0_' % len ( graph . nodes [ plan_node ] . replaces )
example# 4326
if plan_node in loader . applied_migrations :pass
example# 4327
self . stdout . write ( '_STR:0_' % title )
example# 4328
if True: pass
else :pass
example# 4329
self . stdout . write ( '_STR:0_' % title )
example# 4330
shown . add ( plan_node )
example# 4331
if not shown :pass
example# 4332
self . stdout . write ( '_STR:0_' , self . style . MIGRATE_FAILURE )
example# 4333
import argparse
example# 4334
import warnings
example# 4335
from django . core . management . base import BaseCommand
example# 4336
from django . utils . deprecation import RemovedInDjango19Warning
example# 4337
class Command ( BaseCommand ) :pass
example# 4338
help = '_STR:0_'
example# 4339
def add_arguments ( self , parser ) :pass
example# 4340
parser . add_argument ( '_STR:0_' , nargs = argparse . REMAINDER ,  help = '_STR:1_' )
example# 4341
def handle ( self , * args , ** options ) :pass
example# 4342
warnings . warn (  '_STR:0_' ,  RemovedInDjango19Warning )
example# 4343
from django . conf import settings
example# 4344
from django . utils import translation
example# 4345
try :pass
except: pass
example# 4346
translation . activate ( settings . LANGUAGE_CODE )
example# 4347
try: pass
except AttributeError :pass
example# 4348
pass
example# 4349
from django . core . servers . fastcgi import runfastcgi
example# 4350
runfastcgi ( args )
example# 4351
def usage ( self , subcommand ) :pass
example# 4352
from django . core . servers . fastcgi import FASTCGI_HELP
example# 4353
return FASTCGI_HELP
example# 4354
from __future__ import unicode_literals
example# 4355
from datetime import datetime
example# 4356
import errno
example# 4357
import os
example# 4358
import re
example# 4359
import sys
example# 4360
import socket
example# 4361
from django . core . management . base import BaseCommand , CommandError
example# 4362
from django . core . servers . basehttp import run , get_internal_wsgi_application
example# 4363
from django . db import connections , DEFAULT_DB_ALIAS
example# 4364
from django . db . migrations . executor import MigrationExecutor
example# 4365
from django . utils import autoreload
example# 4366
from django . utils import six
example# 4367
from django . core . exceptions import ImproperlyConfigured
example# 4368
naiveip_re = re . compile ( r'_STR:0_'"^(?: (?P<addr>     (?P<ipv4>\d{1,3}(?:\.\d{1,3}){3}) |         # IPv4 address     (?P<ipv6>\[[a-fA-F0-9:]+\]) |               # IPv6 address     (?P<fqdn>[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*) # FQDN ):)?(?P<port>\d+)$'_STR:0_'" , re . X )
example# 4369
DEFAULT_PORT = '_STR:2_'
example# 4370
class Command ( BaseCommand ) :pass
example# 4371
help = '_STR:0_'
example# 4372
requires_system_checks = False
example# 4373
def add_arguments ( self , parser ) :pass
example# 4374
parser . add_argument ( '_STR:0_' , nargs = '_STR:1_' ,  help = '_STR:2_' )
example# 4375
parser . add_argument ( '_STR:0_' , '_STR:1_' , action = '_STR:2_' , dest = 'use_ipv6' , default = False ,  help = 'Tells Django to use an IPv6 address.' )
example# 4376
parser . add_argument ( '_STR:2_' , action = '_STR:3_' , dest = 'use_threading' , default = True ,  help = 'Tells Django to NOT use threading.' )
example# 4377
parser . add_argument ( '_STR:2_' , action = '_STR:3_' , dest = 'use_reloader' , default = True ,  help = 'Tells Django to NOT use the auto-reloader.' )
example# 4378
def get_handler ( self , * args , ** options ) :pass
example# 4379
return get_internal_wsgi_application ( )
example# 4380
def handle ( self , * args , ** options ) :pass
example# 4381
from django . conf import settings
example# 4382
if not settings . DEBUG and not settings . ALLOWED_HOSTS :pass
example# 4383
raise CommandError ( '_STR:0_' )
example# 4384
self . use_ipv6 = options . get ( '_STR:0_' )
example# 4385
if self . use_ipv6 and not socket . has_ipv6 :pass
example# 4386
raise CommandError ( '_STR:0_' )
example# 4387
self . _raw_ipv6 = False
example# 4388
if not options . get ( '_STR:0_' ) :pass
example# 4389
self . addr = ''
example# 4390
self . port = DEFAULT_PORT
example# 4391
if True: pass
else :pass
example# 4392
m = re . match ( naiveip_re , options [ '_STR:0_' ] )
example# 4393
if m is None :pass
example# 4394
raise CommandError ( '"%s" is not a valid port number '  'or address:port pair.' % options [ 'addrport' ] )
example# 4395
self . addr , _ipv4 , _ipv6 , _fqdn , self . port = m . groups ( )
example# 4396
if not self . port . isdigit ( ) :pass
example# 4397
raise CommandError ( '_STR:0_' % self . port )
example# 4398
if self . addr :pass
example# 4399
if _ipv6 :pass
example# 4400
self . addr = self . addr [ 1 : - 1 ]
example# 4401
self . use_ipv6 = True
example# 4402
self . _raw_ipv6 = True
example# 4403
if True: pass
elif self . use_ipv6 and not _fqdn :pass
example# 4404
raise CommandError ( '_STR:0_' % self . addr )
example# 4405
if not self . addr :pass
example# 4406
self . addr = '_STR:0_' if self . use_ipv6 else '_STR:1_'
example# 4407
self . _raw_ipv6 = bool ( self . use_ipv6 )
example# 4408
self . run ( ** options )
example# 4409
def run ( self , ** options ) :pass
example# 4410
use_reloader = options . get ( '_STR:0_' )
example# 4411
if use_reloader :pass
example# 4412
autoreload . main ( self . inner_run , None , options )
example# 4413
if True: pass
else :pass
example# 4414
self . inner_run ( None , ** options )
example# 4415
def inner_run ( self , * args , ** options ) :pass
example# 4416
from django . conf import settings
example# 4417
from django . utils import translation
example# 4418
threading = options . get ( '_STR:0_' )
example# 4419
shutdown_message = options . get ( '_STR:0_' , '' )
example# 4420
quit_command = 'CTRL-BREAK' if sys . platform == 'win32' else 'CONTROL-C'
example# 4421
self . stdout . write ( '_STR:0_' )
example# 4422
self . validate ( display_num_errors = True )
example# 4423
try :pass
except: pass
example# 4424
self . check_migrations ( )
example# 4425
try: pass
except ImproperlyConfigured :pass
example# 4426
pass
example# 4427
now = datetime . now ( ) . strftime ( '_STR:0_' )
example# 4428
if six . PY2 :pass
example# 4429
now = now . decode ( '_STR:0_' )
example# 4430
self . stdout . write ( (  "%(started_at)s\n"  "Django version %(version)s, using settings %(settings)r\n"  "Starting development server at http://%(addr)s:%(port)s/\n"  "Quit the server with %(quit_command)s.\n"  ) % {  "started_at" : now ,  "version" : self . get_version ( ) ,  "settings" : settings . SETTINGS_MODULE ,  "addr" : '[%s]' % self . addr if self . _raw_ipv6 else self . addr ,  "port" : self . port ,  "quit_command" : quit_command ,  } )
example# 4431
translation . activate ( settings . LANGUAGE_CODE )
example# 4432
try :pass
except: pass
example# 4433
handler = self . get_handler ( * args , ** options )
example# 4434
run ( self . addr , int ( self . port ) , handler ,  ipv6 = self . use_ipv6 , threading = threading )
example# 4435
try: pass
except socket . error as e :pass
example# 4436
ERRORS = {  errno . EACCES : '_STR:0_' ,  errno . EADDRINUSE : "That port is already in use." ,  errno . EADDRNOTAVAIL : "That IP address can't be assigned-to." ,  }
example# 4437
try :pass
except: pass
example# 4438
error_text = ERRORS [ e . errno ]
example# 4439
try: pass
except KeyError :pass
example# 4440
error_text = str ( e )
example# 4441
self . stderr . write ( '_STR:0_' % error_text )
example# 4442
os . _exit ( 1 )
example# 4443
try: pass
except KeyboardInterrupt :pass
example# 4444
if shutdown_message :pass
example# 4445
self . stdout . write ( shutdown_message )
example# 4446
sys . exit ( 0 )
example# 4447
def check_migrations ( self ) :pass
example# 4448
executor = MigrationExecutor ( connections [ DEFAULT_DB_ALIAS ] )
example# 4449
plan = executor . migration_plan ( executor . loader . graph . leaf_nodes ( ) )
example# 4450
if plan :pass
example# 4451
self . stdout . write ( self . style . NOTICE ( "\nYou have unapplied migrations; your app may not work properly until they are applied." ) )
example# 4452
self . stdout . write ( self . style . NOTICE ( '_STR:1_' ) )
example# 4453
BaseRunserverCommand = Command
example# 4454
import os
example# 4455
from django . core . management . base import BaseCommand
example# 4456
class Command ( BaseCommand ) :pass
example# 4457
help = '_STR:0_'
example# 4458
requires_system_checks = False
example# 4459
shells = [ '_STR:0_' , '_STR:1_' ]
example# 4460
def add_arguments ( self , parser ) :pass
example# 4461
parser . add_argument ( '_STR:0_' , action = '_STR:1_' , dest = '_STR:2_' ,  help = 'Tells Django to use plain Python, not IPython or bpython.' )
example# 4462
parser . add_argument ( '_STR:1_' , action = '_STR:2_' , dest = 'no_startup' ,  help = 'When using plain Python, ignore the PYTHONSTARTUP environment variable and ~/.pythonrc.py script.' )
example# 4463
parser . add_argument ( '_STR:2_' , '_STR:3_' , choices = self . shells , dest = 'interface' ,  help = 'Specify an interactive interpreter interface. Available options: "ipython" and "bpython"' )
example# 4464
def _ipython_pre_011 ( self ) :pass
example# 4465
from IPython . Shell import IPShell
example# 4466
shell = IPShell ( argv = [ ] )
example# 4467
shell . mainloop ( )
example# 4468
def _ipython_pre_100 ( self ) :pass
example# 4469
from IPython . frontend . terminal . ipapp import TerminalIPythonApp
example# 4470
app = TerminalIPythonApp . instance ( )
example# 4471
app . initialize ( argv = [ ] )
example# 4472
app . start ( )
example# 4473
def _ipython ( self ) :pass
example# 4474
from IPython import start_ipython
example# 4475
start_ipython ( argv = [ ] )
example# 4476
def ipython ( self ) :pass
example# 4477
for ip in ( self . _ipython , self . _ipython_pre_100 , self . _ipython_pre_011 ) :pass
example# 4478
try :pass
except: pass
example# 4479
ip ( )
example# 4480
try: pass
except ImportError :pass
example# 4481
pass
example# 4482
if True: pass
else :pass
example# 4483
return
example# 4484
raise ImportError ( '_STR:0_' )
example# 4485
def bpython ( self ) :pass
example# 4486
import bpython
example# 4487
bpython . embed ( )
example# 4488
def run_shell ( self , shell = None ) :pass
example# 4489
available_shells = [ shell ] if shell else self . shells
example# 4490
for shell in available_shells :pass
example# 4491
try :pass
except: pass
example# 4492
return getattr ( self , shell ) ( )
example# 4493
try: pass
except ImportError :pass
example# 4494
pass
example# 4495
raise ImportError
example# 4496
def handle ( self , ** options ) :pass
example# 4497
try :pass
except: pass
example# 4498
if options [ '_STR:0_' ] :pass
example# 4499
raise ImportError
example# 4500
self . run_shell ( shell = options [ '_STR:0_' ] )
example# 4501
try: pass
except ImportError :pass
example# 4502
import code
example# 4503
imported_objects = { }
example# 4504
try :pass
except: pass
example# 4505
import readline
example# 4506
try: pass
except ImportError :pass
example# 4507
pass
example# 4508
if True: pass
else :pass
example# 4509
import rlcompleter
example# 4510
readline . set_completer ( rlcompleter . Completer ( imported_objects ) . complete )
example# 4511
readline . parse_and_bind ( '_STR:0_' )
example# 4512
if not options [ '_STR:0_' ] :pass
example# 4513
for pythonrc in ( os . environ . get ( '_STR:0_' ) , '~/.pythonrc.py' ) :pass
example# 4514
if not pythonrc :pass
example# 4515
continue
example# 4516
pythonrc = os . path . expanduser ( pythonrc )
example# 4517
if not os . path . isfile ( pythonrc ) :pass
example# 4518
continue
example# 4519
try :pass
except: pass
example# 4520
with open ( pythonrc ) as handle :pass
example# 4521
exec ( compile ( handle . read ( ) , pythonrc , '_STR:0_' ) , imported_objects )
example# 4522
try: pass
except NameError :pass
example# 4523
pass
example# 4524
code . interact ( local = imported_objects )
example# 4525
from __future__ import unicode_literals
example# 4526
from django . core . management . base import AppCommand
example# 4527
from django . core . management . sql import sql_create
example# 4528
from django . db import connections , DEFAULT_DB_ALIAS
example# 4529
class Command ( AppCommand ) :pass
example# 4530
help = '_STR:0_'
example# 4531
output_transaction = True
example# 4532
def add_arguments ( self , parser ) :pass
example# 4533
super ( Command , self ) . add_arguments ( parser )
example# 4534
parser . add_argument ( '_STR:0_' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
example# 4535
def handle_app_config ( self , app_config , ** options ) :pass
example# 4536
if app_config . models_module is None :pass
example# 4537
return
example# 4538
connection = connections [ options [ '_STR:0_' ] ]
example# 4539
statements = sql_create ( app_config , self . style , connection )
example# 4540
return '\n' . join ( statements )
example# 4541
from __future__ import unicode_literals
example# 4542
from django . core . management . base import AppCommand
example# 4543
from django . core . management . sql import sql_all
example# 4544
from django . db import connections , DEFAULT_DB_ALIAS
example# 4545
class Command ( AppCommand ) :pass
example# 4546
help = '_STR:0_'
example# 4547
output_transaction = True
example# 4548
def add_arguments ( self , parser ) :pass
example# 4549
super ( Command , self ) . add_arguments ( parser )
example# 4550
parser . add_argument ( '_STR:0_' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
example# 4551
def handle_app_config ( self , app_config , ** options ) :pass
example# 4552
if app_config . models_module is None :pass
example# 4553
return
example# 4554
connection = connections [ options [ '_STR:0_' ] ]
example# 4555
statements = sql_all ( app_config , self . style , connection )
example# 4556
return '\n' . join ( statements )
example# 4557
from __future__ import unicode_literals
example# 4558
from django . core . management . base import AppCommand
example# 4559
from django . core . management . sql import sql_delete
example# 4560
from django . db import connections , DEFAULT_DB_ALIAS
example# 4561
class Command ( AppCommand ) :pass
example# 4562
help = '_STR:0_'
example# 4563
output_transaction = True
example# 4564
def add_arguments ( self , parser ) :pass
example# 4565
super ( Command , self ) . add_arguments ( parser )
example# 4566
parser . add_argument ( '_STR:0_' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
example# 4567
def handle_app_config ( self , app_config , ** options ) :pass
example# 4568
if app_config . models_module is None :pass
example# 4569
return
example# 4570
connection = connections [ options [ '_STR:0_' ] ]
example# 4571
statements = sql_delete ( app_config , self . style , connection )
example# 4572
return '\n' . join ( statements )
example# 4573
from __future__ import unicode_literals
example# 4574
from django . core . management . base import AppCommand
example# 4575
from django . core . management . sql import sql_custom
example# 4576
from django . db import connections , DEFAULT_DB_ALIAS
example# 4577
class Command ( AppCommand ) :pass
example# 4578
help = '_STR:0_'
example# 4579
output_transaction = True
example# 4580
def add_arguments ( self , parser ) :pass
example# 4581
super ( Command , self ) . add_arguments ( parser )
example# 4582
parser . add_argument ( '_STR:0_' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
example# 4583
def handle_app_config ( self , app_config , ** options ) :pass
example# 4584
if app_config . models_module is None :pass
example# 4585
return
example# 4586
connection = connections [ options [ '_STR:0_' ] ]
example# 4587
statements = sql_custom ( app_config , self . style , connection )
example# 4588
return '\n' . join ( statements )
example# 4589
from __future__ import unicode_literals
example# 4590
from django . core . management . base import AppCommand
example# 4591
from django . core . management . sql import sql_destroy_indexes
example# 4592
from django . db import connections , DEFAULT_DB_ALIAS
example# 4593
class Command ( AppCommand ) :pass
example# 4594
help = '_STR:0_'
example# 4595
output_transaction = True
example# 4596
def add_arguments ( self , parser ) :pass
example# 4597
super ( Command , self ) . add_arguments ( parser )
example# 4598
parser . add_argument ( '_STR:0_' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
example# 4599
def handle_app_config ( self , app_config , ** options ) :pass
example# 4600
if app_config . models_module is None :pass
example# 4601
return
example# 4602
connection = connections [ options [ '_STR:0_' ] ]
example# 4603
statements = sql_destroy_indexes ( app_config , self . style , connection )
example# 4604
return '\n' . join ( statements )
example# 4605
from __future__ import unicode_literals
example# 4606
from django . core . management . base import BaseCommand
example# 4607
from django . core . management . sql import sql_flush
example# 4608
from django . db import connections , DEFAULT_DB_ALIAS
example# 4609
class Command ( BaseCommand ) :pass
example# 4610
help = '_STR:0_'
example# 4611
output_transaction = True
example# 4612
def add_arguments ( self , parser ) :pass
example# 4613
super ( Command , self ) . add_arguments ( parser )
example# 4614
parser . add_argument ( '_STR:0_' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
example# 4615
def handle ( self , ** options ) :pass
example# 4616
return '\n' . join ( sql_flush ( self . style , connections [ options [ '_STR:0_' ] ] , only_django = True ) )
example# 4617
from __future__ import unicode_literals
example# 4618
from django . core . management . base import AppCommand
example# 4619
from django . core . management . sql import sql_indexes
example# 4620
from django . db import connections , DEFAULT_DB_ALIAS
example# 4621
class Command ( AppCommand ) :pass
example# 4622
help = '_STR:0_'
example# 4623
output_transaction = True
example# 4624
def add_arguments ( self , parser ) :pass
example# 4625
super ( Command , self ) . add_arguments ( parser )
example# 4626
parser . add_argument ( '_STR:0_' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
example# 4627
def handle_app_config ( self , app_config , ** options ) :pass
example# 4628
if app_config . models_module is None :pass
example# 4629
return
example# 4630
connection = connections [ options [ '_STR:0_' ] ]
example# 4631
statements = sql_indexes ( app_config , self . style , connection )
example# 4632
return '\n' . join ( statements )
example# 4633
from __future__ import unicode_literals
example# 4634
from django . core . management . base import BaseCommand , CommandError
example# 4635
from django . db import connections , DEFAULT_DB_ALIAS
example# 4636
from django . db . migrations . executor import MigrationExecutor
example# 4637
from django . db . migrations . loader import AmbiguityError
example# 4638
class Command ( BaseCommand ) :pass
example# 4639
help = '_STR:0_'
example# 4640
def add_arguments ( self , parser ) :pass
example# 4641
parser . add_argument ( '_STR:0_' ,  help = '_STR:1_' )
example# 4642
parser . add_argument ( '_STR:0_' ,  help = '_STR:1_' )
example# 4643
parser . add_argument ( '_STR:0_' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to create SQL for. Defaults to the '  '"default" database.' )
example# 4644
parser . add_argument ( '_STR:0_' , action = '_STR:1_' , dest = '_STR:2_' ,  default = False , help = 'Creates SQL to unapply the migration, rather than to apply it' )
example# 4645
def handle ( self , * args , ** options ) :pass
example# 4646
connection = connections [ options [ '_STR:0_' ] ]
example# 4647
executor = MigrationExecutor ( connection )
example# 4648
app_label , migration_name = options [ '_STR:0_' ] , options [ '_STR:1_' ]
example# 4649
if app_label not in executor . loader . migrated_apps :pass
example# 4650
raise CommandError ( '_STR:0_' % app_label )
example# 4651
try :pass
except: pass
example# 4652
migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )
example# 4653
try: pass
except AmbiguityError :pass
example# 4654
raise CommandError ( '_STR:0_' % (  migration_name , app_label ) )
example# 4655
try: pass
except KeyError :pass
example# 4656
raise CommandError ( '_STR:0_' % (  migration_name , app_label ) )
example# 4657
targets = [ ( app_label , migration . name ) ]
example# 4658
plan = [ ( executor . loader . graph . nodes [ targets [ 0 ] ] , options [ '_STR:0_' ] ) ]
example# 4659
sql_statements = executor . collect_sql ( plan )
example# 4660
for statement in sql_statements :pass
example# 4661
self . stdout . write ( statement )
example# 4662
from __future__ import unicode_literals
example# 4663
from django . core . management . base import AppCommand
example# 4664
from django . core . management . sql import check_for_migrations
example# 4665
from django . db import connections , DEFAULT_DB_ALIAS
example# 4666
class Command ( AppCommand ) :pass
example# 4667
help = '_STR:0_'
example# 4668
output_transaction = True
example# 4669
def add_arguments ( self , parser ) :pass
example# 4670
super ( Command , self ) . add_arguments ( parser )
example# 4671
parser . add_argument ( '_STR:0_' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
example# 4672
def handle_app_config ( self , app_config , ** options ) :pass
example# 4673
if app_config . models_module is None :pass
example# 4674
return
example# 4675
connection = connections [ options . get ( '_STR:0_' ) ]
example# 4676
check_for_migrations ( app_config , connection )
example# 4677
models = app_config . get_models ( include_auto_created = True )
example# 4678
statements = connection . ops . sequence_reset_sql ( self . style , models )
example# 4679
return '\n' . join ( statements )
example# 4680
from django . core . management . base import BaseCommand , CommandError
example# 4681
from django . utils import six
example# 4682
from django . db import connections , DEFAULT_DB_ALIAS , migrations
example# 4683
from django . db . migrations . loader import AmbiguityError
example# 4684
from django . db . migrations . executor import MigrationExecutor
example# 4685
from django . db . migrations . writer import MigrationWriter
example# 4686
from django . db . migrations . optimizer import MigrationOptimizer
example# 4687
class Command ( BaseCommand ) :pass
example# 4688
help = '_STR:0_'
example# 4689
def add_arguments ( self , parser ) :pass
example# 4690
parser . add_argument ( '_STR:0_' ,  help = 'App label of the application to squash migrations for.' )
example# 4691
parser . add_argument ( '_STR:1_' ,  help = 'Migrations will be squashed until and including this migration.' )
example# 4692
parser . add_argument ( '_STR:1_' , action = '_STR:2_' , dest = 'no_optimize' , default = False ,  help = 'Do not try to optimize the squashed operations.' )
example# 4693
parser . add_argument ( '_STR:2_' , action = '_STR:3_' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
example# 4694
def handle ( self , ** options ) :pass
example# 4695
self . verbosity = options . get ( '_STR:0_' )
example# 4696
self . interactive = options . get ( '_STR:0_' )
example# 4697
app_label , migration_name = options [ '_STR:0_' ] , options [ '_STR:1_' ]
example# 4698
executor = MigrationExecutor ( connections [ DEFAULT_DB_ALIAS ] )
example# 4699
if app_label not in executor . loader . migrated_apps :pass
example# 4700
raise CommandError ( '_STR:0_' % app_label )
example# 4701
try :pass
except: pass
example# 4702
migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )
example# 4703
try: pass
except AmbiguityError :pass
example# 4704
raise CommandError ( '_STR:0_' % ( migration_name , app_label ) )
example# 4705
try: pass
except KeyError :pass
example# 4706
raise CommandError ( '_STR:0_' % ( migration_name , app_label ) )
example# 4707
migrations_to_squash = [  executor . loader . get_migration ( al , mn )  for al , mn in executor . loader . graph . forwards_plan ( ( migration . app_label , migration . name ) )  if al == migration . app_label  ]
example# 4708
if self . verbosity > 0 or self . interactive :pass
example# 4709
self . stdout . write ( self . style . MIGRATE_HEADING ( '_STR:0_' ) )
example# 4710
for migration in migrations_to_squash :pass
example# 4711
self . stdout . write ( " - %s" % migration . name )
example# 4712
if self . interactive :pass
example# 4713
answer = None
example# 4714
while not answer or answer not in '_STR:0_' :pass
example# 4715
answer = six . moves . input ( '_STR:0_' )
example# 4716
if not answer :pass
example# 4717
answer = "n"
example# 4718
break
example# 4719
if True: pass
else :pass
example# 4720
answer = answer [ 0 ] . lower ( )
example# 4721
if answer != "y" :pass
example# 4722
return
example# 4723
operations = [ ]
example# 4724
for smigration in migrations_to_squash :pass
example# 4725
operations . extend ( smigration . operations )
example# 4726
if self . verbosity > 0 :pass
example# 4727
self . stdout . write ( self . style . MIGRATE_HEADING ( '_STR:0_' ) )
example# 4728
optimizer = MigrationOptimizer ( )
example# 4729
new_operations = optimizer . optimize ( operations , migration . app_label )
example# 4730
if self . verbosity > 0 :pass
example# 4731
if len ( new_operations ) == len ( operations ) :pass
example# 4732
self . stdout . write ( '_STR:0_' )
example# 4733
if True: pass
else :pass
example# 4734
self . stdout . write ( '_STR:0_' % ( len ( operations ) , len ( new_operations ) ) )
example# 4735
replaces = [ ]
example# 4736
for migration in migrations_to_squash :pass
example# 4737
if migration . replaces :pass
example# 4738
replaces . extend ( migration . replaces )
example# 4739
if True: pass
else :pass
example# 4740
replaces . append ( ( migration . app_label , migration . name ) )
example# 4741
subclass = type ( "Migration" , ( migrations . Migration , ) , {  "dependencies" : [ ] ,  "operations" : new_operations ,  "replaces" : replaces ,  } )
example# 4742
new_migration = subclass ( '_STR:0_' % migration . name , app_label )
example# 4743
writer = MigrationWriter ( new_migration )
example# 4744
with open ( writer . path , "wb" ) as fh :pass
example# 4745
fh . write ( writer . as_string ( ) )
example# 4746
if self . verbosity > 0 :pass
example# 4747
self . stdout . write ( self . style . MIGRATE_HEADING ( '_STR:0_' % writer . path ) )
example# 4748
self . stdout . write ( '_STR:0_' )
example# 4749
self . stdout . write ( '_STR:0_' )
example# 4750
self . stdout . write ( '_STR:0_' )
example# 4751
self . stdout . write ( '_STR:0_' )
example# 4752
from importlib import import_module
example# 4753
from django . core . management . base import CommandError
example# 4754
from django . core . management . templates import TemplateCommand
example# 4755
class Command ( TemplateCommand ) :pass
example# 4756
help = ( "Creates a Django app directory structure for the given app "  "name in the current directory or optionally in the given "  "directory." )
example# 4757
missing_args_message = '_STR:0_'
example# 4758
def handle ( self , ** options ) :pass
example# 4759
app_name , target = options . pop ( '_STR:0_' ) , options . pop ( '_STR:1_' )
example# 4760
self . validate_name ( app_name , "app" )
example# 4761
try :pass
except: pass
example# 4762
import_module ( app_name )
example# 4763
try: pass
except ImportError :pass
example# 4764
pass
example# 4765
if True: pass
else :pass
example# 4766
raise CommandError ( "%r conflicts with the name of an existing "  "Python module and cannot be used as an app "  "name. Please try another name." % app_name )
example# 4767
super ( Command , self ) . handle ( '_STR:2_' , app_name , target , ** options )
example# 4768
from importlib import import_module
example# 4769
from django . core . management . base import CommandError
example# 4770
from django . core . management . templates import TemplateCommand
example# 4771
from django . utils . crypto import get_random_string
example# 4772
class Command ( TemplateCommand ) :pass
example# 4773
help = ( '_STR:0_'  "project name in the current directory or optionally in the "  "given directory." )
example# 4774
missing_args_message = '_STR:1_'
example# 4775
def handle ( self , ** options ) :pass
example# 4776
project_name , target = options . pop ( '_STR:0_' ) , options . pop ( 'directory' )
example# 4777
self . validate_name ( project_name , '_STR:0_' )
example# 4778
try :pass
except: pass
example# 4779
import_module ( project_name )
example# 4780
try: pass
except ImportError :pass
example# 4781
pass
example# 4782
if True: pass
else :pass
example# 4783
raise CommandError ( "%r conflicts with the name of an existing "  "Python module and cannot be used as a "  "project name. Please try another name." %  project_name )
example# 4784
chars = '_STR:0_'
example# 4785
options [ '_STR:0_' ] = get_random_string ( 50 , chars )
example# 4786
super ( Command , self ) . handle ( '_STR:0_' , project_name , target , ** options )
example# 4787
import warnings
example# 4788
from django . apps import apps
example# 4789
from django . contrib . auth import get_user_model
example# 4790
from django . db import DEFAULT_DB_ALIAS
example# 4791
from django . core . management import call_command
example# 4792
from django . core . management . base import BaseCommand
example# 4793
from django . utils . deprecation import RemovedInDjango19Warning
example# 4794
from django . utils . six . moves import input
example# 4795
class Command ( BaseCommand ) :pass
example# 4796
help = '_STR:0_'
example# 4797
def add_arguments ( self , parser ) :pass
example# 4798
parser . add_argument ( '_STR:0_' , action = '_STR:1_' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
example# 4799
parser . add_argument ( '_STR:2_' , action = '_STR:3_' , dest = 'load_initial_data' , default = True ,  help = 'Tells Django not to load any initial data after database synchronization.' )
example# 4800
parser . add_argument ( '_STR:2_' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to synchronize. Defaults to the "default" database.' )
example# 4801
def handle ( self , ** options ) :pass
example# 4802
warnings . warn ( '_STR:0_' , RemovedInDjango19Warning )
example# 4803
call_command ( "migrate" , ** options )
example# 4804
try :pass
except: pass
example# 4805
apps . get_model ( '_STR:0_' , '_STR:1_' )
example# 4806
try: pass
except LookupError :pass
example# 4807
return
example# 4808
UserModel = get_user_model ( )
example# 4809
if not UserModel . _default_manager . exists ( ) and options . get ( '_STR:0_' ) :pass
example# 4810
msg = ( "\nYou have installed Django's auth system, and "  "don't have any superusers defined.\nWould you like to create one "  "now? (yes/no): " )
example# 4811
confirm = input ( msg )
example# 4812
while 1 :pass
example# 4813
if confirm not in ( '_STR:0_' , '_STR:1_' ) :pass
example# 4814
confirm = input ( '_STR:0_' )
example# 4815
continue
example# 4816
if confirm == '_STR:0_' :pass
example# 4817
call_command ( '_STR:0_' , interactive = True , database = options [ 'database' ] )
example# 4818
break
example# 4819
import logging
example# 4820
import sys
example# 4821
import os
example# 4822
from django . conf import settings
example# 4823
from django . core . management . base import BaseCommand
example# 4824
from django . test . utils import get_runner
example# 4825
class Command ( BaseCommand ) :pass
example# 4826
help = '_STR:0_'
example# 4827
requires_system_checks = False
example# 4828
def __init__ ( self ) :pass
example# 4829
self . test_runner = None
example# 4830
super ( Command , self ) . __init__ ( )
example# 4831
def run_from_argv ( self , argv ) :pass
example# 4832
option = '_STR:0_'
example# 4833
for arg in argv [ 2 : ] :pass
example# 4834
if arg . startswith ( option ) :pass
example# 4835
self . test_runner = arg [ len ( option ) : ]
example# 4836
break
example# 4837
super ( Command , self ) . run_from_argv ( argv )
example# 4838
def add_arguments ( self , parser ) :pass
example# 4839
parser . add_argument ( '_STR:0_' , metavar = '_STR:1_' , nargs = '_STR:2_' ,  help = 'Module paths to test; can be modulename, modulename.TestCase or modulename.TestCase.test_method' )
example# 4840
parser . add_argument ( '_STR:1_' ,  action = '_STR:2_' , dest = '_STR:3_' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' ) ,
example# 4841
parser . add_argument ( '_STR:1_' ,  action = '_STR:2_' , dest = '_STR:3_' , default = False ,  help = 'Tells Django to stop running the test suite after first '  'failed test.' ) ,
example# 4842
parser . add_argument ( '_STR:1_' ,  action = '_STR:2_' , dest = '_STR:3_' ,  help = 'Tells Django to use specified test runner class instead of '  'the one specified by the TEST_RUNNER setting.' ) ,
example# 4843
parser . add_argument ( '_STR:1_' ,  action = '_STR:2_' , dest = '_STR:3_' , default = None ,  help = 'Overrides the default address where the live server (used '  'with LiveServerTestCase) is expected to run from. The '  'default value is localhost:8081.' ) ,
example# 4844
test_runner_class = get_runner ( settings , self . test_runner )
example# 4845
if hasattr ( test_runner_class , '_STR:0_' ) :pass
example# 4846
raise RuntimeError (  '_STR:0_'  "test management command has changed in Django 1.8. Please "  "create an add_arguments class method to achieve this." )
example# 4847
if hasattr ( test_runner_class , '_STR:1_' ) :pass
example# 4848
test_runner_class . add_arguments ( parser )
example# 4849
def execute ( self , * args , ** options ) :pass
example# 4850
if options [ '_STR:0_' ] > 0 :pass
example# 4851
logger = logging . getLogger ( '_STR:0_' )
example# 4852
handler = logging . StreamHandler ( )
example# 4853
logger . addHandler ( handler )
example# 4854
super ( Command , self ) . execute ( * args , ** options )
example# 4855
if options [ '_STR:0_' ] > 0 :pass
example# 4856
logger . removeHandler ( handler )
example# 4857
def handle ( self , * test_labels , ** options ) :pass
example# 4858
from django . conf import settings
example# 4859
from django . test . utils import get_runner
example# 4860
TestRunner = get_runner ( settings , options . get ( '_STR:0_' ) )
example# 4861
if options . get ( '_STR:0_' ) is not None :pass
example# 4862
os . environ [ '_STR:1_' ] = options [ '_STR:0_' ]
example# 4863
del options [ '_STR:0_' ]
example# 4864
test_runner = TestRunner ( ** options )
example# 4865
failures = test_runner . run_tests ( test_labels )
example# 4866
if failures :pass
example# 4867
sys . exit ( bool ( failures ) )
example# 4868
from django . core . management import call_command
example# 4869
from django . core . management . base import BaseCommand
example# 4870
from django . db import connection
example# 4871
class Command ( BaseCommand ) :pass
example# 4872
help = '_STR:0_'
example# 4873
args = '_STR:0_'
example# 4874
requires_system_checks = False
example# 4875
def add_arguments ( self , parser ) :pass
example# 4876
parser . add_argument ( '_STR:0_' , metavar = '_STR:1_' , nargs = '_STR:2_' ,  help = '_STR:3_' )
example# 4877
parser . add_argument ( '_STR:0_' , action = '_STR:1_' , dest = '_STR:2_' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
example# 4878
parser . add_argument ( '_STR:1_' , default = '' ,  help = '_STR:2_' )
example# 4879
parser . add_argument ( '_STR:0_' , '_STR:1_' , action = '_STR:2_' , dest = '_STR:3_' , default = False ,  help = 'Tells Django to use an IPv6 address.' )
example# 4880
def handle ( self , * fixture_labels , ** options ) :pass
example# 4881
verbosity = options . get ( '_STR:0_' )
example# 4882
interactive = options . get ( '_STR:0_' )
example# 4883
db_name = connection . creation . create_test_db ( verbosity = verbosity , autoclobber = not interactive , serialize = False )
example# 4884
call_command ( '_STR:0_' , * fixture_labels , ** { '_STR:1_' : verbosity } )
example# 4885
shutdown_message = '_STR:1_' % db_name
example# 4886
use_threading = connection . features . test_db_allows_multiple_connections
example# 4887
call_command (  '_STR:0_' ,  addrport = options [ '_STR:1_' ] ,  shutdown_message = shutdown_message ,  use_reloader = False ,  use_ipv6 = options [ 'use_ipv6' ] ,  use_threading = use_threading  )
example# 4888
from __future__ import unicode_literals
example# 4889
import warnings
example# 4890
from django . core . management . commands . check import Command as CheckCommand
example# 4891
from django . utils . deprecation import RemovedInDjango19Warning
example# 4892
class Command ( CheckCommand ) :pass
example# 4893
help = '_STR:0_' + CheckCommand . help
example# 4894
def handle ( self , ** options ) :pass
example# 4895
warnings . warn ( '_STR:0_' ,  RemovedInDjango19Warning )
example# 4896
super ( Command , self ) . handle ( ** options )
example# 4897
from __future__ import unicode_literals
example# 4898
import codecs
example# 4899
import os
example# 4900
import re
example# 4901
import warnings
example# 4902
from django . apps import apps
example# 4903
from django . conf import settings
example# 4904
from django . core . management . base import CommandError
example# 4905
from django . db import models , router
example# 4906
from django . utils . deprecation import RemovedInDjango19Warning
example# 4907
def check_for_migrations ( app_config , connection ) :pass
example# 4908
from django . db . migrations . loader import MigrationLoader
example# 4909
loader = MigrationLoader ( connection )
example# 4910
if app_config . label in loader . migrated_apps :pass
example# 4911
raise CommandError ( '_STR:0_' % app_config . label )
example# 4912
def sql_create ( app_config , style , connection ) :pass
example# 4913
check_for_migrations ( app_config , connection )
example# 4914
if connection . settings_dict [ '_STR:0_' ] == '_STR:1_' :pass
example# 4915
raise CommandError ( '_STR:0_' +  "because you haven't properly specified the ENGINE setting for the database.\n" +  "see: https://docs.djangoproject.com/en/dev/ref/settings/#databases" )
example# 4916
app_models = app_config . get_models ( include_auto_created = True )
example# 4917
final_output = [ ]
example# 4918
tables = connection . introspection . table_names ( )
example# 4919
known_models = set ( model for model in connection . introspection . installed_models ( tables ) if model not in app_models )
example# 4920
pending_references = { }
example# 4921
for model in router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) :pass
example# 4922
output , references = connection . creation . sql_create_model ( model , style , known_models )
example# 4923
final_output . extend ( output )
example# 4924
for refto , refs in references . items ( ) :pass
example# 4925
pending_references . setdefault ( refto , [ ] ) . extend ( refs )
example# 4926
if refto in known_models :pass
example# 4927
final_output . extend ( connection . creation . sql_for_pending_references ( refto , style , pending_references ) )
example# 4928
final_output . extend ( connection . creation . sql_for_pending_references ( model , style , pending_references ) )
example# 4929
known_models . add ( model )
example# 4930
not_installed_models = set ( pending_references . keys ( ) )
example# 4931
if not_installed_models :pass
example# 4932
alter_sql = [ ]
example# 4933
for model in not_installed_models :pass
example# 4934
alter_sql . extend ( [ '-- ' + sql for sql in  connection . creation . sql_for_pending_references ( model , style , pending_references ) ] )
example# 4935
if alter_sql :pass
example# 4936
final_output . append ( '_STR:0_' )
example# 4937
final_output . extend ( alter_sql )
example# 4938
return final_output
example# 4939
def sql_delete ( app_config , style , connection , close_connection = True ) :pass
example# 4940
check_for_migrations ( app_config , connection )
example# 4941
try :pass
except: pass
example# 4942
cursor = connection . cursor ( )
example# 4943
try: pass
except Exception :pass
example# 4944
cursor = None
example# 4945
try :pass
except: pass
example# 4946
if cursor :pass
example# 4947
table_names = connection . introspection . table_names ( cursor )
example# 4948
if True: pass
else :pass
example# 4949
table_names = [ ]
example# 4950
output = [ ]
example# 4951
to_delete = set ( )
example# 4952
references_to_delete = { }
example# 4953
app_models = router . get_migratable_models ( app_config , connection . alias , include_auto_created = True )
example# 4954
for model in app_models :pass
example# 4955
if cursor and connection . introspection . table_name_converter ( model . _meta . db_table ) in table_names :pass
example# 4956
opts = model . _meta
example# 4957
for f in opts . local_fields :pass
example# 4958
if f . rel and f . rel . to not in to_delete :pass
example# 4959
references_to_delete . setdefault ( f . rel . to , [ ] ) . append ( ( model , f ) )
example# 4960
to_delete . add ( model )
example# 4961
for model in app_models :pass
example# 4962
if connection . introspection . table_name_converter ( model . _meta . db_table ) in table_names :pass
example# 4963
output . extend ( connection . creation . sql_destroy_model ( model , references_to_delete , style ) )
example# 4964
try: pass
finally :pass
example# 4965
if cursor and close_connection :pass
example# 4966
cursor . close ( )
example# 4967
connection . close ( )
example# 4968
return output [ : : - 1 ]
example# 4969
def sql_flush ( style , connection , only_django = False , reset_sequences = True , allow_cascade = False ) :pass
example# 4970
if only_django :pass
example# 4971
tables = connection . introspection . django_table_names ( only_existing = True )
example# 4972
if True: pass
else :pass
example# 4973
tables = connection . introspection . table_names ( )
example# 4974
seqs = connection . introspection . sequence_list ( ) if reset_sequences else ( )
example# 4975
statements = connection . ops . sql_flush ( style , tables , seqs , allow_cascade )
example# 4976
return statements
example# 4977
def sql_custom ( app_config , style , connection ) :pass
example# 4978
check_for_migrations ( app_config , connection )
example# 4979
output = [ ]
example# 4980
app_models = router . get_migratable_models ( app_config , connection . alias )
example# 4981
for model in app_models :pass
example# 4982
output . extend ( custom_sql_for_model ( model , style , connection ) )
example# 4983
return output
example# 4984
def sql_indexes ( app_config , style , connection ) :pass
example# 4985
check_for_migrations ( app_config , connection )
example# 4986
output = [ ]
example# 4987
for model in router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) :pass
example# 4988
output . extend ( connection . creation . sql_indexes_for_model ( model , style ) )
example# 4989
return output
example# 4990
def sql_destroy_indexes ( app_config , style , connection ) :pass
example# 4991
check_for_migrations ( app_config , connection )
example# 4992
output = [ ]
example# 4993
for model in router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) :pass
example# 4994
output . extend ( connection . creation . sql_destroy_indexes_for_model ( model , style ) )
example# 4995
return output
example# 4996
def sql_all ( app_config , style , connection ) :pass
example# 4997
check_for_migrations ( app_config , connection )
example# 4998
return sql_create ( app_config , style , connection ) + sql_custom ( app_config , style , connection ) + sql_indexes ( app_config , style , connection )
example# 4999
def _split_statements ( content ) :pass
example# 5000
comment_re = re . compile ( r'_STR:0_' )
example# 5001
statements = [ ]
example# 5002
statement = [ ]
example# 5003
for line in content . split ( "\n" ) :pass
example# 5004
cleaned_line = comment_re . sub ( r"\1" , line ) . strip ( )
example# 5005
if not cleaned_line :pass
example# 5006
continue
example# 5007
statement . append ( cleaned_line )
example# 5008
if cleaned_line . endswith ( ";" ) :pass
example# 5009
statements . append ( " " . join ( statement ) )
example# 5010
statement = [ ]
example# 5011
return statements
example# 5012
def custom_sql_for_model ( model , style , connection ) :pass
example# 5013
opts = model . _meta
example# 5014
app_dirs = [ ]
example# 5015
app_dir = apps . get_app_config ( model . _meta . app_label ) . path
example# 5016
app_dirs . append ( os . path . normpath ( os . path . join ( app_dir , '_STR:0_' ) ) )
example# 5017
old_app_dir = os . path . normpath ( os . path . join ( app_dir , '_STR:0_' ) )
example# 5018
if os . path . exists ( old_app_dir ) :pass
example# 5019
warnings . warn ( "Custom SQL location '<app_label>/models/sql' is "  "deprecated, use '<app_label>/sql' instead." ,  RemovedInDjango19Warning )
example# 5020
app_dirs . append ( old_app_dir )
example# 5021
output = [ ]
example# 5022
if opts . managed :pass
example# 5023
post_sql_fields = [ f for f in opts . local_fields if hasattr ( f , '_STR:0_' ) ]
example# 5024
for f in post_sql_fields :pass
example# 5025
output . extend ( f . post_create_sql ( style , model . _meta . db_table ) )
example# 5026
backend_name = connection . settings_dict [ '_STR:1_' ] . split ( '_STR:0_' ) [ - 1 ]
example# 5027
sql_files = [ ]
example# 5028
for app_dir in app_dirs :pass
example# 5029
sql_files . append ( os . path . join ( app_dir , "%s.%s.sql" % ( opts . model_name , backend_name ) ) )
example# 5030
sql_files . append ( os . path . join ( app_dir , "%s.sql" % opts . model_name ) )
example# 5031
for sql_file in sql_files :pass
example# 5032
if os . path . exists ( sql_file ) :pass
example# 5033
with codecs . open ( sql_file , '_STR:0_' , encoding = settings . FILE_CHARSET ) as fp :pass
example# 5034
output . extend ( connection . ops . prepare_sql_script ( fp . read ( ) , _allow_fallback = True ) )
example# 5035
return output
example# 5036
def emit_pre_migrate_signal ( create_models , verbosity , interactive , db ) :pass
example# 5037
for app_config in apps . get_app_configs ( ) :pass
example# 5038
if app_config . models_module is None :pass
example# 5039
continue
example# 5040
if verbosity >= 2 :pass
example# 5041
print ( '_STR:0_' % app_config . label )
example# 5042
models . signals . pre_migrate . send (  sender = app_config ,  app_config = app_config ,  verbosity = verbosity ,  interactive = interactive ,  using = db )
example# 5043
models . signals . pre_syncdb . send (  sender = app_config . models_module ,  app = app_config . models_module ,  create_models = create_models ,  verbosity = verbosity ,  interactive = interactive ,  db = db )
example# 5044
def emit_post_migrate_signal ( created_models , verbosity , interactive , db ) :pass
example# 5045
for app_config in apps . get_app_configs ( ) :pass
example# 5046
if app_config . models_module is None :pass
example# 5047
continue
example# 5048
if verbosity >= 2 :pass
example# 5049
print ( '_STR:0_' % app_config . label )
example# 5050
models . signals . post_migrate . send (  sender = app_config ,  app_config = app_config ,  verbosity = verbosity ,  interactive = interactive ,  using = db )
example# 5051
models . signals . post_syncdb . send (  sender = app_config . models_module ,  app = app_config . models_module ,  created_models = created_models ,  verbosity = verbosity ,  interactive = interactive ,  db = db )
example# 5052
import cgi
example# 5053
import errno
example# 5054
import mimetypes
example# 5055
import os
example# 5056
import posixpath
example# 5057
import re
example# 5058
import shutil
example# 5059
import stat
example# 5060
import sys
example# 5061
import tempfile
example# 5062
from os import path
example# 5063
import django
example# 5064
from django . template import Template , Context
example# 5065
from django . utils import archive
example# 5066
from django . utils . six . moves . urllib . request import urlretrieve
example# 5067
from django . utils . _os import rmtree_errorhandler
example# 5068
from django . core . management . base import BaseCommand , CommandError
example# 5069
from django . core . management . utils import handle_extensions
example# 5070
_drive_re = re . compile ( '_STR:0_' , re . I )
example# 5071
_url_drive_re = re . compile ( '_STR:0_' , re . I )
example# 5072
class TemplateCommand ( BaseCommand ) :pass
example# 5073
requires_system_checks = False
example# 5074
can_import_settings = False
example# 5075
url_schemes = [ '_STR:0_' , '_STR:1_' , '_STR:2_' ]
example# 5076
leave_locale_alone = True
example# 5077
def add_arguments ( self , parser ) :pass
example# 5078
parser . add_argument ( '_STR:0_' , help = '_STR:1_' )
example# 5079
parser . add_argument ( '_STR:0_' , nargs = '_STR:1_' , help = 'Optional destination directory' )
example# 5080
parser . add_argument ( '_STR:0_' ,  help = '_STR:1_' )
example# 5081
parser . add_argument ( '_STR:0_' , '_STR:1_' , dest = '_STR:2_' ,  action = 'append' , default = [ 'py' ] ,  help = 'The file extension(s) to render (default: "py"). '  'Separate multiple extensions with commas, or use '  '-e multiple times.' )
example# 5082
parser . add_argument ( '_STR:3_' , '_STR:4_' , dest = '_STR:5_' ,  action = '_STR:0_' , default = [ ] ,  help = 'The file name(s) to render. '  'Separate multiple extensions with commas, or use '  '-n multiple times.' )
example# 5083
def handle ( self , app_or_project , name , target = None , ** options ) :pass
example# 5084
self . app_or_project = app_or_project
example# 5085
self . paths_to_remove = [ ]
example# 5086
self . verbosity = options [ '_STR:0_' ]
example# 5087
self . validate_name ( name , app_or_project )
example# 5088
if target is None :pass
example# 5089
top_dir = path . join ( os . getcwd ( ) , name )
example# 5090
try :pass
except: pass
example# 5091
os . makedirs ( top_dir )
example# 5092
try: pass
except OSError as e :pass
example# 5093
if e . errno == errno . EEXIST :pass
example# 5094
message = '_STR:0_' % top_dir
example# 5095
if True: pass
else :pass
example# 5096
message = e
example# 5097
raise CommandError ( message )
example# 5098
if True: pass
else :pass
example# 5099
top_dir = os . path . abspath ( path . expanduser ( target ) )
example# 5100
if not os . path . exists ( top_dir ) :pass
example# 5101
raise CommandError ( "Destination directory '%s' does not "  "exist, please create it first." % top_dir )
example# 5102
extensions = tuple (  handle_extensions ( options [ '_STR:0_' ] , ignored = ( ) ) )
example# 5103
extra_files = [ ]
example# 5104
for file in options [ '_STR:0_' ] :pass
example# 5105
extra_files . extend ( map ( lambda x : x . strip ( ) , file . split ( '_STR:0_' ) ) )
example# 5106
if self . verbosity >= 2 :pass
example# 5107
self . stdout . write ( "Rendering %s template files with "  "extensions: %s\n" %  ( app_or_project , ', ' . join ( extensions ) ) )
example# 5108
self . stdout . write ( "Rendering %s template files with "  "filenames: %s\n" %  ( app_or_project , '_STR:0_' . join ( extra_files ) ) )
example# 5109
base_name = '%s_name' % app_or_project
example# 5110
base_subdir = '%s_template' % app_or_project
example# 5111
base_directory = '%s_directory' % app_or_project
example# 5112
if django . VERSION [ - 2 ] != '_STR:0_' :pass
example# 5113
docs_version = '_STR:0_'
example# 5114
if True: pass
else :pass
example# 5115
docs_version = '%d.%d' % django . VERSION [ : 2 ]
example# 5116
context = Context ( dict ( options , ** {  base_name : name ,  base_directory : top_dir ,  'docs_version' : docs_version ,  } ) , autoescape = False )
example# 5117
from django . conf import settings
example# 5118
if not settings . configured :pass
example# 5119
settings . configure ( )
example# 5120
template_dir = self . handle_template ( options [ '_STR:0_' ] ,  base_subdir )
example# 5121
prefix_length = len ( template_dir ) + 1
example# 5122
for root , dirs , files in os . walk ( template_dir ) :pass
example# 5123
path_rest = root [ prefix_length : ]
example# 5124
relative_dir = path_rest . replace ( base_name , name )
example# 5125
if relative_dir :pass
example# 5126
target_dir = path . join ( top_dir , relative_dir )
example# 5127
if not path . exists ( target_dir ) :pass
example# 5128
os . mkdir ( target_dir )
example# 5129
for dirname in dirs [ : ] :pass
example# 5130
if dirname . startswith ( '_STR:0_' ) or dirname == '_STR:1_' :pass
example# 5131
dirs . remove ( dirname )
example# 5132
for filename in files :pass
example# 5133
if filename . endswith ( ( '_STR:0_' , '_STR:1_' , '_STR:2_' ) ) :pass
example# 5134
continue
example# 5135
old_path = path . join ( root , filename )
example# 5136
new_path = path . join ( top_dir , relative_dir ,  filename . replace ( base_name , name ) )
example# 5137
if path . exists ( new_path ) :pass
example# 5138
raise CommandError ( "%s already exists, overlaying a "  "project or app into an existing "  "directory won't replace conflicting "  "files" % new_path )
example# 5139
with open ( old_path , 'rb' ) as template_file :pass
example# 5140
content = template_file . read ( )
example# 5141
if filename . endswith ( extensions ) or filename in extra_files :pass
example# 5142
content = content . decode ( '_STR:0_' )
example# 5143
template = Template ( content )
example# 5144
content = template . render ( context )
example# 5145
content = content . encode ( '_STR:0_' )
example# 5146
with open ( new_path , '_STR:0_' ) as new_file :pass
example# 5147
new_file . write ( content )
example# 5148
if self . verbosity >= 2 :pass
example# 5149
self . stdout . write ( '_STR:0_' % new_path )
example# 5150
try :pass
except: pass
example# 5151
shutil . copymode ( old_path , new_path )
example# 5152
self . make_writeable ( new_path )
example# 5153
try: pass
except OSError :pass
example# 5154
self . stderr . write (  "Notice: Couldn't set permission bits on %s. You're "  "probably using an uncommon filesystem setup. No "  "problem." % new_path , self . style . NOTICE )
example# 5155
if self . paths_to_remove :pass
example# 5156
if self . verbosity >= 2 :pass
example# 5157
self . stdout . write ( '_STR:0_' )
example# 5158
for path_to_remove in self . paths_to_remove :pass
example# 5159
if path . isfile ( path_to_remove ) :pass
example# 5160
os . remove ( path_to_remove )
example# 5161
if True: pass
else :pass
example# 5162
shutil . rmtree ( path_to_remove ,  onerror = rmtree_errorhandler )
example# 5163
def handle_template ( self , template , subdir ) :pass
example# 5164
if template is None :pass
example# 5165
return path . join ( django . __path__ [ 0 ] , '_STR:0_' , subdir )
example# 5166
if True: pass
else :pass
example# 5167
if template . startswith ( '_STR:0_' ) :pass
example# 5168
template = template [ 7 : ]
example# 5169
expanded_template = path . expanduser ( template )
example# 5170
expanded_template = path . normpath ( expanded_template )
example# 5171
if path . isdir ( expanded_template ) :pass
example# 5172
return expanded_template
example# 5173
if self . is_url ( template ) :pass
example# 5174
absolute_path = self . download ( template )
example# 5175
if True: pass
else :pass
example# 5176
absolute_path = path . abspath ( expanded_template )
example# 5177
if path . exists ( absolute_path ) :pass
example# 5178
return self . extract ( absolute_path )
example# 5179
raise CommandError ( '_STR:0_' %  ( self . app_or_project , template ) )
example# 5180
def validate_name ( self , name , app_or_project ) :pass
example# 5181
if name is None :pass
example# 5182
raise CommandError ( '_STR:0_' % (  "an" if app_or_project == "app" else "a" , app_or_project ) )
example# 5183
if not re . search ( r'_STR:2_' , name ) :pass
example# 5184
if not re . search ( r'_STR:0_' , name ) :pass
example# 5185
message = '_STR:0_'
example# 5186
if True: pass
else :pass
example# 5187
message = '_STR:0_'
example# 5188
raise CommandError ( '_STR:0_' %  ( name , app_or_project , message ) )
example# 5189
def download ( self , url ) :pass
example# 5190
def cleanup_url ( url ) :pass
example# 5191
tmp = url . rstrip ( '_STR:0_' )
example# 5192
filename = tmp . split ( '_STR:0_' ) [ - 1 ]
example# 5193
if url . endswith ( '_STR:0_' ) :pass
example# 5194
display_url = tmp + '_STR:0_'
example# 5195
if True: pass
else :pass
example# 5196
display_url = url
example# 5197
return filename , display_url
example# 5198
prefix = '_STR:0_' % self . app_or_project
example# 5199
tempdir = tempfile . mkdtemp ( prefix = prefix , suffix = '_STR:0_' )
example# 5200
self . paths_to_remove . append ( tempdir )
example# 5201
filename , display_url = cleanup_url ( url )
example# 5202
if self . verbosity >= 2 :pass
example# 5203
self . stdout . write ( '_STR:0_' % display_url )
example# 5204
try :pass
except: pass
example# 5205
the_path , info = urlretrieve ( url , path . join ( tempdir , filename ) )
example# 5206
try: pass
except IOError as e :pass
example# 5207
raise CommandError ( '_STR:0_' %  ( url , filename , e ) )
example# 5208
used_name = the_path . split ( '_STR:0_' ) [ - 1 ]
example# 5209
content_disposition = info . get ( '_STR:0_' )
example# 5210
if content_disposition :pass
example# 5211
_ , params = cgi . parse_header ( content_disposition )
example# 5212
guessed_filename = params . get ( '_STR:0_' ) or used_name
example# 5213
if True: pass
else :pass
example# 5214
guessed_filename = used_name
example# 5215
ext = self . splitext ( guessed_filename ) [ 1 ]
example# 5216
content_type = info . get ( '_STR:0_' )
example# 5217
if not ext and content_type :pass
example# 5218
ext = mimetypes . guess_extension ( content_type )
example# 5219
if ext :pass
example# 5220
guessed_filename += ext
example# 5221
if used_name != guessed_filename :pass
example# 5222
guessed_path = path . join ( tempdir , guessed_filename )
example# 5223
shutil . move ( the_path , guessed_path )
example# 5224
return guessed_path
example# 5225
return the_path
example# 5226
def splitext ( self , the_path ) :pass
example# 5227
base , ext = posixpath . splitext ( the_path )
example# 5228
if base . lower ( ) . endswith ( '_STR:0_' ) :pass
example# 5229
ext = base [ - 4 : ] + ext
example# 5230
base = base [ : - 4 ]
example# 5231
return base , ext
example# 5232
def extract ( self , filename ) :pass
example# 5233
prefix = '_STR:0_' % self . app_or_project
example# 5234
tempdir = tempfile . mkdtemp ( prefix = prefix , suffix = '_STR:0_' )
example# 5235
self . paths_to_remove . append ( tempdir )
example# 5236
if self . verbosity >= 2 :pass
example# 5237
self . stdout . write ( '_STR:0_' % filename )
example# 5238
try :pass
except: pass
example# 5239
archive . extract ( filename , tempdir )
example# 5240
return tempdir
example# 5241
try: pass
except ( archive . ArchiveException , IOError ) as e :pass
example# 5242
raise CommandError ( '_STR:0_' %  ( filename , tempdir , e ) )
example# 5243
def is_url ( self , template ) :pass
example# 5244
if '_STR:0_' not in template :pass
example# 5245
return False
example# 5246
scheme = template . split ( '_STR:0_' , 1 ) [ 0 ] . lower ( )
example# 5247
return scheme in self . url_schemes
example# 5248
def make_writeable ( self , filename ) :pass
example# 5249
if sys . platform . startswith ( '_STR:0_' ) :pass
example# 5250
return
example# 5251
if not os . access ( filename , os . W_OK ) :pass
example# 5252
st = os . stat ( filename )
example# 5253
new_permissions = stat . S_IMODE ( st . st_mode ) | stat . S_IWUSR
example# 5254
os . chmod ( filename , new_permissions )
example# 5255
from __future__ import unicode_literals
example# 5256
import os
example# 5257
from subprocess import PIPE , Popen
example# 5258
import sys
example# 5259
from django . utils . encoding import force_text , DEFAULT_LOCALE_ENCODING
example# 5260
from django . utils import six
example# 5261
from . base import CommandError
example# 5262
def popen_wrapper ( args , os_err_exc_type = CommandError ) :pass
example# 5263
try :pass
except: pass
example# 5264
p = Popen ( args , shell = False , stdout = PIPE , stderr = PIPE ,  close_fds = os . name != 'nt' , universal_newlines = True )
example# 5265
try: pass
except OSError as e :pass
example# 5266
strerror = force_text ( e . strerror , DEFAULT_LOCALE_ENCODING ,  strings_only = True )
example# 5267
six . reraise ( os_err_exc_type , os_err_exc_type ( 'Error executing %s: %s' %  ( args [ 0 ] , strerror ) ) , sys . exc_info ( ) [ 2 ] )
example# 5268
output , errors = p . communicate ( )
example# 5269
return (  output ,  force_text ( errors , DEFAULT_LOCALE_ENCODING , strings_only = True ) ,  p . returncode  )
example# 5270
def handle_extensions ( extensions = ( '_STR:0_' , ) , ignored = ( '_STR:1_' , ) ) :pass
example# 5271
ext_list = [ ]
example# 5272
for ext in extensions :pass
example# 5273
ext_list . extend ( ext . replace ( ' ' , '' ) . split ( '_STR:0_' ) )
example# 5274
for i , ext in enumerate ( ext_list ) :pass
example# 5275
if not ext . startswith ( '_STR:0_' ) :pass
example# 5276
ext_list [ i ] = '.%s' % ext_list [ i ]
example# 5277
return set ( x for x in ext_list if x . strip ( '_STR:0_' ) not in ignored )
example# 5278
def find_command ( cmd , path = None , pathext = None ) :pass
example# 5279
if path is None :pass
example# 5280
path = os . environ . get ( '_STR:0_' , '' ) . split ( os . pathsep )
example# 5281
if isinstance ( path , six . string_types ) :pass
example# 5282
path = [ path ]
example# 5283
if pathext is None :pass
example# 5284
pathext = os . environ . get ( '_STR:0_' , '_STR:1_' ) . split ( os . pathsep )
example# 5285
for ext in pathext :pass
example# 5286
if cmd . endswith ( ext ) :pass
example# 5287
pathext = [ '' ]
example# 5288
break
example# 5289
for p in path :pass
example# 5290
f = os . path . join ( p , cmd )
example# 5291
if os . path . isfile ( f ) :pass
example# 5292
return f
example# 5293
for ext in pathext :pass
example# 5294
fext = f + ext
example# 5295
if os . path . isfile ( fext ) :pass
example# 5296
return fext
example# 5297
return None
example# 5298
import collections
example# 5299
from math import ceil
example# 5300
from django . utils import six
example# 5301
class InvalidPage ( Exception ) :pass
example# 5302
pass
example# 5303
class PageNotAnInteger ( InvalidPage ) :pass
example# 5304
pass
example# 5305
class EmptyPage ( InvalidPage ) :pass
example# 5306
pass
example# 5307
class Paginator ( object ) :pass
example# 5308
def __init__ ( self , object_list , per_page , orphans = 0 ,  allow_empty_first_page = True ) :pass
example# 5309
self . object_list = object_list
example# 5310
self . per_page = int ( per_page )
example# 5311
self . orphans = int ( orphans )
example# 5312
self . allow_empty_first_page = allow_empty_first_page
example# 5313
self . _num_pages = self . _count = None
example# 5314
def validate_number ( self , number ) :pass
example# 5315
try :pass
except: pass
example# 5316
number = int ( number )
example# 5317
try: pass
except ( TypeError , ValueError ) :pass
example# 5318
raise PageNotAnInteger ( '_STR:0_' )
example# 5319
if number < 1 :pass
example# 5320
raise EmptyPage ( '_STR:0_' )
example# 5321
if number > self . num_pages :pass
example# 5322
if number == 1 and self . allow_empty_first_page :pass
example# 5323
pass
example# 5324
if True: pass
else :pass
example# 5325
raise EmptyPage ( '_STR:0_' )
example# 5326
return number
example# 5327
def page ( self , number ) :pass
example# 5328
number = self . validate_number ( number )
example# 5329
bottom = ( number - 1 ) * self . per_page
example# 5330
top = bottom + self . per_page
example# 5331
if top + self . orphans >= self . count :pass
example# 5332
top = self . count
example# 5333
return self . _get_page ( self . object_list [ bottom : top ] , number , self )
example# 5334
def _get_page ( self , * args , ** kwargs ) :pass
example# 5335
return Page ( * args , ** kwargs )
example# 5336
def _get_count ( self ) :pass
example# 5337
if self . _count is None :pass
example# 5338
try :pass
except: pass
example# 5339
self . _count = self . object_list . count ( )
example# 5340
try: pass
except ( AttributeError , TypeError ) :pass
example# 5341
self . _count = len ( self . object_list )
example# 5342
return self . _count
example# 5343
count = property ( _get_count )
example# 5344
def _get_num_pages ( self ) :pass
example# 5345
if self . _num_pages is None :pass
example# 5346
if self . count == 0 and not self . allow_empty_first_page :pass
example# 5347
self . _num_pages = 0
example# 5348
if True: pass
else :pass
example# 5349
hits = max ( 1 , self . count - self . orphans )
example# 5350
self . _num_pages = int ( ceil ( hits / float ( self . per_page ) ) )
example# 5351
return self . _num_pages
example# 5352
num_pages = property ( _get_num_pages )
example# 5353
def _get_page_range ( self ) :pass
example# 5354
return range ( 1 , self . num_pages + 1 )
example# 5355
page_range = property ( _get_page_range )
example# 5356
QuerySetPaginator = Paginator
example# 5357
class Page ( collections . Sequence ) :pass
example# 5358
def __init__ ( self , object_list , number , paginator ) :pass
example# 5359
self . object_list = object_list
example# 5360
self . number = number
example# 5361
self . paginator = paginator
example# 5362
def __repr__ ( self ) :pass
example# 5363
return '_STR:0_' % ( self . number , self . paginator . num_pages )
example# 5364
def __len__ ( self ) :pass
example# 5365
return len ( self . object_list )
example# 5366
def __getitem__ ( self , index ) :pass
example# 5367
if not isinstance ( index , ( slice , ) + six . integer_types ) :pass
example# 5368
raise TypeError
example# 5369
if not isinstance ( self . object_list , list ) :pass
example# 5370
self . object_list = list ( self . object_list )
example# 5371
return self . object_list [ index ]
example# 5372
def has_next ( self ) :pass
example# 5373
return self . number < self . paginator . num_pages
example# 5374
def has_previous ( self ) :pass
example# 5375
return self . number > 1
example# 5376
def has_other_pages ( self ) :pass
example# 5377
return self . has_previous ( ) or self . has_next ( )
example# 5378
def next_page_number ( self ) :pass
example# 5379
return self . paginator . validate_number ( self . number + 1 )
example# 5380
def previous_page_number ( self ) :pass
example# 5381
return self . paginator . validate_number ( self . number - 1 )
example# 5382
def start_index ( self ) :pass
example# 5383
if self . paginator . count == 0 :pass
example# 5384
return 0
example# 5385
return ( self . paginator . per_page * ( self . number - 1 ) ) + 1
example# 5386
def end_index ( self ) :pass
example# 5387
if self . number == self . paginator . num_pages :pass
example# 5388
return self . paginator . count
example# 5389
return self . number * self . paginator . per_page
example# 5390
import importlib
example# 5391
from django . conf import settings
example# 5392
from django . utils import six
example# 5393
from django . core . serializers . base import SerializerDoesNotExist
example# 5394
BUILTIN_SERIALIZERS = {  '_STR:1_' : '_STR:0_' ,  "python" : "django.core.serializers.python" ,  "json" : "django.core.serializers.json" ,  "yaml" : "django.core.serializers.pyyaml" ,  }
example# 5395
_serializers = { }
example# 5396
class BadSerializer ( object ) :pass
example# 5397
internal_use_only = False
example# 5398
def __init__ ( self , exception ) :pass
example# 5399
self . exception = exception
example# 5400
def __call__ ( self , * args , ** kwargs ) :pass
example# 5401
raise self . exception
example# 5402
def register_serializer ( format , serializer_module , serializers = None ) :pass
example# 5403
if serializers is None and not _serializers :pass
example# 5404
_load_serializers ( )
example# 5405
try :pass
except: pass
example# 5406
module = importlib . import_module ( serializer_module )
example# 5407
try: pass
except ImportError as exc :pass
example# 5408
bad_serializer = BadSerializer ( exc )
example# 5409
module = type ( 'BadSerializerModule' , ( object , ) , {  'Deserializer' : bad_serializer ,  'Serializer' : bad_serializer ,  } )
example# 5410
if serializers is None :pass
example# 5411
_serializers [ format ] = module
example# 5412
if True: pass
else :pass
example# 5413
serializers [ format ] = module
example# 5414
def unregister_serializer ( format ) :pass
example# 5415
if not _serializers :pass
example# 5416
_load_serializers ( )
example# 5417
if format not in _serializers :pass
example# 5418
raise SerializerDoesNotExist ( format )
example# 5419
del _serializers [ format ]
example# 5420
def get_serializer ( format ) :pass
example# 5421
if not _serializers :pass
example# 5422
_load_serializers ( )
example# 5423
if format not in _serializers :pass
example# 5424
raise SerializerDoesNotExist ( format )
example# 5425
return _serializers [ format ] . Serializer
example# 5426
def get_serializer_formats ( ) :pass
example# 5427
if not _serializers :pass
example# 5428
_load_serializers ( )
example# 5429
return list ( _serializers )
example# 5430
def get_public_serializer_formats ( ) :pass
example# 5431
if not _serializers :pass
example# 5432
_load_serializers ( )
example# 5433
return [ k for k , v in six . iteritems ( _serializers ) if not v . Serializer . internal_use_only ]
example# 5434
def get_deserializer ( format ) :pass
example# 5435
if not _serializers :pass
example# 5436
_load_serializers ( )
example# 5437
if format not in _serializers :pass
example# 5438
raise SerializerDoesNotExist ( format )
example# 5439
return _serializers [ format ] . Deserializer
example# 5440
def serialize ( format , queryset , ** options ) :pass
example# 5441
s = get_serializer ( format ) ( )
example# 5442
s . serialize ( queryset , ** options )
example# 5443
return s . getvalue ( )
example# 5444
def deserialize ( format , stream_or_string , ** options ) :pass
example# 5445
d = get_deserializer ( format )
example# 5446
return d ( stream_or_string , ** options )
example# 5447
def _load_serializers ( ) :pass
example# 5448
global _serializers
example# 5449
serializers = { }
example# 5450
for format in BUILTIN_SERIALIZERS :pass
example# 5451
register_serializer ( format , BUILTIN_SERIALIZERS [ format ] , serializers )
example# 5452
if hasattr ( settings , '_STR:0_' ) :pass
example# 5453
for format in settings . SERIALIZATION_MODULES :pass
example# 5454
register_serializer ( format , settings . SERIALIZATION_MODULES [ format ] , serializers )
example# 5455
_serializers = serializers
example# 5456
import warnings
example# 5457
from django . db import models
example# 5458
from django . utils import six
example# 5459
from django . utils . deprecation import RemovedInDjango19Warning
example# 5460
class SerializerDoesNotExist ( KeyError ) :pass
example# 5461
pass
example# 5462
class SerializationError ( Exception ) :pass
example# 5463
pass
example# 5464
class DeserializationError ( Exception ) :pass
example# 5465
pass
example# 5466
class Serializer ( object ) :pass
example# 5467
internal_use_only = False
example# 5468
def serialize ( self , queryset , ** options ) :pass
example# 5469
self . options = options
example# 5470
self . stream = options . pop ( "stream" , six . StringIO ( ) )
example# 5471
self . selected_fields = options . pop ( "fields" , None )
example# 5472
self . use_natural_keys = options . pop ( "use_natural_keys" , False )
example# 5473
if self . use_natural_keys :pass
example# 5474
warnings . warn ( '_STR:0_' ,  RemovedInDjango19Warning )
example# 5475
self . use_natural_foreign_keys = options . pop ( 'use_natural_foreign_keys' , False ) or self . use_natural_keys
example# 5476
self . use_natural_primary_keys = options . pop ( '_STR:0_' , False )
example# 5477
self . start_serialization ( )
example# 5478
self . first = True
example# 5479
for obj in queryset :pass
example# 5480
self . start_object ( obj )
example# 5481
concrete_model = obj . _meta . concrete_model
example# 5482
for field in concrete_model . _meta . local_fields :pass
example# 5483
if field . serialize :pass
example# 5484
if field . rel is None :pass
example# 5485
if self . selected_fields is None or field . attname in self . selected_fields :pass
example# 5486
self . handle_field ( obj , field )
example# 5487
if True: pass
else :pass
example# 5488
if self . selected_fields is None or field . attname [ : - 3 ] in self . selected_fields :pass
example# 5489
self . handle_fk_field ( obj , field )
example# 5490
for field in concrete_model . _meta . many_to_many :pass
example# 5491
if field . serialize :pass
example# 5492
if self . selected_fields is None or field . attname in self . selected_fields :pass
example# 5493
self . handle_m2m_field ( obj , field )
example# 5494
self . end_object ( obj )
example# 5495
if self . first :pass
example# 5496
self . first = False
example# 5497
self . end_serialization ( )
example# 5498
return self . getvalue ( )
example# 5499
def start_serialization ( self ) :pass
example# 5500
raise NotImplementedError ( '_STR:0_' )
example# 5501
def end_serialization ( self ) :pass
example# 5502
pass
example# 5503
def start_object ( self , obj ) :pass
example# 5504
raise NotImplementedError ( '_STR:0_' )
example# 5505
def end_object ( self , obj ) :pass
example# 5506
pass
example# 5507
def handle_field ( self , obj , field ) :pass
example# 5508
raise NotImplementedError ( 'subclasses of Serializer must provide an handle_field() method' )
example# 5509
def handle_fk_field ( self , obj , field ) :pass
example# 5510
raise NotImplementedError ( 'subclasses of Serializer must provide an handle_fk_field() method' )
example# 5511
def handle_m2m_field ( self , obj , field ) :pass
example# 5512
raise NotImplementedError ( '_STR:0_' )
example# 5513
def getvalue ( self ) :pass
example# 5514
if callable ( getattr ( self . stream , '_STR:0_' , None ) ) :pass
example# 5515
return self . stream . getvalue ( )
example# 5516
class Deserializer ( six . Iterator ) :pass
example# 5517
def __init__ ( self , stream_or_string , ** options ) :pass
example# 5518
self . options = options
example# 5519
if isinstance ( stream_or_string , six . string_types ) :pass
example# 5520
self . stream = six . StringIO ( stream_or_string )
example# 5521
if True: pass
else :pass
example# 5522
self . stream = stream_or_string
example# 5523
def __iter__ ( self ) :pass
example# 5524
return self
example# 5525
def __next__ ( self ) :pass
example# 5526
raise NotImplementedError ( '_STR:0_' )
example# 5527
class DeserializedObject ( object ) :pass
example# 5528
def __init__ ( self , obj , m2m_data = None ) :pass
example# 5529
self . object = obj
example# 5530
self . m2m_data = m2m_data
example# 5531
def __repr__ ( self ) :pass
example# 5532
return '_STR:0_' % (  self . object . _meta . app_label , self . object . _meta . object_name , self . object . pk )
example# 5533
def save ( self , save_m2m = True , using = None ) :pass
example# 5534
models . Model . save_base ( self . object , using = using , raw = True )
example# 5535
if self . m2m_data and save_m2m :pass
example# 5536
for accessor_name , object_list in self . m2m_data . items ( ) :pass
example# 5537
setattr ( self . object , accessor_name , object_list )
example# 5538
self . m2m_data = None
example# 5539
def build_instance ( Model , data , db ) :pass
example# 5540
obj = Model ( ** data )
example# 5541
if ( obj . pk is None and hasattr ( Model , '_STR:0_' ) and  hasattr ( Model . _default_manager , '_STR:1_' ) ) :pass
example# 5542
natural_key = obj . natural_key ( )
example# 5543
try :pass
except: pass
example# 5544
obj . pk = Model . _default_manager . db_manager ( db ) . get_by_natural_key ( * natural_key ) . pk
example# 5545
try: pass
except Model . DoesNotExist :pass
example# 5546
pass
example# 5547
return obj
example# 5548
from __future__ import absolute_import
example# 5549
from __future__ import unicode_literals
example# 5550
import datetime
example# 5551
import decimal
example# 5552
import json
example# 5553
import sys
example# 5554
from django . core . serializers . base import DeserializationError
example# 5555
from django . core . serializers . python import Serializer as PythonSerializer
example# 5556
from django . core . serializers . python import Deserializer as PythonDeserializer
example# 5557
from django . utils import six
example# 5558
from django . utils . timezone import is_aware
example# 5559
class Serializer ( PythonSerializer ) :pass
example# 5560
internal_use_only = False
example# 5561
def start_serialization ( self ) :pass
example# 5562
if json . __version__ . split ( '_STR:0_' ) >= [ '_STR:1_' , '_STR:2_' , '_STR:3_' ] :pass
example# 5563
self . options . update ( { '_STR:0_' : False } )
example# 5564
self . _current = None
example# 5565
self . json_kwargs = self . options . copy ( )
example# 5566
self . json_kwargs . pop ( '_STR:0_' , None )
example# 5567
self . json_kwargs . pop ( '_STR:0_' , None )
example# 5568
if self . options . get ( '_STR:0_' ) :pass
example# 5569
self . json_kwargs [ '_STR:2_' ] = ( '_STR:0_' , '_STR:1_' )
example# 5570
self . stream . write ( "[" )
example# 5571
def end_serialization ( self ) :pass
example# 5572
if self . options . get ( "indent" ) :pass
example# 5573
self . stream . write ( "\n" )
example# 5574
self . stream . write ( "]" )
example# 5575
if self . options . get ( "indent" ) :pass
example# 5576
self . stream . write ( "\n" )
example# 5577
def end_object ( self , obj ) :pass
example# 5578
indent = self . options . get ( "indent" )
example# 5579
if not self . first :pass
example# 5580
self . stream . write ( "," )
example# 5581
if not indent :pass
example# 5582
self . stream . write ( " " )
example# 5583
if indent :pass
example# 5584
self . stream . write ( "\n" )
example# 5585
json . dump ( self . get_dump_object ( obj ) , self . stream ,  cls = DjangoJSONEncoder , ** self . json_kwargs )
example# 5586
self . _current = None
example# 5587
def getvalue ( self ) :pass
example# 5588
return super ( PythonSerializer , self ) . getvalue ( )
example# 5589
def Deserializer ( stream_or_string , ** options ) :pass
example# 5590
if not isinstance ( stream_or_string , ( bytes , six . string_types ) ) :pass
example# 5591
stream_or_string = stream_or_string . read ( )
example# 5592
if isinstance ( stream_or_string , bytes ) :pass
example# 5593
stream_or_string = stream_or_string . decode ( '_STR:0_' )
example# 5594
try :pass
except: pass
example# 5595
objects = json . loads ( stream_or_string )
example# 5596
for obj in PythonDeserializer ( objects , ** options ) :pass
example# 5597
yield obj
example# 5598
try: pass
except GeneratorExit :pass
example# 5599
raise
example# 5600
try: pass
except Exception as e :pass
example# 5601
six . reraise ( DeserializationError , DeserializationError ( e ) , sys . exc_info ( ) [ 2 ] )
example# 5602
class DjangoJSONEncoder ( json . JSONEncoder ) :pass
example# 5603
def default ( self , o ) :pass
example# 5604
if isinstance ( o , datetime . datetime ) :pass
example# 5605
r = o . isoformat ( )
example# 5606
if o . microsecond :pass
example# 5607
r = r [ : 23 ] + r [ 26 : ]
example# 5608
if r . endswith ( '_STR:0_' ) :pass
example# 5609
r = r [ : - 6 ] + '_STR:0_'
example# 5610
return r
example# 5611
if True: pass
elif isinstance ( o , datetime . date ) :pass
example# 5612
return o . isoformat ( )
example# 5613
if True: pass
elif isinstance ( o , datetime . time ) :pass
example# 5614
if is_aware ( o ) :pass
example# 5615
raise ValueError ( '_STR:0_' )
example# 5616
r = o . isoformat ( )
example# 5617
if o . microsecond :pass
example# 5618
r = r [ : 12 ]
example# 5619
return r
example# 5620
if True: pass
elif isinstance ( o , decimal . Decimal ) :pass
example# 5621
return str ( o )
example# 5622
if True: pass
else :pass
example# 5623
return super ( DjangoJSONEncoder , self ) . default ( o )
example# 5624
DateTimeAwareJSONEncoder = DjangoJSONEncoder
example# 5625
from __future__ import unicode_literals
example# 5626
from django . apps import apps
example# 5627
from django . conf import settings
example# 5628
from django . core . serializers import base
example# 5629
from django . db import models , DEFAULT_DB_ALIAS
example# 5630
from django . utils . encoding import smart_text , is_protected_type
example# 5631
from django . utils import six
example# 5632
class Serializer ( base . Serializer ) :pass
example# 5633
internal_use_only = True
example# 5634
def start_serialization ( self ) :pass
example# 5635
self . _current = None
example# 5636
self . objects = [ ]
example# 5637
def end_serialization ( self ) :pass
example# 5638
pass
example# 5639
def start_object ( self , obj ) :pass
example# 5640
self . _current = { }
example# 5641
def end_object ( self , obj ) :pass
example# 5642
self . objects . append ( self . get_dump_object ( obj ) )
example# 5643
self . _current = None
example# 5644
def get_dump_object ( self , obj ) :pass
example# 5645
data = {  "model" : smart_text ( obj . _meta ) ,  "fields" : self . _current ,  }
example# 5646
if not self . use_natural_primary_keys or not hasattr ( obj , '_STR:1_' ) :pass
example# 5647
data [ "pk" ] = smart_text ( obj . _get_pk_val ( ) , strings_only = True )
example# 5648
return data
example# 5649
def handle_field ( self , obj , field ) :pass
example# 5650
value = field . _get_val_from_obj ( obj )
example# 5651
if is_protected_type ( value ) :pass
example# 5652
self . _current [ field . name ] = value
example# 5653
if True: pass
else :pass
example# 5654
self . _current [ field . name ] = field . value_to_string ( obj )
example# 5655
def handle_fk_field ( self , obj , field ) :pass
example# 5656
if self . use_natural_foreign_keys and hasattr ( field . rel . to , '_STR:0_' ) :pass
example# 5657
related = getattr ( obj , field . name )
example# 5658
if related :pass
example# 5659
value = related . natural_key ( )
example# 5660
if True: pass
else :pass
example# 5661
value = None
example# 5662
if True: pass
else :pass
example# 5663
value = getattr ( obj , field . get_attname ( ) )
example# 5664
self . _current [ field . name ] = value
example# 5665
def handle_m2m_field ( self , obj , field ) :pass
example# 5666
if field . rel . through . _meta . auto_created :pass
example# 5667
if self . use_natural_foreign_keys and hasattr ( field . rel . to , '_STR:0_' ) :pass
example# 5668
m2m_value = lambda value : value . natural_key ( )
example# 5669
if True: pass
else :pass
example# 5670
m2m_value = lambda value : smart_text ( value . _get_pk_val ( ) , strings_only = True )
example# 5671
self . _current [ field . name ] = [ m2m_value ( related )  for related in getattr ( obj , field . name ) . iterator ( ) ]
example# 5672
def getvalue ( self ) :pass
example# 5673
return self . objects
example# 5674
def Deserializer ( object_list , ** options ) :pass
example# 5675
db = options . pop ( '_STR:0_' , DEFAULT_DB_ALIAS )
example# 5676
ignore = options . pop ( '_STR:0_' , False )
example# 5677
for d in object_list :pass
example# 5678
try :pass
except: pass
example# 5679
Model = _get_model ( d [ "model" ] )
example# 5680
try: pass
except base . DeserializationError :pass
example# 5681
if ignore :pass
example# 5682
continue
example# 5683
if True: pass
else :pass
example# 5684
raise
example# 5685
data = { }
example# 5686
if '_STR:0_' in d :pass
example# 5687
data [ Model . _meta . pk . attname ] = Model . _meta . pk . to_python ( d . get ( "pk" , None ) )
example# 5688
m2m_data = { }
example# 5689
model_fields = Model . _meta . get_all_field_names ( )
example# 5690
for ( field_name , field_value ) in six . iteritems ( d [ "fields" ] ) :pass
example# 5691
if ignore and field_name not in model_fields :pass
example# 5692
continue
example# 5693
if isinstance ( field_value , str ) :pass
example# 5694
field_value = smart_text ( field_value , options . get ( "encoding" , settings . DEFAULT_CHARSET ) , strings_only = True )
example# 5695
field = Model . _meta . get_field ( field_name )
example# 5696
if field . rel and isinstance ( field . rel , models . ManyToManyRel ) :pass
example# 5697
if hasattr ( field . rel . to . _default_manager , '_STR:0_' ) :pass
example# 5698
def m2m_convert ( value ) :pass
example# 5699
if hasattr ( value , '_STR:0_' ) and not isinstance ( value , six . text_type ) :pass
example# 5700
return field . rel . to . _default_manager . db_manager ( db ) . get_by_natural_key ( * value ) . pk
example# 5701
if True: pass
else :pass
example# 5702
return smart_text ( field . rel . to . _meta . pk . to_python ( value ) )
example# 5703
if True: pass
else :pass
example# 5704
m2m_convert = lambda v : smart_text ( field . rel . to . _meta . pk . to_python ( v ) )
example# 5705
m2m_data [ field . name ] = [ m2m_convert ( pk ) for pk in field_value ]
example# 5706
if True: pass
elif field . rel and isinstance ( field . rel , models . ManyToOneRel ) :pass
example# 5707
if field_value is not None :pass
example# 5708
if hasattr ( field . rel . to . _default_manager , '_STR:0_' ) :pass
example# 5709
if hasattr ( field_value , '_STR:0_' ) and not isinstance ( field_value , six . text_type ) :pass
example# 5710
obj = field . rel . to . _default_manager . db_manager ( db ) . get_by_natural_key ( * field_value )
example# 5711
value = getattr ( obj , field . rel . field_name )
example# 5712
if field . rel . to . _meta . pk . rel :pass
example# 5713
value = value . pk
example# 5714
if True: pass
else :pass
example# 5715
value = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
example# 5716
data [ field . attname ] = value
example# 5717
if True: pass
else :pass
example# 5718
data [ field . attname ] = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
example# 5719
if True: pass
else :pass
example# 5720
data [ field . attname ] = None
example# 5721
if True: pass
else :pass
example# 5722
data [ field . name ] = field . to_python ( field_value )
example# 5723
obj = base . build_instance ( Model , data , db )
example# 5724
yield base . DeserializedObject ( obj , m2m_data )
example# 5725
def _get_model ( model_identifier ) :pass
example# 5726
try :pass
except: pass
example# 5727
return apps . get_model ( model_identifier )
example# 5728
try: pass
except ( LookupError , TypeError ) :pass
example# 5729
raise base . DeserializationError ( '_STR:0_' % model_identifier )
example# 5730
import decimal
example# 5731
import yaml
example# 5732
import sys
example# 5733
from io import StringIO
example# 5734
from django . db import models
example# 5735
from django . core . serializers . base import DeserializationError
example# 5736
from django . core . serializers . python import Serializer as PythonSerializer
example# 5737
from django . core . serializers . python import Deserializer as PythonDeserializer
example# 5738
from django . utils import six
example# 5739
try :pass
except: pass
example# 5740
from yaml import CSafeLoader as SafeLoader
example# 5741
from yaml import CSafeDumper as SafeDumper
example# 5742
try: pass
except ImportError :pass
example# 5743
from yaml import SafeLoader , SafeDumper
example# 5744
class DjangoSafeDumper ( SafeDumper ) :pass
example# 5745
def represent_decimal ( self , data ) :pass
example# 5746
return self . represent_scalar ( '_STR:0_' , str ( data ) )
example# 5747
DjangoSafeDumper . add_representer ( decimal . Decimal , DjangoSafeDumper . represent_decimal )
example# 5748
class Serializer ( PythonSerializer ) :pass
example# 5749
internal_use_only = False
example# 5750
def handle_field ( self , obj , field ) :pass
example# 5751
if isinstance ( field , models . TimeField ) and getattr ( obj , field . name ) is not None :pass
example# 5752
self . _current [ field . name ] = str ( getattr ( obj , field . name ) )
example# 5753
if True: pass
else :pass
example# 5754
super ( Serializer , self ) . handle_field ( obj , field )
example# 5755
def end_serialization ( self ) :pass
example# 5756
yaml . dump ( self . objects , self . stream , Dumper = DjangoSafeDumper , ** self . options )
example# 5757
def getvalue ( self ) :pass
example# 5758
return super ( PythonSerializer , self ) . getvalue ( )
example# 5759
def Deserializer ( stream_or_string , ** options ) :pass
example# 5760
if isinstance ( stream_or_string , bytes ) :pass
example# 5761
stream_or_string = stream_or_string . decode ( '_STR:0_' )
example# 5762
if isinstance ( stream_or_string , six . string_types ) :pass
example# 5763
stream = StringIO ( stream_or_string )
example# 5764
if True: pass
else :pass
example# 5765
stream = stream_or_string
example# 5766
try :pass
except: pass
example# 5767
for obj in PythonDeserializer ( yaml . load ( stream , Loader = SafeLoader ) , ** options ) :pass
example# 5768
yield obj
example# 5769
try: pass
except GeneratorExit :pass
example# 5770
raise
example# 5771
try: pass
except Exception as e :pass
example# 5772
six . reraise ( DeserializationError , DeserializationError ( e ) , sys . exc_info ( ) [ 2 ] )
example# 5773
from __future__ import unicode_literals
example# 5774
from django . apps import apps
example# 5775
from django . conf import settings
example# 5776
from django . core . serializers import base
example# 5777
from django . db import models , DEFAULT_DB_ALIAS
example# 5778
from django . utils . xmlutils import SimplerXMLGenerator
example# 5779
from django . utils . encoding import smart_text
example# 5780
from xml . dom import pulldom
example# 5781
from xml . sax import handler
example# 5782
from xml . sax . expatreader import ExpatParser as _ExpatParser
example# 5783
class Serializer ( base . Serializer ) :pass
example# 5784
def indent ( self , level ) :pass
example# 5785
if self . options . get ( 'indent' , None ) is not None :pass
example# 5786
self . xml . ignorableWhitespace ( '\n' + ' ' * self . options . get ( '_STR:0_' , None ) * level )
example# 5787
def start_serialization ( self ) :pass
example# 5788
self . xml = SimplerXMLGenerator ( self . stream , self . options . get ( "encoding" , settings . DEFAULT_CHARSET ) )
example# 5789
self . xml . startDocument ( )
example# 5790
self . xml . startElement ( '_STR:0_' , { '_STR:2_' : '_STR:1_' } )
example# 5791
def end_serialization ( self ) :pass
example# 5792
self . indent ( 0 )
example# 5793
self . xml . endElement ( '_STR:0_' )
example# 5794
self . xml . endDocument ( )
example# 5795
def start_object ( self , obj ) :pass
example# 5796
if not hasattr ( obj , "_meta" ) :pass
example# 5797
raise base . SerializationError ( '_STR:0_' % type ( obj ) )
example# 5798
self . indent ( 1 )
example# 5799
attrs = { "model" : smart_text ( obj . _meta ) }
example# 5800
if not self . use_natural_primary_keys or not hasattr ( obj , '_STR:0_' ) :pass
example# 5801
obj_pk = obj . _get_pk_val ( )
example# 5802
if obj_pk is not None :pass
example# 5803
attrs [ '_STR:0_' ] = smart_text ( obj_pk )
example# 5804
self . xml . startElement ( "object" , attrs )
example# 5805
def end_object ( self , obj ) :pass
example# 5806
self . indent ( 1 )
example# 5807
self . xml . endElement ( "object" )
example# 5808
def handle_field ( self , obj , field ) :pass
example# 5809
self . indent ( 2 )
example# 5810
self . xml . startElement ( "field" , {  "name" : field . name ,  "type" : field . get_internal_type ( )  } )
example# 5811
if getattr ( obj , field . name ) is not None :pass
example# 5812
self . xml . characters ( field . value_to_string ( obj ) )
example# 5813
if True: pass
else :pass
example# 5814
self . xml . addQuickElement ( "None" )
example# 5815
self . xml . endElement ( "field" )
example# 5816
def handle_fk_field ( self , obj , field ) :pass
example# 5817
self . _start_relational_field ( field )
example# 5818
related_att = getattr ( obj , field . get_attname ( ) )
example# 5819
if related_att is not None :pass
example# 5820
if self . use_natural_foreign_keys and hasattr ( field . rel . to , '_STR:0_' ) :pass
example# 5821
related = getattr ( obj , field . name )
example# 5822
related = related . natural_key ( )
example# 5823
for key_value in related :pass
example# 5824
self . xml . startElement ( "natural" , { } )
example# 5825
self . xml . characters ( smart_text ( key_value ) )
example# 5826
self . xml . endElement ( "natural" )
example# 5827
if True: pass
else :pass
example# 5828
self . xml . characters ( smart_text ( related_att ) )
example# 5829
if True: pass
else :pass
example# 5830
self . xml . addQuickElement ( "None" )
example# 5831
self . xml . endElement ( "field" )
example# 5832
def handle_m2m_field ( self , obj , field ) :pass
example# 5833
if field . rel . through . _meta . auto_created :pass
example# 5834
self . _start_relational_field ( field )
example# 5835
if self . use_natural_foreign_keys and hasattr ( field . rel . to , '_STR:0_' ) :pass
example# 5836
def handle_m2m ( value ) :pass
example# 5837
natural = value . natural_key ( )
example# 5838
self . xml . startElement ( "object" , { } )
example# 5839
for key_value in natural :pass
example# 5840
self . xml . startElement ( "natural" , { } )
example# 5841
self . xml . characters ( smart_text ( key_value ) )
example# 5842
self . xml . endElement ( "natural" )
example# 5843
self . xml . endElement ( "object" )
example# 5844
if True: pass
else :pass
example# 5845
def handle_m2m ( value ) :pass
example# 5846
self . xml . addQuickElement ( "object" , attrs = {  'pk' : smart_text ( value . _get_pk_val ( ) )  } )
example# 5847
for relobj in getattr ( obj , field . name ) . iterator ( ) :pass
example# 5848
handle_m2m ( relobj )
example# 5849
self . xml . endElement ( "field" )
example# 5850
def _start_relational_field ( self , field ) :pass
example# 5851
self . indent ( 2 )
example# 5852
self . xml . startElement ( "field" , {  "name" : field . name ,  "rel" : field . rel . __class__ . __name__ ,  "to" : smart_text ( field . rel . to . _meta ) ,  } )
example# 5853
class Deserializer ( base . Deserializer ) :pass
example# 5854
def __init__ ( self , stream_or_string , ** options ) :pass
example# 5855
super ( Deserializer , self ) . __init__ ( stream_or_string , ** options )
example# 5856
self . event_stream = pulldom . parse ( self . stream , self . _make_parser ( ) )
example# 5857
self . db = options . pop ( '_STR:0_' , DEFAULT_DB_ALIAS )
example# 5858
self . ignore = options . pop ( '_STR:0_' , False )
example# 5859
def _make_parser ( self ) :pass
example# 5860
return DefusedExpatParser ( )
example# 5861
def __next__ ( self ) :pass
example# 5862
for event , node in self . event_stream :pass
example# 5863
if event == '_STR:0_' and node . nodeName == "object" :pass
example# 5864
self . event_stream . expandNode ( node )
example# 5865
return self . _handle_object ( node )
example# 5866
raise StopIteration
example# 5867
def _handle_object ( self , node ) :pass
example# 5868
Model = self . _get_model_from_node ( node , "model" )
example# 5869
data = { }
example# 5870
if node . hasAttribute ( '_STR:0_' ) :pass
example# 5871
data [ Model . _meta . pk . attname ] = Model . _meta . pk . to_python (  node . getAttribute ( '_STR:0_' ) )
example# 5872
m2m_data = { }
example# 5873
model_fields = Model . _meta . get_all_field_names ( )
example# 5874
for field_node in node . getElementsByTagName ( "field" ) :pass
example# 5875
field_name = field_node . getAttribute ( "name" )
example# 5876
if not field_name :pass
example# 5877
raise base . DeserializationError ( '_STR:0_' )
example# 5878
if self . ignore and field_name not in model_fields :pass
example# 5879
continue
example# 5880
field = Model . _meta . get_field ( field_name )
example# 5881
if field . rel and isinstance ( field . rel , models . ManyToManyRel ) :pass
example# 5882
m2m_data [ field . name ] = self . _handle_m2m_field_node ( field_node , field )
example# 5883
if True: pass
elif field . rel and isinstance ( field . rel , models . ManyToOneRel ) :pass
example# 5884
data [ field . attname ] = self . _handle_fk_field_node ( field_node , field )
example# 5885
if True: pass
else :pass
example# 5886
if field_node . getElementsByTagName ( '_STR:0_' ) :pass
example# 5887
value = None
example# 5888
if True: pass
else :pass
example# 5889
value = field . to_python ( getInnerText ( field_node ) . strip ( ) )
example# 5890
data [ field . name ] = value
example# 5891
obj = base . build_instance ( Model , data , self . db )
example# 5892
return base . DeserializedObject ( obj , m2m_data )
example# 5893
def _handle_fk_field_node ( self , node , field ) :pass
example# 5894
if node . getElementsByTagName ( '_STR:0_' ) :pass
example# 5895
return None
example# 5896
if True: pass
else :pass
example# 5897
if hasattr ( field . rel . to . _default_manager , '_STR:0_' ) :pass
example# 5898
keys = node . getElementsByTagName ( '_STR:0_' )
example# 5899
if keys :pass
example# 5900
field_value = [ getInnerText ( k ) . strip ( ) for k in keys ]
example# 5901
obj = field . rel . to . _default_manager . db_manager ( self . db ) . get_by_natural_key ( * field_value )
example# 5902
obj_pk = getattr ( obj , field . rel . field_name )
example# 5903
if field . rel . to . _meta . pk . rel :pass
example# 5904
obj_pk = obj_pk . pk
example# 5905
if True: pass
else :pass
example# 5906
field_value = getInnerText ( node ) . strip ( )
example# 5907
obj_pk = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
example# 5908
return obj_pk
example# 5909
if True: pass
else :pass
example# 5910
field_value = getInnerText ( node ) . strip ( )
example# 5911
return field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
example# 5912
def _handle_m2m_field_node ( self , node , field ) :pass
example# 5913
if hasattr ( field . rel . to . _default_manager , '_STR:0_' ) :pass
example# 5914
def m2m_convert ( n ) :pass
example# 5915
keys = n . getElementsByTagName ( '_STR:0_' )
example# 5916
if keys :pass
example# 5917
field_value = [ getInnerText ( k ) . strip ( ) for k in keys ]
example# 5918
obj_pk = field . rel . to . _default_manager . db_manager ( self . db ) . get_by_natural_key ( * field_value ) . pk
example# 5919
if True: pass
else :pass
example# 5920
obj_pk = field . rel . to . _meta . pk . to_python ( n . getAttribute ( '_STR:0_' ) )
example# 5921
return obj_pk
example# 5922
if True: pass
else :pass
example# 5923
m2m_convert = lambda n : field . rel . to . _meta . pk . to_python ( n . getAttribute ( 'pk' ) )
example# 5924
return [ m2m_convert ( c ) for c in node . getElementsByTagName ( "object" ) ]
example# 5925
def _get_model_from_node ( self , node , attr ) :pass
example# 5926
model_identifier = node . getAttribute ( attr )
example# 5927
if not model_identifier :pass
example# 5928
raise base . DeserializationError (  '_STR:0_'  % ( node . nodeName , attr ) )
example# 5929
try :pass
except: pass
example# 5930
return apps . get_model ( model_identifier )
example# 5931
try: pass
except ( LookupError , TypeError ) :pass
example# 5932
raise base . DeserializationError (  '_STR:0_'  % ( node . nodeName , model_identifier ) )
example# 5933
def getInnerText ( node ) :pass
example# 5934
inner_text = [ ]
example# 5935
for child in node . childNodes :pass
example# 5936
if child . nodeType == child . TEXT_NODE or child . nodeType == child . CDATA_SECTION_NODE :pass
example# 5937
inner_text . append ( child . data )
example# 5938
if True: pass
elif child . nodeType == child . ELEMENT_NODE :pass
example# 5939
inner_text . extend ( getInnerText ( child ) )
example# 5940
if True: pass
else :pass
example# 5941
pass
example# 5942
return "" . join ( inner_text )
example# 5943
class DefusedExpatParser ( _ExpatParser ) :pass
example# 5944
def __init__ ( self , * args , ** kwargs ) :pass
example# 5945
_ExpatParser . __init__ ( self , * args , ** kwargs )
example# 5946
self . setFeature ( handler . feature_external_ges , False )
example# 5947
self . setFeature ( handler . feature_external_pes , False )
example# 5948
def start_doctype_decl ( self , name , sysid , pubid , has_internal_subset ) :pass
example# 5949
raise DTDForbidden ( name , sysid , pubid )
example# 5950
def entity_decl ( self , name , is_parameter_entity , value , base ,  sysid , pubid , notation_name ) :pass
example# 5951
raise EntitiesForbidden ( name , value , base , sysid , pubid , notation_name )
example# 5952
def unparsed_entity_decl ( self , name , base , sysid , pubid , notation_name ) :pass
example# 5953
raise EntitiesForbidden ( name , None , base , sysid , pubid , notation_name )
example# 5954
def external_entity_ref_handler ( self , context , base , sysid , pubid ) :pass
example# 5955
raise ExternalReferenceForbidden ( context , base , sysid , pubid )
example# 5956
def reset ( self ) :pass
example# 5957
_ExpatParser . reset ( self )
example# 5958
parser = self . _parser
example# 5959
parser . StartDoctypeDeclHandler = self . start_doctype_decl
example# 5960
parser . EntityDeclHandler = self . entity_decl
example# 5961
parser . UnparsedEntityDeclHandler = self . unparsed_entity_decl
example# 5962
parser . ExternalEntityRefHandler = self . external_entity_ref_handler
example# 5963
class DefusedXmlException ( ValueError ) :pass
example# 5964
def __repr__ ( self ) :pass
example# 5965
return str ( self )
example# 5966
class DTDForbidden ( DefusedXmlException ) :pass
example# 5967
def __init__ ( self , name , sysid , pubid ) :pass
example# 5968
super ( DTDForbidden , self ) . __init__ ( )
example# 5969
self . name = name
example# 5970
self . sysid = sysid
example# 5971
self . pubid = pubid
example# 5972
def __str__ ( self ) :pass
example# 5973
tpl = '_STR:0_'
example# 5974
return tpl . format ( self . name , self . sysid , self . pubid )
example# 5975
class EntitiesForbidden ( DefusedXmlException ) :pass
example# 5976
def __init__ ( self , name , value , base , sysid , pubid , notation_name ) :pass
example# 5977
super ( EntitiesForbidden , self ) . __init__ ( )
example# 5978
self . name = name
example# 5979
self . value = value
example# 5980
self . base = base
example# 5981
self . sysid = sysid
example# 5982
self . pubid = pubid
example# 5983
self . notation_name = notation_name
example# 5984
def __str__ ( self ) :pass
example# 5985
tpl = '_STR:0_'
example# 5986
return tpl . format ( self . name , self . sysid , self . pubid )
example# 5987
class ExternalReferenceForbidden ( DefusedXmlException ) :pass
example# 5988
def __init__ ( self , context , base , sysid , pubid ) :pass
example# 5989
super ( ExternalReferenceForbidden , self ) . __init__ ( )
example# 5990
self . context = context
example# 5991
self . base = base
example# 5992
self . sysid = sysid
example# 5993
self . pubid = pubid
example# 5994
def __str__ ( self ) :pass
example# 5995
tpl = '_STR:0_'
example# 5996
return tpl . format ( self . sysid , self . pubid )
example# 5997
from __future__ import unicode_literals
example# 5998
import socket
example# 5999
import sys
example# 6000
from wsgiref import simple_server
example# 6001
from wsgiref . util import FileWrapper
example# 6002
from django . core . exceptions import ImproperlyConfigured
example# 6003
from django . core . management . color import color_style
example# 6004
from django . core . wsgi import get_wsgi_application
example# 6005
from django . utils import six
example# 6006
from django . utils . module_loading import import_string
example# 6007
from django . utils . six . moves import socketserver
example# 6008
__all__ = ( '_STR:0_' , '_STR:1_' )
example# 6009
def get_internal_wsgi_application ( ) :pass
example# 6010
from django . conf import settings
example# 6011
app_path = getattr ( settings , '_STR:0_' )
example# 6012
if app_path is None :pass
example# 6013
return get_wsgi_application ( )
example# 6014
try :pass
except: pass
example# 6015
return import_string ( app_path )
example# 6016
try: pass
except ImportError as e :pass
example# 6017
msg = (  "WSGI application '_STR:1_' could not be loaded; "  "Error importing module: '_STR:2_'" % ( {  'app_path' : app_path ,  'exception' : e ,  } )  )
example# 6018
six . reraise ( ImproperlyConfigured , ImproperlyConfigured ( msg ) ,  sys . exc_info ( ) [ 2 ] )
example# 6019
class WSGIServer ( simple_server . WSGIServer , object ) :pass
example# 6020
request_queue_size = 10
example# 6021
def __init__ ( self , * args , ** kwargs ) :pass
example# 6022
if kwargs . pop ( '_STR:0_' , False ) :pass
example# 6023
self . address_family = socket . AF_INET6
example# 6024
super ( WSGIServer , self ) . __init__ ( * args , ** kwargs )
example# 6025
def server_bind ( self ) :pass
example# 6026
super ( WSGIServer , self ) . server_bind ( )
example# 6027
self . setup_environ ( )
example# 6028
class WSGIRequestHandler ( simple_server . WSGIRequestHandler , object ) :pass
example# 6029
def __init__ ( self , * args , ** kwargs ) :pass
example# 6030
self . style = color_style ( )
example# 6031
super ( WSGIRequestHandler , self ) . __init__ ( * args , ** kwargs )
example# 6032
def address_string ( self ) :pass
example# 6033
return self . client_address [ 0 ]
example# 6034
def log_message ( self , format , * args ) :pass
example# 6035
msg = '_STR:0_' % ( self . log_date_time_string ( ) , format % args )
example# 6036
if args [ 1 ] [ 0 ] == '_STR:0_' :pass
example# 6037
msg = self . style . HTTP_SUCCESS ( msg )
example# 6038
if True: pass
elif args [ 1 ] [ 0 ] == '_STR:0_' :pass
example# 6039
msg = self . style . HTTP_INFO ( msg )
example# 6040
if True: pass
elif args [ 1 ] == '_STR:0_' :pass
example# 6041
msg = self . style . HTTP_NOT_MODIFIED ( msg )
example# 6042
if True: pass
elif args [ 1 ] [ 0 ] == '_STR:0_' :pass
example# 6043
msg = self . style . HTTP_REDIRECT ( msg )
example# 6044
if True: pass
elif args [ 1 ] == '_STR:0_' :pass
example# 6045
msg = self . style . HTTP_NOT_FOUND ( msg )
example# 6046
if True: pass
elif args [ 1 ] [ 0 ] == '_STR:0_' :pass
example# 6047
msg = self . style . HTTP_BAD_REQUEST ( msg )
example# 6048
if True: pass
else :pass
example# 6049
msg = self . style . HTTP_SERVER_ERROR ( msg )
example# 6050
sys . stderr . write ( msg )
example# 6051
def run ( addr , port , wsgi_handler , ipv6 = False , threading = False ) :pass
example# 6052
server_address = ( addr , port )
example# 6053
if threading :pass
example# 6054
httpd_cls = type ( str ( '_STR:0_' ) , ( socketserver . ThreadingMixIn , WSGIServer ) , { } )
example# 6055
if True: pass
else :pass
example# 6056
httpd_cls = WSGIServer
example# 6057
httpd = httpd_cls ( server_address , WSGIRequestHandler , ipv6 = ipv6 )
example# 6058
if threading :pass
example# 6059
httpd . daemon_threads = True
example# 6060
httpd . set_app ( wsgi_handler )
example# 6061
httpd . serve_forever ( )
example# 6062
import importlib
example# 6063
import os
example# 6064
import sys
example# 6065
__version__ = '_STR:0_'
example# 6066
__all__ = [ '_STR:0_' ]
example# 6067
FASTCGI_OPTIONS = {  '_STR:1_' : '_STR:0_' ,  '_STR:2_' : None ,  '_STR:3_' : None ,  'socket' : None ,  'method' : 'fork' ,  'daemonize' : None ,  'workdir' : '/' ,  'pidfile' : None ,  'maxspare' : 5 ,  'minspare' : 2 ,  'maxchildren' : 50 ,  'maxrequests' : 0 ,  'debug' : None ,  'outlog' : None ,  'errlog' : None ,  'umask' : None ,  }
example# 6068
def fastcgi_help ( message = None ) :pass
example# 6069
print ( FASTCGI_HELP )
example# 6070
if message :pass
example# 6071
print ( message )
example# 6072
return False
example# 6073
def runfastcgi ( argset = [ ] , ** kwargs ) :pass
example# 6074
options = FASTCGI_OPTIONS . copy ( )
example# 6075
options . update ( kwargs )
example# 6076
for x in argset :pass
example# 6077
if "=" in x :pass
example# 6078
k , v = x . split ( '_STR:0_' , 1 )
example# 6079
if True: pass
else :pass
example# 6080
k , v = x , True
example# 6081
options [ k . lower ( ) ] = v
example# 6082
if "help" in options :pass
example# 6083
return fastcgi_help ( )
example# 6084
try :pass
except: pass
example# 6085
import flup
example# 6086
try: pass
except ImportError as e :pass
example# 6087
sys . stderr . write ( '_STR:0_' % e )
example# 6088
sys . stderr . write ( '_STR:0_' )
example# 6089
sys . stderr . write ( '_STR:0_' )
example# 6090
sys . stderr . write ( '_STR:0_' )
example# 6091
sys . stderr . write ( '_STR:0_' )
example# 6092
return False
example# 6093
flup_module = '_STR:1_' + options [ '_STR:0_' ]
example# 6094
if options [ '_STR:0_' ] in ( 'prefork' , '_STR:2_' ) :pass
example# 6095
wsgi_opts = {  'maxSpare' : int ( options [ "maxspare" ] ) ,  'minSpare' : int ( options [ "minspare" ] ) ,  'maxChildren' : int ( options [ "maxchildren" ] ) ,  'maxRequests' : int ( options [ "maxrequests" ] ) ,  }
example# 6096
flup_module += '_STR:7_'
example# 6097
if True: pass
elif options [ '_STR:0_' ] in ( '_STR:1_' , '_STR:2_' ) :pass
example# 6098
wsgi_opts = {  'maxSpare' : int ( options [ "maxspare" ] ) ,  'minSpare' : int ( options [ "minspare" ] ) ,  'maxThreads' : int ( options [ "maxchildren" ] ) ,  }
example# 6099
if True: pass
else :pass
example# 6100
return fastcgi_help ( "ERROR: Implementation must be one of prefork or "  "thread." )
example# 6101
wsgi_opts [ '_STR:0_' ] = options [ '_STR:0_' ] is not None
example# 6102
try :pass
except: pass
example# 6103
module = importlib . import_module ( '.%s' % flup_module , '_STR:1_' )
example# 6104
WSGIServer = module . WSGIServer
example# 6105
try: pass
except Exception :pass
example# 6106
print ( '_STR:0_' + flup_module )
example# 6107
return False
example# 6108
from django . core . servers . basehttp import get_internal_wsgi_application
example# 6109
if options [ "host" ] and options [ "port" ] and not options [ "socket" ] :pass
example# 6110
wsgi_opts [ '_STR:0_' ] = ( options [ "host" ] , int ( options [ "port" ] ) )
example# 6111
if True: pass
elif options [ "socket" ] and not options [ "host" ] and not options [ "port" ] :pass
example# 6112
wsgi_opts [ '_STR:1_' ] = options [ "socket" ]
example# 6113
if True: pass
elif not options [ "socket" ] and not options [ "host" ] and not options [ "port" ] :pass
example# 6114
wsgi_opts [ '_STR:0_' ] = None
example# 6115
if True: pass
else :pass
example# 6116
return fastcgi_help ( '_STR:0_' )
example# 6117
if options [ "daemonize" ] is None :pass
example# 6118
daemonize = ( wsgi_opts [ '_STR:0_' ] is not None )
example# 6119
if True: pass
else :pass
example# 6120
if options [ "daemonize" ] . lower ( ) in ( '_STR:1_' , '_STR:2_' , '_STR:3_' ) :pass
example# 6121
daemonize = True
example# 6122
if True: pass
elif options [ "daemonize" ] . lower ( ) in ( '_STR:1_' , '_STR:2_' , '_STR:3_' ) :pass
example# 6123
daemonize = False
example# 6124
if True: pass
else :pass
example# 6125
return fastcgi_help ( "ERROR: Invalid option for daemonize "  "parameter." )
example# 6126
daemon_kwargs = { }
example# 6127
if options [ '_STR:0_' ] :pass
example# 6128
daemon_kwargs [ '_STR:1_' ] = options [ '_STR:0_' ]
example# 6129
if options [ '_STR:0_' ] :pass
example# 6130
daemon_kwargs [ '_STR:1_' ] = options [ '_STR:0_' ]
example# 6131
if options [ '_STR:0_' ] :pass
example# 6132
daemon_kwargs [ '_STR:0_' ] = int ( options [ '_STR:0_' ] , 8 )
example# 6133
if daemonize :pass
example# 6134
from django . utils . daemonize import become_daemon
example# 6135
become_daemon ( our_home_dir = options [ "workdir" ] , ** daemon_kwargs )
example# 6136
if options [ "pidfile" ] :pass
example# 6137
with open ( options [ "pidfile" ] , "w" ) as fp :pass
example# 6138
fp . write ( "%d\n" % os . getpid ( ) )
example# 6139
WSGIServer ( get_internal_wsgi_application ( ) , ** wsgi_opts ) . run ( )
example# 6140
if __name__ == '_STR:0_' :pass
example# 6141
runfastcgi ( sys . argv [ 1 : ] )
example# 6142
from django . dispatch import Signal
example# 6143
request_started = Signal ( )
example# 6144
request_finished = Signal ( )
example# 6145
got_request_exception = Signal ( providing_args = [ "request" ] )
example# 6146
from __future__ import unicode_literals
example# 6147
import base64
example# 6148
import json
example# 6149
import time
example# 6150
import zlib
example# 6151
from django . conf import settings
example# 6152
from django . utils import baseconv
example# 6153
from django . utils . crypto import constant_time_compare , salted_hmac
example# 6154
from django . utils . encoding import force_bytes , force_str , force_text
example# 6155
from django . utils . module_loading import import_string
example# 6156
class BadSignature ( Exception ) :pass
example# 6157
pass
example# 6158
class SignatureExpired ( BadSignature ) :pass
example# 6159
pass
example# 6160
def b64_encode ( s ) :pass
example# 6161
return base64 . urlsafe_b64encode ( s ) . strip ( b'_STR:0_' )
example# 6162
def b64_decode ( s ) :pass
example# 6163
pad = b'_STR:0_' * ( - len ( s ) % 4 )
example# 6164
return base64 . urlsafe_b64decode ( s + pad )
example# 6165
def base64_hmac ( salt , value , key ) :pass
example# 6166
return b64_encode ( salted_hmac ( salt , value , key ) . digest ( ) )
example# 6167
def get_cookie_signer ( salt = '_STR:0_' ) :pass
example# 6168
Signer = import_string ( settings . SIGNING_BACKEND )
example# 6169
key = force_bytes ( settings . SECRET_KEY )
example# 6170
return Signer ( b'_STR:0_' + key , salt = salt )
example# 6171
class JSONSerializer ( object ) :pass
example# 6172
def dumps ( self , obj ) :pass
example# 6173
return json . dumps ( obj , separators = ( '_STR:0_' , '_STR:1_' ) ) . encode ( 'latin-1' )
example# 6174
def loads ( self , data ) :pass
example# 6175
return json . loads ( data . decode ( '_STR:0_' ) )
example# 6176
def dumps ( obj , key = None , salt = '_STR:0_' , serializer = JSONSerializer , compress = False ) :pass
example# 6177
data = serializer ( ) . dumps ( obj )
example# 6178
is_compressed = False
example# 6179
if compress :pass
example# 6180
compressed = zlib . compress ( data )
example# 6181
if len ( compressed ) < ( len ( data ) - 1 ) :pass
example# 6182
data = compressed
example# 6183
is_compressed = True
example# 6184
base64d = b64_encode ( data )
example# 6185
if is_compressed :pass
example# 6186
base64d = b'_STR:0_' + base64d
example# 6187
return TimestampSigner ( key , salt = salt ) . sign ( base64d )
example# 6188
def loads ( s , key = None , salt = '_STR:0_' , serializer = JSONSerializer , max_age = None ) :pass
example# 6189
base64d = force_bytes ( TimestampSigner ( key , salt = salt ) . unsign ( s , max_age = max_age ) )
example# 6190
decompress = False
example# 6191
if base64d [ : 1 ] == b'_STR:0_' :pass
example# 6192
base64d = base64d [ 1 : ]
example# 6193
decompress = True
example# 6194
data = b64_decode ( base64d )
example# 6195
if decompress :pass
example# 6196
data = zlib . decompress ( data )
example# 6197
return serializer ( ) . loads ( data )
example# 6198
class Signer ( object ) :pass
example# 6199
def __init__ ( self , key = None , sep = '_STR:0_' , salt = None ) :pass
example# 6200
self . sep = force_str ( sep )
example# 6201
self . key = key or settings . SECRET_KEY
example# 6202
self . salt = force_str ( salt or  '_STR:0_' % ( self . __class__ . __module__ , self . __class__ . __name__ ) )
example# 6203
def signature ( self , value ) :pass
example# 6204
signature = base64_hmac ( self . salt + '_STR:0_' , value , self . key )
example# 6205
return force_str ( signature )
example# 6206
def sign ( self , value ) :pass
example# 6207
value = force_str ( value )
example# 6208
return str ( '%s%s%s' ) % ( value , self . sep , self . signature ( value ) )
example# 6209
def unsign ( self , signed_value ) :pass
example# 6210
signed_value = force_str ( signed_value )
example# 6211
if self . sep not in signed_value :pass
example# 6212
raise BadSignature ( '_STR:0_' % self . sep )
example# 6213
value , sig = signed_value . rsplit ( self . sep , 1 )
example# 6214
if constant_time_compare ( sig , self . signature ( value ) ) :pass
example# 6215
return force_text ( value )
example# 6216
raise BadSignature ( '_STR:0_' % sig )
example# 6217
class TimestampSigner ( Signer ) :pass
example# 6218
def timestamp ( self ) :pass
example# 6219
return baseconv . base62 . encode ( int ( time . time ( ) ) )
example# 6220
def sign ( self , value ) :pass
example# 6221
value = force_str ( value )
example# 6222
value = str ( '%s%s%s' ) % ( value , self . sep , self . timestamp ( ) )
example# 6223
return super ( TimestampSigner , self ) . sign ( value )
example# 6224
def unsign ( self , value , max_age = None ) :pass
example# 6225
result = super ( TimestampSigner , self ) . unsign ( value )
example# 6226
value , timestamp = result . rsplit ( self . sep , 1 )
example# 6227
timestamp = baseconv . base62 . decode ( timestamp )
example# 6228
if max_age is not None :pass
example# 6229
age = time . time ( ) - timestamp
example# 6230
if age > max_age :pass
example# 6231
raise SignatureExpired (  '_STR:0_' % ( age , max_age ) )
example# 6232
return value
example# 6233
from __future__ import unicode_literals
example# 6234
import functools
example# 6235
from importlib import import_module
example# 6236
import re
example# 6237
from threading import local
example# 6238
import warnings
example# 6239
from django . http import Http404
example# 6240
from django . core . exceptions import ImproperlyConfigured , ViewDoesNotExist
example# 6241
from django . utils . datastructures import MultiValueDict
example# 6242
from django . utils . deprecation import RemovedInDjango20Warning
example# 6243
from django . utils . encoding import force_str , force_text , iri_to_uri
example# 6244
from django . utils . functional import lazy
example# 6245
from django . utils . http import urlquote
example# 6246
from django . utils . module_loading import module_has_submodule
example# 6247
from django . utils . regex_helper import normalize
example# 6248
from django . utils import six , lru_cache
example# 6249
from django . utils . translation import get_language
example# 6250
_prefixes = local ( )
example# 6251
_urlconfs = local ( )
example# 6252
class ResolverMatch ( object ) :pass
example# 6253
def __init__ ( self , func , args , kwargs , url_name = None , app_name = None , namespaces = None ) :pass
example# 6254
self . func = func
example# 6255
self . args = args
example# 6256
self . kwargs = kwargs
example# 6257
self . url_name = url_name
example# 6258
self . app_name = app_name
example# 6259
if namespaces :pass
example# 6260
self . namespaces = [ x for x in namespaces if x ]
example# 6261
if True: pass
else :pass
example# 6262
self . namespaces = [ ]
example# 6263
self . namespace = '_STR:0_' . join ( self . namespaces )
example# 6264
if not hasattr ( func , '_STR:0_' ) :pass
example# 6265
self . _func_path = '_STR:0_' . join ( [ func . __class__ . __module__ , func . __class__ . __name__ ] )
example# 6266
if True: pass
else :pass
example# 6267
self . _func_path = '_STR:0_' . join ( [ func . __module__ , func . __name__ ] )
example# 6268
view_path = url_name or self . _func_path
example# 6269
self . view_name = '_STR:0_' . join ( self . namespaces + [ view_path ] )
example# 6270
def __getitem__ ( self , index ) :pass
example# 6271
return ( self . func , self . args , self . kwargs ) [ index ]
example# 6272
def __repr__ ( self ) :pass
example# 6273
return '_STR:0_' % (  self . _func_path , self . args , self . kwargs , self . url_name , self . app_name , self . namespaces )
example# 6274
class Resolver404 ( Http404 ) :pass
example# 6275
pass
example# 6276
class NoReverseMatch ( Exception ) :pass
example# 6277
pass
example# 6278
@ lru_cache . lru_cache ( maxsize = None )
def dummy(): pass
example# 6279
def get_callable ( lookup_view , can_fail = False ) :pass
example# 6280
if callable ( lookup_view ) :pass
example# 6281
return lookup_view
example# 6282
mod_name , func_name = get_mod_func ( lookup_view )
example# 6283
if not func_name :pass
example# 6284
if can_fail :pass
example# 6285
return lookup_view
example# 6286
if True: pass
else :pass
example# 6287
raise ImportError (  '_STR:0_' %  lookup_view )
example# 6288
try :pass
except: pass
example# 6289
mod = import_module ( mod_name )
example# 6290
try: pass
except ImportError :pass
example# 6291
if can_fail :pass
example# 6292
return lookup_view
example# 6293
if True: pass
else :pass
example# 6294
parentmod , submod = get_mod_func ( mod_name )
example# 6295
if submod and not module_has_submodule ( import_module ( parentmod ) , submod ) :pass
example# 6296
raise ViewDoesNotExist (  '_STR:0_' %  ( lookup_view , mod_name ) )
example# 6297
if True: pass
else :pass
example# 6298
raise
example# 6299
if True: pass
else :pass
example# 6300
try :pass
except: pass
example# 6301
view_func = getattr ( mod , func_name )
example# 6302
try: pass
except AttributeError :pass
example# 6303
if can_fail :pass
example# 6304
return lookup_view
example# 6305
if True: pass
else :pass
example# 6306
raise ViewDoesNotExist (  '_STR:0_' %  ( lookup_view , mod_name ) )
example# 6307
if True: pass
else :pass
example# 6308
if not callable ( view_func ) :pass
example# 6309
raise ViewDoesNotExist (  '_STR:0_' %  ( mod_name , func_name ) )
example# 6310
return view_func
example# 6311
@ lru_cache . lru_cache ( maxsize = None )
def dummy(): pass
example# 6312
def get_resolver ( urlconf ) :pass
example# 6313
if urlconf is None :pass
example# 6314
from django . conf import settings
example# 6315
urlconf = settings . ROOT_URLCONF
example# 6316
return RegexURLResolver ( r'_STR:0_' , urlconf )
example# 6317
@ lru_cache . lru_cache ( maxsize = None )
def dummy(): pass
example# 6318
def get_ns_resolver ( ns_pattern , resolver ) :pass
example# 6319
ns_resolver = RegexURLResolver ( ns_pattern , resolver . url_patterns )
example# 6320
return RegexURLResolver ( r'_STR:0_' , [ ns_resolver ] )
example# 6321
def get_mod_func ( callback ) :pass
example# 6322
try :pass
except: pass
example# 6323
dot = callback . rindex ( '_STR:0_' )
example# 6324
try: pass
except ValueError :pass
example# 6325
return callback , ''
example# 6326
return callback [ : dot ] , callback [ dot + 1 : ]
example# 6327
class LocaleRegexProvider ( object ) :pass
example# 6328
def __init__ ( self , regex ) :pass
example# 6329
self . _regex = regex
example# 6330
self . _regex_dict = { }
example# 6331
@ property
def dummy(): pass
example# 6332
def regex ( self ) :pass
example# 6333
language_code = get_language ( )
example# 6334
if language_code not in self . _regex_dict :pass
example# 6335
if isinstance ( self . _regex , six . string_types ) :pass
example# 6336
regex = self . _regex
example# 6337
if True: pass
else :pass
example# 6338
regex = force_text ( self . _regex )
example# 6339
try :pass
except: pass
example# 6340
compiled_regex = re . compile ( regex , re . UNICODE )
example# 6341
try: pass
except re . error as e :pass
example# 6342
raise ImproperlyConfigured (  '_STR:0_' %  ( regex , six . text_type ( e ) ) )
example# 6343
self . _regex_dict [ language_code ] = compiled_regex
example# 6344
return self . _regex_dict [ language_code ]
example# 6345
class RegexURLPattern ( LocaleRegexProvider ) :pass
example# 6346
def __init__ ( self , regex , callback , default_args = None , name = None ) :pass
example# 6347
LocaleRegexProvider . __init__ ( self , regex )
example# 6348
if callable ( callback ) :pass
example# 6349
self . _callback = callback
example# 6350
if True: pass
else :pass
example# 6351
self . _callback = None
example# 6352
self . _callback_str = callback
example# 6353
self . default_args = default_args or { }
example# 6354
self . name = name
example# 6355
def __repr__ ( self ) :pass
example# 6356
return force_str ( '_STR:0_' % ( self . __class__ . __name__ , self . name , self . regex . pattern ) )
example# 6357
def add_prefix ( self , prefix ) :pass
example# 6358
if not prefix or not hasattr ( self , '_STR:0_' ) :pass
example# 6359
return
example# 6360
self . _callback_str = prefix + '_STR:0_' + self . _callback_str
example# 6361
def resolve ( self , path ) :pass
example# 6362
match = self . regex . search ( path )
example# 6363
if match :pass
example# 6364
kwargs = match . groupdict ( )
example# 6365
if kwargs :pass
example# 6366
args = ( )
example# 6367
if True: pass
else :pass
example# 6368
args = match . groups ( )
example# 6369
kwargs . update ( self . default_args )
example# 6370
return ResolverMatch ( self . callback , args , kwargs , self . name )
example# 6371
@ property
def dummy(): pass
example# 6372
def callback ( self ) :pass
example# 6373
if self . _callback is not None :pass
example# 6374
return self . _callback
example# 6375
self . _callback = get_callable ( self . _callback_str )
example# 6376
return self . _callback
example# 6377
class RegexURLResolver ( LocaleRegexProvider ) :pass
example# 6378
def __init__ ( self , regex , urlconf_name , default_kwargs = None , app_name = None , namespace = None ) :pass
example# 6379
LocaleRegexProvider . __init__ ( self , regex )
example# 6380
self . urlconf_name = urlconf_name
example# 6381
if not isinstance ( urlconf_name , six . string_types ) :pass
example# 6382
self . _urlconf_module = self . urlconf_name
example# 6383
self . callback = None
example# 6384
self . default_kwargs = default_kwargs or { }
example# 6385
self . namespace = namespace
example# 6386
self . app_name = app_name
example# 6387
self . _reverse_dict = { }
example# 6388
self . _namespace_dict = { }
example# 6389
self . _app_dict = { }
example# 6390
self . _callback_strs = set ( )
example# 6391
self . _populated = False
example# 6392
def __repr__ ( self ) :pass
example# 6393
if isinstance ( self . urlconf_name , list ) and len ( self . urlconf_name ) :pass
example# 6394
urlconf_repr = '_STR:0_' % self . urlconf_name [ 0 ] . __class__ . __name__
example# 6395
if True: pass
else :pass
example# 6396
urlconf_repr = repr ( self . urlconf_name )
example# 6397
return str ( '_STR:0_' ) % (  self . __class__ . __name__ , urlconf_repr , self . app_name ,  self . namespace , self . regex . pattern )
example# 6398
def _populate ( self ) :pass
example# 6399
lookups = MultiValueDict ( )
example# 6400
namespaces = { }
example# 6401
apps = { }
example# 6402
language_code = get_language ( )
example# 6403
for pattern in reversed ( self . url_patterns ) :pass
example# 6404
if hasattr ( pattern , '_STR:0_' ) :pass
example# 6405
self . _callback_strs . add ( pattern . _callback_str )
example# 6406
if True: pass
elif hasattr ( pattern , '_STR:0_' ) :pass
example# 6407
callback = pattern . _callback
example# 6408
if isinstance ( callback , functools . partial ) :pass
example# 6409
callback = callback . func
example# 6410
if not hasattr ( callback , '_STR:0_' ) :pass
example# 6411
lookup_str = callback . __module__ + '_STR:0_' + callback . __class__ . __name__
example# 6412
if True: pass
else :pass
example# 6413
lookup_str = callback . __module__ + '_STR:0_' + callback . __name__
example# 6414
self . _callback_strs . add ( lookup_str )
example# 6415
p_pattern = pattern . regex . pattern
example# 6416
if p_pattern . startswith ( '_STR:0_' ) :pass
example# 6417
p_pattern = p_pattern [ 1 : ]
example# 6418
if isinstance ( pattern , RegexURLResolver ) :pass
example# 6419
if pattern . namespace :pass
example# 6420
namespaces [ pattern . namespace ] = ( p_pattern , pattern )
example# 6421
if pattern . app_name :pass
example# 6422
apps . setdefault ( pattern . app_name , [ ] ) . append ( pattern . namespace )
example# 6423
if True: pass
else :pass
example# 6424
parent_pat = pattern . regex . pattern
example# 6425
for name in pattern . reverse_dict :pass
example# 6426
for matches , pat , defaults in pattern . reverse_dict . getlist ( name ) :pass
example# 6427
new_matches = normalize ( parent_pat + pat )
example# 6428
lookups . appendlist ( name , ( new_matches , p_pattern + pat , dict ( defaults , ** pattern . default_kwargs ) ) )
example# 6429
for namespace , ( prefix , sub_pattern ) in pattern . namespace_dict . items ( ) :pass
example# 6430
namespaces [ namespace ] = ( p_pattern + prefix , sub_pattern )
example# 6431
for app_name , namespace_list in pattern . app_dict . items ( ) :pass
example# 6432
apps . setdefault ( app_name , [ ] ) . extend ( namespace_list )
example# 6433
self . _callback_strs . update ( pattern . _callback_strs )
example# 6434
if True: pass
else :pass
example# 6435
bits = normalize ( p_pattern )
example# 6436
lookups . appendlist ( pattern . callback , ( bits , p_pattern , pattern . default_args ) )
example# 6437
if pattern . name is not None :pass
example# 6438
lookups . appendlist ( pattern . name , ( bits , p_pattern , pattern . default_args ) )
example# 6439
self . _reverse_dict [ language_code ] = lookups
example# 6440
self . _namespace_dict [ language_code ] = namespaces
example# 6441
self . _app_dict [ language_code ] = apps
example# 6442
self . _populated = True
example# 6443
@ property
def dummy(): pass
example# 6444
def reverse_dict ( self ) :pass
example# 6445
language_code = get_language ( )
example# 6446
if language_code not in self . _reverse_dict :pass
example# 6447
self . _populate ( )
example# 6448
return self . _reverse_dict [ language_code ]
example# 6449
@ property
def dummy(): pass
example# 6450
def namespace_dict ( self ) :pass
example# 6451
language_code = get_language ( )
example# 6452
if language_code not in self . _namespace_dict :pass
example# 6453
self . _populate ( )
example# 6454
return self . _namespace_dict [ language_code ]
example# 6455
@ property
def dummy(): pass
example# 6456
def app_dict ( self ) :pass
example# 6457
language_code = get_language ( )
example# 6458
if language_code not in self . _app_dict :pass
example# 6459
self . _populate ( )
example# 6460
return self . _app_dict [ language_code ]
example# 6461
def resolve ( self , path ) :pass
example# 6462
path = force_text ( path )
example# 6463
tried = [ ]
example# 6464
match = self . regex . search ( path )
example# 6465
if match :pass
example# 6466
new_path = path [ match . end ( ) : ]
example# 6467
for pattern in self . url_patterns :pass
example# 6468
try :pass
except: pass
example# 6469
sub_match = pattern . resolve ( new_path )
example# 6470
try: pass
except Resolver404 as e :pass
example# 6471
sub_tried = e . args [ 0 ] . get ( '_STR:0_' )
example# 6472
if sub_tried is not None :pass
example# 6473
tried . extend ( [ pattern ] + t for t in sub_tried )
example# 6474
if True: pass
else :pass
example# 6475
tried . append ( [ pattern ] )
example# 6476
if True: pass
else :pass
example# 6477
if sub_match :pass
example# 6478
sub_match_dict = dict ( match . groupdict ( ) , ** self . default_kwargs )
example# 6479
sub_match_dict . update ( sub_match . kwargs )
example# 6480
return ResolverMatch ( sub_match . func , sub_match . args , sub_match_dict , sub_match . url_name , self . app_name or sub_match . app_name , [ self . namespace ] + sub_match . namespaces )
example# 6481
tried . append ( [ pattern ] )
example# 6482
raise Resolver404 ( { '_STR:1_' : tried , '_STR:0_' : new_path } )
example# 6483
raise Resolver404 ( { '_STR:0_' : path } )
example# 6484
@ property
def dummy(): pass
example# 6485
def urlconf_module ( self ) :pass
example# 6486
try :pass
except: pass
example# 6487
return self . _urlconf_module
example# 6488
try: pass
except AttributeError :pass
example# 6489
self . _urlconf_module = import_module ( self . urlconf_name )
example# 6490
return self . _urlconf_module
example# 6491
@ property
def dummy(): pass
example# 6492
def url_patterns ( self ) :pass
example# 6493
patterns = getattr ( self . urlconf_module , '_STR:0_' , self . urlconf_module )
example# 6494
try :pass
except: pass
example# 6495
iter ( patterns )
example# 6496
try: pass
except TypeError :pass
example# 6497
msg = (  "The included urlconf '_STR:1_' does not appear to have any "  "patterns in it. If you see valid patterns in the file then "  "the issue is probably caused by a circular import."  )
example# 6498
raise ImproperlyConfigured ( msg . format ( name = self . urlconf_name ) )
example# 6499
return patterns
example# 6500
def resolve_error_handler ( self , view_type ) :pass
example# 6501
callback = getattr ( self . urlconf_module , '_STR:0_' % view_type , None )
example# 6502
if not callback :pass
example# 6503
from django . conf import urls
example# 6504
callback = getattr ( urls , '_STR:0_' % view_type )
example# 6505
return get_callable ( callback ) , { }
example# 6506
def reverse ( self , lookup_view , * args , ** kwargs ) :pass
example# 6507
return self . _reverse_with_prefix ( lookup_view , '' , * args , ** kwargs )
example# 6508
def _reverse_with_prefix ( self , lookup_view , _prefix , * args , ** kwargs ) :pass
example# 6509
if args and kwargs :pass
example# 6510
raise ValueError ( '_STR:0_' )
example# 6511
text_args = [ force_text ( v ) for v in args ]
example# 6512
text_kwargs = dict ( ( k , force_text ( v ) ) for ( k , v ) in kwargs . items ( ) )
example# 6513
if not self . _populated :pass
example# 6514
self . _populate ( )
example# 6515
original_lookup = lookup_view
example# 6516
try :pass
except: pass
example# 6517
if lookup_view in self . _callback_strs :pass
example# 6518
lookup_view = get_callable ( lookup_view , True )
example# 6519
try: pass
except ( ImportError , AttributeError ) as e :pass
example# 6520
raise NoReverseMatch ( '_STR:0_' % ( lookup_view , e ) )
example# 6521
if True: pass
else :pass
example# 6522
if not callable ( original_lookup ) and callable ( lookup_view ) :pass
example# 6523
warnings . warn (  '_STR:0_' % original_lookup ,  RemovedInDjango20Warning , stacklevel = 3  )
example# 6524
possibilities = self . reverse_dict . getlist ( lookup_view )
example# 6525
prefix_norm , prefix_args = normalize ( urlquote ( _prefix ) ) [ 0 ]
example# 6526
for possibility , pattern , defaults in possibilities :pass
example# 6527
for result , params in possibility :pass
example# 6528
if args :pass
example# 6529
if len ( args ) != len ( params ) + len ( prefix_args ) :pass
example# 6530
continue
example# 6531
candidate_subs = dict ( zip ( prefix_args + params , text_args ) )
example# 6532
if True: pass
else :pass
example# 6533
if set ( kwargs . keys ( ) ) | set ( defaults . keys ( ) ) != set ( params ) | set ( defaults . keys ( ) ) | set ( prefix_args ) :pass
example# 6534
continue
example# 6535
matches = True
example# 6536
for k , v in defaults . items ( ) :pass
example# 6537
if kwargs . get ( k , v ) != v :pass
example# 6538
matches = False
example# 6539
break
example# 6540
if not matches :pass
example# 6541
continue
example# 6542
candidate_subs = text_kwargs
example# 6543
candidate_pat = prefix_norm . replace ( '_STR:0_' , '_STR:1_' ) + result
example# 6544
if re . search ( '_STR:0_' % ( prefix_norm , pattern ) , candidate_pat % candidate_subs , re . UNICODE ) :pass
example# 6545
candidate_subs = dict ( ( k , urlquote ( v ) ) for ( k , v ) in candidate_subs . items ( ) )
example# 6546
return candidate_pat % candidate_subs
example# 6547
m = getattr ( lookup_view , '_STR:0_' , None )
example# 6548
n = getattr ( lookup_view , '_STR:0_' , None )
example# 6549
if m is not None and n is not None :pass
example# 6550
lookup_view_s = "%s.%s" % ( m , n )
example# 6551
if True: pass
else :pass
example# 6552
lookup_view_s = lookup_view
example# 6553
patterns = [ pattern for ( possibility , pattern , defaults ) in possibilities ]
example# 6554
raise NoReverseMatch ( '_STR:0_'  "arguments '%s' not found. %d pattern(s) tried: %s" %  ( lookup_view_s , args , kwargs , len ( patterns ) , patterns ) )
example# 6555
class LocaleRegexURLResolver ( RegexURLResolver ) :pass
example# 6556
def __init__ ( self , urlconf_name , default_kwargs = None , app_name = None , namespace = None ) :pass
example# 6557
super ( LocaleRegexURLResolver , self ) . __init__ (  None , urlconf_name , default_kwargs , app_name , namespace )
example# 6558
@ property
def dummy(): pass
example# 6559
def regex ( self ) :pass
example# 6560
language_code = get_language ( )
example# 6561
if language_code not in self . _regex_dict :pass
example# 6562
regex_compiled = re . compile ( '_STR:0_' % language_code , re . UNICODE )
example# 6563
self . _regex_dict [ language_code ] = regex_compiled
example# 6564
return self . _regex_dict [ language_code ]
example# 6565
def resolve ( path , urlconf = None ) :pass
example# 6566
if urlconf is None :pass
example# 6567
urlconf = get_urlconf ( )
example# 6568
return get_resolver ( urlconf ) . resolve ( path )
example# 6569
def reverse ( viewname , urlconf = None , args = None , kwargs = None , prefix = None , current_app = None ) :pass
example# 6570
if urlconf is None :pass
example# 6571
urlconf = get_urlconf ( )
example# 6572
resolver = get_resolver ( urlconf )
example# 6573
args = args or [ ]
example# 6574
kwargs = kwargs or { }
example# 6575
if prefix is None :pass
example# 6576
prefix = get_script_prefix ( )
example# 6577
if not isinstance ( viewname , six . string_types ) :pass
example# 6578
view = viewname
example# 6579
if True: pass
else :pass
example# 6580
parts = viewname . split ( '_STR:0_' )
example# 6581
parts . reverse ( )
example# 6582
view = parts [ 0 ]
example# 6583
path = parts [ 1 : ]
example# 6584
resolved_path = [ ]
example# 6585
ns_pattern = ''
example# 6586
while path :pass
example# 6587
ns = path . pop ( )
example# 6588
try :pass
except: pass
example# 6589
app_list = resolver . app_dict [ ns ]
example# 6590
if current_app and current_app in app_list :pass
example# 6591
ns = current_app
example# 6592
if True: pass
elif ns not in app_list :pass
example# 6593
ns = app_list [ 0 ]
example# 6594
try: pass
except KeyError :pass
example# 6595
pass
example# 6596
try :pass
except: pass
example# 6597
extra , resolver = resolver . namespace_dict [ ns ]
example# 6598
resolved_path . append ( ns )
example# 6599
ns_pattern = ns_pattern + extra
example# 6600
try: pass
except KeyError as key :pass
example# 6601
if resolved_path :pass
example# 6602
raise NoReverseMatch (  '_STR:0_' %  ( key , ':' . join ( resolved_path ) ) )
example# 6603
if True: pass
else :pass
example# 6604
raise NoReverseMatch ( '_STR:0_' %  key )
example# 6605
if ns_pattern :pass
example# 6606
resolver = get_ns_resolver ( ns_pattern , resolver )
example# 6607
return iri_to_uri ( resolver . _reverse_with_prefix ( view , prefix , * args , ** kwargs ) )
example# 6608
reverse_lazy = lazy ( reverse , str )
example# 6609
def clear_url_caches ( ) :pass
example# 6610
get_callable . cache_clear ( )
example# 6611
get_resolver . cache_clear ( )
example# 6612
get_ns_resolver . cache_clear ( )
example# 6613
def set_script_prefix ( prefix ) :pass
example# 6614
if not prefix . endswith ( '_STR:0_' ) :pass
example# 6615
prefix += '_STR:0_'
example# 6616
_prefixes . value = prefix
example# 6617
def get_script_prefix ( ) :pass
example# 6618
return getattr ( _prefixes , "value" , '_STR:1_' )
example# 6619
def clear_script_prefix ( ) :pass
example# 6620
try :pass
except: pass
example# 6621
del _prefixes . value
example# 6622
try: pass
except AttributeError :pass
example# 6623
pass
example# 6624
def set_urlconf ( urlconf_name ) :pass
example# 6625
if urlconf_name :pass
example# 6626
_urlconfs . value = urlconf_name
example# 6627
if True: pass
else :pass
example# 6628
if hasattr ( _urlconfs , "value" ) :pass
example# 6629
del _urlconfs . value
example# 6630
def get_urlconf ( default = None ) :pass
example# 6631
return getattr ( _urlconfs , "value" , default )
example# 6632
def is_valid_path ( path , urlconf = None ) :pass
example# 6633
try :pass
except: pass
example# 6634
resolve ( path , urlconf )
example# 6635
return True
example# 6636
try: pass
except Resolver404 :pass
example# 6637
return False
example# 6638
from __future__ import unicode_literals
example# 6639
import re
example# 6640
from django . core . exceptions import ValidationError
example# 6641
from django . utils . deconstruct import deconstructible
example# 6642
from django . utils . translation import ugettext_lazy as _ , ungettext_lazy
example# 6643
from django . utils . encoding import force_text
example# 6644
from django . utils . ipv6 import is_valid_ipv6_address
example# 6645
from django . utils import six
example# 6646
from django . utils . six . moves . urllib . parse import urlsplit , urlunsplit
example# 6647
EMPTY_VALUES = ( None , '' , [ ] , ( ) , { } )
example# 6648
@ deconstructible
def dummy(): pass
example# 6649
class RegexValidator ( object ) :pass
example# 6650
regex = ''
example# 6651
message = _ ( '_STR:0_' )
example# 6652
code = '_STR:0_'
example# 6653
inverse_match = False
example# 6654
flags = 0
example# 6655
def __init__ ( self , regex = None , message = None , code = None , inverse_match = None , flags = None ) :pass
example# 6656
if regex is not None :pass
example# 6657
self . regex = regex
example# 6658
if message is not None :pass
example# 6659
self . message = message
example# 6660
if code is not None :pass
example# 6661
self . code = code
example# 6662
if inverse_match is not None :pass
example# 6663
self . inverse_match = inverse_match
example# 6664
if flags is not None :pass
example# 6665
self . flags = flags
example# 6666
if self . flags and not isinstance ( self . regex , six . string_types ) :pass
example# 6667
raise TypeError ( '_STR:0_' )
example# 6668
if isinstance ( self . regex , six . string_types ) :pass
example# 6669
self . regex = re . compile ( self . regex , self . flags )
example# 6670
def __call__ ( self , value ) :pass
example# 6671
if not ( self . inverse_match is not bool ( self . regex . search (  force_text ( value ) ) ) ) :pass
example# 6672
raise ValidationError ( self . message , code = self . code )
example# 6673
def __eq__ ( self , other ) :pass
example# 6674
return (  isinstance ( other , RegexValidator ) and  self . regex . pattern == other . regex . pattern and  self . regex . flags == other . regex . flags and  ( self . message == other . message ) and  ( self . code == other . code ) and  ( self . inverse_match == other . inverse_match )  )
example# 6675
def __ne__ ( self , other ) :pass
example# 6676
return not ( self == other )
example# 6677
@ deconstructible
def dummy(): pass
example# 6678
class URLValidator ( RegexValidator ) :pass
example# 6679
regex = re . compile (  r'^(?:[a-z0-9\.\-]*)://'  r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}(?<!-)\.?)|'  r'localhost|'  r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|'  r'\[?[A-F0-9]*:[A-F0-9:]+\]?)'  r'(?::\d+)?'  r'(?:/?|[/?]\S+)$' , re . IGNORECASE )
example# 6680
message = _ ( 'Enter a valid URL.' )
example# 6681
schemes = [ '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' ]
example# 6682
def __init__ ( self , schemes = None , ** kwargs ) :pass
example# 6683
super ( URLValidator , self ) . __init__ ( ** kwargs )
example# 6684
if schemes is not None :pass
example# 6685
self . schemes = schemes
example# 6686
def __call__ ( self , value ) :pass
example# 6687
value = force_text ( value )
example# 6688
scheme = value . split ( '_STR:0_' ) [ 0 ] . lower ( )
example# 6689
if scheme not in self . schemes :pass
example# 6690
raise ValidationError ( self . message , code = self . code )
example# 6691
try :pass
except: pass
example# 6692
super ( URLValidator , self ) . __call__ ( value )
example# 6693
try: pass
except ValidationError as e :pass
example# 6694
if value :pass
example# 6695
scheme , netloc , path , query , fragment = urlsplit ( value )
example# 6696
try :pass
except: pass
example# 6697
netloc = netloc . encode ( '_STR:0_' ) . decode ( '_STR:1_' )
example# 6698
try: pass
except UnicodeError :pass
example# 6699
raise e
example# 6700
url = urlunsplit ( ( scheme , netloc , path , query , fragment ) )
example# 6701
super ( URLValidator , self ) . __call__ ( url )
example# 6702
if True: pass
else :pass
example# 6703
raise
example# 6704
if True: pass
else :pass
example# 6705
url = value
example# 6706
def validate_integer ( value ) :pass
example# 6707
try :pass
except: pass
example# 6708
int ( value )
example# 6709
try: pass
except ( ValueError , TypeError ) :pass
example# 6710
raise ValidationError ( _ ( '_STR:0_' ) , code = 'invalid' )
example# 6711
@ deconstructible
def dummy(): pass
example# 6712
class EmailValidator ( object ) :pass
example# 6713
message = _ ( 'Enter a valid email address.' )
example# 6714
code = '_STR:0_'
example# 6715
user_regex = re . compile (  r'_STR:0_'  r'|^"([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-\011\013\014\016-\177])*"$)' ,  re . IGNORECASE )
example# 6716
domain_regex = re . compile (    r'_STR:2_' ,  re . IGNORECASE )
example# 6717
literal_regex = re . compile (   r'_STR:0_' ,  re . IGNORECASE )
example# 6718
domain_whitelist = [ '_STR:0_' ]
example# 6719
def __init__ ( self , message = None , code = None , whitelist = None ) :pass
example# 6720
if message is not None :pass
example# 6721
self . message = message
example# 6722
if code is not None :pass
example# 6723
self . code = code
example# 6724
if whitelist is not None :pass
example# 6725
self . domain_whitelist = whitelist
example# 6726
def __call__ ( self , value ) :pass
example# 6727
value = force_text ( value )
example# 6728
if not value or '_STR:0_' not in value :pass
example# 6729
raise ValidationError ( self . message , code = self . code )
example# 6730
user_part , domain_part = value . rsplit ( '_STR:0_' , 1 )
example# 6731
if not self . user_regex . match ( user_part ) :pass
example# 6732
raise ValidationError ( self . message , code = self . code )
example# 6733
if ( domain_part not in self . domain_whitelist and  not self . validate_domain_part ( domain_part ) ) :pass
example# 6734
try :pass
except: pass
example# 6735
domain_part = domain_part . encode ( '_STR:0_' ) . decode ( '_STR:1_' )
example# 6736
if self . validate_domain_part ( domain_part ) :pass
example# 6737
return
example# 6738
try: pass
except UnicodeError :pass
example# 6739
pass
example# 6740
raise ValidationError ( self . message , code = self . code )
example# 6741
def validate_domain_part ( self , domain_part ) :pass
example# 6742
if self . domain_regex . match ( domain_part ) :pass
example# 6743
return True
example# 6744
literal_match = self . literal_regex . match ( domain_part )
example# 6745
if literal_match :pass
example# 6746
ip_address = literal_match . group ( 1 )
example# 6747
try :pass
except: pass
example# 6748
validate_ipv46_address ( ip_address )
example# 6749
return True
example# 6750
try: pass
except ValidationError :pass
example# 6751
pass
example# 6752
return False
example# 6753
def __eq__ ( self , other ) :pass
example# 6754
return isinstance ( other , EmailValidator ) and ( self . domain_whitelist == other . domain_whitelist ) and ( self . message == other . message ) and ( self . code == other . code )
example# 6755
validate_email = EmailValidator ( )
example# 6756
slug_re = re . compile ( r'_STR:0_' )
example# 6757
validate_slug = RegexValidator ( slug_re , _ ( "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens." ) , 'invalid' )
example# 6758
ipv4_re = re . compile ( r'_STR:2_' )
example# 6759
validate_ipv4_address = RegexValidator ( ipv4_re , _ ( 'Enter a valid IPv4 address.' ) , 'invalid' )
example# 6760
def validate_ipv6_address ( value ) :pass
example# 6761
if not is_valid_ipv6_address ( value ) :pass
example# 6762
raise ValidationError ( _ ( '_STR:0_' ) , code = '_STR:1_' )
example# 6763
def validate_ipv46_address ( value ) :pass
example# 6764
try :pass
except: pass
example# 6765
validate_ipv4_address ( value )
example# 6766
try: pass
except ValidationError :pass
example# 6767
try :pass
except: pass
example# 6768
validate_ipv6_address ( value )
example# 6769
try: pass
except ValidationError :pass
example# 6770
raise ValidationError ( _ ( '_STR:0_' ) , code = '_STR:1_' )
example# 6771
ip_address_validator_map = {  '_STR:1_' : ( [ validate_ipv46_address ] , _ ( '_STR:0_' ) ) ,  'ipv4' : ( [ validate_ipv4_address ] , _ ( 'Enter a valid IPv4 address.' ) ) ,  'ipv6' : ( [ validate_ipv6_address ] , _ ( 'Enter a valid IPv6 address.' ) ) ,  }
example# 6772
def ip_address_validators ( protocol , unpack_ipv4 ) :pass
example# 6773
if protocol != '_STR:0_' and unpack_ipv4 :pass
example# 6774
raise ValueError (  '_STR:0_' )
example# 6775
try :pass
except: pass
example# 6776
return ip_address_validator_map [ protocol . lower ( ) ]
example# 6777
try: pass
except KeyError :pass
example# 6778
raise ValueError ( '_STR:0_'  % ( protocol , list ( ip_address_validator_map ) ) )
example# 6779
comma_separated_int_list_re = re . compile ( '_STR:0_' )
example# 6780
validate_comma_separated_integer_list = RegexValidator ( comma_separated_int_list_re , _ ( 'Enter only digits separated by commas.' ) , 'invalid' )
example# 6781
@ deconstructible
def dummy(): pass
example# 6782
class BaseValidator ( object ) :pass
example# 6783
compare = lambda self , a , b : a is not b
example# 6784
clean = lambda self , x : x
example# 6785
message = _ ( '_STR:0_' )
example# 6786
code = '_STR:0_'
example# 6787
def __init__ ( self , limit_value ) :pass
example# 6788
self . limit_value = limit_value
example# 6789
def __call__ ( self , value ) :pass
example# 6790
cleaned = self . clean ( value )
example# 6791
params = { '_STR:0_' : self . limit_value , '_STR:1_' : cleaned }
example# 6792
if self . compare ( cleaned , self . limit_value ) :pass
example# 6793
raise ValidationError ( self . message , code = self . code , params = params )
example# 6794
def __eq__ ( self , other ) :pass
example# 6795
return isinstance ( other , self . __class__ ) and ( self . limit_value == other . limit_value ) and ( self . message == other . message ) and ( self . code == other . code )
example# 6796
@ deconstructible
def dummy(): pass
example# 6797
class MaxValueValidator ( BaseValidator ) :pass
example# 6798
compare = lambda self , a , b : a > b
example# 6799
message = _ ( '_STR:0_' )
example# 6800
code = '_STR:0_'
example# 6801
@ deconstructible
def dummy(): pass
example# 6802
class MinValueValidator ( BaseValidator ) :pass
example# 6803
compare = lambda self , a , b : a < b
example# 6804
message = _ ( '_STR:0_' )
example# 6805
code = '_STR:0_'
example# 6806
@ deconstructible
def dummy(): pass
example# 6807
class MinLengthValidator ( BaseValidator ) :pass
example# 6808
compare = lambda self , a , b : a < b
example# 6809
clean = lambda self , x : len ( x )
example# 6810
message = ungettext_lazy (  'Ensure this value has at least %(limit_value)d character (it has %(show_value)d).' ,  'Ensure this value has at least %(limit_value)d characters (it has %(show_value)d).' ,  'limit_value' )
example# 6811
code = '_STR:2_'
example# 6812
@ deconstructible
def dummy(): pass
example# 6813
class MaxLengthValidator ( BaseValidator ) :pass
example# 6814
compare = lambda self , a , b : a > b
example# 6815
clean = lambda self , x : len ( x )
example# 6816
message = ungettext_lazy (  'Ensure this value has at most %(limit_value)d character (it has %(show_value)d).' ,  'Ensure this value has at most %(limit_value)d characters (it has %(show_value)d).' ,  'limit_value' )
example# 6817
code = '_STR:2_'
example# 6818
import django
example# 6819
from django . core . handlers . wsgi import WSGIHandler
example# 6820
def get_wsgi_application ( ) :pass
example# 6821
django . setup ( )
example# 6822
return WSGIHandler ( )
example# 6823
from django . core . exceptions import ValidationError
example# 6824
from django . forms . fields import *
example# 6825
from django . forms . forms import *
example# 6826
from django . forms . formsets import *
example# 6827
from django . forms . models import *
example# 6828
from django . forms . widgets import *
example# 6829
from django . forms . extras . widgets import SelectDateWidget
example# 6830
__all__ = [ '_STR:0_' ]
example# 6831
from __future__ import unicode_literals
example# 6832
import datetime
example# 6833
import re
example# 6834
from django . forms . widgets import Widget , Select
example# 6835
from django . utils import datetime_safe
example# 6836
from django . utils . dates import MONTHS
example# 6837
from django . utils . encoding import force_str
example# 6838
from django . utils . safestring import mark_safe
example# 6839
from django . utils . formats import get_format
example# 6840
from django . utils import six
example# 6841
from django . conf import settings
example# 6842
__all__ = ( '_STR:0_' , )
example# 6843
RE_DATE = re . compile ( r'_STR:0_' )
example# 6844
def _parse_date_fmt ( ) :pass
example# 6845
fmt = get_format ( '_STR:0_' )
example# 6846
escaped = False
example# 6847
for char in fmt :pass
example# 6848
if escaped :pass
example# 6849
escaped = False
example# 6850
if True: pass
elif char == '\\' :pass
example# 6851
escaped = True
example# 6852
if True: pass
elif char in '_STR:0_' :pass
example# 6853
yield '_STR:0_'
example# 6854
if True: pass
elif char in '_STR:0_' :pass
example# 6855
yield '_STR:0_'
example# 6856
if True: pass
elif char in '_STR:0_' :pass
example# 6857
yield '_STR:0_'
example# 6858
class SelectDateWidget ( Widget ) :pass
example# 6859
none_value = ( 0 , '_STR:0_' )
example# 6860
month_field = '_STR:0_'
example# 6861
day_field = '_STR:0_'
example# 6862
year_field = '_STR:0_'
example# 6863
def __init__ ( self , attrs = None , years = None , months = None , empty_label = None ) :pass
example# 6864
self . attrs = attrs or { }
example# 6865
if years :pass
example# 6866
self . years = years
example# 6867
if True: pass
else :pass
example# 6868
this_year = datetime . date . today ( ) . year
example# 6869
self . years = range ( this_year , this_year + 10 )
example# 6870
if months :pass
example# 6871
self . months = months
example# 6872
if True: pass
else :pass
example# 6873
self . months = MONTHS
example# 6874
if isinstance ( empty_label , ( list , tuple ) ) :pass
example# 6875
if not len ( empty_label ) == 3 :pass
example# 6876
raise ValueError ( '_STR:0_' )
example# 6877
self . year_none_value = ( 0 , empty_label [ 0 ] )
example# 6878
self . month_none_value = ( 0 , empty_label [ 1 ] )
example# 6879
self . day_none_value = ( 0 , empty_label [ 2 ] )
example# 6880
if True: pass
else :pass
example# 6881
if empty_label is not None :pass
example# 6882
self . none_value = ( 0 , empty_label )
example# 6883
self . year_none_value = self . none_value
example# 6884
self . month_none_value = self . none_value
example# 6885
self . day_none_value = self . none_value
example# 6886
def render ( self , name , value , attrs = None ) :pass
example# 6887
try :pass
except: pass
example# 6888
year_val , month_val , day_val = value . year , value . month , value . day
example# 6889
try: pass
except AttributeError :pass
example# 6890
year_val = month_val = day_val = None
example# 6891
if isinstance ( value , six . string_types ) :pass
example# 6892
if settings . USE_L10N :pass
example# 6893
try :pass
except: pass
example# 6894
input_format = get_format ( '_STR:0_' ) [ 0 ]
example# 6895
v = datetime . datetime . strptime ( force_str ( value ) , input_format )
example# 6896
year_val , month_val , day_val = v . year , v . month , v . day
example# 6897
try: pass
except ValueError :pass
example# 6898
pass
example# 6899
if True: pass
else :pass
example# 6900
match = RE_DATE . match ( value )
example# 6901
if match :pass
example# 6902
year_val , month_val , day_val = [ int ( v ) for v in match . groups ( ) ]
example# 6903
html = { }
example# 6904
choices = [ ( i , i ) for i in self . years ]
example# 6905
html [ 'year' ] = self . create_select ( name , self . year_field , value , year_val , choices , self . year_none_value )
example# 6906
choices = list ( six . iteritems ( self . months ) )
example# 6907
html [ 'month' ] = self . create_select ( name , self . month_field , value , month_val , choices , self . month_none_value )
example# 6908
choices = [ ( i , i ) for i in range ( 1 , 32 ) ]
example# 6909
html [ 'day' ] = self . create_select ( name , self . day_field , value , day_val , choices , self . day_none_value )
example# 6910
output = [ ]
example# 6911
for field in _parse_date_fmt ( ) :pass
example# 6912
output . append ( html [ field ] )
example# 6913
return mark_safe ( '\n' . join ( output ) )
example# 6914
def id_for_label ( self , id_ ) :pass
example# 6915
for first_select in _parse_date_fmt ( ) :pass
example# 6916
return '_STR:0_' % ( id_ , first_select )
example# 6917
if True: pass
else :pass
example# 6918
return '%s_month' % id_
example# 6919
def value_from_datadict ( self , data , files , name ) :pass
example# 6920
y = data . get ( self . year_field % name )
example# 6921
m = data . get ( self . month_field % name )
example# 6922
d = data . get ( self . day_field % name )
example# 6923
if y == m == d == "0" :pass
example# 6924
return None
example# 6925
if y and m and d :pass
example# 6926
if settings . USE_L10N :pass
example# 6927
input_format = get_format ( '_STR:0_' ) [ 0 ]
example# 6928
try :pass
except: pass
example# 6929
date_value = datetime . date ( int ( y ) , int ( m ) , int ( d ) )
example# 6930
try: pass
except ValueError :pass
example# 6931
return '_STR:0_' % ( y , m , d )
example# 6932
if True: pass
else :pass
example# 6933
date_value = datetime_safe . new_date ( date_value )
example# 6934
return date_value . strftime ( input_format )
example# 6935
if True: pass
else :pass
example# 6936
return '_STR:0_' % ( y , m , d )
example# 6937
return data . get ( name , None )
example# 6938
def create_select ( self , name , field , value , val , choices , none_value ) :pass
example# 6939
if '_STR:0_' in self . attrs :pass
example# 6940
id_ = self . attrs [ '_STR:0_' ]
example# 6941
if True: pass
else :pass
example# 6942
id_ = '_STR:0_' % name
example# 6943
if not self . is_required :pass
example# 6944
choices . insert ( 0 , none_value )
example# 6945
local_attrs = self . build_attrs ( id = field % id_ )
example# 6946
s = Select ( choices = choices )
example# 6947
select_html = s . render ( field % name , val , local_attrs )
example# 6948
return select_html
example# 6949
from __future__ import unicode_literals
example# 6950
import copy
example# 6951
import datetime
example# 6952
import os
example# 6953
import re
example# 6954
import sys
example# 6955
import warnings
example# 6956
from decimal import Decimal , DecimalException
example# 6957
from io import BytesIO
example# 6958
from django . core import validators
example# 6959
from django . core . exceptions import ValidationError
example# 6960
from django . forms . utils import from_current_timezone , to_current_timezone
example# 6961
from django . forms . widgets import (  TextInput , NumberInput , EmailInput , URLInput , HiddenInput ,  MultipleHiddenInput , ClearableFileInput , CheckboxInput , Select ,  NullBooleanSelect , SelectMultiple , DateInput , DateTimeInput , TimeInput ,  SplitDateTimeWidget , SplitHiddenDateTimeWidget , FILE_INPUT_CONTRADICTION  )
example# 6962
from django . utils import formats
example# 6963
from django . utils . encoding import smart_text , force_str , force_text
example# 6964
from django . utils . ipv6 import clean_ipv6_address
example# 6965
from django . utils . deprecation import RemovedInDjango19Warning
example# 6966
from django . utils import six
example# 6967
from django . utils . six . moves . urllib . parse import urlsplit , urlunsplit
example# 6968
from django . utils . translation import ugettext_lazy as _ , ungettext_lazy
example# 6969
from django . core . validators import EMPTY_VALUES
example# 6970
__all__ = (  '_STR:0_' , '_STR:1_' , '_STR:2_' ,  '_STR:3_' , '_STR:4_' , '_STR:5_' ,  '_STR:6_' , 'EmailField' , 'FileField' , 'ImageField' , 'URLField' ,  'BooleanField' , 'NullBooleanField' , 'ChoiceField' , 'MultipleChoiceField' ,  'ComboField' , 'MultiValueField' , 'FloatField' , 'DecimalField' ,  'SplitDateTimeField' , 'IPAddressField' , 'GenericIPAddressField' , 'FilePathField' ,  'SlugField' , 'TypedChoiceField' , 'TypedMultipleChoiceField'  )
example# 6971
class Field ( object ) :pass
example# 6972
widget = TextInput
example# 6973
hidden_widget = HiddenInput
example# 6974
default_validators = [ ]
example# 6975
default_error_messages = {  '_STR:1_' : _ ( '_STR:0_' ) ,  }
example# 6976
empty_values = list ( validators . EMPTY_VALUES )
example# 6977
creation_counter = 0
example# 6978
def __init__ ( self , required = True , widget = None , label = None , initial = None ,  help_text = '' , error_messages = None , show_hidden_initial = False ,  validators = [ ] , localize = False , label_suffix = None ) :pass
example# 6979
self . required , self . label , self . initial = required , label , initial
example# 6980
self . show_hidden_initial = show_hidden_initial
example# 6981
self . help_text = help_text
example# 6982
self . label_suffix = label_suffix
example# 6983
widget = widget or self . widget
example# 6984
if isinstance ( widget , type ) :pass
example# 6985
widget = widget ( )
example# 6986
self . localize = localize
example# 6987
if self . localize :pass
example# 6988
widget . is_localized = True
example# 6989
widget . is_required = self . required
example# 6990
extra_attrs = self . widget_attrs ( widget )
example# 6991
if extra_attrs :pass
example# 6992
widget . attrs . update ( extra_attrs )
example# 6993
self . widget = widget
example# 6994
self . creation_counter = Field . creation_counter
example# 6995
Field . creation_counter += 1
example# 6996
messages = { }
example# 6997
for c in reversed ( self . __class__ . __mro__ ) :pass
example# 6998
messages . update ( getattr ( c , '_STR:0_' , { } ) )
example# 6999
messages . update ( error_messages or { } )
example# 7000
self . error_messages = messages
example# 7001
self . validators = self . default_validators + validators
example# 7002
super ( Field , self ) . __init__ ( )
example# 7003
def prepare_value ( self , value ) :pass
example# 7004
return value
example# 7005
def to_python ( self , value ) :pass
example# 7006
return value
example# 7007
def validate ( self , value ) :pass
example# 7008
if value in self . empty_values and self . required :pass
example# 7009
raise ValidationError ( self . error_messages [ '_STR:0_' ] , code = '_STR:0_' )
example# 7010
def run_validators ( self , value ) :pass
example# 7011
if value in self . empty_values :pass
example# 7012
return
example# 7013
errors = [ ]
example# 7014
for v in self . validators :pass
example# 7015
try :pass
except: pass
example# 7016
v ( value )
example# 7017
try: pass
except ValidationError as e :pass
example# 7018
if hasattr ( e , '_STR:0_' ) and e . code in self . error_messages :pass
example# 7019
e . message = self . error_messages [ e . code ]
example# 7020
errors . extend ( e . error_list )
example# 7021
if errors :pass
example# 7022
raise ValidationError ( errors )
example# 7023
def clean ( self , value ) :pass
example# 7024
value = self . to_python ( value )
example# 7025
self . validate ( value )
example# 7026
self . run_validators ( value )
example# 7027
return value
example# 7028
def bound_data ( self , data , initial ) :pass
example# 7029
return data
example# 7030
def widget_attrs ( self , widget ) :pass
example# 7031
return { }
example# 7032
def get_limit_choices_to ( self ) :pass
example# 7033
if callable ( self . limit_choices_to ) :pass
example# 7034
return self . limit_choices_to ( )
example# 7035
return self . limit_choices_to
example# 7036
def _has_changed ( self , initial , data ) :pass
example# 7037
initial_value = initial if initial is not None else ''
example# 7038
try :pass
except: pass
example# 7039
data = self . to_python ( data )
example# 7040
if hasattr ( self , '_STR:0_' ) :pass
example# 7041
data = self . _coerce ( data )
example# 7042
try: pass
except ValidationError :pass
example# 7043
return True
example# 7044
data_value = data if data is not None else ''
example# 7045
return initial_value != data_value
example# 7046
def __deepcopy__ ( self , memo ) :pass
example# 7047
result = copy . copy ( self )
example# 7048
memo [ id ( self ) ] = result
example# 7049
result . widget = copy . deepcopy ( self . widget , memo )
example# 7050
result . validators = self . validators [ : ]
example# 7051
return result
example# 7052
class CharField ( Field ) :pass
example# 7053
def __init__ ( self , max_length = None , min_length = None , * args , ** kwargs ) :pass
example# 7054
self . max_length , self . min_length = max_length , min_length
example# 7055
super ( CharField , self ) . __init__ ( * args , ** kwargs )
example# 7056
if min_length is not None :pass
example# 7057
self . validators . append ( validators . MinLengthValidator ( int ( min_length ) ) )
example# 7058
if max_length is not None :pass
example# 7059
self . validators . append ( validators . MaxLengthValidator ( int ( max_length ) ) )
example# 7060
def to_python ( self , value ) :pass
example# 7061
if value in self . empty_values :pass
example# 7062
return ''
example# 7063
return smart_text ( value )
example# 7064
def widget_attrs ( self , widget ) :pass
example# 7065
attrs = super ( CharField , self ) . widget_attrs ( widget )
example# 7066
if self . max_length is not None :pass
example# 7067
attrs . update ( { '_STR:0_' : str ( self . max_length ) } )
example# 7068
return attrs
example# 7069
class IntegerField ( Field ) :pass
example# 7070
widget = NumberInput
example# 7071
default_error_messages = {  'invalid' : _ ( 'Enter a whole number.' ) ,  }
example# 7072
def __init__ ( self , max_value = None , min_value = None , * args , ** kwargs ) :pass
example# 7073
self . max_value , self . min_value = max_value , min_value
example# 7074
if kwargs . get ( '_STR:0_' ) and self . widget == NumberInput :pass
example# 7075
kwargs . setdefault ( '_STR:0_' , super ( IntegerField , self ) . widget )
example# 7076
super ( IntegerField , self ) . __init__ ( * args , ** kwargs )
example# 7077
if max_value is not None :pass
example# 7078
self . validators . append ( validators . MaxValueValidator ( max_value ) )
example# 7079
if min_value is not None :pass
example# 7080
self . validators . append ( validators . MinValueValidator ( min_value ) )
example# 7081
def to_python ( self , value ) :pass
example# 7082
value = super ( IntegerField , self ) . to_python ( value )
example# 7083
if value in self . empty_values :pass
example# 7084
return None
example# 7085
if self . localize :pass
example# 7086
value = formats . sanitize_separators ( value )
example# 7087
try :pass
except: pass
example# 7088
value = int ( str ( value ) )
example# 7089
try: pass
except ( ValueError , TypeError ) :pass
example# 7090
raise ValidationError ( self . error_messages [ '_STR:0_' ] , code = '_STR:0_' )
example# 7091
return value
example# 7092
def widget_attrs ( self , widget ) :pass
example# 7093
attrs = super ( IntegerField , self ) . widget_attrs ( widget )
example# 7094
if isinstance ( widget , NumberInput ) :pass
example# 7095
if self . min_value is not None :pass
example# 7096
attrs [ '_STR:0_' ] = self . min_value
example# 7097
if self . max_value is not None :pass
example# 7098
attrs [ '_STR:0_' ] = self . max_value
example# 7099
return attrs
example# 7100
class FloatField ( IntegerField ) :pass
example# 7101
default_error_messages = {  'invalid' : _ ( 'Enter a number.' ) ,  }
example# 7102
def to_python ( self , value ) :pass
example# 7103
value = super ( IntegerField , self ) . to_python ( value )
example# 7104
if value in self . empty_values :pass
example# 7105
return None
example# 7106
if self . localize :pass
example# 7107
value = formats . sanitize_separators ( value )
example# 7108
try :pass
except: pass
example# 7109
value = float ( value )
example# 7110
try: pass
except ( ValueError , TypeError ) :pass
example# 7111
raise ValidationError ( self . error_messages [ '_STR:0_' ] , code = '_STR:0_' )
example# 7112
return value
example# 7113
def validate ( self , value ) :pass
example# 7114
super ( FloatField , self ) . validate ( value )
example# 7115
if value != value or value in ( Decimal ( '_STR:0_' ) , Decimal ( '_STR:1_' ) ) :pass
example# 7116
raise ValidationError ( self . error_messages [ '_STR:0_' ] , code = '_STR:0_' )
example# 7117
return value
example# 7118
def widget_attrs ( self , widget ) :pass
example# 7119
attrs = super ( FloatField , self ) . widget_attrs ( widget )
example# 7120
if isinstance ( widget , NumberInput ) and '_STR:0_' not in widget . attrs :pass
example# 7121
attrs . setdefault ( '_STR:0_' , '_STR:1_' )
example# 7122
return attrs
example# 7123
class DecimalField ( IntegerField ) :pass
example# 7124
default_error_messages = {  'invalid' : _ ( 'Enter a number.' ) ,  'max_digits' : ungettext_lazy (  'Ensure that there are no more than %(max)s digit in total.' ,  'Ensure that there are no more than %(max)s digits in total.' ,  'max' ) ,  'max_decimal_places' : ungettext_lazy (  'Ensure that there are no more than %(max)s decimal place.' ,  'Ensure that there are no more than %(max)s decimal places.' ,  'max' ) ,  'max_whole_digits' : ungettext_lazy (  'Ensure that there are no more than %(max)s digit before the decimal point.' ,  'Ensure that there are no more than %(max)s digits before the decimal point.' ,  'max' ) ,  }
example# 7125
def __init__ ( self , max_value = None , min_value = None , max_digits = None , decimal_places = None , * args , ** kwargs ) :pass
example# 7126
self . max_digits , self . decimal_places = max_digits , decimal_places
example# 7127
super ( DecimalField , self ) . __init__ ( max_value , min_value , * args , ** kwargs )
example# 7128
def to_python ( self , value ) :pass
example# 7129
if value in self . empty_values :pass
example# 7130
return None
example# 7131
if self . localize :pass
example# 7132
value = formats . sanitize_separators ( value )
example# 7133
value = smart_text ( value ) . strip ( )
example# 7134
try :pass
except: pass
example# 7135
value = Decimal ( value )
example# 7136
try: pass
except DecimalException :pass
example# 7137
raise ValidationError ( self . error_messages [ '_STR:0_' ] , code = '_STR:0_' )
example# 7138
return value
example# 7139
def validate ( self , value ) :pass
example# 7140
super ( DecimalField , self ) . validate ( value )
example# 7141
if value in self . empty_values :pass
example# 7142
return
example# 7143
if value != value or value == Decimal ( "Inf" ) or value == Decimal ( "-Inf" ) :pass
example# 7144
raise ValidationError ( self . error_messages [ '_STR:1_' ] , code = '_STR:1_' )
example# 7145
sign , digittuple , exponent = value . as_tuple ( )
example# 7146
decimals = abs ( exponent )
example# 7147
digits = len ( digittuple )
example# 7148
if decimals > digits :pass
example# 7149
digits = decimals
example# 7150
whole_digits = digits - decimals
example# 7151
if self . max_digits is not None and digits > self . max_digits :pass
example# 7152
raise ValidationError (  self . error_messages [ '_STR:0_' ] ,  code = '_STR:0_' ,  params = { 'max' : self . max_digits } ,  )
example# 7153
if self . decimal_places is not None and decimals > self . decimal_places :pass
example# 7154
raise ValidationError (  self . error_messages [ '_STR:0_' ] ,  code = '_STR:0_' ,  params = { 'max' : self . decimal_places } ,  )
example# 7155
if ( self . max_digits is not None and self . decimal_places is not None  and whole_digits > ( self . max_digits - self . decimal_places ) ) :pass
example# 7156
raise ValidationError (  self . error_messages [ '_STR:0_' ] ,  code = '_STR:0_' ,  params = { 'max' : ( self . max_digits - self . decimal_places ) } ,  )
example# 7157
return value
example# 7158
def widget_attrs ( self , widget ) :pass
example# 7159
attrs = super ( DecimalField , self ) . widget_attrs ( widget )
example# 7160
if isinstance ( widget , NumberInput ) and '_STR:0_' not in widget . attrs :pass
example# 7161
if self . decimal_places is not None :pass
example# 7162
step = str ( Decimal ( '_STR:0_' ) / 10 ** self . decimal_places ) . lower ( )
example# 7163
if True: pass
else :pass
example# 7164
step = '_STR:0_'
example# 7165
attrs . setdefault ( '_STR:0_' , step )
example# 7166
return attrs
example# 7167
class BaseTemporalField ( Field ) :pass
example# 7168
def __init__ ( self , input_formats = None , * args , ** kwargs ) :pass
example# 7169
super ( BaseTemporalField , self ) . __init__ ( * args , ** kwargs )
example# 7170
if input_formats is not None :pass
example# 7171
self . input_formats = input_formats
example# 7172
def to_python ( self , value ) :pass
example# 7173
unicode_value = force_text ( value , strings_only = True )
example# 7174
if isinstance ( unicode_value , six . text_type ) :pass
example# 7175
value = unicode_value . strip ( )
example# 7176
if isinstance ( value , six . text_type ) :pass
example# 7177
for format in self . input_formats :pass
example# 7178
try :pass
except: pass
example# 7179
return self . strptime ( value , format )
example# 7180
try: pass
except ( ValueError , TypeError ) :pass
example# 7181
continue
example# 7182
raise ValidationError ( self . error_messages [ '_STR:0_' ] , code = '_STR:0_' )
example# 7183
def strptime ( self , value , format ) :pass
example# 7184
raise NotImplementedError ( '_STR:0_' )
example# 7185
class DateField ( BaseTemporalField ) :pass
example# 7186
widget = DateInput
example# 7187
input_formats = formats . get_format_lazy ( '_STR:0_' )
example# 7188
default_error_messages = {  '_STR:1_' : _ ( '_STR:0_' ) ,  }
example# 7189
def to_python ( self , value ) :pass
example# 7190
if value in self . empty_values :pass
example# 7191
return None
example# 7192
if isinstance ( value , datetime . datetime ) :pass
example# 7193
return value . date ( )
example# 7194
if isinstance ( value , datetime . date ) :pass
example# 7195
return value
example# 7196
return super ( DateField , self ) . to_python ( value )
example# 7197
def strptime ( self , value , format ) :pass
example# 7198
return datetime . datetime . strptime ( force_str ( value ) , format ) . date ( )
example# 7199
class TimeField ( BaseTemporalField ) :pass
example# 7200
widget = TimeInput
example# 7201
input_formats = formats . get_format_lazy ( '_STR:0_' )
example# 7202
default_error_messages = {  '_STR:1_' : _ ( '_STR:0_' )  }
example# 7203
def to_python ( self , value ) :pass
example# 7204
if value in self . empty_values :pass
example# 7205
return None
example# 7206
if isinstance ( value , datetime . time ) :pass
example# 7207
return value
example# 7208
return super ( TimeField , self ) . to_python ( value )
example# 7209
def strptime ( self , value , format ) :pass
example# 7210
return datetime . datetime . strptime ( force_str ( value ) , format ) . time ( )
example# 7211
class DateTimeField ( BaseTemporalField ) :pass
example# 7212
widget = DateTimeInput
example# 7213
input_formats = formats . get_format_lazy ( '_STR:0_' )
example# 7214
default_error_messages = {  '_STR:1_' : _ ( '_STR:0_' ) ,  }
example# 7215
def prepare_value ( self , value ) :pass
example# 7216
if isinstance ( value , datetime . datetime ) :pass
example# 7217
value = to_current_timezone ( value )
example# 7218
return value
example# 7219
def to_python ( self , value ) :pass
example# 7220
if value in self . empty_values :pass
example# 7221
return None
example# 7222
if isinstance ( value , datetime . datetime ) :pass
example# 7223
return from_current_timezone ( value )
example# 7224
if isinstance ( value , datetime . date ) :pass
example# 7225
result = datetime . datetime ( value . year , value . month , value . day )
example# 7226
return from_current_timezone ( result )
example# 7227
if isinstance ( value , list ) :pass
example# 7228
warnings . warn (  '_STR:0_'  'Use SplitDateTimeField instead.' ,  RemovedInDjango19Warning , stacklevel = 2 )
example# 7229
if len ( value ) != 2 :pass
example# 7230
raise ValidationError ( self . error_messages [ '_STR:0_' ] , code = '_STR:0_' )
example# 7231
if value [ 0 ] in self . empty_values and value [ 1 ] in self . empty_values :pass
example# 7232
return None
example# 7233
value = '_STR:0_' % tuple ( value )
example# 7234
result = super ( DateTimeField , self ) . to_python ( value )
example# 7235
return from_current_timezone ( result )
example# 7236
def strptime ( self , value , format ) :pass
example# 7237
return datetime . datetime . strptime ( force_str ( value ) , format )
example# 7238
class RegexField ( CharField ) :pass
example# 7239
def __init__ ( self , regex , max_length = None , min_length = None , error_message = None , * args , ** kwargs ) :pass
example# 7240
if error_message is not None :pass
example# 7241
error_messages = kwargs . get ( '_STR:0_' ) or { }
example# 7242
error_messages [ '_STR:0_' ] = error_message
example# 7243
kwargs [ 'error_messages' ] = error_messages
example# 7244
super ( RegexField , self ) . __init__ ( max_length , min_length , * args , ** kwargs )
example# 7245
self . _set_regex ( regex )
example# 7246
def _get_regex ( self ) :pass
example# 7247
return self . _regex
example# 7248
def _set_regex ( self , regex ) :pass
example# 7249
if isinstance ( regex , six . string_types ) :pass
example# 7250
regex = re . compile ( regex , re . UNICODE )
example# 7251
self . _regex = regex
example# 7252
if hasattr ( self , '_STR:0_' ) and self . _regex_validator in self . validators :pass
example# 7253
self . validators . remove ( self . _regex_validator )
example# 7254
self . _regex_validator = validators . RegexValidator ( regex = regex )
example# 7255
self . validators . append ( self . _regex_validator )
example# 7256
regex = property ( _get_regex , _set_regex )
example# 7257
class EmailField ( CharField ) :pass
example# 7258
widget = EmailInput
example# 7259
default_validators = [ validators . validate_email ]
example# 7260
def clean ( self , value ) :pass
example# 7261
value = self . to_python ( value ) . strip ( )
example# 7262
return super ( EmailField , self ) . clean ( value )
example# 7263
class FileField ( Field ) :pass
example# 7264
widget = ClearableFileInput
example# 7265
default_error_messages = {  'invalid' : _ ( "No file was submitted. Check the encoding type on the form." ) ,  'missing' : _ ( "No file was submitted." ) ,  'empty' : _ ( "The submitted file is empty." ) ,  'max_length' : ungettext_lazy (  'Ensure this filename has at most %(max)d character (it has %(length)d).' ,  'Ensure this filename has at most %(max)d characters (it has %(length)d).' ,  'max' ) ,  'contradiction' : _ ( 'Please either submit a file or check the clear checkbox, not both.' )  }
example# 7266
def __init__ ( self , * args , ** kwargs ) :pass
example# 7267
self . max_length = kwargs . pop ( '_STR:0_' , None )
example# 7268
self . allow_empty_file = kwargs . pop ( '_STR:0_' , False )
example# 7269
super ( FileField , self ) . __init__ ( * args , ** kwargs )
example# 7270
def to_python ( self , data ) :pass
example# 7271
if data in self . empty_values :pass
example# 7272
return None
example# 7273
try :pass
except: pass
example# 7274
file_name = data . name
example# 7275
file_size = data . size
example# 7276
try: pass
except AttributeError :pass
example# 7277
raise ValidationError ( self . error_messages [ '_STR:0_' ] , code = '_STR:0_' )
example# 7278
if self . max_length is not None and len ( file_name ) > self . max_length :pass
example# 7279
params = { '_STR:0_' : self . max_length , '_STR:1_' : len ( file_name ) }
example# 7280
raise ValidationError ( self . error_messages [ '_STR:0_' ] , code = '_STR:0_' , params = params )
example# 7281
if not file_name :pass
example# 7282
raise ValidationError ( self . error_messages [ '_STR:0_' ] , code = '_STR:0_' )
example# 7283
if not self . allow_empty_file and not file_size :pass
example# 7284
raise ValidationError ( self . error_messages [ '_STR:0_' ] , code = '_STR:0_' )
example# 7285
return data
example# 7286
def clean ( self , data , initial = None ) :pass
example# 7287
if data is FILE_INPUT_CONTRADICTION :pass
example# 7288
raise ValidationError ( self . error_messages [ '_STR:0_' ] , code = '_STR:0_' )
example# 7289
if data is False :pass
example# 7290
if not self . required :pass
example# 7291
return False
example# 7292
data = None
example# 7293
if not data and initial :pass
example# 7294
return initial
example# 7295
return super ( FileField , self ) . clean ( data )
example# 7296
def bound_data ( self , data , initial ) :pass
example# 7297
if data in ( None , FILE_INPUT_CONTRADICTION ) :pass
example# 7298
return initial
example# 7299
return data
example# 7300
def _has_changed ( self , initial , data ) :pass
example# 7301
if data is None :pass
example# 7302
return False
example# 7303
return True
example# 7304
class ImageField ( FileField ) :pass
example# 7305
default_error_messages = {  'invalid_image' : _ ( "Upload a valid image. The file you uploaded was either not an image or a corrupted image." ) ,  }
example# 7306
def to_python ( self , data ) :pass
example# 7307
f = super ( ImageField , self ) . to_python ( data )
example# 7308
if f is None :pass
example# 7309
return None
example# 7310
from PIL import Image
example# 7311
if hasattr ( data , '_STR:0_' ) :pass
example# 7312
file = data . temporary_file_path ( )
example# 7313
if True: pass
else :pass
example# 7314
if hasattr ( data , '_STR:0_' ) :pass
example# 7315
file = BytesIO ( data . read ( ) )
example# 7316
if True: pass
else :pass
example# 7317
file = BytesIO ( data [ '_STR:0_' ] )
example# 7318
try :pass
except: pass
example# 7319
Image . open ( file ) . verify ( )
example# 7320
try: pass
except Exception :pass
example# 7321
six . reraise ( ValidationError , ValidationError (  self . error_messages [ 'invalid_image' ] ,  code = 'invalid_image' ,  ) , sys . exc_info ( ) [ 2 ] )
example# 7322
if hasattr ( f , '_STR:1_' ) and callable ( f . seek ) :pass
example# 7323
f . seek ( 0 )
example# 7324
return f
example# 7325
class URLField ( CharField ) :pass
example# 7326
widget = URLInput
example# 7327
default_error_messages = {  '_STR:1_' : _ ( '_STR:0_' ) ,  }
example# 7328
default_validators = [ validators . URLValidator ( ) ]
example# 7329
def to_python ( self , value ) :pass
example# 7330
def split_url ( url ) :pass
example# 7331
try :pass
except: pass
example# 7332
return list ( urlsplit ( url ) )
example# 7333
try: pass
except ValueError :pass
example# 7334
raise ValidationError ( self . error_messages [ '_STR:0_' ] , code = '_STR:0_' )
example# 7335
value = super ( URLField , self ) . to_python ( value )
example# 7336
if value :pass
example# 7337
url_fields = split_url ( value )
example# 7338
if not url_fields [ 0 ] :pass
example# 7339
url_fields [ 0 ] = '_STR:0_'
example# 7340
if not url_fields [ 1 ] :pass
example# 7341
url_fields [ 1 ] = url_fields [ 2 ]
example# 7342
url_fields [ 2 ] = ''
example# 7343
url_fields = split_url ( urlunsplit ( url_fields ) )
example# 7344
value = urlunsplit ( url_fields )
example# 7345
return value
example# 7346
def clean ( self , value ) :pass
example# 7347
value = self . to_python ( value ) . strip ( )
example# 7348
return super ( URLField , self ) . clean ( value )
example# 7349
class BooleanField ( Field ) :pass
example# 7350
widget = CheckboxInput
example# 7351
def to_python ( self , value ) :pass
example# 7352
if isinstance ( value , six . string_types ) and value . lower ( ) in ( '_STR:0_' , '_STR:1_' ) :pass
example# 7353
value = False
example# 7354
if True: pass
else :pass
example# 7355
value = bool ( value )
example# 7356
return super ( BooleanField , self ) . to_python ( value )
example# 7357
def validate ( self , value ) :pass
example# 7358
if not value and self . required :pass
example# 7359
raise ValidationError ( self . error_messages [ '_STR:0_' ] , code = '_STR:0_' )
example# 7360
def _has_changed ( self , initial , data ) :pass
example# 7361
if initial == '_STR:0_' :pass
example# 7362
initial = False
example# 7363
return bool ( initial ) != bool ( data )
example# 7364
class NullBooleanField ( BooleanField ) :pass
example# 7365
widget = NullBooleanSelect
example# 7366
def to_python ( self , value ) :pass
example# 7367
if value in ( True , '_STR:0_' , '_STR:1_' ) :pass
example# 7368
return True
example# 7369
if True: pass
elif value in ( False , '_STR:0_' , '_STR:1_' ) :pass
example# 7370
return False
example# 7371
if True: pass
else :pass
example# 7372
return None
example# 7373
def validate ( self , value ) :pass
example# 7374
pass
example# 7375
def _has_changed ( self , initial , data ) :pass
example# 7376
if initial is not None :pass
example# 7377
initial = bool ( initial )
example# 7378
if data is not None :pass
example# 7379
data = bool ( data )
example# 7380
return initial != data
example# 7381
class ChoiceField ( Field ) :pass
example# 7382
widget = Select
example# 7383
default_error_messages = {  'invalid_choice' : _ ( 'Select a valid choice. %(value)s is not one of the available choices.' ) ,  }
example# 7384
def __init__ ( self , choices = ( ) , required = True , widget = None , label = None ,  initial = None , help_text = '' , * args , ** kwargs ) :pass
example# 7385
super ( ChoiceField , self ) . __init__ ( required = required , widget = widget , label = label ,  initial = initial , help_text = help_text , * args , ** kwargs )
example# 7386
self . choices = choices
example# 7387
def __deepcopy__ ( self , memo ) :pass
example# 7388
result = super ( ChoiceField , self ) . __deepcopy__ ( memo )
example# 7389
result . _choices = copy . deepcopy ( self . _choices , memo )
example# 7390
return result
example# 7391
def _get_choices ( self ) :pass
example# 7392
return self . _choices
example# 7393
def _set_choices ( self , value ) :pass
example# 7394
self . _choices = self . widget . choices = list ( value )
example# 7395
choices = property ( _get_choices , _set_choices )
example# 7396
def to_python ( self , value ) :pass
example# 7397
if value in self . empty_values :pass
example# 7398
return ''
example# 7399
return smart_text ( value )
example# 7400
def validate ( self , value ) :pass
example# 7401
super ( ChoiceField , self ) . validate ( value )
example# 7402
if value and not self . valid_value ( value ) :pass
example# 7403
raise ValidationError (  self . error_messages [ '_STR:0_' ] ,  code = '_STR:0_' ,  params = { 'value' : value } ,  )
example# 7404
def valid_value ( self , value ) :pass
example# 7405
text_value = force_text ( value )
example# 7406
for k , v in self . choices :pass
example# 7407
if isinstance ( v , ( list , tuple ) ) :pass
example# 7408
for k2 , v2 in v :pass
example# 7409
if value == k2 or text_value == force_text ( k2 ) :pass
example# 7410
return True
example# 7411
if True: pass
else :pass
example# 7412
if value == k or text_value == force_text ( k ) :pass
example# 7413
return True
example# 7414
return False
example# 7415
class TypedChoiceField ( ChoiceField ) :pass
example# 7416
def __init__ ( self , * args , ** kwargs ) :pass
example# 7417
self . coerce = kwargs . pop ( '_STR:0_' , lambda val : val )
example# 7418
self . empty_value = kwargs . pop ( '_STR:0_' , '' )
example# 7419
super ( TypedChoiceField , self ) . __init__ ( * args , ** kwargs )
example# 7420
def _coerce ( self , value ) :pass
example# 7421
if value == self . empty_value or value in self . empty_values :pass
example# 7422
return self . empty_value
example# 7423
try :pass
except: pass
example# 7424
value = self . coerce ( value )
example# 7425
try: pass
except ( ValueError , TypeError , ValidationError ) :pass
example# 7426
raise ValidationError (  self . error_messages [ '_STR:0_' ] ,  code = '_STR:0_' ,  params = { 'value' : value } ,  )
example# 7427
return value
example# 7428
def clean ( self , value ) :pass
example# 7429
value = super ( TypedChoiceField , self ) . clean ( value )
example# 7430
return self . _coerce ( value )
example# 7431
class MultipleChoiceField ( ChoiceField ) :pass
example# 7432
hidden_widget = MultipleHiddenInput
example# 7433
widget = SelectMultiple
example# 7434
default_error_messages = {  'invalid_choice' : _ ( 'Select a valid choice. %(value)s is not one of the available choices.' ) ,  'invalid_list' : _ ( 'Enter a list of values.' ) ,  }
example# 7435
def to_python ( self , value ) :pass
example# 7436
if not value :pass
example# 7437
return [ ]
example# 7438
if True: pass
elif not isinstance ( value , ( list , tuple ) ) :pass
example# 7439
raise ValidationError ( self . error_messages [ '_STR:0_' ] , code = '_STR:0_' )
example# 7440
return [ smart_text ( val ) for val in value ]
example# 7441
def validate ( self , value ) :pass
example# 7442
if self . required and not value :pass
example# 7443
raise ValidationError ( self . error_messages [ '_STR:0_' ] , code = '_STR:0_' )
example# 7444
for val in value :pass
example# 7445
if not self . valid_value ( val ) :pass
example# 7446
raise ValidationError (  self . error_messages [ '_STR:0_' ] ,  code = '_STR:0_' ,  params = { 'value' : val } ,  )
example# 7447
def _has_changed ( self , initial , data ) :pass
example# 7448
if initial is None :pass
example# 7449
initial = [ ]
example# 7450
if data is None :pass
example# 7451
data = [ ]
example# 7452
if len ( initial ) != len ( data ) :pass
example# 7453
return True
example# 7454
initial_set = set ( force_text ( value ) for value in initial )
example# 7455
data_set = set ( force_text ( value ) for value in data )
example# 7456
return data_set != initial_set
example# 7457
class TypedMultipleChoiceField ( MultipleChoiceField ) :pass
example# 7458
def __init__ ( self , * args , ** kwargs ) :pass
example# 7459
self . coerce = kwargs . pop ( '_STR:0_' , lambda val : val )
example# 7460
self . empty_value = kwargs . pop ( '_STR:0_' , [ ] )
example# 7461
super ( TypedMultipleChoiceField , self ) . __init__ ( * args , ** kwargs )
example# 7462
def _coerce ( self , value ) :pass
example# 7463
if value == self . empty_value or value in self . empty_values :pass
example# 7464
return self . empty_value
example# 7465
new_value = [ ]
example# 7466
for choice in value :pass
example# 7467
try :pass
except: pass
example# 7468
new_value . append ( self . coerce ( choice ) )
example# 7469
try: pass
except ( ValueError , TypeError , ValidationError ) :pass
example# 7470
raise ValidationError (  self . error_messages [ '_STR:0_' ] ,  code = '_STR:0_' ,  params = { 'value' : choice } ,  )
example# 7471
return new_value
example# 7472
def clean ( self , value ) :pass
example# 7473
value = super ( TypedMultipleChoiceField , self ) . clean ( value )
example# 7474
return self . _coerce ( value )
example# 7475
def validate ( self , value ) :pass
example# 7476
if value != self . empty_value :pass
example# 7477
super ( TypedMultipleChoiceField , self ) . validate ( value )
example# 7478
if True: pass
elif self . required :pass
example# 7479
raise ValidationError ( self . error_messages [ '_STR:0_' ] , code = '_STR:0_' )
example# 7480
class ComboField ( Field ) :pass
example# 7481
def __init__ ( self , fields = ( ) , * args , ** kwargs ) :pass
example# 7482
super ( ComboField , self ) . __init__ ( * args , ** kwargs )
example# 7483
for f in fields :pass
example# 7484
f . required = False
example# 7485
self . fields = fields
example# 7486
def clean ( self , value ) :pass
example# 7487
super ( ComboField , self ) . clean ( value )
example# 7488
for field in self . fields :pass
example# 7489
value = field . clean ( value )
example# 7490
return value
example# 7491
class MultiValueField ( Field ) :pass
example# 7492
default_error_messages = {  'invalid' : _ ( 'Enter a list of values.' ) ,  'incomplete' : _ ( 'Enter a complete value.' ) ,  }
example# 7493
def __init__ ( self , fields = ( ) , * args , ** kwargs ) :pass
example# 7494
self . require_all_fields = kwargs . pop ( '_STR:0_' , True )
example# 7495
super ( MultiValueField , self ) . __init__ ( * args , ** kwargs )
example# 7496
for f in fields :pass
example# 7497
f . error_messages . setdefault ( '_STR:0_' ,  self . error_messages [ '_STR:0_' ] )
example# 7498
if self . require_all_fields :pass
example# 7499
f . required = False
example# 7500
self . fields = fields
example# 7501
def __deepcopy__ ( self , memo ) :pass
example# 7502
result = super ( MultiValueField , self ) . __deepcopy__ ( memo )
example# 7503
result . fields = tuple ( [ x . __deepcopy__ ( memo ) for x in self . fields ] )
example# 7504
return result
example# 7505
def validate ( self , value ) :pass
example# 7506
pass
example# 7507
def clean ( self , value ) :pass
example# 7508
clean_data = [ ]
example# 7509
errors = [ ]
example# 7510
if not value or isinstance ( value , ( list , tuple ) ) :pass
example# 7511
if not value or not [ v for v in value if v not in self . empty_values ] :pass
example# 7512
if self . required :pass
example# 7513
raise ValidationError ( self . error_messages [ '_STR:0_' ] , code = '_STR:0_' )
example# 7514
if True: pass
else :pass
example# 7515
return self . compress ( [ ] )
example# 7516
if True: pass
else :pass
example# 7517
raise ValidationError ( self . error_messages [ '_STR:0_' ] , code = '_STR:0_' )
example# 7518
for i , field in enumerate ( self . fields ) :pass
example# 7519
try :pass
except: pass
example# 7520
field_value = value [ i ]
example# 7521
try: pass
except IndexError :pass
example# 7522
field_value = None
example# 7523
if field_value in self . empty_values :pass
example# 7524
if self . require_all_fields :pass
example# 7525
if self . required :pass
example# 7526
raise ValidationError ( self . error_messages [ '_STR:0_' ] , code = '_STR:0_' )
example# 7527
if True: pass
elif field . required :pass
example# 7528
if field . error_messages [ '_STR:0_' ] not in errors :pass
example# 7529
errors . append ( field . error_messages [ '_STR:0_' ] )
example# 7530
continue
example# 7531
try :pass
except: pass
example# 7532
clean_data . append ( field . clean ( field_value ) )
example# 7533
try: pass
except ValidationError as e :pass
example# 7534
errors . extend ( m for m in e . error_list if m not in errors )
example# 7535
if errors :pass
example# 7536
raise ValidationError ( errors )
example# 7537
out = self . compress ( clean_data )
example# 7538
self . validate ( out )
example# 7539
self . run_validators ( out )
example# 7540
return out
example# 7541
def compress ( self , data_list ) :pass
example# 7542
raise NotImplementedError ( '_STR:0_' )
example# 7543
def _has_changed ( self , initial , data ) :pass
example# 7544
if initial is None :pass
example# 7545
initial = [ '' for x in range ( 0 , len ( data ) ) ]
example# 7546
if True: pass
else :pass
example# 7547
if not isinstance ( initial , list ) :pass
example# 7548
initial = self . widget . decompress ( initial )
example# 7549
for field , initial , data in zip ( self . fields , initial , data ) :pass
example# 7550
if field . _has_changed ( field . to_python ( initial ) , data ) :pass
example# 7551
return True
example# 7552
return False
example# 7553
class FilePathField ( ChoiceField ) :pass
example# 7554
def __init__ ( self , path , match = None , recursive = False , allow_files = True ,  allow_folders = False , required = True , widget = None , label = None ,  initial = None , help_text = '' , * args , ** kwargs ) :pass
example# 7555
self . path , self . match , self . recursive = path , match , recursive
example# 7556
self . allow_files , self . allow_folders = allow_files , allow_folders
example# 7557
super ( FilePathField , self ) . __init__ ( choices = ( ) , required = required ,  widget = widget , label = label , initial = initial , help_text = help_text ,  * args , ** kwargs )
example# 7558
if self . required :pass
example# 7559
self . choices = [ ]
example# 7560
if True: pass
else :pass
example# 7561
self . choices = [ ( "" , '_STR:0_' ) ]
example# 7562
if self . match is not None :pass
example# 7563
self . match_re = re . compile ( self . match )
example# 7564
if recursive :pass
example# 7565
for root , dirs , files in sorted ( os . walk ( self . path ) ) :pass
example# 7566
if self . allow_files :pass
example# 7567
for f in files :pass
example# 7568
if self . match is None or self . match_re . search ( f ) :pass
example# 7569
f = os . path . join ( root , f )
example# 7570
self . choices . append ( ( f , f . replace ( path , "" , 1 ) ) )
example# 7571
if self . allow_folders :pass
example# 7572
for f in dirs :pass
example# 7573
if f == '_STR:0_' :pass
example# 7574
continue
example# 7575
if self . match is None or self . match_re . search ( f ) :pass
example# 7576
f = os . path . join ( root , f )
example# 7577
self . choices . append ( ( f , f . replace ( path , "" , 1 ) ) )
example# 7578
if True: pass
else :pass
example# 7579
try :pass
except: pass
example# 7580
for f in sorted ( os . listdir ( self . path ) ) :pass
example# 7581
if f == '_STR:0_' :pass
example# 7582
continue
example# 7583
full_file = os . path . join ( self . path , f )
example# 7584
if ( ( ( self . allow_files and os . path . isfile ( full_file ) ) or  ( self . allow_folders and os . path . isdir ( full_file ) ) ) and  ( self . match is None or self . match_re . search ( f ) ) ) :pass
example# 7585
self . choices . append ( ( full_file , f ) )
example# 7586
try: pass
except OSError :pass
example# 7587
pass
example# 7588
self . widget . choices = self . choices
example# 7589
class SplitDateTimeField ( MultiValueField ) :pass
example# 7590
widget = SplitDateTimeWidget
example# 7591
hidden_widget = SplitHiddenDateTimeWidget
example# 7592
default_error_messages = {  'invalid_date' : _ ( '_STR:0_' ) ,  'invalid_time' : _ ( 'Enter a valid time.' ) ,  }
example# 7593
def __init__ ( self , input_date_formats = None , input_time_formats = None , * args , ** kwargs ) :pass
example# 7594
errors = self . default_error_messages . copy ( )
example# 7595
if '_STR:0_' in kwargs :pass
example# 7596
errors . update ( kwargs [ '_STR:0_' ] )
example# 7597
localize = kwargs . get ( '_STR:0_' , False )
example# 7598
fields = (  DateField ( input_formats = input_date_formats ,  error_messages = { 'invalid' : errors [ 'invalid_date' ] } ,  localize = localize ) ,  TimeField ( input_formats = input_time_formats ,  error_messages = { 'invalid' : errors [ 'invalid_time' ] } ,  localize = localize ) ,  )
example# 7599
super ( SplitDateTimeField , self ) . __init__ ( fields , * args , ** kwargs )
example# 7600
def compress ( self , data_list ) :pass
example# 7601
if data_list :pass
example# 7602
if data_list [ 0 ] in self . empty_values :pass
example# 7603
raise ValidationError ( self . error_messages [ '_STR:0_' ] , code = '_STR:0_' )
example# 7604
if data_list [ 1 ] in self . empty_values :pass
example# 7605
raise ValidationError ( self . error_messages [ '_STR:0_' ] , code = '_STR:0_' )
example# 7606
result = datetime . datetime . combine ( * data_list )
example# 7607
return from_current_timezone ( result )
example# 7608
return None
example# 7609
class IPAddressField ( CharField ) :pass
example# 7610
default_validators = [ validators . validate_ipv4_address ]
example# 7611
def __init__ ( self , * args , ** kwargs ) :pass
example# 7612
warnings . warn ( '_STR:0_' ,  RemovedInDjango19Warning )
example# 7613
super ( IPAddressField , self ) . __init__ ( * args , ** kwargs )
example# 7614
def to_python ( self , value ) :pass
example# 7615
if value in self . empty_values :pass
example# 7616
return ''
example# 7617
return value . strip ( )
example# 7618
class GenericIPAddressField ( CharField ) :pass
example# 7619
def __init__ ( self , protocol = '_STR:0_' , unpack_ipv4 = False , * args , ** kwargs ) :pass
example# 7620
self . unpack_ipv4 = unpack_ipv4
example# 7621
self . default_validators = validators . ip_address_validators ( protocol , unpack_ipv4 ) [ 0 ]
example# 7622
super ( GenericIPAddressField , self ) . __init__ ( * args , ** kwargs )
example# 7623
def to_python ( self , value ) :pass
example# 7624
if value in self . empty_values :pass
example# 7625
return ''
example# 7626
value = value . strip ( )
example# 7627
if value and '_STR:0_' in value :pass
example# 7628
return clean_ipv6_address ( value , self . unpack_ipv4 )
example# 7629
return value
example# 7630
class SlugField ( CharField ) :pass
example# 7631
default_validators = [ validators . validate_slug ]
example# 7632
def clean ( self , value ) :pass
example# 7633
value = self . to_python ( value ) . strip ( )
example# 7634
return super ( SlugField , self ) . clean ( value )
example# 7635
from __future__ import unicode_literals
example# 7636
from collections import OrderedDict
example# 7637
import copy
example# 7638
import datetime
example# 7639
import warnings
example# 7640
from django . core . exceptions import ValidationError , NON_FIELD_ERRORS
example# 7641
from django . forms . fields import Field , FileField
example# 7642
from django . forms . utils import flatatt , ErrorDict , ErrorList
example# 7643
from django . forms . widgets import Media , MediaDefiningClass , TextInput , Textarea
example# 7644
from django . utils . deprecation import RemovedInDjango19Warning
example# 7645
from django . utils . encoding import smart_text , force_text , python_2_unicode_compatible
example# 7646
from django . utils . html import conditional_escape , format_html
example# 7647
from django . utils . safestring import mark_safe
example# 7648
from django . utils . translation import ugettext as _
example# 7649
from django . utils import six
example# 7650
__all__ = ( '_STR:0_' , '_STR:1_' )
example# 7651
def pretty_name ( name ) :pass
example# 7652
if not name :pass
example# 7653
return ''
example# 7654
return name . replace ( '_STR:0_' , ' ' ) . capitalize ( )
example# 7655
def get_declared_fields ( bases , attrs , with_base_fields = True ) :pass
example# 7656
warnings . warn (  '_STR:0_' ,  RemovedInDjango19Warning ,  stacklevel = 2 ,  )
example# 7657
fields = [ ( field_name , attrs . pop ( field_name ) ) for field_name , obj in list ( six . iteritems ( attrs ) ) if isinstance ( obj , Field ) ]
example# 7658
fields . sort ( key = lambda x : x [ 1 ] . creation_counter )
example# 7659
if with_base_fields :pass
example# 7660
for base in bases [ : : - 1 ] :pass
example# 7661
if hasattr ( base , '_STR:0_' ) :pass
example# 7662
fields = list ( six . iteritems ( base . base_fields ) ) + fields
example# 7663
if True: pass
else :pass
example# 7664
for base in bases [ : : - 1 ] :pass
example# 7665
if hasattr ( base , '_STR:0_' ) :pass
example# 7666
fields = list ( six . iteritems ( base . declared_fields ) ) + fields
example# 7667
return OrderedDict ( fields )
example# 7668
class DeclarativeFieldsMetaclass ( MediaDefiningClass ) :pass
example# 7669
def __new__ ( mcs , name , bases , attrs ) :pass
example# 7670
current_fields = [ ]
example# 7671
for key , value in list ( attrs . items ( ) ) :pass
example# 7672
if isinstance ( value , Field ) :pass
example# 7673
current_fields . append ( ( key , value ) )
example# 7674
attrs . pop ( key )
example# 7675
current_fields . sort ( key = lambda x : x [ 1 ] . creation_counter )
example# 7676
attrs [ '_STR:0_' ] = OrderedDict ( current_fields )
example# 7677
new_class = ( super ( DeclarativeFieldsMetaclass , mcs )  . __new__ ( mcs , name , bases , attrs ) )
example# 7678
declared_fields = OrderedDict ( )
example# 7679
for base in reversed ( new_class . __mro__ ) :pass
example# 7680
if hasattr ( base , '_STR:0_' ) :pass
example# 7681
declared_fields . update ( base . declared_fields )
example# 7682
for attr , value in base . __dict__ . items ( ) :pass
example# 7683
if value is None and attr in declared_fields :pass
example# 7684
declared_fields . pop ( attr )
example# 7685
new_class . base_fields = declared_fields
example# 7686
new_class . declared_fields = declared_fields
example# 7687
return new_class
example# 7688
@ python_2_unicode_compatible
def dummy(): pass
example# 7689
class BaseForm ( object ) :pass
example# 7690
def __init__ ( self , data = None , files = None , auto_id = '_STR:0_' , prefix = None ,  initial = None , error_class = ErrorList , label_suffix = None ,  empty_permitted = False ) :pass
example# 7691
self . is_bound = data is not None or files is not None
example# 7692
self . data = data or { }
example# 7693
self . files = files or { }
example# 7694
self . auto_id = auto_id
example# 7695
self . prefix = prefix
example# 7696
self . initial = initial or { }
example# 7697
self . error_class = error_class
example# 7698
self . label_suffix = label_suffix if label_suffix is not None else _ ( ':' )
example# 7699
self . empty_permitted = empty_permitted
example# 7700
self . _errors = None
example# 7701
self . _changed_data = None
example# 7702
self . fields = copy . deepcopy ( self . base_fields )
example# 7703
def __str__ ( self ) :pass
example# 7704
return self . as_table ( )
example# 7705
def __iter__ ( self ) :pass
example# 7706
for name in self . fields :pass
example# 7707
yield self [ name ]
example# 7708
def __getitem__ ( self , name ) :pass
example# 7709
try :pass
except: pass
example# 7710
field = self . fields [ name ]
example# 7711
try: pass
except KeyError :pass
example# 7712
raise KeyError (  '_STR:0_' % ( name , self . __class__ . __name__ ) )
example# 7713
return BoundField ( self , field , name )
example# 7714
@ property
def dummy(): pass
example# 7715
def errors ( self ) :pass
example# 7716
if self . _errors is None :pass
example# 7717
self . full_clean ( )
example# 7718
return self . _errors
example# 7719
def is_valid ( self ) :pass
example# 7720
return self . is_bound and not self . errors
example# 7721
def add_prefix ( self , field_name ) :pass
example# 7722
return '_STR:0_' % ( self . prefix , field_name ) if self . prefix else field_name
example# 7723
def add_initial_prefix ( self , field_name ) :pass
example# 7724
return '_STR:0_' % self . add_prefix ( field_name )
example# 7725
def _html_output ( self , normal_row , error_row , row_ender , help_text_html , errors_on_separate_row ) :pass
example# 7726
top_errors = self . non_field_errors ( )
example# 7727
output , hidden_fields = [ ] , [ ]
example# 7728
for name , field in self . fields . items ( ) :pass
example# 7729
html_class_attr = ''
example# 7730
bf = self [ name ]
example# 7731
bf_errors = self . error_class ( [ conditional_escape ( error ) for error in bf . errors ] )
example# 7732
if bf . is_hidden :pass
example# 7733
if bf_errors :pass
example# 7734
top_errors . extend (  [ _ ( '_STR:0_' ) % { 'name' : name , 'error' : force_text ( e ) }  for e in bf_errors ] )
example# 7735
hidden_fields . append ( six . text_type ( bf ) )
example# 7736
if True: pass
else :pass
example# 7737
css_classes = bf . css_classes ( )
example# 7738
if css_classes :pass
example# 7739
html_class_attr = '_STR:0_' % css_classes
example# 7740
if errors_on_separate_row and bf_errors :pass
example# 7741
output . append ( error_row % force_text ( bf_errors ) )
example# 7742
if bf . label :pass
example# 7743
label = conditional_escape ( force_text ( bf . label ) )
example# 7744
label = bf . label_tag ( label ) or ''
example# 7745
if True: pass
else :pass
example# 7746
label = ''
example# 7747
if field . help_text :pass
example# 7748
help_text = help_text_html % force_text ( field . help_text )
example# 7749
if True: pass
else :pass
example# 7750
help_text = ''
example# 7751
output . append ( normal_row % {  'errors' : force_text ( bf_errors ) ,  'label' : force_text ( label ) ,  'field' : six . text_type ( bf ) ,  'help_text' : help_text ,  'html_class_attr' : html_class_attr ,  'field_name' : bf . html_name ,  } )
example# 7752
if top_errors :pass
example# 7753
output . insert ( 0 , error_row % force_text ( top_errors ) )
example# 7754
if hidden_fields :pass
example# 7755
str_hidden = '' . join ( hidden_fields )
example# 7756
if output :pass
example# 7757
last_row = output [ - 1 ]
example# 7758
if not last_row . endswith ( row_ender ) :pass
example# 7759
last_row = ( normal_row % { '_STR:0_' : '' , '_STR:1_' : '' ,  'field' : '' , 'help_text' : '' ,  'html_class_attr' : html_class_attr } )
example# 7760
output . append ( last_row )
example# 7761
output [ - 1 ] = last_row [ : - len ( row_ender ) ] + str_hidden + row_ender
example# 7762
if True: pass
else :pass
example# 7763
output . append ( str_hidden )
example# 7764
return mark_safe ( '\n' . join ( output ) )
example# 7765
def as_table ( self ) :pass
example# 7766
return self . _html_output (  normal_row = '<tr%(html_class_attr)s><th>%(label)s</th><td>%(errors)s%(field)s%(help_text)s</td></tr>' ,  error_row = '<tr><td colspan="2">%s</td></tr>' ,  row_ender = '</td></tr>' ,  help_text_html = '<br /><span class="helptext">%s</span>' ,  errors_on_separate_row = False )
example# 7767
def as_ul ( self ) :pass
example# 7768
return self . _html_output (  normal_row = '<li%(html_class_attr)s>%(errors)s%(label)s %(field)s%(help_text)s</li>' ,  error_row = '<li>%s</li>' ,  row_ender = '</li>' ,  help_text_html = ' <span class="helptext">%s</span>' ,  errors_on_separate_row = False )
example# 7769
def as_p ( self ) :pass
example# 7770
return self . _html_output (  normal_row = '<p%(html_class_attr)s>%(label)s %(field)s%(help_text)s</p>' ,  error_row = '%s' ,  row_ender = '</p>' ,  help_text_html = ' <span class="helptext">%s</span>' ,  errors_on_separate_row = True )
example# 7771
def non_field_errors ( self ) :pass
example# 7772
return self . errors . get ( NON_FIELD_ERRORS , self . error_class ( error_class = 'nonfield' ) )
example# 7773
def _raw_value ( self , fieldname ) :pass
example# 7774
field = self . fields [ fieldname ]
example# 7775
prefix = self . add_prefix ( fieldname )
example# 7776
return field . widget . value_from_datadict ( self . data , self . files , prefix )
example# 7777
def add_error ( self , field , error ) :pass
example# 7778
if not isinstance ( error , ValidationError ) :pass
example# 7779
error = ValidationError ( error )
example# 7780
if hasattr ( error , '_STR:0_' ) :pass
example# 7781
if field is not None :pass
example# 7782
raise TypeError (  "The argument `field` must be `None` when the `error` "  "argument contains errors for multiple fields."  )
example# 7783
if True: pass
else :pass
example# 7784
error = error . error_dict
example# 7785
if True: pass
else :pass
example# 7786
error = { field or NON_FIELD_ERRORS : error . error_list }
example# 7787
for field , error_list in error . items ( ) :pass
example# 7788
if field not in self . errors :pass
example# 7789
if field != NON_FIELD_ERRORS and field not in self . fields :pass
example# 7790
raise ValueError (  '_STR:0_' % ( self . __class__ . __name__ , field ) )
example# 7791
if field == NON_FIELD_ERRORS :pass
example# 7792
self . _errors [ field ] = self . error_class ( error_class = '_STR:0_' )
example# 7793
if True: pass
else :pass
example# 7794
self . _errors [ field ] = self . error_class ( )
example# 7795
self . _errors [ field ] . extend ( error_list )
example# 7796
if field in self . cleaned_data :pass
example# 7797
del self . cleaned_data [ field ]
example# 7798
def has_error ( self , field , code = None ) :pass
example# 7799
if code is None :pass
example# 7800
return field in self . errors
example# 7801
if field in self . errors :pass
example# 7802
for error in self . errors . as_data ( ) [ field ] :pass
example# 7803
if error . code == code :pass
example# 7804
return True
example# 7805
return False
example# 7806
def full_clean ( self ) :pass
example# 7807
self . _errors = ErrorDict ( )
example# 7808
if not self . is_bound :pass
example# 7809
return
example# 7810
self . cleaned_data = { }
example# 7811
if self . empty_permitted and not self . has_changed ( ) :pass
example# 7812
return
example# 7813
self . _clean_fields ( )
example# 7814
self . _clean_form ( )
example# 7815
self . _post_clean ( )
example# 7816
def _clean_fields ( self ) :pass
example# 7817
for name , field in self . fields . items ( ) :pass
example# 7818
value = field . widget . value_from_datadict ( self . data , self . files , self . add_prefix ( name ) )
example# 7819
try :pass
except: pass
example# 7820
if isinstance ( field , FileField ) :pass
example# 7821
initial = self . initial . get ( name , field . initial )
example# 7822
value = field . clean ( value , initial )
example# 7823
if True: pass
else :pass
example# 7824
value = field . clean ( value )
example# 7825
self . cleaned_data [ name ] = value
example# 7826
if hasattr ( self , '_STR:0_' % name ) :pass
example# 7827
value = getattr ( self , '_STR:0_' % name ) ( )
example# 7828
self . cleaned_data [ name ] = value
example# 7829
try: pass
except ValidationError as e :pass
example# 7830
self . add_error ( name , e )
example# 7831
def _clean_form ( self ) :pass
example# 7832
try :pass
except: pass
example# 7833
cleaned_data = self . clean ( )
example# 7834
try: pass
except ValidationError as e :pass
example# 7835
self . add_error ( None , e )
example# 7836
if True: pass
else :pass
example# 7837
if cleaned_data is not None :pass
example# 7838
self . cleaned_data = cleaned_data
example# 7839
def _post_clean ( self ) :pass
example# 7840
pass
example# 7841
def clean ( self ) :pass
example# 7842
return self . cleaned_data
example# 7843
def has_changed ( self ) :pass
example# 7844
return bool ( self . changed_data )
example# 7845
@ property
def dummy(): pass
example# 7846
def changed_data ( self ) :pass
example# 7847
if self . _changed_data is None :pass
example# 7848
self . _changed_data = [ ]
example# 7849
for name , field in self . fields . items ( ) :pass
example# 7850
prefixed_name = self . add_prefix ( name )
example# 7851
data_value = field . widget . value_from_datadict ( self . data , self . files , prefixed_name )
example# 7852
if not field . show_hidden_initial :pass
example# 7853
initial_value = self . initial . get ( name , field . initial )
example# 7854
if callable ( initial_value ) :pass
example# 7855
initial_value = initial_value ( )
example# 7856
if True: pass
else :pass
example# 7857
initial_prefixed_name = self . add_initial_prefix ( name )
example# 7858
hidden_widget = field . hidden_widget ( )
example# 7859
try :pass
except: pass
example# 7860
initial_value = field . to_python ( hidden_widget . value_from_datadict (  self . data , self . files , initial_prefixed_name ) )
example# 7861
try: pass
except ValidationError :pass
example# 7862
self . _changed_data . append ( name )
example# 7863
continue
example# 7864
if field . _has_changed ( initial_value , data_value ) :pass
example# 7865
self . _changed_data . append ( name )
example# 7866
return self . _changed_data
example# 7867
@ property
def dummy(): pass
example# 7868
def media ( self ) :pass
example# 7869
media = Media ( )
example# 7870
for field in self . fields . values ( ) :pass
example# 7871
media = media + field . widget . media
example# 7872
return media
example# 7873
def is_multipart ( self ) :pass
example# 7874
for field in self . fields . values ( ) :pass
example# 7875
if field . widget . needs_multipart_form :pass
example# 7876
return True
example# 7877
return False
example# 7878
def hidden_fields ( self ) :pass
example# 7879
return [ field for field in self if field . is_hidden ]
example# 7880
def visible_fields ( self ) :pass
example# 7881
return [ field for field in self if not field . is_hidden ]
example# 7882
class Form ( six . with_metaclass ( DeclarativeFieldsMetaclass , BaseForm ) ) :pass
example# 7883
@ python_2_unicode_compatible
def dummy(): pass
example# 7884
class BoundField ( object ) :pass
example# 7885
def __init__ ( self , form , field , name ) :pass
example# 7886
self . form = form
example# 7887
self . field = field
example# 7888
self . name = name
example# 7889
self . html_name = form . add_prefix ( name )
example# 7890
self . html_initial_name = form . add_initial_prefix ( name )
example# 7891
self . html_initial_id = form . add_initial_prefix ( self . auto_id )
example# 7892
if self . field . label is None :pass
example# 7893
self . label = pretty_name ( name )
example# 7894
if True: pass
else :pass
example# 7895
self . label = self . field . label
example# 7896
self . help_text = field . help_text or ''
example# 7897
def __str__ ( self ) :pass
example# 7898
if self . field . show_hidden_initial :pass
example# 7899
return self . as_widget ( ) + self . as_hidden ( only_initial = True )
example# 7900
return self . as_widget ( )
example# 7901
def __iter__ ( self ) :pass
example# 7902
id_ = self . field . widget . attrs . get ( '_STR:0_' ) or self . auto_id
example# 7903
attrs = { '_STR:0_' : id_ } if id_ else { }
example# 7904
for subwidget in self . field . widget . subwidgets ( self . html_name , self . value ( ) , attrs ) :pass
example# 7905
yield subwidget
example# 7906
def __len__ ( self ) :pass
example# 7907
return len ( list ( self . __iter__ ( ) ) )
example# 7908
def __getitem__ ( self , idx ) :pass
example# 7909
return list ( self . __iter__ ( ) ) [ idx ]
example# 7910
@ property
def dummy(): pass
example# 7911
def errors ( self ) :pass
example# 7912
return self . form . errors . get ( self . name , self . form . error_class ( ) )
example# 7913
def as_widget ( self , widget = None , attrs = None , only_initial = False ) :pass
example# 7914
if not widget :pass
example# 7915
widget = self . field . widget
example# 7916
if self . field . localize :pass
example# 7917
widget . is_localized = True
example# 7918
attrs = attrs or { }
example# 7919
auto_id = self . auto_id
example# 7920
if auto_id and '_STR:0_' not in attrs and '_STR:0_' not in widget . attrs :pass
example# 7921
if not only_initial :pass
example# 7922
attrs [ '_STR:0_' ] = auto_id
example# 7923
if True: pass
else :pass
example# 7924
attrs [ '_STR:0_' ] = self . html_initial_id
example# 7925
if not only_initial :pass
example# 7926
name = self . html_name
example# 7927
if True: pass
else :pass
example# 7928
name = self . html_initial_name
example# 7929
return force_text ( widget . render ( name , self . value ( ) , attrs = attrs ) )
example# 7930
def as_text ( self , attrs = None , ** kwargs ) :pass
example# 7931
return self . as_widget ( TextInput ( ) , attrs , ** kwargs )
example# 7932
def as_textarea ( self , attrs = None , ** kwargs ) :pass
example# 7933
return self . as_widget ( Textarea ( ) , attrs , ** kwargs )
example# 7934
def as_hidden ( self , attrs = None , ** kwargs ) :pass
example# 7935
return self . as_widget ( self . field . hidden_widget ( ) , attrs , ** kwargs )
example# 7936
@ property
def dummy(): pass
example# 7937
def data ( self ) :pass
example# 7938
return self . field . widget . value_from_datadict ( self . form . data , self . form . files , self . html_name )
example# 7939
def value ( self ) :pass
example# 7940
if not self . form . is_bound :pass
example# 7941
data = self . form . initial . get ( self . name , self . field . initial )
example# 7942
if callable ( data ) :pass
example# 7943
data = data ( )
example# 7944
if ( isinstance ( data , ( datetime . datetime , datetime . time ) ) and  not getattr ( self . field . widget , 'supports_microseconds' , True ) ) :pass
example# 7945
data = data . replace ( microsecond = 0 )
example# 7946
if True: pass
else :pass
example# 7947
data = self . field . bound_data (  self . data , self . form . initial . get ( self . name , self . field . initial )  )
example# 7948
return self . field . prepare_value ( data )
example# 7949
def label_tag ( self , contents = None , attrs = None , label_suffix = None ) :pass
example# 7950
contents = contents or self . label
example# 7951
if label_suffix is None :pass
example# 7952
label_suffix = ( self . field . label_suffix if self . field . label_suffix is not None  else self . form . label_suffix )
example# 7953
if label_suffix and contents and contents [ - 1 ] not in _ ( ':?.!' ) :pass
example# 7954
contents = format_html ( '_STR:1_' , contents , label_suffix )
example# 7955
widget = self . field . widget
example# 7956
id_ = widget . attrs . get ( '_STR:0_' ) or self . auto_id
example# 7957
if id_ :pass
example# 7958
id_for_label = widget . id_for_label ( id_ )
example# 7959
if id_for_label :pass
example# 7960
attrs = dict ( attrs or { } , ** { '_STR:0_' : id_for_label } )
example# 7961
if self . field . required and hasattr ( self . form , '_STR:0_' ) :pass
example# 7962
attrs = attrs or { }
example# 7963
if '_STR:0_' in attrs :pass
example# 7964
attrs [ '_STR:0_' ] += ' ' + self . form . required_css_class
example# 7965
if True: pass
else :pass
example# 7966
attrs [ '_STR:0_' ] = self . form . required_css_class
example# 7967
attrs = flatatt ( attrs ) if attrs else ''
example# 7968
contents = format_html ( '_STR:0_' , attrs , contents )
example# 7969
if True: pass
else :pass
example# 7970
contents = conditional_escape ( contents )
example# 7971
return mark_safe ( contents )
example# 7972
def css_classes ( self , extra_classes = None ) :pass
example# 7973
if hasattr ( extra_classes , '_STR:0_' ) :pass
example# 7974
extra_classes = extra_classes . split ( )
example# 7975
extra_classes = set ( extra_classes or [ ] )
example# 7976
if self . errors and hasattr ( self . form , '_STR:0_' ) :pass
example# 7977
extra_classes . add ( self . form . error_css_class )
example# 7978
if self . field . required and hasattr ( self . form , '_STR:0_' ) :pass
example# 7979
extra_classes . add ( self . form . required_css_class )
example# 7980
return ' ' . join ( extra_classes )
example# 7981
@ property
def dummy(): pass
example# 7982
def is_hidden ( self ) :pass
example# 7983
return self . field . widget . is_hidden
example# 7984
@ property
def dummy(): pass
example# 7985
def auto_id ( self ) :pass
example# 7986
auto_id = self . form . auto_id
example# 7987
if auto_id and '%s' in smart_text ( auto_id ) :pass
example# 7988
return smart_text ( auto_id ) % self . html_name
example# 7989
if True: pass
elif auto_id :pass
example# 7990
return self . html_name
example# 7991
return ''
example# 7992
@ property
def dummy(): pass
example# 7993
def id_for_label ( self ) :pass
example# 7994
widget = self . field . widget
example# 7995
id_ = widget . attrs . get ( '_STR:0_' ) or self . auto_id
example# 7996
return widget . id_for_label ( id_ )
example# 7997
from __future__ import unicode_literals
example# 7998
from django . core . exceptions import ValidationError
example# 7999
from django . forms import Form
example# 8000
from django . forms . fields import IntegerField , BooleanField
example# 8001
from django . forms . utils import ErrorList
example# 8002
from django . forms . widgets import HiddenInput
example# 8003
from django . utils . encoding import python_2_unicode_compatible
example# 8004
from django . utils . functional import cached_property
example# 8005
from django . utils . safestring import mark_safe
example# 8006
from django . utils import six
example# 8007
from django . utils . six . moves import xrange
example# 8008
from django . utils . translation import ungettext , ugettext as _
example# 8009
__all__ = ( '_STR:0_' , '_STR:1_' , '_STR:2_' )
example# 8010
TOTAL_FORM_COUNT = '_STR:0_'
example# 8011
INITIAL_FORM_COUNT = '_STR:0_'
example# 8012
MIN_NUM_FORM_COUNT = '_STR:0_'
example# 8013
MAX_NUM_FORM_COUNT = '_STR:0_'
example# 8014
ORDERING_FIELD_NAME = '_STR:0_'
example# 8015
DELETION_FIELD_NAME = '_STR:0_'
example# 8016
DEFAULT_MIN_NUM = 0
example# 8017
DEFAULT_MAX_NUM = 1000
example# 8018
class ManagementForm ( Form ) :pass
example# 8019
def __init__ ( self , * args , ** kwargs ) :pass
example# 8020
self . base_fields [ TOTAL_FORM_COUNT ] = IntegerField ( widget = HiddenInput )
example# 8021
self . base_fields [ INITIAL_FORM_COUNT ] = IntegerField ( widget = HiddenInput )
example# 8022
self . base_fields [ MIN_NUM_FORM_COUNT ] = IntegerField ( required = False , widget = HiddenInput )
example# 8023
self . base_fields [ MAX_NUM_FORM_COUNT ] = IntegerField ( required = False , widget = HiddenInput )
example# 8024
super ( ManagementForm , self ) . __init__ ( * args , ** kwargs )
example# 8025
@ python_2_unicode_compatible
def dummy(): pass
example# 8026
class BaseFormSet ( object ) :pass
example# 8027
def __init__ ( self , data = None , files = None , auto_id = '_STR:0_' , prefix = None ,  initial = None , error_class = ErrorList ) :pass
example# 8028
self . is_bound = data is not None or files is not None
example# 8029
self . prefix = prefix or self . get_default_prefix ( )
example# 8030
self . auto_id = auto_id
example# 8031
self . data = data or { }
example# 8032
self . files = files or { }
example# 8033
self . initial = initial
example# 8034
self . error_class = error_class
example# 8035
self . _errors = None
example# 8036
self . _non_form_errors = None
example# 8037
def __str__ ( self ) :pass
example# 8038
return self . as_table ( )
example# 8039
def __iter__ ( self ) :pass
example# 8040
return iter ( self . forms )
example# 8041
def __getitem__ ( self , index ) :pass
example# 8042
return self . forms [ index ]
example# 8043
def __len__ ( self ) :pass
example# 8044
return len ( self . forms )
example# 8045
def __bool__ ( self ) :pass
example# 8046
return True
example# 8047
def __nonzero__ ( self ) :pass
example# 8048
return type ( self ) . __bool__ ( self )
example# 8049
@ property
def dummy(): pass
example# 8050
def management_form ( self ) :pass
example# 8051
if self . is_bound :pass
example# 8052
form = ManagementForm ( self . data , auto_id = self . auto_id , prefix = self . prefix )
example# 8053
if not form . is_valid ( ) :pass
example# 8054
raise ValidationError (  _ ( 'ManagementForm data is missing or has been tampered with' ) ,  code = 'missing_management_form' ,  )
example# 8055
if True: pass
else :pass
example# 8056
form = ManagementForm ( auto_id = self . auto_id , prefix = self . prefix , initial = {  TOTAL_FORM_COUNT : self . total_form_count ( ) ,  INITIAL_FORM_COUNT : self . initial_form_count ( ) ,  MIN_NUM_FORM_COUNT : self . min_num ,  MAX_NUM_FORM_COUNT : self . max_num  } )
example# 8057
return form
example# 8058
def total_form_count ( self ) :pass
example# 8059
if self . is_bound :pass
example# 8060
return min ( self . management_form . cleaned_data [ TOTAL_FORM_COUNT ] , self . absolute_max )
example# 8061
if True: pass
else :pass
example# 8062
initial_forms = self . initial_form_count ( )
example# 8063
total_forms = max ( initial_forms , self . min_num ) + self . extra
example# 8064
if initial_forms > self . max_num >= 0 :pass
example# 8065
total_forms = initial_forms
example# 8066
if True: pass
elif total_forms > self . max_num >= 0 :pass
example# 8067
total_forms = self . max_num
example# 8068
return total_forms
example# 8069
def initial_form_count ( self ) :pass
example# 8070
if self . is_bound :pass
example# 8071
return self . management_form . cleaned_data [ INITIAL_FORM_COUNT ]
example# 8072
if True: pass
else :pass
example# 8073
initial_forms = len ( self . initial ) if self . initial else 0
example# 8074
return initial_forms
example# 8075
@ cached_property
def dummy(): pass
example# 8076
def forms ( self ) :pass
example# 8077
forms = [ self . _construct_form ( i ) for i in xrange ( self . total_form_count ( ) ) ]
example# 8078
return forms
example# 8079
def _construct_form ( self , i , ** kwargs ) :pass
example# 8080
defaults = {  '_STR:0_' : self . auto_id ,  'prefix' : self . add_prefix ( i ) ,  'error_class' : self . error_class ,  }
example# 8081
if self . is_bound :pass
example# 8082
defaults [ '_STR:0_' ] = self . data
example# 8083
defaults [ '_STR:0_' ] = self . files
example# 8084
if self . initial and '_STR:0_' not in kwargs :pass
example# 8085
try :pass
except: pass
example# 8086
defaults [ '_STR:0_' ] = self . initial [ i ]
example# 8087
try: pass
except IndexError :pass
example# 8088
pass
example# 8089
if i >= self . initial_form_count ( ) and i >= self . min_num :pass
example# 8090
defaults [ '_STR:0_' ] = True
example# 8091
defaults . update ( kwargs )
example# 8092
form = self . form ( ** defaults )
example# 8093
self . add_fields ( form , i )
example# 8094
return form
example# 8095
@ property
def dummy(): pass
example# 8096
def initial_forms ( self ) :pass
example# 8097
return self . forms [ : self . initial_form_count ( ) ]
example# 8098
@ property
def dummy(): pass
example# 8099
def extra_forms ( self ) :pass
example# 8100
return self . forms [ self . initial_form_count ( ) : ]
example# 8101
@ property
def dummy(): pass
example# 8102
def empty_form ( self ) :pass
example# 8103
form = self . form (  auto_id = self . auto_id ,  prefix = self . add_prefix ( '__prefix__' ) ,  empty_permitted = True ,  )
example# 8104
self . add_fields ( form , None )
example# 8105
return form
example# 8106
@ property
def dummy(): pass
example# 8107
def cleaned_data ( self ) :pass
example# 8108
if not self . is_valid ( ) :pass
example# 8109
raise AttributeError ( '_STR:0_' % self . __class__ . __name__ )
example# 8110
return [ form . cleaned_data for form in self . forms ]
example# 8111
@ property
def dummy(): pass
example# 8112
def deleted_forms ( self ) :pass
example# 8113
if not self . is_valid ( ) or not self . can_delete :pass
example# 8114
return [ ]
example# 8115
if not hasattr ( self , '_STR:0_' ) :pass
example# 8116
self . _deleted_form_indexes = [ ]
example# 8117
for i in range ( 0 , self . total_form_count ( ) ) :pass
example# 8118
form = self . forms [ i ]
example# 8119
if i >= self . initial_form_count ( ) and not form . has_changed ( ) :pass
example# 8120
continue
example# 8121
if self . _should_delete_form ( form ) :pass
example# 8122
self . _deleted_form_indexes . append ( i )
example# 8123
return [ self . forms [ i ] for i in self . _deleted_form_indexes ]
example# 8124
@ property
def dummy(): pass
example# 8125
def ordered_forms ( self ) :pass
example# 8126
if not self . is_valid ( ) or not self . can_order :pass
example# 8127
raise AttributeError ( '_STR:0_' % self . __class__ . __name__ )
example# 8128
if not hasattr ( self , '_STR:0_' ) :pass
example# 8129
self . _ordering = [ ]
example# 8130
for i in range ( 0 , self . total_form_count ( ) ) :pass
example# 8131
form = self . forms [ i ]
example# 8132
if i >= self . initial_form_count ( ) and not form . has_changed ( ) :pass
example# 8133
continue
example# 8134
if self . can_delete and self . _should_delete_form ( form ) :pass
example# 8135
continue
example# 8136
self . _ordering . append ( ( i , form . cleaned_data [ ORDERING_FIELD_NAME ] ) )
example# 8137
def compare_ordering_key ( k ) :pass
example# 8138
if k [ 1 ] is None :pass
example# 8139
return ( 1 , 0 )
example# 8140
return ( 0 , k [ 1 ] )
example# 8141
self . _ordering . sort ( key = compare_ordering_key )
example# 8142
return [ self . forms [ i [ 0 ] ] for i in self . _ordering ]
example# 8143
@ classmethod
def dummy(): pass
example# 8144
def get_default_prefix ( cls ) :pass
example# 8145
return '_STR:0_'
example# 8146
def non_form_errors ( self ) :pass
example# 8147
if self . _non_form_errors is None :pass
example# 8148
self . full_clean ( )
example# 8149
return self . _non_form_errors
example# 8150
@ property
def dummy(): pass
example# 8151
def errors ( self ) :pass
example# 8152
if self . _errors is None :pass
example# 8153
self . full_clean ( )
example# 8154
return self . _errors
example# 8155
def total_error_count ( self ) :pass
example# 8156
return len ( self . non_form_errors ( ) ) + sum ( len ( form_errors ) for form_errors in self . errors )
example# 8157
def _should_delete_form ( self , form ) :pass
example# 8158
return form . cleaned_data . get ( DELETION_FIELD_NAME , False )
example# 8159
def is_valid ( self ) :pass
example# 8160
if not self . is_bound :pass
example# 8161
return False
example# 8162
forms_valid = True
example# 8163
self . errors
example# 8164
for i in range ( 0 , self . total_form_count ( ) ) :pass
example# 8165
form = self . forms [ i ]
example# 8166
if self . can_delete :pass
example# 8167
if self . _should_delete_form ( form ) :pass
example# 8168
continue
example# 8169
forms_valid &= form . is_valid ( )
example# 8170
return forms_valid and not self . non_form_errors ( )
example# 8171
def full_clean ( self ) :pass
example# 8172
self . _errors = [ ]
example# 8173
self . _non_form_errors = self . error_class ( )
example# 8174
if not self . is_bound :pass
example# 8175
return
example# 8176
for i in range ( 0 , self . total_form_count ( ) ) :pass
example# 8177
form = self . forms [ i ]
example# 8178
self . _errors . append ( form . errors )
example# 8179
try :pass
except: pass
example# 8180
if ( self . validate_max and  self . total_form_count ( ) - len ( self . deleted_forms ) > self . max_num ) or self . management_form . cleaned_data [ TOTAL_FORM_COUNT ] > self . absolute_max :pass
example# 8181
raise ValidationError ( ungettext (  "Please submit %d or fewer forms." ,  "Please submit %d or fewer forms." , self . max_num ) % self . max_num ,  code = 'too_many_forms' ,  )
example# 8182
if ( self . validate_min and  self . total_form_count ( ) - len ( self . deleted_forms ) < self . min_num ) :pass
example# 8183
raise ValidationError ( ungettext (  "Please submit %d or more forms." ,  "Please submit %d or more forms." , self . min_num ) % self . min_num ,  code = 'too_few_forms' )
example# 8184
self . clean ( )
example# 8185
try: pass
except ValidationError as e :pass
example# 8186
self . _non_form_errors = self . error_class ( e . error_list )
example# 8187
def clean ( self ) :pass
example# 8188
pass
example# 8189
def has_changed ( self ) :pass
example# 8190
return any ( form . has_changed ( ) for form in self )
example# 8191
def add_fields ( self , form , index ) :pass
example# 8192
if self . can_order :pass
example# 8193
if index is not None and index < self . initial_form_count ( ) :pass
example# 8194
form . fields [ ORDERING_FIELD_NAME ] = IntegerField ( label = _ ( 'Order' ) , initial = index + 1 , required = False )
example# 8195
if True: pass
else :pass
example# 8196
form . fields [ ORDERING_FIELD_NAME ] = IntegerField ( label = _ ( 'Order' ) , required = False )
example# 8197
if self . can_delete :pass
example# 8198
form . fields [ DELETION_FIELD_NAME ] = BooleanField ( label = _ ( 'Delete' ) , required = False )
example# 8199
def add_prefix ( self , index ) :pass
example# 8200
return '_STR:0_' % ( self . prefix , index )
example# 8201
def is_multipart ( self ) :pass
example# 8202
if self . forms :pass
example# 8203
return self . forms [ 0 ] . is_multipart ( )
example# 8204
if True: pass
else :pass
example# 8205
return self . empty_form . is_multipart ( )
example# 8206
@ property
def dummy(): pass
example# 8207
def media ( self ) :pass
example# 8208
if self . forms :pass
example# 8209
return self . forms [ 0 ] . media
example# 8210
if True: pass
else :pass
example# 8211
return self . empty_form . media
example# 8212
def as_table ( self ) :pass
example# 8213
forms = ' ' . join ( form . as_table ( ) for form in self )
example# 8214
return mark_safe ( '\n' . join ( [ six . text_type ( self . management_form ) , forms ] ) )
example# 8215
def as_p ( self ) :pass
example# 8216
forms = ' ' . join ( form . as_p ( ) for form in self )
example# 8217
return mark_safe ( '\n' . join ( [ six . text_type ( self . management_form ) , forms ] ) )
example# 8218
def as_ul ( self ) :pass
example# 8219
forms = ' ' . join ( form . as_ul ( ) for form in self )
example# 8220
return mark_safe ( '\n' . join ( [ six . text_type ( self . management_form ) , forms ] ) )
example# 8221
def formset_factory ( form , formset = BaseFormSet , extra = 1 , can_order = False ,  can_delete = False , max_num = None , validate_max = False ,  min_num = None , validate_min = False ) :pass
example# 8222
if min_num is None :pass
example# 8223
min_num = DEFAULT_MIN_NUM
example# 8224
if max_num is None :pass
example# 8225
max_num = DEFAULT_MAX_NUM
example# 8226
absolute_max = max_num + DEFAULT_MAX_NUM
example# 8227
attrs = { '_STR:0_' : form , '_STR:1_' : extra ,  '_STR:2_' : can_order , 'can_delete' : can_delete ,  'min_num' : min_num , 'max_num' : max_num ,  'absolute_max' : absolute_max , 'validate_min' : validate_min ,  'validate_max' : validate_max }
example# 8228
return type ( form . __name__ + str ( '_STR:6_' ) , ( formset , ) , attrs )
example# 8229
def all_valid ( formsets ) :pass
example# 8230
valid = True
example# 8231
for formset in formsets :pass
example# 8232
if not formset . is_valid ( ) :pass
example# 8233
valid = False
example# 8234
return valid
example# 8235
from __future__ import unicode_literals
example# 8236
from collections import OrderedDict
example# 8237
import warnings
example# 8238
from django . core . exceptions import (  ImproperlyConfigured , ValidationError , NON_FIELD_ERRORS , FieldError )
example# 8239
from django . forms . fields import Field , ChoiceField
example# 8240
from django . forms . forms import DeclarativeFieldsMetaclass , BaseForm
example# 8241
from django . forms . formsets import BaseFormSet , formset_factory
example# 8242
from django . forms . utils import ErrorList
example# 8243
from django . forms . widgets import ( SelectMultiple , HiddenInput ,  MultipleHiddenInput )
example# 8244
from django . utils import six
example# 8245
from django . utils . deprecation import RemovedInDjango19Warning
example# 8246
from django . utils . encoding import smart_text , force_text
example# 8247
from django . utils . text import get_text_list , capfirst
example# 8248
from django . utils . translation import ugettext_lazy as _ , ugettext
example# 8249
__all__ = (  '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' ,  '_STR:4_' , 'ModelChoiceField' , 'ModelMultipleChoiceField' ,  'ALL_FIELDS' , 'BaseModelFormSet' , 'modelformset_factory' ,  'BaseInlineFormSet' , 'inlineformset_factory' ,  )
example# 8250
ALL_FIELDS = '_STR:7_'
example# 8251
def construct_instance ( form , instance , fields = None , exclude = None ) :pass
example# 8252
from django . db import models
example# 8253
opts = instance . _meta
example# 8254
cleaned_data = form . cleaned_data
example# 8255
file_field_list = [ ]
example# 8256
for f in opts . fields :pass
example# 8257
if not f . editable or isinstance ( f , models . AutoField ) or f . name not in cleaned_data :pass
example# 8258
continue
example# 8259
if fields is not None and f . name not in fields :pass
example# 8260
continue
example# 8261
if exclude and f . name in exclude :pass
example# 8262
continue
example# 8263
if isinstance ( f , models . FileField ) :pass
example# 8264
file_field_list . append ( f )
example# 8265
if True: pass
else :pass
example# 8266
f . save_form_data ( instance , cleaned_data [ f . name ] )
example# 8267
for f in file_field_list :pass
example# 8268
f . save_form_data ( instance , cleaned_data [ f . name ] )
example# 8269
return instance
example# 8270
def save_instance ( form , instance , fields = None , fail_message = '_STR:0_' ,  commit = True , exclude = None , construct = True ) :pass
example# 8271
if construct :pass
example# 8272
instance = construct_instance ( form , instance , fields , exclude )
example# 8273
opts = instance . _meta
example# 8274
if form . errors :pass
example# 8275
raise ValueError ( "The %s could not be %s because the data didn't"  " validate." % ( opts . object_name , fail_message ) )
example# 8276
def save_m2m ( ) :pass
example# 8277
cleaned_data = form . cleaned_data
example# 8278
for f in opts . many_to_many + opts . virtual_fields :pass
example# 8279
if not hasattr ( f , '_STR:0_' ) :pass
example# 8280
continue
example# 8281
if fields and f . name not in fields :pass
example# 8282
continue
example# 8283
if exclude and f . name in exclude :pass
example# 8284
continue
example# 8285
if f . name in cleaned_data :pass
example# 8286
f . save_form_data ( instance , cleaned_data [ f . name ] )
example# 8287
if commit :pass
example# 8288
instance . save ( )
example# 8289
save_m2m ( )
example# 8290
if True: pass
else :pass
example# 8291
form . save_m2m = save_m2m
example# 8292
return instance
example# 8293
def model_to_dict ( instance , fields = None , exclude = None ) :pass
example# 8294
from django . db . models . fields . related import ManyToManyField
example# 8295
opts = instance . _meta
example# 8296
data = { }
example# 8297
for f in opts . concrete_fields + opts . virtual_fields + opts . many_to_many :pass
example# 8298
if not getattr ( f , '_STR:0_' , False ) :pass
example# 8299
continue
example# 8300
if fields and f . name not in fields :pass
example# 8301
continue
example# 8302
if exclude and f . name in exclude :pass
example# 8303
continue
example# 8304
if isinstance ( f , ManyToManyField ) :pass
example# 8305
if instance . pk is None :pass
example# 8306
data [ f . name ] = [ ]
example# 8307
if True: pass
else :pass
example# 8308
qs = f . value_from_object ( instance )
example# 8309
if qs . _result_cache is not None :pass
example# 8310
data [ f . name ] = [ item . pk for item in qs ]
example# 8311
if True: pass
else :pass
example# 8312
data [ f . name ] = list ( qs . values_list ( '_STR:0_' , flat = True ) )
example# 8313
if True: pass
else :pass
example# 8314
data [ f . name ] = f . value_from_object ( instance )
example# 8315
return data
example# 8316
def fields_for_model ( model , fields = None , exclude = None , widgets = None ,  formfield_callback = None , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ) :pass
example# 8317
field_list = [ ]
example# 8318
ignored = [ ]
example# 8319
opts = model . _meta
example# 8320
from django . db . models . fields import Field as ModelField
example# 8321
sortable_virtual_fields = [ f for f in opts . virtual_fields  if isinstance ( f , ModelField ) ]
example# 8322
for f in sorted ( opts . concrete_fields + sortable_virtual_fields + opts . many_to_many ) :pass
example# 8323
if not getattr ( f , '_STR:0_' , False ) :pass
example# 8324
continue
example# 8325
if fields is not None and f . name not in fields :pass
example# 8326
continue
example# 8327
if exclude and f . name in exclude :pass
example# 8328
continue
example# 8329
kwargs = { }
example# 8330
if widgets and f . name in widgets :pass
example# 8331
kwargs [ '_STR:0_' ] = widgets [ f . name ]
example# 8332
if localized_fields == ALL_FIELDS or ( localized_fields and f . name in localized_fields ) :pass
example# 8333
kwargs [ '_STR:0_' ] = True
example# 8334
if labels and f . name in labels :pass
example# 8335
kwargs [ '_STR:0_' ] = labels [ f . name ]
example# 8336
if help_texts and f . name in help_texts :pass
example# 8337
kwargs [ '_STR:0_' ] = help_texts [ f . name ]
example# 8338
if error_messages and f . name in error_messages :pass
example# 8339
kwargs [ '_STR:0_' ] = error_messages [ f . name ]
example# 8340
if formfield_callback is None :pass
example# 8341
formfield = f . formfield ( ** kwargs )
example# 8342
if True: pass
elif not callable ( formfield_callback ) :pass
example# 8343
raise TypeError ( '_STR:0_' )
example# 8344
if True: pass
else :pass
example# 8345
formfield = formfield_callback ( f , ** kwargs )
example# 8346
if formfield :pass
example# 8347
field_list . append ( ( f . name , formfield ) )
example# 8348
if True: pass
else :pass
example# 8349
ignored . append ( f . name )
example# 8350
field_dict = OrderedDict ( field_list )
example# 8351
if fields :pass
example# 8352
field_dict = OrderedDict (  [ ( f , field_dict . get ( f ) ) for f in fields  if ( ( not exclude ) or ( exclude and f not in exclude ) ) and ( f not in ignored ) ]  )
example# 8353
return field_dict
example# 8354
class ModelFormOptions ( object ) :pass
example# 8355
def __init__ ( self , options = None ) :pass
example# 8356
self . model = getattr ( options , '_STR:0_' , None )
example# 8357
self . fields = getattr ( options , '_STR:0_' , None )
example# 8358
self . exclude = getattr ( options , '_STR:0_' , None )
example# 8359
self . widgets = getattr ( options , '_STR:0_' , None )
example# 8360
self . localized_fields = getattr ( options , '_STR:0_' , None )
example# 8361
self . labels = getattr ( options , '_STR:0_' , None )
example# 8362
self . help_texts = getattr ( options , '_STR:0_' , None )
example# 8363
self . error_messages = getattr ( options , '_STR:0_' , None )
example# 8364
class ModelFormMetaclass ( DeclarativeFieldsMetaclass ) :pass
example# 8365
def __new__ ( mcs , name , bases , attrs ) :pass
example# 8366
formfield_callback = attrs . pop ( '_STR:0_' , None )
example# 8367
new_class = super ( ModelFormMetaclass , mcs ) . __new__ ( mcs , name , bases , attrs )
example# 8368
if bases == ( BaseModelForm , ) :pass
example# 8369
return new_class
example# 8370
opts = new_class . _meta = ModelFormOptions ( getattr ( new_class , '_STR:0_' , None ) )
example# 8371
for opt in [ '_STR:0_' , '_STR:1_' , '_STR:2_' ] :pass
example# 8372
value = getattr ( opts , opt )
example# 8373
if isinstance ( value , six . string_types ) and value != ALL_FIELDS :pass
example# 8374
msg = ( "%(model)s.Meta.%(opt)s cannot be a string. "  "Did you mean to type: ('%(value)s',)?" % {  'model' : new_class . __name__ ,  'opt' : opt ,  'value' : value ,  } )
example# 8375
raise TypeError ( msg )
example# 8376
if opts . model :pass
example# 8377
if opts . fields is None and opts . exclude is None :pass
example# 8378
raise ImproperlyConfigured (  "Creating a ModelForm without either the '_STR:0_' attribute "  "or the 'exclude' attribute is prohibited; form %s "  "needs updating." % name  )
example# 8379
if opts . fields == ALL_FIELDS :pass
example# 8380
opts . fields = None
example# 8381
fields = fields_for_model ( opts . model , opts . fields , opts . exclude ,  opts . widgets , formfield_callback ,  opts . localized_fields , opts . labels ,  opts . help_texts , opts . error_messages )
example# 8382
none_model_fields = [ k for k , v in six . iteritems ( fields ) if not v ]
example# 8383
missing_fields = ( set ( none_model_fields ) -  set ( new_class . declared_fields . keys ( ) ) )
example# 8384
if missing_fields :pass
example# 8385
message = '_STR:0_'
example# 8386
message = message % ( '_STR:0_' . join ( missing_fields ) ,  opts . model . __name__ )
example# 8387
raise FieldError ( message )
example# 8388
fields . update ( new_class . declared_fields )
example# 8389
if True: pass
else :pass
example# 8390
fields = new_class . declared_fields
example# 8391
new_class . base_fields = fields
example# 8392
return new_class
example# 8393
class BaseModelForm ( BaseForm ) :pass
example# 8394
def __init__ ( self , data = None , files = None , auto_id = '_STR:0_' , prefix = None ,  initial = None , error_class = ErrorList , label_suffix = None ,  empty_permitted = False , instance = None ) :pass
example# 8395
opts = self . _meta
example# 8396
if opts . model is None :pass
example# 8397
raise ValueError ( '_STR:0_' )
example# 8398
if instance is None :pass
example# 8399
self . instance = opts . model ( )
example# 8400
object_data = { }
example# 8401
if True: pass
else :pass
example# 8402
self . instance = instance
example# 8403
object_data = model_to_dict ( instance , opts . fields , opts . exclude )
example# 8404
if initial is not None :pass
example# 8405
object_data . update ( initial )
example# 8406
self . _validate_unique = False
example# 8407
super ( BaseModelForm , self ) . __init__ ( data , files , auto_id , prefix , object_data ,  error_class , label_suffix , empty_permitted )
example# 8408
for field_name in self . fields :pass
example# 8409
formfield = self . fields [ field_name ]
example# 8410
if hasattr ( formfield , '_STR:0_' ) :pass
example# 8411
limit_choices_to = formfield . limit_choices_to
example# 8412
if limit_choices_to is not None :pass
example# 8413
if callable ( limit_choices_to ) :pass
example# 8414
limit_choices_to = limit_choices_to ( )
example# 8415
formfield . queryset = formfield . queryset . complex_filter ( limit_choices_to )
example# 8416
def _get_validation_exclusions ( self ) :pass
example# 8417
exclude = [ ]
example# 8418
for f in self . instance . _meta . fields :pass
example# 8419
field = f . name
example# 8420
if field not in self . fields :pass
example# 8421
exclude . append ( f . name )
example# 8422
if True: pass
elif self . _meta . fields and field not in self . _meta . fields :pass
example# 8423
exclude . append ( f . name )
example# 8424
if True: pass
elif self . _meta . exclude and field in self . _meta . exclude :pass
example# 8425
exclude . append ( f . name )
example# 8426
if True: pass
elif field in self . _errors . keys ( ) :pass
example# 8427
exclude . append ( f . name )
example# 8428
if True: pass
else :pass
example# 8429
form_field = self . fields [ field ]
example# 8430
field_value = self . cleaned_data . get ( field , None )
example# 8431
if not f . blank and not form_field . required and field_value in form_field . empty_values :pass
example# 8432
exclude . append ( f . name )
example# 8433
return exclude
example# 8434
def clean ( self ) :pass
example# 8435
self . _validate_unique = True
example# 8436
return self . cleaned_data
example# 8437
def _update_errors ( self , errors ) :pass
example# 8438
opts = self . _meta
example# 8439
for field , messages in errors . error_dict . items ( ) :pass
example# 8440
if ( field == NON_FIELD_ERRORS and opts . error_messages and  NON_FIELD_ERRORS in opts . error_messages ) :pass
example# 8441
error_messages = opts . error_messages [ NON_FIELD_ERRORS ]
example# 8442
if True: pass
elif field in self . fields :pass
example# 8443
error_messages = self . fields [ field ] . error_messages
example# 8444
if True: pass
else :pass
example# 8445
continue
example# 8446
for message in messages :pass
example# 8447
if ( isinstance ( message , ValidationError ) and  message . code in error_messages ) :pass
example# 8448
message . message = error_messages [ message . code ]
example# 8449
self . add_error ( None , errors )
example# 8450
def _post_clean ( self ) :pass
example# 8451
opts = self . _meta
example# 8452
exclude = self . _get_validation_exclusions ( )
example# 8453
construct_instance_exclude = list ( exclude )
example# 8454
for name , field in self . fields . items ( ) :pass
example# 8455
if isinstance ( field , InlineForeignKeyField ) :pass
example# 8456
if self . cleaned_data . get ( name ) is not None and self . cleaned_data [ name ] . _state . adding :pass
example# 8457
construct_instance_exclude . append ( name )
example# 8458
exclude . append ( name )
example# 8459
self . instance = construct_instance ( self , self . instance , opts . fields , construct_instance_exclude )
example# 8460
try :pass
except: pass
example# 8461
self . instance . full_clean ( exclude = exclude , validate_unique = False )
example# 8462
try: pass
except ValidationError as e :pass
example# 8463
self . _update_errors ( e )
example# 8464
if self . _validate_unique :pass
example# 8465
self . validate_unique ( )
example# 8466
def validate_unique ( self ) :pass
example# 8467
exclude = self . _get_validation_exclusions ( )
example# 8468
try :pass
except: pass
example# 8469
self . instance . validate_unique ( exclude = exclude )
example# 8470
try: pass
except ValidationError as e :pass
example# 8471
self . _update_errors ( e )
example# 8472
def save ( self , commit = True ) :pass
example# 8473
if self . instance . pk is None :pass
example# 8474
fail_message = '_STR:0_'
example# 8475
if True: pass
else :pass
example# 8476
fail_message = 'changed'
example# 8477
return save_instance ( self , self . instance , self . _meta . fields ,  fail_message , commit , self . _meta . exclude ,  construct = False )
example# 8478
save . alters_data = True
example# 8479
class ModelForm ( six . with_metaclass ( ModelFormMetaclass , BaseModelForm ) ) :pass
example# 8480
pass
example# 8481
def modelform_factory ( model , form = ModelForm , fields = None , exclude = None ,  formfield_callback = None , widgets = None , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ) :pass
example# 8482
attrs = { '_STR:0_' : model }
example# 8483
if fields is not None :pass
example# 8484
attrs [ '_STR:0_' ] = fields
example# 8485
if exclude is not None :pass
example# 8486
attrs [ '_STR:0_' ] = exclude
example# 8487
if widgets is not None :pass
example# 8488
attrs [ '_STR:0_' ] = widgets
example# 8489
if localized_fields is not None :pass
example# 8490
attrs [ '_STR:0_' ] = localized_fields
example# 8491
if labels is not None :pass
example# 8492
attrs [ '_STR:0_' ] = labels
example# 8493
if help_texts is not None :pass
example# 8494
attrs [ '_STR:0_' ] = help_texts
example# 8495
if error_messages is not None :pass
example# 8496
attrs [ '_STR:0_' ] = error_messages
example# 8497
parent = ( object , )
example# 8498
if hasattr ( form , '_STR:0_' ) :pass
example# 8499
parent = ( form . Meta , object )
example# 8500
Meta = type ( str ( '_STR:0_' ) , parent , attrs )
example# 8501
class_name = model . __name__ + str ( '_STR:0_' )
example# 8502
form_class_attrs = {  '_STR:0_' : Meta ,  '_STR:1_' : formfield_callback  }
example# 8503
if ( getattr ( Meta , '_STR:0_' , None ) is None and  getattr ( Meta , '_STR:1_' , None ) is None ) :pass
example# 8504
raise ImproperlyConfigured (  "Calling modelform_factory without defining 'fields' or "  "'exclude' explicitly is prohibited."  )
example# 8505
return type ( form ) ( class_name , ( form , ) , form_class_attrs )
example# 8506
class BaseModelFormSet ( BaseFormSet ) :pass
example# 8507
model = None
example# 8508
def __init__ ( self , data = None , files = None , auto_id = '_STR:0_' , prefix = None ,  queryset = None , ** kwargs ) :pass
example# 8509
self . queryset = queryset
example# 8510
self . initial_extra = kwargs . pop ( '_STR:0_' , None )
example# 8511
defaults = { '_STR:0_' : data , '_STR:1_' : files , '_STR:2_' : auto_id , '_STR:3_' : prefix }
example# 8512
defaults . update ( kwargs )
example# 8513
super ( BaseModelFormSet , self ) . __init__ ( ** defaults )
example# 8514
def initial_form_count ( self ) :pass
example# 8515
if not ( self . data or self . files ) :pass
example# 8516
return len ( self . get_queryset ( ) )
example# 8517
return super ( BaseModelFormSet , self ) . initial_form_count ( )
example# 8518
def _existing_object ( self , pk ) :pass
example# 8519
if not hasattr ( self , '_STR:0_' ) :pass
example# 8520
self . _object_dict = dict ( ( o . pk , o ) for o in self . get_queryset ( ) )
example# 8521
return self . _object_dict . get ( pk )
example# 8522
def _get_to_python ( self , field ) :pass
example# 8523
while field . rel is not None :pass
example# 8524
field = field . rel . get_related_field ( )
example# 8525
return field . to_python
example# 8526
def _construct_form ( self , i , ** kwargs ) :pass
example# 8527
if self . is_bound and i < self . initial_form_count ( ) :pass
example# 8528
pk_key = '_STR:0_' % ( self . add_prefix ( i ) , self . model . _meta . pk . name )
example# 8529
pk = self . data [ pk_key ]
example# 8530
pk_field = self . model . _meta . pk
example# 8531
to_python = self . _get_to_python ( pk_field )
example# 8532
pk = to_python ( pk )
example# 8533
kwargs [ '_STR:0_' ] = self . _existing_object ( pk )
example# 8534
if i < self . initial_form_count ( ) and '_STR:0_' not in kwargs :pass
example# 8535
kwargs [ '_STR:0_' ] = self . get_queryset ( ) [ i ]
example# 8536
if i >= self . initial_form_count ( ) and self . initial_extra :pass
example# 8537
try :pass
except: pass
example# 8538
kwargs [ 'initial' ] = self . initial_extra [ i - self . initial_form_count ( ) ]
example# 8539
try: pass
except IndexError :pass
example# 8540
pass
example# 8541
return super ( BaseModelFormSet , self ) . _construct_form ( i , ** kwargs )
example# 8542
def get_queryset ( self ) :pass
example# 8543
if not hasattr ( self , '_STR:0_' ) :pass
example# 8544
if self . queryset is not None :pass
example# 8545
qs = self . queryset
example# 8546
if True: pass
else :pass
example# 8547
qs = self . model . _default_manager . get_queryset ( )
example# 8548
if not qs . ordered :pass
example# 8549
qs = qs . order_by ( self . model . _meta . pk . name )
example# 8550
self . _queryset = qs
example# 8551
return self . _queryset
example# 8552
def save_new ( self , form , commit = True ) :pass
example# 8553
return form . save ( commit = commit )
example# 8554
def save_existing ( self , form , instance , commit = True ) :pass
example# 8555
return form . save ( commit = commit )
example# 8556
def save ( self , commit = True ) :pass
example# 8557
if not commit :pass
example# 8558
self . saved_forms = [ ]
example# 8559
def save_m2m ( ) :pass
example# 8560
for form in self . saved_forms :pass
example# 8561
form . save_m2m ( )
example# 8562
self . save_m2m = save_m2m
example# 8563
return self . save_existing_objects ( commit ) + self . save_new_objects ( commit )
example# 8564
save . alters_data = True
example# 8565
def clean ( self ) :pass
example# 8566
self . validate_unique ( )
example# 8567
def validate_unique ( self ) :pass
example# 8568
all_unique_checks = set ( )
example# 8569
all_date_checks = set ( )
example# 8570
forms_to_delete = self . deleted_forms
example# 8571
valid_forms = [ form for form in self . forms if form . is_valid ( ) and form not in forms_to_delete ]
example# 8572
for form in valid_forms :pass
example# 8573
exclude = form . _get_validation_exclusions ( )
example# 8574
unique_checks , date_checks = form . instance . _get_unique_checks ( exclude = exclude )
example# 8575
all_unique_checks = all_unique_checks . union ( set ( unique_checks ) )
example# 8576
all_date_checks = all_date_checks . union ( set ( date_checks ) )
example# 8577
errors = [ ]
example# 8578
for uclass , unique_check in all_unique_checks :pass
example# 8579
seen_data = set ( )
example# 8580
for form in valid_forms :pass
example# 8581
row_data = ( form . cleaned_data [ field ]  for field in unique_check if field in form . cleaned_data )
example# 8582
row_data = tuple ( d . _get_pk_val ( ) if hasattr ( d , '_STR:0_' ) else d  for d in row_data )
example# 8583
if row_data and None not in row_data :pass
example# 8584
if row_data in seen_data :pass
example# 8585
errors . append ( self . get_unique_error_message ( unique_check ) )
example# 8586
form . _errors [ NON_FIELD_ERRORS ] = self . error_class ( [ self . get_form_error ( ) ] )
example# 8587
for field in unique_check :pass
example# 8588
if field in form . cleaned_data :pass
example# 8589
del form . cleaned_data [ field ]
example# 8590
seen_data . add ( row_data )
example# 8591
for date_check in all_date_checks :pass
example# 8592
seen_data = set ( )
example# 8593
uclass , lookup , field , unique_for = date_check
example# 8594
for form in valid_forms :pass
example# 8595
if ( form . cleaned_data and form . cleaned_data [ field ] is not None  and form . cleaned_data [ unique_for ] is not None ) :pass
example# 8596
if lookup == '_STR:0_' :pass
example# 8597
date = form . cleaned_data [ unique_for ]
example# 8598
date_data = ( date . year , date . month , date . day )
example# 8599
if True: pass
else :pass
example# 8600
date_data = ( getattr ( form . cleaned_data [ unique_for ] , lookup ) , )
example# 8601
data = ( form . cleaned_data [ field ] , ) + date_data
example# 8602
if data in seen_data :pass
example# 8603
errors . append ( self . get_date_error_message ( date_check ) )
example# 8604
form . _errors [ NON_FIELD_ERRORS ] = self . error_class ( [ self . get_form_error ( ) ] )
example# 8605
del form . cleaned_data [ field ]
example# 8606
seen_data . add ( data )
example# 8607
if errors :pass
example# 8608
raise ValidationError ( errors )
example# 8609
def get_unique_error_message ( self , unique_check ) :pass
example# 8610
if len ( unique_check ) == 1 :pass
example# 8611
return ugettext ( '_STR:0_' ) % {  "field" : unique_check [ 0 ] ,  }
example# 8612
if True: pass
else :pass
example# 8613
return ugettext ( "Please correct the duplicate data for %(field)s, "  "which must be unique." ) % {  "field" : get_text_list ( unique_check , six . text_type ( _ ( "and" ) ) ) ,  }
example# 8614
def get_date_error_message ( self , date_check ) :pass
example# 8615
return ugettext ( "Please correct the duplicate data for %(field_name)s "  "which must be unique for the %(lookup)s in %(date_field)s." ) % {  'field_name' : date_check [ 2 ] ,  'date_field' : date_check [ 3 ] ,  'lookup' : six . text_type ( date_check [ 1 ] ) ,  }
example# 8616
def get_form_error ( self ) :pass
example# 8617
return ugettext ( '_STR:0_' )
example# 8618
def save_existing_objects ( self , commit = True ) :pass
example# 8619
self . changed_objects = [ ]
example# 8620
self . deleted_objects = [ ]
example# 8621
if not self . initial_forms :pass
example# 8622
return [ ]
example# 8623
saved_instances = [ ]
example# 8624
forms_to_delete = self . deleted_forms
example# 8625
for form in self . initial_forms :pass
example# 8626
obj = form . instance
example# 8627
if form in forms_to_delete :pass
example# 8628
if obj . pk is None :pass
example# 8629
continue
example# 8630
self . deleted_objects . append ( obj )
example# 8631
if commit :pass
example# 8632
obj . delete ( )
example# 8633
if True: pass
elif form . has_changed ( ) :pass
example# 8634
self . changed_objects . append ( ( obj , form . changed_data ) )
example# 8635
saved_instances . append ( self . save_existing ( form , obj , commit = commit ) )
example# 8636
if not commit :pass
example# 8637
self . saved_forms . append ( form )
example# 8638
return saved_instances
example# 8639
def save_new_objects ( self , commit = True ) :pass
example# 8640
self . new_objects = [ ]
example# 8641
for form in self . extra_forms :pass
example# 8642
if not form . has_changed ( ) :pass
example# 8643
continue
example# 8644
if self . can_delete and self . _should_delete_form ( form ) :pass
example# 8645
continue
example# 8646
self . new_objects . append ( self . save_new ( form , commit = commit ) )
example# 8647
if not commit :pass
example# 8648
self . saved_forms . append ( form )
example# 8649
return self . new_objects
example# 8650
def add_fields ( self , form , index ) :pass
example# 8651
from django . db . models import AutoField , OneToOneField , ForeignKey
example# 8652
self . _pk_field = pk = self . model . _meta . pk
example# 8653
def pk_is_not_editable ( pk ) :pass
example# 8654
return ( ( not pk . editable ) or ( pk . auto_created or isinstance ( pk , AutoField ) )  or ( pk . rel and pk . rel . parent_link and pk_is_not_editable ( pk . rel . to . _meta . pk ) ) )
example# 8655
if pk_is_not_editable ( pk ) or pk . name not in form . fields :pass
example# 8656
if form . is_bound :pass
example# 8657
pk_value = form . instance . pk
example# 8658
if True: pass
else :pass
example# 8659
try :pass
except: pass
example# 8660
if index is not None :pass
example# 8661
pk_value = self . get_queryset ( ) [ index ] . pk
example# 8662
if True: pass
else :pass
example# 8663
pk_value = None
example# 8664
try: pass
except IndexError :pass
example# 8665
pk_value = None
example# 8666
if isinstance ( pk , OneToOneField ) or isinstance ( pk , ForeignKey ) :pass
example# 8667
qs = pk . rel . to . _default_manager . get_queryset ( )
example# 8668
if True: pass
else :pass
example# 8669
qs = self . model . _default_manager . get_queryset ( )
example# 8670
qs = qs . using ( form . instance . _state . db )
example# 8671
if form . _meta . widgets :pass
example# 8672
widget = form . _meta . widgets . get ( self . _pk_field . name , HiddenInput )
example# 8673
if True: pass
else :pass
example# 8674
widget = HiddenInput
example# 8675
form . fields [ self . _pk_field . name ] = ModelChoiceField ( qs , initial = pk_value , required = False , widget = widget )
example# 8676
super ( BaseModelFormSet , self ) . add_fields ( form , index )
example# 8677
def modelformset_factory ( model , form = ModelForm , formfield_callback = None ,  formset = BaseModelFormSet , extra = 1 , can_delete = False ,  can_order = False , max_num = None , fields = None , exclude = None ,  widgets = None , validate_max = False , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ,  min_num = None , validate_min = False ) :pass
example# 8678
meta = getattr ( form , '_STR:0_' , None )
example# 8679
if meta is None :pass
example# 8680
meta = type ( str ( '_STR:0_' ) , ( object , ) , { } )
example# 8681
if ( getattr ( meta , '_STR:0_' , fields ) is None and  getattr ( meta , '_STR:1_' , exclude ) is None ) :pass
example# 8682
raise ImproperlyConfigured (  "Calling modelformset_factory without defining '_STR:0_' or "  "'_STR:1_' explicitly is prohibited."  )
example# 8683
form = modelform_factory ( model , form = form , fields = fields , exclude = exclude ,  formfield_callback = formfield_callback ,  widgets = widgets , localized_fields = localized_fields ,  labels = labels , help_texts = help_texts , error_messages = error_messages )
example# 8684
FormSet = formset_factory ( form , formset , extra = extra , min_num = min_num , max_num = max_num ,  can_order = can_order , can_delete = can_delete ,  validate_min = validate_min , validate_max = validate_max )
example# 8685
FormSet . model = model
example# 8686
return FormSet
example# 8687
class BaseInlineFormSet ( BaseModelFormSet ) :pass
example# 8688
def __init__ ( self , data = None , files = None , instance = None ,  save_as_new = False , prefix = None , queryset = None , ** kwargs ) :pass
example# 8689
if instance is None :pass
example# 8690
self . instance = self . fk . rel . to ( )
example# 8691
if True: pass
else :pass
example# 8692
self . instance = instance
example# 8693
self . save_as_new = save_as_new
example# 8694
if queryset is None :pass
example# 8695
queryset = self . model . _default_manager
example# 8696
if self . instance . pk is not None :pass
example# 8697
qs = queryset . filter ( ** { self . fk . name : self . instance } )
example# 8698
if True: pass
else :pass
example# 8699
qs = queryset . none ( )
example# 8700
super ( BaseInlineFormSet , self ) . __init__ ( data , files , prefix = prefix ,  queryset = qs , ** kwargs )
example# 8701
def initial_form_count ( self ) :pass
example# 8702
if self . save_as_new :pass
example# 8703
return 0
example# 8704
return super ( BaseInlineFormSet , self ) . initial_form_count ( )
example# 8705
def _construct_form ( self , i , ** kwargs ) :pass
example# 8706
form = super ( BaseInlineFormSet , self ) . _construct_form ( i , ** kwargs )
example# 8707
if self . save_as_new :pass
example# 8708
form . data [ form . add_prefix ( self . _pk_field . name ) ] = None
example# 8709
form . data [ form . add_prefix ( self . fk . name ) ] = None
example# 8710
setattr ( form . instance , self . fk . get_attname ( ) , self . instance . pk )
example# 8711
return form
example# 8712
@ classmethod
def dummy(): pass
example# 8713
def get_default_prefix ( cls ) :pass
example# 8714
from django . db . models . fields . related import RelatedObject
example# 8715
return RelatedObject ( cls . fk . rel . to , cls . model , cls . fk ) . get_accessor_name ( ) . replace ( '+' , '' )
example# 8716
def save_new ( self , form , commit = True ) :pass
example# 8717
obj = form . save ( commit = False )
example# 8718
pk_value = getattr ( self . instance , self . fk . rel . field_name )
example# 8719
setattr ( obj , self . fk . get_attname ( ) , getattr ( pk_value , '_STR:0_' , pk_value ) )
example# 8720
if commit :pass
example# 8721
obj . save ( )
example# 8722
if commit and hasattr ( form , '_STR:0_' ) :pass
example# 8723
form . save_m2m ( )
example# 8724
return obj
example# 8725
def add_fields ( self , form , index ) :pass
example# 8726
super ( BaseInlineFormSet , self ) . add_fields ( form , index )
example# 8727
if self . _pk_field == self . fk :pass
example# 8728
name = self . _pk_field . name
example# 8729
kwargs = { '_STR:0_' : True }
example# 8730
if True: pass
else :pass
example# 8731
name = self . fk . name
example# 8732
kwargs = {  '_STR:0_' : getattr ( form . fields . get ( name ) , '_STR:0_' , capfirst ( self . fk . verbose_name ) )  }
example# 8733
if self . fk . rel . field_name != self . fk . rel . to . _meta . pk . name :pass
example# 8734
kwargs [ '_STR:0_' ] = self . fk . rel . field_name
example# 8735
form . fields [ name ] = InlineForeignKeyField ( self . instance , ** kwargs )
example# 8736
if form . _meta . fields :pass
example# 8737
if isinstance ( form . _meta . fields , tuple ) :pass
example# 8738
form . _meta . fields = list ( form . _meta . fields )
example# 8739
form . _meta . fields . append ( self . fk . name )
example# 8740
def get_unique_error_message ( self , unique_check ) :pass
example# 8741
unique_check = [ field for field in unique_check if field != self . fk . name ]
example# 8742
return super ( BaseInlineFormSet , self ) . get_unique_error_message ( unique_check )
example# 8743
def _get_foreign_key ( parent_model , model , fk_name = None , can_fail = False ) :pass
example# 8744
from django . db . models import ForeignKey
example# 8745
opts = model . _meta
example# 8746
if fk_name :pass
example# 8747
fks_to_parent = [ f for f in opts . fields if f . name == fk_name ]
example# 8748
if len ( fks_to_parent ) == 1 :pass
example# 8749
fk = fks_to_parent [ 0 ]
example# 8750
if not isinstance ( fk , ForeignKey ) or ( fk . rel . to != parent_model and  fk . rel . to not in parent_model . _meta . get_parent_list ( ) ) :pass
example# 8751
raise ValueError (  '_STR:0_'  % ( fk_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )
example# 8752
if True: pass
elif len ( fks_to_parent ) == 0 :pass
example# 8753
raise ValueError (  '_STR:0_'  % ( model . _meta . app_label , model . _meta . object_name , fk_name ) )
example# 8754
if True: pass
else :pass
example# 8755
fks_to_parent = [  f for f in opts . fields  if isinstance ( f , ForeignKey )  and ( f . rel . to == parent_model  or f . rel . to in parent_model . _meta . get_parent_list ( ) )  ]
example# 8756
if len ( fks_to_parent ) == 1 :pass
example# 8757
fk = fks_to_parent [ 0 ]
example# 8758
if True: pass
elif len ( fks_to_parent ) == 0 :pass
example# 8759
if can_fail :pass
example# 8760
return
example# 8761
raise ValueError (  '_STR:0_'  % ( model . _meta . app_label , model . _meta . object_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )
example# 8762
if True: pass
else :pass
example# 8763
raise ValueError (  '_STR:0_'  % ( model . _meta . app_label , model . _meta . object_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )
example# 8764
return fk
example# 8765
def inlineformset_factory ( parent_model , model , form = ModelForm ,  formset = BaseInlineFormSet , fk_name = None ,  fields = None , exclude = None , extra = 3 , can_order = False ,  can_delete = True , max_num = None , formfield_callback = None ,  widgets = None , validate_max = False , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ,  min_num = None , validate_min = False ) :pass
example# 8766
fk = _get_foreign_key ( parent_model , model , fk_name = fk_name )
example# 8767
if fk . unique :pass
example# 8768
max_num = 1
example# 8769
kwargs = {  '_STR:0_' : form ,  '_STR:1_' : formfield_callback ,  '_STR:2_' : formset ,  'extra' : extra ,  'can_delete' : can_delete ,  'can_order' : can_order ,  'fields' : fields ,  'exclude' : exclude ,  'min_num' : min_num ,  'max_num' : max_num ,  'widgets' : widgets ,  'validate_min' : validate_min ,  'validate_max' : validate_max ,  'localized_fields' : localized_fields ,  'labels' : labels ,  'help_texts' : help_texts ,  'error_messages' : error_messages ,  }
example# 8770
FormSet = modelformset_factory ( model , ** kwargs )
example# 8771
FormSet . fk = fk
example# 8772
return FormSet
example# 8773
class InlineForeignKeyField ( Field ) :pass
example# 8774
widget = HiddenInput
example# 8775
default_error_messages = {  'invalid_choice' : _ ( 'The inline foreign key did not match the parent instance primary key.' ) ,  }
example# 8776
def __init__ ( self , parent_instance , * args , ** kwargs ) :pass
example# 8777
self . parent_instance = parent_instance
example# 8778
self . pk_field = kwargs . pop ( "pk_field" , False )
example# 8779
self . to_field = kwargs . pop ( "to_field" , None )
example# 8780
if self . parent_instance is not None :pass
example# 8781
if self . to_field :pass
example# 8782
kwargs [ "initial" ] = getattr ( self . parent_instance , self . to_field )
example# 8783
if True: pass
else :pass
example# 8784
kwargs [ "initial" ] = self . parent_instance . pk
example# 8785
kwargs [ "required" ] = False
example# 8786
super ( InlineForeignKeyField , self ) . __init__ ( * args , ** kwargs )
example# 8787
def clean ( self , value ) :pass
example# 8788
if value in self . empty_values :pass
example# 8789
if self . pk_field :pass
example# 8790
return None
example# 8791
return self . parent_instance
example# 8792
if self . to_field :pass
example# 8793
orig = getattr ( self . parent_instance , self . to_field )
example# 8794
if True: pass
else :pass
example# 8795
orig = self . parent_instance . pk
example# 8796
if force_text ( value ) != force_text ( orig ) :pass
example# 8797
raise ValidationError ( self . error_messages [ '_STR:0_' ] , code = '_STR:0_' )
example# 8798
return self . parent_instance
example# 8799
def _has_changed ( self , initial , data ) :pass
example# 8800
return False
example# 8801
class ModelChoiceIterator ( object ) :pass
example# 8802
def __init__ ( self , field ) :pass
example# 8803
self . field = field
example# 8804
self . queryset = field . queryset
example# 8805
def __iter__ ( self ) :pass
example# 8806
if self . field . empty_label is not None :pass
example# 8807
yield ( "" , self . field . empty_label )
example# 8808
if self . field . cache_choices :pass
example# 8809
if self . field . choice_cache is None :pass
example# 8810
self . field . choice_cache = [  self . choice ( obj ) for obj in self . queryset . all ( )  ]
example# 8811
for choice in self . field . choice_cache :pass
example# 8812
yield choice
example# 8813
if True: pass
else :pass
example# 8814
for obj in self . queryset . all ( ) :pass
example# 8815
yield self . choice ( obj )
example# 8816
def __len__ ( self ) :pass
example# 8817
return ( len ( self . queryset ) +  ( 1 if self . field . empty_label is not None else 0 ) )
example# 8818
def choice ( self , obj ) :pass
example# 8819
return ( self . field . prepare_value ( obj ) , self . field . label_from_instance ( obj ) )
example# 8820
class ModelChoiceField ( ChoiceField ) :pass
example# 8821
default_error_messages = {  'invalid_choice' : _ ( 'Select a valid choice. That choice is not one of'  ' the available choices.' ) ,  }
example# 8822
def __init__ ( self , queryset , empty_label = '_STR:2_' , cache_choices = None ,  required = True , widget = None , label = None , initial = None ,  help_text = '' , to_field_name = None , limit_choices_to = None ,  * args , ** kwargs ) :pass
example# 8823
if required and ( initial is not None ) :pass
example# 8824
self . empty_label = None
example# 8825
if True: pass
else :pass
example# 8826
self . empty_label = empty_label
example# 8827
if cache_choices is not None :pass
example# 8828
warnings . warn ( "cache_choices has been deprecated and will be "  "removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2 )
example# 8829
if True: pass
else :pass
example# 8830
cache_choices = False
example# 8831
self . cache_choices = cache_choices
example# 8832
Field . __init__ ( self , required , widget , label , initial , help_text ,  * args , ** kwargs )
example# 8833
self . queryset = queryset
example# 8834
self . limit_choices_to = limit_choices_to
example# 8835
self . choice_cache = None
example# 8836
self . to_field_name = to_field_name
example# 8837
def __deepcopy__ ( self , memo ) :pass
example# 8838
result = super ( ChoiceField , self ) . __deepcopy__ ( memo )
example# 8839
result . queryset = result . queryset
example# 8840
return result
example# 8841
def _get_queryset ( self ) :pass
example# 8842
return self . _queryset
example# 8843
def _set_queryset ( self , queryset ) :pass
example# 8844
self . _queryset = queryset
example# 8845
self . widget . choices = self . choices
example# 8846
queryset = property ( _get_queryset , _set_queryset )
example# 8847
def label_from_instance ( self , obj ) :pass
example# 8848
return smart_text ( obj )
example# 8849
def _get_choices ( self ) :pass
example# 8850
if hasattr ( self , '_STR:0_' ) :pass
example# 8851
return self . _choices
example# 8852
return ModelChoiceIterator ( self )
example# 8853
choices = property ( _get_choices , ChoiceField . _set_choices )
example# 8854
def prepare_value ( self , value ) :pass
example# 8855
if hasattr ( value , '_STR:0_' ) :pass
example# 8856
if self . to_field_name :pass
example# 8857
return value . serializable_value ( self . to_field_name )
example# 8858
if True: pass
else :pass
example# 8859
return value . pk
example# 8860
return super ( ModelChoiceField , self ) . prepare_value ( value )
example# 8861
def to_python ( self , value ) :pass
example# 8862
if value in self . empty_values :pass
example# 8863
return None
example# 8864
try :pass
except: pass
example# 8865
key = self . to_field_name or '_STR:0_'
example# 8866
value = self . queryset . get ( ** { key : value } )
example# 8867
try: pass
except ( ValueError , self . queryset . model . DoesNotExist ) :pass
example# 8868
raise ValidationError ( self . error_messages [ '_STR:0_' ] , code = '_STR:0_' )
example# 8869
return value
example# 8870
def validate ( self , value ) :pass
example# 8871
return Field . validate ( self , value )
example# 8872
def _has_changed ( self , initial , data ) :pass
example# 8873
initial_value = initial if initial is not None else ''
example# 8874
data_value = data if data is not None else ''
example# 8875
return force_text ( self . prepare_value ( initial_value ) ) != force_text ( data_value )
example# 8876
class ModelMultipleChoiceField ( ModelChoiceField ) :pass
example# 8877
widget = SelectMultiple
example# 8878
hidden_widget = MultipleHiddenInput
example# 8879
default_error_messages = {  'list' : _ ( 'Enter a list of values.' ) ,  'invalid_choice' : _ ( 'Select a valid choice. %(value)s is not one of the'  ' available choices.' ) ,  'invalid_pk_value' : _ ( '"%(pk)s" is not a valid value for a primary key.' )  }
example# 8880
def __init__ ( self , queryset , cache_choices = None , required = True ,  widget = None , label = None , initial = None ,  help_text = '' , * args , ** kwargs ) :pass
example# 8881
super ( ModelMultipleChoiceField , self ) . __init__ ( queryset , None ,  cache_choices , required , widget , label , initial , help_text ,  * args , ** kwargs )
example# 8882
def to_python ( self , value ) :pass
example# 8883
if not value :pass
example# 8884
return [ ]
example# 8885
to_py = super ( ModelMultipleChoiceField , self ) . to_python
example# 8886
return [ to_py ( val ) for val in value ]
example# 8887
def clean ( self , value ) :pass
example# 8888
if self . required and not value :pass
example# 8889
raise ValidationError ( self . error_messages [ '_STR:0_' ] , code = '_STR:0_' )
example# 8890
if True: pass
elif not self . required and not value :pass
example# 8891
return self . queryset . none ( )
example# 8892
if not isinstance ( value , ( list , tuple ) ) :pass
example# 8893
raise ValidationError ( self . error_messages [ '_STR:0_' ] , code = '_STR:0_' )
example# 8894
key = self . to_field_name or 'pk'
example# 8895
for pk in value :pass
example# 8896
try :pass
except: pass
example# 8897
self . queryset . filter ( ** { key : pk } )
example# 8898
try: pass
except ValueError :pass
example# 8899
raise ValidationError (  self . error_messages [ '_STR:0_' ] ,  code = '_STR:0_' ,  params = { 'pk' : pk } ,  )
example# 8900
qs = self . queryset . filter ( ** { '%s__in' % key : value } )
example# 8901
pks = set ( force_text ( getattr ( o , key ) ) for o in qs )
example# 8902
for val in value :pass
example# 8903
if force_text ( val ) not in pks :pass
example# 8904
raise ValidationError (  self . error_messages [ '_STR:0_' ] ,  code = '_STR:0_' ,  params = { 'value' : val } ,  )
example# 8905
self . run_validators ( value )
example# 8906
return qs
example# 8907
def prepare_value ( self , value ) :pass
example# 8908
if ( hasattr ( value , '_STR:0_' ) and  not isinstance ( value , six . text_type ) and  not hasattr ( value , '_STR:1_' ) ) :pass
example# 8909
return [ super ( ModelMultipleChoiceField , self ) . prepare_value ( v ) for v in value ]
example# 8910
return super ( ModelMultipleChoiceField , self ) . prepare_value ( value )
example# 8911
def _has_changed ( self , initial , data ) :pass
example# 8912
if initial is None :pass
example# 8913
initial = [ ]
example# 8914
if data is None :pass
example# 8915
data = [ ]
example# 8916
if len ( initial ) != len ( data ) :pass
example# 8917
return True
example# 8918
initial_set = set ( force_text ( value ) for value in self . prepare_value ( initial ) )
example# 8919
data_set = set ( force_text ( value ) for value in data )
example# 8920
return data_set != initial_set
example# 8921
def modelform_defines_fields ( form_class ) :pass
example# 8922
return ( form_class is not None and (  hasattr ( form_class , '_STR:0_' ) and  ( form_class . _meta . fields is not None or  form_class . _meta . exclude is not None )  ) )
example# 8923
import warnings
example# 8924
from django . utils . deprecation import RemovedInDjango19Warning
example# 8925
warnings . warn (  '_STR:0_'  "Use django.forms.utils instead." , RemovedInDjango19Warning , stacklevel = 2 )
example# 8926
from django . forms . utils import *
example# 8927
from __future__ import unicode_literals
example# 8928
import json
example# 8929
import sys
example# 8930
try :pass
except: pass
example# 8931
from collections import UserList
example# 8932
try: pass
except ImportError :pass
example# 8933
from UserList import UserList
example# 8934
from django . conf import settings
example# 8935
from django . utils . encoding import force_text , python_2_unicode_compatible
example# 8936
from django . utils . html import format_html , format_html_join , escape
example# 8937
from django . utils import timezone
example# 8938
from django . utils . translation import ugettext_lazy as _
example# 8939
from django . utils import six
example# 8940
from django . core . exceptions import ValidationError
example# 8941
def flatatt ( attrs ) :pass
example# 8942
boolean_attrs = [ ]
example# 8943
for attr , value in list ( attrs . items ( ) ) :pass
example# 8944
if value is True :pass
example# 8945
boolean_attrs . append ( ( attr , ) )
example# 8946
del attrs [ attr ]
example# 8947
if True: pass
elif value is False :pass
example# 8948
del attrs [ attr ]
example# 8949
return (  format_html_join ( '' , '_STR:0_' , sorted ( attrs . items ( ) ) ) +  format_html_join ( '' , ' {0}' , sorted ( boolean_attrs ) )  )
example# 8950
@ python_2_unicode_compatible
def dummy(): pass
example# 8951
class ErrorDict ( dict ) :pass
example# 8952
def as_data ( self ) :pass
example# 8953
return { f : e . as_data ( ) for f , e in self . items ( ) }
example# 8954
def as_json ( self , escape_html = False ) :pass
example# 8955
return json . dumps ( { f : e . get_json_data ( escape_html ) for f , e in self . items ( ) } )
example# 8956
def as_ul ( self ) :pass
example# 8957
if not self :pass
example# 8958
return ''
example# 8959
return format_html (  '_STR:0_' ,  format_html_join ( '' , '<li>{0}{1}</li>' , ( ( k , force_text ( v ) ) for k , v in self . items ( ) ) )  )
example# 8960
def as_text ( self ) :pass
example# 8961
output = [ ]
example# 8962
for field , errors in self . items ( ) :pass
example# 8963
output . append ( '* %s' % field )
example# 8964
output . append ( '\n' . join ( '  * %s' % e for e in errors ) )
example# 8965
return '\n' . join ( output )
example# 8966
def __str__ ( self ) :pass
example# 8967
return self . as_ul ( )
example# 8968
@ python_2_unicode_compatible
def dummy(): pass
example# 8969
class ErrorList ( UserList , list ) :pass
example# 8970
def __init__ ( self , initlist = None , error_class = None ) :pass
example# 8971
super ( ErrorList , self ) . __init__ ( initlist )
example# 8972
if error_class is None :pass
example# 8973
self . error_class = '_STR:0_'
example# 8974
if True: pass
else :pass
example# 8975
self . error_class = 'errorlist {}' . format ( error_class )
example# 8976
def as_data ( self ) :pass
example# 8977
return ValidationError ( self . data ) . error_list
example# 8978
def get_json_data ( self , escape_html = False ) :pass
example# 8979
errors = [ ]
example# 8980
for error in self . as_data ( ) :pass
example# 8981
message = list ( error ) [ 0 ]
example# 8982
errors . append ( {  'message' : escape ( message ) if escape_html else message ,  'code' : error . code or '' ,  } )
example# 8983
return errors
example# 8984
def as_json ( self , escape_html = False ) :pass
example# 8985
return json . dumps ( self . get_json_data ( escape_html ) )
example# 8986
def as_ul ( self ) :pass
example# 8987
if not self . data :pass
example# 8988
return ''
example# 8989
return format_html (  '_STR:0_' ,  self . error_class ,  format_html_join ( '' , '<li>{0}</li>' , ( ( force_text ( e ) , ) for e in self ) )  )
example# 8990
def as_text ( self ) :pass
example# 8991
return '\n' . join ( '* %s' % e for e in self )
example# 8992
def __str__ ( self ) :pass
example# 8993
return self . as_ul ( )
example# 8994
def __repr__ ( self ) :pass
example# 8995
return repr ( list ( self ) )
example# 8996
def __contains__ ( self , item ) :pass
example# 8997
return item in list ( self )
example# 8998
def __eq__ ( self , other ) :pass
example# 8999
return list ( self ) == other
example# 9000
def __ne__ ( self , other ) :pass
example# 9001
return list ( self ) != other
example# 9002
def __getitem__ ( self , i ) :pass
example# 9003
error = self . data [ i ]
example# 9004
if isinstance ( error , ValidationError ) :pass
example# 9005
return list ( error ) [ 0 ]
example# 9006
return force_text ( error )
example# 9007
def from_current_timezone ( value ) :pass
example# 9008
if settings . USE_TZ and value is not None and timezone . is_naive ( value ) :pass
example# 9009
current_timezone = timezone . get_current_timezone ( )
example# 9010
try :pass
except: pass
example# 9011
return timezone . make_aware ( value , current_timezone )
example# 9012
try: pass
except Exception :pass
example# 9013
message = _ (  '%(datetime)s couldn\'t be interpreted '  'in time zone %(current_timezone)s; it '  'may be ambiguous or it may not exist.'  )
example# 9014
params = { '_STR:1_' : value , '_STR:2_' : current_timezone }
example# 9015
six . reraise ( ValidationError , ValidationError (  message ,  code = 'ambiguous_timezone' ,  params = params ,  ) , sys . exc_info ( ) [ 2 ] )
example# 9016
return value
example# 9017
def to_current_timezone ( value ) :pass
example# 9018
if settings . USE_TZ and value is not None and timezone . is_aware ( value ) :pass
example# 9019
current_timezone = timezone . get_current_timezone ( )
example# 9020
return timezone . make_naive ( value , current_timezone )
example# 9021
return value
example# 9022
from __future__ import unicode_literals
example# 9023
import copy
example# 9024
from itertools import chain
example# 9025
from django . conf import settings
example# 9026
from django . forms . utils import flatatt , to_current_timezone
example# 9027
from django . utils . datastructures import MultiValueDict , MergeDict
example# 9028
from django . utils . encoding import force_text , python_2_unicode_compatible
example# 9029
from django . utils . html import conditional_escape , format_html
example# 9030
from django . utils . translation import ugettext_lazy
example# 9031
from django . utils . safestring import mark_safe
example# 9032
from django . utils import formats , six
example# 9033
from django . utils . six . moves . urllib . parse import urljoin
example# 9034
__all__ = (  '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' ,  '_STR:4_' , '_STR:5_' , '_STR:6_' , 'PasswordInput' ,  'HiddenInput' , 'MultipleHiddenInput' , 'ClearableFileInput' ,  'FileInput' , 'DateInput' , 'DateTimeInput' , 'TimeInput' , 'Textarea' , 'CheckboxInput' ,  'Select' , 'NullBooleanSelect' , 'SelectMultiple' , 'RadioSelect' ,  'CheckboxSelectMultiple' , 'MultiWidget' ,  'SplitDateTimeWidget' , 'SplitHiddenDateTimeWidget' ,  )
example# 9035
MEDIA_TYPES = ( '_STR:18_' , '_STR:19_' )
example# 9036
@ python_2_unicode_compatible
def dummy(): pass
example# 9037
class Media ( object ) :pass
example# 9038
def __init__ ( self , media = None , ** kwargs ) :pass
example# 9039
if media :pass
example# 9040
media_attrs = media . __dict__
example# 9041
if True: pass
else :pass
example# 9042
media_attrs = kwargs
example# 9043
self . _css = { }
example# 9044
self . _js = [ ]
example# 9045
for name in MEDIA_TYPES :pass
example# 9046
getattr ( self , '_STR:0_' + name ) ( media_attrs . get ( name , None ) )
example# 9047
def __str__ ( self ) :pass
example# 9048
return self . render ( )
example# 9049
def render ( self ) :pass
example# 9050
return mark_safe ( '\n' . join ( chain ( * [ getattr ( self , '_STR:0_' + name ) ( ) for name in MEDIA_TYPES ] ) ) )
example# 9051
def render_js ( self ) :pass
example# 9052
return [ format_html ( '<script type="text/javascript" src="{0}"></script>' , self . absolute_path ( path ) ) for path in self . _js ]
example# 9053
def render_css ( self ) :pass
example# 9054
media = sorted ( self . _css . keys ( ) )
example# 9055
return chain ( * [  [ format_html ( '<link href="{0}" type="text/css" media="{1}" rel="stylesheet" />' , self . absolute_path ( path ) , medium )  for path in self . _css [ medium ] ]  for medium in media ] )
example# 9056
def absolute_path ( self , path , prefix = None ) :pass
example# 9057
if path . startswith ( ( '_STR:0_' , '_STR:1_' , '_STR:2_' ) ) :pass
example# 9058
return path
example# 9059
if prefix is None :pass
example# 9060
if settings . STATIC_URL is None :pass
example# 9061
prefix = settings . MEDIA_URL
example# 9062
if True: pass
else :pass
example# 9063
prefix = settings . STATIC_URL
example# 9064
return urljoin ( prefix , path )
example# 9065
def __getitem__ ( self , name ) :pass
example# 9066
if name in MEDIA_TYPES :pass
example# 9067
return Media ( ** { str ( name ) : getattr ( self , '_STR:0_' + name ) } )
example# 9068
raise KeyError ( '_STR:0_' % name )
example# 9069
def add_js ( self , data ) :pass
example# 9070
if data :pass
example# 9071
for path in data :pass
example# 9072
if path not in self . _js :pass
example# 9073
self . _js . append ( path )
example# 9074
def add_css ( self , data ) :pass
example# 9075
if data :pass
example# 9076
for medium , paths in data . items ( ) :pass
example# 9077
for path in paths :pass
example# 9078
if not self . _css . get ( medium ) or path not in self . _css [ medium ] :pass
example# 9079
self . _css . setdefault ( medium , [ ] ) . append ( path )
example# 9080
def __add__ ( self , other ) :pass
example# 9081
combined = Media ( )
example# 9082
for name in MEDIA_TYPES :pass
example# 9083
getattr ( combined , '_STR:0_' + name ) ( getattr ( self , '_' + name , None ) )
example# 9084
getattr ( combined , '_STR:1_' + name ) ( getattr ( other , '_STR:0_' + name , None ) )
example# 9085
return combined
example# 9086
def media_property ( cls ) :pass
example# 9087
def _media ( self ) :pass
example# 9088
sup_cls = super ( cls , self )
example# 9089
try :pass
except: pass
example# 9090
base = sup_cls . media
example# 9091
try: pass
except AttributeError :pass
example# 9092
base = Media ( )
example# 9093
definition = getattr ( cls , '_STR:0_' , None )
example# 9094
if definition :pass
example# 9095
extend = getattr ( definition , '_STR:0_' , True )
example# 9096
if extend :pass
example# 9097
if extend is True :pass
example# 9098
m = base
example# 9099
if True: pass
else :pass
example# 9100
m = Media ( )
example# 9101
for medium in extend :pass
example# 9102
m = m + base [ medium ]
example# 9103
return m + Media ( definition )
example# 9104
if True: pass
else :pass
example# 9105
return Media ( definition )
example# 9106
if True: pass
else :pass
example# 9107
return base
example# 9108
return property ( _media )
example# 9109
class MediaDefiningClass ( type ) :pass
example# 9110
def __new__ ( mcs , name , bases , attrs ) :pass
example# 9111
new_class = ( super ( MediaDefiningClass , mcs )  . __new__ ( mcs , name , bases , attrs ) )
example# 9112
if '_STR:0_' not in attrs :pass
example# 9113
new_class . media = media_property ( new_class )
example# 9114
return new_class
example# 9115
@ python_2_unicode_compatible
def dummy(): pass
example# 9116
class SubWidget ( object ) :pass
example# 9117
def __init__ ( self , parent_widget , name , value , attrs , choices ) :pass
example# 9118
self . parent_widget = parent_widget
example# 9119
self . name , self . value = name , value
example# 9120
self . attrs , self . choices = attrs , choices
example# 9121
def __str__ ( self ) :pass
example# 9122
args = [ self . name , self . value , self . attrs ]
example# 9123
if self . choices :pass
example# 9124
args . append ( self . choices )
example# 9125
return self . parent_widget . render ( * args )
example# 9126
class Widget ( six . with_metaclass ( MediaDefiningClass ) ) :pass
example# 9127
needs_multipart_form = False
example# 9128
is_localized = False
example# 9129
is_required = False
example# 9130
def __init__ ( self , attrs = None ) :pass
example# 9131
if attrs is not None :pass
example# 9132
self . attrs = attrs . copy ( )
example# 9133
if True: pass
else :pass
example# 9134
self . attrs = { }
example# 9135
def __deepcopy__ ( self , memo ) :pass
example# 9136
obj = copy . copy ( self )
example# 9137
obj . attrs = self . attrs . copy ( )
example# 9138
memo [ id ( self ) ] = obj
example# 9139
return obj
example# 9140
@ property
def dummy(): pass
example# 9141
def is_hidden ( self ) :pass
example# 9142
return self . input_type == '_STR:0_' if hasattr ( self , '_STR:1_' ) else False
example# 9143
def subwidgets ( self , name , value , attrs = None , choices = ( ) ) :pass
example# 9144
yield SubWidget ( self , name , value , attrs , choices )
example# 9145
def render ( self , name , value , attrs = None ) :pass
example# 9146
raise NotImplementedError ( '_STR:0_' )
example# 9147
def build_attrs ( self , extra_attrs = None , ** kwargs ) :pass
example# 9148
attrs = dict ( self . attrs , ** kwargs )
example# 9149
if extra_attrs :pass
example# 9150
attrs . update ( extra_attrs )
example# 9151
return attrs
example# 9152
def value_from_datadict ( self , data , files , name ) :pass
example# 9153
return data . get ( name , None )
example# 9154
def id_for_label ( self , id_ ) :pass
example# 9155
return id_
example# 9156
class Input ( Widget ) :pass
example# 9157
input_type = None
example# 9158
def _format_value ( self , value ) :pass
example# 9159
if self . is_localized :pass
example# 9160
return formats . localize_input ( value )
example# 9161
return value
example# 9162
def render ( self , name , value , attrs = None ) :pass
example# 9163
if value is None :pass
example# 9164
value = ''
example# 9165
final_attrs = self . build_attrs ( attrs , type = self . input_type , name = name )
example# 9166
if value != '' :pass
example# 9167
final_attrs [ 'value' ] = force_text ( self . _format_value ( value ) )
example# 9168
return format_html ( '_STR:1_' , flatatt ( final_attrs ) )
example# 9169
class TextInput ( Input ) :pass
example# 9170
input_type = '_STR:0_'
example# 9171
def __init__ ( self , attrs = None ) :pass
example# 9172
if attrs is not None :pass
example# 9173
self . input_type = attrs . pop ( '_STR:0_' , self . input_type )
example# 9174
super ( TextInput , self ) . __init__ ( attrs )
example# 9175
class NumberInput ( TextInput ) :pass
example# 9176
input_type = '_STR:0_'
example# 9177
class EmailInput ( TextInput ) :pass
example# 9178
input_type = '_STR:0_'
example# 9179
class URLInput ( TextInput ) :pass
example# 9180
input_type = '_STR:0_'
example# 9181
class PasswordInput ( TextInput ) :pass
example# 9182
input_type = '_STR:0_'
example# 9183
def __init__ ( self , attrs = None , render_value = False ) :pass
example# 9184
super ( PasswordInput , self ) . __init__ ( attrs )
example# 9185
self . render_value = render_value
example# 9186
def render ( self , name , value , attrs = None ) :pass
example# 9187
if not self . render_value :pass
example# 9188
value = None
example# 9189
return super ( PasswordInput , self ) . render ( name , value , attrs )
example# 9190
class HiddenInput ( Input ) :pass
example# 9191
input_type = '_STR:0_'
example# 9192
class MultipleHiddenInput ( HiddenInput ) :pass
example# 9193
def __init__ ( self , attrs = None , choices = ( ) ) :pass
example# 9194
super ( MultipleHiddenInput , self ) . __init__ ( attrs )
example# 9195
self . choices = choices
example# 9196
def render ( self , name , value , attrs = None , choices = ( ) ) :pass
example# 9197
if value is None :pass
example# 9198
value = [ ]
example# 9199
final_attrs = self . build_attrs ( attrs , type = self . input_type , name = name )
example# 9200
id_ = final_attrs . get ( '_STR:0_' , None )
example# 9201
inputs = [ ]
example# 9202
for i , v in enumerate ( value ) :pass
example# 9203
input_attrs = dict ( value = force_text ( v ) , ** final_attrs )
example# 9204
if id_ :pass
example# 9205
input_attrs [ '_STR:1_' ] = '_STR:0_' % ( id_ , i )
example# 9206
inputs . append ( format_html ( '_STR:0_' , flatatt ( input_attrs ) ) )
example# 9207
return mark_safe ( '\n' . join ( inputs ) )
example# 9208
def value_from_datadict ( self , data , files , name ) :pass
example# 9209
if isinstance ( data , ( MultiValueDict , MergeDict ) ) :pass
example# 9210
return data . getlist ( name )
example# 9211
return data . get ( name , None )
example# 9212
class FileInput ( Input ) :pass
example# 9213
input_type = '_STR:0_'
example# 9214
needs_multipart_form = True
example# 9215
def render ( self , name , value , attrs = None ) :pass
example# 9216
return super ( FileInput , self ) . render ( name , None , attrs = attrs )
example# 9217
def value_from_datadict ( self , data , files , name ) :pass
example# 9218
return files . get ( name , None )
example# 9219
FILE_INPUT_CONTRADICTION = object ( )
example# 9220
class ClearableFileInput ( FileInput ) :pass
example# 9221
initial_text = ugettext_lazy ( '_STR:0_' )
example# 9222
input_text = ugettext_lazy ( '_STR:0_' )
example# 9223
clear_checkbox_label = ugettext_lazy ( '_STR:0_' )
example# 9224
template_with_initial = '_STR:0_'
example# 9225
template_with_clear = '_STR:0_'
example# 9226
url_markup_template = '_STR:0_'
example# 9227
def clear_checkbox_name ( self , name ) :pass
example# 9228
return name + '_STR:0_'
example# 9229
def clear_checkbox_id ( self , name ) :pass
example# 9230
return name + '_STR:0_'
example# 9231
def render ( self , name , value , attrs = None ) :pass
example# 9232
substitutions = {  '_STR:0_' : self . initial_text ,  '_STR:1_' : self . input_text ,  'clear_template' : '' ,  'clear_checkbox_label' : self . clear_checkbox_label ,  }
example# 9233
template = '_STR:2_'
example# 9234
substitutions [ 'input' ] = super ( ClearableFileInput , self ) . render ( name , value , attrs )
example# 9235
if value and hasattr ( value , "url" ) :pass
example# 9236
template = self . template_with_initial
example# 9237
substitutions [ 'initial' ] = format_html ( self . url_markup_template ,  value . url ,  force_text ( value ) )
example# 9238
if not self . is_required :pass
example# 9239
checkbox_name = self . clear_checkbox_name ( name )
example# 9240
checkbox_id = self . clear_checkbox_id ( checkbox_name )
example# 9241
substitutions [ 'clear_checkbox_name' ] = conditional_escape ( checkbox_name )
example# 9242
substitutions [ 'clear_checkbox_id' ] = conditional_escape ( checkbox_id )
example# 9243
substitutions [ 'clear' ] = CheckboxInput ( ) . render ( checkbox_name , False , attrs = { 'id' : checkbox_id } )
example# 9244
substitutions [ '_STR:2_' ] = self . template_with_clear % substitutions
example# 9245
return mark_safe ( template % substitutions )
example# 9246
def value_from_datadict ( self , data , files , name ) :pass
example# 9247
upload = super ( ClearableFileInput , self ) . value_from_datadict ( data , files , name )
example# 9248
if not self . is_required and CheckboxInput ( ) . value_from_datadict (  data , files , self . clear_checkbox_name ( name ) ) :pass
example# 9249
if upload :pass
example# 9250
return FILE_INPUT_CONTRADICTION
example# 9251
return False
example# 9252
return upload
example# 9253
class Textarea ( Widget ) :pass
example# 9254
def __init__ ( self , attrs = None ) :pass
example# 9255
default_attrs = { '_STR:1_' : '_STR:0_' , '_STR:3_' : '_STR:2_' }
example# 9256
if attrs :pass
example# 9257
default_attrs . update ( attrs )
example# 9258
super ( Textarea , self ) . __init__ ( default_attrs )
example# 9259
def render ( self , name , value , attrs = None ) :pass
example# 9260
if value is None :pass
example# 9261
value = ''
example# 9262
final_attrs = self . build_attrs ( attrs , name = name )
example# 9263
return format_html ( '_STR:0_' ,  flatatt ( final_attrs ) ,  force_text ( value ) )
example# 9264
class DateTimeBaseInput ( TextInput ) :pass
example# 9265
format_key = ''
example# 9266
supports_microseconds = False
example# 9267
def __init__ ( self , attrs = None , format = None ) :pass
example# 9268
super ( DateTimeBaseInput , self ) . __init__ ( attrs )
example# 9269
self . format = format if format else None
example# 9270
def _format_value ( self , value ) :pass
example# 9271
return formats . localize_input ( value ,  self . format or formats . get_format ( self . format_key ) [ 0 ] )
example# 9272
class DateInput ( DateTimeBaseInput ) :pass
example# 9273
format_key = '_STR:0_'
example# 9274
class DateTimeInput ( DateTimeBaseInput ) :pass
example# 9275
format_key = '_STR:0_'
example# 9276
class TimeInput ( DateTimeBaseInput ) :pass
example# 9277
format_key = '_STR:0_'
example# 9278
def boolean_check ( v ) :pass
example# 9279
return not ( v is False or v is None or v == '' )
example# 9280
class CheckboxInput ( Widget ) :pass
example# 9281
def __init__ ( self , attrs = None , check_test = None ) :pass
example# 9282
super ( CheckboxInput , self ) . __init__ ( attrs )
example# 9283
self . check_test = boolean_check if check_test is None else check_test
example# 9284
def render ( self , name , value , attrs = None ) :pass
example# 9285
final_attrs = self . build_attrs ( attrs , type = '_STR:0_' , name = name )
example# 9286
if self . check_test ( value ) :pass
example# 9287
final_attrs [ '_STR:0_' ] = '_STR:0_'
example# 9288
if not ( value is True or value is False or value is None or value == '' ) :pass
example# 9289
final_attrs [ '_STR:0_' ] = force_text ( value )
example# 9290
return format_html ( '_STR:0_' , flatatt ( final_attrs ) )
example# 9291
def value_from_datadict ( self , data , files , name ) :pass
example# 9292
if name not in data :pass
example# 9293
return False
example# 9294
value = data . get ( name )
example# 9295
values = { '_STR:1_' : True , '_STR:0_' : False }
example# 9296
if isinstance ( value , six . string_types ) :pass
example# 9297
value = values . get ( value . lower ( ) , value )
example# 9298
return bool ( value )
example# 9299
class Select ( Widget ) :pass
example# 9300
allow_multiple_selected = False
example# 9301
def __init__ ( self , attrs = None , choices = ( ) ) :pass
example# 9302
super ( Select , self ) . __init__ ( attrs )
example# 9303
self . choices = list ( choices )
example# 9304
def render ( self , name , value , attrs = None , choices = ( ) ) :pass
example# 9305
if value is None :pass
example# 9306
value = ''
example# 9307
final_attrs = self . build_attrs ( attrs , name = name )
example# 9308
output = [ format_html ( '_STR:0_' , flatatt ( final_attrs ) ) ]
example# 9309
options = self . render_options ( choices , [ value ] )
example# 9310
if options :pass
example# 9311
output . append ( options )
example# 9312
output . append ( '_STR:0_' )
example# 9313
return mark_safe ( '\n' . join ( output ) )
example# 9314
def render_option ( self , selected_choices , option_value , option_label ) :pass
example# 9315
if option_value is None :pass
example# 9316
option_value = ''
example# 9317
option_value = force_text ( option_value )
example# 9318
if option_value in selected_choices :pass
example# 9319
selected_html = mark_safe ( '_STR:0_' )
example# 9320
if not self . allow_multiple_selected :pass
example# 9321
selected_choices . remove ( option_value )
example# 9322
if True: pass
else :pass
example# 9323
selected_html = ''
example# 9324
return format_html ( '_STR:0_' ,  option_value ,  selected_html ,  force_text ( option_label ) )
example# 9325
def render_options ( self , choices , selected_choices ) :pass
example# 9326
selected_choices = set ( force_text ( v ) for v in selected_choices )
example# 9327
output = [ ]
example# 9328
for option_value , option_label in chain ( self . choices , choices ) :pass
example# 9329
if isinstance ( option_label , ( list , tuple ) ) :pass
example# 9330
output . append ( format_html ( '_STR:0_' , force_text ( option_value ) ) )
example# 9331
for option in option_label :pass
example# 9332
output . append ( self . render_option ( selected_choices , * option ) )
example# 9333
output . append ( '_STR:0_' )
example# 9334
if True: pass
else :pass
example# 9335
output . append ( self . render_option ( selected_choices , option_value , option_label ) )
example# 9336
return '\n' . join ( output )
example# 9337
class NullBooleanSelect ( Select ) :pass
example# 9338
def __init__ ( self , attrs = None ) :pass
example# 9339
choices = ( ( '_STR:0_' , ugettext_lazy ( 'Unknown' ) ) ,  ( '2' , ugettext_lazy ( 'Yes' ) ) ,  ( '3' , ugettext_lazy ( 'No' ) ) )
example# 9340
super ( NullBooleanSelect , self ) . __init__ ( attrs , choices )
example# 9341
def render ( self , name , value , attrs = None , choices = ( ) ) :pass
example# 9342
try :pass
except: pass
example# 9343
value = { True : '_STR:0_' , False : '_STR:1_' , '_STR:0_' : '_STR:0_' , '_STR:1_' : '_STR:1_' } [ value ]
example# 9344
try: pass
except KeyError :pass
example# 9345
value = '_STR:0_'
example# 9346
return super ( NullBooleanSelect , self ) . render ( name , value , attrs , choices )
example# 9347
def value_from_datadict ( self , data , files , name ) :pass
example# 9348
value = data . get ( name , None )
example# 9349
return { '_STR:0_' : True ,  True : True ,  'True' : True ,  '3' : False ,  'False' : False ,  False : False } . get ( value , None )
example# 9350
class SelectMultiple ( Select ) :pass
example# 9351
allow_multiple_selected = True
example# 9352
def render ( self , name , value , attrs = None , choices = ( ) ) :pass
example# 9353
if value is None :pass
example# 9354
value = [ ]
example# 9355
final_attrs = self . build_attrs ( attrs , name = name )
example# 9356
output = [ format_html ( '<select multiple="multiple"{0}>' , flatatt ( final_attrs ) ) ]
example# 9357
options = self . render_options ( choices , value )
example# 9358
if options :pass
example# 9359
output . append ( options )
example# 9360
output . append ( '_STR:0_' )
example# 9361
return mark_safe ( '\n' . join ( output ) )
example# 9362
def value_from_datadict ( self , data , files , name ) :pass
example# 9363
if isinstance ( data , ( MultiValueDict , MergeDict ) ) :pass
example# 9364
return data . getlist ( name )
example# 9365
return data . get ( name , None )
example# 9366
@ python_2_unicode_compatible
def dummy(): pass
example# 9367
class ChoiceInput ( SubWidget ) :pass
example# 9368
input_type = None
example# 9369
def __init__ ( self , name , value , attrs , choice , index ) :pass
example# 9370
self . name = name
example# 9371
self . value = value
example# 9372
self . attrs = attrs
example# 9373
self . choice_value = force_text ( choice [ 0 ] )
example# 9374
self . choice_label = force_text ( choice [ 1 ] )
example# 9375
self . index = index
example# 9376
if '_STR:0_' in self . attrs :pass
example# 9377
self . attrs [ '_STR:1_' ] += "_%d" % self . index
example# 9378
def __str__ ( self ) :pass
example# 9379
return self . render ( )
example# 9380
def render ( self , name = None , value = None , attrs = None , choices = ( ) ) :pass
example# 9381
if self . id_for_label :pass
example# 9382
label_for = format_html ( '_STR:0_' , self . id_for_label )
example# 9383
if True: pass
else :pass
example# 9384
label_for = ''
example# 9385
return format_html ( '_STR:0_' , label_for , self . tag ( ) , self . choice_label )
example# 9386
def is_checked ( self ) :pass
example# 9387
return self . value == self . choice_value
example# 9388
def tag ( self ) :pass
example# 9389
final_attrs = dict ( self . attrs , type = self . input_type , name = self . name , value = self . choice_value )
example# 9390
if self . is_checked ( ) :pass
example# 9391
final_attrs [ '_STR:0_' ] = '_STR:0_'
example# 9392
return format_html ( '_STR:0_' , flatatt ( final_attrs ) )
example# 9393
@ property
def dummy(): pass
example# 9394
def id_for_label ( self ) :pass
example# 9395
return self . attrs . get ( '_STR:0_' , '' )
example# 9396
class RadioChoiceInput ( ChoiceInput ) :pass
example# 9397
input_type = '_STR:0_'
example# 9398
def __init__ ( self , * args , ** kwargs ) :pass
example# 9399
super ( RadioChoiceInput , self ) . __init__ ( * args , ** kwargs )
example# 9400
self . value = force_text ( self . value )
example# 9401
class CheckboxChoiceInput ( ChoiceInput ) :pass
example# 9402
input_type = '_STR:0_'
example# 9403
def __init__ ( self , * args , ** kwargs ) :pass
example# 9404
super ( CheckboxChoiceInput , self ) . __init__ ( * args , ** kwargs )
example# 9405
self . value = set ( force_text ( v ) for v in self . value )
example# 9406
def is_checked ( self ) :pass
example# 9407
return self . choice_value in self . value
example# 9408
@ python_2_unicode_compatible
def dummy(): pass
example# 9409
class ChoiceFieldRenderer ( object ) :pass
example# 9410
choice_input_class = None
example# 9411
outer_html = '_STR:0_'
example# 9412
inner_html = '_STR:0_'
example# 9413
def __init__ ( self , name , value , attrs , choices ) :pass
example# 9414
self . name = name
example# 9415
self . value = value
example# 9416
self . attrs = attrs
example# 9417
self . choices = choices
example# 9418
def __getitem__ ( self , idx ) :pass
example# 9419
choice = self . choices [ idx ]
example# 9420
return self . choice_input_class ( self . name , self . value , self . attrs . copy ( ) , choice , idx )
example# 9421
def __str__ ( self ) :pass
example# 9422
return self . render ( )
example# 9423
def render ( self ) :pass
example# 9424
id_ = self . attrs . get ( '_STR:0_' , None )
example# 9425
output = [ ]
example# 9426
for i , choice in enumerate ( self . choices ) :pass
example# 9427
choice_value , choice_label = choice
example# 9428
if isinstance ( choice_label , ( tuple , list ) ) :pass
example# 9429
attrs_plus = self . attrs . copy ( )
example# 9430
if id_ :pass
example# 9431
attrs_plus [ '_STR:1_' ] += '_{0}' . format ( i )
example# 9432
sub_ul_renderer = ChoiceFieldRenderer ( name = self . name ,  value = self . value ,  attrs = attrs_plus ,  choices = choice_label )
example# 9433
sub_ul_renderer . choice_input_class = self . choice_input_class
example# 9434
output . append ( format_html ( self . inner_html , choice_value = choice_value ,  sub_widgets = sub_ul_renderer . render ( ) ) )
example# 9435
if True: pass
else :pass
example# 9436
w = self . choice_input_class ( self . name , self . value ,  self . attrs . copy ( ) , choice , i )
example# 9437
output . append ( format_html ( self . inner_html ,  choice_value = force_text ( w ) , sub_widgets = '' ) )
example# 9438
return format_html ( self . outer_html ,  id_attr = format_html ( ' id="{0}"' , id_ ) if id_ else '' ,  content = mark_safe ( '\n' . join ( output ) ) )
example# 9439
class RadioFieldRenderer ( ChoiceFieldRenderer ) :pass
example# 9440
choice_input_class = RadioChoiceInput
example# 9441
class CheckboxFieldRenderer ( ChoiceFieldRenderer ) :pass
example# 9442
choice_input_class = CheckboxChoiceInput
example# 9443
class RendererMixin ( object ) :pass
example# 9444
renderer = None
example# 9445
_empty_value = None
example# 9446
def __init__ ( self , * args , ** kwargs ) :pass
example# 9447
renderer = kwargs . pop ( 'renderer' , None )
example# 9448
if renderer :pass
example# 9449
self . renderer = renderer
example# 9450
super ( RendererMixin , self ) . __init__ ( * args , ** kwargs )
example# 9451
def subwidgets ( self , name , value , attrs = None , choices = ( ) ) :pass
example# 9452
for widget in self . get_renderer ( name , value , attrs , choices ) :pass
example# 9453
yield widget
example# 9454
def get_renderer ( self , name , value , attrs = None , choices = ( ) ) :pass
example# 9455
if value is None :pass
example# 9456
value = self . _empty_value
example# 9457
final_attrs = self . build_attrs ( attrs )
example# 9458
choices = list ( chain ( self . choices , choices ) )
example# 9459
return self . renderer ( name , value , final_attrs , choices )
example# 9460
def render ( self , name , value , attrs = None , choices = ( ) ) :pass
example# 9461
return self . get_renderer ( name , value , attrs , choices ) . render ( )
example# 9462
def id_for_label ( self , id_ ) :pass
example# 9463
if id_ :pass
example# 9464
id_ += '_STR:0_'
example# 9465
return id_
example# 9466
class RadioSelect ( RendererMixin , Select ) :pass
example# 9467
renderer = RadioFieldRenderer
example# 9468
_empty_value = ''
example# 9469
class CheckboxSelectMultiple ( RendererMixin , SelectMultiple ) :pass
example# 9470
renderer = CheckboxFieldRenderer
example# 9471
_empty_value = [ ]
example# 9472
class MultiWidget ( Widget ) :pass
example# 9473
def __init__ ( self , widgets , attrs = None ) :pass
example# 9474
self . widgets = [ w ( ) if isinstance ( w , type ) else w for w in widgets ]
example# 9475
super ( MultiWidget , self ) . __init__ ( attrs )
example# 9476
@ property
def dummy(): pass
example# 9477
def is_hidden ( self ) :pass
example# 9478
return all ( w . is_hidden for w in self . widgets )
example# 9479
def render ( self , name , value , attrs = None ) :pass
example# 9480
if self . is_localized :pass
example# 9481
for widget in self . widgets :pass
example# 9482
widget . is_localized = self . is_localized
example# 9483
if not isinstance ( value , list ) :pass
example# 9484
value = self . decompress ( value )
example# 9485
output = [ ]
example# 9486
final_attrs = self . build_attrs ( attrs )
example# 9487
id_ = final_attrs . get ( '_STR:0_' , None )
example# 9488
for i , widget in enumerate ( self . widgets ) :pass
example# 9489
try :pass
except: pass
example# 9490
widget_value = value [ i ]
example# 9491
try: pass
except IndexError :pass
example# 9492
widget_value = None
example# 9493
if id_ :pass
example# 9494
final_attrs = dict ( final_attrs , id = '_STR:0_' % ( id_ , i ) )
example# 9495
output . append ( widget . render ( name + '_%s' % i , widget_value , final_attrs ) )
example# 9496
return mark_safe ( self . format_output ( output ) )
example# 9497
def id_for_label ( self , id_ ) :pass
example# 9498
if id_ :pass
example# 9499
id_ += '_STR:0_'
example# 9500
return id_
example# 9501
def value_from_datadict ( self , data , files , name ) :pass
example# 9502
return [ widget . value_from_datadict ( data , files , name + '_%s' % i ) for i , widget in enumerate ( self . widgets ) ]
example# 9503
def format_output ( self , rendered_widgets ) :pass
example# 9504
return '' . join ( rendered_widgets )
example# 9505
def decompress ( self , value ) :pass
example# 9506
raise NotImplementedError ( '_STR:0_' )
example# 9507
def _get_media ( self ) :pass
example# 9508
media = Media ( )
example# 9509
for w in self . widgets :pass
example# 9510
media = media + w . media
example# 9511
return media
example# 9512
media = property ( _get_media )
example# 9513
def __deepcopy__ ( self , memo ) :pass
example# 9514
obj = super ( MultiWidget , self ) . __deepcopy__ ( memo )
example# 9515
obj . widgets = copy . deepcopy ( self . widgets )
example# 9516
return obj
example# 9517
@ property
def dummy(): pass
example# 9518
def needs_multipart_form ( self ) :pass
example# 9519
return any ( w . needs_multipart_form for w in self . widgets )
example# 9520
class SplitDateTimeWidget ( MultiWidget ) :pass
example# 9521
supports_microseconds = False
example# 9522
def __init__ ( self , attrs = None , date_format = None , time_format = None ) :pass
example# 9523
widgets = ( DateInput ( attrs = attrs , format = date_format ) ,  TimeInput ( attrs = attrs , format = time_format ) )
example# 9524
super ( SplitDateTimeWidget , self ) . __init__ ( widgets , attrs )
example# 9525
def decompress ( self , value ) :pass
example# 9526
if value :pass
example# 9527
value = to_current_timezone ( value )
example# 9528
return [ value . date ( ) , value . time ( ) . replace ( microsecond = 0 ) ]
example# 9529
return [ None , None ]
example# 9530
class SplitHiddenDateTimeWidget ( SplitDateTimeWidget ) :pass
example# 9531
def __init__ ( self , attrs = None , date_format = None , time_format = None ) :pass
example# 9532
super ( SplitHiddenDateTimeWidget , self ) . __init__ ( attrs , date_format , time_format )
example# 9533
for widget in self . widgets :pass
example# 9534
widget . input_type = '_STR:0_'
example# 9535
from django . http . cookie import SimpleCookie , parse_cookie
example# 9536
from django . http . request import ( HttpRequest , QueryDict ,  RawPostDataException , UnreadablePostError , build_request_repr )
example# 9537
from django . http . response import ( HttpResponse , StreamingHttpResponse ,  HttpResponseRedirect , HttpResponsePermanentRedirect ,  HttpResponseNotModified , HttpResponseBadRequest , HttpResponseForbidden ,  HttpResponseNotFound , HttpResponseNotAllowed , HttpResponseGone ,  HttpResponseServerError , Http404 , BadHeaderError , JsonResponse )
example# 9538
from django . http . utils import fix_location_header , conditional_content_removal
example# 9539
__all__ = [  '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' ,  '_STR:4_' , 'UnreadablePostError' , 'build_request_repr' ,  'HttpResponse' , 'StreamingHttpResponse' , 'HttpResponseRedirect' ,  'HttpResponsePermanentRedirect' , 'HttpResponseNotModified' ,  'HttpResponseBadRequest' , 'HttpResponseForbidden' , 'HttpResponseNotFound' ,  'HttpResponseNotAllowed' , 'HttpResponseGone' , 'HttpResponseServerError' ,  'Http404' , 'BadHeaderError' , 'fix_location_header' , 'JsonResponse' ,  'conditional_content_removal' ,  ]
example# 9540
from __future__ import unicode_literals
example# 9541
from django . utils . encoding import force_str
example# 9542
from django . utils import six
example# 9543
from django . utils . six . moves import http_cookies
example# 9544
_cookie_encodes_correctly = http_cookies . SimpleCookie ( ) . value_encode ( '_STR:0_' ) == ( '_STR:0_' , '"\\073"' )
example# 9545
_tc = http_cookies . SimpleCookie ( )
example# 9546
try :pass
except: pass
example# 9547
_tc . load ( str ( '_STR:0_' ) )
example# 9548
_cookie_allows_colon_in_names = True
example# 9549
try: pass
except http_cookies . CookieError :pass
example# 9550
_cookie_allows_colon_in_names = False
example# 9551
if _cookie_encodes_correctly and _cookie_allows_colon_in_names :pass
example# 9552
SimpleCookie = http_cookies . SimpleCookie
example# 9553
if True: pass
else :pass
example# 9554
Morsel = http_cookies . Morsel
example# 9555
class SimpleCookie ( http_cookies . SimpleCookie ) :pass
example# 9556
if not _cookie_encodes_correctly :pass
example# 9557
def value_encode ( self , val ) :pass
example# 9558
val , encoded = super ( SimpleCookie , self ) . value_encode ( val )
example# 9559
encoded = encoded . replace ( ";" , '_STR:2_' ) . replace ( "," , '_STR:0_' )
example# 9560
if "\\" in encoded and not encoded . startswith ( '"' ) :pass
example# 9561
encoded = '"' + encoded + '"'
example# 9562
return val , encoded
example# 9563
if not _cookie_allows_colon_in_names :pass
example# 9564
def load ( self , rawdata ) :pass
example# 9565
self . bad_cookies = set ( )
example# 9566
if six . PY2 and isinstance ( rawdata , six . text_type ) :pass
example# 9567
rawdata = force_str ( rawdata )
example# 9568
super ( SimpleCookie , self ) . load ( rawdata )
example# 9569
for key in self . bad_cookies :pass
example# 9570
del self [ key ]
example# 9571
def _BaseCookie__set ( self , key , real_value , coded_value ) :pass
example# 9572
key = force_str ( key )
example# 9573
try :pass
except: pass
example# 9574
M = self . get ( key , Morsel ( ) )
example# 9575
M . set ( key , real_value , coded_value )
example# 9576
dict . __setitem__ ( self , key , M )
example# 9577
try: pass
except http_cookies . CookieError :pass
example# 9578
if not hasattr ( self , '_STR:0_' ) :pass
example# 9579
self . bad_cookies = set ( )
example# 9580
self . bad_cookies . add ( key )
example# 9581
dict . __setitem__ ( self , key , http_cookies . Morsel ( ) )
example# 9582
def parse_cookie ( cookie ) :pass
example# 9583
if cookie == '' :pass
example# 9584
return { }
example# 9585
if not isinstance ( cookie , http_cookies . BaseCookie ) :pass
example# 9586
try :pass
except: pass
example# 9587
c = SimpleCookie ( )
example# 9588
c . load ( cookie )
example# 9589
try: pass
except http_cookies . CookieError :pass
example# 9590
return { }
example# 9591
if True: pass
else :pass
example# 9592
c = cookie
example# 9593
cookiedict = { }
example# 9594
for key in c . keys ( ) :pass
example# 9595
cookiedict [ key ] = c . get ( key ) . value
example# 9596
return cookiedict
example# 9597
from __future__ import unicode_literals
example# 9598
import base64
example# 9599
import binascii
example# 9600
import cgi
example# 9601
import sys
example# 9602
from django . conf import settings
example# 9603
from django . core . exceptions import SuspiciousMultipartForm
example# 9604
from django . utils . datastructures import MultiValueDict
example# 9605
from django . utils . encoding import force_text
example# 9606
from django . utils import six
example# 9607
from django . utils . text import unescape_entities
example# 9608
from django . core . files . uploadhandler import StopUpload , SkipFile , StopFutureHandlers
example# 9609
__all__ = ( '_STR:0_' , '_STR:1_' , '_STR:2_' )
example# 9610
class MultiPartParserError ( Exception ) :pass
example# 9611
pass
example# 9612
class InputStreamExhausted ( Exception ) :pass
example# 9613
pass
example# 9614
RAW = '_STR:0_'
example# 9615
FILE = "file"
example# 9616
FIELD = "field"
example# 9617
_BASE64_DECODE_ERROR = TypeError if six . PY2 else binascii . Error
example# 9618
class MultiPartParser ( object ) :pass
example# 9619
def __init__ ( self , META , input_data , upload_handlers , encoding = None ) :pass
example# 9620
content_type = META . get ( '_STR:0_' , META . get ( 'CONTENT_TYPE' , '' ) )
example# 9621
if not content_type . startswith ( '_STR:1_' ) :pass
example# 9622
raise MultiPartParserError ( '_STR:0_' % content_type )
example# 9623
ctypes , opts = parse_header ( content_type . encode ( '_STR:0_' ) )
example# 9624
boundary = opts . get ( '_STR:0_' )
example# 9625
if not boundary or not cgi . valid_boundary ( boundary ) :pass
example# 9626
raise MultiPartParserError ( '_STR:0_' % boundary )
example# 9627
try :pass
except: pass
example# 9628
content_length = int ( META . get ( '_STR:0_' , META . get ( '_STR:1_' , 0 ) ) )
example# 9629
try: pass
except ( ValueError , TypeError ) :pass
example# 9630
content_length = 0
example# 9631
if content_length < 0 :pass
example# 9632
raise MultiPartParserError ( '_STR:0_' % content_length )
example# 9633
if isinstance ( boundary , six . text_type ) :pass
example# 9634
boundary = boundary . encode ( '_STR:0_' )
example# 9635
self . _boundary = boundary
example# 9636
self . _input_data = input_data
example# 9637
possible_sizes = [ x . chunk_size for x in upload_handlers if x . chunk_size ]
example# 9638
self . _chunk_size = min ( [ 2 ** 31 - 4 ] + possible_sizes )
example# 9639
self . _meta = META
example# 9640
self . _encoding = encoding or settings . DEFAULT_CHARSET
example# 9641
self . _content_length = content_length
example# 9642
self . _upload_handlers = upload_handlers
example# 9643
def parse ( self ) :pass
example# 9644
from django . http import QueryDict
example# 9645
encoding = self . _encoding
example# 9646
handlers = self . _upload_handlers
example# 9647
if self . _content_length == 0 :pass
example# 9648
return QueryDict ( '' , encoding = self . _encoding ) , MultiValueDict ( )
example# 9649
for handler in handlers :pass
example# 9650
result = handler . handle_raw_input ( self . _input_data ,  self . _meta ,  self . _content_length ,  self . _boundary ,  encoding )
example# 9651
if result is not None :pass
example# 9652
return result [ 0 ] , result [ 1 ]
example# 9653
self . _post = QueryDict ( '' , mutable = True )
example# 9654
self . _files = MultiValueDict ( )
example# 9655
stream = LazyStream ( ChunkIter ( self . _input_data , self . _chunk_size ) )
example# 9656
old_field_name = None
example# 9657
counters = [ 0 ] * len ( handlers )
example# 9658
try :pass
except: pass
example# 9659
for item_type , meta_data , field_stream in Parser ( stream , self . _boundary ) :pass
example# 9660
if old_field_name :pass
example# 9661
self . handle_file_complete ( old_field_name , counters )
example# 9662
old_field_name = None
example# 9663
try :pass
except: pass
example# 9664
disposition = meta_data [ '_STR:0_' ] [ 1 ]
example# 9665
field_name = disposition [ '_STR:0_' ] . strip ( )
example# 9666
try: pass
except ( KeyError , IndexError , AttributeError ) :pass
example# 9667
continue
example# 9668
transfer_encoding = meta_data . get ( '_STR:0_' )
example# 9669
if transfer_encoding is not None :pass
example# 9670
transfer_encoding = transfer_encoding [ 0 ] . strip ( )
example# 9671
field_name = force_text ( field_name , encoding , errors = '_STR:0_' )
example# 9672
if item_type == FIELD :pass
example# 9673
if transfer_encoding == '_STR:0_' :pass
example# 9674
raw_data = field_stream . read ( )
example# 9675
try :pass
except: pass
example# 9676
data = base64 . b64decode ( raw_data )
example# 9677
try: pass
except _BASE64_DECODE_ERROR :pass
example# 9678
data = raw_data
example# 9679
if True: pass
else :pass
example# 9680
data = field_stream . read ( )
example# 9681
self . _post . appendlist ( field_name ,  force_text ( data , encoding , errors = 'replace' ) )
example# 9682
if True: pass
elif item_type == FILE :pass
example# 9683
file_name = disposition . get ( '_STR:0_' )
example# 9684
if not file_name :pass
example# 9685
continue
example# 9686
file_name = force_text ( file_name , encoding , errors = '_STR:0_' )
example# 9687
file_name = self . IE_sanitize ( unescape_entities ( file_name ) )
example# 9688
content_type , content_type_extra = meta_data . get ( '_STR:0_' , ( '' , { } ) )
example# 9689
content_type = content_type . strip ( )
example# 9690
charset = content_type_extra . get ( '_STR:0_' )
example# 9691
try :pass
except: pass
example# 9692
content_length = int ( meta_data . get ( '_STR:0_' ) [ 0 ] )
example# 9693
try: pass
except ( IndexError , TypeError , ValueError ) :pass
example# 9694
content_length = None
example# 9695
counters = [ 0 ] * len ( handlers )
example# 9696
try :pass
except: pass
example# 9697
for handler in handlers :pass
example# 9698
try :pass
except: pass
example# 9699
handler . new_file ( field_name , file_name ,  content_type , content_length ,  charset , content_type_extra )
example# 9700
try: pass
except StopFutureHandlers :pass
example# 9701
break
example# 9702
for chunk in field_stream :pass
example# 9703
if transfer_encoding == '_STR:0_' :pass
example# 9704
over_bytes = len ( chunk ) % 4
example# 9705
if over_bytes :pass
example# 9706
over_chunk = field_stream . read ( 4 - over_bytes )
example# 9707
chunk += over_chunk
example# 9708
try :pass
except: pass
example# 9709
chunk = base64 . b64decode ( chunk )
example# 9710
try: pass
except Exception as e :pass
example# 9711
msg = '_STR:0_' % e
example# 9712
six . reraise ( MultiPartParserError , MultiPartParserError ( msg ) , sys . exc_info ( ) [ 2 ] )
example# 9713
for i , handler in enumerate ( handlers ) :pass
example# 9714
chunk_length = len ( chunk )
example# 9715
chunk = handler . receive_data_chunk ( chunk ,  counters [ i ] )
example# 9716
counters [ i ] += chunk_length
example# 9717
if chunk is None :pass
example# 9718
break
example# 9719
try: pass
except SkipFile :pass
example# 9720
self . _close_files ( )
example# 9721
exhaust ( field_stream )
example# 9722
if True: pass
else :pass
example# 9723
old_field_name = field_name
example# 9724
if True: pass
else :pass
example# 9725
exhaust ( stream )
example# 9726
try: pass
except StopUpload as e :pass
example# 9727
self . _close_files ( )
example# 9728
if not e . connection_reset :pass
example# 9729
exhaust ( self . _input_data )
example# 9730
if True: pass
else :pass
example# 9731
exhaust ( self . _input_data )
example# 9732
for handler in handlers :pass
example# 9733
retval = handler . upload_complete ( )
example# 9734
if retval :pass
example# 9735
break
example# 9736
return self . _post , self . _files
example# 9737
def handle_file_complete ( self , old_field_name , counters ) :pass
example# 9738
for i , handler in enumerate ( self . _upload_handlers ) :pass
example# 9739
file_obj = handler . file_complete ( counters [ i ] )
example# 9740
if file_obj :pass
example# 9741
self . _files . appendlist (  force_text ( old_field_name , self . _encoding , errors = '_STR:0_' ) ,  file_obj )
example# 9742
break
example# 9743
def IE_sanitize ( self , filename ) :pass
example# 9744
return filename and filename [ filename . rfind ( "\\" ) + 1 : ] . strip ( )
example# 9745
def _close_files ( self ) :pass
example# 9746
for handler in self . _upload_handlers :pass
example# 9747
if hasattr ( handler , '_STR:0_' ) :pass
example# 9748
handler . file . close ( )
example# 9749
class LazyStream ( six . Iterator ) :pass
example# 9750
def __init__ ( self , producer , length = None ) :pass
example# 9751
self . _producer = producer
example# 9752
self . _empty = False
example# 9753
self . _leftover = b''
example# 9754
self . length = length
example# 9755
self . position = 0
example# 9756
self . _remaining = length
example# 9757
self . _unget_history = [ ]
example# 9758
def tell ( self ) :pass
example# 9759
return self . position
example# 9760
def read ( self , size = None ) :pass
example# 9761
def parts ( ) :pass
example# 9762
remaining = self . _remaining if size is None else size
example# 9763
if remaining is None :pass
example# 9764
yield b'' . join ( self )
example# 9765
return
example# 9766
while remaining != 0 :pass
example# 9767
assert remaining > 0 , '_STR:0_'
example# 9768
chunk = next ( self )
example# 9769
emitting = chunk [ : remaining ]
example# 9770
self . unget ( chunk [ remaining : ] )
example# 9771
remaining -= len ( emitting )
example# 9772
yield emitting
example# 9773
out = b'' . join ( parts ( ) )
example# 9774
return out
example# 9775
def __next__ ( self ) :pass
example# 9776
if self . _leftover :pass
example# 9777
output = self . _leftover
example# 9778
self . _leftover = b''
example# 9779
if True: pass
else :pass
example# 9780
output = next ( self . _producer )
example# 9781
self . _unget_history = [ ]
example# 9782
self . position += len ( output )
example# 9783
return output
example# 9784
def close ( self ) :pass
example# 9785
self . _producer = [ ]
example# 9786
def __iter__ ( self ) :pass
example# 9787
return self
example# 9788
def unget ( self , bytes ) :pass
example# 9789
if not bytes :pass
example# 9790
return
example# 9791
self . _update_unget_history ( len ( bytes ) )
example# 9792
self . position -= len ( bytes )
example# 9793
self . _leftover = b'' . join ( [ bytes , self . _leftover ] )
example# 9794
def _update_unget_history ( self , num_bytes ) :pass
example# 9795
self . _unget_history = [ num_bytes ] + self . _unget_history [ : 49 ]
example# 9796
number_equal = len ( [ current_number for current_number in self . _unget_history  if current_number == num_bytes ] )
example# 9797
if number_equal > 40 :pass
example# 9798
raise SuspiciousMultipartForm (  '_STR:0_'  " normal uploaded files. Check for malicious upload activity;"  " if there is none, report this to the Django developers."  )
example# 9799
class ChunkIter ( six . Iterator ) :pass
example# 9800
def __init__ ( self , flo , chunk_size = 64 * 1024 ) :pass
example# 9801
self . flo = flo
example# 9802
self . chunk_size = chunk_size
example# 9803
def __next__ ( self ) :pass
example# 9804
try :pass
except: pass
example# 9805
data = self . flo . read ( self . chunk_size )
example# 9806
try: pass
except InputStreamExhausted :pass
example# 9807
raise StopIteration ( )
example# 9808
if data :pass
example# 9809
return data
example# 9810
if True: pass
else :pass
example# 9811
raise StopIteration ( )
example# 9812
def __iter__ ( self ) :pass
example# 9813
return self
example# 9814
class InterBoundaryIter ( six . Iterator ) :pass
example# 9815
def __init__ ( self , stream , boundary ) :pass
example# 9816
self . _stream = stream
example# 9817
self . _boundary = boundary
example# 9818
def __iter__ ( self ) :pass
example# 9819
return self
example# 9820
def __next__ ( self ) :pass
example# 9821
try :pass
except: pass
example# 9822
return LazyStream ( BoundaryIter ( self . _stream , self . _boundary ) )
example# 9823
try: pass
except InputStreamExhausted :pass
example# 9824
raise StopIteration ( )
example# 9825
class BoundaryIter ( six . Iterator ) :pass
example# 9826
def __init__ ( self , stream , boundary ) :pass
example# 9827
self . _stream = stream
example# 9828
self . _boundary = boundary
example# 9829
self . _done = False
example# 9830
self . _rollback = len ( boundary ) + 6
example# 9831
unused_char = self . _stream . read ( 1 )
example# 9832
if not unused_char :pass
example# 9833
raise InputStreamExhausted ( )
example# 9834
self . _stream . unget ( unused_char )
example# 9835
def __iter__ ( self ) :pass
example# 9836
return self
example# 9837
def __next__ ( self ) :pass
example# 9838
if self . _done :pass
example# 9839
raise StopIteration ( )
example# 9840
stream = self . _stream
example# 9841
rollback = self . _rollback
example# 9842
bytes_read = 0
example# 9843
chunks = [ ]
example# 9844
for bytes in stream :pass
example# 9845
bytes_read += len ( bytes )
example# 9846
chunks . append ( bytes )
example# 9847
if bytes_read > rollback :pass
example# 9848
break
example# 9849
if not bytes :pass
example# 9850
break
example# 9851
if True: pass
else :pass
example# 9852
self . _done = True
example# 9853
if not chunks :pass
example# 9854
raise StopIteration ( )
example# 9855
chunk = b'' . join ( chunks )
example# 9856
boundary = self . _find_boundary ( chunk , len ( chunk ) < self . _rollback )
example# 9857
if boundary :pass
example# 9858
end , next = boundary
example# 9859
stream . unget ( chunk [ next : ] )
example# 9860
self . _done = True
example# 9861
return chunk [ : end ]
example# 9862
if True: pass
else :pass
example# 9863
if not chunk [ : - rollback ] :pass
example# 9864
self . _done = True
example# 9865
return chunk
example# 9866
if True: pass
else :pass
example# 9867
stream . unget ( chunk [ - rollback : ] )
example# 9868
return chunk [ : - rollback ]
example# 9869
def _find_boundary ( self , data , eof = False ) :pass
example# 9870
index = data . find ( self . _boundary )
example# 9871
if index < 0 :pass
example# 9872
return None
example# 9873
if True: pass
else :pass
example# 9874
end = index
example# 9875
next = index + len ( self . _boundary )
example# 9876
last = max ( 0 , end - 1 )
example# 9877
if data [ last : last + 1 ] == b'\n' :pass
example# 9878
end -= 1
example# 9879
last = max ( 0 , end - 1 )
example# 9880
if data [ last : last + 1 ] == b'\r' :pass
example# 9881
end -= 1
example# 9882
return end , next
example# 9883
def exhaust ( stream_or_iterable ) :pass
example# 9884
iterator = None
example# 9885
try :pass
except: pass
example# 9886
iterator = iter ( stream_or_iterable )
example# 9887
try: pass
except TypeError :pass
example# 9888
iterator = ChunkIter ( stream_or_iterable , 16384 )
example# 9889
if iterator is None :pass
example# 9890
raise MultiPartParserError ( '_STR:0_' )
example# 9891
for __ in iterator :pass
example# 9892
pass
example# 9893
def parse_boundary_stream ( stream , max_header_size ) :pass
example# 9894
chunk = stream . read ( max_header_size )
example# 9895
header_end = chunk . find ( b'_STR:0_' )
example# 9896
def _parse_header ( line ) :pass
example# 9897
main_value_pair , params = parse_header ( line )
example# 9898
try :pass
except: pass
example# 9899
name , value = main_value_pair . split ( '_STR:0_' , 1 )
example# 9900
try: pass
except ValueError :pass
example# 9901
raise ValueError ( '_STR:0_' % line )
example# 9902
return name , ( value , params )
example# 9903
if header_end == - 1 :pass
example# 9904
stream . unget ( chunk )
example# 9905
return ( RAW , { } , stream )
example# 9906
header = chunk [ : header_end ]
example# 9907
stream . unget ( chunk [ header_end + 4 : ] )
example# 9908
TYPE = RAW
example# 9909
outdict = { }
example# 9910
for line in header . split ( b'_STR:0_' ) :pass
example# 9911
try :pass
except: pass
example# 9912
name , ( value , params ) = _parse_header ( line )
example# 9913
try: pass
except ValueError :pass
example# 9914
continue
example# 9915
if name == '_STR:0_' :pass
example# 9916
TYPE = FIELD
example# 9917
if params . get ( '_STR:0_' ) :pass
example# 9918
TYPE = FILE
example# 9919
outdict [ name ] = value , params
example# 9920
if TYPE == RAW :pass
example# 9921
stream . unget ( chunk )
example# 9922
return ( TYPE , outdict , stream )
example# 9923
class Parser ( object ) :pass
example# 9924
def __init__ ( self , stream , boundary ) :pass
example# 9925
self . _stream = stream
example# 9926
self . _separator = b'_STR:0_' + boundary
example# 9927
def __iter__ ( self ) :pass
example# 9928
boundarystream = InterBoundaryIter ( self . _stream , self . _separator )
example# 9929
for sub_stream in boundarystream :pass
example# 9930
yield parse_boundary_stream ( sub_stream , 1024 )
example# 9931
def parse_header ( line ) :pass
example# 9932
plist = _parse_header_params ( b'_STR:0_' + line )
example# 9933
key = plist . pop ( 0 ) . lower ( ) . decode ( '_STR:0_' )
example# 9934
pdict = { }
example# 9935
for p in plist :pass
example# 9936
i = p . find ( b'_STR:0_' )
example# 9937
if i >= 0 :pass
example# 9938
name = p [ : i ] . strip ( ) . lower ( ) . decode ( 'ascii' )
example# 9939
value = p [ i + 1 : ] . strip ( )
example# 9940
if len ( value ) >= 2 and value [ : 1 ] == value [ - 1 : ] == b'"' :pass
example# 9941
value = value [ 1 : - 1 ]
example# 9942
value = value . replace ( b'\\\\' , b'\\' ) . replace ( b'\\"' , b'"' )
example# 9943
pdict [ name ] = value
example# 9944
return key , pdict
example# 9945
def _parse_header_params ( s ) :pass
example# 9946
plist = [ ]
example# 9947
while s [ : 1 ] == b'_STR:0_' :pass
example# 9948
s = s [ 1 : ]
example# 9949
end = s . find ( b'_STR:0_' )
example# 9950
while end > 0 and s . count ( b'"' , 0 , end ) % 2 :pass
example# 9951
end = s . find ( b'_STR:0_' , end + 1 )
example# 9952
if end < 0 :pass
example# 9953
end = len ( s )
example# 9954
f = s [ : end ]
example# 9955
plist . append ( f . strip ( ) )
example# 9956
s = s [ end : ]
example# 9957
return plist
example# 9958
from __future__ import unicode_literals
example# 9959
import copy
example# 9960
import os
example# 9961
import re
example# 9962
import sys
example# 9963
from io import BytesIO
example# 9964
from itertools import chain
example# 9965
from pprint import pformat
example# 9966
from django . conf import settings
example# 9967
from django . core import signing
example# 9968
from django . core . exceptions import DisallowedHost , ImproperlyConfigured
example# 9969
from django . core . files import uploadhandler
example# 9970
from django . http . multipartparser import MultiPartParser , MultiPartParserError
example# 9971
from django . utils import six
example# 9972
from django . utils . datastructures import MultiValueDict , ImmutableList
example# 9973
from django . utils . encoding import force_bytes , force_text , force_str , iri_to_uri
example# 9974
from django . utils . six . moves . urllib . parse import parse_qsl , urlencode , quote , urljoin , urlsplit
example# 9975
RAISE_ERROR = object ( )
example# 9976
absolute_http_url_re = re . compile ( r'_STR:0_' , re . I )
example# 9977
host_validation_re = re . compile ( r'_STR:0_' )
example# 9978
class UnreadablePostError ( IOError ) :pass
example# 9979
pass
example# 9980
class RawPostDataException ( Exception ) :pass
example# 9981
pass
example# 9982
class HttpRequest ( object ) :pass
example# 9983
_encoding = None
example# 9984
_upload_handlers = [ ]
example# 9985
def __init__ ( self ) :pass
example# 9986
self . GET = QueryDict ( mutable = True )
example# 9987
self . POST = QueryDict ( mutable = True )
example# 9988
self . COOKIES = { }
example# 9989
self . META = { }
example# 9990
self . FILES = MultiValueDict ( )
example# 9991
self . path = ''
example# 9992
self . path_info = ''
example# 9993
self . method = None
example# 9994
self . resolver_match = None
example# 9995
self . _post_parse_error = False
example# 9996
def __repr__ ( self ) :pass
example# 9997
return build_request_repr ( self )
example# 9998
def get_host ( self ) :pass
example# 9999
if settings . USE_X_FORWARDED_HOST and (  '_STR:0_' in self . META ) :pass
example# 10000
host = self . META [ '_STR:0_' ]
example# 10001
if True: pass
elif '_STR:0_' in self . META :pass
example# 10002
host = self . META [ '_STR:0_' ]
example# 10003
if True: pass
else :pass
example# 10004
host = self . META [ '_STR:0_' ]
example# 10005
server_port = str ( self . META [ 'SERVER_PORT' ] )
example# 10006
if server_port != ( '_STR:0_' if self . is_secure ( ) else '80' ) :pass
example# 10007
host = '%s:%s' % ( host , server_port )
example# 10008
if settings . DEBUG :pass
example# 10009
return host
example# 10010
domain , port = split_domain_port ( host )
example# 10011
if domain and validate_host ( domain , settings . ALLOWED_HOSTS ) :pass
example# 10012
return host
example# 10013
if True: pass
else :pass
example# 10014
msg = '_STR:0_' % host
example# 10015
if domain :pass
example# 10016
msg += '_STR:0_' % domain
example# 10017
if True: pass
else :pass
example# 10018
msg += '_STR:0_'
example# 10019
raise DisallowedHost ( msg )
example# 10020
def get_full_path ( self ) :pass
example# 10021
return '%s%s' % ( self . path , ( '?' + iri_to_uri ( self . META . get ( '_STR:0_' , '' ) ) ) if self . META . get ( '_STR:0_' , '' ) else '' )
example# 10022
def get_signed_cookie ( self , key , default = RAISE_ERROR , salt = '' , max_age = None ) :pass
example# 10023
try :pass
except: pass
example# 10024
cookie_value = self . COOKIES [ key ]
example# 10025
try: pass
except KeyError :pass
example# 10026
if default is not RAISE_ERROR :pass
example# 10027
return default
example# 10028
if True: pass
else :pass
example# 10029
raise
example# 10030
try :pass
except: pass
example# 10031
value = signing . get_cookie_signer ( salt = key + salt ) . unsign (  cookie_value , max_age = max_age )
example# 10032
try: pass
except signing . BadSignature :pass
example# 10033
if default is not RAISE_ERROR :pass
example# 10034
return default
example# 10035
if True: pass
else :pass
example# 10036
raise
example# 10037
return value
example# 10038
def build_absolute_uri ( self , location = None ) :pass
example# 10039
if location is None :pass
example# 10040
location = '//%s' % self . get_full_path ( )
example# 10041
bits = urlsplit ( location )
example# 10042
if not ( bits . scheme and bits . netloc ) :pass
example# 10043
current_uri = '_STR:0_' . format ( scheme = self . scheme ,  host = self . get_host ( ) ,  path = self . path )
example# 10044
location = urljoin ( current_uri , location )
example# 10045
return iri_to_uri ( location )
example# 10046
def _get_scheme ( self ) :pass
example# 10047
return '_STR:0_' if os . environ . get ( '_STR:1_' ) == "on" else '_STR:3_'
example# 10048
@ property
def dummy(): pass
example# 10049
def scheme ( self ) :pass
example# 10050
if settings . SECURE_PROXY_SSL_HEADER :pass
example# 10051
try :pass
except: pass
example# 10052
header , value = settings . SECURE_PROXY_SSL_HEADER
example# 10053
try: pass
except ValueError :pass
example# 10054
raise ImproperlyConfigured ( '_STR:0_' )
example# 10055
if self . META . get ( header , None ) == value :pass
example# 10056
return '_STR:0_'
example# 10057
return self . _get_scheme ( )
example# 10058
def is_secure ( self ) :pass
example# 10059
return self . scheme == '_STR:0_'
example# 10060
def is_ajax ( self ) :pass
example# 10061
return self . META . get ( '_STR:0_' ) == '_STR:1_'
example# 10062
@ property
def dummy(): pass
example# 10063
def encoding ( self ) :pass
example# 10064
return self . _encoding
example# 10065
@ encoding . setter
def dummy(): pass
example# 10066
def encoding ( self , val ) :pass
example# 10067
self . _encoding = val
example# 10068
if hasattr ( self , '_STR:0_' ) :pass
example# 10069
del self . _get
example# 10070
if hasattr ( self , '_STR:0_' ) :pass
example# 10071
del self . _post
example# 10072
def _initialize_handlers ( self ) :pass
example# 10073
self . _upload_handlers = [ uploadhandler . load_handler ( handler , self )  for handler in settings . FILE_UPLOAD_HANDLERS ]
example# 10074
@ property
def dummy(): pass
example# 10075
def upload_handlers ( self ) :pass
example# 10076
if not self . _upload_handlers :pass
example# 10077
self . _initialize_handlers ( )
example# 10078
return self . _upload_handlers
example# 10079
@ upload_handlers . setter
def dummy(): pass
example# 10080
def upload_handlers ( self , upload_handlers ) :pass
example# 10081
if hasattr ( self , '_STR:0_' ) :pass
example# 10082
raise AttributeError ( '_STR:0_' )
example# 10083
self . _upload_handlers = upload_handlers
example# 10084
def parse_file_upload ( self , META , post_data ) :pass
example# 10085
self . upload_handlers = ImmutableList (  self . upload_handlers ,  warning = "You cannot alter upload handlers after the upload has been processed."  )
example# 10086
parser = MultiPartParser ( META , post_data , self . upload_handlers , self . encoding )
example# 10087
return parser . parse ( )
example# 10088
@ property
def dummy(): pass
example# 10089
def body ( self ) :pass
example# 10090
if not hasattr ( self , '_STR:0_' ) :pass
example# 10091
if self . _read_started :pass
example# 10092
raise RawPostDataException ( '_STR:0_' )
example# 10093
try :pass
except: pass
example# 10094
self . _body = self . read ( )
example# 10095
try: pass
except IOError as e :pass
example# 10096
six . reraise ( UnreadablePostError , UnreadablePostError ( * e . args ) , sys . exc_info ( ) [ 2 ] )
example# 10097
self . _stream = BytesIO ( self . _body )
example# 10098
return self . _body
example# 10099
def _mark_post_parse_error ( self ) :pass
example# 10100
self . _post = QueryDict ( '' )
example# 10101
self . _files = MultiValueDict ( )
example# 10102
self . _post_parse_error = True
example# 10103
def _load_post_and_files ( self ) :pass
example# 10104
if self . method != '_STR:0_' :pass
example# 10105
self . _post , self . _files = QueryDict ( '' , encoding = self . _encoding ) , MultiValueDict ( )
example# 10106
return
example# 10107
if self . _read_started and not hasattr ( self , '_STR:0_' ) :pass
example# 10108
self . _mark_post_parse_error ( )
example# 10109
return
example# 10110
if self . META . get ( '_STR:0_' , '' ) . startswith ( '_STR:1_' ) :pass
example# 10111
if hasattr ( self , '_STR:0_' ) :pass
example# 10112
data = BytesIO ( self . _body )
example# 10113
if True: pass
else :pass
example# 10114
data = self
example# 10115
try :pass
except: pass
example# 10116
self . _post , self . _files = self . parse_file_upload ( self . META , data )
example# 10117
try: pass
except MultiPartParserError :pass
example# 10118
self . _mark_post_parse_error ( )
example# 10119
raise
example# 10120
if True: pass
elif self . META . get ( '_STR:0_' , '' ) . startswith ( '_STR:1_' ) :pass
example# 10121
self . _post , self . _files = QueryDict ( self . body , encoding = self . _encoding ) , MultiValueDict ( )
example# 10122
if True: pass
else :pass
example# 10123
self . _post , self . _files = QueryDict ( '' , encoding = self . _encoding ) , MultiValueDict ( )
example# 10124
def close ( self ) :pass
example# 10125
if hasattr ( self , '_STR:0_' ) :pass
example# 10126
for f in chain . from_iterable ( l [ 1 ] for l in self . _files . lists ( ) ) :pass
example# 10127
f . close ( )
example# 10128
def read ( self , * args , ** kwargs ) :pass
example# 10129
self . _read_started = True
example# 10130
try :pass
except: pass
example# 10131
return self . _stream . read ( * args , ** kwargs )
example# 10132
try: pass
except IOError as e :pass
example# 10133
six . reraise ( UnreadablePostError , UnreadablePostError ( * e . args ) , sys . exc_info ( ) [ 2 ] )
example# 10134
def readline ( self , * args , ** kwargs ) :pass
example# 10135
self . _read_started = True
example# 10136
try :pass
except: pass
example# 10137
return self . _stream . readline ( * args , ** kwargs )
example# 10138
try: pass
except IOError as e :pass
example# 10139
six . reraise ( UnreadablePostError , UnreadablePostError ( * e . args ) , sys . exc_info ( ) [ 2 ] )
example# 10140
def xreadlines ( self ) :pass
example# 10141
while True :pass
example# 10142
buf = self . readline ( )
example# 10143
if not buf :pass
example# 10144
break
example# 10145
yield buf
example# 10146
__iter__ = xreadlines
example# 10147
def readlines ( self ) :pass
example# 10148
return list ( iter ( self ) )
example# 10149
class QueryDict ( MultiValueDict ) :pass
example# 10150
_mutable = True
example# 10151
_encoding = None
example# 10152
def __init__ ( self , query_string = None , mutable = False , encoding = None ) :pass
example# 10153
super ( QueryDict , self ) . __init__ ( )
example# 10154
if not encoding :pass
example# 10155
encoding = settings . DEFAULT_CHARSET
example# 10156
self . encoding = encoding
example# 10157
if six . PY3 :pass
example# 10158
if isinstance ( query_string , bytes ) :pass
example# 10159
query_string = query_string . decode ( )
example# 10160
for key , value in parse_qsl ( query_string or '' ,  keep_blank_values = True ,  encoding = encoding ) :pass
example# 10161
self . appendlist ( key , value )
example# 10162
if True: pass
else :pass
example# 10163
for key , value in parse_qsl ( query_string or '' ,  keep_blank_values = True ) :pass
example# 10164
self . appendlist ( force_text ( key , encoding , errors = 'replace' ) ,  force_text ( value , encoding , errors = 'replace' ) )
example# 10165
self . _mutable = mutable
example# 10166
@ property
def dummy(): pass
example# 10167
def encoding ( self ) :pass
example# 10168
if self . _encoding is None :pass
example# 10169
self . _encoding = settings . DEFAULT_CHARSET
example# 10170
return self . _encoding
example# 10171
@ encoding . setter
def dummy(): pass
example# 10172
def encoding ( self , value ) :pass
example# 10173
self . _encoding = value
example# 10174
def _assert_mutable ( self ) :pass
example# 10175
if not self . _mutable :pass
example# 10176
raise AttributeError ( '_STR:0_' )
example# 10177
def __setitem__ ( self , key , value ) :pass
example# 10178
self . _assert_mutable ( )
example# 10179
key = bytes_to_text ( key , self . encoding )
example# 10180
value = bytes_to_text ( value , self . encoding )
example# 10181
super ( QueryDict , self ) . __setitem__ ( key , value )
example# 10182
def __delitem__ ( self , key ) :pass
example# 10183
self . _assert_mutable ( )
example# 10184
super ( QueryDict , self ) . __delitem__ ( key )
example# 10185
def __copy__ ( self ) :pass
example# 10186
result = self . __class__ ( '' , mutable = True , encoding = self . encoding )
example# 10187
for key , value in six . iterlists ( self ) :pass
example# 10188
result . setlist ( key , value )
example# 10189
return result
example# 10190
def __deepcopy__ ( self , memo ) :pass
example# 10191
result = self . __class__ ( '' , mutable = True , encoding = self . encoding )
example# 10192
memo [ id ( self ) ] = result
example# 10193
for key , value in six . iterlists ( self ) :pass
example# 10194
result . setlist ( copy . deepcopy ( key , memo ) , copy . deepcopy ( value , memo ) )
example# 10195
return result
example# 10196
def setlist ( self , key , list_ ) :pass
example# 10197
self . _assert_mutable ( )
example# 10198
key = bytes_to_text ( key , self . encoding )
example# 10199
list_ = [ bytes_to_text ( elt , self . encoding ) for elt in list_ ]
example# 10200
super ( QueryDict , self ) . setlist ( key , list_ )
example# 10201
def setlistdefault ( self , key , default_list = None ) :pass
example# 10202
self . _assert_mutable ( )
example# 10203
return super ( QueryDict , self ) . setlistdefault ( key , default_list )
example# 10204
def appendlist ( self , key , value ) :pass
example# 10205
self . _assert_mutable ( )
example# 10206
key = bytes_to_text ( key , self . encoding )
example# 10207
value = bytes_to_text ( value , self . encoding )
example# 10208
super ( QueryDict , self ) . appendlist ( key , value )
example# 10209
def pop ( self , key , * args ) :pass
example# 10210
self . _assert_mutable ( )
example# 10211
return super ( QueryDict , self ) . pop ( key , * args )
example# 10212
def popitem ( self ) :pass
example# 10213
self . _assert_mutable ( )
example# 10214
return super ( QueryDict , self ) . popitem ( )
example# 10215
def clear ( self ) :pass
example# 10216
self . _assert_mutable ( )
example# 10217
super ( QueryDict , self ) . clear ( )
example# 10218
def setdefault ( self , key , default = None ) :pass
example# 10219
self . _assert_mutable ( )
example# 10220
key = bytes_to_text ( key , self . encoding )
example# 10221
default = bytes_to_text ( default , self . encoding )
example# 10222
return super ( QueryDict , self ) . setdefault ( key , default )
example# 10223
def copy ( self ) :pass
example# 10224
return self . __deepcopy__ ( { } )
example# 10225
def urlencode ( self , safe = None ) :pass
example# 10226
output = [ ]
example# 10227
if safe :pass
example# 10228
safe = force_bytes ( safe , self . encoding )
example# 10229
encode = lambda k , v : '_STR:0_' % ( ( quote ( k , safe ) , quote ( v , safe ) ) )
example# 10230
if True: pass
else :pass
example# 10231
encode = lambda k , v : urlencode ( { k : v } )
example# 10232
for k , list_ in self . lists ( ) :pass
example# 10233
k = force_bytes ( k , self . encoding )
example# 10234
output . extend ( [ encode ( k , force_bytes ( v , self . encoding ) )  for v in list_ ] )
example# 10235
return '_STR:0_' . join ( output )
example# 10236
def build_request_repr ( request , path_override = None , GET_override = None ,  POST_override = None , COOKIES_override = None ,  META_override = None ) :pass
example# 10237
try :pass
except: pass
example# 10238
get = ( pformat ( GET_override )  if GET_override is not None  else pformat ( request . GET ) )
example# 10239
try: pass
except Exception :pass
example# 10240
get = '_STR:0_'
example# 10241
if request . _post_parse_error :pass
example# 10242
post = '_STR:0_'
example# 10243
if True: pass
else :pass
example# 10244
try :pass
except: pass
example# 10245
post = ( pformat ( POST_override )  if POST_override is not None  else pformat ( request . POST ) )
example# 10246
try: pass
except Exception :pass
example# 10247
post = '_STR:0_'
example# 10248
try :pass
except: pass
example# 10249
cookies = ( pformat ( COOKIES_override )  if COOKIES_override is not None  else pformat ( request . COOKIES ) )
example# 10250
try: pass
except Exception :pass
example# 10251
cookies = '_STR:0_'
example# 10252
try :pass
except: pass
example# 10253
meta = ( pformat ( META_override )  if META_override is not None  else pformat ( request . META ) )
example# 10254
try: pass
except Exception :pass
example# 10255
meta = '_STR:0_'
example# 10256
path = path_override if path_override is not None else request . path
example# 10257
return force_str ( '_STR:0_' %  ( request . __class__ . __name__ ,  path ,  six . text_type ( get ) ,  six . text_type ( post ) ,  six . text_type ( cookies ) ,  six . text_type ( meta ) ) )
example# 10258
def bytes_to_text ( s , encoding ) :pass
example# 10259
if isinstance ( s , bytes ) :pass
example# 10260
return six . text_type ( s , encoding , '_STR:0_' )
example# 10261
if True: pass
else :pass
example# 10262
return s
example# 10263
def split_domain_port ( host ) :pass
example# 10264
host = host . lower ( )
example# 10265
if not host_validation_re . match ( host ) :pass
example# 10266
return '' , ''
example# 10267
if host [ - 1 ] == '_STR:0_' :pass
example# 10268
return host , ''
example# 10269
bits = host . rsplit ( '_STR:0_' , 1 )
example# 10270
if len ( bits ) == 2 :pass
example# 10271
return tuple ( bits )
example# 10272
return bits [ 0 ] , ''
example# 10273
def validate_host ( host , allowed_hosts ) :pass
example# 10274
host = host [ : - 1 ] if host . endswith ( '_STR:0_' ) else host
example# 10275
for pattern in allowed_hosts :pass
example# 10276
pattern = pattern . lower ( )
example# 10277
match = (  pattern == '_STR:0_' or  pattern . startswith ( '_STR:1_' ) and (  host . endswith ( pattern ) or host == pattern [ 1 : ]  ) or  pattern == host  )
example# 10278
if match :pass
example# 10279
return True
example# 10280
return False
example# 10281
from __future__ import unicode_literals
example# 10282
import datetime
example# 10283
import json
example# 10284
import sys
example# 10285
import time
example# 10286
from email . header import Header
example# 10287
from django . conf import settings
example# 10288
from django . core import signals
example# 10289
from django . core import signing
example# 10290
from django . core . exceptions import DisallowedRedirect
example# 10291
from django . core . serializers . json import DjangoJSONEncoder
example# 10292
from django . http . cookie import SimpleCookie
example# 10293
from django . utils import six , timezone
example# 10294
from django . utils . encoding import force_bytes , force_text , iri_to_uri
example# 10295
from django . utils . http import cookie_date
example# 10296
from django . utils . six . moves import map
example# 10297
from django . utils . six . moves . urllib . parse import urlparse
example# 10298
REASON_PHRASES = {  100 : '_STR:0_' ,  101 : '_STR:1_' ,  102 : 'PROCESSING' ,  200 : 'OK' ,  201 : 'CREATED' ,  202 : 'ACCEPTED' ,  203 : 'NON-AUTHORITATIVE INFORMATION' ,  204 : 'NO CONTENT' ,  205 : 'RESET CONTENT' ,  206 : 'PARTIAL CONTENT' ,  207 : 'MULTI-STATUS' ,  208 : 'ALREADY REPORTED' ,  226 : 'IM USED' ,  300 : 'MULTIPLE CHOICES' ,  301 : 'MOVED PERMANENTLY' ,  302 : 'FOUND' ,  303 : 'SEE OTHER' ,  304 : 'NOT MODIFIED' ,  305 : 'USE PROXY' ,  306 : 'RESERVED' ,  307 : 'TEMPORARY REDIRECT' ,  308 : 'PERMANENT REDIRECT' ,  400 : 'BAD REQUEST' ,  401 : 'UNAUTHORIZED' ,  402 : 'PAYMENT REQUIRED' ,  403 : 'FORBIDDEN' ,  404 : 'NOT FOUND' ,  405 : 'METHOD NOT ALLOWED' ,  406 : 'NOT ACCEPTABLE' ,  407 : 'PROXY AUTHENTICATION REQUIRED' ,  408 : 'REQUEST TIMEOUT' ,  409 : 'CONFLICT' ,  410 : 'GONE' ,  411 : 'LENGTH REQUIRED' ,  412 : 'PRECONDITION FAILED' ,  413 : 'REQUEST ENTITY TOO LARGE' ,  414 : 'REQUEST-URI TOO LONG' ,  415 : 'UNSUPPORTED MEDIA TYPE' ,  416 : 'REQUESTED RANGE NOT SATISFIABLE' ,  417 : 'EXPECTATION FAILED' ,  418 : "I'M A TEAPOT" ,  422 : 'UNPROCESSABLE ENTITY' ,  423 : 'LOCKED' ,  424 : 'FAILED DEPENDENCY' ,  426 : 'UPGRADE REQUIRED' ,  428 : 'PRECONDITION REQUIRED' ,  429 : 'TOO MANY REQUESTS' ,  431 : 'REQUEST HEADER FIELDS TOO LARGE' ,  500 : 'INTERNAL SERVER ERROR' ,  501 : 'NOT IMPLEMENTED' ,  502 : 'BAD GATEWAY' ,  503 : 'SERVICE UNAVAILABLE' ,  504 : 'GATEWAY TIMEOUT' ,  505 : 'HTTP VERSION NOT SUPPORTED' ,  506 : 'VARIANT ALSO NEGOTIATES' ,  507 : 'INSUFFICIENT STORAGE' ,  508 : 'LOOP DETECTED' ,  510 : 'NOT EXTENDED' ,  511 : 'NETWORK AUTHENTICATION REQUIRED' ,  }
example# 10299
class BadHeaderError ( ValueError ) :pass
example# 10300
pass
example# 10301
class HttpResponseBase ( six . Iterator ) :pass
example# 10302
status_code = 200
example# 10303
reason_phrase = None
example# 10304
def __init__ ( self , content_type = None , status = None , reason = None ) :pass
example# 10305
self . _headers = { }
example# 10306
self . _charset = settings . DEFAULT_CHARSET
example# 10307
self . _closable_objects = [ ]
example# 10308
self . _handler_class = None
example# 10309
if not content_type :pass
example# 10310
content_type = '_STR:0_' % ( settings . DEFAULT_CONTENT_TYPE ,  self . _charset )
example# 10311
self . cookies = SimpleCookie ( )
example# 10312
if status is not None :pass
example# 10313
self . status_code = status
example# 10314
if reason is not None :pass
example# 10315
self . reason_phrase = reason
example# 10316
if True: pass
elif self . reason_phrase is None :pass
example# 10317
self . reason_phrase = REASON_PHRASES . get ( self . status_code ,  'UNKNOWN STATUS CODE' )
example# 10318
self [ '_STR:1_' ] = content_type
example# 10319
def serialize_headers ( self ) :pass
example# 10320
def to_bytes ( val , encoding ) :pass
example# 10321
return val if isinstance ( val , bytes ) else val . encode ( encoding )
example# 10322
headers = [  ( b': ' . join ( [ to_bytes ( key , 'ascii' ) , to_bytes ( value , 'latin-1' ) ] ) )  for key , value in self . _headers . values ( )  ]
example# 10323
return b'_STR:3_' . join ( headers )
example# 10324
if six . PY3 :pass
example# 10325
__bytes__ = serialize_headers
example# 10326
if True: pass
else :pass
example# 10327
__str__ = serialize_headers
example# 10328
def _convert_to_charset ( self , value , charset , mime_encode = False ) :pass
example# 10329
if not isinstance ( value , ( bytes , six . text_type ) ) :pass
example# 10330
value = str ( value )
example# 10331
try :pass
except: pass
example# 10332
if six . PY3 :pass
example# 10333
if isinstance ( value , str ) :pass
example# 10334
value . encode ( charset )
example# 10335
if True: pass
else :pass
example# 10336
value = value . decode ( charset )
example# 10337
if True: pass
else :pass
example# 10338
if isinstance ( value , str ) :pass
example# 10339
value . decode ( charset )
example# 10340
if True: pass
else :pass
example# 10341
value = value . encode ( charset )
example# 10342
try: pass
except UnicodeError as e :pass
example# 10343
if mime_encode :pass
example# 10344
value = str ( Header ( value , '_STR:0_' , maxlinelen = sys . maxsize ) . encode ( ) )
example# 10345
if True: pass
else :pass
example# 10346
e . reason += '_STR:0_' % charset
example# 10347
raise
example# 10348
if str ( '_STR:0_' ) in value or str ( '_STR:1_' ) in value :pass
example# 10349
raise BadHeaderError ( '_STR:0_' % value )
example# 10350
return value
example# 10351
def __setitem__ ( self , header , value ) :pass
example# 10352
header = self . _convert_to_charset ( header , '_STR:0_' )
example# 10353
value = self . _convert_to_charset ( value , '_STR:0_' , mime_encode = True )
example# 10354
self . _headers [ header . lower ( ) ] = ( header , value )
example# 10355
def __delitem__ ( self , header ) :pass
example# 10356
try :pass
except: pass
example# 10357
del self . _headers [ header . lower ( ) ]
example# 10358
try: pass
except KeyError :pass
example# 10359
pass
example# 10360
def __getitem__ ( self , header ) :pass
example# 10361
return self . _headers [ header . lower ( ) ] [ 1 ]
example# 10362
def __getstate__ ( self ) :pass
example# 10363
state = self . __dict__ . copy ( )
example# 10364
state [ '_STR:0_' ] = str ( state [ '_STR:0_' ] )
example# 10365
return state
example# 10366
def __setstate__ ( self , state ) :pass
example# 10367
self . __dict__ . update ( state )
example# 10368
self . cookies = SimpleCookie ( self . cookies )
example# 10369
def has_header ( self , header ) :pass
example# 10370
return header . lower ( ) in self . _headers
example# 10371
__contains__ = has_header
example# 10372
def items ( self ) :pass
example# 10373
return self . _headers . values ( )
example# 10374
def get ( self , header , alternate = None ) :pass
example# 10375
return self . _headers . get ( header . lower ( ) , ( None , alternate ) ) [ 1 ]
example# 10376
def set_cookie ( self , key , value = '' , max_age = None , expires = None , path = '/' ,  domain = None , secure = False , httponly = False ) :pass
example# 10377
self . cookies [ key ] = value
example# 10378
if expires is not None :pass
example# 10379
if isinstance ( expires , datetime . datetime ) :pass
example# 10380
if timezone . is_aware ( expires ) :pass
example# 10381
expires = timezone . make_naive ( expires , timezone . utc )
example# 10382
delta = expires - expires . utcnow ( )
example# 10383
delta = delta + datetime . timedelta ( seconds = 1 )
example# 10384
expires = None
example# 10385
max_age = max ( 0 , delta . days * 86400 + delta . seconds )
example# 10386
if True: pass
else :pass
example# 10387
self . cookies [ key ] [ '_STR:0_' ] = expires
example# 10388
if max_age is not None :pass
example# 10389
self . cookies [ key ] [ '_STR:0_' ] = max_age
example# 10390
if not expires :pass
example# 10391
self . cookies [ key ] [ 'expires' ] = cookie_date ( time . time ( ) +  max_age )
example# 10392
if path is not None :pass
example# 10393
self . cookies [ key ] [ '_STR:0_' ] = path
example# 10394
if domain is not None :pass
example# 10395
self . cookies [ key ] [ '_STR:0_' ] = domain
example# 10396
if secure :pass
example# 10397
self . cookies [ key ] [ '_STR:0_' ] = True
example# 10398
if httponly :pass
example# 10399
self . cookies [ key ] [ '_STR:0_' ] = True
example# 10400
def set_signed_cookie ( self , key , value , salt = '' , ** kwargs ) :pass
example# 10401
value = signing . get_cookie_signer ( salt = key + salt ) . sign ( value )
example# 10402
return self . set_cookie ( key , value , ** kwargs )
example# 10403
def delete_cookie ( self , key , path = '_STR:0_' , domain = None ) :pass
example# 10404
self . set_cookie ( key , max_age = 0 , path = path , domain = domain ,  expires = 'Thu, 01-Jan-1970 00:00:00 GMT' )
example# 10405
def make_bytes ( self , value ) :pass
example# 10406
if self . has_header ( '_STR:0_' ) :pass
example# 10407
return bytes ( value )
example# 10408
if isinstance ( value , bytes ) :pass
example# 10409
return bytes ( value )
example# 10410
if isinstance ( value , six . text_type ) :pass
example# 10411
return bytes ( value . encode ( self . _charset ) )
example# 10412
return force_bytes ( value , self . _charset )
example# 10413
def close ( self ) :pass
example# 10414
for closable in self . _closable_objects :pass
example# 10415
try :pass
except: pass
example# 10416
closable . close ( )
example# 10417
try: pass
except Exception :pass
example# 10418
pass
example# 10419
signals . request_finished . send ( sender = self . _handler_class )
example# 10420
def write ( self , content ) :pass
example# 10421
raise Exception ( '_STR:0_' % self . __class__ . __name__ )
example# 10422
def flush ( self ) :pass
example# 10423
pass
example# 10424
def tell ( self ) :pass
example# 10425
raise Exception ( '_STR:0_' % self . __class__ . __name__ )
example# 10426
class HttpResponse ( HttpResponseBase ) :pass
example# 10427
streaming = False
example# 10428
def __init__ ( self , content = b'' , * args , ** kwargs ) :pass
example# 10429
super ( HttpResponse , self ) . __init__ ( * args , ** kwargs )
example# 10430
self . content = content
example# 10431
def serialize ( self ) :pass
example# 10432
return self . serialize_headers ( ) + b'_STR:0_' + self . content
example# 10433
if six . PY3 :pass
example# 10434
__bytes__ = serialize
example# 10435
if True: pass
else :pass
example# 10436
__str__ = serialize
example# 10437
@ property
def dummy(): pass
example# 10438
def content ( self ) :pass
example# 10439
return b'' . join ( self . _container )
example# 10440
@ content . setter
def dummy(): pass
example# 10441
def content ( self , value ) :pass
example# 10442
if hasattr ( value , '_STR:0_' ) and not isinstance ( value , ( bytes , six . string_types ) ) :pass
example# 10443
if hasattr ( value , '_STR:0_' ) :pass
example# 10444
self . _closable_objects . append ( value )
example# 10445
value = b'' . join ( self . make_bytes ( chunk ) for chunk in value )
example# 10446
if True: pass
else :pass
example# 10447
value = self . make_bytes ( value )
example# 10448
self . _container = [ value ]
example# 10449
def __iter__ ( self ) :pass
example# 10450
return iter ( self . _container )
example# 10451
def write ( self , content ) :pass
example# 10452
self . _container . append ( self . make_bytes ( content ) )
example# 10453
def tell ( self ) :pass
example# 10454
return len ( self . content )
example# 10455
class StreamingHttpResponse ( HttpResponseBase ) :pass
example# 10456
streaming = True
example# 10457
def __init__ ( self , streaming_content = ( ) , * args , ** kwargs ) :pass
example# 10458
super ( StreamingHttpResponse , self ) . __init__ ( * args , ** kwargs )
example# 10459
self . streaming_content = streaming_content
example# 10460
@ property
def dummy(): pass
example# 10461
def content ( self ) :pass
example# 10462
raise AttributeError ( '_STR:0_'  "Use `streaming_content` instead." % self . __class__ . __name__ )
example# 10463
@ property
def dummy(): pass
example# 10464
def streaming_content ( self ) :pass
example# 10465
return map ( self . make_bytes , self . _iterator )
example# 10466
@ streaming_content . setter
def dummy(): pass
example# 10467
def streaming_content ( self , value ) :pass
example# 10468
self . _iterator = iter ( value )
example# 10469
if hasattr ( value , '_STR:0_' ) :pass
example# 10470
self . _closable_objects . append ( value )
example# 10471
def __iter__ ( self ) :pass
example# 10472
return self . streaming_content
example# 10473
class HttpResponseRedirectBase ( HttpResponse ) :pass
example# 10474
allowed_schemes = [ '_STR:0_' , '_STR:1_' , '_STR:2_' ]
example# 10475
def __init__ ( self , redirect_to , * args , ** kwargs ) :pass
example# 10476
parsed = urlparse ( force_text ( redirect_to ) )
example# 10477
if parsed . scheme and parsed . scheme not in self . allowed_schemes :pass
example# 10478
raise DisallowedRedirect ( '_STR:0_' % parsed . scheme )
example# 10479
super ( HttpResponseRedirectBase , self ) . __init__ ( * args , ** kwargs )
example# 10480
self [ '_STR:0_' ] = iri_to_uri ( redirect_to )
example# 10481
url = property ( lambda self : self [ '_STR:0_' ] )
example# 10482
class HttpResponseRedirect ( HttpResponseRedirectBase ) :pass
example# 10483
status_code = 302
example# 10484
class HttpResponsePermanentRedirect ( HttpResponseRedirectBase ) :pass
example# 10485
status_code = 301
example# 10486
class HttpResponseNotModified ( HttpResponse ) :pass
example# 10487
status_code = 304
example# 10488
def __init__ ( self , * args , ** kwargs ) :pass
example# 10489
super ( HttpResponseNotModified , self ) . __init__ ( * args , ** kwargs )
example# 10490
del self [ '_STR:0_' ]
example# 10491
@ HttpResponse . content . setter
def dummy(): pass
example# 10492
def content ( self , value ) :pass
example# 10493
if value :pass
example# 10494
raise AttributeError ( '_STR:0_' )
example# 10495
self . _container = [ ]
example# 10496
class HttpResponseBadRequest ( HttpResponse ) :pass
example# 10497
status_code = 400
example# 10498
class HttpResponseNotFound ( HttpResponse ) :pass
example# 10499
status_code = 404
example# 10500
class HttpResponseForbidden ( HttpResponse ) :pass
example# 10501
status_code = 403
example# 10502
class HttpResponseNotAllowed ( HttpResponse ) :pass
example# 10503
status_code = 405
example# 10504
def __init__ ( self , permitted_methods , * args , ** kwargs ) :pass
example# 10505
super ( HttpResponseNotAllowed , self ) . __init__ ( * args , ** kwargs )
example# 10506
self [ '_STR:1_' ] = '_STR:0_' . join ( permitted_methods )
example# 10507
class HttpResponseGone ( HttpResponse ) :pass
example# 10508
status_code = 410
example# 10509
class HttpResponseServerError ( HttpResponse ) :pass
example# 10510
status_code = 500
example# 10511
class Http404 ( Exception ) :pass
example# 10512
pass
example# 10513
class JsonResponse ( HttpResponse ) :pass
example# 10514
def __init__ ( self , data , encoder = DjangoJSONEncoder , safe = True , ** kwargs ) :pass
example# 10515
if safe and not isinstance ( data , dict ) :pass
example# 10516
raise TypeError ( 'In order to allow non-dict objects to be '  'serialized set the safe parameter to False' )
example# 10517
kwargs . setdefault ( '_STR:0_' , '_STR:1_' )
example# 10518
data = json . dumps ( data , cls = encoder )
example# 10519
super ( JsonResponse , self ) . __init__ ( content = data , ** kwargs )
example# 10520
def fix_location_header ( request , response ) :pass
example# 10521
if '_STR:0_' in response and request . get_host ( ) :pass
example# 10522
response [ '_STR:0_' ] = request . build_absolute_uri ( response [ '_STR:0_' ] )
example# 10523
return response
example# 10524
def conditional_content_removal ( request , response ) :pass
example# 10525
if 100 <= response . status_code < 200 or response . status_code in ( 204 , 304 ) :pass
example# 10526
if response . streaming :pass
example# 10527
response . streaming_content = [ ]
example# 10528
if True: pass
else :pass
example# 10529
response . content = b''
example# 10530
response [ '_STR:1_' ] = '_STR:0_'
example# 10531
if request . method == '_STR:0_' :pass
example# 10532
if response . streaming :pass
example# 10533
response . streaming_content = [ ]
example# 10534
if True: pass
else :pass
example# 10535
response . content = b''
example# 10536
return response
example# 10537
from django . template . base import ( ALLOWED_VARIABLE_CHARS , BLOCK_TAG_END ,  BLOCK_TAG_START , COMMENT_TAG_END , COMMENT_TAG_START ,  FILTER_ARGUMENT_SEPARATOR , FILTER_SEPARATOR , SINGLE_BRACE_END ,  SINGLE_BRACE_START , TOKEN_BLOCK , TOKEN_COMMENT , TOKEN_TEXT , TOKEN_VAR ,  TRANSLATOR_COMMENT_MARK , UNKNOWN_SOURCE , VARIABLE_ATTRIBUTE_SEPARATOR ,  VARIABLE_TAG_END , VARIABLE_TAG_START , filter_re , tag_re )
example# 10538
from django . template . base import ( ContextPopException , InvalidTemplateLibrary ,  TemplateDoesNotExist , TemplateEncodingError , TemplateSyntaxError ,  VariableDoesNotExist )
example# 10539
from django . template . base import ( Context , FilterExpression , Lexer , Node ,  NodeList , Parser , RequestContext , Origin , StringOrigin , Template ,  TextNode , Token , TokenParser , Variable , VariableNode , constant_string ,  filter_raw_string )
example# 10540
from django . template . base import ( compile_string , resolve_variable ,  unescape_string_literal , generic_tag_compiler )
example# 10541
from django . template . base import ( Library , add_to_builtins , builtins ,  get_library , get_templatetags_modules , get_text_list , import_library ,  libraries )
example# 10542
__all__ = ( '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' )
example# 10543
from __future__ import unicode_literals
example# 10544
import re
example# 10545
from functools import partial
example# 10546
from importlib import import_module
example# 10547
from inspect import getargspec , getcallargs
example# 10548
import warnings
example# 10549
from django . apps import apps
example# 10550
from django . conf import settings
example# 10551
from django . template . context import ( BaseContext , Context , RequestContext ,  ContextPopException )
example# 10552
from django . utils . deprecation import RemovedInDjango20Warning
example# 10553
from django . utils . itercompat import is_iterable
example# 10554
from django . utils . text import ( smart_split , unescape_string_literal ,  get_text_list )
example# 10555
from django . utils . encoding import force_str , force_text
example# 10556
from django . utils . translation import ugettext_lazy , pgettext_lazy
example# 10557
from django . utils . safestring import ( SafeData , EscapeData , mark_safe ,  mark_for_escaping )
example# 10558
from django . utils . formats import localize
example# 10559
from django . utils . html import escape
example# 10560
from django . utils . module_loading import module_has_submodule
example# 10561
from django . utils import six
example# 10562
from django . utils . timezone import template_localtime
example# 10563
from django . utils . encoding import python_2_unicode_compatible
example# 10564
TOKEN_TEXT = 0
example# 10565
TOKEN_VAR = 1
example# 10566
TOKEN_BLOCK = 2
example# 10567
TOKEN_COMMENT = 3
example# 10568
TOKEN_MAPPING = {  TOKEN_TEXT : '_STR:0_' ,  TOKEN_VAR : '_STR:1_' ,  TOKEN_BLOCK : '_STR:2_' ,  TOKEN_COMMENT : 'Comment' ,  }
example# 10569
FILTER_SEPARATOR = '_STR:1_'
example# 10570
FILTER_ARGUMENT_SEPARATOR = '_STR:0_'
example# 10571
VARIABLE_ATTRIBUTE_SEPARATOR = '_STR:0_'
example# 10572
BLOCK_TAG_START = '_STR:0_'
example# 10573
BLOCK_TAG_END = '_STR:0_'
example# 10574
VARIABLE_TAG_START = '_STR:0_'
example# 10575
VARIABLE_TAG_END = '_STR:0_'
example# 10576
COMMENT_TAG_START = '_STR:0_'
example# 10577
COMMENT_TAG_END = '_STR:0_'
example# 10578
TRANSLATOR_COMMENT_MARK = '_STR:0_'
example# 10579
SINGLE_BRACE_START = '_STR:0_'
example# 10580
SINGLE_BRACE_END = '_STR:0_'
example# 10581
ALLOWED_VARIABLE_CHARS = ( 'abcdefghijklmnopqrstuvwxyz'  'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.' )
example# 10582
UNKNOWN_SOURCE = '_STR:0_'
example# 10583
tag_re = ( re . compile ( '_STR:0_' %  ( re . escape ( BLOCK_TAG_START ) , re . escape ( BLOCK_TAG_END ) ,  re . escape ( VARIABLE_TAG_START ) , re . escape ( VARIABLE_TAG_END ) ,  re . escape ( COMMENT_TAG_START ) , re . escape ( COMMENT_TAG_END ) ) ) )
example# 10584
libraries = { }
example# 10585
builtins = [ ]
example# 10586
invalid_var_format_string = None
example# 10587
class TemplateSyntaxError ( Exception ) :pass
example# 10588
pass
example# 10589
class TemplateDoesNotExist ( Exception ) :pass
example# 10590
pass
example# 10591
class TemplateEncodingError ( Exception ) :pass
example# 10592
pass
example# 10593
@ python_2_unicode_compatible
def dummy(): pass
example# 10594
class VariableDoesNotExist ( Exception ) :pass
example# 10595
def __init__ ( self , msg , params = ( ) ) :pass
example# 10596
self . msg = msg
example# 10597
self . params = params
example# 10598
def __str__ ( self ) :pass
example# 10599
return self . msg % tuple ( force_text ( p , errors = 'replace' ) for p in self . params )
example# 10600
class InvalidTemplateLibrary ( Exception ) :pass
example# 10601
pass
example# 10602
class Origin ( object ) :pass
example# 10603
def __init__ ( self , name ) :pass
example# 10604
self . name = name
example# 10605
def reload ( self ) :pass
example# 10606
raise NotImplementedError ( '_STR:0_' )
example# 10607
def __str__ ( self ) :pass
example# 10608
return self . name
example# 10609
class StringOrigin ( Origin ) :pass
example# 10610
def __init__ ( self , source ) :pass
example# 10611
super ( StringOrigin , self ) . __init__ ( UNKNOWN_SOURCE )
example# 10612
self . source = source
example# 10613
def reload ( self ) :pass
example# 10614
return self . source
example# 10615
class Template ( object ) :pass
example# 10616
def __init__ ( self , template_string , origin = None , name = None ) :pass
example# 10617
try :pass
except: pass
example# 10618
template_string = force_text ( template_string )
example# 10619
try: pass
except UnicodeDecodeError :pass
example# 10620
raise TemplateEncodingError ( "Templates can only be constructed "  "from unicode or UTF-8 strings." )
example# 10621
if settings . TEMPLATE_DEBUG and origin is None :pass
example# 10622
origin = StringOrigin ( template_string )
example# 10623
self . nodelist = compile_string ( template_string , origin )
example# 10624
self . name = name
example# 10625
self . origin = origin
example# 10626
def __iter__ ( self ) :pass
example# 10627
for node in self . nodelist :pass
example# 10628
for subnode in node :pass
example# 10629
yield subnode
example# 10630
def _render ( self , context ) :pass
example# 10631
return self . nodelist . render ( context )
example# 10632
def render ( self , context ) :pass
example# 10633
context . render_context . push ( )
example# 10634
try :pass
except: pass
example# 10635
return self . _render ( context )
example# 10636
try: pass
finally :pass
example# 10637
context . render_context . pop ( )
example# 10638
def compile_string ( template_string , origin ) :pass
example# 10639
if settings . TEMPLATE_DEBUG :pass
example# 10640
from django . template . debug import DebugLexer , DebugParser
example# 10641
lexer_class , parser_class = DebugLexer , DebugParser
example# 10642
if True: pass
else :pass
example# 10643
lexer_class , parser_class = Lexer , Parser
example# 10644
lexer = lexer_class ( template_string , origin )
example# 10645
parser = parser_class ( lexer . tokenize ( ) )
example# 10646
return parser . parse ( )
example# 10647
class Token ( object ) :pass
example# 10648
def __init__ ( self , token_type , contents ) :pass
example# 10649
self . token_type , self . contents = token_type , contents
example# 10650
self . lineno = None
example# 10651
def __str__ ( self ) :pass
example# 10652
token_name = TOKEN_MAPPING [ self . token_type ]
example# 10653
return ( '_STR:0_' %  ( token_name , self . contents [ : 20 ] . replace ( '\n' , '' ) ) )
example# 10654
def split_contents ( self ) :pass
example# 10655
split = [ ]
example# 10656
bits = iter ( smart_split ( self . contents ) )
example# 10657
for bit in bits :pass
example# 10658
if bit . startswith ( '_STR:0_' ) or bit . startswith ( '_STR:1_' ) :pass
example# 10659
sentinal = bit [ 2 ] + '_STR:0_'
example# 10660
trans_bit = [ bit ]
example# 10661
while not bit . endswith ( sentinal ) :pass
example# 10662
bit = next ( bits )
example# 10663
trans_bit . append ( bit )
example# 10664
bit = ' ' . join ( trans_bit )
example# 10665
split . append ( bit )
example# 10666
return split
example# 10667
class Lexer ( object ) :pass
example# 10668
def __init__ ( self , template_string , origin ) :pass
example# 10669
self . template_string = template_string
example# 10670
self . origin = origin
example# 10671
self . lineno = 1
example# 10672
self . verbatim = False
example# 10673
def tokenize ( self ) :pass
example# 10674
in_tag = False
example# 10675
result = [ ]
example# 10676
for bit in tag_re . split ( self . template_string ) :pass
example# 10677
if bit :pass
example# 10678
result . append ( self . create_token ( bit , in_tag ) )
example# 10679
in_tag = not in_tag
example# 10680
return result
example# 10681
def create_token ( self , token_string , in_tag ) :pass
example# 10682
if in_tag and token_string . startswith ( BLOCK_TAG_START ) :pass
example# 10683
block_content = token_string [ 2 : - 2 ] . strip ( )
example# 10684
if self . verbatim and block_content == self . verbatim :pass
example# 10685
self . verbatim = False
example# 10686
if in_tag and not self . verbatim :pass
example# 10687
if token_string . startswith ( VARIABLE_TAG_START ) :pass
example# 10688
token = Token ( TOKEN_VAR , token_string [ 2 : - 2 ] . strip ( ) )
example# 10689
if True: pass
elif token_string . startswith ( BLOCK_TAG_START ) :pass
example# 10690
if block_content [ : 9 ] in ( '_STR:0_' , '_STR:1_' ) :pass
example# 10691
self . verbatim = 'end%s' % block_content
example# 10692
token = Token ( TOKEN_BLOCK , block_content )
example# 10693
if True: pass
elif token_string . startswith ( COMMENT_TAG_START ) :pass
example# 10694
content = ''
example# 10695
if token_string . find ( TRANSLATOR_COMMENT_MARK ) :pass
example# 10696
content = token_string [ 2 : - 2 ] . strip ( )
example# 10697
token = Token ( TOKEN_COMMENT , content )
example# 10698
if True: pass
else :pass
example# 10699
token = Token ( TOKEN_TEXT , token_string )
example# 10700
token . lineno = self . lineno
example# 10701
self . lineno += token_string . count ( '_STR:0_' )
example# 10702
return token
example# 10703
class Parser ( object ) :pass
example# 10704
def __init__ ( self , tokens ) :pass
example# 10705
self . tokens = tokens
example# 10706
self . tags = { }
example# 10707
self . filters = { }
example# 10708
for lib in builtins :pass
example# 10709
self . add_library ( lib )
example# 10710
def parse ( self , parse_until = None ) :pass
example# 10711
if parse_until is None :pass
example# 10712
parse_until = [ ]
example# 10713
nodelist = self . create_nodelist ( )
example# 10714
while self . tokens :pass
example# 10715
token = self . next_token ( )
example# 10716
if token . token_type == 0 :pass
example# 10717
self . extend_nodelist ( nodelist , TextNode ( token . contents ) , token )
example# 10718
if True: pass
elif token . token_type == 1 :pass
example# 10719
if not token . contents :pass
example# 10720
self . empty_variable ( token )
example# 10721
try :pass
except: pass
example# 10722
filter_expression = self . compile_filter ( token . contents )
example# 10723
try: pass
except TemplateSyntaxError as e :pass
example# 10724
if not self . compile_filter_error ( token , e ) :pass
example# 10725
raise
example# 10726
var_node = self . create_variable_node ( filter_expression )
example# 10727
self . extend_nodelist ( nodelist , var_node , token )
example# 10728
if True: pass
elif token . token_type == 2 :pass
example# 10729
try :pass
except: pass
example# 10730
command = token . contents . split ( ) [ 0 ]
example# 10731
try: pass
except IndexError :pass
example# 10732
self . empty_block_tag ( token )
example# 10733
if command in parse_until :pass
example# 10734
self . prepend_token ( token )
example# 10735
return nodelist
example# 10736
self . enter_command ( command , token )
example# 10737
try :pass
except: pass
example# 10738
compile_func = self . tags [ command ]
example# 10739
try: pass
except KeyError :pass
example# 10740
self . invalid_block_tag ( token , command , parse_until )
example# 10741
try :pass
except: pass
example# 10742
compiled_result = compile_func ( self , token )
example# 10743
try: pass
except TemplateSyntaxError as e :pass
example# 10744
if not self . compile_function_error ( token , e ) :pass
example# 10745
raise
example# 10746
self . extend_nodelist ( nodelist , compiled_result , token )
example# 10747
self . exit_command ( )
example# 10748
if parse_until :pass
example# 10749
self . unclosed_block_tag ( parse_until )
example# 10750
return nodelist
example# 10751
def skip_past ( self , endtag ) :pass
example# 10752
while self . tokens :pass
example# 10753
token = self . next_token ( )
example# 10754
if token . token_type == TOKEN_BLOCK and token . contents == endtag :pass
example# 10755
return
example# 10756
self . unclosed_block_tag ( [ endtag ] )
example# 10757
def create_variable_node ( self , filter_expression ) :pass
example# 10758
return VariableNode ( filter_expression )
example# 10759
def create_nodelist ( self ) :pass
example# 10760
return NodeList ( )
example# 10761
def extend_nodelist ( self , nodelist , node , token ) :pass
example# 10762
if node . must_be_first and nodelist :pass
example# 10763
try :pass
except: pass
example# 10764
if nodelist . contains_nontext :pass
example# 10765
raise AttributeError
example# 10766
try: pass
except AttributeError :pass
example# 10767
raise TemplateSyntaxError ( "%r must be the first tag "  "in the template." % node )
example# 10768
if isinstance ( nodelist , NodeList ) and not isinstance ( node , TextNode ) :pass
example# 10769
nodelist . contains_nontext = True
example# 10770
nodelist . append ( node )
example# 10771
def enter_command ( self , command , token ) :pass
example# 10772
pass
example# 10773
def exit_command ( self ) :pass
example# 10774
pass
example# 10775
def error ( self , token , msg ) :pass
example# 10776
return TemplateSyntaxError ( msg )
example# 10777
def empty_variable ( self , token ) :pass
example# 10778
raise self . error ( token , '_STR:0_' )
example# 10779
def empty_block_tag ( self , token ) :pass
example# 10780
raise self . error ( token , '_STR:0_' )
example# 10781
def invalid_block_tag ( self , token , command , parse_until = None ) :pass
example# 10782
if parse_until :pass
example# 10783
raise self . error ( token , '_STR:0_' %  ( command , get_text_list ( [ "'%s'" % p for p in parse_until ] ) ) )
example# 10784
raise self . error ( token , '_STR:0_' % command )
example# 10785
def unclosed_block_tag ( self , parse_until ) :pass
example# 10786
raise self . error ( None , '_STR:0_' % ', ' . join ( parse_until ) )
example# 10787
def compile_filter_error ( self , token , e ) :pass
example# 10788
pass
example# 10789
def compile_function_error ( self , token , e ) :pass
example# 10790
pass
example# 10791
def next_token ( self ) :pass
example# 10792
return self . tokens . pop ( 0 )
example# 10793
def prepend_token ( self , token ) :pass
example# 10794
self . tokens . insert ( 0 , token )
example# 10795
def delete_first_token ( self ) :pass
example# 10796
del self . tokens [ 0 ]
example# 10797
def add_library ( self , lib ) :pass
example# 10798
self . tags . update ( lib . tags )
example# 10799
self . filters . update ( lib . filters )
example# 10800
def compile_filter ( self , token ) :pass
example# 10801
return FilterExpression ( token , self )
example# 10802
def find_filter ( self , filter_name ) :pass
example# 10803
if filter_name in self . filters :pass
example# 10804
return self . filters [ filter_name ]
example# 10805
if True: pass
else :pass
example# 10806
raise TemplateSyntaxError ( '_STR:0_' % filter_name )
example# 10807
class TokenParser ( object ) :pass
example# 10808
def __init__ ( self , subject ) :pass
example# 10809
self . subject = subject
example# 10810
self . pointer = 0
example# 10811
self . backout = [ ]
example# 10812
self . tagname = self . tag ( )
example# 10813
def top ( self ) :pass
example# 10814
raise NotImplementedError ( '_STR:0_' )
example# 10815
def more ( self ) :pass
example# 10816
return self . pointer < len ( self . subject )
example# 10817
def back ( self ) :pass
example# 10818
if not len ( self . backout ) :pass
example# 10819
raise TemplateSyntaxError ( "back called without some previous "  "parsing" )
example# 10820
self . pointer = self . backout . pop ( )
example# 10821
def tag ( self ) :pass
example# 10822
subject = self . subject
example# 10823
i = self . pointer
example# 10824
if i >= len ( subject ) :pass
example# 10825
raise TemplateSyntaxError ( "expected another tag, found "  "end of string: %s" % subject )
example# 10826
p = i
example# 10827
while i < len ( subject ) and subject [ i ] not in ( ' ' , '\t' ) :pass
example# 10828
i += 1
example# 10829
s = subject [ p : i ]
example# 10830
while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) :pass
example# 10831
i += 1
example# 10832
self . backout . append ( self . pointer )
example# 10833
self . pointer = i
example# 10834
return s
example# 10835
def value ( self ) :pass
example# 10836
subject = self . subject
example# 10837
i = self . pointer
example# 10838
def next_space_index ( subject , i ) :pass
example# 10839
while i < len ( subject ) and subject [ i ] not in ( ' ' , '\t' ) :pass
example# 10840
if subject [ i ] in ( '_STR:0_' , '_STR:1_' ) :pass
example# 10841
c = subject [ i ]
example# 10842
i += 1
example# 10843
while i < len ( subject ) and subject [ i ] != c :pass
example# 10844
i += 1
example# 10845
if i >= len ( subject ) :pass
example# 10846
raise TemplateSyntaxError ( "Searching for value. "  "Unexpected end of string in column %d: %s" %  ( i , subject ) )
example# 10847
i += 1
example# 10848
return i
example# 10849
if i >= len ( subject ) :pass
example# 10850
raise TemplateSyntaxError ( "Searching for value. Expected another "  "value but found end of string: %s" %  subject )
example# 10851
if subject [ i ] in ( '_STR:0_' , '_STR:1_' ) :pass
example# 10852
p = i
example# 10853
i += 1
example# 10854
while i < len ( subject ) and subject [ i ] != subject [ p ] :pass
example# 10855
i += 1
example# 10856
if i >= len ( subject ) :pass
example# 10857
raise TemplateSyntaxError ( "Searching for value. Unexpected "  "end of string in column %d: %s" %  ( i , subject ) )
example# 10858
i += 1
example# 10859
i = next_space_index ( subject , i )
example# 10860
res = subject [ p : i ]
example# 10861
while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) :pass
example# 10862
i += 1
example# 10863
self . backout . append ( self . pointer )
example# 10864
self . pointer = i
example# 10865
return res
example# 10866
if True: pass
else :pass
example# 10867
p = i
example# 10868
i = next_space_index ( subject , i )
example# 10869
s = subject [ p : i ]
example# 10870
while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) :pass
example# 10871
i += 1
example# 10872
self . backout . append ( self . pointer )
example# 10873
self . pointer = i
example# 10874
return s
example# 10875
constant_string = r""" (?:%(i18n_open)s%(strdq)s%(i18n_close)s| %(i18n_open)s%(strsq)s%(i18n_close)s| %(strdq)s| %(strsq)s) """ % {  'strdq' : r'"[^"\\]*(?:\\.[^"\\]*)*"' ,  'strsq' : r"'[^'\\]*(?:\\.[^'\\]*)*'" ,  'i18n_open' : re . escape ( "_(" ) ,  'i18n_close' : re . escape ( ")" ) ,  }
example# 10876
constant_string = constant_string . replace ( "\n" , "" )
example# 10877
filter_raw_string = r""" ^(?P<constant>%(constant)s)| ^(?P<var>[%(var_chars)s]+|%(num)s)|  (?:\s*%(filter_sep)s\s*      (?P<filter_name>\w+)          (?:%(arg_sep)s              (?:               (?P<constant_arg>%(constant)s)|               (?P<var_arg>[%(var_chars)s]+|%(num)s)              )          )?  )""" % {  'constant' : constant_string ,  'num' : r'[-+\.]?\d[\d\.e]*' ,  'var_chars' : "\w\." ,  'filter_sep' : re . escape ( FILTER_SEPARATOR ) ,  'arg_sep' : re . escape ( FILTER_ARGUMENT_SEPARATOR ) ,  }
example# 10878
filter_re = re . compile ( filter_raw_string , re . UNICODE | re . VERBOSE )
example# 10879
class FilterExpression ( object ) :pass
example# 10880
def __init__ ( self , token , parser ) :pass
example# 10881
self . token = token
example# 10882
matches = filter_re . finditer ( token )
example# 10883
var_obj = None
example# 10884
filters = [ ]
example# 10885
upto = 0
example# 10886
for match in matches :pass
example# 10887
start = match . start ( )
example# 10888
if upto != start :pass
example# 10889
raise TemplateSyntaxError ( "Could not parse some characters: "  "%s|%s|%s" %  ( token [ : upto ] , token [ upto : start ] ,  token [ start : ] ) )
example# 10890
if var_obj is None :pass
example# 10891
var , constant = match . group ( '_STR:0_' , '_STR:1_' )
example# 10892
if constant :pass
example# 10893
try :pass
except: pass
example# 10894
var_obj = Variable ( constant ) . resolve ( { } )
example# 10895
try: pass
except VariableDoesNotExist :pass
example# 10896
var_obj = None
example# 10897
if True: pass
elif var is None :pass
example# 10898
raise TemplateSyntaxError ( "Could not find variable at "  "start of %s." % token )
example# 10899
if True: pass
else :pass
example# 10900
var_obj = Variable ( var )
example# 10901
if True: pass
else :pass
example# 10902
filter_name = match . group ( '_STR:0_' )
example# 10903
args = [ ]
example# 10904
constant_arg , var_arg = match . group ( '_STR:0_' , '_STR:1_' )
example# 10905
if constant_arg :pass
example# 10906
args . append ( ( False , Variable ( constant_arg ) . resolve ( { } ) ) )
example# 10907
if True: pass
elif var_arg :pass
example# 10908
args . append ( ( True , Variable ( var_arg ) ) )
example# 10909
filter_func = parser . find_filter ( filter_name )
example# 10910
self . args_check ( filter_name , filter_func , args )
example# 10911
filters . append ( ( filter_func , args ) )
example# 10912
upto = match . end ( )
example# 10913
if upto != len ( token ) :pass
example# 10914
raise TemplateSyntaxError ( "Could not parse the remainder: '%s' "  "from '%s'" % ( token [ upto : ] , token ) )
example# 10915
self . filters = filters
example# 10916
self . var = var_obj
example# 10917
def resolve ( self , context , ignore_failures = False ) :pass
example# 10918
if isinstance ( self . var , Variable ) :pass
example# 10919
try :pass
except: pass
example# 10920
obj = self . var . resolve ( context )
example# 10921
try: pass
except VariableDoesNotExist :pass
example# 10922
if ignore_failures :pass
example# 10923
obj = None
example# 10924
if True: pass
else :pass
example# 10925
if settings . TEMPLATE_STRING_IF_INVALID :pass
example# 10926
global invalid_var_format_string
example# 10927
if invalid_var_format_string is None :pass
example# 10928
invalid_var_format_string = '%s' in settings . TEMPLATE_STRING_IF_INVALID
example# 10929
if invalid_var_format_string :pass
example# 10930
return settings . TEMPLATE_STRING_IF_INVALID % self . var
example# 10931
return settings . TEMPLATE_STRING_IF_INVALID
example# 10932
if True: pass
else :pass
example# 10933
obj = settings . TEMPLATE_STRING_IF_INVALID
example# 10934
if True: pass
else :pass
example# 10935
obj = self . var
example# 10936
for func , args in self . filters :pass
example# 10937
arg_vals = [ ]
example# 10938
for lookup , arg in args :pass
example# 10939
if not lookup :pass
example# 10940
arg_vals . append ( mark_safe ( arg ) )
example# 10941
if True: pass
else :pass
example# 10942
arg_vals . append ( arg . resolve ( context ) )
example# 10943
if getattr ( func , '_STR:0_' , False ) :pass
example# 10944
obj = template_localtime ( obj , context . use_tz )
example# 10945
if getattr ( func , '_STR:0_' , False ) :pass
example# 10946
new_obj = func ( obj , autoescape = context . autoescape , * arg_vals )
example# 10947
if True: pass
else :pass
example# 10948
new_obj = func ( obj , * arg_vals )
example# 10949
if getattr ( func , '_STR:0_' , False ) and isinstance ( obj , SafeData ) :pass
example# 10950
obj = mark_safe ( new_obj )
example# 10951
if True: pass
elif isinstance ( obj , EscapeData ) :pass
example# 10952
obj = mark_for_escaping ( new_obj )
example# 10953
if True: pass
else :pass
example# 10954
obj = new_obj
example# 10955
return obj
example# 10956
def args_check ( name , func , provided ) :pass
example# 10957
provided = list ( provided )
example# 10958
plen = len ( provided ) + 1
example# 10959
func = getattr ( func , '_STR:0_' , func )
example# 10960
args , varargs , varkw , defaults = getargspec ( func )
example# 10961
alen = len ( args )
example# 10962
dlen = len ( defaults or [ ] )
example# 10963
if plen < ( alen - dlen ) or plen > alen :pass
example# 10964
raise TemplateSyntaxError ( '_STR:0_' %  ( name , alen - dlen , plen ) )
example# 10965
return True
example# 10966
args_check = staticmethod ( args_check )
example# 10967
def __str__ ( self ) :pass
example# 10968
return self . token
example# 10969
def resolve_variable ( path , context ) :pass
example# 10970
warnings . warn ( "resolve_variable() is deprecated. Use django.template."  "Variable(path).resolve(context) instead" ,  RemovedInDjango20Warning , stacklevel = 2 )
example# 10971
return Variable ( path ) . resolve ( context )
example# 10972
class Variable ( object ) :pass
example# 10973
def __init__ ( self , var ) :pass
example# 10974
self . var = var
example# 10975
self . literal = None
example# 10976
self . lookups = None
example# 10977
self . translate = False
example# 10978
self . message_context = None
example# 10979
if not isinstance ( var , six . string_types ) :pass
example# 10980
raise TypeError (  '_STR:0_' % type ( var ) )
example# 10981
try :pass
except: pass
example# 10982
self . literal = float ( var )
example# 10983
if '_STR:0_' not in var and '_STR:1_' not in var . lower ( ) :pass
example# 10984
self . literal = int ( self . literal )
example# 10985
if var . endswith ( '_STR:0_' ) :pass
example# 10986
raise ValueError
example# 10987
try: pass
except ValueError :pass
example# 10988
if var . startswith ( '_STR:0_' ) and var . endswith ( '_STR:1_' ) :pass
example# 10989
self . translate = True
example# 10990
var = var [ 2 : - 1 ]
example# 10991
try :pass
except: pass
example# 10992
self . literal = mark_safe ( unescape_string_literal ( var ) )
example# 10993
try: pass
except ValueError :pass
example# 10994
if var . find ( VARIABLE_ATTRIBUTE_SEPARATOR + '_STR:0_' ) > - 1 or var [ 0 ] == '_STR:0_' :pass
example# 10995
raise TemplateSyntaxError ( "Variables and attributes may "  "not begin with underscores: '%s'" %  var )
example# 10996
self . lookups = tuple ( var . split ( VARIABLE_ATTRIBUTE_SEPARATOR ) )
example# 10997
def resolve ( self , context ) :pass
example# 10998
if self . lookups is not None :pass
example# 10999
value = self . _resolve_lookup ( context )
example# 11000
if True: pass
else :pass
example# 11001
value = self . literal
example# 11002
if self . translate :pass
example# 11003
if self . message_context :pass
example# 11004
return pgettext_lazy ( self . message_context , value )
example# 11005
if True: pass
else :pass
example# 11006
return ugettext_lazy ( value )
example# 11007
return value
example# 11008
def __repr__ ( self ) :pass
example# 11009
return '_STR:0_' % ( self . __class__ . __name__ , self . var )
example# 11010
def __str__ ( self ) :pass
example# 11011
return self . var
example# 11012
def _resolve_lookup ( self , context ) :pass
example# 11013
current = context
example# 11014
try :pass
except: pass
example# 11015
for bit in self . lookups :pass
example# 11016
try :pass
except: pass
example# 11017
current = current [ bit ]
example# 11018
try: pass
except ( TypeError , AttributeError , KeyError , ValueError ) :pass
example# 11019
try :pass
except: pass
example# 11020
if isinstance ( current , BaseContext ) and getattr ( type ( current ) , bit ) :pass
example# 11021
raise AttributeError
example# 11022
current = getattr ( current , bit )
example# 11023
try: pass
except ( TypeError , AttributeError ) :pass
example# 11024
try :pass
except: pass
example# 11025
current = current [ int ( bit ) ]
example# 11026
try: pass
except ( IndexError ,  ValueError ,  KeyError ,  TypeError ) :pass
example# 11027
raise VariableDoesNotExist ( "Failed lookup for key "  "[%s] in %r" ,  ( bit , current ) )
example# 11028
if callable ( current ) :pass
example# 11029
if getattr ( current , '_STR:0_' , False ) :pass
example# 11030
pass
example# 11031
if True: pass
elif getattr ( current , '_STR:0_' , False ) :pass
example# 11032
current = settings . TEMPLATE_STRING_IF_INVALID
example# 11033
if True: pass
else :pass
example# 11034
try :pass
except: pass
example# 11035
current = current ( )
example# 11036
try: pass
except TypeError :pass
example# 11037
try :pass
except: pass
example# 11038
getcallargs ( current )
example# 11039
try: pass
except TypeError :pass
example# 11040
current = settings . TEMPLATE_STRING_IF_INVALID
example# 11041
if True: pass
else :pass
example# 11042
raise
example# 11043
try: pass
except Exception as e :pass
example# 11044
if getattr ( e , '_STR:0_' , False ) :pass
example# 11045
current = settings . TEMPLATE_STRING_IF_INVALID
example# 11046
if True: pass
else :pass
example# 11047
raise
example# 11048
return current
example# 11049
class Node ( object ) :pass
example# 11050
must_be_first = False
example# 11051
child_nodelists = ( '_STR:0_' , )
example# 11052
def render ( self , context ) :pass
example# 11053
pass
example# 11054
def __iter__ ( self ) :pass
example# 11055
yield self
example# 11056
def get_nodes_by_type ( self , nodetype ) :pass
example# 11057
nodes = [ ]
example# 11058
if isinstance ( self , nodetype ) :pass
example# 11059
nodes . append ( self )
example# 11060
for attr in self . child_nodelists :pass
example# 11061
nodelist = getattr ( self , attr , None )
example# 11062
if nodelist :pass
example# 11063
nodes . extend ( nodelist . get_nodes_by_type ( nodetype ) )
example# 11064
return nodes
example# 11065
class NodeList ( list ) :pass
example# 11066
contains_nontext = False
example# 11067
def render ( self , context ) :pass
example# 11068
bits = [ ]
example# 11069
for node in self :pass
example# 11070
if isinstance ( node , Node ) :pass
example# 11071
bit = self . render_node ( node , context )
example# 11072
if True: pass
else :pass
example# 11073
bit = node
example# 11074
bits . append ( force_text ( bit ) )
example# 11075
return mark_safe ( '' . join ( bits ) )
example# 11076
def get_nodes_by_type ( self , nodetype ) :pass
example# 11077
nodes = [ ]
example# 11078
for node in self :pass
example# 11079
nodes . extend ( node . get_nodes_by_type ( nodetype ) )
example# 11080
return nodes
example# 11081
def render_node ( self , node , context ) :pass
example# 11082
return node . render ( context )
example# 11083
class TextNode ( Node ) :pass
example# 11084
def __init__ ( self , s ) :pass
example# 11085
self . s = s
example# 11086
def __repr__ ( self ) :pass
example# 11087
return force_str ( '_STR:0_' % self . s [ : 25 ] , 'ascii' ,  errors = 'replace' )
example# 11088
def render ( self , context ) :pass
example# 11089
return self . s
example# 11090
def render_value_in_context ( value , context ) :pass
example# 11091
value = template_localtime ( value , use_tz = context . use_tz )
example# 11092
value = localize ( value , use_l10n = context . use_l10n )
example# 11093
value = force_text ( value )
example# 11094
if ( ( context . autoescape and not isinstance ( value , SafeData ) ) or  isinstance ( value , EscapeData ) ) :pass
example# 11095
return escape ( value )
example# 11096
if True: pass
else :pass
example# 11097
return value
example# 11098
class VariableNode ( Node ) :pass
example# 11099
def __init__ ( self , filter_expression ) :pass
example# 11100
self . filter_expression = filter_expression
example# 11101
def __repr__ ( self ) :pass
example# 11102
return '_STR:0_' % self . filter_expression
example# 11103
def render ( self , context ) :pass
example# 11104
try :pass
except: pass
example# 11105
output = self . filter_expression . resolve ( context )
example# 11106
try: pass
except UnicodeDecodeError :pass
example# 11107
return ''
example# 11108
return render_value_in_context ( output , context )
example# 11109
kwarg_re = re . compile ( r'_STR:0_' )
example# 11110
def token_kwargs ( bits , parser , support_legacy = False ) :pass
example# 11111
if not bits :pass
example# 11112
return { }
example# 11113
match = kwarg_re . match ( bits [ 0 ] )
example# 11114
kwarg_format = match and match . group ( 1 )
example# 11115
if not kwarg_format :pass
example# 11116
if not support_legacy :pass
example# 11117
return { }
example# 11118
if len ( bits ) < 3 or bits [ 1 ] != '_STR:0_' :pass
example# 11119
return { }
example# 11120
kwargs = { }
example# 11121
while bits :pass
example# 11122
if kwarg_format :pass
example# 11123
match = kwarg_re . match ( bits [ 0 ] )
example# 11124
if not match or not match . group ( 1 ) :pass
example# 11125
return kwargs
example# 11126
key , value = match . groups ( )
example# 11127
del bits [ : 1 ]
example# 11128
if True: pass
else :pass
example# 11129
if len ( bits ) < 3 or bits [ 1 ] != '_STR:0_' :pass
example# 11130
return kwargs
example# 11131
key , value = bits [ 2 ] , bits [ 0 ]
example# 11132
del bits [ : 3 ]
example# 11133
kwargs [ key ] = parser . compile_filter ( value )
example# 11134
if bits and not kwarg_format :pass
example# 11135
if bits [ 0 ] != '_STR:0_' :pass
example# 11136
return kwargs
example# 11137
del bits [ : 1 ]
example# 11138
return kwargs
example# 11139
def parse_bits ( parser , bits , params , varargs , varkw , defaults ,  takes_context , name ) :pass
example# 11140
if takes_context :pass
example# 11141
if params [ 0 ] == '_STR:0_' :pass
example# 11142
params = params [ 1 : ]
example# 11143
if True: pass
else :pass
example# 11144
raise TemplateSyntaxError (  "'%s' is decorated with takes_context=True so it must "  "have a first argument of 'context'" % name )
example# 11145
args = [ ]
example# 11146
kwargs = { }
example# 11147
unhandled_params = list ( params )
example# 11148
for bit in bits :pass
example# 11149
kwarg = token_kwargs ( [ bit ] , parser )
example# 11150
if kwarg :pass
example# 11151
param , value = list ( six . iteritems ( kwarg ) ) [ 0 ]
example# 11152
if param not in params and varkw is None :pass
example# 11153
raise TemplateSyntaxError (  '_STR:0_' %  ( name , param ) )
example# 11154
if True: pass
elif param in kwargs :pass
example# 11155
raise TemplateSyntaxError (  '_STR:0_' %  ( name , param ) )
example# 11156
if True: pass
else :pass
example# 11157
kwargs [ str ( param ) ] = value
example# 11158
if param in unhandled_params :pass
example# 11159
unhandled_params . remove ( param )
example# 11160
if True: pass
else :pass
example# 11161
if kwargs :pass
example# 11162
raise TemplateSyntaxError (  "'%s' received some positional argument(s) after some "  "keyword argument(s)" % name )
example# 11163
if True: pass
else :pass
example# 11164
args . append ( parser . compile_filter ( bit ) )
example# 11165
try :pass
except: pass
example# 11166
unhandled_params . pop ( 0 )
example# 11167
try: pass
except IndexError :pass
example# 11168
if varargs is None :pass
example# 11169
raise TemplateSyntaxError (  '_STR:0_' %  name )
example# 11170
if defaults is not None :pass
example# 11171
unhandled_params = unhandled_params [ : - len ( defaults ) ]
example# 11172
if unhandled_params :pass
example# 11173
raise TemplateSyntaxError (  "'%s' did not receive value(s) for the argument(s): %s" %  ( name , ", " . join ( "'%s'" % p for p in unhandled_params ) ) )
example# 11174
return args , kwargs
example# 11175
def generic_tag_compiler ( parser , token , params , varargs , varkw , defaults ,  name , takes_context , node_class ) :pass
example# 11176
bits = token . split_contents ( ) [ 1 : ]
example# 11177
args , kwargs = parse_bits ( parser , bits , params , varargs , varkw ,  defaults , takes_context , name )
example# 11178
return node_class ( takes_context , args , kwargs )
example# 11179
class TagHelperNode ( Node ) :pass
example# 11180
def __init__ ( self , takes_context , args , kwargs ) :pass
example# 11181
self . takes_context = takes_context
example# 11182
self . args = args
example# 11183
self . kwargs = kwargs
example# 11184
def get_resolved_arguments ( self , context ) :pass
example# 11185
resolved_args = [ var . resolve ( context ) for var in self . args ]
example# 11186
if self . takes_context :pass
example# 11187
resolved_args = [ context ] + resolved_args
example# 11188
resolved_kwargs = dict ( ( k , v . resolve ( context ) ) for k , v in self . kwargs . items ( ) )
example# 11189
return resolved_args , resolved_kwargs
example# 11190
class Library ( object ) :pass
example# 11191
def __init__ ( self ) :pass
example# 11192
self . filters = { }
example# 11193
self . tags = { }
example# 11194
def tag ( self , name = None , compile_function = None ) :pass
example# 11195
if name is None and compile_function is None :pass
example# 11196
return self . tag_function
example# 11197
if True: pass
elif name is not None and compile_function is None :pass
example# 11198
if callable ( name ) :pass
example# 11199
return self . tag_function ( name )
example# 11200
if True: pass
else :pass
example# 11201
def dec ( func ) :pass
example# 11202
return self . tag ( name , func )
example# 11203
return dec
example# 11204
if True: pass
elif name is not None and compile_function is not None :pass
example# 11205
self . tags [ name ] = compile_function
example# 11206
return compile_function
example# 11207
if True: pass
else :pass
example# 11208
raise InvalidTemplateLibrary ( "Unsupported arguments to "  "Library.tag: (%r, %r)" , ( name , compile_function ) )
example# 11209
def tag_function ( self , func ) :pass
example# 11210
self . tags [ getattr ( func , '_STR:0_' , func ) . __name__ ] = func
example# 11211
return func
example# 11212
def filter ( self , name = None , filter_func = None , ** flags ) :pass
example# 11213
if name is None and filter_func is None :pass
example# 11214
def dec ( func ) :pass
example# 11215
return self . filter_function ( func , ** flags )
example# 11216
return dec
example# 11217
if True: pass
elif name is not None and filter_func is None :pass
example# 11218
if callable ( name ) :pass
example# 11219
return self . filter_function ( name , ** flags )
example# 11220
if True: pass
else :pass
example# 11221
def dec ( func ) :pass
example# 11222
return self . filter ( name , func , ** flags )
example# 11223
return dec
example# 11224
if True: pass
elif name is not None and filter_func is not None :pass
example# 11225
self . filters [ name ] = filter_func
example# 11226
for attr in ( '_STR:0_' , '_STR:1_' , '_STR:2_' ) :pass
example# 11227
if attr in flags :pass
example# 11228
value = flags [ attr ]
example# 11229
setattr ( filter_func , attr , value )
example# 11230
if hasattr ( filter_func , '_STR:0_' ) :pass
example# 11231
setattr ( filter_func . _decorated_function , attr , value )
example# 11232
filter_func . _filter_name = name
example# 11233
return filter_func
example# 11234
if True: pass
else :pass
example# 11235
raise InvalidTemplateLibrary ( "Unsupported arguments to "  "Library.filter: (%r, %r)" , ( name , filter_func ) )
example# 11236
def filter_function ( self , func , ** flags ) :pass
example# 11237
name = getattr ( func , '_STR:0_' , func ) . __name__
example# 11238
return self . filter ( name , func , ** flags )
example# 11239
def simple_tag ( self , func = None , takes_context = None , name = None ) :pass
example# 11240
def dec ( func ) :pass
example# 11241
params , varargs , varkw , defaults = getargspec ( func )
example# 11242
class SimpleNode ( TagHelperNode ) :pass
example# 11243
def render ( self , context ) :pass
example# 11244
resolved_args , resolved_kwargs = self . get_resolved_arguments ( context )
example# 11245
return func ( * resolved_args , ** resolved_kwargs )
example# 11246
function_name = ( name or  getattr ( func , '_STR:0_' , func ) . __name__ )
example# 11247
compile_func = partial ( generic_tag_compiler ,  params = params , varargs = varargs , varkw = varkw ,  defaults = defaults , name = function_name ,  takes_context = takes_context , node_class = SimpleNode )
example# 11248
compile_func . __doc__ = func . __doc__
example# 11249
self . tag ( function_name , compile_func )
example# 11250
return func
example# 11251
if func is None :pass
example# 11252
return dec
example# 11253
if True: pass
elif callable ( func ) :pass
example# 11254
return dec ( func )
example# 11255
if True: pass
else :pass
example# 11256
raise TemplateSyntaxError ( '_STR:0_' )
example# 11257
def assignment_tag ( self , func = None , takes_context = None , name = None ) :pass
example# 11258
def dec ( func ) :pass
example# 11259
params , varargs , varkw , defaults = getargspec ( func )
example# 11260
class AssignmentNode ( TagHelperNode ) :pass
example# 11261
def __init__ ( self , takes_context , args , kwargs , target_var ) :pass
example# 11262
super ( AssignmentNode , self ) . __init__ ( takes_context , args , kwargs )
example# 11263
self . target_var = target_var
example# 11264
def render ( self , context ) :pass
example# 11265
resolved_args , resolved_kwargs = self . get_resolved_arguments ( context )
example# 11266
context [ self . target_var ] = func ( * resolved_args , ** resolved_kwargs )
example# 11267
return ''
example# 11268
function_name = ( name or  getattr ( func , '_STR:0_' , func ) . __name__ )
example# 11269
def compile_func ( parser , token ) :pass
example# 11270
bits = token . split_contents ( ) [ 1 : ]
example# 11271
if len ( bits ) < 2 or bits [ - 2 ] != '_STR:0_' :pass
example# 11272
raise TemplateSyntaxError (  "'%s' tag takes at least 2 arguments and the "  "second last argument must be 'as'" % function_name )
example# 11273
target_var = bits [ - 1 ]
example# 11274
bits = bits [ : - 2 ]
example# 11275
args , kwargs = parse_bits ( parser , bits , params ,  varargs , varkw , defaults , takes_context , function_name )
example# 11276
return AssignmentNode ( takes_context , args , kwargs , target_var )
example# 11277
compile_func . __doc__ = func . __doc__
example# 11278
self . tag ( function_name , compile_func )
example# 11279
return func
example# 11280
if func is None :pass
example# 11281
return dec
example# 11282
if True: pass
elif callable ( func ) :pass
example# 11283
return dec ( func )
example# 11284
if True: pass
else :pass
example# 11285
raise TemplateSyntaxError ( '_STR:0_' )
example# 11286
def inclusion_tag ( self , file_name , context_class = Context , takes_context = False , name = None ) :pass
example# 11287
def dec ( func ) :pass
example# 11288
params , varargs , varkw , defaults = getargspec ( func )
example# 11289
class InclusionNode ( TagHelperNode ) :pass
example# 11290
def render ( self , context ) :pass
example# 11291
resolved_args , resolved_kwargs = self . get_resolved_arguments ( context )
example# 11292
_dict = func ( * resolved_args , ** resolved_kwargs )
example# 11293
if not getattr ( self , '_STR:0_' , False ) :pass
example# 11294
from django . template . loader import get_template , select_template
example# 11295
if isinstance ( file_name , Template ) :pass
example# 11296
t = file_name
example# 11297
if True: pass
elif not isinstance ( file_name , six . string_types ) and is_iterable ( file_name ) :pass
example# 11298
t = select_template ( file_name )
example# 11299
if True: pass
else :pass
example# 11300
t = get_template ( file_name )
example# 11301
self . nodelist = t . nodelist
example# 11302
new_context = context_class ( _dict , ** {  'autoescape' : context . autoescape ,  'current_app' : context . current_app ,  'use_l10n' : context . use_l10n ,  'use_tz' : context . use_tz ,  } )
example# 11303
csrf_token = context . get ( '_STR:4_' , None )
example# 11304
if csrf_token is not None :pass
example# 11305
new_context [ '_STR:0_' ] = csrf_token
example# 11306
return self . nodelist . render ( new_context )
example# 11307
function_name = ( name or  getattr ( func , '_STR:0_' , func ) . __name__ )
example# 11308
compile_func = partial ( generic_tag_compiler ,  params = params , varargs = varargs , varkw = varkw ,  defaults = defaults , name = function_name ,  takes_context = takes_context , node_class = InclusionNode )
example# 11309
compile_func . __doc__ = func . __doc__
example# 11310
self . tag ( function_name , compile_func )
example# 11311
return func
example# 11312
return dec
example# 11313
def is_library_missing ( name ) :pass
example# 11314
path , module = name . rsplit ( '_STR:0_' , 1 )
example# 11315
try :pass
except: pass
example# 11316
package = import_module ( path )
example# 11317
return not module_has_submodule ( package , module )
example# 11318
try: pass
except ImportError :pass
example# 11319
return is_library_missing ( path )
example# 11320
def import_library ( taglib_module ) :pass
example# 11321
try :pass
except: pass
example# 11322
mod = import_module ( taglib_module )
example# 11323
try: pass
except ImportError as e :pass
example# 11324
if is_library_missing ( taglib_module ) :pass
example# 11325
return None
example# 11326
if True: pass
else :pass
example# 11327
raise InvalidTemplateLibrary ( '_STR:0_' %  ( taglib_module , e ) )
example# 11328
try :pass
except: pass
example# 11329
return mod . register
example# 11330
try: pass
except AttributeError :pass
example# 11331
raise InvalidTemplateLibrary ( "Template library %s does not have "  "a variable named 'register'" %  taglib_module )
example# 11332
templatetags_modules = [ ]
example# 11333
def get_templatetags_modules ( ) :pass
example# 11334
global templatetags_modules
example# 11335
if not templatetags_modules :pass
example# 11336
_templatetags_modules = [ ]
example# 11337
templatetags_modules_candidates = [ '_STR:0_' ]
example# 11338
templatetags_modules_candidates += [ '_STR:0_' % app_config . name  for app_config in apps . get_app_configs ( ) ]
example# 11339
for templatetag_module in templatetags_modules_candidates :pass
example# 11340
try :pass
except: pass
example# 11341
import_module ( templatetag_module )
example# 11342
_templatetags_modules . append ( templatetag_module )
example# 11343
try: pass
except ImportError :pass
example# 11344
continue
example# 11345
templatetags_modules = _templatetags_modules
example# 11346
return templatetags_modules
example# 11347
def get_library ( library_name ) :pass
example# 11348
lib = libraries . get ( library_name , None )
example# 11349
if not lib :pass
example# 11350
templatetags_modules = get_templatetags_modules ( )
example# 11351
tried_modules = [ ]
example# 11352
for module in templatetags_modules :pass
example# 11353
taglib_module = '_STR:0_' % ( module , library_name )
example# 11354
tried_modules . append ( taglib_module )
example# 11355
lib = import_library ( taglib_module )
example# 11356
if lib :pass
example# 11357
libraries [ library_name ] = lib
example# 11358
break
example# 11359
if not lib :pass
example# 11360
raise InvalidTemplateLibrary ( "Template library %s not found, "  "tried %s" %  ( library_name ,  ',' . join ( tried_modules ) ) )
example# 11361
return lib
example# 11362
def add_to_builtins ( module ) :pass
example# 11363
builtins . append ( import_library ( module ) )
example# 11364
add_to_builtins ( '_STR:0_' )
example# 11365
add_to_builtins ( '_STR:0_' )
example# 11366
add_to_builtins ( '_STR:0_' )
example# 11367
from copy import copy
example# 11368
from django . utils . module_loading import import_string
example# 11369
_standard_context_processors = None
example# 11370
_builtin_context_processors = ( '_STR:0_' , )
example# 11371
class ContextPopException ( Exception ) :pass
example# 11372
pass
example# 11373
class ContextDict ( dict ) :pass
example# 11374
def __init__ ( self , context , * args , ** kwargs ) :pass
example# 11375
super ( ContextDict , self ) . __init__ ( * args , ** kwargs )
example# 11376
context . dicts . append ( self )
example# 11377
self . context = context
example# 11378
def __enter__ ( self ) :pass
example# 11379
return self
example# 11380
def __exit__ ( self , * args , ** kwargs ) :pass
example# 11381
self . context . pop ( )
example# 11382
class BaseContext ( object ) :pass
example# 11383
def __init__ ( self , dict_ = None ) :pass
example# 11384
self . _reset_dicts ( dict_ )
example# 11385
def _reset_dicts ( self , value = None ) :pass
example# 11386
builtins = { '_STR:0_' : True , '_STR:1_' : False , '_STR:2_' : None }
example# 11387
self . dicts = [ builtins ]
example# 11388
if value is not None :pass
example# 11389
self . dicts . append ( value )
example# 11390
def __copy__ ( self ) :pass
example# 11391
duplicate = copy ( super ( BaseContext , self ) )
example# 11392
duplicate . dicts = self . dicts [ : ]
example# 11393
return duplicate
example# 11394
def __repr__ ( self ) :pass
example# 11395
return repr ( self . dicts )
example# 11396
def __iter__ ( self ) :pass
example# 11397
for d in reversed ( self . dicts ) :pass
example# 11398
yield d
example# 11399
def push ( self , * args , ** kwargs ) :pass
example# 11400
return ContextDict ( self , * args , ** kwargs )
example# 11401
def pop ( self ) :pass
example# 11402
if len ( self . dicts ) == 1 :pass
example# 11403
raise ContextPopException
example# 11404
return self . dicts . pop ( )
example# 11405
def __setitem__ ( self , key , value ) :pass
example# 11406
self . dicts [ - 1 ] [ key ] = value
example# 11407
def __getitem__ ( self , key ) :pass
example# 11408
for d in reversed ( self . dicts ) :pass
example# 11409
if key in d :pass
example# 11410
return d [ key ]
example# 11411
raise KeyError ( key )
example# 11412
def __delitem__ ( self , key ) :pass
example# 11413
del self . dicts [ - 1 ] [ key ]
example# 11414
def has_key ( self , key ) :pass
example# 11415
for d in self . dicts :pass
example# 11416
if key in d :pass
example# 11417
return True
example# 11418
return False
example# 11419
def __contains__ ( self , key ) :pass
example# 11420
return self . has_key ( key )
example# 11421
def get ( self , key , otherwise = None ) :pass
example# 11422
for d in reversed ( self . dicts ) :pass
example# 11423
if key in d :pass
example# 11424
return d [ key ]
example# 11425
return otherwise
example# 11426
def new ( self , values = None ) :pass
example# 11427
new_context = copy ( self )
example# 11428
new_context . _reset_dicts ( values )
example# 11429
return new_context
example# 11430
def flatten ( self ) :pass
example# 11431
flat = { }
example# 11432
for d in self . dicts :pass
example# 11433
flat . update ( d )
example# 11434
return flat
example# 11435
def __eq__ ( self , other ) :pass
example# 11436
if isinstance ( other , BaseContext ) :pass
example# 11437
return self . flatten ( ) == other . flatten ( )
example# 11438
return False
example# 11439
class Context ( BaseContext ) :pass
example# 11440
def __init__ ( self , dict_ = None , autoescape = True , current_app = None ,  use_l10n = None , use_tz = None ) :pass
example# 11441
self . autoescape = autoescape
example# 11442
self . current_app = current_app
example# 11443
self . use_l10n = use_l10n
example# 11444
self . use_tz = use_tz
example# 11445
self . render_context = RenderContext ( )
example# 11446
super ( Context , self ) . __init__ ( dict_ )
example# 11447
def __copy__ ( self ) :pass
example# 11448
duplicate = super ( Context , self ) . __copy__ ( )
example# 11449
duplicate . render_context = copy ( self . render_context )
example# 11450
return duplicate
example# 11451
def update ( self , other_dict ) :pass
example# 11452
if not hasattr ( other_dict , '_STR:0_' ) :pass
example# 11453
raise TypeError ( '_STR:0_' )
example# 11454
self . dicts . append ( other_dict )
example# 11455
return other_dict
example# 11456
class RenderContext ( BaseContext ) :pass
example# 11457
def __iter__ ( self ) :pass
example# 11458
for d in self . dicts [ - 1 ] :pass
example# 11459
yield d
example# 11460
def has_key ( self , key ) :pass
example# 11461
return key in self . dicts [ - 1 ]
example# 11462
def get ( self , key , otherwise = None ) :pass
example# 11463
return self . dicts [ - 1 ] . get ( key , otherwise )
example# 11464
def __getitem__ ( self , key ) :pass
example# 11465
return self . dicts [ - 1 ] [ key ]
example# 11466
def get_standard_processors ( ) :pass
example# 11467
from django . conf import settings
example# 11468
global _standard_context_processors
example# 11469
if _standard_context_processors is None :pass
example# 11470
processors = [ ]
example# 11471
collect = [ ]
example# 11472
collect . extend ( _builtin_context_processors )
example# 11473
collect . extend ( settings . TEMPLATE_CONTEXT_PROCESSORS )
example# 11474
for path in collect :pass
example# 11475
func = import_string ( path )
example# 11476
processors . append ( func )
example# 11477
_standard_context_processors = tuple ( processors )
example# 11478
return _standard_context_processors
example# 11479
class RequestContext ( Context ) :pass
example# 11480
def __init__ ( self , request , dict_ = None , processors = None , current_app = None ,  use_l10n = None , use_tz = None ) :pass
example# 11481
Context . __init__ ( self , dict_ , current_app = current_app ,  use_l10n = use_l10n , use_tz = use_tz )
example# 11482
if processors is None :pass
example# 11483
processors = ( )
example# 11484
if True: pass
else :pass
example# 11485
processors = tuple ( processors )
example# 11486
updates = dict ( )
example# 11487
for processor in get_standard_processors ( ) + processors :pass
example# 11488
updates . update ( processor ( request ) )
example# 11489
self . update ( updates )
example# 11490
from django . template . base import Lexer , Parser , tag_re , NodeList , VariableNode , TemplateSyntaxError
example# 11491
from django . utils . encoding import force_text
example# 11492
from django . utils . html import escape
example# 11493
from django . utils . safestring import SafeData , EscapeData
example# 11494
from django . utils . formats import localize
example# 11495
from django . utils . timezone import template_localtime
example# 11496
class DebugLexer ( Lexer ) :pass
example# 11497
def __init__ ( self , template_string , origin ) :pass
example# 11498
super ( DebugLexer , self ) . __init__ ( template_string , origin )
example# 11499
def tokenize ( self ) :pass
example# 11500
result , upto = [ ] , 0
example# 11501
for match in tag_re . finditer ( self . template_string ) :pass
example# 11502
start , end = match . span ( )
example# 11503
if start > upto :pass
example# 11504
result . append ( self . create_token ( self . template_string [ upto : start ] , ( upto , start ) , False ) )
example# 11505
upto = start
example# 11506
result . append ( self . create_token ( self . template_string [ start : end ] , ( start , end ) , True ) )
example# 11507
upto = end
example# 11508
last_bit = self . template_string [ upto : ]
example# 11509
if last_bit :pass
example# 11510
result . append ( self . create_token ( last_bit , ( upto , upto + len ( last_bit ) ) , False ) )
example# 11511
return result
example# 11512
def create_token ( self , token_string , source , in_tag ) :pass
example# 11513
token = super ( DebugLexer , self ) . create_token ( token_string , in_tag )
example# 11514
token . source = self . origin , source
example# 11515
return token
example# 11516
class DebugParser ( Parser ) :pass
example# 11517
def __init__ ( self , lexer ) :pass
example# 11518
super ( DebugParser , self ) . __init__ ( lexer )
example# 11519
self . command_stack = [ ]
example# 11520
def enter_command ( self , command , token ) :pass
example# 11521
self . command_stack . append ( ( command , token . source ) )
example# 11522
def exit_command ( self ) :pass
example# 11523
self . command_stack . pop ( )
example# 11524
def error ( self , token , msg ) :pass
example# 11525
return self . source_error ( token . source , msg )
example# 11526
def source_error ( self , source , msg ) :pass
example# 11527
e = TemplateSyntaxError ( msg )
example# 11528
e . django_template_source = source
example# 11529
return e
example# 11530
def create_nodelist ( self ) :pass
example# 11531
return DebugNodeList ( )
example# 11532
def create_variable_node ( self , contents ) :pass
example# 11533
return DebugVariableNode ( contents )
example# 11534
def extend_nodelist ( self , nodelist , node , token ) :pass
example# 11535
node . source = token . source
example# 11536
super ( DebugParser , self ) . extend_nodelist ( nodelist , node , token )
example# 11537
def unclosed_block_tag ( self , parse_until ) :pass
example# 11538
command , source = self . command_stack . pop ( )
example# 11539
msg = '_STR:0_' % ( command , ', ' . join ( parse_until ) )
example# 11540
raise self . source_error ( source , msg )
example# 11541
def compile_filter_error ( self , token , e ) :pass
example# 11542
if not hasattr ( e , '_STR:0_' ) :pass
example# 11543
e . django_template_source = token . source
example# 11544
def compile_function_error ( self , token , e ) :pass
example# 11545
if not hasattr ( e , '_STR:0_' ) :pass
example# 11546
e . django_template_source = token . source
example# 11547
class DebugNodeList ( NodeList ) :pass
example# 11548
def render_node ( self , node , context ) :pass
example# 11549
try :pass
except: pass
example# 11550
return node . render ( context )
example# 11551
try: pass
except Exception as e :pass
example# 11552
if not hasattr ( e , '_STR:0_' ) :pass
example# 11553
e . django_template_source = node . source
example# 11554
raise
example# 11555
class DebugVariableNode ( VariableNode ) :pass
example# 11556
def render ( self , context ) :pass
example# 11557
try :pass
except: pass
example# 11558
output = self . filter_expression . resolve ( context )
example# 11559
output = template_localtime ( output , use_tz = context . use_tz )
example# 11560
output = localize ( output , use_l10n = context . use_l10n )
example# 11561
output = force_text ( output )
example# 11562
try: pass
except UnicodeDecodeError :pass
example# 11563
return ''
example# 11564
try: pass
except Exception as e :pass
example# 11565
if not hasattr ( e , '_STR:0_' ) :pass
example# 11566
e . django_template_source = self . source
example# 11567
raise
example# 11568
if ( context . autoescape and not isinstance ( output , SafeData ) ) or isinstance ( output , EscapeData ) :pass
example# 11569
return escape ( output )
example# 11570
if True: pass
else :pass
example# 11571
return output
example# 11572
from __future__ import unicode_literals
example# 11573
import re
example# 11574
import random as random_module
example# 11575
from decimal import Decimal , InvalidOperation , Context , ROUND_HALF_UP
example# 11576
from functools import wraps
example# 11577
from pprint import pformat
example# 11578
from django . template . base import Variable , Library , VariableDoesNotExist
example# 11579
from django . conf import settings
example# 11580
from django . utils import formats
example# 11581
from django . utils . dateformat import format , time_format
example# 11582
from django . utils . encoding import force_text , iri_to_uri
example# 11583
from django . utils . html import ( conditional_escape , escapejs ,  escape , urlize as _urlize , linebreaks , strip_tags , avoid_wrapping ,  remove_tags )
example# 11584
from django . utils . http import urlquote
example# 11585
from django . utils . text import Truncator , wrap , phone2numeric
example# 11586
from django . utils . safestring import mark_safe , SafeData , mark_for_escaping
example# 11587
from django . utils import six
example# 11588
from django . utils . timesince import timesince , timeuntil
example# 11589
from django . utils . translation import ugettext , ungettext
example# 11590
from django . utils . text import normalize_newlines , slugify as _slugify
example# 11591
register = Library ( )
example# 11592
def stringfilter ( func ) :pass
example# 11593
def _dec ( * args , ** kwargs ) :pass
example# 11594
if args :pass
example# 11595
args = list ( args )
example# 11596
args [ 0 ] = force_text ( args [ 0 ] )
example# 11597
if ( isinstance ( args [ 0 ] , SafeData ) and  getattr ( _dec . _decorated_function , '_STR:0_' , False ) ) :pass
example# 11598
return mark_safe ( func ( * args , ** kwargs ) )
example# 11599
return func ( * args , ** kwargs )
example# 11600
_dec . _decorated_function = getattr ( func , '_STR:0_' , func )
example# 11601
return wraps ( func ) ( _dec )
example# 11602
@ register . filter ( is_safe = True )
def dummy(): pass
example# 11603
@ stringfilter
def dummy(): pass
example# 11604
def addslashes ( value ) :pass
example# 11605
return value . replace ( '\\' , '\\\\' ) . replace ( '"' , '\\"' ) . replace ( "'" , "\\'" )
example# 11606
@ register . filter ( is_safe = True )
def dummy(): pass
example# 11607
@ stringfilter
def dummy(): pass
example# 11608
def capfirst ( value ) :pass
example# 11609
return value and value [ 0 ] . upper ( ) + value [ 1 : ]
example# 11610
@ register . filter ( '_STR:0_' )
def dummy(): pass
example# 11611
@ stringfilter
def dummy(): pass
example# 11612
def escapejs_filter ( value ) :pass
example# 11613
return escapejs ( value )
example# 11614
pos_inf = 1e200 * 1e200
example# 11615
neg_inf = - 1e200 * 1e200
example# 11616
nan = ( 1e200 * 1e200 ) // ( 1e200 * 1e200 )
example# 11617
special_floats = [ str ( pos_inf ) , str ( neg_inf ) , str ( nan ) ]
example# 11618
@ register . filter ( is_safe = True )
def dummy(): pass
example# 11619
def floatformat ( text , arg = - 1 ) :pass
example# 11620
try :pass
except: pass
example# 11621
input_val = force_text ( text )
example# 11622
d = Decimal ( input_val )
example# 11623
try: pass
except UnicodeEncodeError :pass
example# 11624
return ''
example# 11625
try: pass
except InvalidOperation :pass
example# 11626
if input_val in special_floats :pass
example# 11627
return input_val
example# 11628
try :pass
except: pass
example# 11629
d = Decimal ( force_text ( float ( text ) ) )
example# 11630
try: pass
except ( ValueError , InvalidOperation , TypeError , UnicodeEncodeError ) :pass
example# 11631
return ''
example# 11632
try :pass
except: pass
example# 11633
p = int ( arg )
example# 11634
try: pass
except ValueError :pass
example# 11635
return input_val
example# 11636
try :pass
except: pass
example# 11637
m = int ( d ) - d
example# 11638
try: pass
except ( ValueError , OverflowError , InvalidOperation ) :pass
example# 11639
return input_val
example# 11640
if not m and p < 0 :pass
example# 11641
return mark_safe ( formats . number_format ( '%d' % ( int ( d ) ) , 0 ) )
example# 11642
if p == 0 :pass
example# 11643
exp = Decimal ( 1 )
example# 11644
if True: pass
else :pass
example# 11645
exp = Decimal ( '_STR:0_' ) / ( Decimal ( 10 ) ** abs ( p ) )
example# 11646
try :pass
except: pass
example# 11647
tupl = d . as_tuple ( )
example# 11648
units = len ( tupl [ 1 ] ) - tupl [ 2 ]
example# 11649
prec = abs ( p ) + units + 1
example# 11650
sign , digits , exponent = d . quantize ( exp , ROUND_HALF_UP ,  Context ( prec = prec ) ) . as_tuple ( )
example# 11651
digits = [ six . text_type ( digit ) for digit in reversed ( digits ) ]
example# 11652
while len ( digits ) <= abs ( exponent ) :pass
example# 11653
digits . append ( '_STR:0_' )
example# 11654
digits . insert ( - exponent , '_STR:0_' )
example# 11655
if sign :pass
example# 11656
digits . append ( '_STR:0_' )
example# 11657
number = '' . join ( reversed ( digits ) )
example# 11658
return mark_safe ( formats . number_format ( number , abs ( p ) ) )
example# 11659
try: pass
except InvalidOperation :pass
example# 11660
return input_val
example# 11661
@ register . filter ( is_safe = True )
def dummy(): pass
example# 11662
@ stringfilter
def dummy(): pass
example# 11663
def iriencode ( value ) :pass
example# 11664
return force_text ( iri_to_uri ( value ) )
example# 11665
@ register . filter ( is_safe = True , needs_autoescape = True )
def dummy(): pass
example# 11666
@ stringfilter
def dummy(): pass
example# 11667
def linenumbers ( value , autoescape = None ) :pass
example# 11668
lines = value . split ( '\n' )
example# 11669
width = six . text_type ( len ( six . text_type ( len ( lines ) ) ) )
example# 11670
if not autoescape or isinstance ( value , SafeData ) :pass
example# 11671
for i , line in enumerate ( lines ) :pass
example# 11672
lines [ i ] = ( "%0" + width + '_STR:1_' ) % ( i + 1 , line )
example# 11673
if True: pass
else :pass
example# 11674
for i , line in enumerate ( lines ) :pass
example# 11675
lines [ i ] = ( "%0" + width + '_STR:1_' ) % ( i + 1 , escape ( line ) )
example# 11676
return mark_safe ( '\n' . join ( lines ) )
example# 11677
@ register . filter ( is_safe = True )
def dummy(): pass
example# 11678
@ stringfilter
def dummy(): pass
example# 11679
def lower ( value ) :pass
example# 11680
return value . lower ( )
example# 11681
@ register . filter ( is_safe = False )
def dummy(): pass
example# 11682
@ stringfilter
def dummy(): pass
example# 11683
def make_list ( value ) :pass
example# 11684
return list ( value )
example# 11685
@ register . filter ( is_safe = True )
def dummy(): pass
example# 11686
@ stringfilter
def dummy(): pass
example# 11687
def slugify ( value ) :pass
example# 11688
return _slugify ( value )
example# 11689
@ register . filter ( is_safe = True )
def dummy(): pass
example# 11690
def stringformat ( value , arg ) :pass
example# 11691
try :pass
except: pass
example# 11692
return ( "%" + six . text_type ( arg ) ) % value
example# 11693
try: pass
except ( ValueError , TypeError ) :pass
example# 11694
return ""
example# 11695
@ register . filter ( is_safe = True )
def dummy(): pass
example# 11696
@ stringfilter
def dummy(): pass
example# 11697
def title ( value ) :pass
example# 11698
t = re . sub ( '_STR:0_' , lambda m : m . group ( 0 ) . lower ( ) , value . title ( ) )
example# 11699
return re . sub ( '_STR:0_' , lambda m : m . group ( 0 ) . lower ( ) , t )
example# 11700
@ register . filter ( is_safe = True )
def dummy(): pass
example# 11701
@ stringfilter
def dummy(): pass
example# 11702
def truncatechars ( value , arg ) :pass
example# 11703
try :pass
except: pass
example# 11704
length = int ( arg )
example# 11705
try: pass
except ValueError :pass
example# 11706
return value
example# 11707
return Truncator ( value ) . chars ( length )
example# 11708
@ register . filter ( is_safe = True )
def dummy(): pass
example# 11709
@ stringfilter
def dummy(): pass
example# 11710
def truncatechars_html ( value , arg ) :pass
example# 11711
try :pass
except: pass
example# 11712
length = int ( arg )
example# 11713
try: pass
except ValueError :pass
example# 11714
return value
example# 11715
return Truncator ( value ) . chars ( length , html = True )
example# 11716
@ register . filter ( is_safe = True )
def dummy(): pass
example# 11717
@ stringfilter
def dummy(): pass
example# 11718
def truncatewords ( value , arg ) :pass
example# 11719
try :pass
except: pass
example# 11720
length = int ( arg )
example# 11721
try: pass
except ValueError :pass
example# 11722
return value
example# 11723
return Truncator ( value ) . words ( length , truncate = ' ...' )
example# 11724
@ register . filter ( is_safe = True )
def dummy(): pass
example# 11725
@ stringfilter
def dummy(): pass
example# 11726
def truncatewords_html ( value , arg ) :pass
example# 11727
try :pass
except: pass
example# 11728
length = int ( arg )
example# 11729
try: pass
except ValueError :pass
example# 11730
return value
example# 11731
return Truncator ( value ) . words ( length , html = True , truncate = ' ...' )
example# 11732
@ register . filter ( is_safe = False )
def dummy(): pass
example# 11733
@ stringfilter
def dummy(): pass
example# 11734
def upper ( value ) :pass
example# 11735
return value . upper ( )
example# 11736
@ register . filter ( is_safe = False )
def dummy(): pass
example# 11737
@ stringfilter
def dummy(): pass
example# 11738
def urlencode ( value , safe = None ) :pass
example# 11739
kwargs = { }
example# 11740
if safe is not None :pass
example# 11741
kwargs [ '_STR:0_' ] = safe
example# 11742
return urlquote ( value , ** kwargs )
example# 11743
@ register . filter ( is_safe = True , needs_autoescape = True )
def dummy(): pass
example# 11744
@ stringfilter
def dummy(): pass
example# 11745
def urlize ( value , autoescape = None ) :pass
example# 11746
return mark_safe ( _urlize ( value , nofollow = True , autoescape = autoescape ) )
example# 11747
@ register . filter ( is_safe = True , needs_autoescape = True )
def dummy(): pass
example# 11748
@ stringfilter
def dummy(): pass
example# 11749
def urlizetrunc ( value , limit , autoescape = None ) :pass
example# 11750
return mark_safe ( _urlize ( value , trim_url_limit = int ( limit ) , nofollow = True ,  autoescape = autoescape ) )
example# 11751
@ register . filter ( is_safe = False )
def dummy(): pass
example# 11752
@ stringfilter
def dummy(): pass
example# 11753
def wordcount ( value ) :pass
example# 11754
return len ( value . split ( ) )
example# 11755
@ register . filter ( is_safe = True )
def dummy(): pass
example# 11756
@ stringfilter
def dummy(): pass
example# 11757
def wordwrap ( value , arg ) :pass
example# 11758
return wrap ( value , int ( arg ) )
example# 11759
@ register . filter ( is_safe = True )
def dummy(): pass
example# 11760
@ stringfilter
def dummy(): pass
example# 11761
def ljust ( value , arg ) :pass
example# 11762
return value . ljust ( int ( arg ) )
example# 11763
@ register . filter ( is_safe = True )
def dummy(): pass
example# 11764
@ stringfilter
def dummy(): pass
example# 11765
def rjust ( value , arg ) :pass
example# 11766
return value . rjust ( int ( arg ) )
example# 11767
@ register . filter ( is_safe = True )
def dummy(): pass
example# 11768
@ stringfilter
def dummy(): pass
example# 11769
def center ( value , arg ) :pass
example# 11770
return value . center ( int ( arg ) )
example# 11771
@ register . filter
def dummy(): pass
example# 11772
@ stringfilter
def dummy(): pass
example# 11773
def cut ( value , arg ) :pass
example# 11774
safe = isinstance ( value , SafeData )
example# 11775
value = value . replace ( arg , '' )
example# 11776
if safe and arg != '_STR:0_' :pass
example# 11777
return mark_safe ( value )
example# 11778
return value
example# 11779
@ register . filter ( '_STR:0_' , is_safe = True )
def dummy(): pass
example# 11780
@ stringfilter
def dummy(): pass
example# 11781
def escape_filter ( value ) :pass
example# 11782
return mark_for_escaping ( value )
example# 11783
@ register . filter ( is_safe = True )
def dummy(): pass
example# 11784
@ stringfilter
def dummy(): pass
example# 11785
def force_escape ( value ) :pass
example# 11786
return escape ( value )
example# 11787
@ register . filter ( "linebreaks" , is_safe = True , needs_autoescape = True )
def dummy(): pass
example# 11788
@ stringfilter
def dummy(): pass
example# 11789
def linebreaks_filter ( value , autoescape = None ) :pass
example# 11790
autoescape = autoescape and not isinstance ( value , SafeData )
example# 11791
return mark_safe ( linebreaks ( value , autoescape ) )
example# 11792
@ register . filter ( is_safe = True , needs_autoescape = True )
def dummy(): pass
example# 11793
@ stringfilter
def dummy(): pass
example# 11794
def linebreaksbr ( value , autoescape = None ) :pass
example# 11795
autoescape = autoescape and not isinstance ( value , SafeData )
example# 11796
value = normalize_newlines ( value )
example# 11797
if autoescape :pass
example# 11798
value = escape ( value )
example# 11799
return mark_safe ( value . replace ( '\n' , '_STR:0_' ) )
example# 11800
@ register . filter ( is_safe = True )
def dummy(): pass
example# 11801
@ stringfilter
def dummy(): pass
example# 11802
def safe ( value ) :pass
example# 11803
return mark_safe ( value )
example# 11804
@ register . filter ( is_safe = True )
def dummy(): pass
example# 11805
def safeseq ( value ) :pass
example# 11806
return [ mark_safe ( force_text ( obj ) ) for obj in value ]
example# 11807
@ register . filter ( is_safe = True )
def dummy(): pass
example# 11808
@ stringfilter
def dummy(): pass
example# 11809
def removetags ( value , tags ) :pass
example# 11810
return remove_tags ( value , tags )
example# 11811
@ register . filter ( is_safe = True )
def dummy(): pass
example# 11812
@ stringfilter
def dummy(): pass
example# 11813
def striptags ( value ) :pass
example# 11814
return strip_tags ( value )
example# 11815
@ register . filter ( is_safe = False )
def dummy(): pass
example# 11816
def dictsort ( value , arg ) :pass
example# 11817
try :pass
except: pass
example# 11818
return sorted ( value , key = Variable ( arg ) . resolve )
example# 11819
try: pass
except ( TypeError , VariableDoesNotExist ) :pass
example# 11820
return ''
example# 11821
@ register . filter ( is_safe = False )
def dummy(): pass
example# 11822
def dictsortreversed ( value , arg ) :pass
example# 11823
try :pass
except: pass
example# 11824
return sorted ( value , key = Variable ( arg ) . resolve , reverse = True )
example# 11825
try: pass
except ( TypeError , VariableDoesNotExist ) :pass
example# 11826
return ''
example# 11827
@ register . filter ( is_safe = False )
def dummy(): pass
example# 11828
def first ( value ) :pass
example# 11829
try :pass
except: pass
example# 11830
return value [ 0 ]
example# 11831
try: pass
except IndexError :pass
example# 11832
return ''
example# 11833
@ register . filter ( is_safe = True , needs_autoescape = True )
def dummy(): pass
example# 11834
def join ( value , arg , autoescape = None ) :pass
example# 11835
value = map ( force_text , value )
example# 11836
if autoescape :pass
example# 11837
value = [ conditional_escape ( v ) for v in value ]
example# 11838
try :pass
except: pass
example# 11839
data = conditional_escape ( arg ) . join ( value )
example# 11840
try: pass
except AttributeError :pass
example# 11841
return value
example# 11842
return mark_safe ( data )
example# 11843
@ register . filter ( is_safe = True )
def dummy(): pass
example# 11844
def last ( value ) :pass
example# 11845
try :pass
except: pass
example# 11846
return value [ - 1 ]
example# 11847
try: pass
except IndexError :pass
example# 11848
return ''
example# 11849
@ register . filter ( is_safe = False )
def dummy(): pass
example# 11850
def length ( value ) :pass
example# 11851
try :pass
except: pass
example# 11852
return len ( value )
example# 11853
try: pass
except ( ValueError , TypeError ) :pass
example# 11854
return 0
example# 11855
@ register . filter ( is_safe = False )
def dummy(): pass
example# 11856
def length_is ( value , arg ) :pass
example# 11857
try :pass
except: pass
example# 11858
return len ( value ) == int ( arg )
example# 11859
try: pass
except ( ValueError , TypeError ) :pass
example# 11860
return ''
example# 11861
@ register . filter ( is_safe = True )
def dummy(): pass
example# 11862
def random ( value ) :pass
example# 11863
return random_module . choice ( value )
example# 11864
@ register . filter ( '_STR:0_' , is_safe = True )
def dummy(): pass
example# 11865
def slice_filter ( value , arg ) :pass
example# 11866
try :pass
except: pass
example# 11867
bits = [ ]
example# 11868
for x in arg . split ( '_STR:0_' ) :pass
example# 11869
if len ( x ) == 0 :pass
example# 11870
bits . append ( None )
example# 11871
if True: pass
else :pass
example# 11872
bits . append ( int ( x ) )
example# 11873
return value [ slice ( * bits ) ]
example# 11874
try: pass
except ( ValueError , TypeError ) :pass
example# 11875
return value
example# 11876
@ register . filter ( is_safe = True , needs_autoescape = True )
def dummy(): pass
example# 11877
def unordered_list ( value , autoescape = None ) :pass
example# 11878
if autoescape :pass
example# 11879
escaper = conditional_escape
example# 11880
if True: pass
else :pass
example# 11881
escaper = lambda x : x
example# 11882
def convert_old_style_list ( list_ ) :pass
example# 11883
if not isinstance ( list_ , ( tuple , list ) ) or len ( list_ ) != 2 :pass
example# 11884
return list_ , False
example# 11885
first_item , second_item = list_
example# 11886
if second_item == [ ] :pass
example# 11887
return [ first_item ] , True
example# 11888
try :pass
except: pass
example# 11889
iter ( second_item )
example# 11890
try: pass
except TypeError :pass
example# 11891
return list_ , False
example# 11892
old_style_list = True
example# 11893
new_second_item = [ ]
example# 11894
for sublist in second_item :pass
example# 11895
item , old_style_list = convert_old_style_list ( sublist )
example# 11896
if not old_style_list :pass
example# 11897
break
example# 11898
new_second_item . extend ( item )
example# 11899
if old_style_list :pass
example# 11900
second_item = new_second_item
example# 11901
return [ first_item , second_item ] , old_style_list
example# 11902
def _helper ( list_ , tabs = 1 ) :pass
example# 11903
indent = '\t' * tabs
example# 11904
output = [ ]
example# 11905
list_length = len ( list_ )
example# 11906
i = 0
example# 11907
while i < list_length :pass
example# 11908
title = list_ [ i ]
example# 11909
sublist = ''
example# 11910
sublist_item = None
example# 11911
if isinstance ( title , ( list , tuple ) ) :pass
example# 11912
sublist_item = title
example# 11913
title = ''
example# 11914
if True: pass
elif i < list_length - 1 :pass
example# 11915
next_item = list_ [ i + 1 ]
example# 11916
if next_item and isinstance ( next_item , ( list , tuple ) ) :pass
example# 11917
sublist_item = next_item
example# 11918
i += 1
example# 11919
if sublist_item :pass
example# 11920
sublist = _helper ( sublist_item , tabs + 1 )
example# 11921
sublist = '_STR:0_' % ( indent , sublist ,  indent , indent )
example# 11922
output . append ( '_STR:0_' % ( indent ,  escaper ( force_text ( title ) ) , sublist ) )
example# 11923
i += 1
example# 11924
return '\n' . join ( output )
example# 11925
value , converted = convert_old_style_list ( value )
example# 11926
return mark_safe ( _helper ( value ) )
example# 11927
@ register . filter ( is_safe = False )
def dummy(): pass
example# 11928
def add ( value , arg ) :pass
example# 11929
try :pass
except: pass
example# 11930
return int ( value ) + int ( arg )
example# 11931
try: pass
except ( ValueError , TypeError ) :pass
example# 11932
try :pass
except: pass
example# 11933
return value + arg
example# 11934
try: pass
except Exception :pass
example# 11935
return ''
example# 11936
@ register . filter ( is_safe = False )
def dummy(): pass
example# 11937
def get_digit ( value , arg ) :pass
example# 11938
try :pass
except: pass
example# 11939
arg = int ( arg )
example# 11940
value = int ( value )
example# 11941
try: pass
except ValueError :pass
example# 11942
return value
example# 11943
if arg < 1 :pass
example# 11944
return value
example# 11945
try :pass
except: pass
example# 11946
return int ( str ( value ) [ - arg ] )
example# 11947
try: pass
except IndexError :pass
example# 11948
return 0
example# 11949
@ register . filter ( expects_localtime = True , is_safe = False )
def dummy(): pass
example# 11950
def date ( value , arg = None ) :pass
example# 11951
if value in ( None , '' ) :pass
example# 11952
return ''
example# 11953
if arg is None :pass
example# 11954
arg = settings . DATE_FORMAT
example# 11955
try :pass
except: pass
example# 11956
return formats . date_format ( value , arg )
example# 11957
try: pass
except AttributeError :pass
example# 11958
try :pass
except: pass
example# 11959
return format ( value , arg )
example# 11960
try: pass
except AttributeError :pass
example# 11961
return ''
example# 11962
@ register . filter ( expects_localtime = True , is_safe = False )
def dummy(): pass
example# 11963
def time ( value , arg = None ) :pass
example# 11964
if value in ( None , '' ) :pass
example# 11965
return ''
example# 11966
if arg is None :pass
example# 11967
arg = settings . TIME_FORMAT
example# 11968
try :pass
except: pass
example# 11969
return formats . time_format ( value , arg )
example# 11970
try: pass
except AttributeError :pass
example# 11971
try :pass
except: pass
example# 11972
return time_format ( value , arg )
example# 11973
try: pass
except AttributeError :pass
example# 11974
return ''
example# 11975
@ register . filter ( '_STR:0_' , is_safe = False )
def dummy(): pass
example# 11976
def timesince_filter ( value , arg = None ) :pass
example# 11977
if not value :pass
example# 11978
return ''
example# 11979
try :pass
except: pass
example# 11980
if arg :pass
example# 11981
return timesince ( value , arg )
example# 11982
return timesince ( value )
example# 11983
try: pass
except ( ValueError , TypeError ) :pass
example# 11984
return ''
example# 11985
@ register . filter ( '_STR:0_' , is_safe = False )
def dummy(): pass
example# 11986
def timeuntil_filter ( value , arg = None ) :pass
example# 11987
if not value :pass
example# 11988
return ''
example# 11989
try :pass
except: pass
example# 11990
return timeuntil ( value , arg )
example# 11991
try: pass
except ( ValueError , TypeError ) :pass
example# 11992
return ''
example# 11993
@ register . filter ( is_safe = False )
def dummy(): pass
example# 11994
def default ( value , arg ) :pass
example# 11995
return value or arg
example# 11996
@ register . filter ( is_safe = False )
def dummy(): pass
example# 11997
def default_if_none ( value , arg ) :pass
example# 11998
if value is None :pass
example# 11999
return arg
example# 12000
return value
example# 12001
@ register . filter ( is_safe = False )
def dummy(): pass
example# 12002
def divisibleby ( value , arg ) :pass
example# 12003
return int ( value ) % int ( arg ) == 0
example# 12004
@ register . filter ( is_safe = False )
def dummy(): pass
example# 12005
def yesno ( value , arg = None ) :pass
example# 12006
if arg is None :pass
example# 12007
arg = ugettext ( '_STR:0_' )
example# 12008
bits = arg . split ( '_STR:0_' )
example# 12009
if len ( bits ) < 2 :pass
example# 12010
return value
example# 12011
try :pass
except: pass
example# 12012
yes , no , maybe = bits
example# 12013
try: pass
except ValueError :pass
example# 12014
yes , no , maybe = bits [ 0 ] , bits [ 1 ] , bits [ 1 ]
example# 12015
if value is None :pass
example# 12016
return maybe
example# 12017
if value :pass
example# 12018
return yes
example# 12019
return no
example# 12020
@ register . filter ( is_safe = True )
def dummy(): pass
example# 12021
def filesizeformat ( bytes ) :pass
example# 12022
try :pass
except: pass
example# 12023
bytes = float ( bytes )
example# 12024
try: pass
except ( TypeError , ValueError , UnicodeDecodeError ) :pass
example# 12025
value = ungettext ( '_STR:0_' , '_STR:1_' , 0 ) % { 'size' : 0 }
example# 12026
return avoid_wrapping ( value )
example# 12027
filesize_number_format = lambda value : formats . number_format ( round ( value , 1 ) , 1 )
example# 12028
KB = 1 << 10
example# 12029
MB = 1 << 20
example# 12030
GB = 1 << 30
example# 12031
TB = 1 << 40
example# 12032
PB = 1 << 50
example# 12033
if bytes < KB :pass
example# 12034
value = ungettext ( '_STR:0_' , '_STR:1_' , bytes ) % { 'size' : bytes }
example# 12035
if True: pass
elif bytes < MB :pass
example# 12036
value = ugettext ( '_STR:0_' ) % filesize_number_format ( bytes / KB )
example# 12037
if True: pass
elif bytes < GB :pass
example# 12038
value = ugettext ( '_STR:0_' ) % filesize_number_format ( bytes / MB )
example# 12039
if True: pass
elif bytes < TB :pass
example# 12040
value = ugettext ( '_STR:0_' ) % filesize_number_format ( bytes / GB )
example# 12041
if True: pass
elif bytes < PB :pass
example# 12042
value = ugettext ( '_STR:0_' ) % filesize_number_format ( bytes / TB )
example# 12043
if True: pass
else :pass
example# 12044
value = ugettext ( '_STR:0_' ) % filesize_number_format ( bytes / PB )
example# 12045
return avoid_wrapping ( value )
example# 12046
@ register . filter ( is_safe = False )
def dummy(): pass
example# 12047
def pluralize ( value , arg = '_STR:0_' ) :pass
example# 12048
if '_STR:0_' not in arg :pass
example# 12049
arg = '_STR:0_' + arg
example# 12050
bits = arg . split ( '_STR:0_' )
example# 12051
if len ( bits ) > 2 :pass
example# 12052
return ''
example# 12053
singular_suffix , plural_suffix = bits [ : 2 ]
example# 12054
try :pass
except: pass
example# 12055
if float ( value ) != 1 :pass
example# 12056
return plural_suffix
example# 12057
try: pass
except ValueError :pass
example# 12058
pass
example# 12059
try: pass
except TypeError :pass
example# 12060
try :pass
except: pass
example# 12061
if len ( value ) != 1 :pass
example# 12062
return plural_suffix
example# 12063
try: pass
except TypeError :pass
example# 12064
pass
example# 12065
return singular_suffix
example# 12066
@ register . filter ( '_STR:0_' , is_safe = True )
def dummy(): pass
example# 12067
def phone2numeric_filter ( value ) :pass
example# 12068
return phone2numeric ( value )
example# 12069
@ register . filter ( is_safe = True )
def dummy(): pass
example# 12070
def pprint ( value ) :pass
example# 12071
try :pass
except: pass
example# 12072
return pformat ( value )
example# 12073
try: pass
except Exception as e :pass
example# 12074
return '_STR:0_' % force_text ( e , errors = "replace" )
example# 12075
from __future__ import unicode_literals
example# 12076
import os
example# 12077
import sys
example# 12078
import re
example# 12079
from datetime import datetime
example# 12080
from itertools import groupby , cycle as itertools_cycle
example# 12081
import warnings
example# 12082
from django . conf import settings
example# 12083
from django . template . base import ( Node , NodeList , Template , Context , Library ,  TemplateSyntaxError , VariableDoesNotExist , InvalidTemplateLibrary ,  BLOCK_TAG_START , BLOCK_TAG_END , VARIABLE_TAG_START , VARIABLE_TAG_END ,  SINGLE_BRACE_START , SINGLE_BRACE_END , COMMENT_TAG_START , COMMENT_TAG_END ,  VARIABLE_ATTRIBUTE_SEPARATOR , get_library , token_kwargs , kwarg_re ,  render_value_in_context )
example# 12084
from django . template . smartif import IfParser , Literal
example# 12085
from django . template . defaultfilters import date
example# 12086
from django . utils . deprecation import RemovedInDjango20Warning
example# 12087
from django . utils . encoding import force_text , smart_text
example# 12088
from django . utils . safestring import mark_safe
example# 12089
from django . utils . html import format_html
example# 12090
from django . utils import six
example# 12091
from django . utils import timezone
example# 12092
register = Library ( )
example# 12093
class AutoEscapeControlNode ( Node ) :pass
example# 12094
def __init__ ( self , setting , nodelist ) :pass
example# 12095
self . setting , self . nodelist = setting , nodelist
example# 12096
def render ( self , context ) :pass
example# 12097
old_setting = context . autoescape
example# 12098
context . autoescape = self . setting
example# 12099
output = self . nodelist . render ( context )
example# 12100
context . autoescape = old_setting
example# 12101
if self . setting :pass
example# 12102
return mark_safe ( output )
example# 12103
if True: pass
else :pass
example# 12104
return output
example# 12105
class CommentNode ( Node ) :pass
example# 12106
def render ( self , context ) :pass
example# 12107
return ''
example# 12108
class CsrfTokenNode ( Node ) :pass
example# 12109
def render ( self , context ) :pass
example# 12110
csrf_token = context . get ( '_STR:0_' , None )
example# 12111
if csrf_token :pass
example# 12112
if csrf_token == '_STR:0_' :pass
example# 12113
return format_html ( "" )
example# 12114
if True: pass
else :pass
example# 12115
return format_html ( '_STR:0_' , csrf_token )
example# 12116
if True: pass
else :pass
example# 12117
if settings . DEBUG :pass
example# 12118
warnings . warn ( '_STR:0_' )
example# 12119
return ''
example# 12120
class CycleNode ( Node ) :pass
example# 12121
def __init__ ( self , cyclevars , variable_name = None , silent = False ) :pass
example# 12122
self . cyclevars = cyclevars
example# 12123
self . variable_name = variable_name
example# 12124
self . silent = silent
example# 12125
def render ( self , context ) :pass
example# 12126
if self not in context . render_context :pass
example# 12127
context . render_context [ self ] = itertools_cycle ( self . cyclevars )
example# 12128
cycle_iter = context . render_context [ self ]
example# 12129
value = next ( cycle_iter ) . resolve ( context )
example# 12130
if self . variable_name :pass
example# 12131
context [ self . variable_name ] = value
example# 12132
if self . silent :pass
example# 12133
return ''
example# 12134
return render_value_in_context ( value , context )
example# 12135
class DebugNode ( Node ) :pass
example# 12136
def render ( self , context ) :pass
example# 12137
from pprint import pformat
example# 12138
output = [ pformat ( val ) for val in context ]
example# 12139
output . append ( '\n\n' )
example# 12140
output . append ( pformat ( sys . modules ) )
example# 12141
return '' . join ( output )
example# 12142
class FilterNode ( Node ) :pass
example# 12143
def __init__ ( self , filter_expr , nodelist ) :pass
example# 12144
self . filter_expr , self . nodelist = filter_expr , nodelist
example# 12145
def render ( self , context ) :pass
example# 12146
output = self . nodelist . render ( context )
example# 12147
with context . push ( var = output ) :pass
example# 12148
return self . filter_expr . resolve ( context )
example# 12149
class FirstOfNode ( Node ) :pass
example# 12150
def __init__ ( self , variables ) :pass
example# 12151
self . vars = variables
example# 12152
def render ( self , context ) :pass
example# 12153
for var in self . vars :pass
example# 12154
value = var . resolve ( context , True )
example# 12155
if value :pass
example# 12156
return render_value_in_context ( value , context )
example# 12157
return ''
example# 12158
class ForNode ( Node ) :pass
example# 12159
child_nodelists = ( '_STR:0_' , '_STR:1_' )
example# 12160
def __init__ ( self , loopvars , sequence , is_reversed , nodelist_loop , nodelist_empty = None ) :pass
example# 12161
self . loopvars , self . sequence = loopvars , sequence
example# 12162
self . is_reversed = is_reversed
example# 12163
self . nodelist_loop = nodelist_loop
example# 12164
if nodelist_empty is None :pass
example# 12165
self . nodelist_empty = NodeList ( )
example# 12166
if True: pass
else :pass
example# 12167
self . nodelist_empty = nodelist_empty
example# 12168
def __repr__ ( self ) :pass
example# 12169
reversed_text = '_STR:0_' if self . is_reversed else ''
example# 12170
return '_STR:0_' % ( ', ' . join ( self . loopvars ) , self . sequence , len ( self . nodelist_loop ) ,  reversed_text )
example# 12171
def __iter__ ( self ) :pass
example# 12172
for node in self . nodelist_loop :pass
example# 12173
yield node
example# 12174
for node in self . nodelist_empty :pass
example# 12175
yield node
example# 12176
def render ( self , context ) :pass
example# 12177
if '_STR:0_' in context :pass
example# 12178
parentloop = context [ '_STR:0_' ]
example# 12179
if True: pass
else :pass
example# 12180
parentloop = { }
example# 12181
with context . push ( ) :pass
example# 12182
try :pass
except: pass
example# 12183
values = self . sequence . resolve ( context , True )
example# 12184
try: pass
except VariableDoesNotExist :pass
example# 12185
values = [ ]
example# 12186
if values is None :pass
example# 12187
values = [ ]
example# 12188
if not hasattr ( values , '_STR:0_' ) :pass
example# 12189
values = list ( values )
example# 12190
len_values = len ( values )
example# 12191
if len_values < 1 :pass
example# 12192
return self . nodelist_empty . render ( context )
example# 12193
nodelist = [ ]
example# 12194
if self . is_reversed :pass
example# 12195
values = reversed ( values )
example# 12196
num_loopvars = len ( self . loopvars )
example# 12197
unpack = num_loopvars > 1
example# 12198
loop_dict = context [ '_STR:0_' ] = { '_STR:1_' : parentloop }
example# 12199
for i , item in enumerate ( values ) :pass
example# 12200
loop_dict [ '_STR:0_' ] = i
example# 12201
loop_dict [ '_STR:0_' ] = i + 1
example# 12202
loop_dict [ '_STR:0_' ] = len_values - i
example# 12203
loop_dict [ 'revcounter0' ] = len_values - i - 1
example# 12204
loop_dict [ '_STR:0_' ] = ( i == 0 )
example# 12205
loop_dict [ '_STR:0_' ] = ( i == len_values - 1 )
example# 12206
pop_context = False
example# 12207
if unpack :pass
example# 12208
if not isinstance ( item , ( list , tuple ) ) :pass
example# 12209
len_item = 1
example# 12210
if True: pass
else :pass
example# 12211
len_item = len ( item )
example# 12212
if num_loopvars != len_item :pass
example# 12213
warnings . warn (  "Need {0} values to unpack in for loop; got {1}. "  "This will raise an exception in Django 2.0."  . format ( num_loopvars , len_item ) ,  RemovedInDjango20Warning )
example# 12214
try :pass
except: pass
example# 12215
unpacked_vars = dict ( zip ( self . loopvars , item ) )
example# 12216
try: pass
except TypeError :pass
example# 12217
pass
example# 12218
if True: pass
else :pass
example# 12219
pop_context = True
example# 12220
context . update ( unpacked_vars )
example# 12221
if True: pass
else :pass
example# 12222
context [ self . loopvars [ 0 ] ] = item
example# 12223
if settings . TEMPLATE_DEBUG :pass
example# 12224
for node in self . nodelist_loop :pass
example# 12225
try :pass
except: pass
example# 12226
nodelist . append ( node . render ( context ) )
example# 12227
try: pass
except Exception as e :pass
example# 12228
if not hasattr ( e , '_STR:0_' ) :pass
example# 12229
e . django_template_source = node . source
example# 12230
raise
example# 12231
if True: pass
else :pass
example# 12232
for node in self . nodelist_loop :pass
example# 12233
nodelist . append ( node . render ( context ) )
example# 12234
if pop_context :pass
example# 12235
context . pop ( )
example# 12236
return mark_safe ( '' . join ( force_text ( n ) for n in nodelist ) )
example# 12237
class IfChangedNode ( Node ) :pass
example# 12238
child_nodelists = ( '_STR:0_' , '_STR:1_' )
example# 12239
def __init__ ( self , nodelist_true , nodelist_false , * varlist ) :pass
example# 12240
self . nodelist_true , self . nodelist_false = nodelist_true , nodelist_false
example# 12241
self . _varlist = varlist
example# 12242
def render ( self , context ) :pass
example# 12243
state_frame = self . _get_context_stack_frame ( context )
example# 12244
if self not in state_frame :pass
example# 12245
state_frame [ self ] = None
example# 12246
nodelist_true_output = None
example# 12247
try :pass
except: pass
example# 12248
if self . _varlist :pass
example# 12249
compare_to = [ var . resolve ( context , True ) for var in self . _varlist ]
example# 12250
if True: pass
else :pass
example# 12251
compare_to = nodelist_true_output = self . nodelist_true . render ( context )
example# 12252
try: pass
except VariableDoesNotExist :pass
example# 12253
compare_to = None
example# 12254
if compare_to != state_frame [ self ] :pass
example# 12255
state_frame [ self ] = compare_to
example# 12256
return nodelist_true_output or self . nodelist_true . render ( context )
example# 12257
if True: pass
elif self . nodelist_false :pass
example# 12258
return self . nodelist_false . render ( context )
example# 12259
return ''
example# 12260
def _get_context_stack_frame ( self , context ) :pass
example# 12261
if '_STR:0_' in context :pass
example# 12262
return context [ '_STR:0_' ]
example# 12263
if True: pass
else :pass
example# 12264
return context . render_context
example# 12265
class IfEqualNode ( Node ) :pass
example# 12266
child_nodelists = ( '_STR:0_' , '_STR:1_' )
example# 12267
def __init__ ( self , var1 , var2 , nodelist_true , nodelist_false , negate ) :pass
example# 12268
self . var1 , self . var2 = var1 , var2
example# 12269
self . nodelist_true , self . nodelist_false = nodelist_true , nodelist_false
example# 12270
self . negate = negate
example# 12271
def __repr__ ( self ) :pass
example# 12272
return '_STR:0_'
example# 12273
def render ( self , context ) :pass
example# 12274
val1 = self . var1 . resolve ( context , True )
example# 12275
val2 = self . var2 . resolve ( context , True )
example# 12276
if ( self . negate and val1 != val2 ) or ( not self . negate and val1 == val2 ) :pass
example# 12277
return self . nodelist_true . render ( context )
example# 12278
return self . nodelist_false . render ( context )
example# 12279
class IfNode ( Node ) :pass
example# 12280
def __init__ ( self , conditions_nodelists ) :pass
example# 12281
self . conditions_nodelists = conditions_nodelists
example# 12282
def __repr__ ( self ) :pass
example# 12283
return '_STR:0_'
example# 12284
def __iter__ ( self ) :pass
example# 12285
for _ , nodelist in self . conditions_nodelists :pass
example# 12286
for node in nodelist :pass
example# 12287
yield node
example# 12288
@ property
def dummy(): pass
example# 12289
def nodelist ( self ) :pass
example# 12290
return NodeList ( node for _ , nodelist in self . conditions_nodelists for node in nodelist )
example# 12291
def render ( self , context ) :pass
example# 12292
for condition , nodelist in self . conditions_nodelists :pass
example# 12293
if condition is not None :pass
example# 12294
try :pass
except: pass
example# 12295
match = condition . eval ( context )
example# 12296
try: pass
except VariableDoesNotExist :pass
example# 12297
match = None
example# 12298
if True: pass
else :pass
example# 12299
match = True
example# 12300
if match :pass
example# 12301
return nodelist . render ( context )
example# 12302
return ''
example# 12303
class RegroupNode ( Node ) :pass
example# 12304
def __init__ ( self , target , expression , var_name ) :pass
example# 12305
self . target , self . expression = target , expression
example# 12306
self . var_name = var_name
example# 12307
def resolve_expression ( self , obj , context ) :pass
example# 12308
context [ self . var_name ] = obj
example# 12309
return self . expression . resolve ( context , True )
example# 12310
def render ( self , context ) :pass
example# 12311
obj_list = self . target . resolve ( context , True )
example# 12312
if obj_list is None :pass
example# 12313
context [ self . var_name ] = [ ]
example# 12314
return ''
example# 12315
context [ self . var_name ] = [  { 'grouper' : key , 'list' : list ( val ) }  for key , val in  groupby ( obj_list , lambda obj : self . resolve_expression ( obj , context ) )  ]
example# 12316
return ''
example# 12317
def include_is_allowed ( filepath ) :pass
example# 12318
filepath = os . path . abspath ( filepath )
example# 12319
for root in settings . ALLOWED_INCLUDE_ROOTS :pass
example# 12320
if filepath . startswith ( root ) :pass
example# 12321
return True
example# 12322
return False
example# 12323
class SsiNode ( Node ) :pass
example# 12324
def __init__ ( self , filepath , parsed ) :pass
example# 12325
self . filepath = filepath
example# 12326
self . parsed = parsed
example# 12327
def render ( self , context ) :pass
example# 12328
filepath = self . filepath . resolve ( context )
example# 12329
if not include_is_allowed ( filepath ) :pass
example# 12330
if settings . DEBUG :pass
example# 12331
return '_STR:0_'
example# 12332
if True: pass
else :pass
example# 12333
return ''
example# 12334
try :pass
except: pass
example# 12335
with open ( filepath , 'r' ) as fp :pass
example# 12336
output = fp . read ( )
example# 12337
try: pass
except IOError :pass
example# 12338
output = ''
example# 12339
if self . parsed :pass
example# 12340
try :pass
except: pass
example# 12341
t = Template ( output , name = filepath )
example# 12342
return t . render ( context )
example# 12343
try: pass
except TemplateSyntaxError as e :pass
example# 12344
if settings . DEBUG :pass
example# 12345
return '_STR:0_' % e
example# 12346
if True: pass
else :pass
example# 12347
return ''
example# 12348
return output
example# 12349
class LoadNode ( Node ) :pass
example# 12350
def render ( self , context ) :pass
example# 12351
return ''
example# 12352
class NowNode ( Node ) :pass
example# 12353
def __init__ ( self , format_string ) :pass
example# 12354
self . format_string = format_string
example# 12355
def render ( self , context ) :pass
example# 12356
tzinfo = timezone . get_current_timezone ( ) if settings . USE_TZ else None
example# 12357
return date ( datetime . now ( tz = tzinfo ) , self . format_string )
example# 12358
class SpacelessNode ( Node ) :pass
example# 12359
def __init__ ( self , nodelist ) :pass
example# 12360
self . nodelist = nodelist
example# 12361
def render ( self , context ) :pass
example# 12362
from django . utils . html import strip_spaces_between_tags
example# 12363
return strip_spaces_between_tags ( self . nodelist . render ( context ) . strip ( ) )
example# 12364
class TemplateTagNode ( Node ) :pass
example# 12365
mapping = { '_STR:0_' : BLOCK_TAG_START ,  '_STR:1_' : BLOCK_TAG_END ,  'openvariable' : VARIABLE_TAG_START ,  'closevariable' : VARIABLE_TAG_END ,  'openbrace' : SINGLE_BRACE_START ,  'closebrace' : SINGLE_BRACE_END ,  'opencomment' : COMMENT_TAG_START ,  'closecomment' : COMMENT_TAG_END ,  }
example# 12366
def __init__ ( self , tagtype ) :pass
example# 12367
self . tagtype = tagtype
example# 12368
def render ( self , context ) :pass
example# 12369
return self . mapping . get ( self . tagtype , '' )
example# 12370
class URLNode ( Node ) :pass
example# 12371
def __init__ ( self , view_name , args , kwargs , asvar ) :pass
example# 12372
self . view_name = view_name
example# 12373
self . args = args
example# 12374
self . kwargs = kwargs
example# 12375
self . asvar = asvar
example# 12376
def render ( self , context ) :pass
example# 12377
from django . core . urlresolvers import reverse , NoReverseMatch
example# 12378
args = [ arg . resolve ( context ) for arg in self . args ]
example# 12379
kwargs = dict ( ( smart_text ( k , 'ascii' ) , v . resolve ( context ) )  for k , v in self . kwargs . items ( ) )
example# 12380
view_name = self . view_name . resolve ( context )
example# 12381
url = ''
example# 12382
try :pass
except: pass
example# 12383
url = reverse ( view_name , args = args , kwargs = kwargs , current_app = context . current_app )
example# 12384
try: pass
except NoReverseMatch :pass
example# 12385
exc_info = sys . exc_info ( )
example# 12386
if settings . SETTINGS_MODULE :pass
example# 12387
project_name = settings . SETTINGS_MODULE . split ( '_STR:0_' ) [ 0 ]
example# 12388
try :pass
except: pass
example# 12389
url = reverse ( project_name + '_STR:0_' + view_name ,  args = args , kwargs = kwargs ,  current_app = context . current_app )
example# 12390
try: pass
except NoReverseMatch :pass
example# 12391
if self . asvar is None :pass
example# 12392
six . reraise ( * exc_info )
example# 12393
if True: pass
else :pass
example# 12394
if self . asvar is None :pass
example# 12395
raise
example# 12396
if self . asvar :pass
example# 12397
context [ self . asvar ] = url
example# 12398
return ''
example# 12399
if True: pass
else :pass
example# 12400
return url
example# 12401
class VerbatimNode ( Node ) :pass
example# 12402
def __init__ ( self , content ) :pass
example# 12403
self . content = content
example# 12404
def render ( self , context ) :pass
example# 12405
return self . content
example# 12406
class WidthRatioNode ( Node ) :pass
example# 12407
def __init__ ( self , val_expr , max_expr , max_width , asvar = None ) :pass
example# 12408
self . val_expr = val_expr
example# 12409
self . max_expr = max_expr
example# 12410
self . max_width = max_width
example# 12411
self . asvar = asvar
example# 12412
def render ( self , context ) :pass
example# 12413
try :pass
except: pass
example# 12414
value = self . val_expr . resolve ( context )
example# 12415
max_value = self . max_expr . resolve ( context )
example# 12416
max_width = int ( self . max_width . resolve ( context ) )
example# 12417
try: pass
except VariableDoesNotExist :pass
example# 12418
return ''
example# 12419
try: pass
except ( ValueError , TypeError ) :pass
example# 12420
raise TemplateSyntaxError ( '_STR:0_' )
example# 12421
try :pass
except: pass
example# 12422
value = float ( value )
example# 12423
max_value = float ( max_value )
example# 12424
ratio = ( value / max_value ) * max_width
example# 12425
result = str ( int ( round ( ratio ) ) )
example# 12426
try: pass
except ZeroDivisionError :pass
example# 12427
return '_STR:0_'
example# 12428
try: pass
except ( ValueError , TypeError , OverflowError ) :pass
example# 12429
return ''
example# 12430
if self . asvar :pass
example# 12431
context [ self . asvar ] = result
example# 12432
return ''
example# 12433
if True: pass
else :pass
example# 12434
return result
example# 12435
class WithNode ( Node ) :pass
example# 12436
def __init__ ( self , var , name , nodelist , extra_context = None ) :pass
example# 12437
self . nodelist = nodelist
example# 12438
self . extra_context = extra_context or { }
example# 12439
if name :pass
example# 12440
self . extra_context [ name ] = var
example# 12441
def __repr__ ( self ) :pass
example# 12442
return '_STR:0_'
example# 12443
def render ( self , context ) :pass
example# 12444
values = dict ( ( key , val . resolve ( context ) ) for key , val in  six . iteritems ( self . extra_context ) )
example# 12445
with context . push ( ** values ) :pass
example# 12446
return self . nodelist . render ( context )
example# 12447
@ register . tag
def dummy(): pass
example# 12448
def autoescape ( parser , token ) :pass
example# 12449
args = token . contents . split ( )
example# 12450
if len ( args ) != 2 :pass
example# 12451
raise TemplateSyntaxError ( '_STR:0_' )
example# 12452
arg = args [ 1 ]
example# 12453
if arg not in ( '_STR:0_' , '_STR:1_' ) :pass
example# 12454
raise TemplateSyntaxError ( '_STR:0_' )
example# 12455
nodelist = parser . parse ( ( '_STR:0_' , ) )
example# 12456
parser . delete_first_token ( )
example# 12457
return AutoEscapeControlNode ( ( arg == '_STR:0_' ) , nodelist )
example# 12458
@ register . tag
def dummy(): pass
example# 12459
def comment ( parser , token ) :pass
example# 12460
parser . skip_past ( '_STR:0_' )
example# 12461
return CommentNode ( )
example# 12462
@ register . tag
def dummy(): pass
example# 12463
def cycle ( parser , token ) :pass
example# 12464
args = token . split_contents ( )
example# 12465
if len ( args ) < 2 :pass
example# 12466
raise TemplateSyntaxError ( '_STR:0_' )
example# 12467
if '_STR:0_' in args [ 1 ] :pass
example# 12468
args [ 1 : 2 ] = [ '"%s"' % arg for arg in args [ 1 ] . split ( "," ) ]
example# 12469
if len ( args ) == 2 :pass
example# 12470
name = args [ 1 ]
example# 12471
if not hasattr ( parser , '_STR:0_' ) :pass
example# 12472
raise TemplateSyntaxError ( '_STR:0_' % name )
example# 12473
if name not in parser . _namedCycleNodes :pass
example# 12474
raise TemplateSyntaxError ( '_STR:0_' % name )
example# 12475
return parser . _namedCycleNodes [ name ]
example# 12476
as_form = False
example# 12477
if len ( args ) > 4 :pass
example# 12478
if args [ - 3 ] == "as" :pass
example# 12479
if args [ - 1 ] != '_STR:0_' :pass
example# 12480
raise TemplateSyntaxError ( '_STR:0_' % args [ - 1 ] )
example# 12481
as_form = True
example# 12482
silent = True
example# 12483
args = args [ : - 1 ]
example# 12484
if True: pass
elif args [ - 2 ] == "as" :pass
example# 12485
as_form = True
example# 12486
silent = False
example# 12487
if as_form :pass
example# 12488
name = args [ - 1 ]
example# 12489
values = [ parser . compile_filter ( arg ) for arg in args [ 1 : - 2 ] ]
example# 12490
node = CycleNode ( values , name , silent = silent )
example# 12491
if not hasattr ( parser , '_STR:0_' ) :pass
example# 12492
parser . _namedCycleNodes = { }
example# 12493
parser . _namedCycleNodes [ name ] = node
example# 12494
if True: pass
else :pass
example# 12495
values = [ parser . compile_filter ( arg ) for arg in args [ 1 : ] ]
example# 12496
node = CycleNode ( values )
example# 12497
return node
example# 12498
@ register . tag
def dummy(): pass
example# 12499
def csrf_token ( parser , token ) :pass
example# 12500
return CsrfTokenNode ( )
example# 12501
@ register . tag
def dummy(): pass
example# 12502
def debug ( parser , token ) :pass
example# 12503
return DebugNode ( )
example# 12504
@ register . tag ( '_STR:0_' )
def dummy(): pass
example# 12505
def do_filter ( parser , token ) :pass
example# 12506
_ , rest = token . contents . split ( None , 1 )
example# 12507
filter_expr = parser . compile_filter ( '_STR:0_' % ( rest ) )
example# 12508
for func , unused in filter_expr . filters :pass
example# 12509
filter_name = getattr ( func , '_STR:0_' , None )
example# 12510
if filter_name in ( '_STR:0_' , '_STR:1_' ) :pass
example# 12511
raise TemplateSyntaxError ( '_STR:0_' % filter_name )
example# 12512
nodelist = parser . parse ( ( '_STR:0_' , ) )
example# 12513
parser . delete_first_token ( )
example# 12514
return FilterNode ( filter_expr , nodelist )
example# 12515
@ register . tag
def dummy(): pass
example# 12516
def firstof ( parser , token ) :pass
example# 12517
bits = token . split_contents ( ) [ 1 : ]
example# 12518
if len ( bits ) < 1 :pass
example# 12519
raise TemplateSyntaxError ( '_STR:0_' )
example# 12520
return FirstOfNode ( [ parser . compile_filter ( bit ) for bit in bits ] )
example# 12521
@ register . tag ( '_STR:0_' )
def dummy(): pass
example# 12522
def do_for ( parser , token ) :pass
example# 12523
bits = token . split_contents ( )
example# 12524
if len ( bits ) < 4 :pass
example# 12525
raise TemplateSyntaxError ( "'for' statements should have at least four"  " words: %s" % token . contents )
example# 12526
is_reversed = bits [ - 1 ] == '_STR:0_'
example# 12527
in_index = - 3 if is_reversed else - 2
example# 12528
if bits [ in_index ] != '_STR:0_' :pass
example# 12529
raise TemplateSyntaxError ( "'for' statements should use the format"  " 'for x in y': %s" % token . contents )
example# 12530
loopvars = re . split ( r'_STR:0_' , ' ' . join ( bits [ 1 : in_index ] ) )
example# 12531
for var in loopvars :pass
example# 12532
if not var or ' ' in var :pass
example# 12533
raise TemplateSyntaxError ( "'for' tag received an invalid argument:"  " %s" % token . contents )
example# 12534
sequence = parser . compile_filter ( bits [ in_index + 1 ] )
example# 12535
nodelist_loop = parser . parse ( ( '_STR:0_' , '_STR:1_' , ) )
example# 12536
token = parser . next_token ( )
example# 12537
if token . contents == '_STR:0_' :pass
example# 12538
nodelist_empty = parser . parse ( ( '_STR:0_' , ) )
example# 12539
parser . delete_first_token ( )
example# 12540
if True: pass
else :pass
example# 12541
nodelist_empty = None
example# 12542
return ForNode ( loopvars , sequence , is_reversed , nodelist_loop , nodelist_empty )
example# 12543
def do_ifequal ( parser , token , negate ) :pass
example# 12544
bits = list ( token . split_contents ( ) )
example# 12545
if len ( bits ) != 3 :pass
example# 12546
raise TemplateSyntaxError ( '_STR:0_' % bits [ 0 ] )
example# 12547
end_tag = '_STR:1_' + bits [ 0 ]
example# 12548
nodelist_loop = parser . parse ( ( '_STR:0_' , end_tag ) )
example# 12549
token = parser . next_token ( )
example# 12550
if token . contents == '_STR:0_' :pass
example# 12551
nodelist_false = parser . parse ( ( end_tag , ) )
example# 12552
parser . delete_first_token ( )
example# 12553
if True: pass
else :pass
example# 12554
nodelist_false = NodeList ( )
example# 12555
val1 = parser . compile_filter ( bits [ 1 ] )
example# 12556
val2 = parser . compile_filter ( bits [ 2 ] )
example# 12557
return IfEqualNode ( val1 , val2 , nodelist_true , nodelist_false , negate )
example# 12558
@ register . tag
def dummy(): pass
example# 12559
def ifequal ( parser , token ) :pass
example# 12560
return do_ifequal ( parser , token , False )
example# 12561
@ register . tag
def dummy(): pass
example# 12562
def ifnotequal ( parser , token ) :pass
example# 12563
return do_ifequal ( parser , token , True )
example# 12564
class TemplateLiteral ( Literal ) :pass
example# 12565
def __init__ ( self , value , text ) :pass
example# 12566
self . value = value
example# 12567
self . text = text
example# 12568
def display ( self ) :pass
example# 12569
return self . text
example# 12570
def eval ( self , context ) :pass
example# 12571
return self . value . resolve ( context , ignore_failures = True )
example# 12572
class TemplateIfParser ( IfParser ) :pass
example# 12573
error_class = TemplateSyntaxError
example# 12574
def __init__ ( self , parser , * args , ** kwargs ) :pass
example# 12575
self . template_parser = parser
example# 12576
super ( TemplateIfParser , self ) . __init__ ( * args , ** kwargs )
example# 12577
def create_var ( self , value ) :pass
example# 12578
return TemplateLiteral ( self . template_parser . compile_filter ( value ) , value )
example# 12579
@ register . tag ( '_STR:0_' )
def dummy(): pass
example# 12580
def do_if ( parser , token ) :pass
example# 12581
bits = token . split_contents ( ) [ 1 : ]
example# 12582
condition = TemplateIfParser ( parser , bits ) . parse ( )
example# 12583
nodelist = parser . parse ( ( '_STR:0_' , '_STR:1_' , '_STR:2_' ) )
example# 12584
conditions_nodelists = [ ( condition , nodelist ) ]
example# 12585
token = parser . next_token ( )
example# 12586
while token . contents . startswith ( '_STR:0_' ) :pass
example# 12587
bits = token . split_contents ( ) [ 1 : ]
example# 12588
condition = TemplateIfParser ( parser , bits ) . parse ( )
example# 12589
nodelist = parser . parse ( ( '_STR:0_' , '_STR:1_' , '_STR:2_' ) )
example# 12590
conditions_nodelists . append ( ( condition , nodelist ) )
example# 12591
token = parser . next_token ( )
example# 12592
if token . contents == '_STR:0_' :pass
example# 12593
nodelist = parser . parse ( ( '_STR:0_' , ) )
example# 12594
conditions_nodelists . append ( ( None , nodelist ) )
example# 12595
token = parser . next_token ( )
example# 12596
assert token . contents == '_STR:0_'
example# 12597
return IfNode ( conditions_nodelists )
example# 12598
@ register . tag
def dummy(): pass
example# 12599
def ifchanged ( parser , token ) :pass
example# 12600
bits = token . split_contents ( )
example# 12601
nodelist_true = parser . parse ( ( '_STR:0_' , 'endifchanged' ) )
example# 12602
token = parser . next_token ( )
example# 12603
if token . contents == '_STR:0_' :pass
example# 12604
nodelist_false = parser . parse ( ( '_STR:0_' , ) )
example# 12605
parser . delete_first_token ( )
example# 12606
if True: pass
else :pass
example# 12607
nodelist_false = NodeList ( )
example# 12608
values = [ parser . compile_filter ( bit ) for bit in bits [ 1 : ] ]
example# 12609
return IfChangedNode ( nodelist_true , nodelist_false , * values )
example# 12610
@ register . tag
def dummy(): pass
example# 12611
def ssi ( parser , token ) :pass
example# 12612
bits = token . split_contents ( )
example# 12613
parsed = False
example# 12614
if len ( bits ) not in ( 2 , 3 ) :pass
example# 12615
raise TemplateSyntaxError ( "'ssi' tag takes one argument: the path to"  " the file to be included" )
example# 12616
if len ( bits ) == 3 :pass
example# 12617
if bits [ 2 ] == '_STR:0_' :pass
example# 12618
parsed = True
example# 12619
if True: pass
else :pass
example# 12620
raise TemplateSyntaxError ( "Second (optional) argument to %s tag"  " must be 'parsed'" % bits [ 0 ] )
example# 12621
filepath = parser . compile_filter ( bits [ 1 ] )
example# 12622
return SsiNode ( filepath , parsed )
example# 12623
@ register . tag
def dummy(): pass
example# 12624
def load ( parser , token ) :pass
example# 12625
bits = token . contents . split ( )
example# 12626
if len ( bits ) >= 4 and bits [ - 2 ] == "from" :pass
example# 12627
try :pass
except: pass
example# 12628
taglib = bits [ - 1 ]
example# 12629
lib = get_library ( taglib )
example# 12630
try: pass
except InvalidTemplateLibrary as e :pass
example# 12631
raise TemplateSyntaxError ( '_STR:0_' %  ( taglib , e ) )
example# 12632
if True: pass
else :pass
example# 12633
temp_lib = Library ( )
example# 12634
for name in bits [ 1 : - 2 ] :pass
example# 12635
if name in lib . tags :pass
example# 12636
temp_lib . tags [ name ] = lib . tags [ name ]
example# 12637
if name in lib . filters :pass
example# 12638
temp_lib . filters [ name ] = lib . filters [ name ]
example# 12639
if True: pass
elif name in lib . filters :pass
example# 12640
temp_lib . filters [ name ] = lib . filters [ name ]
example# 12641
if True: pass
else :pass
example# 12642
raise TemplateSyntaxError ( '_STR:0_' %  ( name , taglib ) )
example# 12643
parser . add_library ( temp_lib )
example# 12644
if True: pass
else :pass
example# 12645
for taglib in bits [ 1 : ] :pass
example# 12646
try :pass
except: pass
example# 12647
lib = get_library ( taglib )
example# 12648
parser . add_library ( lib )
example# 12649
try: pass
except InvalidTemplateLibrary as e :pass
example# 12650
raise TemplateSyntaxError ( '_STR:0_' %  ( taglib , e ) )
example# 12651
return LoadNode ( )
example# 12652
@ register . tag
def dummy(): pass
example# 12653
def now ( parser , token ) :pass
example# 12654
bits = token . split_contents ( )
example# 12655
if len ( bits ) != 2 :pass
example# 12656
raise TemplateSyntaxError ( '_STR:0_' )
example# 12657
format_string = bits [ 1 ] [ 1 : - 1 ]
example# 12658
return NowNode ( format_string )
example# 12659
@ register . tag
def dummy(): pass
example# 12660
def regroup ( parser , token ) :pass
example# 12661
bits = token . split_contents ( )
example# 12662
if len ( bits ) != 6 :pass
example# 12663
raise TemplateSyntaxError ( '_STR:0_' )
example# 12664
target = parser . compile_filter ( bits [ 1 ] )
example# 12665
if bits [ 2 ] != '_STR:0_' :pass
example# 12666
raise TemplateSyntaxError ( '_STR:0_' )
example# 12667
if bits [ 4 ] != '_STR:0_' :pass
example# 12668
raise TemplateSyntaxError ( "next-to-last argument to 'regroup' tag must"  " be 'as'" )
example# 12669
var_name = bits [ 5 ]
example# 12670
expression = parser . compile_filter ( var_name +  VARIABLE_ATTRIBUTE_SEPARATOR +  bits [ 3 ] )
example# 12671
return RegroupNode ( target , expression , var_name )
example# 12672
@ register . tag
def dummy(): pass
example# 12673
def spaceless ( parser , token ) :pass
example# 12674
nodelist = parser . parse ( ( '_STR:0_' , ) )
example# 12675
parser . delete_first_token ( )
example# 12676
return SpacelessNode ( nodelist )
example# 12677
@ register . tag
def dummy(): pass
example# 12678
def templatetag ( parser , token ) :pass
example# 12679
bits = token . contents . split ( )
example# 12680
if len ( bits ) != 2 :pass
example# 12681
raise TemplateSyntaxError ( '_STR:0_' )
example# 12682
tag = bits [ 1 ]
example# 12683
if tag not in TemplateTagNode . mapping :pass
example# 12684
raise TemplateSyntaxError ( "Invalid templatetag argument: '%s'."  " Must be one of: %s" %  ( tag , list ( TemplateTagNode . mapping ) ) )
example# 12685
return TemplateTagNode ( tag )
example# 12686
@ register . tag
def dummy(): pass
example# 12687
def url ( parser , token ) :pass
example# 12688
bits = token . split_contents ( )
example# 12689
if len ( bits ) < 2 :pass
example# 12690
raise TemplateSyntaxError ( "'%s' takes at least one argument"  " (path to a view)" % bits [ 0 ] )
example# 12691
viewname = parser . compile_filter ( bits [ 1 ] )
example# 12692
args = [ ]
example# 12693
kwargs = { }
example# 12694
asvar = None
example# 12695
bits = bits [ 2 : ]
example# 12696
if len ( bits ) >= 2 and bits [ - 2 ] == '_STR:0_' :pass
example# 12697
asvar = bits [ - 1 ]
example# 12698
bits = bits [ : - 2 ]
example# 12699
if len ( bits ) :pass
example# 12700
for bit in bits :pass
example# 12701
match = kwarg_re . match ( bit )
example# 12702
if not match :pass
example# 12703
raise TemplateSyntaxError ( '_STR:0_' )
example# 12704
name , value = match . groups ( )
example# 12705
if name :pass
example# 12706
kwargs [ name ] = parser . compile_filter ( value )
example# 12707
if True: pass
else :pass
example# 12708
args . append ( parser . compile_filter ( value ) )
example# 12709
return URLNode ( viewname , args , kwargs , asvar )
example# 12710
@ register . tag
def dummy(): pass
example# 12711
def verbatim ( parser , token ) :pass
example# 12712
nodelist = parser . parse ( ( '_STR:0_' , ) )
example# 12713
parser . delete_first_token ( )
example# 12714
return VerbatimNode ( nodelist . render ( Context ( ) ) )
example# 12715
@ register . tag
def dummy(): pass
example# 12716
def widthratio ( parser , token ) :pass
example# 12717
bits = token . split_contents ( )
example# 12718
if len ( bits ) == 4 :pass
example# 12719
tag , this_value_expr , max_value_expr , max_width = bits
example# 12720
asvar = None
example# 12721
if True: pass
elif len ( bits ) == 6 :pass
example# 12722
tag , this_value_expr , max_value_expr , max_width , as_ , asvar = bits
example# 12723
if as_ != '_STR:0_' :pass
example# 12724
raise TemplateSyntaxError ( '_STR:0_' )
example# 12725
if True: pass
else :pass
example# 12726
raise TemplateSyntaxError ( '_STR:0_' )
example# 12727
return WidthRatioNode ( parser . compile_filter ( this_value_expr ) ,  parser . compile_filter ( max_value_expr ) ,  parser . compile_filter ( max_width ) ,  asvar = asvar )
example# 12728
@ register . tag ( '_STR:0_' )
def dummy(): pass
example# 12729
def do_with ( parser , token ) :pass
example# 12730
bits = token . split_contents ( )
example# 12731
remaining_bits = bits [ 1 : ]
example# 12732
extra_context = token_kwargs ( remaining_bits , parser , support_legacy = True )
example# 12733
if not extra_context :pass
example# 12734
raise TemplateSyntaxError ( "%r expected at least one variable "  "assignment" % bits [ 0 ] )
example# 12735
if remaining_bits :pass
example# 12736
raise TemplateSyntaxError ( '_STR:0_' %  ( bits [ 0 ] , remaining_bits [ 0 ] ) )
example# 12737
nodelist = parser . parse ( ( '_STR:0_' , ) )
example# 12738
parser . delete_first_token ( )
example# 12739
return WithNode ( None , None , nodelist , extra_context = extra_context )
example# 12740
from django . core . exceptions import ImproperlyConfigured
example# 12741
from django . template . base import Origin , Template , Context , TemplateDoesNotExist
example# 12742
from django . conf import settings
example# 12743
from django . utils . module_loading import import_string
example# 12744
from django . utils import six
example# 12745
template_source_loaders = None
example# 12746
class BaseLoader ( object ) :pass
example# 12747
is_usable = False
example# 12748
def __init__ ( self , * args , ** kwargs ) :pass
example# 12749
pass
example# 12750
def __call__ ( self , template_name , template_dirs = None ) :pass
example# 12751
return self . load_template ( template_name , template_dirs )
example# 12752
def load_template ( self , template_name , template_dirs = None ) :pass
example# 12753
source , display_name = self . load_template_source ( template_name , template_dirs )
example# 12754
origin = make_origin ( display_name , self . load_template_source , template_name , template_dirs )
example# 12755
try :pass
except: pass
example# 12756
template = get_template_from_string ( source , origin , template_name )
example# 12757
return template , None
example# 12758
try: pass
except TemplateDoesNotExist :pass
example# 12759
return source , display_name
example# 12760
def load_template_source ( self , template_name , template_dirs = None ) :pass
example# 12761
raise NotImplementedError ( '_STR:0_' )
example# 12762
def reset ( self ) :pass
example# 12763
pass
example# 12764
class LoaderOrigin ( Origin ) :pass
example# 12765
def __init__ ( self , display_name , loader , name , dirs ) :pass
example# 12766
super ( LoaderOrigin , self ) . __init__ ( display_name )
example# 12767
self . loader , self . loadname , self . dirs = loader , name , dirs
example# 12768
def reload ( self ) :pass
example# 12769
return self . loader ( self . loadname , self . dirs ) [ 0 ]
example# 12770
def make_origin ( display_name , loader , name , dirs ) :pass
example# 12771
if settings . TEMPLATE_DEBUG and display_name :pass
example# 12772
return LoaderOrigin ( display_name , loader , name , dirs )
example# 12773
if True: pass
else :pass
example# 12774
return None
example# 12775
def find_template_loader ( loader ) :pass
example# 12776
if isinstance ( loader , ( tuple , list ) ) :pass
example# 12777
loader , args = loader [ 0 ] , loader [ 1 : ]
example# 12778
if True: pass
else :pass
example# 12779
args = [ ]
example# 12780
if isinstance ( loader , six . string_types ) :pass
example# 12781
TemplateLoader = import_string ( loader )
example# 12782
if hasattr ( TemplateLoader , '_STR:0_' ) :pass
example# 12783
func = TemplateLoader ( * args )
example# 12784
if True: pass
else :pass
example# 12785
if args :pass
example# 12786
raise ImproperlyConfigured ( "Error importing template source loader %s - can't pass arguments to function-based loader." % loader )
example# 12787
func = TemplateLoader
example# 12788
if not func . is_usable :pass
example# 12789
import warnings
example# 12790
warnings . warn ( "Your TEMPLATE_LOADERS setting includes %r, but your Python installation doesn't support that type of template loading. Consider removing that line from TEMPLATE_LOADERS." % loader )
example# 12791
return None
example# 12792
if True: pass
else :pass
example# 12793
return func
example# 12794
if True: pass
else :pass
example# 12795
raise ImproperlyConfigured ( '_STR:0_' )
example# 12796
def find_template ( name , dirs = None ) :pass
example# 12797
global template_source_loaders
example# 12798
if template_source_loaders is None :pass
example# 12799
loaders = [ ]
example# 12800
for loader_name in settings . TEMPLATE_LOADERS :pass
example# 12801
loader = find_template_loader ( loader_name )
example# 12802
if loader is not None :pass
example# 12803
loaders . append ( loader )
example# 12804
template_source_loaders = tuple ( loaders )
example# 12805
for loader in template_source_loaders :pass
example# 12806
try :pass
except: pass
example# 12807
source , display_name = loader ( name , dirs )
example# 12808
return ( source , make_origin ( display_name , loader , name , dirs ) )
example# 12809
try: pass
except TemplateDoesNotExist :pass
example# 12810
pass
example# 12811
raise TemplateDoesNotExist ( name )
example# 12812
def get_template ( template_name , dirs = None ) :pass
example# 12813
template , origin = find_template ( template_name , dirs )
example# 12814
if not hasattr ( template , '_STR:0_' ) :pass
example# 12815
template = get_template_from_string ( template , origin , template_name )
example# 12816
return template
example# 12817
def get_template_from_string ( source , origin = None , name = None ) :pass
example# 12818
return Template ( source , origin , name )
example# 12819
def render_to_string ( template_name , dictionary = None , context_instance = None ,  dirs = None ) :pass
example# 12820
if isinstance ( template_name , ( list , tuple ) ) :pass
example# 12821
t = select_template ( template_name , dirs )
example# 12822
if True: pass
else :pass
example# 12823
t = get_template ( template_name , dirs )
example# 12824
if not context_instance :pass
example# 12825
return t . render ( Context ( dictionary ) )
example# 12826
if not dictionary :pass
example# 12827
return t . render ( context_instance )
example# 12828
with context_instance . push ( dictionary ) :pass
example# 12829
return t . render ( context_instance )
example# 12830
def select_template ( template_name_list , dirs = None ) :pass
example# 12831
if not template_name_list :pass
example# 12832
raise TemplateDoesNotExist ( '_STR:0_' )
example# 12833
not_found = [ ]
example# 12834
for template_name in template_name_list :pass
example# 12835
try :pass
except: pass
example# 12836
return get_template ( template_name , dirs )
example# 12837
try: pass
except TemplateDoesNotExist as e :pass
example# 12838
if e . args [ 0 ] not in not_found :pass
example# 12839
not_found . append ( e . args [ 0 ] )
example# 12840
continue
example# 12841
raise TemplateDoesNotExist ( '_STR:0_' . join ( not_found ) )
example# 12842
from collections import defaultdict
example# 12843
from django . conf import settings
example# 12844
from django . template . base import TemplateSyntaxError , Library , Node , TextNode , token_kwargs , Variable
example# 12845
from django . template . loader import get_template
example# 12846
from django . utils . safestring import mark_safe
example# 12847
from django . utils import six
example# 12848
register = Library ( )
example# 12849
BLOCK_CONTEXT_KEY = '_STR:0_'
example# 12850
class ExtendsError ( Exception ) :pass
example# 12851
pass
example# 12852
class BlockContext ( object ) :pass
example# 12853
def __init__ ( self ) :pass
example# 12854
self . blocks = defaultdict ( list )
example# 12855
def add_blocks ( self , blocks ) :pass
example# 12856
for name , block in six . iteritems ( blocks ) :pass
example# 12857
self . blocks [ name ] . insert ( 0 , block )
example# 12858
def pop ( self , name ) :pass
example# 12859
try :pass
except: pass
example# 12860
return self . blocks [ name ] . pop ( )
example# 12861
try: pass
except IndexError :pass
example# 12862
return None
example# 12863
def push ( self , name , block ) :pass
example# 12864
self . blocks [ name ] . append ( block )
example# 12865
def get_block ( self , name ) :pass
example# 12866
try :pass
except: pass
example# 12867
return self . blocks [ name ] [ - 1 ]
example# 12868
try: pass
except IndexError :pass
example# 12869
return None
example# 12870
class BlockNode ( Node ) :pass
example# 12871
def __init__ ( self , name , nodelist , parent = None ) :pass
example# 12872
self . name , self . nodelist , self . parent = name , nodelist , parent
example# 12873
def __repr__ ( self ) :pass
example# 12874
return '_STR:0_' % ( self . name , self . nodelist )
example# 12875
def render ( self , context ) :pass
example# 12876
block_context = context . render_context . get ( BLOCK_CONTEXT_KEY )
example# 12877
with context . push ( ) :pass
example# 12878
if block_context is None :pass
example# 12879
context [ '_STR:0_' ] = self
example# 12880
result = self . nodelist . render ( context )
example# 12881
if True: pass
else :pass
example# 12882
push = block = block_context . pop ( self . name )
example# 12883
if block is None :pass
example# 12884
block = self
example# 12885
block = type ( self ) ( block . name , block . nodelist )
example# 12886
block . context = context
example# 12887
context [ '_STR:0_' ] = block
example# 12888
result = block . nodelist . render ( context )
example# 12889
if push is not None :pass
example# 12890
block_context . push ( self . name , push )
example# 12891
return result
example# 12892
def super ( self ) :pass
example# 12893
render_context = self . context . render_context
example# 12894
if ( BLOCK_CONTEXT_KEY in render_context and  render_context [ BLOCK_CONTEXT_KEY ] . get_block ( self . name ) is not None ) :pass
example# 12895
return mark_safe ( self . render ( self . context ) )
example# 12896
return ''
example# 12897
class ExtendsNode ( Node ) :pass
example# 12898
must_be_first = True
example# 12899
def __init__ ( self , nodelist , parent_name , template_dirs = None ) :pass
example# 12900
self . nodelist = nodelist
example# 12901
self . parent_name = parent_name
example# 12902
self . template_dirs = template_dirs
example# 12903
self . blocks = dict ( ( n . name , n ) for n in nodelist . get_nodes_by_type ( BlockNode ) )
example# 12904
def __repr__ ( self ) :pass
example# 12905
return '_STR:0_' % self . parent_name . token
example# 12906
def get_parent ( self , context ) :pass
example# 12907
parent = self . parent_name . resolve ( context )
example# 12908
if not parent :pass
example# 12909
error_msg = '_STR:0_' % parent
example# 12910
if self . parent_name . filters or isinstance ( self . parent_name . var , Variable ) :pass
example# 12911
error_msg += '_STR:0_' % self . parent_name . token
example# 12912
raise TemplateSyntaxError ( error_msg )
example# 12913
if hasattr ( parent , '_STR:0_' ) :pass
example# 12914
return parent
example# 12915
return get_template ( parent )
example# 12916
def render ( self , context ) :pass
example# 12917
compiled_parent = self . get_parent ( context )
example# 12918
if BLOCK_CONTEXT_KEY not in context . render_context :pass
example# 12919
context . render_context [ BLOCK_CONTEXT_KEY ] = BlockContext ( )
example# 12920
block_context = context . render_context [ BLOCK_CONTEXT_KEY ]
example# 12921
block_context . add_blocks ( self . blocks )
example# 12922
for node in compiled_parent . nodelist :pass
example# 12923
if not isinstance ( node , TextNode ) :pass
example# 12924
if not isinstance ( node , ExtendsNode ) :pass
example# 12925
blocks = dict ( ( n . name , n ) for n in  compiled_parent . nodelist . get_nodes_by_type ( BlockNode ) )
example# 12926
block_context . add_blocks ( blocks )
example# 12927
break
example# 12928
return compiled_parent . _render ( context )
example# 12929
class IncludeNode ( Node ) :pass
example# 12930
def __init__ ( self , template , * args , ** kwargs ) :pass
example# 12931
self . template = template
example# 12932
self . extra_context = kwargs . pop ( '_STR:0_' , { } )
example# 12933
self . isolated_context = kwargs . pop ( '_STR:0_' , False )
example# 12934
super ( IncludeNode , self ) . __init__ ( * args , ** kwargs )
example# 12935
def render ( self , context ) :pass
example# 12936
try :pass
except: pass
example# 12937
template = self . template . resolve ( context )
example# 12938
if not callable ( getattr ( template , '_STR:0_' , None ) ) :pass
example# 12939
template = get_template ( template )
example# 12940
values = {  name : var . resolve ( context )  for name , var in six . iteritems ( self . extra_context )  }
example# 12941
if self . isolated_context :pass
example# 12942
return template . render ( context . new ( values ) )
example# 12943
with context . push ( ** values ) :pass
example# 12944
return template . render ( context )
example# 12945
try: pass
except Exception :pass
example# 12946
if settings . TEMPLATE_DEBUG :pass
example# 12947
raise
example# 12948
return ''
example# 12949
@ register . tag ( '_STR:0_' )
def dummy(): pass
example# 12950
def do_block ( parser , token ) :pass
example# 12951
bits = token . contents . split ( )
example# 12952
if len ( bits ) != 2 :pass
example# 12953
raise TemplateSyntaxError ( '_STR:0_' % bits [ 0 ] )
example# 12954
block_name = bits [ 1 ]
example# 12955
try :pass
except: pass
example# 12956
if block_name in parser . __loaded_blocks :pass
example# 12957
raise TemplateSyntaxError ( '_STR:0_' % ( bits [ 0 ] , block_name ) )
example# 12958
parser . __loaded_blocks . append ( block_name )
example# 12959
try: pass
except AttributeError :pass
example# 12960
parser . __loaded_blocks = [ block_name ]
example# 12961
nodelist = parser . parse ( ( '_STR:0_' , ) )
example# 12962
endblock = parser . next_token ( )
example# 12963
acceptable_endblocks = ( '_STR:0_' , '_STR:1_' % block_name )
example# 12964
if endblock . contents not in acceptable_endblocks :pass
example# 12965
parser . invalid_block_tag ( endblock , '_STR:0_' , acceptable_endblocks )
example# 12966
return BlockNode ( block_name , nodelist )
example# 12967
@ register . tag ( '_STR:0_' )
def dummy(): pass
example# 12968
def do_extends ( parser , token ) :pass
example# 12969
bits = token . split_contents ( )
example# 12970
if len ( bits ) != 2 :pass
example# 12971
raise TemplateSyntaxError ( '_STR:0_' % bits [ 0 ] )
example# 12972
parent_name = parser . compile_filter ( bits [ 1 ] )
example# 12973
nodelist = parser . parse ( )
example# 12974
if nodelist . get_nodes_by_type ( ExtendsNode ) :pass
example# 12975
raise TemplateSyntaxError ( '_STR:0_' % bits [ 0 ] )
example# 12976
return ExtendsNode ( nodelist , parent_name )
example# 12977
@ register . tag ( '_STR:0_' )
def dummy(): pass
example# 12978
def do_include ( parser , token ) :pass
example# 12979
bits = token . split_contents ( )
example# 12980
if len ( bits ) < 2 :pass
example# 12981
raise TemplateSyntaxError ( '_STR:0_' % bits [ 0 ] )
example# 12982
options = { }
example# 12983
remaining_bits = bits [ 2 : ]
example# 12984
while remaining_bits :pass
example# 12985
option = remaining_bits . pop ( 0 )
example# 12986
if option in options :pass
example# 12987
raise TemplateSyntaxError ( 'The %r option was specified more '  'than once.' % option )
example# 12988
if option == '_STR:1_' :pass
example# 12989
value = token_kwargs ( remaining_bits , parser , support_legacy = False )
example# 12990
if not value :pass
example# 12991
raise TemplateSyntaxError ( '"with" in %r tag needs at least '  'one keyword argument.' % bits [ 0 ] )
example# 12992
if True: pass
elif option == '_STR:0_' :pass
example# 12993
value = True
example# 12994
if True: pass
else :pass
example# 12995
raise TemplateSyntaxError ( '_STR:0_' %  ( bits [ 0 ] , option ) )
example# 12996
options [ option ] = value
example# 12997
isolated_context = options . get ( '_STR:0_' , False )
example# 12998
namemap = options . get ( 'with' , { } )
example# 12999
return IncludeNode ( parser . compile_filter ( bits [ 1 ] ) , extra_context = namemap ,  isolated_context = isolated_context )
example# 13000
import os
example# 13001
import sys
example# 13002
from django . apps import apps
example# 13003
from django . conf import settings
example# 13004
from django . template . base import TemplateDoesNotExist
example# 13005
from django . template . loader import BaseLoader
example# 13006
from django . utils . _os import safe_join
example# 13007
from django . utils import six
example# 13008
def calculate_app_template_dirs ( ) :pass
example# 13009
if six . PY2 :pass
example# 13010
fs_encoding = sys . getfilesystemencoding ( ) or sys . getdefaultencoding ( )
example# 13011
app_template_dirs = [ ]
example# 13012
for app_config in apps . get_app_configs ( ) :pass
example# 13013
if not app_config . path :pass
example# 13014
continue
example# 13015
template_dir = os . path . join ( app_config . path , '_STR:0_' )
example# 13016
if os . path . isdir ( template_dir ) :pass
example# 13017
if six . PY2 :pass
example# 13018
template_dir = template_dir . decode ( fs_encoding )
example# 13019
app_template_dirs . append ( template_dir )
example# 13020
return tuple ( app_template_dirs )
example# 13021
app_template_dirs = calculate_app_template_dirs ( )
example# 13022
class Loader ( BaseLoader ) :pass
example# 13023
is_usable = True
example# 13024
def get_template_sources ( self , template_name , template_dirs = None ) :pass
example# 13025
if not template_dirs :pass
example# 13026
template_dirs = app_template_dirs
example# 13027
for template_dir in template_dirs :pass
example# 13028
try :pass
except: pass
example# 13029
yield safe_join ( template_dir , template_name )
example# 13030
try: pass
except UnicodeDecodeError :pass
example# 13031
raise
example# 13032
try: pass
except ValueError :pass
example# 13033
pass
example# 13034
def load_template_source ( self , template_name , template_dirs = None ) :pass
example# 13035
for filepath in self . get_template_sources ( template_name , template_dirs ) :pass
example# 13036
try :pass
except: pass
example# 13037
with open ( filepath , 'rb' ) as fp :pass
example# 13038
return ( fp . read ( ) . decode ( settings . FILE_CHARSET ) , filepath )
example# 13039
try: pass
except IOError :pass
example# 13040
pass
example# 13041
raise TemplateDoesNotExist ( template_name )
example# 13042
import hashlib
example# 13043
from django . template . base import TemplateDoesNotExist
example# 13044
from django . template . loader import BaseLoader , get_template_from_string , find_template_loader , make_origin
example# 13045
from django . utils . encoding import force_bytes
example# 13046
class Loader ( BaseLoader ) :pass
example# 13047
is_usable = True
example# 13048
def __init__ ( self , loaders ) :pass
example# 13049
self . template_cache = { }
example# 13050
self . find_template_cache = { }
example# 13051
self . _loaders = loaders
example# 13052
self . _cached_loaders = [ ]
example# 13053
@ property
def dummy(): pass
example# 13054
def loaders ( self ) :pass
example# 13055
if not self . _cached_loaders :pass
example# 13056
cached_loaders = [ ]
example# 13057
for loader in self . _loaders :pass
example# 13058
cached_loaders . append ( find_template_loader ( loader ) )
example# 13059
self . _cached_loaders = cached_loaders
example# 13060
return self . _cached_loaders
example# 13061
def cache_key ( self , template_name , template_dirs ) :pass
example# 13062
if template_dirs :pass
example# 13063
return '-' . join ( [ template_name , hashlib . sha1 ( force_bytes ( '_STR:0_' . join ( template_dirs ) ) ) . hexdigest ( ) ] )
example# 13064
if True: pass
else :pass
example# 13065
return template_name
example# 13066
def find_template ( self , name , dirs = None ) :pass
example# 13067
key = self . cache_key ( name , dirs )
example# 13068
try :pass
except: pass
example# 13069
result = self . find_template_cache [ key ]
example# 13070
try: pass
except KeyError :pass
example# 13071
result = None
example# 13072
for loader in self . loaders :pass
example# 13073
try :pass
except: pass
example# 13074
template , display_name = loader ( name , dirs )
example# 13075
try: pass
except TemplateDoesNotExist :pass
example# 13076
pass
example# 13077
if True: pass
else :pass
example# 13078
result = ( template , make_origin ( display_name , loader , name , dirs ) )
example# 13079
break
example# 13080
self . find_template_cache [ key ] = result
example# 13081
if result :pass
example# 13082
return result
example# 13083
if True: pass
else :pass
example# 13084
self . template_cache [ key ] = TemplateDoesNotExist
example# 13085
raise TemplateDoesNotExist ( name )
example# 13086
def load_template ( self , template_name , template_dirs = None ) :pass
example# 13087
key = self . cache_key ( template_name , template_dirs )
example# 13088
template_tuple = self . template_cache . get ( key )
example# 13089
if template_tuple is TemplateDoesNotExist :pass
example# 13090
raise TemplateDoesNotExist
example# 13091
if True: pass
elif template_tuple is None :pass
example# 13092
template , origin = self . find_template ( template_name , template_dirs )
example# 13093
if not hasattr ( template , '_STR:0_' ) :pass
example# 13094
try :pass
except: pass
example# 13095
template = get_template_from_string ( template , origin , template_name )
example# 13096
try: pass
except TemplateDoesNotExist :pass
example# 13097
self . template_cache [ key ] = ( template , origin )
example# 13098
self . template_cache [ key ] = ( template , None )
example# 13099
return self . template_cache [ key ]
example# 13100
def reset ( self ) :pass
example# 13101
self . template_cache . clear ( )
example# 13102
self . find_template_cache . clear ( )
example# 13103
from __future__ import unicode_literals
example# 13104
try :pass
except: pass
example# 13105
from pkg_resources import resource_string
example# 13106
try: pass
except ImportError :pass
example# 13107
resource_string = None
example# 13108
from django . apps import apps
example# 13109
from django . conf import settings
example# 13110
from django . template . base import TemplateDoesNotExist
example# 13111
from django . template . loader import BaseLoader
example# 13112
from django . utils import six
example# 13113
class Loader ( BaseLoader ) :pass
example# 13114
is_usable = resource_string is not None
example# 13115
def load_template_source ( self , template_name , template_dirs = None ) :pass
example# 13116
if resource_string is not None :pass
example# 13117
pkg_name = '_STR:0_' + template_name
example# 13118
for app_config in apps . get_app_configs ( ) :pass
example# 13119
try :pass
except: pass
example# 13120
resource = resource_string ( app_config . name , pkg_name )
example# 13121
try: pass
except Exception :pass
example# 13122
continue
example# 13123
if six . PY2 :pass
example# 13124
resource = resource . decode ( settings . FILE_CHARSET )
example# 13125
return ( resource , '_STR:0_' % ( app_config . name , pkg_name ) )
example# 13126
raise TemplateDoesNotExist ( template_name )
example# 13127
from django . conf import settings
example# 13128
from django . template . base import TemplateDoesNotExist
example# 13129
from django . template . loader import BaseLoader
example# 13130
from django . utils . _os import safe_join
example# 13131
class Loader ( BaseLoader ) :pass
example# 13132
is_usable = True
example# 13133
def get_template_sources ( self , template_name , template_dirs = None ) :pass
example# 13134
if not template_dirs :pass
example# 13135
template_dirs = settings . TEMPLATE_DIRS
example# 13136
for template_dir in template_dirs :pass
example# 13137
try :pass
except: pass
example# 13138
yield safe_join ( template_dir , template_name )
example# 13139
try: pass
except UnicodeDecodeError :pass
example# 13140
raise
example# 13141
try: pass
except ValueError :pass
example# 13142
pass
example# 13143
def load_template_source ( self , template_name , template_dirs = None ) :pass
example# 13144
tried = [ ]
example# 13145
for filepath in self . get_template_sources ( template_name , template_dirs ) :pass
example# 13146
try :pass
except: pass
example# 13147
with open ( filepath , 'rb' ) as fp :pass
example# 13148
return ( fp . read ( ) . decode ( settings . FILE_CHARSET ) , filepath )
example# 13149
try: pass
except IOError :pass
example# 13150
tried . append ( filepath )
example# 13151
if tried :pass
example# 13152
error_msg = '_STR:0_' % tried
example# 13153
if True: pass
else :pass
example# 13154
error_msg = '_STR:0_'
example# 13155
raise TemplateDoesNotExist ( error_msg )
example# 13156
load_template_source . is_usable = True
example# 13157
from django . http import HttpResponse
example# 13158
from django . template import loader , Context , RequestContext
example# 13159
from django . utils import six
example# 13160
class ContentNotRenderedError ( Exception ) :pass
example# 13161
pass
example# 13162
class SimpleTemplateResponse ( HttpResponse ) :pass
example# 13163
rendering_attrs = [ '_STR:0_' , '_STR:1_' , '_STR:2_' ]
example# 13164
def __init__ ( self , template , context = None , content_type = None , status = None ) :pass
example# 13165
self . template_name = template
example# 13166
self . context_data = context
example# 13167
self . _post_render_callbacks = [ ]
example# 13168
super ( SimpleTemplateResponse , self ) . __init__ ( '' , content_type , status )
example# 13169
self . _is_rendered = False
example# 13170
def __getstate__ ( self ) :pass
example# 13171
obj_dict = super ( SimpleTemplateResponse , self ) . __getstate__ ( )
example# 13172
if not self . _is_rendered :pass
example# 13173
raise ContentNotRenderedError ( 'The response content must be '  'rendered before it can be pickled.' )
example# 13174
for attr in self . rendering_attrs :pass
example# 13175
if attr in obj_dict :pass
example# 13176
del obj_dict [ attr ]
example# 13177
return obj_dict
example# 13178
def resolve_template ( self , template ) :pass
example# 13179
if isinstance ( template , ( list , tuple ) ) :pass
example# 13180
return loader . select_template ( template )
example# 13181
if True: pass
elif isinstance ( template , six . string_types ) :pass
example# 13182
return loader . get_template ( template )
example# 13183
if True: pass
else :pass
example# 13184
return template
example# 13185
def resolve_context ( self , context ) :pass
example# 13186
if isinstance ( context , Context ) :pass
example# 13187
return context
example# 13188
if True: pass
else :pass
example# 13189
return Context ( context )
example# 13190
@ property
def dummy(): pass
example# 13191
def rendered_content ( self ) :pass
example# 13192
template = self . resolve_template ( self . template_name )
example# 13193
context = self . resolve_context ( self . context_data )
example# 13194
content = template . render ( context )
example# 13195
return content
example# 13196
def add_post_render_callback ( self , callback ) :pass
example# 13197
if self . _is_rendered :pass
example# 13198
callback ( self )
example# 13199
if True: pass
else :pass
example# 13200
self . _post_render_callbacks . append ( callback )
example# 13201
def render ( self ) :pass
example# 13202
retval = self
example# 13203
if not self . _is_rendered :pass
example# 13204
self . content = self . rendered_content
example# 13205
for post_callback in self . _post_render_callbacks :pass
example# 13206
newretval = post_callback ( retval )
example# 13207
if newretval is not None :pass
example# 13208
retval = newretval
example# 13209
return retval
example# 13210
@ property
def dummy(): pass
example# 13211
def is_rendered ( self ) :pass
example# 13212
return self . _is_rendered
example# 13213
def __iter__ ( self ) :pass
example# 13214
if not self . _is_rendered :pass
example# 13215
raise ContentNotRenderedError ( 'The response content must be '  'rendered before it can be iterated over.' )
example# 13216
return super ( SimpleTemplateResponse , self ) . __iter__ ( )
example# 13217
@ property
def dummy(): pass
example# 13218
def content ( self ) :pass
example# 13219
if not self . _is_rendered :pass
example# 13220
raise ContentNotRenderedError ( 'The response content must be '  'rendered before it can be accessed.' )
example# 13221
return super ( SimpleTemplateResponse , self ) . content
example# 13222
@ content . setter
def dummy(): pass
example# 13223
def content ( self , value ) :pass
example# 13224
HttpResponse . content . fset ( self , value )
example# 13225
self . _is_rendered = True
example# 13226
class TemplateResponse ( SimpleTemplateResponse ) :pass
example# 13227
rendering_attrs = SimpleTemplateResponse . rendering_attrs + [ '_STR:0_' , '_STR:1_' ]
example# 13228
def __init__ ( self , request , template , context = None , content_type = None ,  status = None , current_app = None ) :pass
example# 13229
self . _request = request
example# 13230
self . _current_app = current_app
example# 13231
super ( TemplateResponse , self ) . __init__ (  template , context , content_type , status )
example# 13232
def resolve_context ( self , context ) :pass
example# 13233
if isinstance ( context , Context ) :pass
example# 13234
return context
example# 13235
return RequestContext ( self . _request , context , current_app = self . _current_app )
example# 13236
class TokenBase ( object ) :pass
example# 13237
id = None
example# 13238
value = None
example# 13239
first = second = None
example# 13240
def nud ( self , parser ) :pass
example# 13241
raise parser . error_class (  '_STR:0_' % self . id  )
example# 13242
def led ( self , left , parser ) :pass
example# 13243
raise parser . error_class (  '_STR:0_' % self . id  )
example# 13244
def display ( self ) :pass
example# 13245
return self . id
example# 13246
def __repr__ ( self ) :pass
example# 13247
out = [ str ( x ) for x in [ self . id , self . first , self . second ] if x is not None ]
example# 13248
return "(" + " " . join ( out ) + ")"
example# 13249
def infix ( bp , func ) :pass
example# 13250
class Operator ( TokenBase ) :pass
example# 13251
lbp = bp
example# 13252
def led ( self , left , parser ) :pass
example# 13253
self . first = left
example# 13254
self . second = parser . expression ( bp )
example# 13255
return self
example# 13256
def eval ( self , context ) :pass
example# 13257
try :pass
except: pass
example# 13258
return func ( context , self . first , self . second )
example# 13259
try: pass
except Exception :pass
example# 13260
return False
example# 13261
return Operator
example# 13262
def prefix ( bp , func ) :pass
example# 13263
class Operator ( TokenBase ) :pass
example# 13264
lbp = bp
example# 13265
def nud ( self , parser ) :pass
example# 13266
self . first = parser . expression ( bp )
example# 13267
self . second = None
example# 13268
return self
example# 13269
def eval ( self , context ) :pass
example# 13270
try :pass
except: pass
example# 13271
return func ( context , self . first )
example# 13272
try: pass
except Exception :pass
example# 13273
return False
example# 13274
return Operator
example# 13275
OPERATORS = {  'or' : infix ( 6 , lambda context , x , y : x . eval ( context ) or y . eval ( context ) ) ,  'and' : infix ( 7 , lambda context , x , y : x . eval ( context ) and y . eval ( context ) ) ,  'not' : prefix ( 8 , lambda context , x : not x . eval ( context ) ) ,  'in' : infix ( 9 , lambda context , x , y : x . eval ( context ) in y . eval ( context ) ) ,  'not in' : infix ( 9 , lambda context , x , y : x . eval ( context ) not in y . eval ( context ) ) ,  '=' : infix ( 10 , lambda context , x , y : x . eval ( context ) == y . eval ( context ) ) ,  '==' : infix ( 10 , lambda context , x , y : x . eval ( context ) == y . eval ( context ) ) ,  '!=' : infix ( 10 , lambda context , x , y : x . eval ( context ) != y . eval ( context ) ) ,  '>' : infix ( 10 , lambda context , x , y : x . eval ( context ) > y . eval ( context ) ) ,  '>=' : infix ( 10 , lambda context , x , y : x . eval ( context ) >= y . eval ( context ) ) ,  '<' : infix ( 10 , lambda context , x , y : x . eval ( context ) < y . eval ( context ) ) ,  '<=' : infix ( 10 , lambda context , x , y : x . eval ( context ) <= y . eval ( context ) ) ,  }
example# 13276
for key , op in OPERATORS . items ( ) :pass
example# 13277
op . id = key
example# 13278
class Literal ( TokenBase ) :pass
example# 13279
id = '_STR:0_'
example# 13280
lbp = 0
example# 13281
def __init__ ( self , value ) :pass
example# 13282
self . value = value
example# 13283
def display ( self ) :pass
example# 13284
return repr ( self . value )
example# 13285
def nud ( self , parser ) :pass
example# 13286
return self
example# 13287
def eval ( self , context ) :pass
example# 13288
return self . value
example# 13289
def __repr__ ( self ) :pass
example# 13290
return '_STR:0_' % ( self . id , self . value )
example# 13291
class EndToken ( TokenBase ) :pass
example# 13292
lbp = 0
example# 13293
def nud ( self , parser ) :pass
example# 13294
raise parser . error_class ( '_STR:0_' )
example# 13295
EndToken = EndToken ( )
example# 13296
class IfParser ( object ) :pass
example# 13297
error_class = ValueError
example# 13298
def __init__ ( self , tokens ) :pass
example# 13299
l = len ( tokens )
example# 13300
mapped_tokens = [ ]
example# 13301
i = 0
example# 13302
while i < l :pass
example# 13303
token = tokens [ i ]
example# 13304
if token == '_STR:0_' and i + 1 < l and tokens [ i + 1 ] == "in" :pass
example# 13305
token = '_STR:1_'
example# 13306
i += 1
example# 13307
mapped_tokens . append ( self . translate_token ( token ) )
example# 13308
i += 1
example# 13309
self . tokens = mapped_tokens
example# 13310
self . pos = 0
example# 13311
self . current_token = self . next_token ( )
example# 13312
def translate_token ( self , token ) :pass
example# 13313
try :pass
except: pass
example# 13314
op = OPERATORS [ token ]
example# 13315
try: pass
except ( KeyError , TypeError ) :pass
example# 13316
return self . create_var ( token )
example# 13317
if True: pass
else :pass
example# 13318
return op ( )
example# 13319
def next_token ( self ) :pass
example# 13320
if self . pos >= len ( self . tokens ) :pass
example# 13321
return EndToken
example# 13322
if True: pass
else :pass
example# 13323
retval = self . tokens [ self . pos ]
example# 13324
self . pos += 1
example# 13325
return retval
example# 13326
def parse ( self ) :pass
example# 13327
retval = self . expression ( )
example# 13328
if self . current_token is not EndToken :pass
example# 13329
raise self . error_class ( "Unused '%s' at end of if expression." %  self . current_token . display ( ) )
example# 13330
return retval
example# 13331
def expression ( self , rbp = 0 ) :pass
example# 13332
t = self . current_token
example# 13333
self . current_token = self . next_token ( )
example# 13334
left = t . nud ( self )
example# 13335
while rbp < self . current_token . lbp :pass
example# 13336
t = self . current_token
example# 13337
self . current_token = self . next_token ( )
example# 13338
left = t . led ( left , self )
example# 13339
return left
example# 13340
def create_var ( self , value ) :pass
example# 13341
return Literal ( value )
example# 13342
from __future__ import unicode_literals
example# 13343
from lib2to3 import fixer_base
example# 13344
from lib2to3 . fixer_util import find_indentation , Name , syms , touch_import
example# 13345
from lib2to3 . pgen2 import token
example# 13346
from lib2to3 . pytree import Leaf , Node
example# 13347
class FixUnicode ( fixer_base . BaseFix ) :pass
example# 13348
BM_compatible = True
example# 13349
PATTERN = """     classdef< 'class' any+ ':'               suite< any*                      funcdef< 'def' unifunc='__unicode__'                               parameters< '(' NAME ')' > any+ >                      any* > >     """
example# 13350
def transform ( self , node , results ) :pass
example# 13351
unifunc = results [ '_STR:0_' ]
example# 13352
strfunc = Name ( '_STR:0_' , prefix = unifunc . prefix )
example# 13353
unifunc . replace ( strfunc )
example# 13354
klass = node . clone ( )
example# 13355
klass . prefix = '\n' + find_indentation ( node )
example# 13356
decorator = Node ( syms . decorator , [ Leaf ( token . AT , "@" ) , Name ( 'python_2_unicode_compatible' ) ] )
example# 13357
decorated = Node ( syms . decorated , [ decorator , klass ] , prefix = node . prefix )
example# 13358
node . replace ( decorated )
example# 13359
touch_import ( '_STR:0_' , '_STR:1_' , decorated )
example# 13360
import os
example# 13361
import stat
example# 13362
import sys
example# 13363
import tempfile
example# 13364
from os . path import join , normcase , normpath , abspath , isabs , sep , dirname
example# 13365
from django . utils . encoding import force_text
example# 13366
from django . utils import six
example# 13367
try :pass
except: pass
example# 13368
WindowsError = WindowsError
example# 13369
try: pass
except NameError :pass
example# 13370
class WindowsError ( Exception ) :pass
example# 13371
pass
example# 13372
if six . PY2 :pass
example# 13373
fs_encoding = sys . getfilesystemencoding ( ) or sys . getdefaultencoding ( )
example# 13374
if six . PY3 or os . name == '_STR:0_' :pass
example# 13375
abspathu = abspath
example# 13376
if True: pass
else :pass
example# 13377
def abspathu ( path ) :pass
example# 13378
if not isabs ( path ) :pass
example# 13379
path = join ( os . getcwdu ( ) , path )
example# 13380
return normpath ( path )
example# 13381
def upath ( path ) :pass
example# 13382
if six . PY2 and not isinstance ( path , six . text_type ) :pass
example# 13383
return path . decode ( fs_encoding )
example# 13384
return path
example# 13385
def npath ( path ) :pass
example# 13386
if six . PY2 and not isinstance ( path , bytes ) :pass
example# 13387
return path . encode ( fs_encoding )
example# 13388
return path
example# 13389
def safe_join ( base , * paths ) :pass
example# 13390
base = force_text ( base )
example# 13391
paths = [ force_text ( p ) for p in paths ]
example# 13392
final_path = abspathu ( join ( base , * paths ) )
example# 13393
base_path = abspathu ( base )
example# 13394
if ( not normcase ( final_path ) . startswith ( normcase ( base_path + sep ) ) and  normcase ( final_path ) != normcase ( base_path ) and  dirname ( normcase ( base_path ) ) != normcase ( base_path ) ) :pass
example# 13395
raise ValueError ( 'The joined path (%s) is located outside of the base '  'path component (%s)' % ( final_path , base_path ) )
example# 13396
return final_path
example# 13397
def rmtree_errorhandler ( func , path , exc_info ) :pass
example# 13398
exctype , value = exc_info [ : 2 ]
example# 13399
if exctype is not WindowsError or '_STR:0_' not in str ( value ) :pass
example# 13400
raise
example# 13401
if ( ( os . stat ( path ) . st_mode & stat . S_IREAD ) != stat . S_IREAD ) :pass
example# 13402
raise
example# 13403
os . chmod ( path , stat . S_IWRITE )
example# 13404
func ( path )
example# 13405
def symlinks_supported ( ) :pass
example# 13406
tmpdir = tempfile . mkdtemp ( )
example# 13407
original_path = os . path . join ( tmpdir , '_STR:0_' )
example# 13408
symlink_path = os . path . join ( tmpdir , '_STR:0_' )
example# 13409
os . makedirs ( original_path )
example# 13410
try :pass
except: pass
example# 13411
os . symlink ( original_path , symlink_path )
example# 13412
supported = True
example# 13413
try: pass
except ( OSError , NotImplementedError , AttributeError ) :pass
example# 13414
supported = False
example# 13415
if True: pass
else :pass
example# 13416
os . remove ( symlink_path )
example# 13417
try: pass
finally :pass
example# 13418
os . rmdir ( original_path )
example# 13419
os . rmdir ( tmpdir )
example# 13420
return supported
example# 13421
import os
example# 13422
import shutil
example# 13423
import tarfile
example# 13424
import zipfile
example# 13425
from django . utils import six
example# 13426
class ArchiveException ( Exception ) :pass
example# 13427
class UnrecognizedArchiveFormat ( ArchiveException ) :pass
example# 13428
def extract ( path , to_path = '' ) :pass
example# 13429
with Archive ( path ) as archive :pass
example# 13430
archive . extract ( to_path )
example# 13431
class Archive ( object ) :pass
example# 13432
def __init__ ( self , file ) :pass
example# 13433
self . _archive = self . _archive_cls ( file ) ( file )
example# 13434
@ staticmethod
def dummy(): pass
example# 13435
def _archive_cls ( file ) :pass
example# 13436
cls = None
example# 13437
if isinstance ( file , six . string_types ) :pass
example# 13438
filename = file
example# 13439
if True: pass
else :pass
example# 13440
try :pass
except: pass
example# 13441
filename = file . name
example# 13442
try: pass
except AttributeError :pass
example# 13443
raise UnrecognizedArchiveFormat (  '_STR:0_' )
example# 13444
base , tail_ext = os . path . splitext ( filename . lower ( ) )
example# 13445
cls = extension_map . get ( tail_ext )
example# 13446
if not cls :pass
example# 13447
base , ext = os . path . splitext ( base )
example# 13448
cls = extension_map . get ( ext )
example# 13449
if not cls :pass
example# 13450
raise UnrecognizedArchiveFormat (  '_STR:0_' % filename )
example# 13451
return cls
example# 13452
def __enter__ ( self ) :pass
example# 13453
return self
example# 13454
def __exit__ ( self , exc_type , exc_value , traceback ) :pass
example# 13455
self . close ( )
example# 13456
def extract ( self , to_path = '' ) :pass
example# 13457
self . _archive . extract ( to_path )
example# 13458
def list ( self ) :pass
example# 13459
self . _archive . list ( )
example# 13460
def close ( self ) :pass
example# 13461
self . _archive . close ( )
example# 13462
class BaseArchive ( object ) :pass
example# 13463
def split_leading_dir ( self , path ) :pass
example# 13464
path = str ( path )
example# 13465
path = path . lstrip ( '_STR:0_' ) . lstrip ( '\\' )
example# 13466
if '_STR:0_' in path and ( ( '\\' in path and path . find ( '_STR:0_' ) < path . find ( '\\' ) )  or '\\' not in path ) :pass
example# 13467
return path . split ( '/' , 1 )
example# 13468
if True: pass
elif '\\' in path :pass
example# 13469
return path . split ( '\\' , 1 )
example# 13470
if True: pass
else :pass
example# 13471
return path , ''
example# 13472
def has_leading_dir ( self , paths ) :pass
example# 13473
common_prefix = None
example# 13474
for path in paths :pass
example# 13475
prefix , rest = self . split_leading_dir ( path )
example# 13476
if not prefix :pass
example# 13477
return False
example# 13478
if True: pass
elif common_prefix is None :pass
example# 13479
common_prefix = prefix
example# 13480
if True: pass
elif prefix != common_prefix :pass
example# 13481
return False
example# 13482
return True
example# 13483
def extract ( self ) :pass
example# 13484
raise NotImplementedError ( '_STR:0_' )
example# 13485
def list ( self ) :pass
example# 13486
raise NotImplementedError ( '_STR:0_' )
example# 13487
class TarArchive ( BaseArchive ) :pass
example# 13488
def __init__ ( self , file ) :pass
example# 13489
self . _archive = tarfile . open ( file )
example# 13490
def list ( self , * args , ** kwargs ) :pass
example# 13491
self . _archive . list ( * args , ** kwargs )
example# 13492
def extract ( self , to_path ) :pass
example# 13493
members = [ member for member in self . _archive . getmembers ( )  if member . name != 'pax_global_header' ]
example# 13494
leading = self . has_leading_dir ( x . name for x in members )
example# 13495
for member in members :pass
example# 13496
name = member . name
example# 13497
if leading :pass
example# 13498
name = self . split_leading_dir ( name ) [ 1 ]
example# 13499
filename = os . path . join ( to_path , name )
example# 13500
if member . isdir ( ) :pass
example# 13501
if filename and not os . path . exists ( filename ) :pass
example# 13502
os . makedirs ( filename )
example# 13503
if True: pass
else :pass
example# 13504
try :pass
except: pass
example# 13505
extracted = self . _archive . extractfile ( member )
example# 13506
try: pass
except ( KeyError , AttributeError ) as exc :pass
example# 13507
print ( '_STR:0_' %  ( name , member . name , exc ) )
example# 13508
if True: pass
else :pass
example# 13509
dirname = os . path . dirname ( filename )
example# 13510
if dirname and not os . path . exists ( dirname ) :pass
example# 13511
os . makedirs ( dirname )
example# 13512
with open ( filename , 'wb' ) as outfile :pass
example# 13513
shutil . copyfileobj ( extracted , outfile )
example# 13514
try: pass
finally :pass
example# 13515
if extracted :pass
example# 13516
extracted . close ( )
example# 13517
def close ( self ) :pass
example# 13518
self . _archive . close ( )
example# 13519
class ZipArchive ( BaseArchive ) :pass
example# 13520
def __init__ ( self , file ) :pass
example# 13521
self . _archive = zipfile . ZipFile ( file )
example# 13522
def list ( self , * args , ** kwargs ) :pass
example# 13523
self . _archive . printdir ( * args , ** kwargs )
example# 13524
def extract ( self , to_path ) :pass
example# 13525
namelist = self . _archive . namelist ( )
example# 13526
leading = self . has_leading_dir ( namelist )
example# 13527
for name in namelist :pass
example# 13528
data = self . _archive . read ( name )
example# 13529
if leading :pass
example# 13530
name = self . split_leading_dir ( name ) [ 1 ]
example# 13531
filename = os . path . join ( to_path , name )
example# 13532
dirname = os . path . dirname ( filename )
example# 13533
if dirname and not os . path . exists ( dirname ) :pass
example# 13534
os . makedirs ( dirname )
example# 13535
if filename . endswith ( ( '_STR:0_' , '\\' ) ) :pass
example# 13536
if not os . path . exists ( filename ) :pass
example# 13537
os . makedirs ( filename )
example# 13538
if True: pass
else :pass
example# 13539
with open ( filename , 'wb' ) as outfile :pass
example# 13540
outfile . write ( data )
example# 13541
def close ( self ) :pass
example# 13542
self . _archive . close ( )
example# 13543
extension_map = {  '_STR:0_' : TarArchive ,  '_STR:1_' : TarArchive ,  '_STR:2_' : TarArchive ,  '.tgz' : TarArchive ,  '.tz2' : TarArchive ,  '.zip' : ZipArchive ,  }
example# 13544
from __future__ import absolute_import
example# 13545
import os
example# 13546
import signal
example# 13547
import sys
example# 13548
import time
example# 13549
import traceback
example# 13550
from django . apps import apps
example# 13551
from django . conf import settings
example# 13552
from django . core . signals import request_finished
example# 13553
try :pass
except: pass
example# 13554
from django . utils . six . moves import _thread as thread
example# 13555
try: pass
except ImportError :pass
example# 13556
from django . utils . six . moves import _dummy_thread as thread
example# 13557
try :pass
except: pass
example# 13558
import threading
example# 13559
try: pass
except ImportError :pass
example# 13560
pass
example# 13561
try :pass
except: pass
example# 13562
import termios
example# 13563
try: pass
except ImportError :pass
example# 13564
termios = None
example# 13565
USE_INOTIFY = False
example# 13566
try :pass
except: pass
example# 13567
import pyinotify
example# 13568
fd = pyinotify . INotifyWrapper . create ( ) . inotify_init ( )
example# 13569
if fd >= 0 :pass
example# 13570
USE_INOTIFY = True
example# 13571
os . close ( fd )
example# 13572
try: pass
except ImportError :pass
example# 13573
pass
example# 13574
RUN_RELOADER = True
example# 13575
FILE_MODIFIED = 1
example# 13576
I18N_MODIFIED = 2
example# 13577
_mtimes = { }
example# 13578
_win = ( sys . platform == '_STR:0_' )
example# 13579
_error_files = [ ]
example# 13580
_cached_modules = set ( )
example# 13581
_cached_filenames = [ ]
example# 13582
def gen_filenames ( only_new = False ) :pass
example# 13583
global _cached_modules , _cached_filenames
example# 13584
module_values = set ( sys . modules . values ( ) )
example# 13585
if _cached_modules == module_values :pass
example# 13586
if only_new :pass
example# 13587
return [ ]
example# 13588
if True: pass
else :pass
example# 13589
return _cached_filenames
example# 13590
new_modules = module_values - _cached_modules
example# 13591
new_filenames = [ filename . __file__ for filename in new_modules  if hasattr ( filename , '_STR:0_' ) ]
example# 13592
if not _cached_filenames and settings . USE_I18N :pass
example# 13593
basedirs = [ os . path . join ( os . path . dirname ( os . path . dirname ( __file__ ) ) ,  '_STR:0_' , '_STR:1_' ) ,  '_STR:1_' ]
example# 13594
for app_config in reversed ( list ( apps . get_app_configs ( ) ) ) :pass
example# 13595
basedirs . append ( os . path . join ( app_config . path , '_STR:0_' ) )
example# 13596
basedirs . extend ( settings . LOCALE_PATHS )
example# 13597
basedirs = [ os . path . abspath ( basedir ) for basedir in basedirs  if os . path . isdir ( basedir ) ]
example# 13598
for basedir in basedirs :pass
example# 13599
for dirpath , dirnames , locale_filenames in os . walk ( basedir ) :pass
example# 13600
for filename in locale_filenames :pass
example# 13601
if filename . endswith ( '_STR:0_' ) :pass
example# 13602
new_filenames . append ( os . path . join ( dirpath , filename ) )
example# 13603
if only_new :pass
example# 13604
filelist = new_filenames
example# 13605
if True: pass
else :pass
example# 13606
filelist = _cached_filenames + new_filenames + _error_files
example# 13607
filenames = [ ]
example# 13608
for filename in filelist :pass
example# 13609
if not filename :pass
example# 13610
continue
example# 13611
if filename . endswith ( '_STR:0_' ) or filename . endswith ( '_STR:1_' ) :pass
example# 13612
filename = filename [ : - 1 ]
example# 13613
if filename . endswith ( '_STR:0_' ) :pass
example# 13614
filename = filename [ : - 9 ] + '_STR:0_'
example# 13615
if os . path . exists ( filename ) :pass
example# 13616
filenames . append ( filename )
example# 13617
_cached_modules = _cached_modules . union ( new_modules )
example# 13618
_cached_filenames += new_filenames
example# 13619
return filenames
example# 13620
def reset_translations ( ) :pass
example# 13621
import gettext
example# 13622
from django . utils . translation import trans_real
example# 13623
gettext . _translations = { }
example# 13624
trans_real . _translations = { }
example# 13625
trans_real . _default = None
example# 13626
trans_real . _active = threading . local ( )
example# 13627
def inotify_code_changed ( ) :pass
example# 13628
class EventHandler ( pyinotify . ProcessEvent ) :pass
example# 13629
modified_code = None
example# 13630
def process_default ( self , event ) :pass
example# 13631
if event . path . endswith ( '_STR:0_' ) :pass
example# 13632
EventHandler . modified_code = I18N_MODIFIED
example# 13633
if True: pass
else :pass
example# 13634
EventHandler . modified_code = FILE_MODIFIED
example# 13635
wm = pyinotify . WatchManager ( )
example# 13636
notifier = pyinotify . Notifier ( wm , EventHandler ( ) )
example# 13637
def update_watch ( sender = None , ** kwargs ) :pass
example# 13638
if sender and getattr ( sender , '_STR:0_' , False ) :pass
example# 13639
return
example# 13640
mask = (  pyinotify . IN_MODIFY |  pyinotify . IN_DELETE |  pyinotify . IN_ATTRIB |  pyinotify . IN_MOVED_FROM |  pyinotify . IN_MOVED_TO |  pyinotify . IN_CREATE  )
example# 13641
for path in gen_filenames ( only_new = True ) :pass
example# 13642
wm . add_watch ( path , mask )
example# 13643
request_finished . connect ( update_watch )
example# 13644
update_watch ( )
example# 13645
notifier . check_events ( timeout = None )
example# 13646
notifier . read_events ( )
example# 13647
notifier . process_events ( )
example# 13648
notifier . stop ( )
example# 13649
return EventHandler . modified_code
example# 13650
def code_changed ( ) :pass
example# 13651
global _mtimes , _win
example# 13652
for filename in gen_filenames ( ) :pass
example# 13653
stat = os . stat ( filename )
example# 13654
mtime = stat . st_mtime
example# 13655
if _win :pass
example# 13656
mtime -= stat . st_ctime
example# 13657
if filename not in _mtimes :pass
example# 13658
_mtimes [ filename ] = mtime
example# 13659
continue
example# 13660
if mtime != _mtimes [ filename ] :pass
example# 13661
_mtimes = { }
example# 13662
try :pass
except: pass
example# 13663
del _error_files [ _error_files . index ( filename ) ]
example# 13664
try: pass
except ValueError :pass
example# 13665
pass
example# 13666
return I18N_MODIFIED if filename . endswith ( '_STR:0_' ) else FILE_MODIFIED
example# 13667
return False
example# 13668
def check_errors ( fn ) :pass
example# 13669
def wrapper ( * args , ** kwargs ) :pass
example# 13670
try :pass
except: pass
example# 13671
fn ( * args , ** kwargs )
example# 13672
try: pass
except ( ImportError , IndentationError , NameError , SyntaxError ,  TypeError , AttributeError ) :pass
example# 13673
et , ev , tb = sys . exc_info ( )
example# 13674
if getattr ( ev , '_STR:0_' , None ) is None :pass
example# 13675
filename = traceback . extract_tb ( tb ) [ - 1 ] [ 0 ]
example# 13676
if True: pass
else :pass
example# 13677
filename = ev . filename
example# 13678
if filename not in _error_files :pass
example# 13679
_error_files . append ( filename )
example# 13680
raise
example# 13681
return wrapper
example# 13682
def ensure_echo_on ( ) :pass
example# 13683
if termios :pass
example# 13684
fd = sys . stdin
example# 13685
if fd . isatty ( ) :pass
example# 13686
attr_list = termios . tcgetattr ( fd )
example# 13687
if not attr_list [ 3 ] & termios . ECHO :pass
example# 13688
attr_list [ 3 ] |= termios . ECHO
example# 13689
if hasattr ( signal , '_STR:0_' ) :pass
example# 13690
old_handler = signal . signal ( signal . SIGTTOU , signal . SIG_IGN )
example# 13691
if True: pass
else :pass
example# 13692
old_handler = None
example# 13693
termios . tcsetattr ( fd , termios . TCSANOW , attr_list )
example# 13694
if old_handler is not None :pass
example# 13695
signal . signal ( signal . SIGTTOU , old_handler )
example# 13696
def reloader_thread ( ) :pass
example# 13697
ensure_echo_on ( )
example# 13698
if USE_INOTIFY :pass
example# 13699
fn = inotify_code_changed
example# 13700
if True: pass
else :pass
example# 13701
fn = code_changed
example# 13702
while RUN_RELOADER :pass
example# 13703
change = fn ( )
example# 13704
if change == FILE_MODIFIED :pass
example# 13705
sys . exit ( 3 )
example# 13706
if True: pass
elif change == I18N_MODIFIED :pass
example# 13707
reset_translations ( )
example# 13708
time . sleep ( 1 )
example# 13709
def restart_with_reloader ( ) :pass
example# 13710
while True :pass
example# 13711
args = [ sys . executable ] + [ '_STR:0_' % o for o in sys . warnoptions ] + sys . argv
example# 13712
if sys . platform == '_STR:0_' :pass
example# 13713
args = [ '"%s"' % arg for arg in args ]
example# 13714
new_environ = os . environ . copy ( )
example# 13715
new_environ [ '_STR:0_' ] = '_STR:1_'
example# 13716
exit_code = os . spawnve ( os . P_WAIT , sys . executable , args , new_environ )
example# 13717
if exit_code != 3 :pass
example# 13718
return exit_code
example# 13719
def python_reloader ( main_func , args , kwargs ) :pass
example# 13720
if os . environ . get ( '_STR:0_' ) == '_STR:1_' :pass
example# 13721
thread . start_new_thread ( main_func , args , kwargs )
example# 13722
try :pass
except: pass
example# 13723
reloader_thread ( )
example# 13724
try: pass
except KeyboardInterrupt :pass
example# 13725
pass
example# 13726
if True: pass
else :pass
example# 13727
try :pass
except: pass
example# 13728
exit_code = restart_with_reloader ( )
example# 13729
if exit_code < 0 :pass
example# 13730
os . kill ( os . getpid ( ) , - exit_code )
example# 13731
if True: pass
else :pass
example# 13732
sys . exit ( exit_code )
example# 13733
try: pass
except KeyboardInterrupt :pass
example# 13734
pass
example# 13735
def jython_reloader ( main_func , args , kwargs ) :pass
example# 13736
from _systemrestart import SystemRestart
example# 13737
thread . start_new_thread ( main_func , args )
example# 13738
while True :pass
example# 13739
if code_changed ( ) :pass
example# 13740
raise SystemRestart
example# 13741
time . sleep ( 1 )
example# 13742
def main ( main_func , args = None , kwargs = None ) :pass
example# 13743
if args is None :pass
example# 13744
args = ( )
example# 13745
if kwargs is None :pass
example# 13746
kwargs = { }
example# 13747
if sys . platform . startswith ( '_STR:0_' ) :pass
example# 13748
reloader = jython_reloader
example# 13749
if True: pass
else :pass
example# 13750
reloader = python_reloader
example# 13751
wrapped_main_func = check_errors ( main_func )
example# 13752
reloader ( wrapped_main_func , args , kwargs )
example# 13753
BASE2_ALPHABET = '_STR:0_'
example# 13754
BASE16_ALPHABET = '_STR:0_'
example# 13755
BASE56_ALPHABET = '_STR:0_'
example# 13756
BASE36_ALPHABET = '_STR:0_'
example# 13757
BASE62_ALPHABET = '_STR:0_'
example# 13758
BASE64_ALPHABET = BASE62_ALPHABET + '_STR:0_'
example# 13759
class BaseConverter ( object ) :pass
example# 13760
decimal_digits = '_STR:0_'
example# 13761
def __init__ ( self , digits , sign = '_STR:0_' ) :pass
example# 13762
self . sign = sign
example# 13763
self . digits = digits
example# 13764
if sign in self . digits :pass
example# 13765
raise ValueError ( '_STR:0_' )
example# 13766
def __repr__ ( self ) :pass
example# 13767
return '_STR:0_' % ( len ( self . digits ) , self . digits )
example# 13768
def encode ( self , i ) :pass
example# 13769
neg , value = self . convert ( i , self . decimal_digits , self . digits , '_STR:0_' )
example# 13770
if neg :pass
example# 13771
return self . sign + value
example# 13772
return value
example# 13773
def decode ( self , s ) :pass
example# 13774
neg , value = self . convert ( s , self . digits , self . decimal_digits , self . sign )
example# 13775
if neg :pass
example# 13776
value = '_STR:0_' + value
example# 13777
return int ( value )
example# 13778
def convert ( self , number , from_digits , to_digits , sign ) :pass
example# 13779
if str ( number ) [ 0 ] == sign :pass
example# 13780
number = str ( number ) [ 1 : ]
example# 13781
neg = 1
example# 13782
if True: pass
else :pass
example# 13783
neg = 0
example# 13784
x = 0
example# 13785
for digit in str ( number ) :pass
example# 13786
x = x * len ( from_digits ) + from_digits . index ( digit )
example# 13787
if x == 0 :pass
example# 13788
res = to_digits [ 0 ]
example# 13789
if True: pass
else :pass
example# 13790
res = ''
example# 13791
while x > 0 :pass
example# 13792
digit = x % len ( to_digits )
example# 13793
res = to_digits [ digit ] + res
example# 13794
x = int ( x // len ( to_digits ) )
example# 13795
return neg , res
example# 13796
base2 = BaseConverter ( BASE2_ALPHABET )
example# 13797
base16 = BaseConverter ( BASE16_ALPHABET )
example# 13798
base36 = BaseConverter ( BASE36_ALPHABET )
example# 13799
base56 = BaseConverter ( BASE56_ALPHABET )
example# 13800
base62 = BaseConverter ( BASE62_ALPHABET )
example# 13801
base64 = BaseConverter ( BASE64_ALPHABET , sign = '_STR:0_' )
example# 13802
from __future__ import unicode_literals
example# 13803
import hashlib
example# 13804
import re
example# 13805
import time
example# 13806
from django . conf import settings
example# 13807
from django . core . cache import caches
example# 13808
from django . utils . encoding import iri_to_uri , force_bytes , force_text
example# 13809
from django . utils . http import http_date
example# 13810
from django . utils . timezone import get_current_timezone_name
example# 13811
from django . utils . translation import get_language
example# 13812
cc_delim_re = re . compile ( r'_STR:0_' )
example# 13813
def patch_cache_control ( response , ** kwargs ) :pass
example# 13814
def dictitem ( s ) :pass
example# 13815
t = s . split ( '_STR:0_' , 1 )
example# 13816
if len ( t ) > 1 :pass
example# 13817
return ( t [ 0 ] . lower ( ) , t [ 1 ] )
example# 13818
if True: pass
else :pass
example# 13819
return ( t [ 0 ] . lower ( ) , True )
example# 13820
def dictvalue ( t ) :pass
example# 13821
if t [ 1 ] is True :pass
example# 13822
return t [ 0 ]
example# 13823
if True: pass
else :pass
example# 13824
return '%s=%s' % ( t [ 0 ] , t [ 1 ] )
example# 13825
if response . has_header ( '_STR:0_' ) :pass
example# 13826
cc = cc_delim_re . split ( response [ '_STR:0_' ] )
example# 13827
cc = dict ( dictitem ( el ) for el in cc )
example# 13828
if True: pass
else :pass
example# 13829
cc = { }
example# 13830
if '_STR:0_' in cc and '_STR:1_' in kwargs :pass
example# 13831
kwargs [ 'max_age' ] = min ( int ( cc [ '_STR:0_' ] ) , kwargs [ 'max_age' ] )
example# 13832
if '_STR:2_' in cc and '_STR:3_' in kwargs :pass
example# 13833
del cc [ '_STR:0_' ]
example# 13834
if True: pass
elif '_STR:0_' in cc and '_STR:1_' in kwargs :pass
example# 13835
del cc [ '_STR:0_' ]
example# 13836
for ( k , v ) in kwargs . items ( ) :pass
example# 13837
cc [ k . replace ( '_STR:0_' , '_STR:1_' ) ] = v
example# 13838
cc = ', ' . join ( dictvalue ( el ) for el in cc . items ( ) )
example# 13839
response [ '_STR:0_' ] = cc
example# 13840
def get_max_age ( response ) :pass
example# 13841
if not response . has_header ( '_STR:0_' ) :pass
example# 13842
return
example# 13843
cc = dict ( _to_tuple ( el ) for el in  cc_delim_re . split ( response [ 'Cache-Control' ] ) )
example# 13844
if '_STR:1_' in cc :pass
example# 13845
try :pass
except: pass
example# 13846
return int ( cc [ '_STR:0_' ] )
example# 13847
try: pass
except ( ValueError , TypeError ) :pass
example# 13848
pass
example# 13849
def _set_response_etag ( response ) :pass
example# 13850
if not response . streaming :pass
example# 13851
response [ 'ETag' ] = '"%s"' % hashlib . md5 ( response . content ) . hexdigest ( )
example# 13852
return response
example# 13853
def patch_response_headers ( response , cache_timeout = None ) :pass
example# 13854
if cache_timeout is None :pass
example# 13855
cache_timeout = settings . CACHE_MIDDLEWARE_SECONDS
example# 13856
if cache_timeout < 0 :pass
example# 13857
cache_timeout = 0
example# 13858
if settings . USE_ETAGS and not response . has_header ( '_STR:0_' ) :pass
example# 13859
if hasattr ( response , '_STR:0_' ) and callable ( response . render ) :pass
example# 13860
response . add_post_render_callback ( _set_response_etag )
example# 13861
if True: pass
else :pass
example# 13862
response = _set_response_etag ( response )
example# 13863
if not response . has_header ( '_STR:0_' ) :pass
example# 13864
response [ 'Last-Modified' ] = http_date ( )
example# 13865
if not response . has_header ( '_STR:1_' ) :pass
example# 13866
response [ 'Expires' ] = http_date ( time . time ( ) + cache_timeout )
example# 13867
patch_cache_control ( response , max_age = cache_timeout )
example# 13868
def add_never_cache_headers ( response ) :pass
example# 13869
patch_response_headers ( response , cache_timeout = - 1 )
example# 13870
def patch_vary_headers ( response , newheaders ) :pass
example# 13871
"""     Adds (or updates) the "Vary" header in the given HttpResponse object.     newheaders is a list of header names that should be in "Vary". Existing     headers in "Vary" aren't removed.     """
example# 13872
if response . has_header ( '_STR:0_' ) :pass
example# 13873
vary_headers = cc_delim_re . split ( response [ '_STR:0_' ] )
example# 13874
if True: pass
else :pass
example# 13875
vary_headers = [ ]
example# 13876
existing_headers = set ( header . lower ( ) for header in vary_headers )
example# 13877
additional_headers = [ newheader for newheader in newheaders  if newheader . lower ( ) not in existing_headers ]
example# 13878
response [ 'Vary' ] = ', ' . join ( vary_headers + additional_headers )
example# 13879
def has_vary_header ( response , header_query ) :pass
example# 13880
if not response . has_header ( '_STR:0_' ) :pass
example# 13881
return False
example# 13882
vary_headers = cc_delim_re . split ( response [ '_STR:0_' ] )
example# 13883
existing_headers = set ( header . lower ( ) for header in vary_headers )
example# 13884
return header_query . lower ( ) in existing_headers
example# 13885
def _i18n_cache_key_suffix ( request , cache_key ) :pass
example# 13886
if settings . USE_I18N or settings . USE_L10N :pass
example# 13887
cache_key += '.%s' % getattr ( request , '_STR:0_' , get_language ( ) )
example# 13888
if settings . USE_TZ :pass
example# 13889
tz_name = force_text ( get_current_timezone_name ( ) , errors = '_STR:0_' )
example# 13890
cache_key += '.%s' % tz_name . encode ( '_STR:0_' , '_STR:1_' ) . decode ( '_STR:0_' ) . replace ( ' ' , '_' )
example# 13891
return cache_key
example# 13892
def _generate_cache_key ( request , method , headerlist , key_prefix ) :pass
example# 13893
ctx = hashlib . md5 ( )
example# 13894
for header in headerlist :pass
example# 13895
value = request . META . get ( header , None )
example# 13896
if value is not None :pass
example# 13897
ctx . update ( force_bytes ( value ) )
example# 13898
url = hashlib . md5 ( force_bytes ( iri_to_uri ( request . build_absolute_uri ( ) ) ) )
example# 13899
cache_key = '_STR:0_' % (  key_prefix , method , url . hexdigest ( ) , ctx . hexdigest ( ) )
example# 13900
return _i18n_cache_key_suffix ( request , cache_key )
example# 13901
def _generate_cache_header_key ( key_prefix , request ) :pass
example# 13902
url = hashlib . md5 ( force_bytes ( iri_to_uri ( request . build_absolute_uri ( ) ) ) )
example# 13903
cache_key = '_STR:0_' % (  key_prefix , url . hexdigest ( ) )
example# 13904
return _i18n_cache_key_suffix ( request , cache_key )
example# 13905
def get_cache_key ( request , key_prefix = None , method = '_STR:0_' , cache = None ) :pass
example# 13906
if key_prefix is None :pass
example# 13907
key_prefix = settings . CACHE_MIDDLEWARE_KEY_PREFIX
example# 13908
cache_key = _generate_cache_header_key ( key_prefix , request )
example# 13909
if cache is None :pass
example# 13910
cache = caches [ settings . CACHE_MIDDLEWARE_ALIAS ]
example# 13911
headerlist = cache . get ( cache_key , None )
example# 13912
if headerlist is not None :pass
example# 13913
return _generate_cache_key ( request , method , headerlist , key_prefix )
example# 13914
if True: pass
else :pass
example# 13915
return None
example# 13916
def learn_cache_key ( request , response , cache_timeout = None , key_prefix = None , cache = None ) :pass
example# 13917
if key_prefix is None :pass
example# 13918
key_prefix = settings . CACHE_MIDDLEWARE_KEY_PREFIX
example# 13919
if cache_timeout is None :pass
example# 13920
cache_timeout = settings . CACHE_MIDDLEWARE_SECONDS
example# 13921
cache_key = _generate_cache_header_key ( key_prefix , request )
example# 13922
if cache is None :pass
example# 13923
cache = caches [ settings . CACHE_MIDDLEWARE_ALIAS ]
example# 13924
if response . has_header ( '_STR:0_' ) :pass
example# 13925
is_accept_language_redundant = settings . USE_I18N or settings . USE_L10N
example# 13926
headerlist = [ ]
example# 13927
for header in cc_delim_re . split ( response [ '_STR:0_' ] ) :pass
example# 13928
header = header . upper ( ) . replace ( '_STR:0_' , '_STR:1_' )
example# 13929
if header == '_STR:0_' and is_accept_language_redundant :pass
example# 13930
continue
example# 13931
headerlist . append ( '_STR:0_' + header )
example# 13932
headerlist . sort ( )
example# 13933
cache . set ( cache_key , headerlist , cache_timeout )
example# 13934
return _generate_cache_key ( request , request . method , headerlist , key_prefix )
example# 13935
if True: pass
else :pass
example# 13936
cache . set ( cache_key , [ ] , cache_timeout )
example# 13937
return _generate_cache_key ( request , request . method , [ ] , key_prefix )
example# 13938
def _to_tuple ( s ) :pass
example# 13939
t = s . split ( '_STR:0_' , 1 )
example# 13940
if len ( t ) == 2 :pass
example# 13941
return t [ 0 ] . lower ( ) , t [ 1 ]
example# 13942
return t [ 0 ] . lower ( ) , True
example# 13943
__all__ = [ '_STR:0_' ]
example# 13944
from django . utils import six
example# 13945
LUHN_ODD_LOOKUP = ( 0 , 2 , 4 , 6 , 8 , 1 , 3 , 5 , 7 , 9 )
example# 13946
def luhn ( candidate ) :pass
example# 13947
if not isinstance ( candidate , six . string_types ) :pass
example# 13948
candidate = str ( candidate )
example# 13949
try :pass
except: pass
example# 13950
evens = sum ( int ( c ) for c in candidate [ - 1 : : - 2 ] )
example# 13951
odds = sum ( LUHN_ODD_LOOKUP [ int ( c ) ] for c in candidate [ - 2 : : - 2 ] )
example# 13952
return ( ( evens + odds ) % 10 == 0 )
example# 13953
try: pass
except ValueError :pass
example# 13954
return False
example# 13955
from __future__ import unicode_literals
example# 13956
import hmac
example# 13957
import struct
example# 13958
import hashlib
example# 13959
import binascii
example# 13960
import time
example# 13961
import random
example# 13962
try :pass
except: pass
example# 13963
random = random . SystemRandom ( )
example# 13964
using_sysrandom = True
example# 13965
try: pass
except NotImplementedError :pass
example# 13966
import warnings
example# 13967
warnings . warn ( 'A secure pseudo-random number generator is not available '  'on your system. Falling back to Mersenne Twister.' )
example# 13968
using_sysrandom = False
example# 13969
from django . conf import settings
example# 13970
from django . utils . encoding import force_bytes
example# 13971
from django . utils import six
example# 13972
from django . utils . six . moves import xrange
example# 13973
def salted_hmac ( key_salt , value , secret = None ) :pass
example# 13974
if secret is None :pass
example# 13975
secret = settings . SECRET_KEY
example# 13976
key_salt = force_bytes ( key_salt )
example# 13977
secret = force_bytes ( secret )
example# 13978
key = hashlib . sha1 ( key_salt + secret ) . digest ( )
example# 13979
return hmac . new ( key , msg = force_bytes ( value ) , digestmod = hashlib . sha1 )
example# 13980
def get_random_string ( length = 12 ,  allowed_chars = 'abcdefghijklmnopqrstuvwxyz'  'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' ) :pass
example# 13981
if not using_sysrandom :pass
example# 13982
random . seed (  hashlib . sha256 (  ( '_STR:0_' % (  random . getstate ( ) ,  time . time ( ) ,  settings . SECRET_KEY ) ) . encode ( 'utf-8' )  ) . digest ( ) )
example# 13983
return '' . join ( random . choice ( allowed_chars ) for i in range ( length ) )
example# 13984
if hasattr ( hmac , '_STR:0_' ) :pass
example# 13985
def constant_time_compare ( val1 , val2 ) :pass
example# 13986
return hmac . compare_digest ( force_bytes ( val1 ) , force_bytes ( val2 ) )
example# 13987
if True: pass
else :pass
example# 13988
def constant_time_compare ( val1 , val2 ) :pass
example# 13989
if len ( val1 ) != len ( val2 ) :pass
example# 13990
return False
example# 13991
result = 0
example# 13992
if six . PY3 and isinstance ( val1 , bytes ) and isinstance ( val2 , bytes ) :pass
example# 13993
for x , y in zip ( val1 , val2 ) :pass
example# 13994
result |= x ^ y
example# 13995
if True: pass
else :pass
example# 13996
for x , y in zip ( val1 , val2 ) :pass
example# 13997
result |= ord ( x ) ^ ord ( y )
example# 13998
return result == 0
example# 13999
def _bin_to_long ( x ) :pass
example# 14000
return int ( binascii . hexlify ( x ) , 16 )
example# 14001
def _long_to_bin ( x , hex_format_string ) :pass
example# 14002
return binascii . unhexlify ( ( hex_format_string % x ) . encode ( '_STR:0_' ) )
example# 14003
if hasattr ( hashlib , '_STR:0_' ) :pass
example# 14004
def pbkdf2 ( password , salt , iterations , dklen = 0 , digest = None ) :pass
example# 14005
if digest is None :pass
example# 14006
digest = hashlib . sha256
example# 14007
if not dklen :pass
example# 14008
dklen = None
example# 14009
password = force_bytes ( password )
example# 14010
salt = force_bytes ( salt )
example# 14011
return hashlib . pbkdf2_hmac (  digest ( ) . name , password , salt , iterations , dklen )
example# 14012
if True: pass
else :pass
example# 14013
def pbkdf2 ( password , salt , iterations , dklen = 0 , digest = None ) :pass
example# 14014
assert iterations > 0
example# 14015
if not digest :pass
example# 14016
digest = hashlib . sha256
example# 14017
password = force_bytes ( password )
example# 14018
salt = force_bytes ( salt )
example# 14019
hlen = digest ( ) . digest_size
example# 14020
if not dklen :pass
example# 14021
dklen = hlen
example# 14022
if dklen > ( 2 ** 32 - 1 ) * hlen :pass
example# 14023
raise OverflowError ( '_STR:0_' )
example# 14024
l = - ( - dklen // hlen )
example# 14025
r = dklen - ( l - 1 ) * hlen
example# 14026
hex_format_string = '_STR:0_' % ( hlen * 2 )
example# 14027
inner , outer = digest ( ) , digest ( )
example# 14028
if len ( password ) > inner . block_size :pass
example# 14029
password = digest ( password ) . digest ( )
example# 14030
password += b'_STR:0_' * ( inner . block_size - len ( password ) )
example# 14031
inner . update ( password . translate ( hmac . trans_36 ) )
example# 14032
outer . update ( password . translate ( hmac . trans_5C ) )
example# 14033
def F ( i ) :pass
example# 14034
u = salt + struct . pack ( b'_STR:0_' , i )
example# 14035
result = 0
example# 14036
for j in xrange ( int ( iterations ) ) :pass
example# 14037
dig1 , dig2 = inner . copy ( ) , outer . copy ( )
example# 14038
dig1 . update ( u )
example# 14039
dig2 . update ( dig1 . digest ( ) )
example# 14040
u = dig2 . digest ( )
example# 14041
result ^= _bin_to_long ( u )
example# 14042
return _long_to_bin ( result , hex_format_string )
example# 14043
T = [ F ( x ) for x in range ( 1 , l ) ]
example# 14044
return b'' . join ( T ) + F ( l ) [ : r ]
example# 14045
import os
example# 14046
import sys
example# 14047
from . import six
example# 14048
buffering = int ( six . PY3 )
example# 14049
if os . name == '_STR:0_' :pass
example# 14050
def become_daemon ( our_home_dir = '_STR:0_' , out_log = '_STR:1_' ,  err_log = '_STR:1_' , umask = 0o022 ) :pass
example# 14051
try :pass
except: pass
example# 14052
if os . fork ( ) > 0 :pass
example# 14053
sys . exit ( 0 )
example# 14054
try: pass
except OSError as e :pass
example# 14055
sys . stderr . write ( '_STR:0_' % ( e . errno , e . strerror ) )
example# 14056
sys . exit ( 1 )
example# 14057
os . setsid ( )
example# 14058
os . chdir ( our_home_dir )
example# 14059
os . umask ( umask )
example# 14060
try :pass
except: pass
example# 14061
if os . fork ( ) > 0 :pass
example# 14062
os . _exit ( 0 )
example# 14063
try: pass
except OSError as e :pass
example# 14064
sys . stderr . write ( '_STR:0_' % ( e . errno , e . strerror ) )
example# 14065
os . _exit ( 1 )
example# 14066
si = open ( '_STR:0_' , 'r' )
example# 14067
so = open ( out_log , 'a+' , buffering )
example# 14068
se = open ( err_log , 'a+' , buffering )
example# 14069
os . dup2 ( si . fileno ( ) , sys . stdin . fileno ( ) )
example# 14070
os . dup2 ( so . fileno ( ) , sys . stdout . fileno ( ) )
example# 14071
os . dup2 ( se . fileno ( ) , sys . stderr . fileno ( ) )
example# 14072
sys . stdout , sys . stderr = so , se
example# 14073
if True: pass
else :pass
example# 14074
def become_daemon ( our_home_dir = '_STR:0_' , out_log = None , err_log = None , umask = 0o022 ) :pass
example# 14075
os . chdir ( our_home_dir )
example# 14076
os . umask ( umask )
example# 14077
sys . stdin . close ( )
example# 14078
sys . stdout . close ( )
example# 14079
sys . stderr . close ( )
example# 14080
if err_log :pass
example# 14081
sys . stderr = open ( err_log , 'a' , buffering )
example# 14082
if True: pass
else :pass
example# 14083
sys . stderr = NullDevice ( )
example# 14084
if out_log :pass
example# 14085
sys . stdout = open ( out_log , 'a' , buffering )
example# 14086
if True: pass
else :pass
example# 14087
sys . stdout = NullDevice ( )
example# 14088
class NullDevice :pass
example# 14089
def write ( self , s ) :pass
example# 14090
pass
example# 14091
import copy
example# 14092
import warnings
example# 14093
from collections import OrderedDict
example# 14094
from django . utils import six
example# 14095
from django . utils . deprecation import RemovedInDjango19Warning
example# 14096
class MergeDict ( object ) :pass
example# 14097
def __init__ ( self , * dicts ) :pass
example# 14098
warnings . warn ( '`MergeDict` is deprecated, use `dict.update()` '  'instead.' , RemovedInDjango19Warning , 2 )
example# 14099
self . dicts = dicts
example# 14100
def __bool__ ( self ) :pass
example# 14101
return any ( self . dicts )
example# 14102
def __nonzero__ ( self ) :pass
example# 14103
return type ( self ) . __bool__ ( self )
example# 14104
def __getitem__ ( self , key ) :pass
example# 14105
for dict_ in self . dicts :pass
example# 14106
try :pass
except: pass
example# 14107
return dict_ [ key ]
example# 14108
try: pass
except KeyError :pass
example# 14109
pass
example# 14110
raise KeyError ( key )
example# 14111
def __copy__ ( self ) :pass
example# 14112
return self . __class__ ( * self . dicts )
example# 14113
def get ( self , key , default = None ) :pass
example# 14114
try :pass
except: pass
example# 14115
return self [ key ]
example# 14116
try: pass
except KeyError :pass
example# 14117
return default
example# 14118
def getlist ( self , key ) :pass
example# 14119
for dict_ in self . dicts :pass
example# 14120
if key in dict_ :pass
example# 14121
return dict_ . getlist ( key )
example# 14122
return [ ]
example# 14123
def _iteritems ( self ) :pass
example# 14124
seen = set ( )
example# 14125
for dict_ in self . dicts :pass
example# 14126
for item in six . iteritems ( dict_ ) :pass
example# 14127
k = item [ 0 ]
example# 14128
if k in seen :pass
example# 14129
continue
example# 14130
seen . add ( k )
example# 14131
yield item
example# 14132
def _iterkeys ( self ) :pass
example# 14133
for k , v in self . _iteritems ( ) :pass
example# 14134
yield k
example# 14135
def _itervalues ( self ) :pass
example# 14136
for k , v in self . _iteritems ( ) :pass
example# 14137
yield v
example# 14138
if six . PY3 :pass
example# 14139
items = _iteritems
example# 14140
keys = _iterkeys
example# 14141
values = _itervalues
example# 14142
if True: pass
else :pass
example# 14143
iteritems = _iteritems
example# 14144
iterkeys = _iterkeys
example# 14145
itervalues = _itervalues
example# 14146
def items ( self ) :pass
example# 14147
return list ( self . iteritems ( ) )
example# 14148
def keys ( self ) :pass
example# 14149
return list ( self . iterkeys ( ) )
example# 14150
def values ( self ) :pass
example# 14151
return list ( self . itervalues ( ) )
example# 14152
def has_key ( self , key ) :pass
example# 14153
for dict_ in self . dicts :pass
example# 14154
if key in dict_ :pass
example# 14155
return True
example# 14156
return False
example# 14157
__contains__ = has_key
example# 14158
__iter__ = _iterkeys
example# 14159
def copy ( self ) :pass
example# 14160
return self . __copy__ ( )
example# 14161
def __str__ ( self ) :pass
example# 14162
return str ( dict ( self . items ( ) ) )
example# 14163
def __repr__ ( self ) :pass
example# 14164
dictreprs = '_STR:0_' . join ( repr ( d ) for d in self . dicts )
example# 14165
return '_STR:0_' % ( self . __class__ . __name__ , dictreprs )
example# 14166
class SortedDict ( dict ) :pass
example# 14167
def __new__ ( cls , * args , ** kwargs ) :pass
example# 14168
instance = super ( SortedDict , cls ) . __new__ ( cls , * args , ** kwargs )
example# 14169
instance . keyOrder = [ ]
example# 14170
return instance
example# 14171
def __init__ ( self , data = None ) :pass
example# 14172
warnings . warn (  '_STR:0_' ,  RemovedInDjango19Warning , stacklevel = 2  )
example# 14173
if data is None or isinstance ( data , dict ) :pass
example# 14174
data = data or [ ]
example# 14175
super ( SortedDict , self ) . __init__ ( data )
example# 14176
self . keyOrder = list ( data ) if data else [ ]
example# 14177
if True: pass
else :pass
example# 14178
super ( SortedDict , self ) . __init__ ( )
example# 14179
super_set = super ( SortedDict , self ) . __setitem__
example# 14180
for key , value in data :pass
example# 14181
if key not in self :pass
example# 14182
self . keyOrder . append ( key )
example# 14183
super_set ( key , value )
example# 14184
def __deepcopy__ ( self , memo ) :pass
example# 14185
return self . __class__ ( [ ( key , copy . deepcopy ( value , memo ) )  for key , value in self . items ( ) ] )
example# 14186
def __copy__ ( self ) :pass
example# 14187
return self . copy ( )
example# 14188
def __setitem__ ( self , key , value ) :pass
example# 14189
if key not in self :pass
example# 14190
self . keyOrder . append ( key )
example# 14191
super ( SortedDict , self ) . __setitem__ ( key , value )
example# 14192
def __delitem__ ( self , key ) :pass
example# 14193
super ( SortedDict , self ) . __delitem__ ( key )
example# 14194
self . keyOrder . remove ( key )
example# 14195
def __iter__ ( self ) :pass
example# 14196
return iter ( self . keyOrder )
example# 14197
def __reversed__ ( self ) :pass
example# 14198
return reversed ( self . keyOrder )
example# 14199
def pop ( self , k , * args ) :pass
example# 14200
result = super ( SortedDict , self ) . pop ( k , * args )
example# 14201
try :pass
except: pass
example# 14202
self . keyOrder . remove ( k )
example# 14203
try: pass
except ValueError :pass
example# 14204
pass
example# 14205
return result
example# 14206
def popitem ( self ) :pass
example# 14207
result = super ( SortedDict , self ) . popitem ( )
example# 14208
self . keyOrder . remove ( result [ 0 ] )
example# 14209
return result
example# 14210
def _iteritems ( self ) :pass
example# 14211
for key in self . keyOrder :pass
example# 14212
yield key , self [ key ]
example# 14213
def _iterkeys ( self ) :pass
example# 14214
for key in self . keyOrder :pass
example# 14215
yield key
example# 14216
def _itervalues ( self ) :pass
example# 14217
for key in self . keyOrder :pass
example# 14218
yield self [ key ]
example# 14219
if six . PY3 :pass
example# 14220
items = _iteritems
example# 14221
keys = _iterkeys
example# 14222
values = _itervalues
example# 14223
if True: pass
else :pass
example# 14224
iteritems = _iteritems
example# 14225
iterkeys = _iterkeys
example# 14226
itervalues = _itervalues
example# 14227
def items ( self ) :pass
example# 14228
return [ ( k , self [ k ] ) for k in self . keyOrder ]
example# 14229
def keys ( self ) :pass
example# 14230
return self . keyOrder [ : ]
example# 14231
def values ( self ) :pass
example# 14232
return [ self [ k ] for k in self . keyOrder ]
example# 14233
def update ( self , dict_ ) :pass
example# 14234
for k , v in six . iteritems ( dict_ ) :pass
example# 14235
self [ k ] = v
example# 14236
def setdefault ( self , key , default ) :pass
example# 14237
if key not in self :pass
example# 14238
self . keyOrder . append ( key )
example# 14239
return super ( SortedDict , self ) . setdefault ( key , default )
example# 14240
def copy ( self ) :pass
example# 14241
return self . __class__ ( self )
example# 14242
def __repr__ ( self ) :pass
example# 14243
return '{%s}' % ', ' . join ( '%r: %r' % ( k , v ) for k , v in six . iteritems ( self ) )
example# 14244
def clear ( self ) :pass
example# 14245
super ( SortedDict , self ) . clear ( )
example# 14246
self . keyOrder = [ ]
example# 14247
class OrderedSet ( object ) :pass
example# 14248
def __init__ ( self , iterable = None ) :pass
example# 14249
self . dict = OrderedDict ( ( ( x , None ) for x in iterable ) if iterable else [ ] )
example# 14250
def add ( self , item ) :pass
example# 14251
self . dict [ item ] = None
example# 14252
def remove ( self , item ) :pass
example# 14253
del self . dict [ item ]
example# 14254
def discard ( self , item ) :pass
example# 14255
try :pass
except: pass
example# 14256
self . remove ( item )
example# 14257
try: pass
except KeyError :pass
example# 14258
pass
example# 14259
def __iter__ ( self ) :pass
example# 14260
return iter ( self . dict . keys ( ) )
example# 14261
def __contains__ ( self , item ) :pass
example# 14262
return item in self . dict
example# 14263
def __nonzero__ ( self ) :pass
example# 14264
return bool ( self . dict )
example# 14265
class MultiValueDictKeyError ( KeyError ) :pass
example# 14266
pass
example# 14267
class MultiValueDict ( dict ) :pass
example# 14268
def __init__ ( self , key_to_list_mapping = ( ) ) :pass
example# 14269
super ( MultiValueDict , self ) . __init__ ( key_to_list_mapping )
example# 14270
def __repr__ ( self ) :pass
example# 14271
return '_STR:0_' % ( self . __class__ . __name__ ,  super ( MultiValueDict , self ) . __repr__ ( ) )
example# 14272
def __getitem__ ( self , key ) :pass
example# 14273
try :pass
except: pass
example# 14274
list_ = super ( MultiValueDict , self ) . __getitem__ ( key )
example# 14275
try: pass
except KeyError :pass
example# 14276
raise MultiValueDictKeyError ( repr ( key ) )
example# 14277
try :pass
except: pass
example# 14278
return list_ [ - 1 ]
example# 14279
try: pass
except IndexError :pass
example# 14280
return [ ]
example# 14281
def __setitem__ ( self , key , value ) :pass
example# 14282
super ( MultiValueDict , self ) . __setitem__ ( key , [ value ] )
example# 14283
def __copy__ ( self ) :pass
example# 14284
return self . __class__ ( [  ( k , v [ : ] )  for k , v in self . lists ( )  ] )
example# 14285
def __deepcopy__ ( self , memo = None ) :pass
example# 14286
if memo is None :pass
example# 14287
memo = { }
example# 14288
result = self . __class__ ( )
example# 14289
memo [ id ( self ) ] = result
example# 14290
for key , value in dict . items ( self ) :pass
example# 14291
dict . __setitem__ ( result , copy . deepcopy ( key , memo ) ,  copy . deepcopy ( value , memo ) )
example# 14292
return result
example# 14293
def __getstate__ ( self ) :pass
example# 14294
obj_dict = self . __dict__ . copy ( )
example# 14295
obj_dict [ '_STR:0_' ] = dict ( ( k , self . getlist ( k ) ) for k in self )
example# 14296
return obj_dict
example# 14297
def __setstate__ ( self , obj_dict ) :pass
example# 14298
data = obj_dict . pop ( '_STR:0_' , { } )
example# 14299
for k , v in data . items ( ) :pass
example# 14300
self . setlist ( k , v )
example# 14301
self . __dict__ . update ( obj_dict )
example# 14302
def get ( self , key , default = None ) :pass
example# 14303
try :pass
except: pass
example# 14304
val = self [ key ]
example# 14305
try: pass
except KeyError :pass
example# 14306
return default
example# 14307
if val == [ ] :pass
example# 14308
return default
example# 14309
return val
example# 14310
def getlist ( self , key , default = None ) :pass
example# 14311
try :pass
except: pass
example# 14312
return super ( MultiValueDict , self ) . __getitem__ ( key )
example# 14313
try: pass
except KeyError :pass
example# 14314
if default is None :pass
example# 14315
return [ ]
example# 14316
return default
example# 14317
def setlist ( self , key , list_ ) :pass
example# 14318
super ( MultiValueDict , self ) . __setitem__ ( key , list_ )
example# 14319
def setdefault ( self , key , default = None ) :pass
example# 14320
if key not in self :pass
example# 14321
self [ key ] = default
example# 14322
return self [ key ]
example# 14323
def setlistdefault ( self , key , default_list = None ) :pass
example# 14324
if key not in self :pass
example# 14325
if default_list is None :pass
example# 14326
default_list = [ ]
example# 14327
self . setlist ( key , default_list )
example# 14328
return self . getlist ( key )
example# 14329
def appendlist ( self , key , value ) :pass
example# 14330
self . setlistdefault ( key ) . append ( value )
example# 14331
def _iteritems ( self ) :pass
example# 14332
for key in self :pass
example# 14333
yield key , self [ key ]
example# 14334
def _iterlists ( self ) :pass
example# 14335
return six . iteritems ( super ( MultiValueDict , self ) )
example# 14336
def _itervalues ( self ) :pass
example# 14337
for key in self :pass
example# 14338
yield self [ key ]
example# 14339
if six . PY3 :pass
example# 14340
items = _iteritems
example# 14341
lists = _iterlists
example# 14342
values = _itervalues
example# 14343
if True: pass
else :pass
example# 14344
iteritems = _iteritems
example# 14345
iterlists = _iterlists
example# 14346
itervalues = _itervalues
example# 14347
def items ( self ) :pass
example# 14348
return list ( self . iteritems ( ) )
example# 14349
def lists ( self ) :pass
example# 14350
return list ( self . iterlists ( ) )
example# 14351
def values ( self ) :pass
example# 14352
return list ( self . itervalues ( ) )
example# 14353
def copy ( self ) :pass
example# 14354
return copy . copy ( self )
example# 14355
def update ( self , * args , ** kwargs ) :pass
example# 14356
if len ( args ) > 1 :pass
example# 14357
raise TypeError ( '_STR:0_' % len ( args ) )
example# 14358
if args :pass
example# 14359
other_dict = args [ 0 ]
example# 14360
if isinstance ( other_dict , MultiValueDict ) :pass
example# 14361
for key , value_list in other_dict . lists ( ) :pass
example# 14362
self . setlistdefault ( key ) . extend ( value_list )
example# 14363
if True: pass
else :pass
example# 14364
try :pass
except: pass
example# 14365
for key , value in other_dict . items ( ) :pass
example# 14366
self . setlistdefault ( key ) . append ( value )
example# 14367
try: pass
except TypeError :pass
example# 14368
raise ValueError ( '_STR:0_' )
example# 14369
for key , value in six . iteritems ( kwargs ) :pass
example# 14370
self . setlistdefault ( key ) . append ( value )
example# 14371
def dict ( self ) :pass
example# 14372
return dict ( ( key , self [ key ] ) for key in self )
example# 14373
class ImmutableList ( tuple ) :pass
example# 14374
def __new__ ( cls , * args , ** kwargs ) :pass
example# 14375
if '_STR:0_' in kwargs :pass
example# 14376
warning = kwargs [ '_STR:0_' ]
example# 14377
del kwargs [ '_STR:0_' ]
example# 14378
if True: pass
else :pass
example# 14379
warning = '_STR:0_'
example# 14380
self = tuple . __new__ ( cls , * args , ** kwargs )
example# 14381
self . warning = warning
example# 14382
return self
example# 14383
def complain ( self , * wargs , ** kwargs ) :pass
example# 14384
if isinstance ( self . warning , Exception ) :pass
example# 14385
raise self . warning
example# 14386
if True: pass
else :pass
example# 14387
raise AttributeError ( self . warning )
example# 14388
__delitem__ = complain
example# 14389
__delslice__ = complain
example# 14390
__iadd__ = complain
example# 14391
__imul__ = complain
example# 14392
__setitem__ = complain
example# 14393
__setslice__ = complain
example# 14394
append = complain
example# 14395
extend = complain
example# 14396
insert = complain
example# 14397
pop = complain
example# 14398
remove = complain
example# 14399
sort = complain
example# 14400
reverse = complain
example# 14401
class DictWrapper ( dict ) :pass
example# 14402
def __init__ ( self , data , func , prefix ) :pass
example# 14403
super ( DictWrapper , self ) . __init__ ( data )
example# 14404
self . func = func
example# 14405
self . prefix = prefix
example# 14406
def __getitem__ ( self , key ) :pass
example# 14407
if key . startswith ( self . prefix ) :pass
example# 14408
use_func = True
example# 14409
key = key [ len ( self . prefix ) : ]
example# 14410
if True: pass
else :pass
example# 14411
use_func = False
example# 14412
value = super ( DictWrapper , self ) . __getitem__ ( key )
example# 14413
if use_func :pass
example# 14414
return self . func ( value )
example# 14415
return value
example# 14416
from __future__ import unicode_literals
example# 14417
import re
example# 14418
import time
example# 14419
import calendar
example# 14420
import datetime
example# 14421
from django . utils . dates import MONTHS , MONTHS_3 , MONTHS_ALT , MONTHS_AP , WEEKDAYS , WEEKDAYS_ABBR
example# 14422
from django . utils . translation import ugettext as _
example# 14423
from django . utils . encoding import force_text
example# 14424
from django . utils import six
example# 14425
from django . utils . timezone import get_default_timezone , is_aware , is_naive
example# 14426
re_formatchars = re . compile ( r'_STR:0_' )
example# 14427
re_escaped = re . compile ( r'_STR:0_' )
example# 14428
class Formatter ( object ) :pass
example# 14429
def format ( self , formatstr ) :pass
example# 14430
pieces = [ ]
example# 14431
for i , piece in enumerate ( re_formatchars . split ( force_text ( formatstr ) ) ) :pass
example# 14432
if i % 2 :pass
example# 14433
pieces . append ( force_text ( getattr ( self , piece ) ( ) ) )
example# 14434
if True: pass
elif piece :pass
example# 14435
pieces . append ( re_escaped . sub ( r'_STR:0_' , piece ) )
example# 14436
return '' . join ( pieces )
example# 14437
class TimeFormat ( Formatter ) :pass
example# 14438
def __init__ ( self , obj ) :pass
example# 14439
self . data = obj
example# 14440
self . timezone = None
example# 14441
if isinstance ( obj , datetime . datetime ) :pass
example# 14442
if is_naive ( obj ) :pass
example# 14443
self . timezone = get_default_timezone ( )
example# 14444
if True: pass
else :pass
example# 14445
self . timezone = obj . tzinfo
example# 14446
def a ( self ) :pass
example# 14447
if self . data . hour > 11 :pass
example# 14448
return _ ( '_STR:0_' )
example# 14449
return _ ( '_STR:0_' )
example# 14450
def A ( self ) :pass
example# 14451
if self . data . hour > 11 :pass
example# 14452
return _ ( '_STR:0_' )
example# 14453
return _ ( '_STR:0_' )
example# 14454
def B ( self ) :pass
example# 14455
raise NotImplementedError ( '_STR:0_' )
example# 14456
def e ( self ) :pass
example# 14457
if not self . timezone :pass
example# 14458
return ""
example# 14459
try :pass
except: pass
example# 14460
if hasattr ( self . data , '_STR:0_' ) and self . data . tzinfo :pass
example# 14461
return self . data . tzinfo . tzname ( self . data ) or ""
example# 14462
try: pass
except NotImplementedError :pass
example# 14463
pass
example# 14464
return ""
example# 14465
def f ( self ) :pass
example# 14466
if self . data . minute == 0 :pass
example# 14467
return self . g ( )
example# 14468
return '_STR:0_' % ( self . g ( ) , self . i ( ) )
example# 14469
def g ( self ) :pass
example# 14470
if self . data . hour == 0 :pass
example# 14471
return 12
example# 14472
if self . data . hour > 12 :pass
example# 14473
return self . data . hour - 12
example# 14474
return self . data . hour
example# 14475
def G ( self ) :pass
example# 14476
return self . data . hour
example# 14477
def h ( self ) :pass
example# 14478
return '_STR:0_' % self . g ( )
example# 14479
def H ( self ) :pass
example# 14480
return '_STR:0_' % self . G ( )
example# 14481
def i ( self ) :pass
example# 14482
return '_STR:0_' % self . data . minute
example# 14483
def O ( self ) :pass
example# 14484
if not self . timezone :pass
example# 14485
return ""
example# 14486
seconds = self . Z ( )
example# 14487
sign = '_STR:0_' if seconds < 0 else '_STR:1_'
example# 14488
seconds = abs ( seconds )
example# 14489
return '_STR:0_' % ( sign , seconds // 3600 , ( seconds // 60 ) % 60 )
example# 14490
def P ( self ) :pass
example# 14491
if self . data . minute == 0 and self . data . hour == 0 :pass
example# 14492
return _ ( '_STR:0_' )
example# 14493
if self . data . minute == 0 and self . data . hour == 12 :pass
example# 14494
return _ ( '_STR:0_' )
example# 14495
return '%s %s' % ( self . f ( ) , self . a ( ) )
example# 14496
def s ( self ) :pass
example# 14497
return '_STR:0_' % self . data . second
example# 14498
def T ( self ) :pass
example# 14499
if not self . timezone :pass
example# 14500
return ""
example# 14501
name = self . timezone . tzname ( self . data ) if self . timezone else None
example# 14502
if name is None :pass
example# 14503
name = self . format ( 'O' )
example# 14504
return six . text_type ( name )
example# 14505
def u ( self ) :pass
example# 14506
return '_STR:0_' % self . data . microsecond
example# 14507
def Z ( self ) :pass
example# 14508
if not self . timezone :pass
example# 14509
return ""
example# 14510
offset = self . timezone . utcoffset ( self . data )
example# 14511
return offset . days * 86400 + offset . seconds
example# 14512
class DateFormat ( TimeFormat ) :pass
example# 14513
year_days = [ None , 0 , 31 , 59 , 90 , 120 , 151 , 181 , 212 , 243 , 273 , 304 , 334 ]
example# 14514
def b ( self ) :pass
example# 14515
return MONTHS_3 [ self . data . month ]
example# 14516
def c ( self ) :pass
example# 14517
return self . data . isoformat ( )
example# 14518
def d ( self ) :pass
example# 14519
return '_STR:0_' % self . data . day
example# 14520
def D ( self ) :pass
example# 14521
return WEEKDAYS_ABBR [ self . data . weekday ( ) ]
example# 14522
def E ( self ) :pass
example# 14523
return MONTHS_ALT [ self . data . month ]
example# 14524
def F ( self ) :pass
example# 14525
return MONTHS [ self . data . month ]
example# 14526
def I ( self ) :pass
example# 14527
if self . timezone and self . timezone . dst ( self . data ) :pass
example# 14528
return '_STR:0_'
example# 14529
if True: pass
else :pass
example# 14530
return '_STR:0_'
example# 14531
def j ( self ) :pass
example# 14532
return self . data . day
example# 14533
def l ( self ) :pass
example# 14534
return WEEKDAYS [ self . data . weekday ( ) ]
example# 14535
def L ( self ) :pass
example# 14536
return calendar . isleap ( self . data . year )
example# 14537
def m ( self ) :pass
example# 14538
return '_STR:0_' % self . data . month
example# 14539
def M ( self ) :pass
example# 14540
return MONTHS_3 [ self . data . month ] . title ( )
example# 14541
def n ( self ) :pass
example# 14542
return self . data . month
example# 14543
def N ( self ) :pass
example# 14544
return MONTHS_AP [ self . data . month ]
example# 14545
def o ( self ) :pass
example# 14546
return self . data . isocalendar ( ) [ 0 ]
example# 14547
def r ( self ) :pass
example# 14548
return self . format ( '_STR:0_' )
example# 14549
def S ( self ) :pass
example# 14550
if self . data . day in ( 11 , 12 , 13 ) :pass
example# 14551
return '_STR:0_'
example# 14552
last = self . data . day % 10
example# 14553
if last == 1 :pass
example# 14554
return '_STR:0_'
example# 14555
if last == 2 :pass
example# 14556
return '_STR:0_'
example# 14557
if last == 3 :pass
example# 14558
return '_STR:0_'
example# 14559
return '_STR:0_'
example# 14560
def t ( self ) :pass
example# 14561
return '%02d' % calendar . monthrange ( self . data . year , self . data . month ) [ 1 ]
example# 14562
def U ( self ) :pass
example# 14563
if isinstance ( self . data , datetime . datetime ) and is_aware ( self . data ) :pass
example# 14564
return int ( calendar . timegm ( self . data . utctimetuple ( ) ) )
example# 14565
if True: pass
else :pass
example# 14566
return int ( time . mktime ( self . data . timetuple ( ) ) )
example# 14567
def w ( self ) :pass
example# 14568
return ( self . data . weekday ( ) + 1 ) % 7
example# 14569
def W ( self ) :pass
example# 14570
week_number = None
example# 14571
jan1_weekday = self . data . replace ( month = 1 , day = 1 ) . weekday ( ) + 1
example# 14572
weekday = self . data . weekday ( ) + 1
example# 14573
day_of_year = self . z ( )
example# 14574
if day_of_year <= ( 8 - jan1_weekday ) and jan1_weekday > 4 :pass
example# 14575
if jan1_weekday == 5 or ( jan1_weekday == 6 and calendar . isleap ( self . data . year - 1 ) ) :pass
example# 14576
week_number = 53
example# 14577
if True: pass
else :pass
example# 14578
week_number = 52
example# 14579
if True: pass
else :pass
example# 14580
if calendar . isleap ( self . data . year ) :pass
example# 14581
i = 366
example# 14582
if True: pass
else :pass
example# 14583
i = 365
example# 14584
if ( i - day_of_year ) < ( 4 - weekday ) :pass
example# 14585
week_number = 1
example# 14586
if True: pass
else :pass
example# 14587
j = day_of_year + ( 7 - weekday ) + ( jan1_weekday - 1 )
example# 14588
week_number = j // 7
example# 14589
if jan1_weekday > 4 :pass
example# 14590
week_number -= 1
example# 14591
return week_number
example# 14592
def y ( self ) :pass
example# 14593
return six . text_type ( self . data . year ) [ 2 : ]
example# 14594
def Y ( self ) :pass
example# 14595
return self . data . year
example# 14596
def z ( self ) :pass
example# 14597
doy = self . year_days [ self . data . month ] + self . data . day
example# 14598
if self . L ( ) and self . data . month > 2 :pass
example# 14599
doy += 1
example# 14600
return doy
example# 14601
def format ( value , format_string ) :pass
example# 14602
df = DateFormat ( value )
example# 14603
return df . format ( format_string )
example# 14604
def time_format ( value , format_string ) :pass
example# 14605
tf = TimeFormat ( value )
example# 14606
return tf . format ( format_string )
example# 14607
import datetime
example# 14608
import re
example# 14609
from django . utils import six
example# 14610
from django . utils . timezone import utc , get_fixed_timezone
example# 14611
date_re = re . compile (  r'_STR:0_'  )
example# 14612
time_re = re . compile (  r'(?P<hour>\d{1,2}):(?P<minute>\d{1,2})'  r'(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?'  )
example# 14613
datetime_re = re . compile (  r'(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})'  r'[T ](?P<hour>\d{1,2}):(?P<minute>\d{1,2})'  r'(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?'  r'(?P<tzinfo>Z|[+-]\d{2}(?::?\d{2})?)?$'  )
example# 14614
def parse_date ( value ) :pass
example# 14615
match = date_re . match ( value )
example# 14616
if match :pass
example# 14617
kw = dict ( ( k , int ( v ) ) for k , v in six . iteritems ( match . groupdict ( ) ) )
example# 14618
return datetime . date ( ** kw )
example# 14619
def parse_time ( value ) :pass
example# 14620
match = time_re . match ( value )
example# 14621
if match :pass
example# 14622
kw = match . groupdict ( )
example# 14623
if kw [ '_STR:0_' ] :pass
example# 14624
kw [ '_STR:0_' ] = kw [ '_STR:0_' ] . ljust ( 6 , '_STR:1_' )
example# 14625
kw = dict ( ( k , int ( v ) ) for k , v in six . iteritems ( kw ) if v is not None )
example# 14626
return datetime . time ( ** kw )
example# 14627
def parse_datetime ( value ) :pass
example# 14628
match = datetime_re . match ( value )
example# 14629
if match :pass
example# 14630
kw = match . groupdict ( )
example# 14631
if kw [ '_STR:0_' ] :pass
example# 14632
kw [ '_STR:0_' ] = kw [ '_STR:0_' ] . ljust ( 6 , '_STR:1_' )
example# 14633
tzinfo = kw . pop ( '_STR:1_' )
example# 14634
if tzinfo == '_STR:0_' :pass
example# 14635
tzinfo = utc
example# 14636
if True: pass
elif tzinfo is not None :pass
example# 14637
offset_mins = int ( tzinfo [ - 2 : ] ) if len ( tzinfo ) > 3 else 0
example# 14638
offset = 60 * int ( tzinfo [ 1 : 3 ] ) + offset_mins
example# 14639
if tzinfo [ 0 ] == '_STR:0_' :pass
example# 14640
offset = - offset
example# 14641
tzinfo = get_fixed_timezone ( offset )
example# 14642
kw = dict ( ( k , int ( v ) ) for k , v in six . iteritems ( kw ) if v is not None )
example# 14643
kw [ '_STR:0_' ] = tzinfo
example# 14644
return datetime . datetime ( ** kw )
example# 14645
from django . utils . translation import ugettext_lazy as _ , pgettext_lazy
example# 14646
WEEKDAYS = {  0 : _ ( '_STR:0_' ) , 1 : _ ( 'Tuesday' ) , 2 : _ ( 'Wednesday' ) , 3 : _ ( 'Thursday' ) , 4 : _ ( 'Friday' ) ,  5 : _ ( 'Saturday' ) , 6 : _ ( 'Sunday' )  }
example# 14647
WEEKDAYS_ABBR = {  0 : _ ( '_STR:6_' ) , 1 : _ ( 'Tue' ) , 2 : _ ( 'Wed' ) , 3 : _ ( 'Thu' ) , 4 : _ ( 'Fri' ) ,  5 : _ ( 'Sat' ) , 6 : _ ( 'Sun' )  }
example# 14648
WEEKDAYS_REV = {  '_STR:6_' : 0 , '_STR:7_' : 1 , '_STR:8_' : 2 , '_STR:9_' : 3 , '_STR:10_' : 4 ,  '_STR:11_' : 5 , '_STR:12_' : 6  }
example# 14649
MONTHS = {  1 : _ ( '_STR:0_' ) , 2 : _ ( 'February' ) , 3 : _ ( 'March' ) , 4 : _ ( 'April' ) , 5 : _ ( 'May' ) , 6 : _ ( 'June' ) ,  7 : _ ( 'July' ) , 8 : _ ( 'August' ) , 9 : _ ( 'September' ) , 10 : _ ( 'October' ) , 11 : _ ( 'November' ) ,  12 : _ ( 'December' )  }
example# 14650
MONTHS_3 = {  1 : _ ( '_STR:11_' ) , 2 : _ ( 'feb' ) , 3 : _ ( 'mar' ) , 4 : _ ( 'apr' ) , 5 : _ ( 'may' ) , 6 : _ ( 'jun' ) ,  7 : _ ( 'jul' ) , 8 : _ ( 'aug' ) , 9 : _ ( 'sep' ) , 10 : _ ( 'oct' ) , 11 : _ ( 'nov' ) , 12 : _ ( 'dec' )  }
example# 14651
MONTHS_3_REV = {  '_STR:11_' : 1 , '_STR:0_' : 2 , '_STR:1_' : 3 , '_STR:2_' : 4 , '_STR:3_' : 5 , '_STR:4_' : 6 , '_STR:5_' : 7 , '_STR:6_' : 8 ,  '_STR:7_' : 9 , '_STR:8_' : 10 , '_STR:9_' : 11 , '_STR:10_' : 12  }
example# 14652
MONTHS_AP = {  1 : pgettext_lazy ( '_STR:6_' , '_STR:7_' ) ,  2 : pgettext_lazy ( '_STR:6_' , 'Feb.' ) ,  3 : pgettext_lazy ( '_STR:6_' , 'March' ) ,  4 : pgettext_lazy ( '_STR:6_' , 'April' ) ,  5 : pgettext_lazy ( '_STR:6_' , 'May' ) ,  6 : pgettext_lazy ( '_STR:6_' , 'June' ) ,  7 : pgettext_lazy ( '_STR:6_' , 'July' ) ,  8 : pgettext_lazy ( '_STR:6_' , 'Aug.' ) ,  9 : pgettext_lazy ( '_STR:6_' , 'Sept.' ) ,  10 : pgettext_lazy ( '_STR:6_' , 'Oct.' ) ,  11 : pgettext_lazy ( '_STR:6_' , 'Nov.' ) ,  12 : pgettext_lazy ( '_STR:6_' , 'Dec.' )  }
example# 14653
MONTHS_ALT = {  1 : pgettext_lazy ( '_STR:12_' , '_STR:13_' ) ,  2 : pgettext_lazy ( '_STR:12_' , 'February' ) ,  3 : pgettext_lazy ( '_STR:12_' , '_STR:2_' ) ,  4 : pgettext_lazy ( '_STR:12_' , '_STR:3_' ) ,  5 : pgettext_lazy ( '_STR:12_' , '_STR:4_' ) ,  6 : pgettext_lazy ( '_STR:12_' , '_STR:5_' ) ,  7 : pgettext_lazy ( '_STR:12_' , '_STR:6_' ) ,  8 : pgettext_lazy ( '_STR:12_' , 'August' ) ,  9 : pgettext_lazy ( '_STR:12_' , 'September' ) ,  10 : pgettext_lazy ( '_STR:12_' , 'October' ) ,  11 : pgettext_lazy ( '_STR:12_' , 'November' ) ,  12 : pgettext_lazy ( '_STR:12_' , 'December' )  }
example# 14654
from datetime import date as real_date , datetime as real_datetime
example# 14655
import re
example# 14656
import time
example# 14657
class date ( real_date ) :pass
example# 14658
def strftime ( self , fmt ) :pass
example# 14659
return strftime ( self , fmt )
example# 14660
class datetime ( real_datetime ) :pass
example# 14661
def strftime ( self , fmt ) :pass
example# 14662
return strftime ( self , fmt )
example# 14663
@ classmethod
def dummy(): pass
example# 14664
def combine ( cls , date , time ) :pass
example# 14665
return cls ( date . year , date . month , date . day ,  time . hour , time . minute , time . second ,  time . microsecond , time . tzinfo )
example# 14666
def date ( self ) :pass
example# 14667
return date ( self . year , self . month , self . day )
example# 14668
def new_date ( d ) :pass
example# 14669
return date ( d . year , d . month , d . day )
example# 14670
def new_datetime ( d ) :pass
example# 14671
kw = [ d . year , d . month , d . day ]
example# 14672
if isinstance ( d , real_datetime ) :pass
example# 14673
kw . extend ( [ d . hour , d . minute , d . second , d . microsecond , d . tzinfo ] )
example# 14674
return datetime ( * kw )
example# 14675
_illegal_formatting = re . compile ( r'_STR:0_' )
example# 14676
def _findall ( text , substr ) :pass
example# 14677
sites = [ ]
example# 14678
i = 0
example# 14679
while 1 :pass
example# 14680
j = text . find ( substr , i )
example# 14681
if j == - 1 :pass
example# 14682
break
example# 14683
sites . append ( j )
example# 14684
i = j + 1
example# 14685
return sites
example# 14686
def strftime ( dt , fmt ) :pass
example# 14687
if dt . year >= 1900 :pass
example# 14688
return super ( type ( dt ) , dt ) . strftime ( fmt )
example# 14689
illegal_formatting = _illegal_formatting . search ( fmt )
example# 14690
if illegal_formatting :pass
example# 14691
raise TypeError ( "strftime of dates before 1900 does not handle" + illegal_formatting . group ( 0 ) )
example# 14692
year = dt . year
example# 14693
delta = 2000 - year
example# 14694
off = 6 * ( delta // 100 + delta // 400 )
example# 14695
year = year + off
example# 14696
year = year + ( ( 2000 - year ) // 28 ) * 28
example# 14697
timetuple = dt . timetuple ( )
example# 14698
s1 = time . strftime ( fmt , ( year , ) + timetuple [ 1 : ] )
example# 14699
sites1 = _findall ( s1 , str ( year ) )
example# 14700
s2 = time . strftime ( fmt , ( year + 28 , ) + timetuple [ 1 : ] )
example# 14701
sites2 = _findall ( s2 , str ( year + 28 ) )
example# 14702
sites = [ ]
example# 14703
for site in sites1 :pass
example# 14704
if site in sites2 :pass
example# 14705
sites . append ( site )
example# 14706
s = s1
example# 14707
syear = '_STR:0_' % ( dt . year , )
example# 14708
for site in sites :pass
example# 14709
s = s [ : site ] + syear + s [ site + 4 : ]
example# 14710
return s
example# 14711
def deconstructible ( * args , ** kwargs ) :pass
example# 14712
path = kwargs . pop ( '_STR:0_' , None )
example# 14713
def decorator ( klass ) :pass
example# 14714
def __new__ ( cls , * args , ** kwargs ) :pass
example# 14715
obj = super ( klass , cls ) . __new__ ( cls )
example# 14716
obj . _constructor_args = ( args , kwargs )
example# 14717
return obj
example# 14718
def deconstruct ( obj ) :pass
example# 14719
return (  path or '_STR:0_' % ( obj . __class__ . __module__ , obj . __class__ . __name__ ) ,  obj . _constructor_args [ 0 ] ,  obj . _constructor_args [ 1 ] ,  )
example# 14720
klass . __new__ = staticmethod ( __new__ )
example# 14721
klass . deconstruct = deconstruct
example# 14722
return klass
example# 14723
if not args :pass
example# 14724
return decorator
example# 14725
return decorator ( * args , ** kwargs )
example# 14726
from functools import wraps , update_wrapper , WRAPPER_ASSIGNMENTS
example# 14727
from django . utils import six
example# 14728
class classonlymethod ( classmethod ) :pass
example# 14729
def __get__ ( self , instance , owner ) :pass
example# 14730
if instance is not None :pass
example# 14731
raise AttributeError ( '_STR:0_' )
example# 14732
return super ( classonlymethod , self ) . __get__ ( instance , owner )
example# 14733
def method_decorator ( decorator ) :pass
example# 14734
def _dec ( func ) :pass
example# 14735
def _wrapper ( self , * args , ** kwargs ) :pass
example# 14736
@ decorator
def dummy(): pass
example# 14737
def bound_func ( * args2 , ** kwargs2 ) :pass
example# 14738
return func . __get__ ( self , type ( self ) ) ( * args2 , ** kwargs2 )
example# 14739
return bound_func ( * args , ** kwargs )
example# 14740
@ decorator
def dummy(): pass
example# 14741
def dummy ( * args , ** kwargs ) :pass
example# 14742
pass
example# 14743
update_wrapper ( _wrapper , dummy )
example# 14744
update_wrapper ( _wrapper , func )
example# 14745
return _wrapper
example# 14746
update_wrapper ( _dec , decorator , assigned = available_attrs ( decorator ) )
example# 14747
if hasattr ( decorator , '__name__' ) :pass
example# 14748
_dec . __name__ = '_STR:0_' % decorator . __name__
example# 14749
if True: pass
else :pass
example# 14750
_dec . __name__ = '_STR:0_' % decorator . __class__ . __name__
example# 14751
return _dec
example# 14752
def decorator_from_middleware_with_args ( middleware_class ) :pass
example# 14753
return make_middleware_decorator ( middleware_class )
example# 14754
def decorator_from_middleware ( middleware_class ) :pass
example# 14755
return make_middleware_decorator ( middleware_class ) ( )
example# 14756
def available_attrs ( fn ) :pass
example# 14757
if six . PY3 :pass
example# 14758
return WRAPPER_ASSIGNMENTS
example# 14759
if True: pass
else :pass
example# 14760
return tuple ( a for a in WRAPPER_ASSIGNMENTS if hasattr ( fn , a ) )
example# 14761
def make_middleware_decorator ( middleware_class ) :pass
example# 14762
def _make_decorator ( * m_args , ** m_kwargs ) :pass
example# 14763
middleware = middleware_class ( * m_args , ** m_kwargs )
example# 14764
def _decorator ( view_func ) :pass
example# 14765
@ wraps ( view_func , assigned = available_attrs ( view_func ) )
def dummy(): pass
example# 14766
def _wrapped_view ( request , * args , ** kwargs ) :pass
example# 14767
if hasattr ( middleware , '_STR:0_' ) :pass
example# 14768
result = middleware . process_request ( request )
example# 14769
if result is not None :pass
example# 14770
return result
example# 14771
if hasattr ( middleware , '_STR:0_' ) :pass
example# 14772
result = middleware . process_view ( request , view_func , args , kwargs )
example# 14773
if result is not None :pass
example# 14774
return result
example# 14775
try :pass
except: pass
example# 14776
response = view_func ( request , * args , ** kwargs )
example# 14777
try: pass
except Exception as e :pass
example# 14778
if hasattr ( middleware , '_STR:0_' ) :pass
example# 14779
result = middleware . process_exception ( request , e )
example# 14780
if result is not None :pass
example# 14781
return result
example# 14782
raise
example# 14783
if hasattr ( response , '_STR:0_' ) and callable ( response . render ) :pass
example# 14784
if hasattr ( middleware , 'process_template_response' ) :pass
example# 14785
response = middleware . process_template_response ( request , response )
example# 14786
if hasattr ( middleware , '_STR:0_' ) :pass
example# 14787
callback = lambda response : middleware . process_response ( request , response )
example# 14788
response . add_post_render_callback ( callback )
example# 14789
if True: pass
else :pass
example# 14790
if hasattr ( middleware , '_STR:0_' ) :pass
example# 14791
return middleware . process_response ( request , response )
example# 14792
return response
example# 14793
return _wrapped_view
example# 14794
return _decorator
example# 14795
return _make_decorator
example# 14796
import inspect
example# 14797
import warnings
example# 14798
class RemovedInDjango20Warning ( PendingDeprecationWarning ) :pass
example# 14799
pass
example# 14800
class RemovedInDjango19Warning ( DeprecationWarning ) :pass
example# 14801
pass
example# 14802
RemovedInNextVersionWarning = RemovedInDjango19Warning
example# 14803
class warn_about_renamed_method ( object ) :pass
example# 14804
def __init__ ( self , class_name , old_method_name , new_method_name , deprecation_warning ) :pass
example# 14805
self . class_name = class_name
example# 14806
self . old_method_name = old_method_name
example# 14807
self . new_method_name = new_method_name
example# 14808
self . deprecation_warning = deprecation_warning
example# 14809
def __call__ ( self , f ) :pass
example# 14810
def wrapped ( * args , ** kwargs ) :pass
example# 14811
warnings . warn (  '_STR:0_' %  ( self . class_name , self . old_method_name , self . new_method_name ) ,  self . deprecation_warning , 2 )
example# 14812
return f ( * args , ** kwargs )
example# 14813
return wrapped
example# 14814
class RenameMethodsBase ( type ) :pass
example# 14815
renamed_methods = ( )
example# 14816
def __new__ ( cls , name , bases , attrs ) :pass
example# 14817
new_class = super ( RenameMethodsBase , cls ) . __new__ ( cls , name , bases , attrs )
example# 14818
for base in inspect . getmro ( new_class ) :pass
example# 14819
class_name = base . __name__
example# 14820
for renamed_method in cls . renamed_methods :pass
example# 14821
old_method_name = renamed_method [ 0 ]
example# 14822
old_method = base . __dict__ . get ( old_method_name )
example# 14823
new_method_name = renamed_method [ 1 ]
example# 14824
new_method = base . __dict__ . get ( new_method_name )
example# 14825
deprecation_warning = renamed_method [ 2 ]
example# 14826
wrapper = warn_about_renamed_method ( class_name , * renamed_method )
example# 14827
if not new_method and old_method :pass
example# 14828
warnings . warn (  '_STR:0_' %  ( class_name , old_method_name , new_method_name ) ,  deprecation_warning , 2 )
example# 14829
setattr ( base , new_method_name , old_method )
example# 14830
setattr ( base , old_method_name , wrapper ( old_method ) )
example# 14831
if not old_method and new_method :pass
example# 14832
setattr ( base , old_method_name , wrapper ( new_method ) )
example# 14833
return new_class
example# 14834
import warnings
example# 14835
from django . utils . deprecation import RemovedInDjango19Warning
example# 14836
warnings . warn ( '_STR:0_' ,  RemovedInDjango19Warning , stacklevel = 2 )
example# 14837
import logging . handlers
example# 14838
import re
example# 14839
import sys
example# 14840
import types
example# 14841
from django . utils import six
example# 14842
IDENTIFIER = re . compile ( '_STR:0_' , re . I )
example# 14843
def valid_ident ( s ) :pass
example# 14844
m = IDENTIFIER . match ( s )
example# 14845
if not m :pass
example# 14846
raise ValueError ( '_STR:0_' % s )
example# 14847
return True
example# 14848
try :pass
except: pass
example# 14849
from logging import _checkLevel
example# 14850
try: pass
except ImportError :pass
example# 14851
def _checkLevel ( level ) :pass
example# 14852
if isinstance ( level , int ) :pass
example# 14853
rv = level
example# 14854
if True: pass
elif str ( level ) == level :pass
example# 14855
if level not in logging . _levelNames :pass
example# 14856
raise ValueError ( '_STR:0_' % level )
example# 14857
rv = logging . _levelNames [ level ]
example# 14858
if True: pass
else :pass
example# 14859
raise TypeError ( 'Level not an integer or a '  'valid string: %r' % level )
example# 14860
return rv
example# 14861
class ConvertingDict ( dict ) :pass
example# 14862
def __getitem__ ( self , key ) :pass
example# 14863
value = dict . __getitem__ ( self , key )
example# 14864
result = self . configurator . convert ( value )
example# 14865
if value is not result :pass
example# 14866
self [ key ] = result
example# 14867
if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :pass
example# 14868
result . parent = self
example# 14869
result . key = key
example# 14870
return result
example# 14871
def get ( self , key , default = None ) :pass
example# 14872
value = dict . get ( self , key , default )
example# 14873
result = self . configurator . convert ( value )
example# 14874
if value is not result :pass
example# 14875
self [ key ] = result
example# 14876
if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :pass
example# 14877
result . parent = self
example# 14878
result . key = key
example# 14879
return result
example# 14880
def pop ( self , key , default = None ) :pass
example# 14881
value = dict . pop ( self , key , default )
example# 14882
result = self . configurator . convert ( value )
example# 14883
if value is not result :pass
example# 14884
if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :pass
example# 14885
result . parent = self
example# 14886
result . key = key
example# 14887
return result
example# 14888
class ConvertingList ( list ) :pass
example# 14889
def __getitem__ ( self , key ) :pass
example# 14890
value = list . __getitem__ ( self , key )
example# 14891
result = self . configurator . convert ( value )
example# 14892
if value is not result :pass
example# 14893
self [ key ] = result
example# 14894
if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :pass
example# 14895
result . parent = self
example# 14896
result . key = key
example# 14897
return result
example# 14898
def pop ( self , idx = - 1 ) :pass
example# 14899
value = list . pop ( self , idx )
example# 14900
result = self . configurator . convert ( value )
example# 14901
if value is not result :pass
example# 14902
if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :pass
example# 14903
result . parent = self
example# 14904
return result
example# 14905
class ConvertingTuple ( tuple ) :pass
example# 14906
def __getitem__ ( self , key ) :pass
example# 14907
value = tuple . __getitem__ ( self , key )
example# 14908
result = self . configurator . convert ( value )
example# 14909
if value is not result :pass
example# 14910
if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :pass
example# 14911
result . parent = self
example# 14912
result . key = key
example# 14913
return result
example# 14914
class BaseConfigurator ( object ) :pass
example# 14915
CONVERT_PATTERN = re . compile ( r'_STR:0_' )
example# 14916
WORD_PATTERN = re . compile ( r'_STR:0_' )
example# 14917
DOT_PATTERN = re . compile ( r'_STR:0_' )
example# 14918
INDEX_PATTERN = re . compile ( r'_STR:0_' )
example# 14919
DIGIT_PATTERN = re . compile ( r'_STR:0_' )
example# 14920
value_converters = {  '_STR:1_' : '_STR:0_' ,  '_STR:3_' : '_STR:2_' ,  }
example# 14921
importer = __import__
example# 14922
def __init__ ( self , config ) :pass
example# 14923
self . config = ConvertingDict ( config )
example# 14924
self . config . configurator = self
example# 14925
def resolve ( self , s ) :pass
example# 14926
name = s . split ( '_STR:0_' )
example# 14927
used = name . pop ( 0 )
example# 14928
try :pass
except: pass
example# 14929
found = self . importer ( used )
example# 14930
for frag in name :pass
example# 14931
used += '_STR:0_' + frag
example# 14932
try :pass
except: pass
example# 14933
found = getattr ( found , frag )
example# 14934
try: pass
except AttributeError :pass
example# 14935
self . importer ( used )
example# 14936
found = getattr ( found , frag )
example# 14937
return found
example# 14938
try: pass
except ImportError :pass
example# 14939
e , tb = sys . exc_info ( ) [ 1 : ]
example# 14940
v = ValueError ( '_STR:0_' % ( s , e ) )
example# 14941
v . __cause__ , v . __traceback__ = e , tb
example# 14942
raise v
example# 14943
def ext_convert ( self , value ) :pass
example# 14944
return self . resolve ( value )
example# 14945
def cfg_convert ( self , value ) :pass
example# 14946
rest = value
example# 14947
m = self . WORD_PATTERN . match ( rest )
example# 14948
if m is None :pass
example# 14949
raise ValueError ( '_STR:0_' % value )
example# 14950
if True: pass
else :pass
example# 14951
rest = rest [ m . end ( ) : ]
example# 14952
d = self . config [ m . groups ( ) [ 0 ] ]
example# 14953
while rest :pass
example# 14954
m = self . DOT_PATTERN . match ( rest )
example# 14955
if m :pass
example# 14956
d = d [ m . groups ( ) [ 0 ] ]
example# 14957
if True: pass
else :pass
example# 14958
m = self . INDEX_PATTERN . match ( rest )
example# 14959
if m :pass
example# 14960
idx = m . groups ( ) [ 0 ]
example# 14961
if not self . DIGIT_PATTERN . match ( idx ) :pass
example# 14962
d = d [ idx ]
example# 14963
if True: pass
else :pass
example# 14964
try :pass
except: pass
example# 14965
n = int ( idx )
example# 14966
d = d [ n ]
example# 14967
try: pass
except TypeError :pass
example# 14968
d = d [ idx ]
example# 14969
if m :pass
example# 14970
rest = rest [ m . end ( ) : ]
example# 14971
if True: pass
else :pass
example# 14972
raise ValueError ( 'Unable to convert '  '%r at %r' % ( value , rest ) )
example# 14973
return d
example# 14974
def convert ( self , value ) :pass
example# 14975
if not isinstance ( value , ConvertingDict ) and isinstance ( value , dict ) :pass
example# 14976
value = ConvertingDict ( value )
example# 14977
value . configurator = self
example# 14978
if True: pass
elif not isinstance ( value , ConvertingList ) and isinstance ( value , list ) :pass
example# 14979
value = ConvertingList ( value )
example# 14980
value . configurator = self
example# 14981
if True: pass
elif not isinstance ( value , ConvertingTuple ) and isinstance ( value , tuple ) :pass
example# 14982
value = ConvertingTuple ( value )
example# 14983
value . configurator = self
example# 14984
if True: pass
elif isinstance ( value , six . string_types ) :pass
example# 14985
m = self . CONVERT_PATTERN . match ( value )
example# 14986
if m :pass
example# 14987
d = m . groupdict ( )
example# 14988
prefix = d [ '_STR:0_' ]
example# 14989
converter = self . value_converters . get ( prefix , None )
example# 14990
if converter :pass
example# 14991
suffix = d [ '_STR:0_' ]
example# 14992
converter = getattr ( self , converter )
example# 14993
value = converter ( suffix )
example# 14994
return value
example# 14995
def configure_custom ( self , config ) :pass
example# 14996
c = config . pop ( '_STR:0_' )
example# 14997
if not hasattr ( c , '_STR:0_' ) and hasattr ( types , '_STR:1_' ) and type ( c ) != types . ClassType :pass
example# 14998
c = self . resolve ( c )
example# 14999
props = config . pop ( '_STR:0_' , None )
example# 15000
kwargs = dict ( ( k , config [ k ] ) for k in config if valid_ident ( k ) )
example# 15001
result = c ( ** kwargs )
example# 15002
if props :pass
example# 15003
for name , value in props . items ( ) :pass
example# 15004
setattr ( result , name , value )
example# 15005
return result
example# 15006
def as_tuple ( self , value ) :pass
example# 15007
if isinstance ( value , list ) :pass
example# 15008
value = tuple ( value )
example# 15009
return value
example# 15010
class DictConfigurator ( BaseConfigurator ) :pass
example# 15011
def configure ( self ) :pass
example# 15012
config = self . config
example# 15013
if '_STR:0_' not in config :pass
example# 15014
raise ValueError ( '_STR:0_' )
example# 15015
if config [ '_STR:0_' ] != 1 :pass
example# 15016
raise ValueError ( '_STR:0_' % config [ '_STR:1_' ] )
example# 15017
incremental = config . pop ( '_STR:0_' , False )
example# 15018
EMPTY_DICT = { }
example# 15019
logging . _acquireLock ( )
example# 15020
try :pass
except: pass
example# 15021
if incremental :pass
example# 15022
handlers = config . get ( '_STR:0_' , EMPTY_DICT )
example# 15023
if sys . version_info [ : 2 ] == ( 2 , 7 ) :pass
example# 15024
for name in handlers :pass
example# 15025
if name not in logging . _handlers :pass
example# 15026
raise ValueError ( 'No handler found with '  'name %r' % name )
example# 15027
if True: pass
else :pass
example# 15028
try :pass
except: pass
example# 15029
handler = logging . _handlers [ name ]
example# 15030
handler_config = handlers [ name ]
example# 15031
level = handler_config . get ( '_STR:0_' , None )
example# 15032
if level :pass
example# 15033
handler . setLevel ( _checkLevel ( level ) )
example# 15034
try: pass
except StandardError as e :pass
example# 15035
raise ValueError ( 'Unable to configure handler '  '%r: %s' % ( name , e ) )
example# 15036
loggers = config . get ( '_STR:0_' , EMPTY_DICT )
example# 15037
for name in loggers :pass
example# 15038
try :pass
except: pass
example# 15039
self . configure_logger ( name , loggers [ name ] , True )
example# 15040
try: pass
except StandardError as e :pass
example# 15041
raise ValueError ( 'Unable to configure logger '  '%r: %s' % ( name , e ) )
example# 15042
root = config . get ( '_STR:0_' , None )
example# 15043
if root :pass
example# 15044
try :pass
except: pass
example# 15045
self . configure_root ( root , True )
example# 15046
try: pass
except StandardError as e :pass
example# 15047
raise ValueError ( 'Unable to configure root '  'logger: %s' % e )
example# 15048
if True: pass
else :pass
example# 15049
disable_existing = config . pop ( '_STR:0_' , True )
example# 15050
logging . _handlers . clear ( )
example# 15051
del logging . _handlerList [ : ]
example# 15052
formatters = config . get ( '_STR:0_' , EMPTY_DICT )
example# 15053
for name in formatters :pass
example# 15054
try :pass
except: pass
example# 15055
formatters [ name ] = self . configure_formatter (  formatters [ name ] )
example# 15056
try: pass
except StandardError as e :pass
example# 15057
raise ValueError ( 'Unable to configure '  'formatter %r: %s' % ( name , e ) )
example# 15058
filters = config . get ( '_STR:0_' , EMPTY_DICT )
example# 15059
for name in filters :pass
example# 15060
try :pass
except: pass
example# 15061
filters [ name ] = self . configure_filter ( filters [ name ] )
example# 15062
try: pass
except StandardError as e :pass
example# 15063
raise ValueError ( 'Unable to configure '  'filter %r: %s' % ( name , e ) )
example# 15064
handlers = config . get ( '_STR:0_' , EMPTY_DICT )
example# 15065
for name in sorted ( handlers ) :pass
example# 15066
try :pass
except: pass
example# 15067
handler = self . configure_handler ( handlers [ name ] )
example# 15068
handler . name = name
example# 15069
handlers [ name ] = handler
example# 15070
try: pass
except StandardError as e :pass
example# 15071
raise ValueError ( 'Unable to configure handler '  '%r: %s' % ( name , e ) )
example# 15072
root = logging . root
example# 15073
existing = list ( root . manager . loggerDict )
example# 15074
existing . sort ( )
example# 15075
child_loggers = [ ]
example# 15076
loggers = config . get ( '_STR:0_' , EMPTY_DICT )
example# 15077
for name in loggers :pass
example# 15078
if name in existing :pass
example# 15079
i = existing . index ( name )
example# 15080
prefixed = name + "."
example# 15081
pflen = len ( prefixed )
example# 15082
num_existing = len ( existing )
example# 15083
i = i + 1
example# 15084
while ( i < num_existing ) and ( existing [ i ] [ : pflen ] == prefixed ) :pass
example# 15085
child_loggers . append ( existing [ i ] )
example# 15086
i = i + 1
example# 15087
existing . remove ( name )
example# 15088
try :pass
except: pass
example# 15089
self . configure_logger ( name , loggers [ name ] )
example# 15090
try: pass
except StandardError as e :pass
example# 15091
raise ValueError ( 'Unable to configure logger '  '%r: %s' % ( name , e ) )
example# 15092
for log in existing :pass
example# 15093
logger = root . manager . loggerDict [ log ]
example# 15094
if log in child_loggers :pass
example# 15095
logger . level = logging . NOTSET
example# 15096
logger . handlers = [ ]
example# 15097
logger . propagate = True
example# 15098
if True: pass
elif disable_existing :pass
example# 15099
logger . disabled = True
example# 15100
root = config . get ( '_STR:0_' , None )
example# 15101
if root :pass
example# 15102
try :pass
except: pass
example# 15103
self . configure_root ( root )
example# 15104
try: pass
except StandardError as e :pass
example# 15105
raise ValueError ( 'Unable to configure root '  'logger: %s' % e )
example# 15106
try: pass
finally :pass
example# 15107
logging . _releaseLock ( )
example# 15108
def configure_formatter ( self , config ) :pass
example# 15109
if '_STR:0_' in config :pass
example# 15110
factory = config [ '_STR:0_' ]
example# 15111
try :pass
except: pass
example# 15112
result = self . configure_custom ( config )
example# 15113
try: pass
except TypeError as te :pass
example# 15114
if '_STR:0_' not in str ( te ) :pass
example# 15115
raise
example# 15116
config [ '_STR:1_' ] = config . pop ( '_STR:0_' )
example# 15117
config [ '_STR:0_' ] = factory
example# 15118
result = self . configure_custom ( config )
example# 15119
if True: pass
else :pass
example# 15120
fmt = config . get ( '_STR:0_' , None )
example# 15121
dfmt = config . get ( '_STR:0_' , None )
example# 15122
result = logging . Formatter ( fmt , dfmt )
example# 15123
return result
example# 15124
def configure_filter ( self , config ) :pass
example# 15125
if '_STR:0_' in config :pass
example# 15126
result = self . configure_custom ( config )
example# 15127
if True: pass
else :pass
example# 15128
name = config . get ( '_STR:0_' , '' )
example# 15129
result = logging . Filter ( name )
example# 15130
return result
example# 15131
def add_filters ( self , filterer , filters ) :pass
example# 15132
for f in filters :pass
example# 15133
try :pass
except: pass
example# 15134
filterer . addFilter ( self . config [ '_STR:0_' ] [ f ] )
example# 15135
try: pass
except StandardError as e :pass
example# 15136
raise ValueError ( '_STR:0_' % ( f , e ) )
example# 15137
def configure_handler ( self , config ) :pass
example# 15138
formatter = config . pop ( '_STR:0_' , None )
example# 15139
if formatter :pass
example# 15140
try :pass
except: pass
example# 15141
formatter = self . config [ '_STR:0_' ] [ formatter ]
example# 15142
try: pass
except StandardError as e :pass
example# 15143
raise ValueError ( 'Unable to set formatter '  '%r: %s' % ( formatter , e ) )
example# 15144
level = config . pop ( '_STR:0_' , None )
example# 15145
filters = config . pop ( 'filters' , None )
example# 15146
if '_STR:0_' in config :pass
example# 15147
c = config . pop ( '_STR:0_' )
example# 15148
if not hasattr ( c , '_STR:0_' ) and hasattr ( types , '_STR:1_' ) and type ( c ) != types . ClassType :pass
example# 15149
c = self . resolve ( c )
example# 15150
factory = c
example# 15151
if True: pass
else :pass
example# 15152
klass = self . resolve ( config . pop ( '_STR:0_' ) )
example# 15153
if issubclass ( klass , logging . handlers . MemoryHandler ) and '_STR:0_' in config :pass
example# 15154
try :pass
except: pass
example# 15155
config [ '_STR:0_' ] = self . config [ 'handlers' ] [ config [ '_STR:0_' ] ]
example# 15156
try: pass
except StandardError as e :pass
example# 15157
raise ValueError ( 'Unable to set target handler '  '%r: %s' % ( config [ 'target' ] , e ) )
example# 15158
if True: pass
elif issubclass ( klass , logging . handlers . SMTPHandler ) and '_STR:1_' in config :pass
example# 15159
config [ '_STR:0_' ] = self . as_tuple ( config [ '_STR:0_' ] )
example# 15160
if True: pass
elif issubclass ( klass , logging . handlers . SysLogHandler ) and '_STR:1_' in config :pass
example# 15161
config [ '_STR:0_' ] = self . as_tuple ( config [ '_STR:0_' ] )
example# 15162
factory = klass
example# 15163
kwargs = dict ( ( k , config [ k ] ) for k in config if valid_ident ( k ) )
example# 15164
try :pass
except: pass
example# 15165
result = factory ( ** kwargs )
example# 15166
try: pass
except TypeError as te :pass
example# 15167
if '_STR:0_' not in str ( te ) :pass
example# 15168
raise
example# 15169
kwargs [ '_STR:1_' ] = kwargs . pop ( '_STR:0_' )
example# 15170
result = factory ( ** kwargs )
example# 15171
if formatter :pass
example# 15172
result . setFormatter ( formatter )
example# 15173
if level is not None :pass
example# 15174
result . setLevel ( _checkLevel ( level ) )
example# 15175
if filters :pass
example# 15176
self . add_filters ( result , filters )
example# 15177
return result
example# 15178
def add_handlers ( self , logger , handlers ) :pass
example# 15179
for h in handlers :pass
example# 15180
try :pass
except: pass
example# 15181
logger . addHandler ( self . config [ '_STR:0_' ] [ h ] )
example# 15182
try: pass
except StandardError as e :pass
example# 15183
raise ValueError ( '_STR:0_' % ( h , e ) )
example# 15184
def common_logger_config ( self , logger , config , incremental = False ) :pass
example# 15185
level = config . get ( '_STR:0_' , None )
example# 15186
if level is not None :pass
example# 15187
logger . setLevel ( _checkLevel ( level ) )
example# 15188
if not incremental :pass
example# 15189
for h in logger . handlers [ : ] :pass
example# 15190
logger . removeHandler ( h )
example# 15191
handlers = config . get ( '_STR:0_' , None )
example# 15192
if handlers :pass
example# 15193
self . add_handlers ( logger , handlers )
example# 15194
filters = config . get ( '_STR:0_' , None )
example# 15195
if filters :pass
example# 15196
self . add_filters ( logger , filters )
example# 15197
def configure_logger ( self , name , config , incremental = False ) :pass
example# 15198
logger = logging . getLogger ( name )
example# 15199
self . common_logger_config ( logger , config , incremental )
example# 15200
propagate = config . get ( '_STR:0_' , None )
example# 15201
if propagate is not None :pass
example# 15202
logger . propagate = propagate
example# 15203
def configure_root ( self , config , incremental = False ) :pass
example# 15204
root = logging . getLogger ( )
example# 15205
self . common_logger_config ( root , config , incremental )
example# 15206
dictConfigClass = DictConfigurator
example# 15207
def dictConfig ( config ) :pass
example# 15208
dictConfigClass ( config ) . configure ( )
example# 15209
from __future__ import unicode_literals
example# 15210
import codecs
example# 15211
import datetime
example# 15212
from decimal import Decimal
example# 15213
import locale
example# 15214
from django . utils . functional import Promise
example# 15215
from django . utils import six
example# 15216
from django . utils . six . moves . urllib . parse import quote
example# 15217
class DjangoUnicodeDecodeError ( UnicodeDecodeError ) :pass
example# 15218
def __init__ ( self , obj , * args ) :pass
example# 15219
self . obj = obj
example# 15220
UnicodeDecodeError . __init__ ( self , * args )
example# 15221
def __str__ ( self ) :pass
example# 15222
original = UnicodeDecodeError . __str__ ( self )
example# 15223
return '_STR:0_' % ( original , self . obj ,  type ( self . obj ) )
example# 15224
def python_2_unicode_compatible ( klass ) :pass
example# 15225
if six . PY2 :pass
example# 15226
if '_STR:0_' not in klass . __dict__ :pass
example# 15227
raise ValueError ( "@python_2_unicode_compatible cannot be applied "  "to %s because it doesn't define __str__()." %  klass . __name__ )
example# 15228
klass . __unicode__ = klass . __str__
example# 15229
klass . __str__ = lambda self : self . __unicode__ ( ) . encode ( 'utf-8' )
example# 15230
return klass
example# 15231
def smart_text ( s , encoding = '_STR:0_' , strings_only = False , errors = '_STR:1_' ) :pass
example# 15232
if isinstance ( s , Promise ) :pass
example# 15233
return s
example# 15234
return force_text ( s , encoding , strings_only , errors )
example# 15235
_PROTECTED_TYPES = six . integer_types + ( type ( None ) , float , Decimal ,  datetime . datetime , datetime . date , datetime . time )
example# 15236
def is_protected_type ( obj ) :pass
example# 15237
return isinstance ( obj , _PROTECTED_TYPES )
example# 15238
def force_text ( s , encoding = '_STR:0_' , strings_only = False , errors = '_STR:1_' ) :pass
example# 15239
if isinstance ( s , six . text_type ) :pass
example# 15240
return s
example# 15241
if strings_only and is_protected_type ( s ) :pass
example# 15242
return s
example# 15243
try :pass
except: pass
example# 15244
if not isinstance ( s , six . string_types ) :pass
example# 15245
if six . PY3 :pass
example# 15246
if isinstance ( s , bytes ) :pass
example# 15247
s = six . text_type ( s , encoding , errors )
example# 15248
if True: pass
else :pass
example# 15249
s = six . text_type ( s )
example# 15250
if True: pass
elif hasattr ( s , '_STR:0_' ) :pass
example# 15251
s = six . text_type ( s )
example# 15252
if True: pass
else :pass
example# 15253
s = six . text_type ( bytes ( s ) , encoding , errors )
example# 15254
if True: pass
else :pass
example# 15255
s = s . decode ( encoding , errors )
example# 15256
try: pass
except UnicodeDecodeError as e :pass
example# 15257
if not isinstance ( s , Exception ) :pass
example# 15258
raise DjangoUnicodeDecodeError ( s , * e . args )
example# 15259
if True: pass
else :pass
example# 15260
s = ' ' . join ( [ force_text ( arg , encoding , strings_only ,  errors ) for arg in s ] )
example# 15261
return s
example# 15262
def smart_bytes ( s , encoding = '_STR:0_' , strings_only = False , errors = '_STR:1_' ) :pass
example# 15263
if isinstance ( s , Promise ) :pass
example# 15264
return s
example# 15265
return force_bytes ( s , encoding , strings_only , errors )
example# 15266
def force_bytes ( s , encoding = '_STR:0_' , strings_only = False , errors = '_STR:1_' ) :pass
example# 15267
if isinstance ( s , bytes ) :pass
example# 15268
if encoding == '_STR:0_' :pass
example# 15269
return s
example# 15270
if True: pass
else :pass
example# 15271
return s . decode ( '_STR:0_' , errors ) . encode ( encoding , errors )
example# 15272
if strings_only and is_protected_type ( s ) :pass
example# 15273
return s
example# 15274
if isinstance ( s , six . memoryview ) :pass
example# 15275
return bytes ( s )
example# 15276
if isinstance ( s , Promise ) :pass
example# 15277
return six . text_type ( s ) . encode ( encoding , errors )
example# 15278
if not isinstance ( s , six . string_types ) :pass
example# 15279
try :pass
except: pass
example# 15280
if six . PY3 :pass
example# 15281
return six . text_type ( s ) . encode ( encoding )
example# 15282
if True: pass
else :pass
example# 15283
return bytes ( s )
example# 15284
try: pass
except UnicodeEncodeError :pass
example# 15285
if isinstance ( s , Exception ) :pass
example# 15286
return b' ' . join ( [ force_bytes ( arg , encoding , strings_only ,  errors ) for arg in s ] )
example# 15287
return six . text_type ( s ) . encode ( encoding , errors )
example# 15288
if True: pass
else :pass
example# 15289
return s . encode ( encoding , errors )
example# 15290
if six . PY3 :pass
example# 15291
smart_str = smart_text
example# 15292
force_str = force_text
example# 15293
if True: pass
else :pass
example# 15294
smart_str = smart_bytes
example# 15295
force_str = force_bytes
example# 15296
smart_unicode = smart_text
example# 15297
force_unicode = force_text
example# 15298
def iri_to_uri ( iri ) :pass
example# 15299
if iri is None :pass
example# 15300
return iri
example# 15301
return quote ( force_bytes ( iri ) , safe = b"/#%[]=:;$&()+,!?*@'~" )
example# 15302
def filepath_to_uri ( path ) :pass
example# 15303
if path is None :pass
example# 15304
return path
example# 15305
return quote ( force_bytes ( path ) . replace ( b"\\" , b"/" ) , safe = b"/~!*()'" )
example# 15306
def get_system_encoding ( ) :pass
example# 15307
try :pass
except: pass
example# 15308
encoding = locale . getdefaultlocale ( ) [ 1 ] or 'ascii'
example# 15309
codecs . lookup ( encoding )
example# 15310
try: pass
except Exception :pass
example# 15311
encoding = '_STR:0_'
example# 15312
return encoding
example# 15313
DEFAULT_LOCALE_ENCODING = get_system_encoding ( )
example# 15314
from __future__ import unicode_literals
example# 15315
import datetime
example# 15316
from django . utils . xmlutils import SimplerXMLGenerator
example# 15317
from django . utils . encoding import force_text , iri_to_uri
example# 15318
from django . utils import datetime_safe
example# 15319
from django . utils import six
example# 15320
from django . utils . six import StringIO
example# 15321
from django . utils . six . moves . urllib . parse import urlparse
example# 15322
from django . utils . timezone import is_aware
example# 15323
def rfc2822_date ( date ) :pass
example# 15324
months = ( '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' , '_STR:4_' , '_STR:5_' , '_STR:6_' , '_STR:7_' , '_STR:8_' , '_STR:9_' , '_STR:10_' , '_STR:11_' , )
example# 15325
days = ( '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' , '_STR:4_' , '_STR:5_' , '_STR:6_' )
example# 15326
date = datetime_safe . new_datetime ( date )
example# 15327
dow = days [ date . weekday ( ) ]
example# 15328
month = months [ date . month - 1 ]
example# 15329
time_str = date . strftime ( '_STR:0_' % ( dow , month ) )
example# 15330
if six . PY2 :pass
example# 15331
time_str = time_str . decode ( '_STR:0_' )
example# 15332
if is_aware ( date ) :pass
example# 15333
offset = date . tzinfo . utcoffset ( date )
example# 15334
timezone = ( offset . days * 24 * 60 ) + ( offset . seconds // 60 )
example# 15335
hour , minute = divmod ( timezone , 60 )
example# 15336
return time_str + '_STR:0_' % ( hour , minute )
example# 15337
if True: pass
else :pass
example# 15338
return time_str + '_STR:0_'
example# 15339
def rfc3339_date ( date ) :pass
example# 15340
date = datetime_safe . new_datetime ( date )
example# 15341
time_str = date . strftime ( '_STR:0_' )
example# 15342
if six . PY2 :pass
example# 15343
time_str = time_str . decode ( '_STR:0_' )
example# 15344
if is_aware ( date ) :pass
example# 15345
offset = date . tzinfo . utcoffset ( date )
example# 15346
timezone = ( offset . days * 24 * 60 ) + ( offset . seconds // 60 )
example# 15347
hour , minute = divmod ( timezone , 60 )
example# 15348
return time_str + '_STR:0_' % ( hour , minute )
example# 15349
if True: pass
else :pass
example# 15350
return time_str + '_STR:0_'
example# 15351
def get_tag_uri ( url , date ) :pass
example# 15352
bits = urlparse ( url )
example# 15353
d = ''
example# 15354
if date is not None :pass
example# 15355
d = ',%s' % datetime_safe . new_datetime ( date ) . strftime ( '%Y-%m-%d' )
example# 15356
return '_STR:2_' % ( bits . hostname , d , bits . path , bits . fragment )
example# 15357
class SyndicationFeed ( object ) :pass
example# 15358
def __init__ ( self , title , link , description , language = None , author_email = None ,  author_name = None , author_link = None , subtitle = None , categories = None ,  feed_url = None , feed_copyright = None , feed_guid = None , ttl = None , ** kwargs ) :pass
example# 15359
to_unicode = lambda s : force_text ( s , strings_only = True )
example# 15360
if categories :pass
example# 15361
categories = [ force_text ( c ) for c in categories ]
example# 15362
if ttl is not None :pass
example# 15363
ttl = force_text ( ttl )
example# 15364
self . feed = {  '_STR:0_' : to_unicode ( title ) ,  'link' : iri_to_uri ( link ) ,  'description' : to_unicode ( description ) ,  'language' : to_unicode ( language ) ,  'author_email' : to_unicode ( author_email ) ,  'author_name' : to_unicode ( author_name ) ,  'author_link' : iri_to_uri ( author_link ) ,  'subtitle' : to_unicode ( subtitle ) ,  'categories' : categories or ( ) ,  'feed_url' : iri_to_uri ( feed_url ) ,  'feed_copyright' : to_unicode ( feed_copyright ) ,  'id' : feed_guid or link ,  'ttl' : ttl ,  }
example# 15365
self . feed . update ( kwargs )
example# 15366
self . items = [ ]
example# 15367
def add_item ( self , title , link , description , author_email = None ,  author_name = None , author_link = None , pubdate = None , comments = None ,  unique_id = None , unique_id_is_permalink = None , enclosure = None ,  categories = ( ) , item_copyright = None , ttl = None , updateddate = None , ** kwargs ) :pass
example# 15368
to_unicode = lambda s : force_text ( s , strings_only = True )
example# 15369
if categories :pass
example# 15370
categories = [ ( c ) for c in categories ]
example# 15371
if ttl is not None :pass
example# 15372
ttl = force_text ( ttl )
example# 15373
item = {  '_STR:0_' : to_unicode ( title ) ,  'link' : iri_to_uri ( link ) ,  'description' : to_unicode ( description ) ,  'author_email' : to_unicode ( author_email ) ,  'author_name' : to_unicode ( author_name ) ,  'author_link' : iri_to_uri ( author_link ) ,  'pubdate' : pubdate ,  'updateddate' : updateddate ,  'comments' : to_unicode ( comments ) ,  'unique_id' : to_unicode ( unique_id ) ,  'unique_id_is_permalink' : unique_id_is_permalink ,  'enclosure' : enclosure ,  'categories' : categories or ( ) ,  'item_copyright' : to_unicode ( item_copyright ) ,  'ttl' : ttl ,  }
example# 15374
item . update ( kwargs )
example# 15375
self . items . append ( item )
example# 15376
def num_items ( self ) :pass
example# 15377
return len ( self . items )
example# 15378
def root_attributes ( self ) :pass
example# 15379
return { }
example# 15380
def add_root_elements ( self , handler ) :pass
example# 15381
pass
example# 15382
def item_attributes ( self , item ) :pass
example# 15383
return { }
example# 15384
def add_item_elements ( self , handler , item ) :pass
example# 15385
pass
example# 15386
def write ( self , outfile , encoding ) :pass
example# 15387
raise NotImplementedError ( '_STR:0_' )
example# 15388
def writeString ( self , encoding ) :pass
example# 15389
s = StringIO ( )
example# 15390
self . write ( s , encoding )
example# 15391
return s . getvalue ( )
example# 15392
def latest_post_date ( self ) :pass
example# 15393
latest_date = None
example# 15394
date_keys = ( '_STR:0_' , '_STR:1_' )
example# 15395
for item in self . items :pass
example# 15396
for date_key in date_keys :pass
example# 15397
item_date = item . get ( date_key )
example# 15398
if item_date :pass
example# 15399
if latest_date is None or item_date > latest_date :pass
example# 15400
latest_date = item_date
example# 15401
return latest_date or datetime . datetime . now ( )
example# 15402
class Enclosure ( object ) :pass
example# 15403
def __init__ ( self , url , length , mime_type ) :pass
example# 15404
self . length , self . mime_type = length , mime_type
example# 15405
self . url = iri_to_uri ( url )
example# 15406
class RssFeed ( SyndicationFeed ) :pass
example# 15407
mime_type = '_STR:0_'
example# 15408
def write ( self , outfile , encoding ) :pass
example# 15409
handler = SimplerXMLGenerator ( outfile , encoding )
example# 15410
handler . startDocument ( )
example# 15411
handler . startElement ( '_STR:0_' , self . rss_attributes ( ) )
example# 15412
handler . startElement ( '_STR:0_' , self . root_attributes ( ) )
example# 15413
self . add_root_elements ( handler )
example# 15414
self . write_items ( handler )
example# 15415
self . endChannelElement ( handler )
example# 15416
handler . endElement ( "rss" )
example# 15417
def rss_attributes ( self ) :pass
example# 15418
return { '_STR:0_' : self . _version ,  '_STR:2_' : '_STR:1_' }
example# 15419
def write_items ( self , handler ) :pass
example# 15420
for item in self . items :pass
example# 15421
handler . startElement ( 'item' , self . item_attributes ( item ) )
example# 15422
self . add_item_elements ( handler , item )
example# 15423
handler . endElement ( "item" )
example# 15424
def add_root_elements ( self , handler ) :pass
example# 15425
handler . addQuickElement ( "title" , self . feed [ '_STR:0_' ] )
example# 15426
handler . addQuickElement ( "link" , self . feed [ '_STR:0_' ] )
example# 15427
handler . addQuickElement ( "description" , self . feed [ '_STR:0_' ] )
example# 15428
if self . feed [ '_STR:0_' ] is not None :pass
example# 15429
handler . addQuickElement ( "atom:link" , None ,  { "rel" : "self" , "href" : self . feed [ 'feed_url' ] } )
example# 15430
if self . feed [ '_STR:2_' ] is not None :pass
example# 15431
handler . addQuickElement ( "language" , self . feed [ '_STR:0_' ] )
example# 15432
for cat in self . feed [ '_STR:0_' ] :pass
example# 15433
handler . addQuickElement ( '_STR:0_' , cat )
example# 15434
if self . feed [ '_STR:0_' ] is not None :pass
example# 15435
handler . addQuickElement ( "copyright" , self . feed [ '_STR:1_' ] )
example# 15436
handler . addQuickElement ( "lastBuildDate" , rfc2822_date ( self . latest_post_date ( ) ) )
example# 15437
if self . feed [ '_STR:0_' ] is not None :pass
example# 15438
handler . addQuickElement ( "ttl" , self . feed [ '_STR:0_' ] )
example# 15439
def endChannelElement ( self , handler ) :pass
example# 15440
handler . endElement ( "channel" )
example# 15441
class RssUserland091Feed ( RssFeed ) :pass
example# 15442
_version = '_STR:0_'
example# 15443
def add_item_elements ( self , handler , item ) :pass
example# 15444
handler . addQuickElement ( "title" , item [ '_STR:0_' ] )
example# 15445
handler . addQuickElement ( "link" , item [ '_STR:0_' ] )
example# 15446
if item [ '_STR:0_' ] is not None :pass
example# 15447
handler . addQuickElement ( "description" , item [ '_STR:0_' ] )
example# 15448
class Rss201rev2Feed ( RssFeed ) :pass
example# 15449
_version = '_STR:0_'
example# 15450
def add_item_elements ( self , handler , item ) :pass
example# 15451
handler . addQuickElement ( "title" , item [ '_STR:0_' ] )
example# 15452
handler . addQuickElement ( "link" , item [ '_STR:0_' ] )
example# 15453
if item [ '_STR:0_' ] is not None :pass
example# 15454
handler . addQuickElement ( "description" , item [ '_STR:0_' ] )
example# 15455
if item [ '_STR:0_' ] and item [ '_STR:1_' ] :pass
example# 15456
handler . addQuickElement ( '_STR:0_' , '_STR:1_' %  ( item [ 'author_email' ] , item [ 'author_name' ] ) )
example# 15457
if True: pass
elif item [ '_STR:2_' ] :pass
example# 15458
handler . addQuickElement ( "author" , item [ "author_email" ] )
example# 15459
if True: pass
elif item [ '_STR:0_' ] :pass
example# 15460
handler . addQuickElement ( "dc:creator" , item [ "author_name" ] , { "xmlns:dc" : "http://purl.org/dc/elements/1.1/" } )
example# 15461
if item [ '_STR:3_' ] is not None :pass
example# 15462
handler . addQuickElement ( "pubDate" , rfc2822_date ( item [ 'pubdate' ] ) )
example# 15463
if item [ '_STR:1_' ] is not None :pass
example# 15464
handler . addQuickElement ( "comments" , item [ '_STR:0_' ] )
example# 15465
if item [ '_STR:0_' ] is not None :pass
example# 15466
guid_attrs = { }
example# 15467
if isinstance ( item . get ( '_STR:0_' ) , bool ) :pass
example# 15468
guid_attrs [ 'isPermaLink' ] = str (  item [ '_STR:0_' ] ) . lower ( )
example# 15469
handler . addQuickElement ( "guid" , item [ '_STR:2_' ] , guid_attrs )
example# 15470
if item [ '_STR:0_' ] is not None :pass
example# 15471
handler . addQuickElement ( "ttl" , item [ '_STR:0_' ] )
example# 15472
if item [ '_STR:0_' ] is not None :pass
example# 15473
handler . addQuickElement ( "enclosure" , '' ,  { "url" : item [ 'enclosure' ] . url , "length" : item [ 'enclosure' ] . length ,  "type" : item [ 'enclosure' ] . mime_type } )
example# 15474
for cat in item [ '_STR:4_' ] :pass
example# 15475
handler . addQuickElement ( "category" , cat )
example# 15476
class Atom1Feed ( SyndicationFeed ) :pass
example# 15477
mime_type = '_STR:0_'
example# 15478
ns = '_STR:0_'
example# 15479
def write ( self , outfile , encoding ) :pass
example# 15480
handler = SimplerXMLGenerator ( outfile , encoding )
example# 15481
handler . startDocument ( )
example# 15482
handler . startElement ( '_STR:0_' , self . root_attributes ( ) )
example# 15483
self . add_root_elements ( handler )
example# 15484
self . write_items ( handler )
example# 15485
handler . endElement ( "feed" )
example# 15486
def root_attributes ( self ) :pass
example# 15487
if self . feed [ '_STR:0_' ] is not None :pass
example# 15488
return { "xmlns" : self . ns , '_STR:1_' : self . feed [ '_STR:0_' ] }
example# 15489
if True: pass
else :pass
example# 15490
return { '_STR:0_' : self . ns }
example# 15491
def add_root_elements ( self , handler ) :pass
example# 15492
handler . addQuickElement ( "title" , self . feed [ '_STR:0_' ] )
example# 15493
handler . addQuickElement ( "link" , "" , { "rel" : "alternate" , "href" : self . feed [ '_STR:0_' ] } )
example# 15494
if self . feed [ '_STR:4_' ] is not None :pass
example# 15495
handler . addQuickElement ( "link" , "" , { "rel" : "self" , "href" : self . feed [ 'feed_url' ] } )
example# 15496
handler . addQuickElement ( "id" , self . feed [ 'id' ] )
example# 15497
handler . addQuickElement ( "updated" , rfc3339_date ( self . latest_post_date ( ) ) )
example# 15498
if self . feed [ '_STR:0_' ] is not None :pass
example# 15499
handler . startElement ( "author" , { } )
example# 15500
handler . addQuickElement ( "name" , self . feed [ '_STR:1_' ] )
example# 15501
if self . feed [ '_STR:0_' ] is not None :pass
example# 15502
handler . addQuickElement ( "email" , self . feed [ '_STR:1_' ] )
example# 15503
if self . feed [ '_STR:0_' ] is not None :pass
example# 15504
handler . addQuickElement ( "uri" , self . feed [ '_STR:1_' ] )
example# 15505
handler . endElement ( "author" )
example# 15506
if self . feed [ '_STR:0_' ] is not None :pass
example# 15507
handler . addQuickElement ( "subtitle" , self . feed [ '_STR:0_' ] )
example# 15508
for cat in self . feed [ '_STR:0_' ] :pass
example# 15509
handler . addQuickElement ( "category" , "" , { "term" : cat } )
example# 15510
if self . feed [ '_STR:1_' ] is not None :pass
example# 15511
handler . addQuickElement ( "rights" , self . feed [ '_STR:1_' ] )
example# 15512
def write_items ( self , handler ) :pass
example# 15513
for item in self . items :pass
example# 15514
handler . startElement ( "entry" , self . item_attributes ( item ) )
example# 15515
self . add_item_elements ( handler , item )
example# 15516
handler . endElement ( "entry" )
example# 15517
def add_item_elements ( self , handler , item ) :pass
example# 15518
handler . addQuickElement ( "title" , item [ '_STR:0_' ] )
example# 15519
handler . addQuickElement ( "link" , "" , { "href" : item [ '_STR:0_' ] , "rel" : "alternate" } )
example# 15520
if item [ '_STR:4_' ] is not None :pass
example# 15521
handler . addQuickElement ( '_STR:0_' , rfc3339_date ( item [ 'pubdate' ] ) )
example# 15522
if item [ '_STR:1_' ] is not None :pass
example# 15523
handler . addQuickElement ( '_STR:0_' , rfc3339_date ( item [ 'updateddate' ] ) )
example# 15524
if item [ '_STR:1_' ] is not None :pass
example# 15525
handler . startElement ( "author" , { } )
example# 15526
handler . addQuickElement ( "name" , item [ '_STR:1_' ] )
example# 15527
if item [ '_STR:0_' ] is not None :pass
example# 15528
handler . addQuickElement ( "email" , item [ '_STR:1_' ] )
example# 15529
if item [ '_STR:0_' ] is not None :pass
example# 15530
handler . addQuickElement ( "uri" , item [ '_STR:1_' ] )
example# 15531
handler . endElement ( "author" )
example# 15532
if item [ '_STR:0_' ] is not None :pass
example# 15533
unique_id = item [ '_STR:0_' ]
example# 15534
if True: pass
else :pass
example# 15535
unique_id = get_tag_uri ( item [ '_STR:0_' ] , item [ '_STR:1_' ] )
example# 15536
handler . addQuickElement ( "id" , unique_id )
example# 15537
if item [ '_STR:0_' ] is not None :pass
example# 15538
handler . addQuickElement ( "summary" , item [ '_STR:1_' ] , { "type" : "html" } )
example# 15539
if item [ '_STR:2_' ] is not None :pass
example# 15540
handler . addQuickElement ( "link" , '' ,  { "rel" : "enclosure" ,  "href" : item [ 'enclosure' ] . url ,  "length" : item [ 'enclosure' ] . length ,  "type" : item [ 'enclosure' ] . mime_type } )
example# 15541
for cat in item [ '_STR:5_' ] :pass
example# 15542
handler . addQuickElement ( "category" , "" , { "term" : cat } )
example# 15543
if item [ '_STR:1_' ] is not None :pass
example# 15544
handler . addQuickElement ( "rights" , item [ '_STR:1_' ] )
example# 15545
DefaultFeed = Rss201rev2Feed
example# 15546
from __future__ import absolute_import
example# 15547
import decimal
example# 15548
import datetime
example# 15549
from importlib import import_module
example# 15550
import unicodedata
example# 15551
from django . conf import settings
example# 15552
from django . utils import dateformat , numberformat , datetime_safe
example# 15553
from django . utils . encoding import force_str
example# 15554
from django . utils . functional import lazy
example# 15555
from django . utils . safestring import mark_safe
example# 15556
from django . utils import six
example# 15557
from django . utils . translation import get_language , to_locale , check_for_language
example# 15558
_format_cache = { }
example# 15559
_format_modules_cache = { }
example# 15560
ISO_INPUT_FORMATS = {  '_STR:1_' : ( '_STR:0_' , ) ,  'TIME_INPUT_FORMATS' : ( '%H:%M:%S' , '%H:%M:%S.%f' , '%H:%M' ) ,  'DATETIME_INPUT_FORMATS' : (  '%Y-%m-%d %H:%M:%S' ,  '%Y-%m-%d %H:%M:%S.%f' ,  '%Y-%m-%d %H:%M' ,  '_STR:0_'  ) ,  }
example# 15561
def reset_format_cache ( ) :pass
example# 15562
global _format_cache , _format_modules_cache
example# 15563
_format_cache = { }
example# 15564
_format_modules_cache = { }
example# 15565
def iter_format_modules ( lang , format_module_path = None ) :pass
example# 15566
if not check_for_language ( lang ) :pass
example# 15567
return
example# 15568
if format_module_path is None :pass
example# 15569
format_module_path = settings . FORMAT_MODULE_PATH
example# 15570
format_locations = [ ]
example# 15571
if format_module_path :pass
example# 15572
if isinstance ( format_module_path , six . string_types ) :pass
example# 15573
format_module_path = [ format_module_path ]
example# 15574
for path in format_module_path :pass
example# 15575
format_locations . append ( path + '_STR:0_' )
example# 15576
format_locations . append ( '_STR:0_' )
example# 15577
locale = to_locale ( lang )
example# 15578
locales = [ locale ]
example# 15579
if '_STR:0_' in locale :pass
example# 15580
locales . append ( locale . split ( '_STR:0_' ) [ 0 ] )
example# 15581
for location in format_locations :pass
example# 15582
for loc in locales :pass
example# 15583
try :pass
except: pass
example# 15584
yield import_module ( '_STR:0_' % ( location % loc ) )
example# 15585
try: pass
except ImportError :pass
example# 15586
pass
example# 15587
def get_format_modules ( lang = None , reverse = False ) :pass
example# 15588
if lang is None :pass
example# 15589
lang = get_language ( )
example# 15590
modules = _format_modules_cache . setdefault ( lang , list ( iter_format_modules ( lang , settings . FORMAT_MODULE_PATH ) ) )
example# 15591
if reverse :pass
example# 15592
return list ( reversed ( modules ) )
example# 15593
return modules
example# 15594
def get_format ( format_type , lang = None , use_l10n = None ) :pass
example# 15595
format_type = force_str ( format_type )
example# 15596
if use_l10n or ( use_l10n is None and settings . USE_L10N ) :pass
example# 15597
if lang is None :pass
example# 15598
lang = get_language ( )
example# 15599
cache_key = ( format_type , lang )
example# 15600
try :pass
except: pass
example# 15601
cached = _format_cache [ cache_key ]
example# 15602
if cached is not None :pass
example# 15603
return cached
example# 15604
if True: pass
else :pass
example# 15605
return getattr ( settings , format_type )
example# 15606
try: pass
except KeyError :pass
example# 15607
for module in get_format_modules ( lang ) :pass
example# 15608
try :pass
except: pass
example# 15609
val = getattr ( module , format_type )
example# 15610
for iso_input in ISO_INPUT_FORMATS . get ( format_type , ( ) ) :pass
example# 15611
if iso_input not in val :pass
example# 15612
if isinstance ( val , tuple ) :pass
example# 15613
val = list ( val )
example# 15614
val . append ( iso_input )
example# 15615
_format_cache [ cache_key ] = val
example# 15616
return val
example# 15617
try: pass
except AttributeError :pass
example# 15618
pass
example# 15619
_format_cache [ cache_key ] = None
example# 15620
return getattr ( settings , format_type )
example# 15621
get_format_lazy = lazy ( get_format , six . text_type , list , tuple )
example# 15622
def date_format ( value , format = None , use_l10n = None ) :pass
example# 15623
return dateformat . format ( value , get_format ( format or 'DATE_FORMAT' , use_l10n = use_l10n ) )
example# 15624
def time_format ( value , format = None , use_l10n = None ) :pass
example# 15625
return dateformat . time_format ( value , get_format ( format or 'TIME_FORMAT' , use_l10n = use_l10n ) )
example# 15626
def number_format ( value , decimal_pos = None , use_l10n = None , force_grouping = False ) :pass
example# 15627
if use_l10n or ( use_l10n is None and settings . USE_L10N ) :pass
example# 15628
lang = get_language ( )
example# 15629
if True: pass
else :pass
example# 15630
lang = None
example# 15631
return numberformat . format (  value ,  get_format ( 'DECIMAL_SEPARATOR' , lang , use_l10n = use_l10n ) ,  decimal_pos ,  get_format ( 'NUMBER_GROUPING' , lang , use_l10n = use_l10n ) ,  get_format ( 'THOUSAND_SEPARATOR' , lang , use_l10n = use_l10n ) ,  force_grouping = force_grouping  )
example# 15632
def localize ( value , use_l10n = None ) :pass
example# 15633
if isinstance ( value , bool ) :pass
example# 15634
return mark_safe ( six . text_type ( value ) )
example# 15635
if True: pass
elif isinstance ( value , ( decimal . Decimal , float ) + six . integer_types ) :pass
example# 15636
return number_format ( value , use_l10n = use_l10n )
example# 15637
if True: pass
elif isinstance ( value , datetime . datetime ) :pass
example# 15638
return date_format ( value , '_STR:0_' , use_l10n = use_l10n )
example# 15639
if True: pass
elif isinstance ( value , datetime . date ) :pass
example# 15640
return date_format ( value , use_l10n = use_l10n )
example# 15641
if True: pass
elif isinstance ( value , datetime . time ) :pass
example# 15642
return time_format ( value , '_STR:0_' , use_l10n = use_l10n )
example# 15643
if True: pass
else :pass
example# 15644
return value
example# 15645
def localize_input ( value , default = None ) :pass
example# 15646
if isinstance ( value , ( decimal . Decimal , float ) + six . integer_types ) :pass
example# 15647
return number_format ( value )
example# 15648
if True: pass
elif isinstance ( value , datetime . datetime ) :pass
example# 15649
value = datetime_safe . new_datetime ( value )
example# 15650
format = force_str ( default or get_format ( 'DATETIME_INPUT_FORMATS' ) [ 0 ] )
example# 15651
return value . strftime ( format )
example# 15652
if True: pass
elif isinstance ( value , datetime . date ) :pass
example# 15653
value = datetime_safe . new_date ( value )
example# 15654
format = force_str ( default or get_format ( 'DATE_INPUT_FORMATS' ) [ 0 ] )
example# 15655
return value . strftime ( format )
example# 15656
if True: pass
elif isinstance ( value , datetime . time ) :pass
example# 15657
format = force_str ( default or get_format ( 'TIME_INPUT_FORMATS' ) [ 0 ] )
example# 15658
return value . strftime ( format )
example# 15659
return value
example# 15660
def sanitize_separators ( value ) :pass
example# 15661
if settings . USE_L10N and isinstance ( value , six . string_types ) :pass
example# 15662
parts = [ ]
example# 15663
decimal_separator = get_format ( '_STR:0_' )
example# 15664
if decimal_separator in value :pass
example# 15665
value , decimals = value . split ( decimal_separator , 1 )
example# 15666
parts . append ( decimals )
example# 15667
if settings . USE_THOUSAND_SEPARATOR :pass
example# 15668
thousand_sep = get_format ( '_STR:0_' )
example# 15669
for replacement in set ( [  thousand_sep , unicodedata . normalize ( '_STR:0_' , thousand_sep ) ] ) :pass
example# 15670
value = value . replace ( replacement , '' )
example# 15671
parts . append ( value )
example# 15672
value = '_STR:0_' . join ( reversed ( parts ) )
example# 15673
return value
example# 15674
import copy
example# 15675
import operator
example# 15676
from functools import wraps
example# 15677
import sys
example# 15678
import warnings
example# 15679
from django . utils import six
example# 15680
from django . utils . deprecation import RemovedInDjango19Warning
example# 15681
from django . utils . six . moves import copyreg
example# 15682
def curry ( _curried_func , * args , ** kwargs ) :pass
example# 15683
def _curried ( * moreargs , ** morekwargs ) :pass
example# 15684
return _curried_func ( * ( args + moreargs ) , ** dict ( kwargs , ** morekwargs ) )
example# 15685
return _curried
example# 15686
def memoize ( func , cache , num_args ) :pass
example# 15687
warnings . warn ( "memoize wrapper is deprecated and will be removed in "  "Django 1.9. Use django.utils.lru_cache instead." ,  RemovedInDjango19Warning , stacklevel = 2 )
example# 15688
@ wraps ( func )
def dummy(): pass
example# 15689
def wrapper ( * args ) :pass
example# 15690
mem_args = args [ : num_args ]
example# 15691
if mem_args in cache :pass
example# 15692
return cache [ mem_args ]
example# 15693
result = func ( * args )
example# 15694
cache [ mem_args ] = result
example# 15695
return result
example# 15696
return wrapper
example# 15697
class cached_property ( object ) :pass
example# 15698
def __init__ ( self , func , name = None ) :pass
example# 15699
self . func = func
example# 15700
self . name = name or func . __name__
example# 15701
def __get__ ( self , instance , type = None ) :pass
example# 15702
if instance is None :pass
example# 15703
return self
example# 15704
res = instance . __dict__ [ self . name ] = self . func ( instance )
example# 15705
return res
example# 15706
class Promise ( object ) :pass
example# 15707
pass
example# 15708
def lazy ( func , * resultclasses ) :pass
example# 15709
@ total_ordering
def dummy(): pass
example# 15710
class __proxy__ ( Promise ) :pass
example# 15711
__dispatch = None
example# 15712
def __init__ ( self , args , kw ) :pass
example# 15713
self . __args = args
example# 15714
self . __kw = kw
example# 15715
if self . __dispatch is None :pass
example# 15716
self . __prepare_class__ ( )
example# 15717
def __reduce__ ( self ) :pass
example# 15718
return (  _lazy_proxy_unpickle ,  ( func , self . __args , self . __kw ) + resultclasses  )
example# 15719
@ classmethod
def dummy(): pass
example# 15720
def __prepare_class__ ( cls ) :pass
example# 15721
cls . __dispatch = { }
example# 15722
for resultclass in resultclasses :pass
example# 15723
cls . __dispatch [ resultclass ] = { }
example# 15724
for type_ in reversed ( resultclass . mro ( ) ) :pass
example# 15725
for ( k , v ) in type_ . __dict__ . items ( ) :pass
example# 15726
meth = cls . __promise__ ( resultclass , k , v )
example# 15727
if hasattr ( cls , k ) :pass
example# 15728
continue
example# 15729
setattr ( cls , k , meth )
example# 15730
cls . _delegate_bytes = bytes in resultclasses
example# 15731
cls . _delegate_text = six . text_type in resultclasses
example# 15732
assert not ( cls . _delegate_bytes and cls . _delegate_text ) , '_STR:0_'
example# 15733
if cls . _delegate_text :pass
example# 15734
if six . PY3 :pass
example# 15735
cls . __str__ = cls . __text_cast
example# 15736
if True: pass
else :pass
example# 15737
cls . __unicode__ = cls . __text_cast
example# 15738
if True: pass
elif cls . _delegate_bytes :pass
example# 15739
if six . PY3 :pass
example# 15740
cls . __bytes__ = cls . __bytes_cast
example# 15741
if True: pass
else :pass
example# 15742
cls . __str__ = cls . __bytes_cast
example# 15743
@ classmethod
def dummy(): pass
example# 15744
def __promise__ ( cls , klass , funcname , method ) :pass
example# 15745
def __wrapper__ ( self , * args , ** kw ) :pass
example# 15746
res = func ( * self . __args , ** self . __kw )
example# 15747
for t in type ( res ) . mro ( ) :pass
example# 15748
if t in self . __dispatch :pass
example# 15749
return self . __dispatch [ t ] [ funcname ] ( res , * args , ** kw )
example# 15750
raise TypeError ( '_STR:0_' )
example# 15751
if klass not in cls . __dispatch :pass
example# 15752
cls . __dispatch [ klass ] = { }
example# 15753
cls . __dispatch [ klass ] [ funcname ] = method
example# 15754
return __wrapper__
example# 15755
def __text_cast ( self ) :pass
example# 15756
return func ( * self . __args , ** self . __kw )
example# 15757
def __bytes_cast ( self ) :pass
example# 15758
return bytes ( func ( * self . __args , ** self . __kw ) )
example# 15759
def __cast ( self ) :pass
example# 15760
if self . _delegate_bytes :pass
example# 15761
return self . __bytes_cast ( )
example# 15762
if True: pass
elif self . _delegate_text :pass
example# 15763
return self . __text_cast ( )
example# 15764
if True: pass
else :pass
example# 15765
return func ( * self . __args , ** self . __kw )
example# 15766
def __ne__ ( self , other ) :pass
example# 15767
if isinstance ( other , Promise ) :pass
example# 15768
other = other . __cast ( )
example# 15769
return self . __cast ( ) != other
example# 15770
def __eq__ ( self , other ) :pass
example# 15771
if isinstance ( other , Promise ) :pass
example# 15772
other = other . __cast ( )
example# 15773
return self . __cast ( ) == other
example# 15774
def __lt__ ( self , other ) :pass
example# 15775
if isinstance ( other , Promise ) :pass
example# 15776
other = other . __cast ( )
example# 15777
return self . __cast ( ) < other
example# 15778
def __hash__ ( self ) :pass
example# 15779
return hash ( self . __cast ( ) )
example# 15780
def __mod__ ( self , rhs ) :pass
example# 15781
if self . _delegate_bytes and six . PY2 :pass
example# 15782
return bytes ( self ) % rhs
example# 15783
if True: pass
elif self . _delegate_text :pass
example# 15784
return six . text_type ( self ) % rhs
example# 15785
return self . __cast ( ) % rhs
example# 15786
def __deepcopy__ ( self , memo ) :pass
example# 15787
memo [ id ( self ) ] = self
example# 15788
return self
example# 15789
@ wraps ( func )
def dummy(): pass
example# 15790
def __wrapper__ ( * args , ** kw ) :pass
example# 15791
return __proxy__ ( args , kw )
example# 15792
return __wrapper__
example# 15793
def _lazy_proxy_unpickle ( func , args , kwargs , * resultclasses ) :pass
example# 15794
return lazy ( func , * resultclasses ) ( * args , ** kwargs )
example# 15795
def allow_lazy ( func , * resultclasses ) :pass
example# 15796
@ wraps ( func )
def dummy(): pass
example# 15797
def wrapper ( * args , ** kwargs ) :pass
example# 15798
for arg in list ( args ) + list ( six . itervalues ( kwargs ) ) :pass
example# 15799
if isinstance ( arg , Promise ) :pass
example# 15800
break
example# 15801
if True: pass
else :pass
example# 15802
return func ( * args , ** kwargs )
example# 15803
return lazy ( func , * resultclasses ) ( * args , ** kwargs )
example# 15804
return wrapper
example# 15805
empty = object ( )
example# 15806
def new_method_proxy ( func ) :pass
example# 15807
def inner ( self , * args ) :pass
example# 15808
if self . _wrapped is empty :pass
example# 15809
self . _setup ( )
example# 15810
return func ( self . _wrapped , * args )
example# 15811
return inner
example# 15812
class LazyObject ( object ) :pass
example# 15813
_wrapped = None
example# 15814
def __init__ ( self ) :pass
example# 15815
self . _wrapped = empty
example# 15816
__getattr__ = new_method_proxy ( getattr )
example# 15817
def __setattr__ ( self , name , value ) :pass
example# 15818
if name == '_STR:0_' :pass
example# 15819
self . __dict__ [ '_STR:0_' ] = value
example# 15820
if True: pass
else :pass
example# 15821
if self . _wrapped is empty :pass
example# 15822
self . _setup ( )
example# 15823
setattr ( self . _wrapped , name , value )
example# 15824
def __delattr__ ( self , name ) :pass
example# 15825
if name == '_STR:0_' :pass
example# 15826
raise TypeError ( '_STR:0_' )
example# 15827
if self . _wrapped is empty :pass
example# 15828
self . _setup ( )
example# 15829
delattr ( self . _wrapped , name )
example# 15830
def _setup ( self ) :pass
example# 15831
raise NotImplementedError ( '_STR:0_' )
example# 15832
def __getstate__ ( self ) :pass
example# 15833
if self . _wrapped is empty :pass
example# 15834
self . _setup ( )
example# 15835
return self . _wrapped . __dict__
example# 15836
@ classmethod
def dummy(): pass
example# 15837
def __newobj__ ( cls , * args ) :pass
example# 15838
return cls . __new__ ( cls , * args )
example# 15839
def __reduce_ex__ ( self , proto ) :pass
example# 15840
if proto >= 2 :pass
example# 15841
return ( self . __newobj__ , ( self . __class__ , ) , self . __getstate__ ( ) )
example# 15842
if True: pass
else :pass
example# 15843
return ( copyreg . _reconstructor , ( self . __class__ , object , None ) , self . __getstate__ ( ) )
example# 15844
def __deepcopy__ ( self , memo ) :pass
example# 15845
if self . _wrapped is empty :pass
example# 15846
result = type ( self ) ( )
example# 15847
memo [ id ( self ) ] = result
example# 15848
return result
example# 15849
return copy . deepcopy ( self . _wrapped , memo )
example# 15850
if six . PY3 :pass
example# 15851
__bytes__ = new_method_proxy ( bytes )
example# 15852
__str__ = new_method_proxy ( str )
example# 15853
__bool__ = new_method_proxy ( bool )
example# 15854
if True: pass
else :pass
example# 15855
__str__ = new_method_proxy ( str )
example# 15856
__unicode__ = new_method_proxy ( unicode )
example# 15857
__nonzero__ = new_method_proxy ( bool )
example# 15858
__dir__ = new_method_proxy ( dir )
example# 15859
__class__ = property ( new_method_proxy ( operator . attrgetter ( '_STR:0_' ) ) )
example# 15860
__eq__ = new_method_proxy ( operator . eq )
example# 15861
__ne__ = new_method_proxy ( operator . ne )
example# 15862
__hash__ = new_method_proxy ( hash )
example# 15863
__getitem__ = new_method_proxy ( operator . getitem )
example# 15864
__setitem__ = new_method_proxy ( operator . setitem )
example# 15865
__delitem__ = new_method_proxy ( operator . delitem )
example# 15866
__len__ = new_method_proxy ( len )
example# 15867
__contains__ = new_method_proxy ( operator . contains )
example# 15868
_super = super
example# 15869
class SimpleLazyObject ( LazyObject ) :pass
example# 15870
def __init__ ( self , func ) :pass
example# 15871
self . __dict__ [ '_STR:0_' ] = func
example# 15872
_super ( SimpleLazyObject , self ) . __init__ ( )
example# 15873
def _setup ( self ) :pass
example# 15874
self . _wrapped = self . _setupfunc ( )
example# 15875
def __repr__ ( self ) :pass
example# 15876
if self . _wrapped is empty :pass
example# 15877
repr_attr = self . _setupfunc
example# 15878
if True: pass
else :pass
example# 15879
repr_attr = self . _wrapped
example# 15880
return '_STR:0_' % ( type ( self ) . __name__ , repr_attr )
example# 15881
def __deepcopy__ ( self , memo ) :pass
example# 15882
if self . _wrapped is empty :pass
example# 15883
result = SimpleLazyObject ( self . _setupfunc )
example# 15884
memo [ id ( self ) ] = result
example# 15885
return result
example# 15886
return copy . deepcopy ( self . _wrapped , memo )
example# 15887
class lazy_property ( property ) :pass
example# 15888
def __new__ ( cls , fget = None , fset = None , fdel = None , doc = None ) :pass
example# 15889
if fget is not None :pass
example# 15890
@ wraps ( fget )
def dummy(): pass
example# 15891
def fget ( instance , instance_type = None , name = fget . __name__ ) :pass
example# 15892
return getattr ( instance , name ) ( )
example# 15893
if fset is not None :pass
example# 15894
@ wraps ( fset )
def dummy(): pass
example# 15895
def fset ( instance , value , name = fset . __name__ ) :pass
example# 15896
return getattr ( instance , name ) ( value )
example# 15897
if fdel is not None :pass
example# 15898
@ wraps ( fdel )
def dummy(): pass
example# 15899
def fdel ( instance , name = fdel . __name__ ) :pass
example# 15900
return getattr ( instance , name ) ( )
example# 15901
return property ( fget , fset , fdel , doc )
example# 15902
def partition ( predicate , values ) :pass
example# 15903
results = ( [ ] , [ ] )
example# 15904
for item in values :pass
example# 15905
results [ predicate ( item ) ] . append ( item )
example# 15906
return results
example# 15907
if sys . version_info >= ( 2 , 7 , 2 ) :pass
example# 15908
from functools import total_ordering
example# 15909
if True: pass
else :pass
example# 15910
def total_ordering ( cls ) :pass
example# 15911
convert = {  '__lt__' : [ ( '_STR:0_' , lambda self , other : not ( self < other or self == other ) ) ,  ( '__le__' , lambda self , other : self < other or self == other ) ,  ( '__ge__' , lambda self , other : not self < other ) ] ,  '__le__' : [ ( '__ge__' , lambda self , other : not self <= other or self == other ) ,  ( '__lt__' , lambda self , other : self <= other and not self == other ) ,  ( '_STR:0_' , lambda self , other : not self <= other ) ] ,  '_STR:0_' : [ ( '__lt__' , lambda self , other : not ( self > other or self == other ) ) ,  ( '__ge__' , lambda self , other : self > other or self == other ) ,  ( '__le__' , lambda self , other : not self > other ) ] ,  '__ge__' : [ ( '__le__' , lambda self , other : ( not self >= other ) or self == other ) ,  ( '_STR:0_' , lambda self , other : self >= other and not self == other ) ,  ( '__lt__' , lambda self , other : not self >= other ) ]  }
example# 15912
roots = set ( dir ( cls ) ) & set ( convert )
example# 15913
if not roots :pass
example# 15914
raise ValueError ( '_STR:0_' )
example# 15915
root = max ( roots )
example# 15916
for opname , opfunc in convert [ root ] :pass
example# 15917
if opname not in roots :pass
example# 15918
opfunc . __name__ = opname
example# 15919
opfunc . __doc__ = getattr ( int , opname ) . __doc__
example# 15920
setattr ( cls , opname , opfunc )
example# 15921
return cls
example# 15922
from __future__ import unicode_literals
example# 15923
import re
example# 15924
import sys
example# 15925
from django . utils . encoding import force_text , force_str
example# 15926
from django . utils . functional import allow_lazy
example# 15927
from django . utils . safestring import SafeData , mark_safe
example# 15928
from django . utils import six
example# 15929
from django . utils . six . moves . urllib . parse import quote , unquote , urlsplit , urlunsplit
example# 15930
from django . utils . text import normalize_newlines
example# 15931
from . html_parser import HTMLParser , HTMLParseError
example# 15932
TRAILING_PUNCTUATION = [ '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' , '_STR:4_' , '_STR:5_' , '_STR:6_' ]
example# 15933
WRAPPING_PUNCTUATION = [ ( '_STR:0_' , '_STR:1_' ) , ( '_STR:2_' , '_STR:3_' ) , ( '[' , ']' ) , ( '&lt;' , '&gt;' ) , ( '"' , '"' ) , ( '\'' , '\'' ) ]
example# 15934
DOTS = [ '_STR:6_' , '_STR:7_' , '_STR:8_' , '_STR:9_' , '_STR:10_' , '_STR:11_' ]
example# 15935
unencoded_ampersands_re = re . compile ( r'_STR:0_' )
example# 15936
word_split_re = re . compile ( r'_STR:0_' )
example# 15937
simple_url_re = re . compile ( r'_STR:0_' , re . IGNORECASE )
example# 15938
simple_url_2_re = re . compile ( r'_STR:0_' , re . IGNORECASE )
example# 15939
simple_email_re = re . compile ( r'^\S+@\S+\.\S+$' )
example# 15940
link_target_attribute_re = re . compile ( r'_STR:0_' )
example# 15941
html_gunk_re = re . compile ( r'(?:<br clear="all">|<i><\/i>|<b><\/b>|<em><\/em>|<strong><\/strong>|<\/?smallcaps>|<\/?uppercase>)' , re . IGNORECASE )
example# 15942
hard_coded_bullets_re = re . compile ( r'_STR:1_' % '|' . join ( re . escape ( x ) for x in DOTS ) , re . DOTALL )
example# 15943
trailing_empty_content_re = re . compile ( r'_STR:1_' )
example# 15944
def escape ( text ) :pass
example# 15945
return mark_safe ( force_text ( text ) . replace ( '_STR:0_' , '_STR:1_' ) . replace ( '<' , '&lt;' ) . replace ( '>' , '&gt;' ) . replace ( '"' , '&quot;' ) . replace ( "'" , '&#39;' ) )
example# 15946
escape = allow_lazy ( escape , six . text_type )
example# 15947
_js_escapes = {  ord ( '\\' ) : '_STR:0_' ,  ord ( '\'' ) : '\\u0027' ,  ord ( '"' ) : '\\u0022' ,  ord ( '>' ) : '\\u003E' ,  ord ( '<' ) : '\\u003C' ,  ord ( '&' ) : '\\u0026' ,  ord ( '=' ) : '\\u003D' ,  ord ( '-' ) : '\\u002D' ,  ord ( ';' ) : '\\u003B' ,  ord ( '\u2028' ) : '\\u2028' ,  ord ( '\u2029' ) : '\\u2029'  }
example# 15948
_js_escapes . update ( ( ord ( '%c' % z ) , '\\u%04X' % z ) for z in range ( 32 ) )
example# 15949
def escapejs ( value ) :pass
example# 15950
return mark_safe ( force_text ( value ) . translate ( _js_escapes ) )
example# 15951
escapejs = allow_lazy ( escapejs , six . text_type )
example# 15952
def conditional_escape ( text ) :pass
example# 15953
if hasattr ( text , '_STR:0_' ) :pass
example# 15954
return text . __html__ ( )
example# 15955
if True: pass
else :pass
example# 15956
return escape ( text )
example# 15957
def format_html ( format_string , * args , ** kwargs ) :pass
example# 15958
args_safe = map ( conditional_escape , args )
example# 15959
kwargs_safe = dict ( ( k , conditional_escape ( v ) ) for ( k , v ) in six . iteritems ( kwargs ) )
example# 15960
return mark_safe ( format_string . format ( * args_safe , ** kwargs_safe ) )
example# 15961
def format_html_join ( sep , format_string , args_generator ) :pass
example# 15962
return mark_safe ( conditional_escape ( sep ) . join (  format_html ( format_string , * tuple ( args ) )  for args in args_generator ) )
example# 15963
def linebreaks ( value , autoescape = False ) :pass
example# 15964
value = normalize_newlines ( value )
example# 15965
paras = re . split ( '_STR:0_' , value )
example# 15966
if autoescape :pass
example# 15967
paras = [ '<p>%s</p>' % escape ( p ) . replace ( '_STR:0_' , '_STR:1_' ) for p in paras ]
example# 15968
if True: pass
else :pass
example# 15969
paras = [ '<p>%s</p>' % p . replace ( '_STR:0_' , '_STR:1_' ) for p in paras ]
example# 15970
return '_STR:1_' . join ( paras )
example# 15971
linebreaks = allow_lazy ( linebreaks , six . text_type )
example# 15972
class MLStripper ( HTMLParser ) :pass
example# 15973
def __init__ ( self ) :pass
example# 15974
if sys . version_info [ : 2 ] == ( 3 , 2 ) :pass
example# 15975
HTMLParser . __init__ ( self , strict = False )
example# 15976
if True: pass
else :pass
example# 15977
HTMLParser . __init__ ( self )
example# 15978
self . reset ( )
example# 15979
self . fed = [ ]
example# 15980
def handle_data ( self , d ) :pass
example# 15981
self . fed . append ( d )
example# 15982
def handle_entityref ( self , name ) :pass
example# 15983
self . fed . append ( '_STR:0_' % name )
example# 15984
def handle_charref ( self , name ) :pass
example# 15985
self . fed . append ( '_STR:0_' % name )
example# 15986
def get_data ( self ) :pass
example# 15987
return '' . join ( self . fed )
example# 15988
def _strip_once ( value ) :pass
example# 15989
s = MLStripper ( )
example# 15990
try :pass
except: pass
example# 15991
s . feed ( value )
example# 15992
try: pass
except HTMLParseError :pass
example# 15993
return value
example# 15994
try :pass
except: pass
example# 15995
s . close ( )
example# 15996
try: pass
except ( HTMLParseError , UnboundLocalError ) :pass
example# 15997
return s . get_data ( ) + s . rawdata
example# 15998
if True: pass
else :pass
example# 15999
return s . get_data ( )
example# 16000
def strip_tags ( value ) :pass
example# 16001
while '_STR:0_' in value and '_STR:1_' in value :pass
example# 16002
new_value = _strip_once ( value )
example# 16003
if new_value == value :pass
example# 16004
break
example# 16005
value = new_value
example# 16006
return value
example# 16007
strip_tags = allow_lazy ( strip_tags )
example# 16008
def remove_tags ( html , tags ) :pass
example# 16009
tags = [ re . escape ( tag ) for tag in tags . split ( ) ]
example# 16010
tags_re = '_STR:1_' % '_STR:0_' . join ( tags )
example# 16011
starttag_re = re . compile ( r'_STR:0_' % tags_re , re . U )
example# 16012
endtag_re = re . compile ( '_STR:0_' % tags_re )
example# 16013
html = starttag_re . sub ( '' , html )
example# 16014
html = endtag_re . sub ( '' , html )
example# 16015
return html
example# 16016
remove_tags = allow_lazy ( remove_tags , six . text_type )
example# 16017
def strip_spaces_between_tags ( value ) :pass
example# 16018
return re . sub ( r'_STR:0_' , '_STR:1_' , force_text ( value ) )
example# 16019
strip_spaces_between_tags = allow_lazy ( strip_spaces_between_tags , six . text_type )
example# 16020
def strip_entities ( value ) :pass
example# 16021
return re . sub ( r'_STR:0_' , '' , force_text ( value ) )
example# 16022
strip_entities = allow_lazy ( strip_entities , six . text_type )
example# 16023
def smart_urlquote ( url ) :pass
example# 16024
try :pass
except: pass
example# 16025
scheme , netloc , path , query , fragment = urlsplit ( url )
example# 16026
try :pass
except: pass
example# 16027
netloc = netloc . encode ( '_STR:0_' ) . decode ( '_STR:1_' )
example# 16028
try: pass
except UnicodeError :pass
example# 16029
pass
example# 16030
if True: pass
else :pass
example# 16031
url = urlunsplit ( ( scheme , netloc , path , query , fragment ) )
example# 16032
try: pass
except ValueError :pass
example# 16033
pass
example# 16034
url = unquote ( force_str ( url ) )
example# 16035
url = quote ( url , safe = b'_STR:0_' )
example# 16036
return force_text ( url )
example# 16037
def urlize ( text , trim_url_limit = None , nofollow = False , autoescape = False ) :pass
example# 16038
def trim_url ( x , limit = trim_url_limit ) :pass
example# 16039
if limit is None or len ( x ) <= limit :pass
example# 16040
return x
example# 16041
return '_STR:0_' % x [ : max ( 0 , limit - 3 ) ]
example# 16042
safe_input = isinstance ( text , SafeData )
example# 16043
words = word_split_re . split ( force_text ( text ) )
example# 16044
for i , word in enumerate ( words ) :pass
example# 16045
if '_STR:0_' in word or '_STR:1_' in word or '_STR:2_' in word :pass
example# 16046
lead , middle , trail = '' , word , ''
example# 16047
for punctuation in TRAILING_PUNCTUATION :pass
example# 16048
if middle . endswith ( punctuation ) :pass
example# 16049
middle = middle [ : - len ( punctuation ) ]
example# 16050
trail = punctuation + trail
example# 16051
for opening , closing in WRAPPING_PUNCTUATION :pass
example# 16052
if middle . startswith ( opening ) :pass
example# 16053
middle = middle [ len ( opening ) : ]
example# 16054
lead = lead + opening
example# 16055
if ( middle . endswith ( closing )  and middle . count ( closing ) == middle . count ( opening ) + 1 ) :pass
example# 16056
middle = middle [ : - len ( closing ) ]
example# 16057
trail = closing + trail
example# 16058
url = None
example# 16059
nofollow_attr = '_STR:0_' if nofollow else ''
example# 16060
if simple_url_re . match ( middle ) :pass
example# 16061
url = smart_urlquote ( middle )
example# 16062
if True: pass
elif simple_url_2_re . match ( middle ) :pass
example# 16063
url = smart_urlquote ( '_STR:0_' % middle )
example# 16064
if True: pass
elif '_STR:0_' not in middle and simple_email_re . match ( middle ) :pass
example# 16065
local , domain = middle . rsplit ( '_STR:0_' , 1 )
example# 16066
try :pass
except: pass
example# 16067
domain = domain . encode ( '_STR:0_' ) . decode ( '_STR:1_' )
example# 16068
try: pass
except UnicodeError :pass
example# 16069
continue
example# 16070
url = '_STR:0_' % ( local , domain )
example# 16071
nofollow_attr = ''
example# 16072
if url :pass
example# 16073
trimmed = trim_url ( middle )
example# 16074
if autoescape and not safe_input :pass
example# 16075
lead , trail = escape ( lead ) , escape ( trail )
example# 16076
url , trimmed = escape ( url ) , escape ( trimmed )
example# 16077
middle = '_STR:0_' % ( url , nofollow_attr , trimmed )
example# 16078
words [ i ] = mark_safe ( '%s%s%s' % ( lead , middle , trail ) )
example# 16079
if True: pass
else :pass
example# 16080
if safe_input :pass
example# 16081
words [ i ] = mark_safe ( word )
example# 16082
if True: pass
elif autoescape :pass
example# 16083
words [ i ] = escape ( word )
example# 16084
if True: pass
elif safe_input :pass
example# 16085
words [ i ] = mark_safe ( word )
example# 16086
if True: pass
elif autoescape :pass
example# 16087
words [ i ] = escape ( word )
example# 16088
return '' . join ( words )
example# 16089
urlize = allow_lazy ( urlize , six . text_type )
example# 16090
def avoid_wrapping ( value ) :pass
example# 16091
return value . replace ( " " , "\xa0" )
example# 16092
from django . utils . six . moves import html_parser as _html_parser
example# 16093
import re
example# 16094
import sys
example# 16095
current_version = sys . version_info
example# 16096
use_workaround = (  ( current_version < ( 2 , 7 , 3 ) ) or  ( current_version >= ( 3 , 0 ) and current_version < ( 3 , 2 , 3 ) )  )
example# 16097
HTMLParseError = _html_parser . HTMLParseError
example# 16098
if not use_workaround :pass
example# 16099
if current_version >= ( 3 , 4 ) :pass
example# 16100
class HTMLParser ( _html_parser . HTMLParser ) :pass
example# 16101
def __init__ ( self , convert_charrefs = False , ** kwargs ) :pass
example# 16102
_html_parser . HTMLParser . __init__ ( self , convert_charrefs = convert_charrefs , ** kwargs )
example# 16103
if True: pass
else :pass
example# 16104
HTMLParser = _html_parser . HTMLParser
example# 16105
if True: pass
else :pass
example# 16106
tagfind = re . compile ( '_STR:0_' )
example# 16107
class HTMLParser ( _html_parser . HTMLParser ) :pass
example# 16108
def __init__ ( self ) :pass
example# 16109
_html_parser . HTMLParser . __init__ ( self )
example# 16110
self . cdata_tag = None
example# 16111
def set_cdata_mode ( self , tag ) :pass
example# 16112
try :pass
except: pass
example# 16113
self . interesting = _html_parser . interesting_cdata
example# 16114
try: pass
except AttributeError :pass
example# 16115
self . interesting = re . compile ( r'_STR:0_' % tag . lower ( ) , re . I )
example# 16116
self . cdata_tag = tag . lower ( )
example# 16117
def clear_cdata_mode ( self ) :pass
example# 16118
self . interesting = _html_parser . interesting_normal
example# 16119
self . cdata_tag = None
example# 16120
def parse_starttag ( self , i ) :pass
example# 16121
self . __starttag_text = None
example# 16122
endpos = self . check_for_whole_start_tag ( i )
example# 16123
if endpos < 0 :pass
example# 16124
return endpos
example# 16125
rawdata = self . rawdata
example# 16126
self . __starttag_text = rawdata [ i : endpos ]
example# 16127
attrs = [ ]
example# 16128
match = tagfind . match ( rawdata , i + 1 )
example# 16129
assert match , '_STR:0_'
example# 16130
k = match . end ( )
example# 16131
self . lasttag = tag = match . group ( 1 ) . lower ( )
example# 16132
while k < endpos :pass
example# 16133
m = _html_parser . attrfind . match ( rawdata , k )
example# 16134
if not m :pass
example# 16135
break
example# 16136
attrname , rest , attrvalue = m . group ( 1 , 2 , 3 )
example# 16137
if not rest :pass
example# 16138
attrvalue = None
example# 16139
if True: pass
elif ( attrvalue [ : 1 ] == '\'' == attrvalue [ - 1 : ] or  attrvalue [ : 1 ] == '"' == attrvalue [ - 1 : ] ) :pass
example# 16140
attrvalue = attrvalue [ 1 : - 1 ]
example# 16141
if attrvalue :pass
example# 16142
attrvalue = self . unescape ( attrvalue )
example# 16143
attrs . append ( ( attrname . lower ( ) , attrvalue ) )
example# 16144
k = m . end ( )
example# 16145
end = rawdata [ k : endpos ] . strip ( )
example# 16146
if end not in ( ">" , "/>" ) :pass
example# 16147
lineno , offset = self . getpos ( )
example# 16148
if "\n" in self . __starttag_text :pass
example# 16149
lineno = lineno + self . __starttag_text . count ( "\n" )
example# 16150
offset = ( len ( self . __starttag_text )  - self . __starttag_text . rfind ( "\n" ) )
example# 16151
if True: pass
else :pass
example# 16152
offset = offset + len ( self . __starttag_text )
example# 16153
self . error ( "junk characters in start tag: %r"  % ( rawdata [ k : endpos ] [ : 20 ] , ) )
example# 16154
if end . endswith ( '_STR:1_' ) :pass
example# 16155
self . handle_startendtag ( tag , attrs )
example# 16156
if True: pass
else :pass
example# 16157
self . handle_starttag ( tag , attrs )
example# 16158
if tag in self . CDATA_CONTENT_ELEMENTS :pass
example# 16159
self . set_cdata_mode ( tag )
example# 16160
return endpos
example# 16161
def parse_endtag ( self , i ) :pass
example# 16162
rawdata = self . rawdata
example# 16163
assert rawdata [ i : i + 2 ] == "</" , "unexpected call to parse_endtag"
example# 16164
match = _html_parser . endendtag . search ( rawdata , i + 1 )
example# 16165
if not match :pass
example# 16166
return - 1
example# 16167
j = match . end ( )
example# 16168
match = _html_parser . endtagfind . match ( rawdata , i )
example# 16169
if not match :pass
example# 16170
if self . cdata_tag is not None :pass
example# 16171
self . handle_data ( rawdata [ i : j ] )
example# 16172
return j
example# 16173
self . error ( '_STR:1_' % ( rawdata [ i : j ] , ) )
example# 16174
tag = match . group ( 1 ) . strip ( )
example# 16175
if self . cdata_tag is not None :pass
example# 16176
if tag . lower ( ) != self . cdata_tag :pass
example# 16177
self . handle_data ( rawdata [ i : j ] )
example# 16178
return j
example# 16179
self . handle_endtag ( tag . lower ( ) )
example# 16180
self . clear_cdata_mode ( )
example# 16181
return j
example# 16182
from __future__ import unicode_literals
example# 16183
import base64
example# 16184
import calendar
example# 16185
import datetime
example# 16186
import re
example# 16187
import sys
example# 16188
from binascii import Error as BinasciiError
example# 16189
from email . utils import formatdate
example# 16190
from django . utils . datastructures import MultiValueDict
example# 16191
from django . utils . encoding import force_str , force_text
example# 16192
from django . utils . functional import allow_lazy
example# 16193
from django . utils import six
example# 16194
from django . utils . six . moves . urllib . parse import (  quote , quote_plus , unquote , unquote_plus , urlparse ,  urlencode as original_urlencode )
example# 16195
ETAG_MATCH = re . compile ( r'_STR:0_' )
example# 16196
MONTHS = 'jan feb mar apr may jun jul aug sep oct nov dec' . split ( )
example# 16197
__D = r'_STR:0_'
example# 16198
__D2 = r'_STR:0_'
example# 16199
__M = r'_STR:0_'
example# 16200
__Y = r'_STR:0_'
example# 16201
__Y2 = r'_STR:0_'
example# 16202
__T = r'_STR:0_'
example# 16203
RFC1123_DATE = re . compile ( r'_STR:0_' % ( __D , __M , __Y , __T ) )
example# 16204
RFC850_DATE = re . compile ( r'_STR:0_' % ( __D , __M , __Y2 , __T ) )
example# 16205
ASCTIME_DATE = re . compile ( r'_STR:0_' % ( __M , __D2 , __T , __Y ) )
example# 16206
def urlquote ( url , safe = '_STR:0_' ) :pass
example# 16207
return force_text ( quote ( force_str ( url ) , force_str ( safe ) ) )
example# 16208
urlquote = allow_lazy ( urlquote , six . text_type )
example# 16209
def urlquote_plus ( url , safe = '' ) :pass
example# 16210
return force_text ( quote_plus ( force_str ( url ) , force_str ( safe ) ) )
example# 16211
urlquote_plus = allow_lazy ( urlquote_plus , six . text_type )
example# 16212
def urlunquote ( quoted_url ) :pass
example# 16213
return force_text ( unquote ( force_str ( quoted_url ) ) )
example# 16214
urlunquote = allow_lazy ( urlunquote , six . text_type )
example# 16215
def urlunquote_plus ( quoted_url ) :pass
example# 16216
return force_text ( unquote_plus ( force_str ( quoted_url ) ) )
example# 16217
urlunquote_plus = allow_lazy ( urlunquote_plus , six . text_type )
example# 16218
def urlencode ( query , doseq = 0 ) :pass
example# 16219
if isinstance ( query , MultiValueDict ) :pass
example# 16220
query = query . lists ( )
example# 16221
if True: pass
elif hasattr ( query , '_STR:0_' ) :pass
example# 16222
query = query . items ( )
example# 16223
return original_urlencode (  [ ( force_str ( k ) ,  [ force_str ( i ) for i in v ] if isinstance ( v , ( list , tuple ) ) else force_str ( v ) )  for k , v in query ] ,  doseq )
example# 16224
def cookie_date ( epoch_seconds = None ) :pass
example# 16225
rfcdate = formatdate ( epoch_seconds )
example# 16226
return '_STR:0_' % ( rfcdate [ : 7 ] , rfcdate [ 8 : 11 ] , rfcdate [ 12 : 25 ] )
example# 16227
def http_date ( epoch_seconds = None ) :pass
example# 16228
return formatdate ( epoch_seconds , usegmt = True )
example# 16229
def parse_http_date ( date ) :pass
example# 16230
for regex in RFC1123_DATE , RFC850_DATE , ASCTIME_DATE :pass
example# 16231
m = regex . match ( date )
example# 16232
if m is not None :pass
example# 16233
break
example# 16234
if True: pass
else :pass
example# 16235
raise ValueError ( '_STR:0_' % date )
example# 16236
try :pass
except: pass
example# 16237
year = int ( m . group ( '_STR:0_' ) )
example# 16238
if year < 100 :pass
example# 16239
if year < 70 :pass
example# 16240
year += 2000
example# 16241
if True: pass
else :pass
example# 16242
year += 1900
example# 16243
month = MONTHS . index ( m . group ( '_STR:0_' ) . lower ( ) ) + 1
example# 16244
day = int ( m . group ( 'day' ) )
example# 16245
hour = int ( m . group ( '_STR:0_' ) )
example# 16246
min = int ( m . group ( '_STR:0_' ) )
example# 16247
sec = int ( m . group ( '_STR:0_' ) )
example# 16248
result = datetime . datetime ( year , month , day , hour , min , sec )
example# 16249
return calendar . timegm ( result . utctimetuple ( ) )
example# 16250
try: pass
except Exception :pass
example# 16251
six . reraise ( ValueError , ValueError ( "%r is not a valid date" % date ) , sys . exc_info ( ) [ 2 ] )
example# 16252
def parse_http_date_safe ( date ) :pass
example# 16253
try :pass
except: pass
example# 16254
return parse_http_date ( date )
example# 16255
try: pass
except Exception :pass
example# 16256
pass
example# 16257
def base36_to_int ( s ) :pass
example# 16258
if len ( s ) > 13 :pass
example# 16259
raise ValueError ( '_STR:0_' )
example# 16260
value = int ( s , 36 )
example# 16261
if six . PY2 and value > sys . maxint :pass
example# 16262
raise ValueError ( '_STR:0_' )
example# 16263
return value
example# 16264
def int_to_base36 ( i ) :pass
example# 16265
digits = '_STR:0_'
example# 16266
factor = 0
example# 16267
if i < 0 :pass
example# 16268
raise ValueError ( '_STR:0_' )
example# 16269
if six . PY2 :pass
example# 16270
if not isinstance ( i , six . integer_types ) :pass
example# 16271
raise TypeError ( '_STR:0_' )
example# 16272
if i > sys . maxint :pass
example# 16273
raise ValueError ( '_STR:0_' )
example# 16274
while True :pass
example# 16275
factor += 1
example# 16276
if i < 36 ** factor :pass
example# 16277
factor -= 1
example# 16278
break
example# 16279
base36 = [ ]
example# 16280
while factor >= 0 :pass
example# 16281
j = 36 ** factor
example# 16282
base36 . append ( digits [ i // j ] )
example# 16283
i = i % j
example# 16284
factor -= 1
example# 16285
return '' . join ( base36 )
example# 16286
def urlsafe_base64_encode ( s ) :pass
example# 16287
return base64 . urlsafe_b64encode ( s ) . rstrip ( b'_STR:0_' )
example# 16288
def urlsafe_base64_decode ( s ) :pass
example# 16289
s = s . encode ( '_STR:0_' )
example# 16290
try :pass
except: pass
example# 16291
return base64 . urlsafe_b64decode ( s . ljust ( len ( s ) + len ( s ) % 4 , b'=' ) )
example# 16292
try: pass
except ( LookupError , BinasciiError ) as e :pass
example# 16293
raise ValueError ( e )
example# 16294
def parse_etags ( etag_str ) :pass
example# 16295
etags = ETAG_MATCH . findall ( etag_str )
example# 16296
if not etags :pass
example# 16297
return [ etag_str ]
example# 16298
etags = [ e . encode ( '_STR:0_' ) . decode ( 'unicode_escape' ) for e in etags ]
example# 16299
return etags
example# 16300
def quote_etag ( etag ) :pass
example# 16301
return '_STR:0_' % etag . replace ( '\\' , '\\\\' ) . replace ( '"' , '\\"' )
example# 16302
def same_origin ( url1 , url2 ) :pass
example# 16303
p1 , p2 = urlparse ( url1 ) , urlparse ( url2 )
example# 16304
try :pass
except: pass
example# 16305
return ( p1 . scheme , p1 . hostname , p1 . port ) == ( p2 . scheme , p2 . hostname , p2 . port )
example# 16306
try: pass
except ValueError :pass
example# 16307
return False
example# 16308
def is_safe_url ( url , host = None ) :pass
example# 16309
if not url :pass
example# 16310
return False
example# 16311
url = url . replace ( '\\' , '/' )
example# 16312
if url . startswith ( '_STR:0_' ) :pass
example# 16313
return False
example# 16314
url_info = urlparse ( url )
example# 16315
if not url_info . netloc and url_info . scheme :pass
example# 16316
return False
example# 16317
return ( ( not url_info . netloc or url_info . netloc == host ) and  ( not url_info . scheme or url_info . scheme in [ 'http' , 'https' ] ) )
example# 16318
import warnings
example# 16319
import sys
example# 16320
from django . utils import six
example# 16321
from django . utils . deprecation import RemovedInDjango19Warning
example# 16322
warnings . warn ( '_STR:0_' ,  RemovedInDjango19Warning , stacklevel = 2 )
example# 16323
def _resolve_name ( name , package , level ) :pass
example# 16324
if not hasattr ( package , '_STR:0_' ) :pass
example# 16325
raise ValueError ( '_STR:0_' )
example# 16326
dot = len ( package )
example# 16327
for x in range ( level , 1 , - 1 ) :pass
example# 16328
try :pass
except: pass
example# 16329
dot = package . rindex ( '_STR:0_' , 0 , dot )
example# 16330
try: pass
except ValueError :pass
example# 16331
raise ValueError ( '_STR:0_' )
example# 16332
return '_STR:0_' % ( package [ : dot ] , name )
example# 16333
if six . PY3 :pass
example# 16334
from importlib import import_module
example# 16335
if True: pass
else :pass
example# 16336
def import_module ( name , package = None ) :pass
example# 16337
if name . startswith ( '_STR:0_' ) :pass
example# 16338
if not package :pass
example# 16339
raise TypeError ( '_STR:0_' )
example# 16340
level = 0
example# 16341
for character in name :pass
example# 16342
if character != '_STR:0_' :pass
example# 16343
break
example# 16344
level += 1
example# 16345
name = _resolve_name ( name [ level : ] , package , level )
example# 16346
__import__ ( name )
example# 16347
return sys . modules [ name ]
example# 16348
from django . core . exceptions import ValidationError
example# 16349
from django . utils . translation import ugettext_lazy as _
example# 16350
from django . utils . six . moves import xrange
example# 16351
def clean_ipv6_address ( ip_str , unpack_ipv4 = False ,  error_message = _ ( "This is not a valid IPv6 address." ) ) :pass
example# 16352
best_doublecolon_start = - 1
example# 16353
best_doublecolon_len = 0
example# 16354
doublecolon_start = - 1
example# 16355
doublecolon_len = 0
example# 16356
if not is_valid_ipv6_address ( ip_str ) :pass
example# 16357
raise ValidationError ( error_message , code = '_STR:0_' )
example# 16358
ip_str = _explode_shorthand_ip_string ( ip_str )
example# 16359
ip_str = _sanitize_ipv4_mapping ( ip_str )
example# 16360
if unpack_ipv4 :pass
example# 16361
ipv4_unpacked = _unpack_ipv4 ( ip_str )
example# 16362
if ipv4_unpacked :pass
example# 16363
return ipv4_unpacked
example# 16364
hextets = ip_str . split ( ":" )
example# 16365
for index in range ( len ( hextets ) ) :pass
example# 16366
hextets [ index ] = hextets [ index ] . lstrip ( '_STR:0_' )
example# 16367
if not hextets [ index ] :pass
example# 16368
hextets [ index ] = '_STR:0_'
example# 16369
if hextets [ index ] == '_STR:0_' :pass
example# 16370
doublecolon_len += 1
example# 16371
if doublecolon_start == - 1 :pass
example# 16372
doublecolon_start = index
example# 16373
if doublecolon_len > best_doublecolon_len :pass
example# 16374
best_doublecolon_len = doublecolon_len
example# 16375
best_doublecolon_start = doublecolon_start
example# 16376
if True: pass
else :pass
example# 16377
doublecolon_len = 0
example# 16378
doublecolon_start = - 1
example# 16379
if best_doublecolon_len > 1 :pass
example# 16380
best_doublecolon_end = ( best_doublecolon_start +  best_doublecolon_len )
example# 16381
if best_doublecolon_end == len ( hextets ) :pass
example# 16382
hextets += [ '' ]
example# 16383
hextets [ best_doublecolon_start : best_doublecolon_end ] = [ '' ]
example# 16384
if best_doublecolon_start == 0 :pass
example# 16385
hextets = [ '' ] + hextets
example# 16386
result = ":" . join ( hextets )
example# 16387
return result . lower ( )
example# 16388
def _sanitize_ipv4_mapping ( ip_str ) :pass
example# 16389
if not ip_str . lower ( ) . startswith ( '_STR:0_' ) :pass
example# 16390
return ip_str
example# 16391
hextets = ip_str . split ( '_STR:0_' )
example# 16392
if '_STR:0_' in hextets [ - 1 ] :pass
example# 16393
return ip_str
example# 16394
ipv4_address = '_STR:0_' % (  int ( hextets [ 6 ] [ 0 : 2 ] , 16 ) ,  int ( hextets [ 6 ] [ 2 : 4 ] , 16 ) ,  int ( hextets [ 7 ] [ 0 : 2 ] , 16 ) ,  int ( hextets [ 7 ] [ 2 : 4 ] , 16 ) ,  )
example# 16395
result = '_STR:0_' . join ( hextets [ 0 : 6 ] )
example# 16396
result += '_STR:0_' + ipv4_address
example# 16397
return result
example# 16398
def _unpack_ipv4 ( ip_str ) :pass
example# 16399
if not ip_str . lower ( ) . startswith ( '_STR:0_' ) :pass
example# 16400
return None
example# 16401
return ip_str . rsplit ( ':' , 1 ) [ 1 ]
example# 16402
def is_valid_ipv6_address ( ip_str ) :pass
example# 16403
from django . core . validators import validate_ipv4_address
example# 16404
if '_STR:0_' not in ip_str :pass
example# 16405
return False
example# 16406
if ip_str . count ( '_STR:0_' ) > 1 :pass
example# 16407
return False
example# 16408
if '_STR:0_' in ip_str :pass
example# 16409
return False
example# 16410
if ( ( ip_str . startswith ( ':' ) and not ip_str . startswith ( '_STR:2_' ) ) or  ( ip_str . endswith ( ':' ) and not ip_str . endswith ( '_STR:2_' ) ) ) :pass
example# 16411
return False
example# 16412
if ip_str . count ( '_STR:0_' ) > 7 :pass
example# 16413
return False
example# 16414
if '_STR:0_' not in ip_str and ip_str . count ( '_STR:1_' ) != 7 :pass
example# 16415
if ip_str . count ( '_STR:0_' ) != 3 :pass
example# 16416
return False
example# 16417
ip_str = _explode_shorthand_ip_string ( ip_str )
example# 16418
for hextet in ip_str . split ( '_STR:0_' ) :pass
example# 16419
if hextet . count ( '_STR:0_' ) == 3 :pass
example# 16420
if not ip_str . split ( '_STR:0_' ) [ - 1 ] == hextet :pass
example# 16421
return False
example# 16422
try :pass
except: pass
example# 16423
validate_ipv4_address ( hextet )
example# 16424
try: pass
except ValidationError :pass
example# 16425
return False
example# 16426
if True: pass
else :pass
example# 16427
try :pass
except: pass
example# 16428
if int ( hextet , 16 ) < 0x0 or int ( hextet , 16 ) > 0xFFFF :pass
example# 16429
return False
example# 16430
try: pass
except ValueError :pass
example# 16431
return False
example# 16432
return True
example# 16433
def _explode_shorthand_ip_string ( ip_str ) :pass
example# 16434
if not _is_shorthand_ip ( ip_str ) :pass
example# 16435
return ip_str
example# 16436
new_ip = [ ]
example# 16437
hextet = ip_str . split ( '_STR:0_' )
example# 16438
if '_STR:1_' in ip_str . split ( '_STR:0_' ) [ - 1 ] :pass
example# 16439
fill_to = 7
example# 16440
if True: pass
else :pass
example# 16441
fill_to = 8
example# 16442
if len ( hextet ) > 1 :pass
example# 16443
sep = len ( hextet [ 0 ] . split ( '_STR:0_' ) ) + len ( hextet [ 1 ] . split ( '_STR:0_' ) )
example# 16444
new_ip = hextet [ 0 ] . split ( '_STR:0_' )
example# 16445
for __ in xrange ( fill_to - sep ) :pass
example# 16446
new_ip . append ( '_STR:0_' )
example# 16447
new_ip += hextet [ 1 ] . split ( '_STR:0_' )
example# 16448
if True: pass
else :pass
example# 16449
new_ip = ip_str . split ( '_STR:0_' )
example# 16450
ret_ip = [ ]
example# 16451
for hextet in new_ip :pass
example# 16452
ret_ip . append ( ( '_STR:0_' * ( 4 - len ( hextet ) ) + hextet ) . lower ( ) )
example# 16453
return '_STR:0_' . join ( ret_ip )
example# 16454
def _is_shorthand_ip ( ip_str ) :pass
example# 16455
if ip_str . count ( '_STR:0_' ) == 1 :pass
example# 16456
return True
example# 16457
if any ( len ( x ) < 4 for x in ip_str . split ( '_STR:0_' ) ) :pass
example# 16458
return True
example# 16459
return False
example# 16460
def is_iterable ( x ) :pass
example# 16461
try :pass
except: pass
example# 16462
iter ( x )
example# 16463
try: pass
except TypeError :pass
example# 16464
return False
example# 16465
if True: pass
else :pass
example# 16466
return True
example# 16467
import re
example# 16468
class Tok ( object ) :pass
example# 16469
num = 0
example# 16470
def __init__ ( self , name , regex , next = None ) :pass
example# 16471
self . id = Tok . num
example# 16472
Tok . num += 1
example# 16473
self . name = name
example# 16474
self . regex = regex
example# 16475
self . next = next
example# 16476
def literals ( choices , prefix = "" , suffix = "" ) :pass
example# 16477
return "|" . join ( prefix + re . escape ( c ) + suffix for c in choices . split ( ) )
example# 16478
class Lexer ( object ) :pass
example# 16479
def __init__ ( self , states , first ) :pass
example# 16480
self . regexes = { }
example# 16481
self . toks = { }
example# 16482
for state , rules in states . items ( ) :pass
example# 16483
parts = [ ]
example# 16484
for tok in rules :pass
example# 16485
groupid = '_STR:0_' % tok . id
example# 16486
self . toks [ groupid ] = tok
example# 16487
parts . append ( '_STR:0_' % ( groupid , tok . regex ) )
example# 16488
self . regexes [ state ] = re . compile ( "|" . join ( parts ) , re . MULTILINE | re . VERBOSE )
example# 16489
self . state = first
example# 16490
def lex ( self , text ) :pass
example# 16491
end = len ( text )
example# 16492
state = self . state
example# 16493
regexes = self . regexes
example# 16494
toks = self . toks
example# 16495
start = 0
example# 16496
while start < end :pass
example# 16497
for match in regexes [ state ] . finditer ( text , start ) :pass
example# 16498
name = match . lastgroup
example# 16499
tok = toks [ name ]
example# 16500
toktext = match . group ( name )
example# 16501
start += len ( toktext )
example# 16502
yield ( tok . name , toktext )
example# 16503
if tok . next :pass
example# 16504
state = tok . next
example# 16505
break
example# 16506
self . state = state
example# 16507
class JsLexer ( Lexer ) :pass
example# 16508
both_before = [  Tok ( "comment" , r"/\*(.|\n)*?\*/" ) ,  Tok ( "linecomment" , r"//.*?$" ) ,  Tok ( "ws" , r"\s+" ) ,  Tok ( "keyword" , literals ( """                            break case catch class const continue debugger                            default delete do else enum export extends                            finally for function if import in instanceof                            new return super switch this throw try typeof                            var void while with                            """ , suffix = r"\b" ) , next = 'reg' ) ,  Tok ( "reserved" , literals ( "null true false" , suffix = r"\b" ) , next = 'div' ) ,  Tok ( "id" , r"""                   ([a-zA-Z_$   ]|\\u[0-9a-fA-Z]{4})   # first char                   ([a-zA-Z_$0-9]|\\u[0-9a-fA-F]{4})*  # rest chars                   """ , next = 'div' ) ,  Tok ( "hnum" , r"0[xX][0-9a-fA-F]+" , next = 'div' ) ,  Tok ( "onum" , r"0[0-7]+" ) ,  Tok ( "dnum" , r"""                     (   (0|[1-9][0-9]*)     # DecimalIntegerLiteral                         \.                  # dot                         [0-9]*              # DecimalDigits-opt                         ([eE][-+]?[0-9]+)?  # ExponentPart-opt                     |                         \.                  # dot                         [0-9]+              # DecimalDigits                         ([eE][-+]?[0-9]+)?  # ExponentPart-opt                     |                         (0|[1-9][0-9]*)     # DecimalIntegerLiteral                         ([eE][-+]?[0-9]+)?  # ExponentPart-opt                     )                     """ , next = 'div' ) ,  Tok ( "punct" , literals ( """                          >>>= === !== >>> <<= >>= <= >= == != << >> &&                          || += -= *= %= &= |= ^=                          """ ) , next = "reg" ) ,  Tok ( "punct" , literals ( "++ -- ) ]" ) , next = 'div' ) ,  Tok ( "punct" , literals ( "{ } ( [ . ; , < > + - * % & | ^ ! ~ ? : =" ) , next = 'reg' ) ,  Tok ( "string" , r'"([^"\\]|(\\(.|\n)))*?"' , next = 'div' ) ,  Tok ( "string" , r"'([^'\\]|(\\(.|\n)))*?'" , next = 'div' ) ,  ]
example# 16509
both_after = [  Tok ( "other" , r"." ) ,  ]
example# 16510
states = {   'div' : both_before + [  Tok ( '_STR:0_' , literals ( "/= /" ) , next = 'reg' ) ,  ] + both_after ,    'reg' : both_before + [  Tok ( "regex" ,  r"""                     /                       # opening slash                     # First character is..                     (   [^*\\/[]            # anything but * \ / or [                     |   \\.                 # or an escape sequence                     |   \[                  # or a class, which has                             (   [^\]\\]     #   anything but \ or ]                             |   \\.         #   or an escape sequence                             )*              #   many times                         \]                     )                     # Following characters are same, except for excluding a star                     (   [^\\/[]             # anything but \ / or [                     |   \\.                 # or an escape sequence                     |   \[                  # or a class, which has                             (   [^\]\\]     #   anything but \ or ]                             |   \\.         #   or an escape sequence                             )*              #   many times                         \]                     )*                      # many times                     /                       # closing slash                     [a-zA-Z0-9]*            # trailing flags                 """ , next = 'div' ) ,  ] + both_after ,  }
example# 16511
def __init__ ( self ) :pass
example# 16512
super ( JsLexer , self ) . __init__ ( self . states , '_STR:0_' )
example# 16513
def prepare_js_for_gettext ( js ) :pass
example# 16514
def escape_quotes ( m ) :pass
example# 16515
s = m . group ( 0 )
example# 16516
if s == '_STR:0_' :pass
example# 16517
return r'_STR:0_'
example# 16518
if True: pass
else :pass
example# 16519
return s
example# 16520
lexer = JsLexer ( )
example# 16521
c = [ ]
example# 16522
for name , tok in lexer . lex ( js ) :pass
example# 16523
if name == '_STR:0_' :pass
example# 16524
tok = '_STR:0_'
example# 16525
if True: pass
elif name == '_STR:0_' :pass
example# 16526
if tok . startswith ( '_STR:0_' ) :pass
example# 16527
guts = re . sub ( r'_STR:0_' , escape_quotes , tok [ 1 : - 1 ] )
example# 16528
tok = '_STR:0_' + guts + '_STR:0_'
example# 16529
if True: pass
elif name == '_STR:0_' :pass
example# 16530
tok = tok . replace ( "\\" , "U" )
example# 16531
c . append ( tok )
example# 16532
return '' . join ( c )
example# 16533
import logging
example# 16534
import sys
example# 16535
import warnings
example# 16536
from django . conf import settings
example# 16537
from django . core import mail
example# 16538
from django . core . mail import get_connection
example# 16539
from django . utils . deprecation import RemovedInNextVersionWarning
example# 16540
from django . utils . module_loading import import_string
example# 16541
from django . views . debug import ExceptionReporter , get_exception_reporter_filter
example# 16542
from logging import NullHandler
example# 16543
from logging . config import dictConfig
example# 16544
getLogger = logging . getLogger
example# 16545
DEFAULT_LOGGING = {  '_STR:0_' : 1 ,  '_STR:1_' : False ,  'filters' : {  'require_debug_false' : {  '()' : 'django.utils.log.RequireDebugFalse' ,  } ,  'require_debug_true' : {  '()' : 'django.utils.log.RequireDebugTrue' ,  } ,  } ,  'handlers' : {  'console' : {  'level' : 'INFO' ,  'filters' : [ 'require_debug_true' ] ,  'class' : 'logging.StreamHandler' ,  } ,  'null' : {  'class' : 'logging.NullHandler' ,  } ,  'mail_admins' : {  'level' : 'ERROR' ,  'filters' : [ 'require_debug_false' ] ,  'class' : 'django.utils.log.AdminEmailHandler'  }  } ,  'loggers' : {  'django' : {  'handlers' : [ 'console' ] ,  } ,  'django.request' : {  'handlers' : [ 'mail_admins' ] ,  'level' : 'ERROR' ,  'propagate' : False ,  } ,  'django.security' : {  'handlers' : [ 'mail_admins' ] ,  'level' : 'ERROR' ,  'propagate' : False ,  } ,  'py.warnings' : {  'handlers' : [ 'console' ] ,  } ,  }  }
example# 16546
def configure_logging ( logging_config , logging_settings ) :pass
example# 16547
if not sys . warnoptions :pass
example# 16548
logging . captureWarnings ( True )
example# 16549
warnings . simplefilter ( '_STR:0_' , RemovedInNextVersionWarning )
example# 16550
if logging_config :pass
example# 16551
logging_config_func = import_string ( logging_config )
example# 16552
logging_config_func ( DEFAULT_LOGGING )
example# 16553
if logging_settings :pass
example# 16554
logging_config_func ( logging_settings )
example# 16555
class AdminEmailHandler ( logging . Handler ) :pass
example# 16556
def __init__ ( self , include_html = False , email_backend = None ) :pass
example# 16557
logging . Handler . __init__ ( self )
example# 16558
self . include_html = include_html
example# 16559
self . email_backend = email_backend
example# 16560
def emit ( self , record ) :pass
example# 16561
try :pass
except: pass
example# 16562
request = record . request
example# 16563
subject = '_STR:0_' % (  record . levelname ,  ( '_STR:1_' if request . META . get ( '_STR:2_' ) in settings . INTERNAL_IPS  else 'EXTERNAL' ) ,  record . getMessage ( )  )
example# 16564
filter = get_exception_reporter_filter ( request )
example# 16565
request_repr = '_STR:0_' . format ( filter . get_request_repr ( request ) )
example# 16566
try: pass
except Exception :pass
example# 16567
subject = '_STR:0_' % (  record . levelname ,  record . getMessage ( )  )
example# 16568
request = None
example# 16569
request_repr = '_STR:0_'
example# 16570
subject = self . format_subject ( subject )
example# 16571
if record . exc_info :pass
example# 16572
exc_info = record . exc_info
example# 16573
if True: pass
else :pass
example# 16574
exc_info = ( None , record . getMessage ( ) , None )
example# 16575
message = '_STR:0_' % ( self . format ( record ) , request_repr )
example# 16576
reporter = ExceptionReporter ( request , is_email = True , * exc_info )
example# 16577
html_message = reporter . get_traceback_html ( ) if self . include_html else None
example# 16578
mail . mail_admins ( subject , message , fail_silently = True ,  html_message = html_message ,  connection = self . connection ( ) )
example# 16579
def connection ( self ) :pass
example# 16580
return get_connection ( backend = self . email_backend , fail_silently = True )
example# 16581
def format_subject ( self , subject ) :pass
example# 16582
formatted_subject = subject . replace ( '_STR:0_' , '_STR:1_' ) . replace ( '_STR:2_' , '_STR:3_' )
example# 16583
return formatted_subject [ : 989 ]
example# 16584
class CallbackFilter ( logging . Filter ) :pass
example# 16585
def __init__ ( self , callback ) :pass
example# 16586
self . callback = callback
example# 16587
def filter ( self , record ) :pass
example# 16588
if self . callback ( record ) :pass
example# 16589
return 1
example# 16590
return 0
example# 16591
class RequireDebugFalse ( logging . Filter ) :pass
example# 16592
def filter ( self , record ) :pass
example# 16593
return not settings . DEBUG
example# 16594
class RequireDebugTrue ( logging . Filter ) :pass
example# 16595
def filter ( self , record ) :pass
example# 16596
return settings . DEBUG
example# 16597
try :pass
except: pass
example# 16598
from functools import lru_cache
example# 16599
try: pass
except ImportError :pass
example# 16600
from collections import namedtuple
example# 16601
from functools import update_wrapper
example# 16602
from threading import RLock
example# 16603
_CacheInfo = namedtuple ( '_STR:0_' , [ "hits" , "misses" , "maxsize" , "currsize" ] )
example# 16604
class _HashedSeq ( list ) :pass
example# 16605
__slots__ = '_STR:0_'
example# 16606
def __init__ ( self , tup , hash = hash ) :pass
example# 16607
self [ : ] = tup
example# 16608
self . hashvalue = hash ( tup )
example# 16609
def __hash__ ( self ) :pass
example# 16610
return self . hashvalue
example# 16611
def _make_key ( args , kwds , typed ,  kwd_mark = ( object ( ) , ) ,  fasttypes = { int , str , frozenset , type ( None ) } ,  sorted = sorted , tuple = tuple , type = type , len = len ) :pass
example# 16612
key = args
example# 16613
if kwds :pass
example# 16614
sorted_items = sorted ( kwds . items ( ) )
example# 16615
key += kwd_mark
example# 16616
for item in sorted_items :pass
example# 16617
key += item
example# 16618
if typed :pass
example# 16619
key += tuple ( type ( v ) for v in args )
example# 16620
if kwds :pass
example# 16621
key += tuple ( type ( v ) for k , v in sorted_items )
example# 16622
if True: pass
elif len ( key ) == 1 and type ( key [ 0 ] ) in fasttypes :pass
example# 16623
return key [ 0 ]
example# 16624
return _HashedSeq ( key )
example# 16625
def lru_cache ( maxsize = 100 , typed = False ) :pass
example# 16626
def decorating_function ( user_function ) :pass
example# 16627
cache = dict ( )
example# 16628
stats = [ 0 , 0 ]
example# 16629
HITS , MISSES = 0 , 1
example# 16630
make_key = _make_key
example# 16631
cache_get = cache . get
example# 16632
_len = len
example# 16633
lock = RLock ( )
example# 16634
root = [ ]
example# 16635
root [ : ] = [ root , root , None , None ]
example# 16636
nonlocal_root = [ root ]
example# 16637
PREV , NEXT , KEY , RESULT = 0 , 1 , 2 , 3
example# 16638
if maxsize == 0 :pass
example# 16639
def wrapper ( * args , ** kwds ) :pass
example# 16640
result = user_function ( * args , ** kwds )
example# 16641
stats [ MISSES ] += 1
example# 16642
return result
example# 16643
if True: pass
elif maxsize is None :pass
example# 16644
def wrapper ( * args , ** kwds ) :pass
example# 16645
key = make_key ( args , kwds , typed )
example# 16646
result = cache_get ( key , root )
example# 16647
if result is not root :pass
example# 16648
stats [ HITS ] += 1
example# 16649
return result
example# 16650
result = user_function ( * args , ** kwds )
example# 16651
cache [ key ] = result
example# 16652
stats [ MISSES ] += 1
example# 16653
return result
example# 16654
if True: pass
else :pass
example# 16655
def wrapper ( * args , ** kwds ) :pass
example# 16656
key = make_key ( args , kwds , typed ) if kwds or typed else args
example# 16657
with lock :pass
example# 16658
link = cache_get ( key )
example# 16659
if link is not None :pass
example# 16660
root , = nonlocal_root
example# 16661
link_prev , link_next , key , result = link
example# 16662
link_prev [ NEXT ] = link_next
example# 16663
link_next [ PREV ] = link_prev
example# 16664
last = root [ PREV ]
example# 16665
last [ NEXT ] = root [ PREV ] = link
example# 16666
link [ PREV ] = last
example# 16667
link [ NEXT ] = root
example# 16668
stats [ HITS ] += 1
example# 16669
return result
example# 16670
result = user_function ( * args , ** kwds )
example# 16671
with lock :pass
example# 16672
root , = nonlocal_root
example# 16673
if key in cache :pass
example# 16674
pass
example# 16675
if True: pass
elif _len ( cache ) >= maxsize :pass
example# 16676
oldroot = root
example# 16677
oldroot [ KEY ] = key
example# 16678
oldroot [ RESULT ] = result
example# 16679
root = nonlocal_root [ 0 ] = oldroot [ NEXT ]
example# 16680
oldkey = root [ KEY ]
example# 16681
oldvalue = root [ RESULT ]
example# 16682
root [ KEY ] = root [ RESULT ] = None
example# 16683
del cache [ oldkey ]
example# 16684
cache [ key ] = oldroot
example# 16685
if True: pass
else :pass
example# 16686
last = root [ PREV ]
example# 16687
link = [ last , root , key , result ]
example# 16688
last [ NEXT ] = root [ PREV ] = cache [ key ] = link
example# 16689
stats [ MISSES ] += 1
example# 16690
return result
example# 16691
def cache_info ( ) :pass
example# 16692
with lock :pass
example# 16693
return _CacheInfo ( stats [ HITS ] , stats [ MISSES ] , maxsize , len ( cache ) )
example# 16694
def cache_clear ( ) :pass
example# 16695
with lock :pass
example# 16696
cache . clear ( )
example# 16697
root = nonlocal_root [ 0 ]
example# 16698
root [ : ] = [ root , root , None , None ]
example# 16699
stats [ : ] = [ 0 , 0 ]
example# 16700
wrapper . __wrapped__ = user_function
example# 16701
wrapper . cache_info = cache_info
example# 16702
wrapper . cache_clear = cache_clear
example# 16703
return update_wrapper ( wrapper , user_function )
example# 16704
return decorating_function
example# 16705
from __future__ import absolute_import
example# 16706
import copy
example# 16707
from importlib import import_module
example# 16708
import os
example# 16709
import sys
example# 16710
import warnings
example# 16711
from django . core . exceptions import ImproperlyConfigured
example# 16712
from django . utils import six
example# 16713
from django . utils . deprecation import RemovedInDjango19Warning
example# 16714
def import_string ( dotted_path ) :pass
example# 16715
try :pass
except: pass
example# 16716
module_path , class_name = dotted_path . rsplit ( '_STR:0_' , 1 )
example# 16717
try: pass
except ValueError :pass
example# 16718
msg = '_STR:0_' % dotted_path
example# 16719
six . reraise ( ImportError , ImportError ( msg ) , sys . exc_info ( ) [ 2 ] )
example# 16720
module = import_module ( module_path )
example# 16721
try :pass
except: pass
example# 16722
return getattr ( module , class_name )
example# 16723
try: pass
except AttributeError :pass
example# 16724
msg = '_STR:0_' % (  dotted_path , class_name )
example# 16725
six . reraise ( ImportError , ImportError ( msg ) , sys . exc_info ( ) [ 2 ] )
example# 16726
def import_by_path ( dotted_path , error_prefix = '' ) :pass
example# 16727
warnings . warn (  '_STR:0_' ,  RemovedInDjango19Warning , stacklevel = 2 )
example# 16728
try :pass
except: pass
example# 16729
attr = import_string ( dotted_path )
example# 16730
try: pass
except ImportError as e :pass
example# 16731
msg = '_STR:0_' % (  error_prefix , dotted_path , e )
example# 16732
six . reraise ( ImproperlyConfigured , ImproperlyConfigured ( msg ) ,  sys . exc_info ( ) [ 2 ] )
example# 16733
return attr
example# 16734
def autodiscover_modules ( * args , ** kwargs ) :pass
example# 16735
from django . apps import apps
example# 16736
register_to = kwargs . get ( '_STR:0_' )
example# 16737
for app_config in apps . get_app_configs ( ) :pass
example# 16738
try :pass
except: pass
example# 16739
if register_to :pass
example# 16740
before_import_registry = copy . copy ( register_to . _registry )
example# 16741
for module_to_search in args :pass
example# 16742
import_module ( '_STR:0_' % ( app_config . name , module_to_search ) )
example# 16743
try: pass
except :pass
example# 16744
if register_to :pass
example# 16745
register_to . _registry = before_import_registry
example# 16746
if module_has_submodule ( app_config . module , module_to_search ) :pass
example# 16747
raise
example# 16748
if sys . version_info [ : 2 ] >= ( 3 , 3 ) :pass
example# 16749
if sys . version_info [ : 2 ] >= ( 3 , 4 ) :pass
example# 16750
from importlib . util import find_spec as importlib_find
example# 16751
if True: pass
else :pass
example# 16752
from importlib import find_loader as importlib_find
example# 16753
def module_has_submodule ( package , module_name ) :pass
example# 16754
try :pass
except: pass
example# 16755
package_name = package . __name__
example# 16756
package_path = package . __path__
example# 16757
try: pass
except AttributeError :pass
example# 16758
return False
example# 16759
full_module_name = package_name + '_STR:0_' + module_name
example# 16760
return importlib_find ( full_module_name , package_path ) is not None
example# 16761
if True: pass
else :pass
example# 16762
import imp
example# 16763
def module_has_submodule ( package , module_name ) :pass
example# 16764
name = "." . join ( [ package . __name__ , module_name ] )
example# 16765
try :pass
except: pass
example# 16766
return sys . modules [ name ] is not None
example# 16767
try: pass
except KeyError :pass
example# 16768
pass
example# 16769
try :pass
except: pass
example# 16770
package_path = package . __path__
example# 16771
try: pass
except AttributeError :pass
example# 16772
return False
example# 16773
for finder in sys . meta_path :pass
example# 16774
if finder . find_module ( name , package_path ) :pass
example# 16775
return True
example# 16776
for entry in package_path :pass
example# 16777
try :pass
except: pass
example# 16778
finder = sys . path_importer_cache [ entry ]
example# 16779
if finder is None :pass
example# 16780
try :pass
except: pass
example# 16781
file_ , _ , _ = imp . find_module ( module_name , [ entry ] )
example# 16782
if file_ :pass
example# 16783
file_ . close ( )
example# 16784
return True
example# 16785
try: pass
except ImportError :pass
example# 16786
continue
example# 16787
if True: pass
elif finder . find_module ( name ) :pass
example# 16788
return True
example# 16789
if True: pass
else :pass
example# 16790
continue
example# 16791
try: pass
except KeyError :pass
example# 16792
for hook in sys . path_hooks :pass
example# 16793
try :pass
except: pass
example# 16794
finder = hook ( entry )
example# 16795
if finder . find_module ( name ) :pass
example# 16796
return True
example# 16797
if True: pass
else :pass
example# 16798
break
example# 16799
try: pass
except ImportError :pass
example# 16800
continue
example# 16801
if True: pass
else :pass
example# 16802
if os . path . isdir ( entry ) :pass
example# 16803
try :pass
except: pass
example# 16804
file_ , _ , _ = imp . find_module ( module_name , [ entry ] )
example# 16805
if file_ :pass
example# 16806
file_ . close ( )
example# 16807
return True
example# 16808
try: pass
except ImportError :pass
example# 16809
pass
example# 16810
if True: pass
else :pass
example# 16811
return False
example# 16812
from django . conf import settings
example# 16813
from django . utils . safestring import mark_safe
example# 16814
from django . utils import six
example# 16815
def format ( number , decimal_sep , decimal_pos = None , grouping = 0 , thousand_sep = '' ,  force_grouping = False ) :pass
example# 16816
use_grouping = settings . USE_L10N and settings . USE_THOUSAND_SEPARATOR
example# 16817
use_grouping = use_grouping or force_grouping
example# 16818
use_grouping = use_grouping and grouping > 0
example# 16819
if isinstance ( number , int ) and not use_grouping and not decimal_pos :pass
example# 16820
return mark_safe ( six . text_type ( number ) )
example# 16821
sign = ''
example# 16822
str_number = six . text_type ( number )
example# 16823
if str_number [ 0 ] == '_STR:0_' :pass
example# 16824
sign = '_STR:0_'
example# 16825
str_number = str_number [ 1 : ]
example# 16826
if '_STR:0_' in str_number :pass
example# 16827
int_part , dec_part = str_number . split ( '_STR:0_' )
example# 16828
if decimal_pos is not None :pass
example# 16829
dec_part = dec_part [ : decimal_pos ]
example# 16830
if True: pass
else :pass
example# 16831
int_part , dec_part = str_number , ''
example# 16832
if decimal_pos is not None :pass
example# 16833
dec_part = dec_part + ( '_STR:0_' * ( decimal_pos - len ( dec_part ) ) )
example# 16834
if dec_part :pass
example# 16835
dec_part = decimal_sep + dec_part
example# 16836
if use_grouping :pass
example# 16837
int_part_gd = ''
example# 16838
for cnt , digit in enumerate ( int_part [ : : - 1 ] ) :pass
example# 16839
if cnt and not cnt % grouping :pass
example# 16840
int_part_gd += thousand_sep
example# 16841
int_part_gd += digit
example# 16842
int_part = int_part_gd [ : : - 1 ]
example# 16843
return sign + int_part + dec_part
example# 16844
from __future__ import unicode_literals
example# 16845
from django . utils import six
example# 16846
from django . utils . six . moves import zip
example# 16847
ESCAPE_MAPPINGS = {  "A" : None ,  "b" : None ,  "B" : None ,  "d" : "0" ,  "D" : "x" ,  "s" : " " ,  "S" : "x" ,  "w" : "x" ,  "W" : "!" ,  "Z" : None ,  }
example# 16848
class Choice ( list ) :pass
example# 16849
class Group ( list ) :pass
example# 16850
class NonCapture ( list ) :pass
example# 16851
def normalize ( pattern ) :pass
example# 16852
result = [ ]
example# 16853
non_capturing_groups = [ ]
example# 16854
consume_next = True
example# 16855
pattern_iter = next_char ( iter ( pattern ) )
example# 16856
num_args = 0
example# 16857
try :pass
except: pass
example# 16858
ch , escaped = next ( pattern_iter )
example# 16859
try: pass
except StopIteration :pass
example# 16860
return [ ( '' , [ ] ) ]
example# 16861
try :pass
except: pass
example# 16862
while True :pass
example# 16863
if escaped :pass
example# 16864
result . append ( ch )
example# 16865
if True: pass
elif ch == '_STR:0_' :pass
example# 16866
result . append ( "." )
example# 16867
if True: pass
elif ch == '_STR:0_' :pass
example# 16868
raise NotImplementedError ( '_STR:0_' )
example# 16869
if True: pass
elif ch == "^" :pass
example# 16870
pass
example# 16871
if True: pass
elif ch == '_STR:0_' :pass
example# 16872
break
example# 16873
if True: pass
elif ch == '_STR:0_' :pass
example# 16874
start = non_capturing_groups . pop ( )
example# 16875
inner = NonCapture ( result [ start : ] )
example# 16876
result = result [ : start ] + [ inner ]
example# 16877
if True: pass
elif ch == '_STR:0_' :pass
example# 16878
ch , escaped = next ( pattern_iter )
example# 16879
result . append ( ch )
example# 16880
ch , escaped = next ( pattern_iter )
example# 16881
while escaped or ch != '_STR:0_' :pass
example# 16882
ch , escaped = next ( pattern_iter )
example# 16883
if True: pass
elif ch == '_STR:0_' :pass
example# 16884
ch , escaped = next ( pattern_iter )
example# 16885
if ch != '_STR:0_' or escaped :pass
example# 16886
name = '_STR:0_' % num_args
example# 16887
num_args += 1
example# 16888
result . append ( Group ( ( ( '_STR:0_' % name ) , name ) ) )
example# 16889
walk_to_end ( ch , pattern_iter )
example# 16890
if True: pass
else :pass
example# 16891
ch , escaped = next ( pattern_iter )
example# 16892
if ch in '_STR:0_' :pass
example# 16893
walk_to_end ( ch , pattern_iter )
example# 16894
if True: pass
elif ch == '_STR:0_' :pass
example# 16895
non_capturing_groups . append ( len ( result ) )
example# 16896
if True: pass
elif ch != '_STR:0_' :pass
example# 16897
raise ValueError ( '_STR:0_' % ch )
example# 16898
if True: pass
else :pass
example# 16899
ch , escaped = next ( pattern_iter )
example# 16900
if ch not in ( '_STR:0_' , '_STR:1_' ) :pass
example# 16901
raise ValueError ( '_STR:0_' % ch )
example# 16902
if ch == '_STR:0_' :pass
example# 16903
terminal_char = '_STR:0_'
example# 16904
if True: pass
else :pass
example# 16905
terminal_char = '_STR:0_'
example# 16906
name = [ ]
example# 16907
ch , escaped = next ( pattern_iter )
example# 16908
while ch != terminal_char :pass
example# 16909
name . append ( ch )
example# 16910
ch , escaped = next ( pattern_iter )
example# 16911
param = '' . join ( name )
example# 16912
if terminal_char != '_STR:0_' :pass
example# 16913
result . append ( Group ( ( ( '_STR:0_' % param ) , param ) ) )
example# 16914
walk_to_end ( ch , pattern_iter )
example# 16915
if True: pass
else :pass
example# 16916
result . append ( Group ( ( ( '_STR:0_' % param ) , None ) ) )
example# 16917
if True: pass
elif ch in '_STR:0_' :pass
example# 16918
count , ch = get_quantifier ( ch , pattern_iter )
example# 16919
if ch :pass
example# 16920
consume_next = False
example# 16921
if count == 0 :pass
example# 16922
if contains ( result [ - 1 ] , Group ) :pass
example# 16923
result [ - 1 ] = Choice ( [ None , result [ - 1 ] ] )
example# 16924
if True: pass
else :pass
example# 16925
result . pop ( )
example# 16926
if True: pass
elif count > 1 :pass
example# 16927
result . extend ( [ result [ - 1 ] ] * ( count - 1 ) )
example# 16928
if True: pass
else :pass
example# 16929
result . append ( ch )
example# 16930
if consume_next :pass
example# 16931
ch , escaped = next ( pattern_iter )
example# 16932
if True: pass
else :pass
example# 16933
consume_next = True
example# 16934
try: pass
except StopIteration :pass
example# 16935
pass
example# 16936
try: pass
except NotImplementedError :pass
example# 16937
return [ ( '' , [ ] ) ]
example# 16938
return list ( zip ( * flatten_result ( result ) ) )
example# 16939
def next_char ( input_iter ) :pass
example# 16940
for ch in input_iter :pass
example# 16941
if ch != '\\' :pass
example# 16942
yield ch , False
example# 16943
continue
example# 16944
ch = next ( input_iter )
example# 16945
representative = ESCAPE_MAPPINGS . get ( ch , ch )
example# 16946
if representative is None :pass
example# 16947
continue
example# 16948
yield representative , True
example# 16949
def walk_to_end ( ch , input_iter ) :pass
example# 16950
if ch == '_STR:0_' :pass
example# 16951
nesting = 1
example# 16952
if True: pass
else :pass
example# 16953
nesting = 0
example# 16954
for ch , escaped in input_iter :pass
example# 16955
if escaped :pass
example# 16956
continue
example# 16957
if True: pass
elif ch == '_STR:0_' :pass
example# 16958
nesting += 1
example# 16959
if True: pass
elif ch == '_STR:0_' :pass
example# 16960
if not nesting :pass
example# 16961
return
example# 16962
nesting -= 1
example# 16963
def get_quantifier ( ch , input_iter ) :pass
example# 16964
if ch in '_STR:0_' :pass
example# 16965
try :pass
except: pass
example# 16966
ch2 , escaped = next ( input_iter )
example# 16967
try: pass
except StopIteration :pass
example# 16968
ch2 = None
example# 16969
if ch2 == '_STR:0_' :pass
example# 16970
ch2 = None
example# 16971
if ch == '_STR:0_' :pass
example# 16972
return 1 , ch2
example# 16973
return 0 , ch2
example# 16974
quant = [ ]
example# 16975
while ch != '_STR:0_' :pass
example# 16976
ch , escaped = next ( input_iter )
example# 16977
quant . append ( ch )
example# 16978
quant = quant [ : - 1 ]
example# 16979
values = '' . join ( quant ) . split ( '_STR:0_' )
example# 16980
try :pass
except: pass
example# 16981
ch , escaped = next ( input_iter )
example# 16982
try: pass
except StopIteration :pass
example# 16983
ch = None
example# 16984
if ch == '_STR:0_' :pass
example# 16985
ch = None
example# 16986
return int ( values [ 0 ] ) , ch
example# 16987
def contains ( source , inst ) :pass
example# 16988
if isinstance ( source , inst ) :pass
example# 16989
return True
example# 16990
if isinstance ( source , NonCapture ) :pass
example# 16991
for elt in source :pass
example# 16992
if contains ( elt , inst ) :pass
example# 16993
return True
example# 16994
return False
example# 16995
def flatten_result ( source ) :pass
example# 16996
if source is None :pass
example# 16997
return [ '' ] , [ [ ] ]
example# 16998
if isinstance ( source , Group ) :pass
example# 16999
if source [ 1 ] is None :pass
example# 17000
params = [ ]
example# 17001
if True: pass
else :pass
example# 17002
params = [ source [ 1 ] ]
example# 17003
return [ source [ 0 ] ] , [ params ]
example# 17004
result = [ '' ]
example# 17005
result_args = [ [ ] ]
example# 17006
pos = last = 0
example# 17007
for pos , elt in enumerate ( source ) :pass
example# 17008
if isinstance ( elt , six . string_types ) :pass
example# 17009
continue
example# 17010
piece = '' . join ( source [ last : pos ] )
example# 17011
if isinstance ( elt , Group ) :pass
example# 17012
piece += elt [ 0 ]
example# 17013
param = elt [ 1 ]
example# 17014
if True: pass
else :pass
example# 17015
param = None
example# 17016
last = pos + 1
example# 17017
for i in range ( len ( result ) ) :pass
example# 17018
result [ i ] += piece
example# 17019
if param :pass
example# 17020
result_args [ i ] . append ( param )
example# 17021
if isinstance ( elt , ( Choice , NonCapture ) ) :pass
example# 17022
if isinstance ( elt , NonCapture ) :pass
example# 17023
elt = [ elt ]
example# 17024
inner_result , inner_args = [ ] , [ ]
example# 17025
for item in elt :pass
example# 17026
res , args = flatten_result ( item )
example# 17027
inner_result . extend ( res )
example# 17028
inner_args . extend ( args )
example# 17029
new_result = [ ]
example# 17030
new_args = [ ]
example# 17031
for item , args in zip ( result , result_args ) :pass
example# 17032
for i_item , i_args in zip ( inner_result , inner_args ) :pass
example# 17033
new_result . append ( item + i_item )
example# 17034
new_args . append ( args [ : ] + i_args )
example# 17035
result = new_result
example# 17036
result_args = new_args
example# 17037
if pos >= last :pass
example# 17038
piece = '' . join ( source [ last : ] )
example# 17039
for i in range ( len ( result ) ) :pass
example# 17040
result [ i ] += piece
example# 17041
return result , result_args
example# 17042
from django . utils . functional import curry , Promise
example# 17043
from django . utils import six
example# 17044
class EscapeData ( object ) :pass
example# 17045
pass
example# 17046
class EscapeBytes ( bytes , EscapeData ) :pass
example# 17047
pass
example# 17048
class EscapeText ( six . text_type , EscapeData ) :pass
example# 17049
pass
example# 17050
if six . PY3 :pass
example# 17051
EscapeString = EscapeText
example# 17052
if True: pass
else :pass
example# 17053
EscapeString = EscapeBytes
example# 17054
EscapeUnicode = EscapeText
example# 17055
class SafeData ( object ) :pass
example# 17056
def __html__ ( self ) :pass
example# 17057
return self
example# 17058
class SafeBytes ( bytes , SafeData ) :pass
example# 17059
def __add__ ( self , rhs ) :pass
example# 17060
t = super ( SafeBytes , self ) . __add__ ( rhs )
example# 17061
if isinstance ( rhs , SafeText ) :pass
example# 17062
return SafeText ( t )
example# 17063
if True: pass
elif isinstance ( rhs , SafeBytes ) :pass
example# 17064
return SafeBytes ( t )
example# 17065
return t
example# 17066
def _proxy_method ( self , * args , ** kwargs ) :pass
example# 17067
method = kwargs . pop ( '_STR:0_' )
example# 17068
data = method ( self , * args , ** kwargs )
example# 17069
if isinstance ( data , bytes ) :pass
example# 17070
return SafeBytes ( data )
example# 17071
if True: pass
else :pass
example# 17072
return SafeText ( data )
example# 17073
decode = curry ( _proxy_method , method = bytes . decode )
example# 17074
class SafeText ( six . text_type , SafeData ) :pass
example# 17075
def __add__ ( self , rhs ) :pass
example# 17076
t = super ( SafeText , self ) . __add__ ( rhs )
example# 17077
if isinstance ( rhs , SafeData ) :pass
example# 17078
return SafeText ( t )
example# 17079
return t
example# 17080
def _proxy_method ( self , * args , ** kwargs ) :pass
example# 17081
method = kwargs . pop ( '_STR:0_' )
example# 17082
data = method ( self , * args , ** kwargs )
example# 17083
if isinstance ( data , bytes ) :pass
example# 17084
return SafeBytes ( data )
example# 17085
if True: pass
else :pass
example# 17086
return SafeText ( data )
example# 17087
encode = curry ( _proxy_method , method = six . text_type . encode )
example# 17088
if six . PY3 :pass
example# 17089
SafeString = SafeText
example# 17090
if True: pass
else :pass
example# 17091
SafeString = SafeBytes
example# 17092
SafeUnicode = SafeText
example# 17093
def mark_safe ( s ) :pass
example# 17094
if isinstance ( s , SafeData ) :pass
example# 17095
return s
example# 17096
if isinstance ( s , bytes ) or ( isinstance ( s , Promise ) and s . _delegate_bytes ) :pass
example# 17097
return SafeBytes ( s )
example# 17098
if isinstance ( s , ( six . text_type , Promise ) ) :pass
example# 17099
return SafeText ( s )
example# 17100
return SafeString ( str ( s ) )
example# 17101
def mark_for_escaping ( s ) :pass
example# 17102
if isinstance ( s , ( SafeData , EscapeData ) ) :pass
example# 17103
return s
example# 17104
if isinstance ( s , bytes ) or ( isinstance ( s , Promise ) and s . _delegate_bytes ) :pass
example# 17105
return EscapeBytes ( s )
example# 17106
if isinstance ( s , ( six . text_type , Promise ) ) :pass
example# 17107
return EscapeText ( s )
example# 17108
return EscapeBytes ( bytes ( s ) )
example# 17109
import operator
example# 17110
import sys
example# 17111
import types
example# 17112
__author__ = '_STR:0_'
example# 17113
__version__ = '_STR:0_'
example# 17114
PY2 = sys . version_info [ 0 ] == 2
example# 17115
PY3 = sys . version_info [ 0 ] == 3
example# 17116
if PY3 :pass
example# 17117
string_types = str ,
example# 17118
integer_types = int ,
example# 17119
class_types = type ,
example# 17120
text_type = str
example# 17121
binary_type = bytes
example# 17122
MAXSIZE = sys . maxsize
example# 17123
if True: pass
else :pass
example# 17124
string_types = basestring ,
example# 17125
integer_types = ( int , long )
example# 17126
class_types = ( type , types . ClassType )
example# 17127
text_type = unicode
example# 17128
binary_type = str
example# 17129
if sys . platform . startswith ( "java" ) :pass
example# 17130
MAXSIZE = int ( ( 1 << 31 ) - 1 )
example# 17131
if True: pass
else :pass
example# 17132
class X ( object ) :pass
example# 17133
def __len__ ( self ) :pass
example# 17134
return 1 << 31
example# 17135
try :pass
except: pass
example# 17136
len ( X ( ) )
example# 17137
try: pass
except OverflowError :pass
example# 17138
MAXSIZE = int ( ( 1 << 31 ) - 1 )
example# 17139
if True: pass
else :pass
example# 17140
MAXSIZE = int ( ( 1 << 63 ) - 1 )
example# 17141
del X
example# 17142
def _add_doc ( func , doc ) :pass
example# 17143
func . __doc__ = doc
example# 17144
def _import_module ( name ) :pass
example# 17145
__import__ ( name )
example# 17146
return sys . modules [ name ]
example# 17147
class _LazyDescr ( object ) :pass
example# 17148
def __init__ ( self , name ) :pass
example# 17149
self . name = name
example# 17150
def __get__ ( self , obj , tp ) :pass
example# 17151
try :pass
except: pass
example# 17152
result = self . _resolve ( )
example# 17153
try: pass
except ImportError :pass
example# 17154
raise AttributeError ( '_STR:0_' % self . name )
example# 17155
setattr ( obj , self . name , result )
example# 17156
delattr ( obj . __class__ , self . name )
example# 17157
return result
example# 17158
class MovedModule ( _LazyDescr ) :pass
example# 17159
def __init__ ( self , name , old , new = None ) :pass
example# 17160
super ( MovedModule , self ) . __init__ ( name )
example# 17161
if PY3 :pass
example# 17162
if new is None :pass
example# 17163
new = name
example# 17164
self . mod = new
example# 17165
if True: pass
else :pass
example# 17166
self . mod = old
example# 17167
def _resolve ( self ) :pass
example# 17168
return _import_module ( self . mod )
example# 17169
def __getattr__ ( self , attr ) :pass
example# 17170
if ( attr in ( '_STR:0_' , '_STR:1_' , '_STR:2_' ) and  self . mod not in sys . modules ) :pass
example# 17171
raise AttributeError ( attr )
example# 17172
try :pass
except: pass
example# 17173
_module = self . _resolve ( )
example# 17174
try: pass
except ImportError :pass
example# 17175
raise AttributeError ( attr )
example# 17176
value = getattr ( _module , attr )
example# 17177
setattr ( self , attr , value )
example# 17178
return value
example# 17179
class _LazyModule ( types . ModuleType ) :pass
example# 17180
def __init__ ( self , name ) :pass
example# 17181
super ( _LazyModule , self ) . __init__ ( name )
example# 17182
self . __doc__ = self . __class__ . __doc__
example# 17183
def __dir__ ( self ) :pass
example# 17184
attrs = [ '_STR:0_' , '_STR:1_' ]
example# 17185
attrs += [ attr . name for attr in self . _moved_attributes ]
example# 17186
return attrs
example# 17187
_moved_attributes = [ ]
example# 17188
class MovedAttribute ( _LazyDescr ) :pass
example# 17189
def __init__ ( self , name , old_mod , new_mod , old_attr = None , new_attr = None ) :pass
example# 17190
super ( MovedAttribute , self ) . __init__ ( name )
example# 17191
if PY3 :pass
example# 17192
if new_mod is None :pass
example# 17193
new_mod = name
example# 17194
self . mod = new_mod
example# 17195
if new_attr is None :pass
example# 17196
if old_attr is None :pass
example# 17197
new_attr = name
example# 17198
if True: pass
else :pass
example# 17199
new_attr = old_attr
example# 17200
self . attr = new_attr
example# 17201
if True: pass
else :pass
example# 17202
self . mod = old_mod
example# 17203
if old_attr is None :pass
example# 17204
old_attr = name
example# 17205
self . attr = old_attr
example# 17206
def _resolve ( self ) :pass
example# 17207
module = _import_module ( self . mod )
example# 17208
return getattr ( module , self . attr )
example# 17209
class _MovedItems ( _LazyModule ) :pass
example# 17210
_moved_attributes = [  MovedAttribute ( "cStringIO" , "cStringIO" , "io" , "StringIO" ) ,  MovedAttribute ( "filter" , "itertools" , "builtins" , "ifilter" , "filter" ) ,  MovedAttribute ( "filterfalse" , "itertools" , "itertools" , "ifilterfalse" , "filterfalse" ) ,  MovedAttribute ( "input" , "__builtin__" , "builtins" , "raw_input" , "input" ) ,  MovedAttribute ( "map" , "itertools" , "builtins" , "imap" , "map" ) ,  MovedAttribute ( "range" , "__builtin__" , "builtins" , "xrange" , "range" ) ,  MovedAttribute ( "reload_module" , "__builtin__" , "imp" , "reload" ) ,  MovedAttribute ( "reduce" , "__builtin__" , "functools" ) ,  MovedAttribute ( "StringIO" , "StringIO" , "io" ) ,  MovedAttribute ( "UserString" , "UserString" , "collections" ) ,  MovedAttribute ( "xrange" , "__builtin__" , "builtins" , "xrange" , "range" ) ,  MovedAttribute ( "zip" , "itertools" , "builtins" , "izip" , "zip" ) ,  MovedAttribute ( "zip_longest" , "itertools" , "itertools" , "izip_longest" , "zip_longest" ) ,   MovedModule ( "builtins" , "__builtin__" ) ,  MovedModule ( "configparser" , "ConfigParser" ) ,  MovedModule ( "copyreg" , "copy_reg" ) ,  MovedModule ( "dbm_gnu" , "gdbm" , "dbm.gnu" ) ,  MovedModule ( "http_cookiejar" , "cookielib" , "http.cookiejar" ) ,  MovedModule ( "http_cookies" , "Cookie" , "http.cookies" ) ,  MovedModule ( "html_entities" , "htmlentitydefs" , "html.entities" ) ,  MovedModule ( "html_parser" , "HTMLParser" , "html.parser" ) ,  MovedModule ( "http_client" , "httplib" , "http.client" ) ,  MovedModule ( "email_mime_multipart" , "email.MIMEMultipart" , "email.mime.multipart" ) ,  MovedModule ( "email_mime_text" , "email.MIMEText" , "email.mime.text" ) ,  MovedModule ( "email_mime_base" , "email.MIMEBase" , "email.mime.base" ) ,  MovedModule ( "BaseHTTPServer" , "BaseHTTPServer" , "http.server" ) ,  MovedModule ( "CGIHTTPServer" , "CGIHTTPServer" , "http.server" ) ,  MovedModule ( "SimpleHTTPServer" , "SimpleHTTPServer" , "http.server" ) ,  MovedModule ( "cPickle" , "cPickle" , "pickle" ) ,  MovedModule ( "queue" , "Queue" ) ,  MovedModule ( "reprlib" , "repr" ) ,  MovedModule ( "socketserver" , "SocketServer" ) ,  MovedModule ( "_thread" , "thread" , "_thread" ) ,  MovedModule ( "tkinter" , "Tkinter" ) ,  MovedModule ( "tkinter_dialog" , "Dialog" , "tkinter.dialog" ) ,  MovedModule ( "tkinter_filedialog" , "FileDialog" , "tkinter.filedialog" ) ,  MovedModule ( "tkinter_scrolledtext" , "ScrolledText" , "tkinter.scrolledtext" ) ,  MovedModule ( "tkinter_simpledialog" , "SimpleDialog" , "tkinter.simpledialog" ) ,  MovedModule ( "tkinter_tix" , "Tix" , "tkinter.tix" ) ,  MovedModule ( "tkinter_ttk" , "ttk" , "tkinter.ttk" ) ,  MovedModule ( "tkinter_constants" , "Tkconstants" , "tkinter.constants" ) ,  MovedModule ( "tkinter_dnd" , "Tkdnd" , "tkinter.dnd" ) ,  MovedModule ( "tkinter_colorchooser" , "tkColorChooser" ,  "tkinter.colorchooser" ) ,  MovedModule ( "tkinter_commondialog" , "tkCommonDialog" ,  "tkinter.commondialog" ) ,  MovedModule ( "tkinter_tkfiledialog" , "tkFileDialog" , "tkinter.filedialog" ) ,  MovedModule ( "tkinter_font" , "tkFont" , "tkinter.font" ) ,  MovedModule ( "tkinter_messagebox" , "tkMessageBox" , "tkinter.messagebox" ) ,  MovedModule ( "tkinter_tksimpledialog" , "tkSimpleDialog" ,  "tkinter.simpledialog" ) ,  MovedModule ( "urllib_parse" , __name__ + ".moves.urllib_parse" , "urllib.parse" ) ,  MovedModule ( "urllib_error" , __name__ + ".moves.urllib_error" , "urllib.error" ) ,  MovedModule ( "urllib" , __name__ + ".moves.urllib" , __name__ + ".moves.urllib" ) ,  MovedModule ( "urllib_robotparser" , "robotparser" , "urllib.robotparser" ) ,  MovedModule ( "xmlrpc_client" , "xmlrpclib" , "xmlrpc.client" ) ,  MovedModule ( "xmlrpc_server" , "xmlrpclib" , "xmlrpc.server" ) ,  MovedModule ( "winreg" , "_winreg" ) ,  ]
example# 17211
for attr in _moved_attributes :pass
example# 17212
setattr ( _MovedItems , attr . name , attr )
example# 17213
if isinstance ( attr , MovedModule ) :pass
example# 17214
sys . modules [ __name__ + ".moves." + attr . name ] = attr
example# 17215
del attr
example# 17216
_MovedItems . _moved_attributes = _moved_attributes
example# 17217
moves = sys . modules [ __name__ + ".moves" ] = _MovedItems ( __name__ + ".moves" )
example# 17218
class Module_six_moves_urllib_parse ( _LazyModule ) :pass
example# 17219
_urllib_parse_moved_attributes = [  MovedAttribute ( "ParseResult" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "SplitResult" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "parse_qs" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "parse_qsl" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urldefrag" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urljoin" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlparse" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlsplit" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlunparse" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlunsplit" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "quote" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "quote_plus" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "unquote" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "unquote_plus" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "urlencode" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "splitquery" , "urllib" , "urllib.parse" ) ,  ]
example# 17220
for attr in _urllib_parse_moved_attributes :pass
example# 17221
setattr ( Module_six_moves_urllib_parse , attr . name , attr )
example# 17222
del attr
example# 17223
Module_six_moves_urllib_parse . _moved_attributes = _urllib_parse_moved_attributes
example# 17224
sys . modules [ __name__ + '_STR:0_' ] = sys . modules [ __name__ + ".moves.urllib.parse" ] = Module_six_moves_urllib_parse ( __name__ + '_STR:0_' )
example# 17225
class Module_six_moves_urllib_error ( _LazyModule ) :pass
example# 17226
_urllib_error_moved_attributes = [  MovedAttribute ( "URLError" , "urllib2" , "urllib.error" ) ,  MovedAttribute ( "HTTPError" , "urllib2" , "urllib.error" ) ,  MovedAttribute ( "ContentTooShortError" , "urllib" , "urllib.error" ) ,  ]
example# 17227
for attr in _urllib_error_moved_attributes :pass
example# 17228
setattr ( Module_six_moves_urllib_error , attr . name , attr )
example# 17229
del attr
example# 17230
Module_six_moves_urllib_error . _moved_attributes = _urllib_error_moved_attributes
example# 17231
sys . modules [ __name__ + ".moves.urllib_error" ] = sys . modules [ __name__ + '_STR:0_' ] = Module_six_moves_urllib_error ( __name__ + '_STR:0_' )
example# 17232
class Module_six_moves_urllib_request ( _LazyModule ) :pass
example# 17233
_urllib_request_moved_attributes = [  MovedAttribute ( "urlopen" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "install_opener" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "build_opener" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "pathname2url" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "url2pathname" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "getproxies" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "Request" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "OpenerDirector" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPDefaultErrorHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPRedirectHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPCookieProcessor" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "ProxyHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "BaseHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPPasswordMgr" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPPasswordMgrWithDefaultRealm" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "AbstractBasicAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPBasicAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "ProxyBasicAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "AbstractDigestAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPDigestAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "ProxyDigestAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPSHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "FileHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "FTPHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "CacheFTPHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "UnknownHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPErrorProcessor" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "urlretrieve" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "urlcleanup" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "URLopener" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "FancyURLopener" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "proxy_bypass" , "urllib" , "urllib.request" ) ,  ]
example# 17234
for attr in _urllib_request_moved_attributes :pass
example# 17235
setattr ( Module_six_moves_urllib_request , attr . name , attr )
example# 17236
del attr
example# 17237
Module_six_moves_urllib_request . _moved_attributes = _urllib_request_moved_attributes
example# 17238
sys . modules [ __name__ + ".moves.urllib_request" ] = sys . modules [ __name__ + '_STR:0_' ] = Module_six_moves_urllib_request ( __name__ + '_STR:0_' )
example# 17239
class Module_six_moves_urllib_response ( _LazyModule ) :pass
example# 17240
_urllib_response_moved_attributes = [  MovedAttribute ( "addbase" , "urllib" , "urllib.response" ) ,  MovedAttribute ( "addclosehook" , "urllib" , "urllib.response" ) ,  MovedAttribute ( "addinfo" , "urllib" , "urllib.response" ) ,  MovedAttribute ( "addinfourl" , "urllib" , "urllib.response" ) ,  ]
example# 17241
for attr in _urllib_response_moved_attributes :pass
example# 17242
setattr ( Module_six_moves_urllib_response , attr . name , attr )
example# 17243
del attr
example# 17244
Module_six_moves_urllib_response . _moved_attributes = _urllib_response_moved_attributes
example# 17245
sys . modules [ __name__ + ".moves.urllib_response" ] = sys . modules [ __name__ + '_STR:0_' ] = Module_six_moves_urllib_response ( __name__ + '_STR:0_' )
example# 17246
class Module_six_moves_urllib_robotparser ( _LazyModule ) :pass
example# 17247
_urllib_robotparser_moved_attributes = [  MovedAttribute ( "RobotFileParser" , "robotparser" , "urllib.robotparser" ) ,  ]
example# 17248
for attr in _urllib_robotparser_moved_attributes :pass
example# 17249
setattr ( Module_six_moves_urllib_robotparser , attr . name , attr )
example# 17250
del attr
example# 17251
Module_six_moves_urllib_robotparser . _moved_attributes = _urllib_robotparser_moved_attributes
example# 17252
sys . modules [ __name__ + ".moves.urllib_robotparser" ] = sys . modules [ __name__ + '_STR:0_' ] = Module_six_moves_urllib_robotparser ( __name__ + '_STR:0_' )
example# 17253
class Module_six_moves_urllib ( types . ModuleType ) :pass
example# 17254
parse = sys . modules [ __name__ + '_STR:0_' ]
example# 17255
error = sys . modules [ __name__ + '_STR:0_' ]
example# 17256
request = sys . modules [ __name__ + '_STR:0_' ]
example# 17257
response = sys . modules [ __name__ + '_STR:0_' ]
example# 17258
robotparser = sys . modules [ __name__ + '_STR:0_' ]
example# 17259
def __dir__ ( self ) :pass
example# 17260
return [ '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' , '_STR:4_' ]
example# 17261
sys . modules [ __name__ + '_STR:0_' ] = Module_six_moves_urllib ( __name__ + '_STR:0_' )
example# 17262
def add_move ( move ) :pass
example# 17263
setattr ( _MovedItems , move . name , move )
example# 17264
def remove_move ( name ) :pass
example# 17265
try :pass
except: pass
example# 17266
delattr ( _MovedItems , name )
example# 17267
try: pass
except AttributeError :pass
example# 17268
try :pass
except: pass
example# 17269
del moves . __dict__ [ name ]
example# 17270
try: pass
except KeyError :pass
example# 17271
raise AttributeError ( '_STR:0_' % ( name , ) )
example# 17272
if PY3 :pass
example# 17273
_meth_func = '_STR:0_'
example# 17274
_meth_self = '_STR:0_'
example# 17275
_func_closure = '_STR:0_'
example# 17276
_func_code = '_STR:0_'
example# 17277
_func_defaults = '_STR:0_'
example# 17278
_func_globals = '_STR:0_'
example# 17279
_iterkeys = '_STR:0_'
example# 17280
_itervalues = '_STR:0_'
example# 17281
_iteritems = '_STR:0_'
example# 17282
_iterlists = '_STR:0_'
example# 17283
if True: pass
else :pass
example# 17284
_meth_func = '_STR:0_'
example# 17285
_meth_self = '_STR:0_'
example# 17286
_func_closure = '_STR:0_'
example# 17287
_func_code = '_STR:0_'
example# 17288
_func_defaults = '_STR:0_'
example# 17289
_func_globals = '_STR:0_'
example# 17290
_iterkeys = '_STR:0_'
example# 17291
_itervalues = "itervalues"
example# 17292
_iteritems = '_STR:0_'
example# 17293
_iterlists = '_STR:0_'
example# 17294
try :pass
except: pass
example# 17295
advance_iterator = next
example# 17296
try: pass
except NameError :pass
example# 17297
def advance_iterator ( it ) :pass
example# 17298
return it . next ( )
example# 17299
next = advance_iterator
example# 17300
try :pass
except: pass
example# 17301
callable = callable
example# 17302
try: pass
except NameError :pass
example# 17303
def callable ( obj ) :pass
example# 17304
return any ( '_STR:0_' in klass . __dict__ for klass in type ( obj ) . __mro__ )
example# 17305
if PY3 :pass
example# 17306
def get_unbound_function ( unbound ) :pass
example# 17307
return unbound
example# 17308
create_bound_method = types . MethodType
example# 17309
Iterator = object
example# 17310
if True: pass
else :pass
example# 17311
def get_unbound_function ( unbound ) :pass
example# 17312
return unbound . im_func
example# 17313
def create_bound_method ( func , obj ) :pass
example# 17314
return types . MethodType ( func , obj , obj . __class__ )
example# 17315
class Iterator ( object ) :pass
example# 17316
def next ( self ) :pass
example# 17317
return type ( self ) . __next__ ( self )
example# 17318
callable = callable
example# 17319
_add_doc ( get_unbound_function ,  '_STR:0_''_STR:1_''_STR:0_' )
example# 17320
get_method_function = operator . attrgetter ( _meth_func )
example# 17321
get_method_self = operator . attrgetter ( _meth_self )
example# 17322
get_function_closure = operator . attrgetter ( _func_closure )
example# 17323
get_function_code = operator . attrgetter ( _func_code )
example# 17324
get_function_defaults = operator . attrgetter ( _func_defaults )
example# 17325
get_function_globals = operator . attrgetter ( _func_globals )
example# 17326
def iterkeys ( d , ** kw ) :pass
example# 17327
return iter ( getattr ( d , _iterkeys ) ( ** kw ) )
example# 17328
def itervalues ( d , ** kw ) :pass
example# 17329
return iter ( getattr ( d , _itervalues ) ( ** kw ) )
example# 17330
def iteritems ( d , ** kw ) :pass
example# 17331
return iter ( getattr ( d , _iteritems ) ( ** kw ) )
example# 17332
def iterlists ( d , ** kw ) :pass
example# 17333
return iter ( getattr ( d , _iterlists ) ( ** kw ) )
example# 17334
if PY3 :pass
example# 17335
def b ( s ) :pass
example# 17336
return s . encode ( '_STR:0_' )
example# 17337
def u ( s ) :pass
example# 17338
return s
example# 17339
unichr = chr
example# 17340
if sys . version_info [ 1 ] <= 1 :pass
example# 17341
def int2byte ( i ) :pass
example# 17342
return bytes ( ( i , ) )
example# 17343
if True: pass
else :pass
example# 17344
int2byte = operator . methodcaller ( "to_bytes" , 1 , "big" )
example# 17345
byte2int = operator . itemgetter ( 0 )
example# 17346
indexbytes = operator . getitem
example# 17347
iterbytes = iter
example# 17348
import io
example# 17349
StringIO = io . StringIO
example# 17350
BytesIO = io . BytesIO
example# 17351
if True: pass
else :pass
example# 17352
def b ( s ) :pass
example# 17353
return s
example# 17354
def u ( s ) :pass
example# 17355
return unicode ( s . replace ( r'\\' , r'\\\\' ) , '_STR:1_' )
example# 17356
unichr = unichr
example# 17357
int2byte = chr
example# 17358
def byte2int ( bs ) :pass
example# 17359
return ord ( bs [ 0 ] )
example# 17360
def indexbytes ( buf , i ) :pass
example# 17361
return ord ( buf [ i ] )
example# 17362
def iterbytes ( buf ) :pass
example# 17363
return ( ord ( byte ) for byte in buf )
example# 17364
import StringIO
example# 17365
StringIO = BytesIO = StringIO . StringIO
example# 17366
_add_doc ( b , '_STR:0_'"Byte literal'_STR:0_'" )
example# 17367
_add_doc ( u , '_STR:0_''_STR:1_''_STR:0_' )
example# 17368
if PY3 :pass
example# 17369
exec_ = getattr ( moves . builtins , "exec" )
example# 17370
def reraise ( tp , value , tb = None ) :pass
example# 17371
if value . __traceback__ is not tb :pass
example# 17372
raise value . with_traceback ( tb )
example# 17373
raise value
example# 17374
if True: pass
else :pass
example# 17375
def exec_ ( _code_ , _globs_ = None , _locs_ = None ) :pass
example# 17376
if _globs_ is None :pass
example# 17377
frame = sys . _getframe ( 1 )
example# 17378
_globs_ = frame . f_globals
example# 17379
if _locs_ is None :pass
example# 17380
_locs_ = frame . f_locals
example# 17381
del frame
example# 17382
if True: pass
elif _locs_ is None :pass
example# 17383
_locs_ = _globs_
example# 17384
exec ( '_STR:0_'"exec _code_ in _globs_, _locs_'_STR:0_'" )
example# 17385
exec_ ( '_STR:0_'"def reraise(tp, value, tb=None):     raise tp, value, tb '_STR:0_'" )
example# 17386
print_ = getattr ( moves . builtins , "print" , None )
example# 17387
if print_ is None :pass
example# 17388
def print_ ( * args , ** kwargs ) :pass
example# 17389
fp = kwargs . pop ( "file" , sys . stdout )
example# 17390
if fp is None :pass
example# 17391
return
example# 17392
def write ( data ) :pass
example# 17393
if not isinstance ( data , basestring ) :pass
example# 17394
data = str ( data )
example# 17395
if ( isinstance ( fp , file ) and  isinstance ( data , unicode ) and  fp . encoding is not None ) :pass
example# 17396
errors = getattr ( fp , "errors" , None )
example# 17397
if errors is None :pass
example# 17398
errors = '_STR:0_'
example# 17399
data = data . encode ( fp . encoding , errors )
example# 17400
fp . write ( data )
example# 17401
want_unicode = False
example# 17402
sep = kwargs . pop ( "sep" , None )
example# 17403
if sep is not None :pass
example# 17404
if isinstance ( sep , unicode ) :pass
example# 17405
want_unicode = True
example# 17406
if True: pass
elif not isinstance ( sep , str ) :pass
example# 17407
raise TypeError ( '_STR:0_' )
example# 17408
end = kwargs . pop ( "end" , None )
example# 17409
if end is not None :pass
example# 17410
if isinstance ( end , unicode ) :pass
example# 17411
want_unicode = True
example# 17412
if True: pass
elif not isinstance ( end , str ) :pass
example# 17413
raise TypeError ( '_STR:0_' )
example# 17414
if kwargs :pass
example# 17415
raise TypeError ( '_STR:0_' )
example# 17416
if not want_unicode :pass
example# 17417
for arg in args :pass
example# 17418
if isinstance ( arg , unicode ) :pass
example# 17419
want_unicode = True
example# 17420
break
example# 17421
if want_unicode :pass
example# 17422
newline = unicode ( "\n" )
example# 17423
space = unicode ( " " )
example# 17424
if True: pass
else :pass
example# 17425
newline = "\n"
example# 17426
space = '_STR:0_'
example# 17427
if sep is None :pass
example# 17428
sep = space
example# 17429
if end is None :pass
example# 17430
end = newline
example# 17431
for i , arg in enumerate ( args ) :pass
example# 17432
if i :pass
example# 17433
write ( sep )
example# 17434
write ( arg )
example# 17435
write ( end )
example# 17436
_add_doc ( reraise , '_STR:0_''_STR:1_''_STR:0_' )
example# 17437
def with_metaclass ( meta , * bases ) :pass
example# 17438
class metaclass ( meta ) :pass
example# 17439
__call__ = type . __call__
example# 17440
__init__ = type . __init__
example# 17441
def __new__ ( cls , name , this_bases , d ) :pass
example# 17442
if this_bases is None :pass
example# 17443
return type . __new__ ( cls , name , ( ) , d )
example# 17444
return meta ( name , bases , d )
example# 17445
return metaclass ( '_STR:0_' , None , { } )
example# 17446
def add_metaclass ( metaclass ) :pass
example# 17447
def wrapper ( cls ) :pass
example# 17448
orig_vars = cls . __dict__ . copy ( )
example# 17449
orig_vars . pop ( '_STR:0_' , None )
example# 17450
orig_vars . pop ( '_STR:0_' , None )
example# 17451
slots = orig_vars . get ( '_STR:0_' )
example# 17452
if slots is not None :pass
example# 17453
if isinstance ( slots , str ) :pass
example# 17454
slots = [ slots ]
example# 17455
for slots_var in slots :pass
example# 17456
orig_vars . pop ( slots_var )
example# 17457
return metaclass ( cls . __name__ , cls . __bases__ , orig_vars )
example# 17458
return wrapper
example# 17459
if PY3 :pass
example# 17460
_assertCountEqual = '_STR:0_'
example# 17461
_assertRaisesRegex = '_STR:0_'
example# 17462
_assertRegex = '_STR:0_'
example# 17463
memoryview = memoryview
example# 17464
buffer_types = ( bytes , bytearray , memoryview )
example# 17465
if True: pass
else :pass
example# 17466
_assertCountEqual = '_STR:0_'
example# 17467
_assertRaisesRegex = '_STR:0_'
example# 17468
_assertRegex = '_STR:0_'
example# 17469
if sys . platform . startswith ( '_STR:0_' ) :pass
example# 17470
memoryview = memoryview
example# 17471
if True: pass
else :pass
example# 17472
memoryview = buffer
example# 17473
buffer_types = ( bytearray , memoryview )
example# 17474
def assertCountEqual ( self , * args , ** kwargs ) :pass
example# 17475
return getattr ( self , _assertCountEqual ) ( * args , ** kwargs )
example# 17476
def assertRaisesRegex ( self , * args , ** kwargs ) :pass
example# 17477
return getattr ( self , _assertRaisesRegex ) ( * args , ** kwargs )
example# 17478
def assertRegex ( self , * args , ** kwargs ) :pass
example# 17479
return getattr ( self , _assertRegex ) ( * args , ** kwargs )
example# 17480
add_move ( MovedModule ( '_STR:0_' , '_STR:1_' ) )
example# 17481
add_move ( MovedModule ( '_STR:0_' , '_STR:1_' ) )
example# 17482
import contextlib
example# 17483
try :pass
except: pass
example# 17484
import threading
example# 17485
try: pass
except ImportError :pass
example# 17486
import dummy_threading as threading
example# 17487
class RWLock ( object ) :pass
example# 17488
def __init__ ( self ) :pass
example# 17489
self . mutex = threading . RLock ( )
example# 17490
self . can_read = threading . Semaphore ( 0 )
example# 17491
self . can_write = threading . Semaphore ( 0 )
example# 17492
self . active_readers = 0
example# 17493
self . active_writers = 0
example# 17494
self . waiting_readers = 0
example# 17495
self . waiting_writers = 0
example# 17496
def reader_enters ( self ) :pass
example# 17497
with self . mutex :pass
example# 17498
if self . active_writers == 0 and self . waiting_writers == 0 :pass
example# 17499
self . active_readers += 1
example# 17500
self . can_read . release ( )
example# 17501
if True: pass
else :pass
example# 17502
self . waiting_readers += 1
example# 17503
self . can_read . acquire ( )
example# 17504
def reader_leaves ( self ) :pass
example# 17505
with self . mutex :pass
example# 17506
self . active_readers -= 1
example# 17507
if self . active_readers == 0 and self . waiting_writers != 0 :pass
example# 17508
self . active_writers += 1
example# 17509
self . waiting_writers -= 1
example# 17510
self . can_write . release ( )
example# 17511
@ contextlib . contextmanager
def dummy(): pass
example# 17512
def reader ( self ) :pass
example# 17513
self . reader_enters ( )
example# 17514
try :pass
except: pass
example# 17515
yield
example# 17516
try: pass
finally :pass
example# 17517
self . reader_leaves ( )
example# 17518
def writer_enters ( self ) :pass
example# 17519
with self . mutex :pass
example# 17520
if self . active_writers == 0 and self . waiting_writers == 0 and self . active_readers == 0 :pass
example# 17521
self . active_writers += 1
example# 17522
self . can_write . release ( )
example# 17523
if True: pass
else :pass
example# 17524
self . waiting_writers += 1
example# 17525
self . can_write . acquire ( )
example# 17526
def writer_leaves ( self ) :pass
example# 17527
with self . mutex :pass
example# 17528
self . active_writers -= 1
example# 17529
if self . waiting_writers != 0 :pass
example# 17530
self . active_writers += 1
example# 17531
self . waiting_writers -= 1
example# 17532
self . can_write . release ( )
example# 17533
if True: pass
elif self . waiting_readers != 0 :pass
example# 17534
t = self . waiting_readers
example# 17535
self . waiting_readers = 0
example# 17536
self . active_readers += t
example# 17537
while t > 0 :pass
example# 17538
self . can_read . release ( )
example# 17539
t -= 1
example# 17540
@ contextlib . contextmanager
def dummy(): pass
example# 17541
def writer ( self ) :pass
example# 17542
self . writer_enters ( )
example# 17543
try :pass
except: pass
example# 17544
yield
example# 17545
try: pass
finally :pass
example# 17546
self . writer_leaves ( )
example# 17547
from django . utils import six
example# 17548
color_names = ( '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' , '_STR:4_' , '_STR:5_' , '_STR:6_' , '_STR:7_' )
example# 17549
foreground = dict ( ( color_names [ x ] , '3%s' % x ) for x in range ( 8 ) )
example# 17550
background = dict ( ( color_names [ x ] , '4%s' % x ) for x in range ( 8 ) )
example# 17551
RESET = '_STR:0_'
example# 17552
opt_dict = { '_STR:1_' : '_STR:0_' , '_STR:3_' : '_STR:2_' , '_STR:5_' : '_STR:4_' , '_STR:7_' : '_STR:6_' , 'conceal' : '8' }
example# 17553
def colorize ( text = '' , opts = ( ) , ** kwargs ) :pass
example# 17554
code_list = [ ]
example# 17555
if text == '' and len ( opts ) == 1 and opts [ 0 ] == '_STR:0_' :pass
example# 17556
return '_STR:0_' % RESET
example# 17557
for k , v in six . iteritems ( kwargs ) :pass
example# 17558
if k == '_STR:0_' :pass
example# 17559
code_list . append ( foreground [ v ] )
example# 17560
if True: pass
elif k == '_STR:0_' :pass
example# 17561
code_list . append ( background [ v ] )
example# 17562
for o in opts :pass
example# 17563
if o in opt_dict :pass
example# 17564
code_list . append ( opt_dict [ o ] )
example# 17565
if '_STR:0_' not in opts :pass
example# 17566
text = '_STR:0_' % ( text or '' , RESET )
example# 17567
return '%s%s' % ( ( '_STR:1_' % '_STR:0_' . join ( code_list ) ) , text or '' )
example# 17568
def make_style ( opts = ( ) , ** kwargs ) :pass
example# 17569
return lambda text : colorize ( text , opts , ** kwargs )
example# 17570
NOCOLOR_PALETTE = '_STR:0_'
example# 17571
DARK_PALETTE = '_STR:0_'
example# 17572
LIGHT_PALETTE = '_STR:0_'
example# 17573
PALETTES = {  NOCOLOR_PALETTE : {  'ERROR' : { } ,  'WARNING' : { } ,  'NOTICE' : { } ,  'SQL_FIELD' : { } ,  'SQL_COLTYPE' : { } ,  'SQL_KEYWORD' : { } ,  'SQL_TABLE' : { } ,  'HTTP_INFO' : { } ,  'HTTP_SUCCESS' : { } ,  'HTTP_REDIRECT' : { } ,  'HTTP_NOT_MODIFIED' : { } ,  'HTTP_BAD_REQUEST' : { } ,  'HTTP_NOT_FOUND' : { } ,  'HTTP_SERVER_ERROR' : { } ,  'MIGRATE_HEADING' : { } ,  'MIGRATE_LABEL' : { } ,  'MIGRATE_SUCCESS' : { } ,  'MIGRATE_FAILURE' : { } ,  } ,  DARK_PALETTE : {  'ERROR' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'WARNING' : { 'fg' : 'yellow' , 'opts' : ( 'bold' , ) } ,  'NOTICE' : { 'fg' : 'red' } ,  'SQL_FIELD' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'SQL_COLTYPE' : { 'fg' : 'green' } ,  'SQL_KEYWORD' : { 'fg' : 'yellow' } ,  'SQL_TABLE' : { 'opts' : ( 'bold' , ) } ,  'HTTP_INFO' : { 'opts' : ( 'bold' , ) } ,  'HTTP_SUCCESS' : { } ,  'HTTP_REDIRECT' : { 'fg' : 'green' } ,  'HTTP_NOT_MODIFIED' : { 'fg' : 'cyan' } ,  'HTTP_BAD_REQUEST' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'HTTP_NOT_FOUND' : { 'fg' : 'yellow' } ,  'HTTP_SERVER_ERROR' : { 'fg' : 'magenta' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_HEADING' : { 'fg' : 'cyan' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_LABEL' : { 'opts' : ( 'bold' , ) } ,  'MIGRATE_SUCCESS' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_FAILURE' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  } ,  LIGHT_PALETTE : {  'ERROR' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'WARNING' : { 'fg' : 'yellow' , 'opts' : ( 'bold' , ) } ,  'NOTICE' : { 'fg' : 'red' } ,  'SQL_FIELD' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'SQL_COLTYPE' : { 'fg' : 'green' } ,  'SQL_KEYWORD' : { 'fg' : 'blue' } ,  'SQL_TABLE' : { 'opts' : ( 'bold' , ) } ,  'HTTP_INFO' : { 'opts' : ( 'bold' , ) } ,  'HTTP_SUCCESS' : { } ,  'HTTP_REDIRECT' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'HTTP_NOT_MODIFIED' : { 'fg' : 'green' } ,  'HTTP_BAD_REQUEST' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'HTTP_NOT_FOUND' : { 'fg' : 'red' } ,  'HTTP_SERVER_ERROR' : { 'fg' : 'magenta' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_HEADING' : { 'fg' : 'cyan' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_LABEL' : { 'opts' : ( 'bold' , ) } ,  'MIGRATE_SUCCESS' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_FAILURE' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  }  }
example# 17574
DEFAULT_PALETTE = DARK_PALETTE
example# 17575
def parse_color_setting ( config_string ) :pass
example# 17576
if not config_string :pass
example# 17577
return PALETTES [ DEFAULT_PALETTE ]
example# 17578
parts = config_string . lower ( ) . split ( '_STR:0_' )
example# 17579
palette = PALETTES [ NOCOLOR_PALETTE ] . copy ( )
example# 17580
for part in parts :pass
example# 17581
if part in PALETTES :pass
example# 17582
palette . update ( PALETTES [ part ] )
example# 17583
if True: pass
elif '_STR:0_' in part :pass
example# 17584
definition = { }
example# 17585
role , instructions = part . split ( '_STR:0_' )
example# 17586
role = role . upper ( )
example# 17587
styles = instructions . split ( '_STR:0_' )
example# 17588
styles . reverse ( )
example# 17589
colors = styles . pop ( ) . split ( '_STR:0_' )
example# 17590
colors . reverse ( )
example# 17591
fg = colors . pop ( )
example# 17592
if fg in color_names :pass
example# 17593
definition [ '_STR:0_' ] = fg
example# 17594
if colors and colors [ - 1 ] in color_names :pass
example# 17595
definition [ '_STR:0_' ] = colors [ - 1 ]
example# 17596
opts = tuple ( s for s in styles if s in opt_dict . keys ( ) )
example# 17597
if opts :pass
example# 17598
definition [ '_STR:0_' ] = opts
example# 17599
if role in PALETTES [ NOCOLOR_PALETTE ] and definition :pass
example# 17600
palette [ role ] = definition
example# 17601
if palette == PALETTES [ NOCOLOR_PALETTE ] :pass
example# 17602
return None
example# 17603
return palette
example# 17604
from __future__ import unicode_literals
example# 17605
import re
example# 17606
import unicodedata
example# 17607
from gzip import GzipFile
example# 17608
from io import BytesIO
example# 17609
import warnings
example# 17610
from django . utils . deprecation import RemovedInDjango19Warning
example# 17611
from django . utils . encoding import force_text
example# 17612
from django . utils . functional import allow_lazy , SimpleLazyObject
example# 17613
from django . utils import six
example# 17614
from django . utils . six . moves import html_entities
example# 17615
from django . utils . translation import ugettext_lazy , ugettext as _ , pgettext
example# 17616
from django . utils . safestring import mark_safe
example# 17617
if six . PY2 :pass
example# 17618
from django . utils . encoding import force_unicode
example# 17619
capfirst = lambda x : x and force_text ( x ) [ 0 ] . upper ( ) + force_text ( x ) [ 1 : ]
example# 17620
capfirst = allow_lazy ( capfirst , six . text_type )
example# 17621
re_words = re . compile ( r'_STR:0_' , re . U | re . S )
example# 17622
re_chars = re . compile ( r'_STR:0_' , re . U | re . S )
example# 17623
re_tag = re . compile ( r'_STR:0_' , re . S )
example# 17624
re_newlines = re . compile ( r'_STR:0_' )
example# 17625
re_camel_case = re . compile ( r'_STR:0_' )
example# 17626
def wrap ( text , width ) :pass
example# 17627
text = force_text ( text )
example# 17628
def _generator ( ) :pass
example# 17629
for line in text . splitlines ( True ) :pass
example# 17630
max_width = min ( ( line . endswith ( '\n' ) and width + 1 or width ) , width )
example# 17631
while len ( line ) > max_width :pass
example# 17632
space = line [ : max_width + 1 ] . rfind ( ' ' ) + 1
example# 17633
if space == 0 :pass
example# 17634
space = line . find ( ' ' ) + 1
example# 17635
if space == 0 :pass
example# 17636
yield line
example# 17637
line = ''
example# 17638
break
example# 17639
yield '%s\n' % line [ : space - 1 ]
example# 17640
line = line [ space : ]
example# 17641
max_width = min ( ( line . endswith ( '\n' ) and width + 1 or width ) , width )
example# 17642
if line :pass
example# 17643
yield line
example# 17644
return '' . join ( _generator ( ) )
example# 17645
wrap = allow_lazy ( wrap , six . text_type )
example# 17646
class Truncator ( SimpleLazyObject ) :pass
example# 17647
def __init__ ( self , text ) :pass
example# 17648
super ( Truncator , self ) . __init__ ( lambda : force_text ( text ) )
example# 17649
def add_truncation_text ( self , text , truncate = None ) :pass
example# 17650
if truncate is None :pass
example# 17651
truncate = pgettext (  '_STR:0_' ,  '_STR:1_' )
example# 17652
truncate = force_text ( truncate )
example# 17653
if '_STR:0_' in truncate :pass
example# 17654
return truncate % { '_STR:0_' : text }
example# 17655
if text . endswith ( truncate ) :pass
example# 17656
return text
example# 17657
return '%s%s' % ( text , truncate )
example# 17658
def chars ( self , num , truncate = None , html = False ) :pass
example# 17659
length = int ( num )
example# 17660
text = unicodedata . normalize ( '_STR:0_' , self . _wrapped )
example# 17661
truncate_len = length
example# 17662
for char in self . add_truncation_text ( '' , truncate ) :pass
example# 17663
if not unicodedata . combining ( char ) :pass
example# 17664
truncate_len -= 1
example# 17665
if truncate_len == 0 :pass
example# 17666
break
example# 17667
if html :pass
example# 17668
return self . _truncate_html ( length , truncate , text , truncate_len , False )
example# 17669
return self . _text_chars ( length , truncate , text , truncate_len )
example# 17670
chars = allow_lazy ( chars )
example# 17671
def _text_chars ( self , length , truncate , text , truncate_len ) :pass
example# 17672
s_len = 0
example# 17673
end_index = None
example# 17674
for i , char in enumerate ( text ) :pass
example# 17675
if unicodedata . combining ( char ) :pass
example# 17676
continue
example# 17677
s_len += 1
example# 17678
if end_index is None and s_len > truncate_len :pass
example# 17679
end_index = i
example# 17680
if s_len > length :pass
example# 17681
return self . add_truncation_text ( text [ : end_index or 0 ] ,  truncate )
example# 17682
return text
example# 17683
def words ( self , num , truncate = None , html = False ) :pass
example# 17684
length = int ( num )
example# 17685
if html :pass
example# 17686
return self . _truncate_html ( length , truncate , self . _wrapped , length , True )
example# 17687
return self . _text_words ( length , truncate )
example# 17688
words = allow_lazy ( words )
example# 17689
def _text_words ( self , length , truncate ) :pass
example# 17690
words = self . _wrapped . split ( )
example# 17691
if len ( words ) > length :pass
example# 17692
words = words [ : length ]
example# 17693
return self . add_truncation_text ( ' ' . join ( words ) , truncate )
example# 17694
return ' ' . join ( words )
example# 17695
def _truncate_html ( self , length , truncate , text , truncate_len , words ) :pass
example# 17696
if words and length <= 0 :pass
example# 17697
return ''
example# 17698
html4_singlets = (  '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' , '_STR:4_' ,  '_STR:5_' , '_STR:6_' , '_STR:7_' , '_STR:8_'  )
example# 17699
pos = 0
example# 17700
end_text_pos = 0
example# 17701
current_len = 0
example# 17702
open_tags = [ ]
example# 17703
regex = re_words if words else re_chars
example# 17704
while current_len <= length :pass
example# 17705
m = regex . search ( text , pos )
example# 17706
if not m :pass
example# 17707
break
example# 17708
pos = m . end ( 0 )
example# 17709
if m . group ( 1 ) :pass
example# 17710
current_len += 1
example# 17711
if current_len == truncate_len :pass
example# 17712
end_text_pos = pos
example# 17713
continue
example# 17714
tag = re_tag . match ( m . group ( 0 ) )
example# 17715
if not tag or current_len >= truncate_len :pass
example# 17716
continue
example# 17717
closing_tag , tagname , self_closing = tag . groups ( )
example# 17718
tagname = tagname . lower ( )
example# 17719
if self_closing or tagname in html4_singlets :pass
example# 17720
pass
example# 17721
if True: pass
elif closing_tag :pass
example# 17722
try :pass
except: pass
example# 17723
i = open_tags . index ( tagname )
example# 17724
try: pass
except ValueError :pass
example# 17725
pass
example# 17726
if True: pass
else :pass
example# 17727
open_tags = open_tags [ i + 1 : ]
example# 17728
if True: pass
else :pass
example# 17729
open_tags . insert ( 0 , tagname )
example# 17730
if current_len <= length :pass
example# 17731
return text
example# 17732
out = text [ : end_text_pos ]
example# 17733
truncate_text = self . add_truncation_text ( '' , truncate )
example# 17734
if truncate_text :pass
example# 17735
out += truncate_text
example# 17736
for tag in open_tags :pass
example# 17737
out += '_STR:0_' % tag
example# 17738
return out
example# 17739
def get_valid_filename ( s ) :pass
example# 17740
s = force_text ( s ) . strip ( ) . replace ( ' ' , '_' )
example# 17741
return re . sub ( r'_STR:1_' , '' , s )
example# 17742
get_valid_filename = allow_lazy ( get_valid_filename , six . text_type )
example# 17743
def get_text_list ( list_ , last_word = ugettext_lazy ( '_STR:0_' ) ) :pass
example# 17744
if len ( list_ ) == 0 :pass
example# 17745
return ''
example# 17746
if len ( list_ ) == 1 :pass
example# 17747
return force_text ( list_ [ 0 ] )
example# 17748
return '_STR:0_' % (   _ ( ', ' ) . join ( force_text ( i ) for i in list_ [ : - 1 ] ) ,  force_text ( last_word ) , force_text ( list_ [ - 1 ] ) )
example# 17749
get_text_list = allow_lazy ( get_text_list , six . text_type )
example# 17750
def normalize_newlines ( text ) :pass
example# 17751
text = force_text ( text )
example# 17752
return re_newlines . sub ( '_STR:0_' , text )
example# 17753
normalize_newlines = allow_lazy ( normalize_newlines , six . text_type )
example# 17754
def phone2numeric ( phone ) :pass
example# 17755
char2number = { '_STR:0_' : '2' , '_STR:1_' : '2' , '_STR:2_' : '2' , '_STR:3_' : '3' , '_STR:4_' : '3' , '_STR:5_' : '3' ,  '_STR:6_' : '4' , 'h' : '4' , 'i' : '4' , 'j' : '5' , 'k' : '5' , 'l' : '5' , 'm' : '6' ,  'n' : '6' , 'o' : '6' , 'p' : '7' , 'q' : '7' , 'r' : '7' , 's' : '7' , 't' : '8' ,  'u' : '8' , 'v' : '8' , 'w' : '9' , 'x' : '9' , 'y' : '9' , 'z' : '9' }
example# 17756
return '' . join ( char2number . get ( c , c ) for c in phone . lower ( ) )
example# 17757
phone2numeric = allow_lazy ( phone2numeric )
example# 17758
def compress_string ( s ) :pass
example# 17759
zbuf = BytesIO ( )
example# 17760
zfile = GzipFile ( mode = '_STR:0_' , compresslevel = 6 , fileobj = zbuf )
example# 17761
zfile . write ( s )
example# 17762
zfile . close ( )
example# 17763
return zbuf . getvalue ( )
example# 17764
class StreamingBuffer ( object ) :pass
example# 17765
def __init__ ( self ) :pass
example# 17766
self . vals = [ ]
example# 17767
def write ( self , val ) :pass
example# 17768
self . vals . append ( val )
example# 17769
def read ( self ) :pass
example# 17770
ret = b'' . join ( self . vals )
example# 17771
self . vals = [ ]
example# 17772
return ret
example# 17773
def flush ( self ) :pass
example# 17774
return
example# 17775
def close ( self ) :pass
example# 17776
return
example# 17777
def compress_sequence ( sequence ) :pass
example# 17778
buf = StreamingBuffer ( )
example# 17779
zfile = GzipFile ( mode = '_STR:0_' , compresslevel = 6 , fileobj = buf )
example# 17780
yield buf . read ( )
example# 17781
for item in sequence :pass
example# 17782
zfile . write ( item )
example# 17783
zfile . flush ( )
example# 17784
yield buf . read ( )
example# 17785
zfile . close ( )
example# 17786
yield buf . read ( )
example# 17787
ustring_re = re . compile ( '_STR:0_' )
example# 17788
def javascript_quote ( s , quote_double_quotes = False ) :pass
example# 17789
msg = (  "django.utils.text.javascript_quote() is deprecated. "  "Use django.utils.html.escapejs() instead."  )
example# 17790
warnings . warn ( msg , RemovedInDjango19Warning , stacklevel = 2 )
example# 17791
def fix ( match ) :pass
example# 17792
return '_STR:0_' % ord ( match . group ( 1 ) )
example# 17793
if type ( s ) == bytes :pass
example# 17794
s = s . decode ( '_STR:0_' )
example# 17795
if True: pass
elif type ( s ) != six . text_type :pass
example# 17796
raise TypeError ( s )
example# 17797
s = s . replace ( '\\' , '\\\\' )
example# 17798
s = s . replace ( '_STR:0_' , '_STR:1_' )
example# 17799
s = s . replace ( '_STR:0_' , '_STR:1_' )
example# 17800
s = s . replace ( '_STR:0_' , '_STR:1_' )
example# 17801
s = s . replace ( '_STR:0_' , '_STR:1_' )
example# 17802
s = s . replace ( '_STR:0_' , '_STR:1_' )
example# 17803
if quote_double_quotes :pass
example# 17804
s = s . replace ( '_STR:0_' , '_STR:1_' )
example# 17805
return ustring_re . sub ( fix , s )
example# 17806
javascript_quote = allow_lazy ( javascript_quote , six . text_type )
example# 17807
smart_split_re = re . compile ( r"""     ((?:         [^\s'"]*         (?:             (?:'_STR:1_'\\]|\\.)*" | '(?:[^'\\]|\\.)*')             [^\s'"]*         )+     ) | \S+) """ , re . VERBOSE )
example# 17808
def smart_split ( text ) :pass
example# 17809
text = force_text ( text )
example# 17810
for bit in smart_split_re . finditer ( text ) :pass
example# 17811
yield bit . group ( 0 )
example# 17812
def _replace_entity ( match ) :pass
example# 17813
text = match . group ( 1 )
example# 17814
if text [ 0 ] == '_STR:0_' :pass
example# 17815
text = text [ 1 : ]
example# 17816
try :pass
except: pass
example# 17817
if text [ 0 ] in '_STR:0_' :pass
example# 17818
c = int ( text [ 1 : ] , 16 )
example# 17819
if True: pass
else :pass
example# 17820
c = int ( text )
example# 17821
return six . unichr ( c )
example# 17822
try: pass
except ValueError :pass
example# 17823
return match . group ( 0 )
example# 17824
if True: pass
else :pass
example# 17825
try :pass
except: pass
example# 17826
return six . unichr ( html_entities . name2codepoint [ text ] )
example# 17827
try: pass
except ( ValueError , KeyError ) :pass
example# 17828
return match . group ( 0 )
example# 17829
_entity_re = re . compile ( r'_STR:0_' )
example# 17830
def unescape_entities ( text ) :pass
example# 17831
return _entity_re . sub ( _replace_entity , text )
example# 17832
unescape_entities = allow_lazy ( unescape_entities , six . text_type )
example# 17833
def unescape_string_literal ( s ) :pass
example# 17834
if s [ 0 ] not in '_STR:0_' or s [ - 1 ] != s [ 0 ] :pass
example# 17835
raise ValueError ( '_STR:0_' % s )
example# 17836
quote = s [ 0 ]
example# 17837
return s [ 1 : - 1 ] . replace ( r'_STR:0_' % quote , quote ) . replace ( r'\\' , '\\' )
example# 17838
unescape_string_literal = allow_lazy ( unescape_string_literal )
example# 17839
def slugify ( value ) :pass
example# 17840
value = unicodedata . normalize ( '_STR:0_' , value ) . encode ( '_STR:1_' , 'ignore' ) . decode ( '_STR:1_' )
example# 17841
value = re . sub ( '_STR:2_' , '' , value ) . strip ( ) . lower ( )
example# 17842
return mark_safe ( re . sub ( '_STR:0_' , '_STR:1_' , value ) )
example# 17843
slugify = allow_lazy ( slugify , six . text_type )
example# 17844
def camel_case_to_spaces ( value ) :pass
example# 17845
return re_camel_case . sub ( r'_STR:0_' , value ) . strip ( ) . lower ( )
example# 17846
from __future__ import unicode_literals
example# 17847
import datetime
example# 17848
from django . utils . html import avoid_wrapping
example# 17849
from django . utils . timezone import is_aware , utc
example# 17850
from django . utils . translation import ugettext , ungettext_lazy
example# 17851
def timesince ( d , now = None , reversed = False ) :pass
example# 17852
chunks = (  ( 60 * 60 * 24 * 365 , ungettext_lazy ( '%d year' , '%d years' ) ) ,  ( 60 * 60 * 24 * 30 , ungettext_lazy ( '%d month' , '%d months' ) ) ,  ( 60 * 60 * 24 * 7 , ungettext_lazy ( '%d week' , '%d weeks' ) ) ,  ( 60 * 60 * 24 , ungettext_lazy ( '%d day' , '%d days' ) ) ,  ( 60 * 60 , ungettext_lazy ( '%d hour' , '%d hours' ) ) ,  ( 60 , ungettext_lazy ( '%d minute' , '%d minutes' ) )  )
example# 17853
if not isinstance ( d , datetime . datetime ) :pass
example# 17854
d = datetime . datetime ( d . year , d . month , d . day )
example# 17855
if now and not isinstance ( now , datetime . datetime ) :pass
example# 17856
now = datetime . datetime ( now . year , now . month , now . day )
example# 17857
if not now :pass
example# 17858
now = datetime . datetime . now ( utc if is_aware ( d ) else None )
example# 17859
delta = ( d - now ) if reversed else ( now - d )
example# 17860
since = delta . days * 24 * 60 * 60 + delta . seconds
example# 17861
if since <= 0 :pass
example# 17862
return avoid_wrapping ( ugettext ( '_STR:0_' ) )
example# 17863
for i , ( seconds , name ) in enumerate ( chunks ) :pass
example# 17864
count = since // seconds
example# 17865
if count != 0 :pass
example# 17866
break
example# 17867
result = avoid_wrapping ( name % count )
example# 17868
if i + 1 < len ( chunks ) :pass
example# 17869
seconds2 , name2 = chunks [ i + 1 ]
example# 17870
count2 = ( since - ( seconds * count ) ) // seconds2
example# 17871
if count2 != 0 :pass
example# 17872
result += ugettext ( '_STR:0_' ) + avoid_wrapping ( name2 % count2 )
example# 17873
return result
example# 17874
def timeuntil ( d , now = None ) :pass
example# 17875
return timesince ( d , now , reversed = True )
example# 17876
from datetime import datetime , timedelta , tzinfo
example# 17877
from threading import local
example# 17878
import sys
example# 17879
import time as _time
example# 17880
try :pass
except: pass
example# 17881
import pytz
example# 17882
try: pass
except ImportError :pass
example# 17883
pytz = None
example# 17884
from django . conf import settings
example# 17885
from django . utils import six
example# 17886
__all__ = [  '_STR:0_' , '_STR:1_' ,  '_STR:2_' , '_STR:3_' ,  'get_current_timezone' , 'get_current_timezone_name' ,  'activate' , 'deactivate' , 'override' ,  'localtime' , 'now' ,  'is_aware' , 'is_naive' , 'make_aware' , 'make_naive' ,  ]
example# 17887
ZERO = timedelta ( 0 )
example# 17888
class UTC ( tzinfo ) :pass
example# 17889
def __repr__ ( self ) :pass
example# 17890
return '_STR:0_'
example# 17891
def utcoffset ( self , dt ) :pass
example# 17892
return ZERO
example# 17893
def tzname ( self , dt ) :pass
example# 17894
return '_STR:0_'
example# 17895
def dst ( self , dt ) :pass
example# 17896
return ZERO
example# 17897
class FixedOffset ( tzinfo ) :pass
example# 17898
def __init__ ( self , offset = None , name = None ) :pass
example# 17899
if offset is not None :pass
example# 17900
self . __offset = timedelta ( minutes = offset )
example# 17901
if name is not None :pass
example# 17902
self . __name = name
example# 17903
def utcoffset ( self , dt ) :pass
example# 17904
return self . __offset
example# 17905
def tzname ( self , dt ) :pass
example# 17906
return self . __name
example# 17907
def dst ( self , dt ) :pass
example# 17908
return ZERO
example# 17909
class ReferenceLocalTimezone ( tzinfo ) :pass
example# 17910
def __init__ ( self ) :pass
example# 17911
self . STDOFFSET = timedelta ( seconds = - _time . timezone )
example# 17912
if _time . daylight :pass
example# 17913
self . DSTOFFSET = timedelta ( seconds = - _time . altzone )
example# 17914
if True: pass
else :pass
example# 17915
self . DSTOFFSET = self . STDOFFSET
example# 17916
self . DSTDIFF = self . DSTOFFSET - self . STDOFFSET
example# 17917
tzinfo . __init__ ( self )
example# 17918
def utcoffset ( self , dt ) :pass
example# 17919
if self . _isdst ( dt ) :pass
example# 17920
return self . DSTOFFSET
example# 17921
if True: pass
else :pass
example# 17922
return self . STDOFFSET
example# 17923
def dst ( self , dt ) :pass
example# 17924
if self . _isdst ( dt ) :pass
example# 17925
return self . DSTDIFF
example# 17926
if True: pass
else :pass
example# 17927
return ZERO
example# 17928
def tzname ( self , dt ) :pass
example# 17929
return _time . tzname [ self . _isdst ( dt ) ]
example# 17930
def _isdst ( self , dt ) :pass
example# 17931
tt = ( dt . year , dt . month , dt . day ,  dt . hour , dt . minute , dt . second ,  dt . weekday ( ) , 0 , 0 )
example# 17932
stamp = _time . mktime ( tt )
example# 17933
tt = _time . localtime ( stamp )
example# 17934
return tt . tm_isdst > 0
example# 17935
class LocalTimezone ( ReferenceLocalTimezone ) :pass
example# 17936
def tzname ( self , dt ) :pass
example# 17937
is_dst = False if dt is None else self . _isdst ( dt )
example# 17938
return _time . tzname [ is_dst ]
example# 17939
def _isdst ( self , dt ) :pass
example# 17940
try :pass
except: pass
example# 17941
return super ( LocalTimezone , self ) . _isdst ( dt )
example# 17942
try: pass
except ( OverflowError , ValueError ) as exc :pass
example# 17943
exc_type = type ( exc )
example# 17944
exc_value = exc_type (  '_STR:0_' % dt )
example# 17945
exc_value . __cause__ = exc
example# 17946
six . reraise ( exc_type , exc_value , sys . exc_info ( ) [ 2 ] )
example# 17947
utc = pytz . utc if pytz else UTC ( )
example# 17948
def get_fixed_timezone ( offset ) :pass
example# 17949
if isinstance ( offset , timedelta ) :pass
example# 17950
offset = offset . seconds // 60
example# 17951
sign = '_STR:0_' if offset < 0 else '_STR:1_'
example# 17952
hhmm = '_STR:0_' % divmod ( abs ( offset ) , 60 )
example# 17953
name = sign + hhmm
example# 17954
return FixedOffset ( offset , name )
example# 17955
_localtime = None
example# 17956
def get_default_timezone ( ) :pass
example# 17957
global _localtime
example# 17958
if _localtime is None :pass
example# 17959
if isinstance ( settings . TIME_ZONE , six . string_types ) and pytz is not None :pass
example# 17960
_localtime = pytz . timezone ( settings . TIME_ZONE )
example# 17961
if True: pass
else :pass
example# 17962
_localtime = LocalTimezone ( )
example# 17963
return _localtime
example# 17964
def get_default_timezone_name ( ) :pass
example# 17965
return _get_timezone_name ( get_default_timezone ( ) )
example# 17966
_active = local ( )
example# 17967
def get_current_timezone ( ) :pass
example# 17968
return getattr ( _active , "value" , get_default_timezone ( ) )
example# 17969
def get_current_timezone_name ( ) :pass
example# 17970
return _get_timezone_name ( get_current_timezone ( ) )
example# 17971
def _get_timezone_name ( timezone ) :pass
example# 17972
try :pass
except: pass
example# 17973
return timezone . zone
example# 17974
try: pass
except AttributeError :pass
example# 17975
return timezone . tzname ( None )
example# 17976
def activate ( timezone ) :pass
example# 17977
if isinstance ( timezone , tzinfo ) :pass
example# 17978
_active . value = timezone
example# 17979
if True: pass
elif isinstance ( timezone , six . string_types ) and pytz is not None :pass
example# 17980
_active . value = pytz . timezone ( timezone )
example# 17981
if True: pass
else :pass
example# 17982
raise ValueError ( '_STR:0_' % timezone )
example# 17983
def deactivate ( ) :pass
example# 17984
if hasattr ( _active , "value" ) :pass
example# 17985
del _active . value
example# 17986
class override ( object ) :pass
example# 17987
def __init__ ( self , timezone ) :pass
example# 17988
self . timezone = timezone
example# 17989
self . old_timezone = getattr ( _active , '_STR:0_' , None )
example# 17990
def __enter__ ( self ) :pass
example# 17991
if self . timezone is None :pass
example# 17992
deactivate ( )
example# 17993
if True: pass
else :pass
example# 17994
activate ( self . timezone )
example# 17995
def __exit__ ( self , exc_type , exc_value , traceback ) :pass
example# 17996
if self . old_timezone is None :pass
example# 17997
deactivate ( )
example# 17998
if True: pass
else :pass
example# 17999
_active . value = self . old_timezone
example# 18000
def template_localtime ( value , use_tz = None ) :pass
example# 18001
should_convert = ( isinstance ( value , datetime )  and ( settings . USE_TZ if use_tz is None else use_tz )  and not is_naive ( value )  and getattr ( value , 'convert_to_local_time' , True ) )
example# 18002
return localtime ( value ) if should_convert else value
example# 18003
def localtime ( value , timezone = None ) :pass
example# 18004
if timezone is None :pass
example# 18005
timezone = get_current_timezone ( )
example# 18006
value = value . astimezone ( timezone )
example# 18007
if hasattr ( timezone , '_STR:0_' ) :pass
example# 18008
value = timezone . normalize ( value )
example# 18009
return value
example# 18010
def now ( ) :pass
example# 18011
if settings . USE_TZ :pass
example# 18012
return datetime . utcnow ( ) . replace ( tzinfo = utc )
example# 18013
if True: pass
else :pass
example# 18014
return datetime . now ( )
example# 18015
def is_aware ( value ) :pass
example# 18016
return value . tzinfo is not None and value . tzinfo . utcoffset ( value ) is not None
example# 18017
def is_naive ( value ) :pass
example# 18018
return value . tzinfo is None or value . tzinfo . utcoffset ( value ) is None
example# 18019
def make_aware ( value , timezone ) :pass
example# 18020
if hasattr ( timezone , '_STR:0_' ) :pass
example# 18021
return timezone . localize ( value , is_dst = None )
example# 18022
if True: pass
else :pass
example# 18023
if is_aware ( value ) :pass
example# 18024
raise ValueError (  '_STR:0_' % value )
example# 18025
return value . replace ( tzinfo = timezone )
example# 18026
def make_naive ( value , timezone ) :pass
example# 18027
value = value . astimezone ( timezone )
example# 18028
if hasattr ( timezone , '_STR:0_' ) :pass
example# 18029
value = timezone . normalize ( value )
example# 18030
return value . replace ( tzinfo = None )
example# 18031
from __future__ import unicode_literals
example# 18032
import re
example# 18033
from django . utils . encoding import force_text
example# 18034
from django . utils . functional import lazy
example# 18035
from django . utils import six
example# 18036
__all__ = [  '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' ,  '_STR:4_' , 'get_language_from_request' ,  'get_language_info' , 'get_language_bidi' ,  'check_for_language' , 'to_locale' , 'templatize' , 'string_concat' ,  'gettext' , 'gettext_lazy' , 'gettext_noop' ,  'ugettext' , 'ugettext_lazy' , 'ugettext_noop' ,  'ngettext' , 'ngettext_lazy' ,  'ungettext' , 'ungettext_lazy' ,  'pgettext' , 'pgettext_lazy' ,  'npgettext' , 'npgettext_lazy' ,  'LANGUAGE_SESSION_KEY' ,  ]
example# 18037
LANGUAGE_SESSION_KEY = '_STR:22_'
example# 18038
class TranslatorCommentWarning ( SyntaxWarning ) :pass
example# 18039
pass
example# 18040
class Trans ( object ) :pass
example# 18041
def __getattr__ ( self , real_name ) :pass
example# 18042
from django . conf import settings
example# 18043
if settings . USE_I18N :pass
example# 18044
from django . utils . translation import trans_real as trans
example# 18045
if True: pass
else :pass
example# 18046
from django . utils . translation import trans_null as trans
example# 18047
setattr ( self , real_name , getattr ( trans , real_name ) )
example# 18048
return getattr ( trans , real_name )
example# 18049
_trans = Trans ( )
example# 18050
del Trans
example# 18051
def gettext_noop ( message ) :pass
example# 18052
return _trans . gettext_noop ( message )
example# 18053
ugettext_noop = gettext_noop
example# 18054
def gettext ( message ) :pass
example# 18055
return _trans . gettext ( message )
example# 18056
def ngettext ( singular , plural , number ) :pass
example# 18057
return _trans . ngettext ( singular , plural , number )
example# 18058
def ugettext ( message ) :pass
example# 18059
return _trans . ugettext ( message )
example# 18060
def ungettext ( singular , plural , number ) :pass
example# 18061
return _trans . ungettext ( singular , plural , number )
example# 18062
def pgettext ( context , message ) :pass
example# 18063
return _trans . pgettext ( context , message )
example# 18064
def npgettext ( context , singular , plural , number ) :pass
example# 18065
return _trans . npgettext ( context , singular , plural , number )
example# 18066
gettext_lazy = lazy ( gettext , str )
example# 18067
ugettext_lazy = lazy ( ugettext , six . text_type )
example# 18068
pgettext_lazy = lazy ( pgettext , six . text_type )
example# 18069
def lazy_number ( func , resultclass , number = None , ** kwargs ) :pass
example# 18070
if isinstance ( number , int ) :pass
example# 18071
kwargs [ '_STR:0_' ] = number
example# 18072
proxy = lazy ( func , resultclass ) ( ** kwargs )
example# 18073
if True: pass
else :pass
example# 18074
class NumberAwareString ( resultclass ) :pass
example# 18075
def __mod__ ( self , rhs ) :pass
example# 18076
if isinstance ( rhs , dict ) and number :pass
example# 18077
try :pass
except: pass
example# 18078
number_value = rhs [ number ]
example# 18079
try: pass
except KeyError :pass
example# 18080
raise KeyError ( 'Your dictionary lacks key \'%s\'. '  'Please provide it, because it is required to '  'determine whether string is singular or plural.'  % number )
example# 18081
if True: pass
else :pass
example# 18082
number_value = rhs
example# 18083
kwargs [ '_STR:0_' ] = number_value
example# 18084
translated = func ( ** kwargs )
example# 18085
try :pass
except: pass
example# 18086
translated = translated % rhs
example# 18087
try: pass
except TypeError :pass
example# 18088
pass
example# 18089
return translated
example# 18090
proxy = lazy ( lambda ** kwargs : NumberAwareString ( ) , NumberAwareString ) ( ** kwargs )
example# 18091
return proxy
example# 18092
def ngettext_lazy ( singular , plural , number = None ) :pass
example# 18093
return lazy_number ( ngettext , str , singular = singular , plural = plural , number = number )
example# 18094
def ungettext_lazy ( singular , plural , number = None ) :pass
example# 18095
return lazy_number ( ungettext , six . text_type , singular = singular , plural = plural , number = number )
example# 18096
def npgettext_lazy ( context , singular , plural , number = None ) :pass
example# 18097
return lazy_number ( npgettext , six . text_type , context = context , singular = singular , plural = plural , number = number )
example# 18098
def activate ( language ) :pass
example# 18099
return _trans . activate ( language )
example# 18100
def deactivate ( ) :pass
example# 18101
return _trans . deactivate ( )
example# 18102
class override ( object ) :pass
example# 18103
def __init__ ( self , language , deactivate = False ) :pass
example# 18104
self . language = language
example# 18105
self . deactivate = deactivate
example# 18106
self . old_language = get_language ( )
example# 18107
def __enter__ ( self ) :pass
example# 18108
if self . language is not None :pass
example# 18109
activate ( self . language )
example# 18110
if True: pass
else :pass
example# 18111
deactivate_all ( )
example# 18112
def __exit__ ( self , exc_type , exc_value , traceback ) :pass
example# 18113
if self . deactivate :pass
example# 18114
deactivate ( )
example# 18115
if True: pass
else :pass
example# 18116
activate ( self . old_language )
example# 18117
def get_language ( ) :pass
example# 18118
return _trans . get_language ( )
example# 18119
def get_language_bidi ( ) :pass
example# 18120
return _trans . get_language_bidi ( )
example# 18121
def check_for_language ( lang_code ) :pass
example# 18122
return _trans . check_for_language ( lang_code )
example# 18123
def to_locale ( language ) :pass
example# 18124
return _trans . to_locale ( language )
example# 18125
def get_language_from_request ( request , check_path = False ) :pass
example# 18126
return _trans . get_language_from_request ( request , check_path )
example# 18127
def get_language_from_path ( path ) :pass
example# 18128
return _trans . get_language_from_path ( path )
example# 18129
def templatize ( src , origin = None ) :pass
example# 18130
return _trans . templatize ( src , origin )
example# 18131
def deactivate_all ( ) :pass
example# 18132
return _trans . deactivate_all ( )
example# 18133
def _string_concat ( * strings ) :pass
example# 18134
return '' . join ( force_text ( s ) for s in strings )
example# 18135
string_concat = lazy ( _string_concat , six . text_type )
example# 18136
def get_language_info ( lang_code ) :pass
example# 18137
from django . conf . locale import LANG_INFO
example# 18138
try :pass
except: pass
example# 18139
return LANG_INFO [ lang_code ]
example# 18140
try: pass
except KeyError :pass
example# 18141
if '_STR:0_' not in lang_code :pass
example# 18142
raise KeyError ( '_STR:0_' % lang_code )
example# 18143
generic_lang_code = lang_code . split ( '_STR:0_' ) [ 0 ]
example# 18144
try :pass
except: pass
example# 18145
return LANG_INFO [ generic_lang_code ]
example# 18146
try: pass
except KeyError :pass
example# 18147
raise KeyError ( '_STR:0_' % ( lang_code , generic_lang_code ) )
example# 18148
trim_whitespace_re = re . compile ( '_STR:0_' )
example# 18149
def trim_whitespace ( s ) :pass
example# 18150
return trim_whitespace_re . sub ( ' ' , s . strip ( ) )
example# 18151
from django . conf import settings
example# 18152
from django . utils . encoding import force_text
example# 18153
from django . utils . safestring import mark_safe , SafeData
example# 18154
def ngettext ( singular , plural , number ) :pass
example# 18155
if number == 1 :pass
example# 18156
return singular
example# 18157
return plural
example# 18158
ngettext_lazy = ngettext
example# 18159
def ungettext ( singular , plural , number ) :pass
example# 18160
return force_text ( ngettext ( singular , plural , number ) )
example# 18161
def pgettext ( context , message ) :pass
example# 18162
return ugettext ( message )
example# 18163
def npgettext ( context , singular , plural , number ) :pass
example# 18164
return ungettext ( singular , plural , number )
example# 18165
activate = lambda x : None
example# 18166
deactivate = deactivate_all = lambda : None
example# 18167
get_language = lambda : settings . LANGUAGE_CODE
example# 18168
get_language_bidi = lambda : settings . LANGUAGE_CODE in settings . LANGUAGES_BIDI
example# 18169
check_for_language = lambda x : True
example# 18170
def gettext ( message ) :pass
example# 18171
if isinstance ( message , SafeData ) :pass
example# 18172
return mark_safe ( message )
example# 18173
return message
example# 18174
def ugettext ( message ) :pass
example# 18175
return force_text ( gettext ( message ) )
example# 18176
gettext_noop = gettext_lazy = _ = gettext
example# 18177
def to_locale ( language ) :pass
example# 18178
p = language . find ( '_STR:0_' )
example# 18179
if p >= 0 :pass
example# 18180
return language [ : p ] . lower ( ) + '_STR:0_' + language [ p + 1 : ] . upper ( )
example# 18181
if True: pass
else :pass
example# 18182
return language . lower ( )
example# 18183
def get_language_from_request ( request , check_path = False ) :pass
example# 18184
return settings . LANGUAGE_CODE
example# 18185
def get_language_from_path ( request ) :pass
example# 18186
return None
example# 18187
from __future__ import unicode_literals
example# 18188
from collections import OrderedDict
example# 18189
import os
example# 18190
import re
example# 18191
import sys
example# 18192
import gettext as gettext_module
example# 18193
from threading import local
example# 18194
import warnings
example# 18195
from django . apps import apps
example# 18196
from django . conf import settings
example# 18197
from django . core . exceptions import AppRegistryNotReady
example# 18198
from django . dispatch import receiver
example# 18199
from django . test . signals import setting_changed
example# 18200
from django . utils . deprecation import RemovedInDjango19Warning
example# 18201
from django . utils . encoding import force_text
example# 18202
from django . utils . _os import upath
example# 18203
from django . utils . safestring import mark_safe , SafeData
example# 18204
from django . utils import six , lru_cache
example# 18205
from django . utils . six import StringIO
example# 18206
from django . utils . translation import TranslatorCommentWarning , trim_whitespace , LANGUAGE_SESSION_KEY
example# 18207
_translations = { }
example# 18208
_active = local ( )
example# 18209
_default = None
example# 18210
_supported = None
example# 18211
CONTEXT_SEPARATOR = '_STR:0_'
example# 18212
accept_language_re = re . compile ( r'''         ([A-Za-z]{1,8}(?:-[A-Za-z0-9]{1,8})*|\*)      # "en", "en-au", "x-y-z", "es-419", "*"         (?:\s*;\s*q=(0(?:\.\d{,3})?|1(?:.0{,3})?))?   # Optional "q=1.00", "q=0.8"         (?:\s*,\s*|$)                                 # Multiple accepts per header.         ''' , re . VERBOSE )
example# 18213
language_code_re = re . compile ( r'_STR:0_' , re . IGNORECASE )
example# 18214
language_code_prefix_re = re . compile ( r'_STR:0_' )
example# 18215
_BROWSERS_DEPRECATED_LOCALES = {  '_STR:1_' : '_STR:0_' ,  '_STR:3_' : '_STR:2_' ,  }
example# 18216
_DJANGO_DEPRECATED_LOCALES = _BROWSERS_DEPRECATED_LOCALES
example# 18217
@ receiver ( setting_changed )
def dummy(): pass
example# 18218
def reset_cache ( ** kwargs ) :pass
example# 18219
if kwargs [ '_STR:0_' ] in ( '_STR:1_' , '_STR:2_' ) :pass
example# 18220
global _supported
example# 18221
_supported = None
example# 18222
check_for_language . cache_clear ( )
example# 18223
get_supported_language_variant . cache_clear ( )
example# 18224
def to_locale ( language , to_lower = False ) :pass
example# 18225
p = language . find ( '_STR:0_' )
example# 18226
if p >= 0 :pass
example# 18227
if to_lower :pass
example# 18228
return language [ : p ] . lower ( ) + '_STR:0_' + language [ p + 1 : ] . lower ( )
example# 18229
if True: pass
else :pass
example# 18230
if len ( language [ p + 1 : ] ) > 2 :pass
example# 18231
return language [ : p ] . lower ( ) + '_STR:0_' + language [ p + 1 ] . upper ( ) + language [ p + 2 : ] . lower ( )
example# 18232
return language [ : p ] . lower ( ) + '_STR:0_' + language [ p + 1 : ] . upper ( )
example# 18233
if True: pass
else :pass
example# 18234
return language . lower ( )
example# 18235
def to_language ( locale ) :pass
example# 18236
p = locale . find ( '_' )
example# 18237
if p >= 0 :pass
example# 18238
return locale [ : p ] . lower ( ) + '-' + locale [ p + 1 : ] . lower ( )
example# 18239
if True: pass
else :pass
example# 18240
return locale . lower ( )
example# 18241
class DjangoTranslation ( gettext_module . GNUTranslations ) :pass
example# 18242
def __init__ ( self , language ) :pass
example# 18243
gettext_module . GNUTranslations . __init__ ( self )
example# 18244
self . __language = language
example# 18245
self . __to_language = to_language ( language )
example# 18246
self . __locale = to_locale ( language )
example# 18247
self . plural = lambda n : int ( n != 1 )
example# 18248
self . _init_translation_catalog ( )
example# 18249
self . _add_installed_apps_translations ( )
example# 18250
self . _add_local_translations ( )
example# 18251
self . _add_fallback ( )
example# 18252
def __repr__ ( self ) :pass
example# 18253
return '_STR:0_' % self . __language
example# 18254
def _new_gnu_trans ( self , localedir , use_null_fallback = True ) :pass
example# 18255
translation = gettext_module . translation (  domain = '_STR:0_' ,  localedir = localedir ,  languages = [ self . __locale ] ,  codeset = 'utf-8' ,  fallback = use_null_fallback )
example# 18256
if not hasattr ( translation , '_STR:1_' ) :pass
example# 18257
translation . _catalog = { }
example# 18258
translation . _info = { }
example# 18259
return translation
example# 18260
def _init_translation_catalog ( self ) :pass
example# 18261
settingsfile = upath ( sys . modules [ settings . __module__ ] . __file__ )
example# 18262
localedir = os . path . join ( os . path . dirname ( settingsfile ) , '_STR:0_' )
example# 18263
use_null_fallback = True
example# 18264
if self . __language == settings . LANGUAGE_CODE :pass
example# 18265
use_null_fallback = False
example# 18266
translation = self . _new_gnu_trans ( localedir , use_null_fallback )
example# 18267
self . _info = translation . _info . copy ( )
example# 18268
self . _catalog = translation . _catalog . copy ( )
example# 18269
def _add_installed_apps_translations ( self ) :pass
example# 18270
try :pass
except: pass
example# 18271
app_configs = reversed ( list ( apps . get_app_configs ( ) ) )
example# 18272
try: pass
except AppRegistryNotReady :pass
example# 18273
raise AppRegistryNotReady (  '_STR:0_'  "apps registry is ready. Check that you don't make non-lazy "  "gettext calls at import time." )
example# 18274
for app_config in app_configs :pass
example# 18275
localedir = os . path . join ( app_config . path , '_STR:0_' )
example# 18276
translation = self . _new_gnu_trans ( localedir )
example# 18277
self . merge ( translation )
example# 18278
def _add_local_translations ( self ) :pass
example# 18279
for localedir in reversed ( settings . LOCALE_PATHS ) :pass
example# 18280
translation = self . _new_gnu_trans ( localedir )
example# 18281
self . merge ( translation )
example# 18282
def _add_fallback ( self ) :pass
example# 18283
if self . __language == settings . LANGUAGE_CODE or self . __language == '_STR:0_' :pass
example# 18284
return
example# 18285
default_translation = translation ( settings . LANGUAGE_CODE )
example# 18286
self . add_fallback ( default_translation )
example# 18287
def merge ( self , other ) :pass
example# 18288
self . _catalog . update ( other . _catalog )
example# 18289
def language ( self ) :pass
example# 18290
return self . __language
example# 18291
def to_language ( self ) :pass
example# 18292
return self . __to_language
example# 18293
def translation ( language ) :pass
example# 18294
global _translations
example# 18295
if language not in _translations :pass
example# 18296
_translations [ language ] = DjangoTranslation ( language )
example# 18297
return _translations [ language ]
example# 18298
def activate ( language ) :pass
example# 18299
if language in _DJANGO_DEPRECATED_LOCALES :pass
example# 18300
msg = ( "The use of the language code '%s' is deprecated. "  "Please use the '%s' translation instead." )
example# 18301
warnings . warn ( msg % ( language , _DJANGO_DEPRECATED_LOCALES [ language ] ) ,  RemovedInDjango19Warning , stacklevel = 2 )
example# 18302
_active . value = translation ( language )
example# 18303
def deactivate ( ) :pass
example# 18304
if hasattr ( _active , '_STR:0_' ) :pass
example# 18305
del _active . value
example# 18306
def deactivate_all ( ) :pass
example# 18307
_active . value = gettext_module . NullTranslations ( )
example# 18308
def get_language ( ) :pass
example# 18309
t = getattr ( _active , "value" , None )
example# 18310
if t is not None :pass
example# 18311
try :pass
except: pass
example# 18312
return t . to_language ( )
example# 18313
try: pass
except AttributeError :pass
example# 18314
pass
example# 18315
return settings . LANGUAGE_CODE
example# 18316
def get_language_bidi ( ) :pass
example# 18317
base_lang = get_language ( ) . split ( '_STR:0_' ) [ 0 ]
example# 18318
return base_lang in settings . LANGUAGES_BIDI
example# 18319
def catalog ( ) :pass
example# 18320
global _default
example# 18321
t = getattr ( _active , "value" , None )
example# 18322
if t is not None :pass
example# 18323
return t
example# 18324
if _default is None :pass
example# 18325
_default = translation ( settings . LANGUAGE_CODE )
example# 18326
return _default
example# 18327
def do_translate ( message , translation_function ) :pass
example# 18328
global _default
example# 18329
eol_message = message . replace ( str ( '_STR:0_' ) , str ( '_STR:1_' ) ) . replace ( str ( '_STR:2_' ) , str ( '_STR:1_' ) )
example# 18330
t = getattr ( _active , "value" , None )
example# 18331
if t is not None :pass
example# 18332
result = getattr ( t , translation_function ) ( eol_message )
example# 18333
if True: pass
else :pass
example# 18334
if _default is None :pass
example# 18335
_default = translation ( settings . LANGUAGE_CODE )
example# 18336
result = getattr ( _default , translation_function ) ( eol_message )
example# 18337
if isinstance ( message , SafeData ) :pass
example# 18338
return mark_safe ( result )
example# 18339
return result
example# 18340
def gettext ( message ) :pass
example# 18341
return do_translate ( message , '_STR:0_' )
example# 18342
if six . PY3 :pass
example# 18343
ugettext = gettext
example# 18344
if True: pass
else :pass
example# 18345
def ugettext ( message ) :pass
example# 18346
return do_translate ( message , '_STR:0_' )
example# 18347
def pgettext ( context , message ) :pass
example# 18348
msg_with_ctxt = "%s%s%s" % ( context , CONTEXT_SEPARATOR , message )
example# 18349
result = ugettext ( msg_with_ctxt )
example# 18350
if CONTEXT_SEPARATOR in result :pass
example# 18351
result = force_text ( message )
example# 18352
return result
example# 18353
def gettext_noop ( message ) :pass
example# 18354
return message
example# 18355
def do_ntranslate ( singular , plural , number , translation_function ) :pass
example# 18356
global _default
example# 18357
t = getattr ( _active , "value" , None )
example# 18358
if t is not None :pass
example# 18359
return getattr ( t , translation_function ) ( singular , plural , number )
example# 18360
if _default is None :pass
example# 18361
_default = translation ( settings . LANGUAGE_CODE )
example# 18362
return getattr ( _default , translation_function ) ( singular , plural , number )
example# 18363
def ngettext ( singular , plural , number ) :pass
example# 18364
return do_ntranslate ( singular , plural , number , '_STR:0_' )
example# 18365
if six . PY3 :pass
example# 18366
ungettext = ngettext
example# 18367
if True: pass
else :pass
example# 18368
def ungettext ( singular , plural , number ) :pass
example# 18369
return do_ntranslate ( singular , plural , number , 'ungettext' )
example# 18370
def npgettext ( context , singular , plural , number ) :pass
example# 18371
msgs_with_ctxt = ( "%s%s%s" % ( context , CONTEXT_SEPARATOR , singular ) ,  "%s%s%s" % ( context , CONTEXT_SEPARATOR , plural ) ,  number )
example# 18372
result = ungettext ( * msgs_with_ctxt )
example# 18373
if CONTEXT_SEPARATOR in result :pass
example# 18374
result = ungettext ( singular , plural , number )
example# 18375
return result
example# 18376
def all_locale_paths ( ) :pass
example# 18377
globalpath = os . path . join (  os . path . dirname ( upath ( sys . modules [ settings . __module__ ] . __file__ ) ) , 'locale' )
example# 18378
return [ globalpath ] + list ( settings . LOCALE_PATHS )
example# 18379
@ lru_cache . lru_cache ( maxsize = 1000 )
def dummy(): pass
example# 18380
def check_for_language ( lang_code ) :pass
example# 18381
if not language_code_re . search ( lang_code ) :pass
example# 18382
return False
example# 18383
for path in all_locale_paths ( ) :pass
example# 18384
if gettext_module . find ( '_STR:0_' , path , [ to_locale ( lang_code ) ] ) is not None :pass
example# 18385
return True
example# 18386
return False
example# 18387
@ lru_cache . lru_cache ( maxsize = 1000 )
def dummy(): pass
example# 18388
def get_supported_language_variant ( lang_code , strict = False ) :pass
example# 18389
global _supported
example# 18390
if _supported is None :pass
example# 18391
_supported = OrderedDict ( settings . LANGUAGES )
example# 18392
if lang_code :pass
example# 18393
replacement = _BROWSERS_DEPRECATED_LOCALES . get ( lang_code )
example# 18394
if lang_code not in _supported and replacement in _supported :pass
example# 18395
return replacement
example# 18396
generic_lang_code = lang_code . split ( '_STR:0_' ) [ 0 ]
example# 18397
for code in ( lang_code , generic_lang_code ) :pass
example# 18398
if code in _supported and check_for_language ( code ) :pass
example# 18399
return code
example# 18400
if not strict :pass
example# 18401
for supported_code in _supported :pass
example# 18402
if supported_code . startswith ( generic_lang_code + '_STR:0_' ) :pass
example# 18403
return supported_code
example# 18404
raise LookupError ( lang_code )
example# 18405
def get_language_from_path ( path , strict = False ) :pass
example# 18406
regex_match = language_code_prefix_re . match ( path )
example# 18407
if not regex_match :pass
example# 18408
return None
example# 18409
lang_code = regex_match . group ( 1 )
example# 18410
try :pass
except: pass
example# 18411
return get_supported_language_variant ( lang_code , strict = strict )
example# 18412
try: pass
except LookupError :pass
example# 18413
return None
example# 18414
def get_language_from_request ( request , check_path = False ) :pass
example# 18415
global _supported
example# 18416
if _supported is None :pass
example# 18417
_supported = OrderedDict ( settings . LANGUAGES )
example# 18418
if check_path :pass
example# 18419
lang_code = get_language_from_path ( request . path_info )
example# 18420
if lang_code is not None :pass
example# 18421
return lang_code
example# 18422
if hasattr ( request , '_STR:0_' ) :pass
example# 18423
lang_code = request . session . get ( LANGUAGE_SESSION_KEY )
example# 18424
if lang_code in _supported and lang_code is not None and check_for_language ( lang_code ) :pass
example# 18425
return lang_code
example# 18426
lang_code = request . COOKIES . get ( settings . LANGUAGE_COOKIE_NAME )
example# 18427
try :pass
except: pass
example# 18428
return get_supported_language_variant ( lang_code )
example# 18429
try: pass
except LookupError :pass
example# 18430
pass
example# 18431
accept = request . META . get ( '_STR:0_' , '' )
example# 18432
for accept_lang , unused in parse_accept_lang_header ( accept ) :pass
example# 18433
if accept_lang == '_STR:0_' :pass
example# 18434
break
example# 18435
if not language_code_re . search ( accept_lang ) :pass
example# 18436
continue
example# 18437
try :pass
except: pass
example# 18438
return get_supported_language_variant ( accept_lang )
example# 18439
try: pass
except LookupError :pass
example# 18440
continue
example# 18441
try :pass
except: pass
example# 18442
return get_supported_language_variant ( settings . LANGUAGE_CODE )
example# 18443
try: pass
except LookupError :pass
example# 18444
return settings . LANGUAGE_CODE
example# 18445
dot_re = re . compile ( r'_STR:0_' )
example# 18446
def blankout ( src , char ) :pass
example# 18447
return dot_re . sub ( char , src )
example# 18451
endblock_re = re . compile ( r""'_STR:0_'"" )
example# 18452
plural_re = re . compile ( r""'_STR:0_'"" )
example# 18454
one_percent_re = re . compile ( r""'_STR:0_'"" )
example# 18455
def templatize ( src , origin = None ) :pass
example# 18456
from django . template import ( Lexer , TOKEN_TEXT , TOKEN_VAR , TOKEN_BLOCK ,  TOKEN_COMMENT , TRANSLATOR_COMMENT_MARK )
example# 18457
src = force_text ( src , settings . FILE_CHARSET )
example# 18458
out = StringIO ( '' )
example# 18459
message_context = None
example# 18460
intrans = False
example# 18461
inplural = False
example# 18462
trimmed = False
example# 18463
singular = [ ]
example# 18464
plural = [ ]
example# 18465
incomment = False
example# 18466
comment = [ ]
example# 18467
lineno_comment_map = { }
example# 18468
comment_lineno_cache = None
example# 18469
def join_tokens ( tokens , trim = False ) :pass
example# 18470
message = '' . join ( tokens )
example# 18471
if trim :pass
example# 18472
message = trim_whitespace ( message )
example# 18473
return message
example# 18474
for t in Lexer ( src , origin ) . tokenize ( ) :pass
example# 18475
if incomment :pass
example# 18476
if t . token_type == TOKEN_BLOCK and t . contents == '_STR:0_' :pass
example# 18477
content = '' . join ( comment )
example# 18478
translators_comment_start = None
example# 18479
for lineno , line in enumerate ( content . splitlines ( True ) ) :pass
example# 18480
if line . lstrip ( ) . startswith ( TRANSLATOR_COMMENT_MARK ) :pass
example# 18481
translators_comment_start = lineno
example# 18482
for lineno , line in enumerate ( content . splitlines ( True ) ) :pass
example# 18483
if translators_comment_start is not None and lineno >= translators_comment_start :pass
example# 18484
out . write ( '_STR:0_' % line )
example# 18485
if True: pass
else :pass
example# 18486
out . write ( '_STR:0_' )
example# 18487
incomment = False
example# 18488
comment = [ ]
example# 18489
if True: pass
else :pass
example# 18490
comment . append ( t . contents )
example# 18491
if True: pass
elif intrans :pass
example# 18492
if t . token_type == TOKEN_BLOCK :pass
example# 18493
endbmatch = endblock_re . match ( t . contents )
example# 18494
pluralmatch = plural_re . match ( t . contents )
example# 18495
if endbmatch :pass
example# 18496
if inplural :pass
example# 18497
if message_context :pass
example# 18498
out . write ( '_STR:1_' % (  message_context ,  join_tokens ( singular , trimmed ) ,  join_tokens ( plural , trimmed ) ) )
example# 18499
if True: pass
else :pass
example# 18500
out . write ( '_STR:1_' % (  join_tokens ( singular , trimmed ) ,  join_tokens ( plural , trimmed ) ) )
example# 18501
for part in singular :pass
example# 18502
out . write ( blankout ( part , '_STR:0_' ) )
example# 18503
for part in plural :pass
example# 18504
out . write ( blankout ( part , '_STR:0_' ) )
example# 18505
if True: pass
else :pass
example# 18506
if message_context :pass
example# 18507
out . write ( '_STR:1_' % (  message_context ,  join_tokens ( singular , trimmed ) ) )
example# 18508
if True: pass
else :pass
example# 18509
out . write ( '_STR:1_' % join_tokens ( singular ,  trimmed ) )
example# 18510
for part in singular :pass
example# 18511
out . write ( blankout ( part , '_STR:0_' ) )
example# 18512
message_context = None
example# 18513
intrans = False
example# 18514
inplural = False
example# 18515
singular = [ ]
example# 18516
plural = [ ]
example# 18517
if True: pass
elif pluralmatch :pass
example# 18518
inplural = True
example# 18519
if True: pass
else :pass
example# 18520
filemsg = ''
example# 18521
if origin :pass
example# 18522
filemsg = '_STR:0_' % origin
example# 18523
raise SyntaxError ( '_STR:0_' % ( t . contents , filemsg , t . lineno ) )
example# 18524
if True: pass
elif t . token_type == TOKEN_VAR :pass
example# 18525
if inplural :pass
example# 18526
plural . append ( '_STR:0_' % t . contents )
example# 18527
if True: pass
else :pass
example# 18528
singular . append ( '_STR:0_' % t . contents )
example# 18529
if True: pass
elif t . token_type == TOKEN_TEXT :pass
example# 18530
contents = one_percent_re . sub ( '_STR:0_' , t . contents )
example# 18531
if inplural :pass
example# 18532
plural . append ( contents )
example# 18533
if True: pass
else :pass
example# 18534
singular . append ( contents )
example# 18535
if True: pass
else :pass
example# 18536
if comment_lineno_cache is not None :pass
example# 18537
cur_lineno = t . lineno + t . contents . count ( '_STR:0_' )
example# 18538
if comment_lineno_cache == cur_lineno :pass
example# 18539
if t . token_type != TOKEN_COMMENT :pass
example# 18540
for c in lineno_comment_map [ comment_lineno_cache ] :pass
example# 18541
filemsg = ''
example# 18542
if origin :pass
example# 18543
filemsg = '_STR:0_' % origin
example# 18544
warn_msg = ( "The translator-targeted comment '%s' "  "(%sline %d) was ignored, because it wasn't the last item "  "on the line." ) % ( c , filemsg , comment_lineno_cache )
example# 18545
warnings . warn ( warn_msg , TranslatorCommentWarning )
example# 18546
lineno_comment_map [ comment_lineno_cache ] = [ ]
example# 18547
if True: pass
else :pass
example# 18548
out . write ( '# %s' % '_STR:0_' . join ( lineno_comment_map [ comment_lineno_cache ] ) )
example# 18549
comment_lineno_cache = None
example# 18550
if t . token_type == TOKEN_BLOCK :pass
example# 18551
imatch = inline_re . match ( t . contents )
example# 18552
bmatch = block_re . match ( t . contents )
example# 18553
cmatches = constant_re . findall ( t . contents )
example# 18554
if imatch :pass
example# 18555
g = imatch . group ( 1 )
example# 18556
if g [ 0 ] == '_STR:0_' :pass
example# 18557
g = g . strip ( '_STR:0_' )
example# 18558
if True: pass
elif g [ 0 ] == '_STR:0_' :pass
example# 18559
g = g . strip ( '_STR:0_' )
example# 18560
g = one_percent_re . sub ( '_STR:0_' , g )
example# 18561
if imatch . group ( 2 ) :pass
example# 18562
context_match = context_re . match ( imatch . group ( 2 ) )
example# 18563
message_context = context_match . group ( 1 )
example# 18564
if message_context [ 0 ] == '_STR:0_' :pass
example# 18565
message_context = message_context . strip ( '_STR:0_' )
example# 18566
if True: pass
elif message_context [ 0 ] == '_STR:0_' :pass
example# 18567
message_context = message_context . strip ( '_STR:0_' )
example# 18568
out . write ( '_STR:0_' % ( message_context , g ) )
example# 18569
message_context = None
example# 18570
if True: pass
else :pass
example# 18571
out . write ( '_STR:0_' % g )
example# 18572
if True: pass
elif bmatch :pass
example# 18573
for fmatch in constant_re . findall ( t . contents ) :pass
example# 18574
out . write ( '_STR:0_' % fmatch )
example# 18575
if bmatch . group ( 1 ) :pass
example# 18576
context_match = context_re . match ( bmatch . group ( 1 ) )
example# 18577
message_context = context_match . group ( 1 )
example# 18578
if message_context [ 0 ] == '_STR:0_' :pass
example# 18579
message_context = message_context . strip ( '_STR:0_' )
example# 18580
if True: pass
elif message_context [ 0 ] == '_STR:0_' :pass
example# 18581
message_context = message_context . strip ( '_STR:0_' )
example# 18582
intrans = True
example# 18583
inplural = False
example# 18584
trimmed = '_STR:0_' in t . split_contents ( )
example# 18585
singular = [ ]
example# 18586
plural = [ ]
example# 18587
if True: pass
elif cmatches :pass
example# 18588
for cmatch in cmatches :pass
example# 18589
out . write ( '_STR:0_' % cmatch )
example# 18590
if True: pass
elif t . contents == '_STR:0_' :pass
example# 18591
incomment = True
example# 18592
if True: pass
else :pass
example# 18593
out . write ( blankout ( t . contents , '_STR:0_' ) )
example# 18594
if True: pass
elif t . token_type == TOKEN_VAR :pass
example# 18595
parts = t . contents . split ( '_STR:0_' )
example# 18596
cmatch = constant_re . match ( parts [ 0 ] )
example# 18597
if cmatch :pass
example# 18598
out . write ( '_STR:0_' % cmatch . group ( 1 ) )
example# 18599
for p in parts [ 1 : ] :pass
example# 18600
if p . find ( '_STR:0_' ) >= 0 :pass
example# 18601
out . write ( ' %s ' % p . split ( '_STR:0_' , 1 ) [ 1 ] )
example# 18602
if True: pass
else :pass
example# 18603
out . write ( blankout ( p , '_STR:0_' ) )
example# 18604
if True: pass
elif t . token_type == TOKEN_COMMENT :pass
example# 18605
if t . contents . lstrip ( ) . startswith ( TRANSLATOR_COMMENT_MARK ) :pass
example# 18606
lineno_comment_map . setdefault ( t . lineno ,  [ ] ) . append ( t . contents )
example# 18607
comment_lineno_cache = t . lineno
example# 18608
if True: pass
else :pass
example# 18609
out . write ( blankout ( t . contents , '_STR:0_' ) )
example# 18610
return out . getvalue ( )
example# 18611
def parse_accept_lang_header ( lang_string ) :pass
example# 18612
result = [ ]
example# 18613
pieces = accept_language_re . split ( lang_string . lower ( ) )
example# 18614
if pieces [ - 1 ] :pass
example# 18615
return [ ]
example# 18616
for i in range ( 0 , len ( pieces ) - 1 , 3 ) :pass
example# 18617
first , lang , priority = pieces [ i : i + 3 ]
example# 18618
if first :pass
example# 18619
return [ ]
example# 18620
if priority :pass
example# 18621
try :pass
except: pass
example# 18622
priority = float ( priority )
example# 18623
try: pass
except ValueError :pass
example# 18624
return [ ]
example# 18625
if not priority :pass
example# 18626
priority = 1.0
example# 18627
result . append ( ( lang , priority ) )
example# 18628
result . sort ( key = lambda k : k [ 1 ] , reverse = True )
example# 18629
return result
example# 18630
import copy
example# 18631
class Node ( object ) :pass
example# 18632
default = '_STR:0_'
example# 18633
def __init__ ( self , children = None , connector = None , negated = False ) :pass
example# 18634
self . children = children [ : ] if children else [ ]
example# 18635
self . connector = connector or self . default
example# 18636
self . negated = negated
example# 18637
@ classmethod
def dummy(): pass
example# 18638
def _new_instance ( cls , children = None , connector = None , negated = False ) :pass
example# 18639
obj = Node ( children , connector , negated )
example# 18640
obj . __class__ = cls
example# 18641
return obj
example# 18642
def __str__ ( self ) :pass
example# 18643
if self . negated :pass
example# 18644
return '_STR:0_' % ( self . connector , '_STR:1_' . join ( [ str ( c ) for c  in self . children ] ) )
example# 18645
return '_STR:0_' % ( self . connector , '_STR:1_' . join ( [ str ( c ) for c in  self . children ] ) )
example# 18646
def __repr__ ( self ) :pass
example# 18647
return '_STR:0_' % ( self . __class__ . __name__ , self )
example# 18648
def __deepcopy__ ( self , memodict ) :pass
example# 18649
obj = Node ( connector = self . connector , negated = self . negated )
example# 18650
obj . __class__ = self . __class__
example# 18651
obj . children = copy . deepcopy ( self . children , memodict )
example# 18652
return obj
example# 18653
def __len__ ( self ) :pass
example# 18654
return len ( self . children )
example# 18655
def __bool__ ( self ) :pass
example# 18656
return bool ( self . children )
example# 18657
def __nonzero__ ( self ) :pass
example# 18658
return type ( self ) . __bool__ ( self )
example# 18659
def __contains__ ( self , other ) :pass
example# 18660
return other in self . children
example# 18661
def _prepare_data ( self , data ) :pass
example# 18662
return data
example# 18663
def add ( self , data , conn_type , squash = True ) :pass
example# 18664
if data in self . children :pass
example# 18665
return data
example# 18666
data = self . _prepare_data ( data )
example# 18667
if not squash :pass
example# 18668
self . children . append ( data )
example# 18669
return data
example# 18670
if self . connector == conn_type :pass
example# 18671
if ( isinstance ( data , Node ) and not data . negated  and ( data . connector == conn_type or len ( data ) == 1 ) ) :pass
example# 18672
self . children . extend ( data . children )
example# 18673
return self
example# 18674
if True: pass
else :pass
example# 18675
self . children . append ( data )
example# 18676
return data
example# 18677
if True: pass
else :pass
example# 18678
obj = self . _new_instance ( self . children , self . connector ,  self . negated )
example# 18679
self . connector = conn_type
example# 18680
self . children = [ obj , data ]
example# 18681
return data
example# 18682
def negate ( self ) :pass
example# 18683
self . negated = not self . negated
example# 18684
from __future__ import unicode_literals
example# 18685
from datetime import timedelta , tzinfo
example# 18686
import time
example# 18687
import warnings
example# 18688
from django . utils . deprecation import RemovedInDjango19Warning
example# 18689
from django . utils . encoding import force_str , force_text , DEFAULT_LOCALE_ENCODING
example# 18690
warnings . warn (  '_STR:0_'  "Use django.utils.timezone instead." ,  RemovedInDjango19Warning , stacklevel = 2 )
example# 18691
class FixedOffset ( tzinfo ) :pass
example# 18692
def __init__ ( self , offset ) :pass
example# 18693
warnings . warn (  '_STR:0_'  "Use django.utils.timezone.get_fixed_timezone instead." ,  RemovedInDjango19Warning )
example# 18694
if isinstance ( offset , timedelta ) :pass
example# 18695
self . __offset = offset
example# 18696
offset = self . __offset . seconds // 60
example# 18697
if True: pass
else :pass
example# 18698
self . __offset = timedelta ( minutes = offset )
example# 18699
sign = '_STR:0_' if offset < 0 else '_STR:1_'
example# 18700
self . __name = '_STR:0_' % ( sign , abs ( offset ) / 60. , abs ( offset ) % 60 )
example# 18701
def __repr__ ( self ) :pass
example# 18702
return self . __name
example# 18703
def __getinitargs__ ( self ) :pass
example# 18704
return self . __offset ,
example# 18705
def utcoffset ( self , dt ) :pass
example# 18706
return self . __offset
example# 18707
def tzname ( self , dt ) :pass
example# 18708
return self . __name
example# 18709
def dst ( self , dt ) :pass
example# 18710
return timedelta ( 0 )
example# 18711
class LocalTimezone ( tzinfo ) :pass
example# 18712
def __init__ ( self , dt ) :pass
example# 18713
warnings . warn (  '_STR:0_'  "Use django.utils.timezone.get_default_timezone instead." ,  RemovedInDjango19Warning )
example# 18714
tzinfo . __init__ ( self )
example# 18715
self . __dt = dt
example# 18716
self . _tzname = self . tzname ( dt )
example# 18717
def __repr__ ( self ) :pass
example# 18718
return force_str ( self . _tzname )
example# 18719
def __getinitargs__ ( self ) :pass
example# 18720
return self . __dt ,
example# 18721
def utcoffset ( self , dt ) :pass
example# 18722
if self . _isdst ( dt ) :pass
example# 18723
return timedelta ( seconds = - time . altzone )
example# 18724
if True: pass
else :pass
example# 18725
return timedelta ( seconds = - time . timezone )
example# 18726
def dst ( self , dt ) :pass
example# 18727
if self . _isdst ( dt ) :pass
example# 18728
return timedelta ( seconds = - time . altzone ) - timedelta ( seconds = - time . timezone )
example# 18729
if True: pass
else :pass
example# 18730
return timedelta ( 0 )
example# 18731
def tzname ( self , dt ) :pass
example# 18732
is_dst = False if dt is None else self . _isdst ( dt )
example# 18733
try :pass
except: pass
example# 18734
return force_text ( time . tzname [ is_dst ] , DEFAULT_LOCALE_ENCODING )
example# 18735
try: pass
except UnicodeDecodeError :pass
example# 18736
return None
example# 18737
def _isdst ( self , dt ) :pass
example# 18738
tt = ( dt . year , dt . month , dt . day ,  dt . hour , dt . minute , dt . second ,  dt . weekday ( ) , 0 , 0 )
example# 18739
try :pass
except: pass
example# 18740
stamp = time . mktime ( tt )
example# 18741
try: pass
except ( OverflowError , ValueError ) :pass
example# 18742
tt = ( 2037 , ) + tt [ 1 : ]
example# 18743
stamp = time . mktime ( tt )
example# 18744
tt = time . localtime ( stamp )
example# 18745
return tt . tm_isdst > 0
example# 18746
from __future__ import absolute_import
example# 18747
import warnings
example# 18748
from django . utils . deprecation import RemovedInDjango19Warning
example# 18749
warnings . warn ( '_STR:0_' ,  RemovedInDjango19Warning , stacklevel = 2 )
example# 18750
try :pass
except: pass
example# 18751
from unittest2 import *
example# 18752
try: pass
except ImportError :pass
example# 18753
from unittest import *
example# 18754
from __future__ import unicode_literals
example# 18755
import datetime
example# 18756
import os
example# 18757
import subprocess
example# 18758
def get_version ( version = None ) :pass
example# 18759
version = get_complete_version ( version )
example# 18760
major = get_major_version ( version )
example# 18761
sub = ''
example# 18762
if version [ 3 ] == '_STR:0_' and version [ 4 ] == 0 :pass
example# 18763
git_changeset = get_git_changeset ( )
example# 18764
if git_changeset :pass
example# 18765
sub = '.dev%s' % git_changeset
example# 18766
if True: pass
elif version [ 3 ] != '_STR:0_' :pass
example# 18767
mapping = { '_STR:1_' : '_STR:0_' , '_STR:3_' : '_STR:2_' , '_STR:5_' : '_STR:4_' }
example# 18768
sub = mapping [ version [ 3 ] ] + str ( version [ 4 ] )
example# 18769
return str ( major + sub )
example# 18770
def get_major_version ( version = None ) :pass
example# 18771
version = get_complete_version ( version )
example# 18772
parts = 2 if version [ 2 ] == 0 else 3
example# 18773
major = '_STR:0_' . join ( str ( x ) for x in version [ : parts ] )
example# 18774
return major
example# 18775
def get_complete_version ( version = None ) :pass
example# 18776
if version is None :pass
example# 18777
from django import VERSION as version
example# 18778
if True: pass
else :pass
example# 18779
assert len ( version ) == 5
example# 18780
assert version [ 3 ] in ( '_STR:0_' , '_STR:1_' , '_STR:2_' , '_STR:3_' )
example# 18781
return version
example# 18782
def get_git_changeset ( ) :pass
example# 18783
if hasattr ( get_git_changeset , '_STR:0_' ) :pass
example# 18784
return get_git_changeset . cache
example# 18785
repo_dir = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) )
example# 18786
git_log = subprocess . Popen ( '_STR:0_' ,  stdout = subprocess . PIPE , stderr = subprocess . PIPE ,  shell = True , cwd = repo_dir , universal_newlines = True )
example# 18787
timestamp = git_log . communicate ( ) [ 0 ]
example# 18788
try :pass
except: pass
example# 18789
timestamp = datetime . datetime . utcfromtimestamp ( int ( timestamp ) )
example# 18790
try: pass
except ValueError :pass
example# 18791
changeset = None
example# 18792
if True: pass
else :pass
example# 18793
changeset = timestamp . strftime ( '_STR:0_' )
example# 18794
get_git_changeset . cache = changeset
example# 18795
return changeset
example# 18796
from xml . sax . saxutils import XMLGenerator
example# 18797
class SimplerXMLGenerator ( XMLGenerator ) :pass
example# 18798
def addQuickElement ( self , name , contents = None , attrs = None ) :pass
example# 18799
if attrs is None :pass
example# 18800
attrs = { }
example# 18801
self . startElement ( name , attrs )
example# 18802
if contents is not None :pass
example# 18803
self . characters ( contents )
example# 18804
self . endElement ( name )
