example# 0
from threading import local into default name space .
0
example# 1
import module warnings .
0
example# 2
from django.conf [ django . conf ] import settings into default name space .
0
example# 3
from django.core [ django . core ] import signals into default name space .
0
example# 4
from django.core.cache.backends.base [ django . core . cache . backends . base ] import InvalidCacheBackendError , CacheKeyWarning and BaseCache into default name space .
0
example# 5
from django.core.exceptions [ django . core . exceptions ] import ImproperlyConfigured into default name space .
0
example# 6
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
0
example# 7
from django.utils.module_loading [ django . utils . module_loading ] import import_string into default name space .
0
example# 8
__all__ is an list containing 6 elements : _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ ,
4
'DEFAULT_CACHE_ALIAS' ||| _STR:2_
'cache' ||| _STR:1_
'get_cache' ||| _STR:0_
'InvalidCacheBackendError' ||| _STR:3_
example# 9
_STR:0_ and _STR:1_ DEFAULT_CACHE_ALIAS is a string _STR:2_ .
3
'default' ||| _STR:2_
'BaseCache' ||| _STR:1_
'CacheKeyWarning' ||| _STR:0_
example# 10
if DEFAULT_CACHE_ALIAS is not contained in settings.CACHES [ settings . CACHES ] ,
0
example# 11
raise an exception ImproperlyConfigured with string _STR:0_ as argument , with ' % s ' replaced with DEFAULT_CACHE_ALIAS converted into a string .
1
"You must define a '%s' cache" ||| _STR:0_
example# 12
define the function get_cache with backend and dictionary pair of elements kwargs as arguments .
0
example# 13
call the function warnings.warn [ warnings . warn ] with string _STR:0_ , RemovedInDjango19Warning ,
1
"'get_cache' is deprecated in favor of 'caches'." ||| _STR:0_
example# 14
and stacklevel set to 2 as arguments . call the _create_cache with backend and dictionary kwargs as arguments , substitute the result for cache .
0
example# 15
call the function signals.request_finished.connect [ signals . request_finished . connect ] with argument cache.close [ cache . close ] .
0
example# 16
return cache .
0
example# 17
define the function _create_cache with backend and dictionary pair of elements kwargs as arguments .
0
example# 18
try ,
0
example# 19
try ,
0
example# 20
substitute value under the backend key of settings.CACHES [ settings . CACHES ] dictionary for conf .
0
example# 21
if KeyError exception is caught ,
0
example# 22
try ,
0
example# 23
call the function import_string with argument backend .
0
example# 24
if ImportError , renamed to e , exception is caught ,
0
example# 25
raise and exception InvalidCacheBackendError with string _STR:0_ as argument , replace ' % s ' with backend and e , respectively .
1
"Could not find backend '%s': %s" ||| _STR:0_
example# 26
remove _STR:0_ key from kwargs dictionary and put it into location , or use an empty string if key doesnt exists .
1
'LOCATION' ||| _STR:0_
example# 27
substitute kwargs for params .
0
example# 28
if not ,
0
example# 29
call the function conf.copy [ conf . copy ] , substitute it for params .
0
example# 30
call the function params.update [ params . update ] with argument kwargs .
0
example# 31
remove _STR:0_ key from params dictionary and put it into backend .
1
'BACKEND' ||| _STR:0_
example# 32
remove _STR:0_ key from kwargs dictionary and put it into location , or use an empty string if key doesnt exists .
1
'LOCATION' ||| _STR:0_
example# 33
call the import_string with argument backend , substitute it for backend_cls .
0
example# 34
if ImportError , renamed to e , is caught ,
0
example# 35
aise and exception InvalidCacheBackendError with string _STR:0_ as argument , replace ' % s ' with backend and e , respectively .
1
"Could not find backend '%s': %s" ||| _STR:0_
example# 36
evaluate the function backend_cls with location and params as arguments , return the result .
0
example# 37
derive the class CacheHandler from the object base class .
0
example# 38
define the __init__ method with argument self .
0
example# 39
call the function local , substitute the result for self._caches [ self . _caches ] .
0
example# 40
define the __getitem__ method with self and alias arguments .
0
example# 41
try ,
0
example# 42
return value under the alias key of self._caches.caches [ self . _caches . caches ] dictionary .
0
example# 43
except if AttributeError is caught ,
0
example# 44
self._caches.caches [ self . _caches . caches ] is an empty dictionary .
0
example# 45
except if KeyError exception is caught ,
0
example# 46
do nothing .
0
example# 47
if alias is not contained in setting.CACHES [ setting . CACHES ] ,
0
example# 48
raise and exception InvalidCacheBackendError with string _STR:0_ as argument , replace ' % s ' with alias .
1
"Could not find config for '%s' in settings.CACHES" ||| _STR:0_
example# 49
call the function _create_cache with argument alias .
0
example# 50
substitute cache for value under the alias key of self._caches.caches [ self . _caches . caches ] dictionary .
0
example# 51
reuturn cache .
0
example# 52
define the method all with argument self .
0
example# 53
get attribute _STR:0_ from the self._caches [ self . _caches ] if exists , otherwise get an empty dictionary , call the values method on the return value , return it .
1
'caches' ||| _STR:0_
example# 54
call the CacheHandler function , substitute the result for caches .
0
example# 55
derive the class DefaultCacheProxy from the base class object .
0
example# 56
define the method __getattr__ with self and name as arguments .
0
example# 57
get attribute name from value under the DEFAULT_CACHE_ALIAS key of caches dictionary , return it .
0
example# 58
define the method __setattr__ with self , name and value as arguments .
0
example# 59
set the attribute name from value under the DEFAULT_CACHE_ALIAS key of caches dictionary to value , return it .
0
example# 60
define the method __delattr__ with self and name as arguments .
0
example# 61
delete the attribute name from the cache dictionary under the DEFAULT_CACHE_ALIAS key .
0
example# 62
define the method __contains__ with self and key as arguments .
0
example# 63
if key if contained in value under the DEFAULT_CACHE_ALIAS key of caches dictionary , return boolean True , otherwise return False .
0
example# 64
define the method __eq__ with self and other as arguments .
0
example# 65
if value under the DEFAULT_CACHE_ALIAS key of caches dictionary equals to other , return boolean True , otherwise return False .
0
example# 66
define the method __ne__ with self and other as arguments .
0
example# 67
if value under the DEFAULT_CACHE_ALIAS key of caches dictionary is not equal to other , return boolean True , otherwise return False .
0
example# 68
call the DefaultCacheProxy function , substitute it for cache .
0
example# 69
define the function close_caches with dictionary pair of elements kwargs as argument .
0
example# 70
for every cache in return value of the function caches.all [ caches . all ] .
0
example# 71
call the function cache.close [ cache . close ] .
0
example# 72
call the function signals.request_finished.connect [ signals . request_finished . connect ] with argument close_caches .
0
example# 73
from __future__ import unicode_literals into default name space .
0
example# 74
import module time .
0
example# 75
import module warnings .
0
example# 76
from django.core.exceptions [ django . core . exceptions ] import ImproperlyConfigured and DjangoRuntimeWarning into default name space .
0
example# 77
from django.utils.module_loading [ django . utils . module_loading ] import import_string into default name space .
0
example# 78
derive class InvalidCacheBackendError from the ImproperlyConfigured base class .
0
example# 79
do nothing .
0
example# 80
derive class CacheKeyWarning from the DjangoRuntimeWarning base class .
0
example# 81
do nothing .
0
example# 82
DEFAULT_TIMEOUT is a instance of the class object .
0
example# 83
MEMCACHE_MAX_KEY_LENGTH is integer 250 .
0
example# 84
define the function default_key_func with 3 arguments , key , key_prefix and version .
0
example# 85
convert key_prefix , version and key into strings , concatenate them respectively , with character _STR:0_ as delimiter , return the result .
1
':' ||| _STR:0_
example# 86
define the function get_key_func with argument key_func .
0
example# 87
if key_func is not of None type ,
0
example# 88
if key_function is callable object ,
0
example# 89
return key_func .
0
example# 90
if not ,
0
example# 91
evaluate the function import_string with key_func as argument , return the result .
0
example# 92
return default_key_func .
0
example# 93
derive the class BaseCache from the object base class .
0
example# 94
define the initialization function __init__ with self class instance and params as arguments .
0
example# 95
call the params.get [ params . get ] method with string _STR:0_ and integer 300 as arguments , use the string _STR:1_ and previous result as the arguments for the call to the params.get [ params . get ] method , substitute the result for timeout .
2
'timeout' ||| _STR:1_
'TIMEOUT' ||| _STR:0_
example# 96
if timeout is not None ,
0
example# 97
try ,
0
example# 98
convert timeout into an integer .
0
example# 99
if ValueError or TypeError exceptions occurred ,
0
example# 100
timeout is integer 300 .
0
example# 101
substitute timeout for self.default_timeout [ self . default_timeout ] .
0
example# 102
call the params.get [ params . get ] with string _STR:0_ and empty dictionary as arguments , substitute the result for options .
1
'OPTIONS' ||| _STR:0_
example# 103
call the options.get [ options . get ] method with string _STR:0_ and integer 300 as arguments , use the string _STR:1_ and previous result as the arguments for the call to the params.get [ params . get ] method , substitute the result for max_entries .
2
'MAX_ENTRIES' ||| _STR:0_
'max_entries' ||| _STR:1_
example# 104
try ,
0
example# 105
convert max_entries into a string , substitute it for self._max_entries [ self . _max_entries ] .
0
example# 106
if ValueError or TypeError exceptions occurred ,
0
example# 107
self._max_entries [ self . _max_entries ] is integer 300 .
0
example# 108
call the options.get [ options . get ] method with string _STR:0_ and integer 3 as arguments , use the string _STR:1_ and previous result as the arguments for the call to the params.get [ params . get ] method , substitute the result for cull_frequency .
2
'cull_frequency' ||| _STR:1_
'CULL_FREQUENCY' ||| _STR:0_
example# 109
try ,
0
example# 110
convert cull_frequency into an integer and substitute it for self._cull_frequency [ self . _cull_frequency ] .
0
example# 111
if ValueError or TypeError exceptions occurred ,
0
example# 112
self._cull_frequency [ self . _cull_frequency ] is integer 3 .
0
example# 113
call the params.get [ params . get ] method with string _STR:0_ and an empty string as arguments , substitute the result for self._key_prefix [ self . _key_prefix ] .
1
'KEY_PREFIX' ||| _STR:0_
example# 114
call the params.get [ params . get ] method wit string _STR:0_ and integer 1 as arguments , substitute the result for self.version [ self . version ] .
1
'VERSION' ||| _STR:0_
example# 115
call the method params.get [ params . get ] with 2 arguments , string _STR:0_ and None , use the result as the argument for the call to the function get_key_func , substitute the result for the self.key_func [ self . key_func ] .
1
'KEY_FUNCTION' ||| _STR:0_
example# 116
define the method get_backend_timeout with self class instance and timeout set to DEFAULT_TIMEOUT as arguments ,
0
example# 117
if timeout equals to DEFAULT_TIMEOUT ,
0
example# 118
substitute self.default_timeout [ self . default_timeout ] for timeout .
0
example# 119
else if timeout equals to integer 0 ,
0
example# 120
timeout is a integer -1 .
0
example# 121
if timeouts is None return None , otherwise return the sum of function time.time [ time . time ] return value and timeout .
0
example# 122
define the function make_key with self class instance , key and version set to None as arguments .
0
example# 123
if version is None ,
0
example# 124
substitute self.version [ self . version ] for version .
0
example# 125
call the method self.key_function [ self . key_function ] with key , self.key_prefix [ self . key_prefix ] and version as arguments , substitute the result for new_key .
0
example# 126
return new_key .
0
example# 127
define the method add with 5 arguments , self , key , value , timeout defaulting to DEFAULT_TIMEOUT and version defaulting to None .
0
example# 128
docsring
0
example# 129
raise an exception of class NotImplementedError with string _STR:0_ as argument .
1
'subclasses of BaseCache must provide an add() method' ||| _STR:0_
example# 130
define the method get with 4 arguments , self , key , default set to None and version set to None .
0
example# 131
raise an exception of class NotImplementedError , with string _STR:0_ as argument .
1
'subclasses of BaseCache must provide a get() method' ||| _STR:0_
example# 132
define the method set with 5 arguments , self , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
0
example# 133
raise an exception of class NotImplementedError , with string _STR:0_ as argument .
1
'subclasses of BaseCache must provide a set() method' ||| _STR:0_
example# 134
define delete method with self class instance , key and version set to None , as arguments .
0
example# 135
raise an exception of class NotImplementedError , with string _STR:0_ as argument .
1
'subclasses of BaseCache must provide a delete() method' ||| _STR:0_
example# 136
define the get_many method with self class instance , keys and version set to None as arguments .
0
example# 137
d is an empty dictionary .
0
example# 138
for every k in keys ,
0
example# 139
call the self.get [ self . get ] method with k and version set to version as arguments , substitute the result for val .
0
example# 140
if val is not None ,
0
example# 141
substitute val for value under the k key of dictionary d .
0
example# 142
return d .
0
example# 143
define method has_key with self class instance , key and version set to None as arguments .
0
example# 144
call the self.get [ self . get ] method with key and version set to version as arguments , return it if it is not None .
0
example# 145
define the method incr with 4 arguments , self class instance , key , delta defaulting to integer 1 and version defaulting to None .
0
example# 146
call the method self.get [ self . get ] with key and version set to version as arguments , substitute the result for value .
0
example# 147
if value is None ,
0
example# 148
raise an exception of class ValueError , with string _STR:0_ as argument , where ' % s ' is substituted for key .
1
"Key '%s' not found" ||| _STR:0_
example# 149
add value and delta together , substitute the result for new_value .
0
example# 150
call the self.set [ self . set ] method with key , new_value and version set to version as arguments .
0
example# 151
return new_value .
0
example# 152
define the method decr with arguments self , key , delta defaulting to integer 1 and version defaulting to None .
0
example# 153
call the self.incr [ self . incr ] method with key , negative delta and version set to version as arguments .
0
example# 154
define the private method __contains__ with self class instance and key as arguments .
0
example# 155
evaluate the self.has_key [ self . has_key ] method with key as argument , return the result .
0
example# 156
define the method set_many with arguments , self , data , timeout defaulting to DEFAULT_TIMEOUT and version set to None .
0
example# 157
for every key and value in data.items [ data . items ] method return value ,
0
example# 158
call the method self.set [ self . set ] with arguments key , value , timeout set to timeout , version set to version .
0
example# 159
define the method delete_many with arguments self , keys and version defaulting to None .
0
example# 160
for every key in keys ,
0
example# 161
call the delete method with key and version set to version as arguments .
0
example# 162
define the method clear with self class instance as the argument ,
0
example# 163
raise an exception NotImplementedError with string _STR:0_ as argument .
1
'subclasses of BaseCache must provide a clear() method' ||| _STR:0_
example# 164
define the method validate_key with self class instance and key as arguments .
0
example# 165
if length of key is greater than MEMCACHE_MAX_KEY_LENGTH ,
0
example# 166
substitute ' % s ' in string _STR:0_ with key ,
1
'Cache key will cause errors if used with memcached: %s (longer than %s)' ||| _STR:0_
example# 167
and MEMCACHE_MAX_KEY_LENGTH , call the function warnings.warn [ warnings . warn ] with previous string and CacheKeyWarning as arguments . for every char in key ,
0
example# 168
if ascii value of char is smaller than integer 33 or is equal to integer 127 ,
0
example# 169
substitute _STR:0_ in string _STR:1_ with key ,
2
'Cache key contains characters that will cause errors if used with memcached: %r' ||| _STR:1_
'%r' ||| _STR:0_
example# 170
call the function warnings.warn [ warnings . warn ] with previous string and CacheKeyWarning as arguments . define the method incr_version with 4 arguments , self , key , delta defaulting to integer 1 and version defaulting to None .
0
example# 171
if version is None ,
0
example# 172
substitute self.version [ self . version ] for version .
0
example# 173
call the self.get [ self . get ] method with arguments key and version set to version , substitute the result for value .
0
example# 174
if value is None ,
0
example# 175
raise an exception of the class ValueError with string _STR:0_ as argument , ' % s ' is substituted for key .
1
"Key '%s' not found" ||| _STR:0_
example# 176
call the method self.set [ self . set ] with key , value , version incremented by delta , as arguments .
0
example# 177
call the self.delete [ self . delete ] method with key and version set to version as arguments .
0
example# 178
sum version and delta together , return the result .
0
example# 179
define the method decr_version with 4 arguments , self , key , delta defaulting to integer 1 and version defaulting to None .
0
example# 180
call the method self.incr_version [ self . incr_version ] with key , negative delta and version as arguments .
0
example# 181
define the close method with 2 arguments , self and dictionary of argument pairs kwargs .
0
example# 182
docstirng
0
example# 183
do nothing .
0
example# 184
import module base64 .
0
example# 185
from datetime import datetime into default name space .
0
example# 186
try ,
0
example# 187
from django.utils.six.moves [ django . utils . six . moves ] import cPickle as pickle , into default namespace .
0
example# 188
if ImportError exception occurred ,
0
example# 189
import pickle .
0
example# 190
from django.conf [ django . conf ] import settings into default name space .
0
example# 191
from django.core.cache.backends.base [ django . core . cache . backends . base ] import BaseCache and DEFAULT_TIMEOUT into default name space .
0
example# 192
from django.db [ django . db ] import connections , transaction , router and DatabaseError into default name space .
0
example# 193
from django.db.backends.utils [ django . db . backends . utils ] import typecast_timestamp into default name space .
0
example# 194
from django.utils [ django . utils ] import timezone and six into default name space .
0
example# 195
from django.utils.encoding [ django . utils . encoding ] import force_bytes into default name space .
0
example# 196
derive class Options from the base class object .
0
example# 197
define the initialization method __init__ with self class instance and table as arguments .
0
example# 198
substitute table for self.db_table [ self . db_table ] .
0
example# 199
self.app_label [ self . app_label ] is a string _STR:0_ .
1
'django_cache' ||| _STR:0_
example# 200
self.model_name [ self . model_name ] is a string _STR:0_ .
1
'cacheentry' ||| _STR:0_
example# 201
self.verbose_name [ self . verbose_name ] is a string _STR:0_ .
1
'cache entry' ||| _STR:0_
example# 202
self.verbose_name_plural [ self . verbose_name_plural ] is a string _STR:0_ .
1
'cache entries' ||| _STR:0_
example# 203
self.object_name [ self . object_name ] is a string _STR:0_ .
1
'CacheEntry' ||| _STR:0_
example# 204
self.abstract [ self . abstract ] is boolean False .
0
example# 205
self.managed [ self . managed ] is boolean True .
0
example# 206
self.proxy [ self . proxy ] is boolean False .
0
example# 207
derive class BaseDatabaseCache from BaseCache base class .
0
example# 208
define the initialization method __init__ with self , table and params as arguments .
0
example# 209
call the BaseCache.__init__ [ BaseCache . __init__ ] method with self class instance and params as the arguments .
0
example# 210
substitute table for self._table [ self . _table ] .
0
example# 211
derive CacheEntry class from the object base class .
0
example# 212
_meta is class Options class instance initialized with table argument .
0
example# 213
substitute CacheEntry for self.cache_model_class [ self . cache_model_class ] .
0
example# 214
derive DatabaseCache from the BaseDatabaseCache base class .
0
example# 215
define the method get with 4 arguments , self class instance , key , default set to None and version set to None .
0
example# 216
call the method self.make_key [ self . make_key ] Whit key and version set to version as arguments , substitute the result for key .
0
example# 217
call the method self.validate_key [ self . validate_key ] with argument key .
0
example# 218
call the method router.db_for_read [ router . db_for_read ] with self.cache_model_class [ self . cache_model_class ] as argument , substitute the result for db .
0
example# 219
call the ops.quote_name [ ops . quote_name ] method with argument self._table [ self . _table ] on the value under the db key of connections dictionary , substitute the result for table .
0
example# 220
call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
0
example# 221
call the method cursor.execute [ cursor . execute ] with string _STR:0_ as argument ,
1
"SELECT cache_key, value, expires FROM %s WHERE cache_key = %%s" ||| _STR:0_
example# 222
substitute the ' % s ' with table and list containing key , respectively . call the cursor.fetchone [ cursor . fetchone ] method , substitute the result for row .
0
example# 223
if row is None ,
0
example# 224
return default .
0
example# 225
call the timezone.now [ timezone . now ] function , substitute the result for now .
0
example# 226
substitute third element of row list for expires .
0
example# 227
if features.needs_datetime_string_cast [ features . needs_datetime_string_cast ] field of the object represented stored under the db key of connections dictionary is true ,
0
example# 228
and expires is not an instance of datetime . convert expires to a string , use it as argument for the call to the function typecast_timestamp , substitute the result for expires .
0
example# 229
if expires is lesser than now ,
0
example# 230
call the method router.db_for_write [ router . db_for_write ] with argument self.cache_model_class [ self . cache_model_class ] , substitute the result for db .
0
example# 231
call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
0
example# 232
call the method cursor.execute [ cursor . execute ] with string _STR:0_ as argument ,
1
"DELETE FROM %s WHERE cache_key = %%s" ||| _STR:0_
example# 233
substitute the ' % s ' with table and list containing key , respectively . return default .
0
example# 234
call the method ops.process_clob [ ops . process_clob ] with second element of row as argument , on the object under the db key of connections dictionary , substitute the result for value .
0
example# 235
call the function force_bytes with argument value , use the result as an argument for the call to the method base64.b64decode [ base64 . b64decode ] ,
0
example# 236
use the result as the argument for the function call to the pickle.loads [ pickle . loads ] , return the result . define the method set with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
0
example# 237
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 238
call the method self.validate_key [ self . validate_key ] with key as argument .
0
example# 239
call the method self._base_set [ self . _base_set ] with string _STR:0_ , key , value and timeout as arguments .
1
'set' ||| _STR:0_
example# 240
define the method add with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
0
example# 241
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 242
call the method self.validate_key [ self . validate_key ] with key as argument .
0
example# 243
call the method self._base_set [ self . _base_set ] with string _STR:0_ , key , value and timeout as arguments , return the result .
1
'add' ||| _STR:0_
example# 244
define the protected method _base_set with 4 arguments , self class instance , key , value and timeout set to DEFAULT_TIMEOUT .
0
example# 245
call the method self.get_backend_timeout [ self . get_backend_timeout ] with argument timeout , substitute the result for timeout .
0
example# 246
call the method router.db_for_write [ router . db_for_write ] with argument self.cache_model_class [ self . cache_model_class ] , substitute the result for db .
0
example# 247
call the ops.quote_name [ ops . quote_name ] method with argument self._table [ self . _table ] on the object under the db key of connections dictionary , substitute the result for table .
0
example# 248
call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
0
example# 249
call the method cursor.execute [ cursor . execute ] with string _STR:0_ as argument , substitute the ' % s ' with table .
1
"SELECT COUNT(*) FROM %s" ||| _STR:0_
example# 250
fetch one record from the database cursor points at , substitute the first element of return value for num .
0
example# 251
call the timezone.now [ timezone . now ] function , substitute the result for now .
0
example# 252
call the function now.replace [ now . replace ] with microseconds set to integer 0 , substitute the result for now .
0
example# 253
if timeout is None ,
0
example# 254
substitute the datetime.max [ datetime . max ] for exp .
0
example# 255
otherwise is settings.USE_TI [ settings . USE_TI ] is true ,
0
example# 256
call the function datetime.utcfromtimestamp [ datetime . utcfromtimestamp ] with argument timeout , substitute it for exp .
0
example# 257
if not ,
0
example# 258
call the function datetime.fromtimestamp [ datetime . fromtimestamp ] with argument timeout , substitute it for exp .
0
example# 259
call the exp.replace [ exp . replace ] with microsecond set to integer 0 , substitute the result for exp .
0
example# 260
if num is greater than self._max_entries [ self . _max_entries ] ,
0
example# 261
call the method self._cull [ self . _cull ] with db , cursor and now as arguments .
0
example# 262
call the method pickle.dumps [ pickle . dumps ] with value and pickle.HIGHEST_PROTOCOL [ pickle . HIGHEST_PROTOCOL ] as arguments , substitute it for pickled .
0
example# 263
call the method base64.b64encode [ base64 . b64encode ] with argument pickled , substitute the result for b64encoded .
0
example# 264
if six.PY3 [ six . PY3 ] is true ,
0
example# 265
call the method b64encoded.decode [ b64encoded . decode ] with string _STR:0_ as argument , substitute the result for b64encoded .
1
'latin1' ||| _STR:0_
example# 266
try ,
0
example# 267
with return value of the function transaction.atomic [ transaction . atomic ] with using set to db as arguments , perform the following ,
0
example# 268
call the method cursor.execute [ cursor . execute ] with string _STR:0_ as argument ,
1
"SELECT cache_key, expires FROM %s WHERE cache_key = %%s" ||| _STR:0_
example# 269
substitute the ' % s ' with table and list containing key , respectively . fetch one entry from the database that cursor points at , substitute it for the result .
0
example# 270
if result is true ,
0
example# 271
substitute the second element of result for current_expires .
0
example# 272
if features.needs_datetime_string_cast [ features . needs_datetime_string_cast ] field of object under the db key of connections dictionary is true and current_expires is not an instance of datetime object .
0
example# 273
convert current_expires to a string , use it as the argument for the call to the function typecast_timestamp , substitute the result for current_expires .
0
example# 274
on the object under the db key of connections dictionary call the method ops.value_to_db_datetime [ ops . value_to_db_datetime ] with argument exp , substitute the result for the exp .
0
example# 275
if mode equals to string _STR:0_ and current_expires is lesser than now , or mode equals to string _STR:1_ , and result is true ,
2
'set' ||| _STR:1_
'add' ||| _STR:0_
example# 276
call the method cursor.execute [ cursor . execute ] with string _STR:0_ as argument ,
1
"UPDATE %s SET value = %%s, expires = %%s WHERE cache_key = %%s" ||| _STR:0_
example# 277
substitute the ' % s ' with table and 3 elements of a list : b64encoded , exp and key , respectively . if not ,
0
example# 278
call the method cursor.execute [ cursor . execute ] with string _STR:0_ ,
1
"INSERT INTO %s (cache_key, value, expires) VALUES (%%s, %%s, %%s)" ||| _STR:0_
example# 279
substitute the ' % s ' with table and 3 elements of a list : b64encoded , exp and key , respectively . if DatabaseError exception is caught ,
0
example# 280
return boolean False .
0
example# 281
if not ,
0
example# 282
return boolean True .
0
example# 283
define the method delete with self class instance , key and version set to None as arguments .
0
example# 284
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 285
call the method self.validate_key [ self . validate_key ] with argument key .
0
example# 286
call the method router.db_for_write [ router . db_for_write ] with argument self.cache_model_class [ self . cache_model_class ] , substitute the result for db .
0
example# 287
call the ops.quote_name [ ops . quote_name ] method with argument self._table [ self . _table ] on the object under the db key of connections dictionary , substitute the result for table .
0
example# 288
call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
0
example# 289
call the method cursor.execute [ cursor . execute ] with string _STR:0_ as argument ,
1
"DELETE FROM %s WHERE cache_key = %%s" ||| _STR:0_
example# 290
substitute the ' % s ' with table and list containing key , respectively . define the method has_key with self class instance , key and version defaulting to None as arguments .
0
example# 291
call the self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 292
call the self.validate_key [ self . validate_key ] method with argument key .
0
example# 293
call the method router.db_for_write [ router . db_for_write ] with argument self.cache_model_class [ self . cache_model_class ] , substitute the result for db .
0
example# 294
call the ops.quote_name [ ops . quote_name ] method with argument self._table [ self . _table ] on the object under the db key of connections dictionary , substitute the result for table .
0
example# 295
if settings.USE_TZ [ settings . USE_TZ ] is true ,
0
example# 296
call the function datetime.utcnow [ datetime . utcnow ] , substitute the result for now .
0
example# 297
if not ,
0
example# 298
call the function datetime.now [ datetime . now ] , substitute the result to now .
0
example# 299
call the method now.replace [ now . replace ] with the argument microsecond set to integer 0 , substitute the result for now .
0
example# 300
call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
0
example# 301
call the method cursor.execute [ cursor . execute ] with string _STR:0_ as argument ,
1
"SELECT cache_key FROM %s WHERE cache_key = %%s and expires > %%s" ||| _STR:0_
example# 302
substitute the ' % s ' with table and list containing return value of the method call ops.value_to_db_datetime [ ops . value_to_db_datetime ] with argument now on the object under the db key of connections dictionary , respectively . if exists return next entry from the database that cursor points at .
0
example# 303
define the protected method _cull with self class instance , db , cursor and now as arguments .
0
example# 304
if self._cull_frequency [ self . _cull_frequency ] equals to integer 0 .
0
example# 305
call the self.clear [ self . clear ] method .
0
example# 306
if not ,
0
example# 307
call the method now.replace [ now . replace ] with argument tzinfo set to None , substitute it for now .
0
example# 308
call the ops.quote_name [ ops . quote_name ] method with argument self._table [ self . _table ] on the object under the db key of connections dictionary , substitute the result for table .
0
example# 309
call the method cursor.execute [ cursor . execute ] with string _STR:0_ as argument ,
1
"DELETE FROM %s WHERE expires < %%s" ||| _STR:0_
example# 310
substitute the ' % s ' with table and list containing return value of the method call ops.value_to_db_datetime [ ops . value_to_db_datetime ] with argument now on the object under the db key of connections dictionary , respectively . call the method cursor.execute [ cursor . execute ] with string _STR:0_ as argument , substitute the ' % s ' with table .
1
"SELECT COUNT(*) FROM %s" ||| _STR:0_
example# 311
fetch next entry for the database that cursor points into , substitute first element of it for num .
0
example# 312
if num is greater than self._max_entries [ self . _max_entries ] ,
0
example# 313
divide num by self._cull_frequency [ self . _cull_frequency ] , floor the result and substitute it for cull_num .
0
example# 314
evaluate the method connections [ db ] .ops.cache_key_culling_sql , evaluate the result by table modulus , call the method cursor.execute [ cursor . execute ] ,
0
example# 315
with previous result and list containing cull_num , respectively as arguments . call the method cursor.execute [ cursor . execute ] with string _STR:0_ as argument ,
1
"DELETE FROM %s WHERE cache_key < %%s" ||| _STR:0_
example# 316
substitute the ' % s ' with table and list containing first element of cursor.fetchone [ cursor . fetchone ] method , respectively . define the method clear with argument self .
0
example# 317
call the method router.db_for_write [ router . db_for_write ] with argument self.cache_model_class [ self . cache_model_class ] , substitute the result for db .
0
example# 318
call the ops.quote_name [ ops . quote_name ] method with argument self._table [ self . _table ] on the object under the db key of connections dictionary , substitute the result for table .
0
example# 319
call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
0
example# 320
call the method cursor.execute [ cursor . execute ] with string _STR:0_ as argument , substitute the ' % s ' with table .
1
"DELETE FROM %s" ||| _STR:0_
example# 321
derive the class CacheClass from the DatabaseCache base class .
0
example# 322
do nothing .
0
example# 323
from django.core.cache.backends.base [ django . core . cache . backends . base ] import BaseCache and DEFAULT_TIMEOUT into default name space .
0
example# 324
derive the class DummyCache from the base class BaseCache .
0
example# 325
define initialization method __init__ with 4 arguments : self , host , list of arguments args and dictionary of arguments kwargs .
0
example# 326
call the BaseCache initialization method __init__ with 3 arguments self , list of arguments args and dictionary of arguments kwargs .
0
example# 327
define the method add with 5 arguments : self , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
0
example# 328
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute it for key .
0
example# 329
call the method self.validate_key [ self . validate_key ] with argument key .
0
example# 330
return boolean True .
0
example# 331
define the method get with 4 arguments : self , key , default set to None and version set to None .
0
example# 332
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute it for key .
0
example# 333
call the method self.validate_key [ self . validate_key ] with argument key .
0
example# 334
return default .
0
example# 335
define the method set with 5 arguments : self , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
0
example# 336
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute it for key .
0
example# 337
call the method self.validate_key [ self . validate_key ] with argument key .
0
example# 338
define the method delete with 3 arguments : self , key , and version set to None .
0
example# 339
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute it for key .
0
example# 340
call the method self.validate_key [ self . validate_key ] with argument key .
0
example# 341
define the method get_many with 3 arguments : self , keys , and version set to None .
0
example# 342
return an empty dictionary .
0
example# 343
define the method has_key with 3 arguments : self , key , and version set to None .
0
example# 344
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute it for key .
0
example# 345
call the method self.validate_key [ self . validate_key ] with argument key .
0
example# 346
return boolean False .
0
example# 347
define the method set_many with 4 arguments : self , data , timeout set to DEFAULT_TIMEOUT and version set to None .
0
example# 348
do nothing
0
example# 349
define the method delete_many with 3 arguments : self , keys , and version set to None .
0
example# 350
do nothing .
0
example# 351
define the method clear with argument self .
0
example# 352
do nothing .
0
example# 353
derive the class CacheClass from the DummyCache base class .
0
example# 354
do nothing .
0
example# 355
import module errno .
0
example# 356
import module glob .
0
example# 357
import module hashlib .
0
example# 358
import module io .
0
example# 359
import module os .
0
example# 360
import module random .
0
example# 361
import module tempfile .
0
example# 362
import module time .
0
example# 363
import module zlib .
0
example# 364
from django.core.cache.backends.base [ django . core . cache . backends . base ] import BaseCache and DEFAULT_TIMEOUT into default name space .
0
example# 365
from django.core.files.move [ django . core . files . move ] import file_move_safe into default name space .
0
example# 366
from django.utils.encoding [ django . utils . encoding ] import force_bytes into default name space .
0
example# 367
try ,
0
example# 368
from django.utils.six.moves [ django . utils . six . moves ] import cPickle as pickle into default name space .
0
example# 369
if ImportError exception is caught ,
0
example# 370
import pickle .
0
example# 371
derive the class FileBasedCache from BaseCache base class .
0
example# 372
cache_suffix is a string _STR:0_ .
1
'.djcache' ||| _STR:0_
example# 373
define the initialization method __init__ with arguments : self class instance , dir and params .
0
example# 374
call method __init__ with argument params from the base class of the FileBaseCache .
0
example# 375
get absolute directory path of dir , substitute it for self._dir [ self . _dir ] .
0
example# 376
call the self._createdir [ self . _createdir ] method .
0
example# 377
define the method add with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
0
example# 378
evaluate method self.has_key [ self . has_key ] with key and version as arguments , if the result is true ,
0
example# 379
return boolean False .
0
example# 380
call the method self.set [ self . set ] with key , value , timeout and version as arguments .
0
example# 381
return boolean True .
0
example# 382
define the method get with 5 arguments , self class instance , key , default set to None and version set to None .
0
example# 383
call the function self._key_to_file [ self . _key_to_file ] with key and version as arguments , substitute it for fname .
0
example# 384
if fname file path exists ,
0
example# 385
try ,
0
example# 386
with return value of the function io.open [ io . open ] with fname and string _STR:0_ as arguments , named as f ,
1
'rb' ||| _STR:0_
example# 387
evaluate self._is_expired [ self . _is_expired ] method with f as argument , if the result is false ,
0
example# 388
call f.read [ f . read ] function , use the result as the argument for zlib.decompress [ zlib . decompress ] function call , call the pickle.loads [ pickle . loads ] function with the previous result as argument , return the result .
0
example# 389
if IOError , renamed to e , exception is caught ,
0
example# 390
if e.errno [ e . errno ] equals to errno.ENOENT [ errno . ENOENT ] ,
0
example# 391
do nothing .
0
example# 392
return default .
0
example# 393
define the method set with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
0
example# 394
call the self._createdir [ self . _createdir ] method .
0
example# 395
call the function self._key_to_file [ self . _key_to_file ] with key and version as arguments , substitute it for fname .
0
example# 396
call the method self._cull [ self . _cull ] .
0
example# 397
call the method tempfile.mkstemp [ tempfile . mkstemp ] with dir set to self._dir [ self . _dir ] , substitute result for fd and tmp_path , respectively .
0
example# 398
renamed is boolean False .
0
example# 399
try ,
0
example# 400
with return value of the function io.open [ io . open ] with fname and string _STR:0_ as arguments , named as f ,
1
'rb' ||| _STR:0_
example# 401
call the method self.get_backend_timeout [ self . get_backend_timeout ] with argument timeout , substitute it for expiry .
0
example# 402
call the function pickle.dumps [ pickle . dumps ] with expiry and integer -1 as arguments , use the result as the argument for the call to f.write [ f . write ] function .
0
example# 403
call the function pickle.dumps [ pickle . dumps ] with argument value , use the result and integer -1 as arguments for the call to the function zlib.compress [ zlib . compress ] , use the result as an argument for the call to the f.write [ f . write ] method .
0
example# 404
call the function file_move_safe with tmp_path , fname , allow_overwrite set to boolean True as arguments .
0
example# 405
renamed is boolean True .
0
example# 406
finally perform ,
0
example# 407
if renamed is boolean False ,
0
example# 408
remove file tmp_path .
0
example# 409
define the method delete with self class instance , key and version defaulting to None as arguments .
0
example# 410
call the function self._key_to_file [ self . _key_to_file ] with key and version as arguments , use the result as an argument for the call to the self._delete [ self . _delete ] method .
0
example# 411
define the method _delete with self and fname as arguments .
0
example# 412
if fname doesnt start with self._dir [ self . _dir ] and fname file path doesnt exists ,
0
example# 413
return nothing .
0
example# 414
try ,
0
example# 415
call the function os.remove [ os . remove ] with argument fname .
0
example# 416
if exception OSError , renamed to e , is caught ,
0
example# 417
if e.errno [ e . errno ] does not equals to errno.ENOENT [ errno . ENOENT ] ,
0
example# 418
raise an exception .
0
example# 419
define the method has_key with self class instance , key and version defaulting to None as arguments .
0
example# 420
call the function self._key_to_file [ self . _key_to_file ] with key and version as arguments , substitute it for fname .
0
example# 421
if fname file path exists ,
0
example# 422
with call to the io.open [ io . open ] function with fname and string _STR:0_ as arguments , renamed to f ,
1
'rb' ||| _STR:0_
example# 423
call the method self._is_expired [ self . _is_expired ] with argument f , invert the boolean result and return it .
0
example# 424
return boolean False .
0
example# 425
define the method _cull with argument self .
0
example# 426
call the self._list_cache_files [ self . _list_cache_files ] method , substitute the result for filelist .
0
example# 427
num_entries is length of filelist .
0
example# 428
if num_entries is lesser than self._max_entries [ self . _max_entries ] ,
0
example# 429
return nothing .
0
example# 430
if self._cull_frequency [ self . _cull_frequency ] equals to integer 0 .
0
example# 431
evaluate self.clear [ self . clear ] method and return the result .
0
example# 432
divide num_entries by self._cull_frequency [ self . _cull_frequency ] , convert the result to an integer , call the random.sample [ random . sample ] function with filelist and previous result as arguments , substitute the result for filelist .
0
example# 433
for every fname in filelist ,
0
example# 434
call self._delete [ self . _delete ] method with argument fname .
0
example# 435
define the method _createdir with argument self .
0
example# 436
if self._dir [ self . _dir ] path doesnt exists ,
0
example# 437
try ,
0
example# 438
call os.makedirs [ os . makedirs ] function with self._dir [ self . _dir ] and hexadecimal 0o700 as arguments .
0
example# 439
if OSError , renamed to e , exception is caught ,
0
example# 440
if e.errno [ e . errno ] is not equal to errno.EEXIST [ errno . EEXIST ] ,
0
example# 441
raise an EnvironmentError exception with string _STR:0_ as argument ,
1
"Cache directory '%s' does not exist and could not be created" ||| _STR:0_
example# 442
substitute ' % s ' with self._dir [ self . _dir ] converted to a string . define the method key_to_file with self class instance , key and version defaulting to None as arguments .
0
example# 443
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 444
call the method self.validate_key [ self . validate_key ] with argument key .
0
example# 445
join into a string : md5 hash sum of force_bytes ( key ) and self.cache_suffix [ self . cache_suffix ] , compose root file path out of self._dir [ self . _dir ] and previous result , return it .
0
example# 446
define the method clear with argument self .
0
example# 447
if self._dir [ self . _dir ] file path does not exists ,
0
example# 448
return nothing .
0
example# 449
if fname is contained in self._list_cache_files [ self . _list_cache_files ] method return value ,
0
example# 450
call the self._delete [ self . _delete ] method with argument fname .
0
example# 451
define the method _is_expired with self and f as arguments .
0
example# 452
call the function pickle.load [ pickle . load ] with argument f , substitute the result for exp .
0
example# 453
if exp is not None and exp is lesser than return value of the function time.time [ time . time ] ,
0
example# 454
call close method on a file stream .
0
example# 455
call the self._delete [ self . _delete ] method with argument f.name [ f . name ] .
0
example# 456
return boolean True .
0
example# 457
return boolean False .
0
example# 458
define the method _list_cache_files with argument self .
0
example# 459
if self._dir [ self . _dir ] file path does not exists ,
0
example# 460
return an empty list .
0
example# 461
for every fname in return value of the glob.glob1 [ glob . glob1 ] function called with 2 arguments : self._dir [ self . _dir ] and ,
0
example# 462
self.cache_suffix [ self . cache_suffix ] converted to a string , appended to the character _STR:0_ , call os.path.join [ os . path . join ] with self._dir [ self . _dir ] and fname as arguments , filelist is a list containing all the previous results . return filelist .
1
'*' ||| _STR:0_
example# 463
derive the class CacheClass from the base class FileBasedCache .
0
example# 464
do nothing .
0
example# 465
import module time .
0
example# 466
try ,
0
example# 467
from django.utils.six.moves [ django . utils . six . moves ] import cPickle as pickle into default name space .
0
example# 468
if ImportError exception is caught ,
0
example# 469
import pickle .
0
example# 470
from django.core.cache.backends.base [ django . core . cache . backends . base ] import BaseCache and DEFAULT_TIMEOUT into default name space .
0
example# 471
from django.utils.synch [ django . utils . synch ] import RWLock into default name space .
0
example# 472
__caches is an empty dictionary .
0
example# 473
__expire_info is an empty dictionary .
0
example# 474
__locks is an empty dictionary .
0
example# 475
derive the class LocMemCache from the base class BaseCache .
0
example# 476
define the initialization method __init__ with 3 arguments : self , name and params .
0
example# 477
call the __init__ method with self and params arguments from the base class BaseCache .
0
example# 478
call the _caches.setdefault [ _caches . setdefault ] method with name and empty dictionary as arguments , substitute the result for self_cache .
0
example# 479
call the _expire_info.setdefault [ _expire_info . setdefault ] method with name and empty dictionary as arguments , substitute the result for self_expire_info .
0
example# 480
call the _lock.setdefault [ _lock . setdefault ] method with name and RWLock ( ) as arguments , substitute the result for self_lock .
0
example# 481
define the method add with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
0
example# 482
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 483
call the method self.validate_key [ self . validate_key ] with argument key .
0
example# 484
call the pickle.dumps [ pickle . dumps ] function with value and pickle.HIGHEST_PROTOCOL [ pickle . HIGHEST_PROTOCOL ] as arguments .
0
example# 485
call the self._lock.writer [ self . _lock . writer ] method , with the result perform the following ,
0
example# 486
evaluate self._has_expired [ self . _has_expired ] with argument key , if the result is True ,
0
example# 487
call the method self._set [ self . _set ] with key , pickled and timeout as arguments .
0
example# 488
return boolean True .
0
example# 489
return boolean False .
0
example# 490
define the method get with 4 arguments , self class instance , key , default set to None and version set to None .
0
example# 491
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 492
call the method self.validate_key [ self . validate_key ] with argument key .
0
example# 493
substitute None for pickled .
0
example# 494
call the self._lock.reader [ self . _lock . reader ] method , with the result perform the following ,
0
example# 495
evaluate the method self._has_expired [ self . _has_expired ] with argument key , if it as False ,
0
example# 496
substitute value under the key key of self._cache [ self . _cache ] dictionary for pickled .
0
example# 497
if pickled is not None .
0
example# 498
try ,
0
example# 499
evaluate pickle.loads [ pickle . loads ] with argument pickled , return the result .
0
example# 500
if pickle.PickleError [ pickle . PickleError ] exception is caught ,
0
example# 501
return default .
0
example# 502
call the self._lock.writer [ self . _lock . writer ] method , with the result perform the following ,
0
example# 503
try ,
0
example# 504
delete the value under key key of self._cache [ self . _cache ] dictionary .
0
example# 505
delete the value under key key of self._expire_info [ self . _expire_info ] .
0
example# 506
if KeyError exception is caught ,
0
example# 507
do nothing .
0
example# 508
return default .
0
example# 509
define the method _set with 4 arguments , self class instance , key , value and timeout set to DEFAULT_TIMEOUT .
0
example# 510
if length of self._cache [ self . _cache ] is greater or equal to self._max_entries [ self . _max_entries ] ,
0
example# 511
call the self._cull [ self . _cull ] method .
0
example# 512
substitute value for the value under the key key of self._cache [ self . _cache ] dictionary .
0
example# 513
call the self.get_backend_timeout [ self . get_backend_timeout ] with argument timeout , substitute it for the value under the key key of self._expire_info [ self . _expire_info ] dictionary .
0
example# 514
define the method get with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
0
example# 515
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 516
call the method self.validate_key [ self . validate_key ] with argument key .
0
example# 517
call the function pickle.dumps [ pickle . dumps ] with value and pickle.HIGHEST_PROTOCOL [ pickle . HIGHEST_PROTOCOL ] as the arguments , substitute the result for pickled .
0
example# 518
call the self._lock.writer [ self . _lock . writer ] method , with the result perform the following ,
0
example# 519
call the method self._set [ self . _set ] with key , pickled and timeout as arguments .
0
example# 520
define the method incr with self class instance , key , delta set to integer 1 and version set to None , as arguments .
0
example# 521
call the self.get [ self . get ] method with key and version set to version as arguments , substitute the result for value .
0
example# 522
if value is None ,
0
example# 523
raise an ValueError exception with string _STR:0_ as argument , substitute ' % s ' with key converted into a string .
1
"Key '%s' not found" ||| _STR:0_
example# 524
new_value is a sum of value and delta .
0
example# 525
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 526
call the function pickle.dumps [ pickle . dumps ] with value and pickle.HIGHEST_PROTOCOL [ pickle . HIGHEST_PROTOCOL ] as the arguments , substitute the result for pickled .
0
example# 527
call the self._lock.writer [ self . _lock . writer ] method , with the result perform the following ,
0
example# 528
substitute pickled for value under the key key of self._cache [ self . _cache ] dictionary .
0
example# 529
return new_value .
0
example# 530
define the method has_key with self class instance , key and version defaulting to None as arguments .
0
example# 531
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 532
call the method self.validate_key [ self . validate_key ] with argument key .
0
example# 533
call the self._lock.reader [ self . _lock . reader ] method , with the result perform the following ,
0
example# 534
if call to the _has_expired method with argument key evaluates to boolean False ,
0
example# 535
return boolean True .
0
example# 536
call the self._lock.writer [ self . _lock . writer ] method , with the result perform the following ,
0
example# 537
try ,
0
example# 538
delete the value under the key key of self._cache [ self . _cache ] dictionary .
0
example# 539
delete the value under the key key of self._expire_info [ self . _expire_info ] dictionary .
0
example# 540
if KeyError exception is caught ,
0
example# 541
do nothing .
0
example# 542
return boolean False .
0
example# 543
define the method _has_expired with self and key as arguments .
0
example# 544
call the method self._expire_info.get [ self . _expire_info . get ] with key and integer -1 as arguments , substitute the result for exp .
0
example# 545
if exp is None or exp is greater than the return value of the call to the function time.time [ time . time ] ,
0
example# 546
return boolean False .
0
example# 547
return boolean True .
0
example# 548
define the method _cull with argument self .
0
example# 549
if self._cull_frequency [ self . _cull_frequency ] equals to integer 0 .
0
example# 550
call self.clear [ self . clear ] method .
0
example# 551
if not ,
0
example# 552
for every i and k in enumerated values of self._cache [ self . _cache ] , if i is divisible by self._cull_frequency [ self . _cull_frequency ] , append k to doomed list .
0
example# 553
for every k in doomed ,
0
example# 554
call the method self._delete [ self . _delete ] with argument k .
0
example# 555
define the method _delete with arguments self and key .
0
example# 556
try ,
0
example# 557
delete the value under the key key of self._cache [ self . _cache ] dictionary .
0
example# 558
if KeyError exception is caught ,
0
example# 559
do nothing .
0
example# 560
try ,
0
example# 561
delete the value under the key key of the self._expire_info [ self . _expire_info ] dictionary .
0
example# 562
if KeyError exception is caught ,
0
example# 563
do nothing .
0
example# 564
define the method delete with self class instance , key and version defaulting to None as arguments .
0
example# 565
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 566
call the method self.validate_key [ self . validate_key ] with argument key .
0
example# 567
call the self._lock.writer [ self . _lock . writer ] method , with the result perform the following ,
0
example# 568
call the method self._delete [ self . _delete ] with argument key .
0
example# 569
define the method clear with argument self .
0
example# 570
call the method self._cache.clear [ self . _cache . clear ] .
0
example# 571
call the method self._expire_info.clear [ self . _expire_info . clear ] .
0
example# 572
derive the class CacheClass from the base class LocMemCache .
0
example# 573
do nothing .
0
example# 574
import module time .
0
example# 575
import module pickle .
0
example# 576
from django.core.cache.backends.base [ django . core . cache . backends . base ] import BaseCache and DEFAULT_TIMEOUT into default name space .
0
example# 577
from django.utils [ django . utils ] import six into default name space .
0
example# 578
from django.utils.deprecation [ django . utils . deprecation ] import RenameMethodsBase and RemovedInDjango19Warning into default name space .
0
example# 579
from django.utils.encoding [ django . utils . encoding ] import force_str into default name space .
0
example# 580
from django.utils.functional [ django . utils . functional ] import cached_property into default name space .
0
example# 581
derive the class BaseMemcachedCacheMethods from RenameMethodsBase the base class .
0
example# 582
renamed methods is a tuple containing 3 elements : _STR:0_ , _STR:1_ and RemovedInDjango19Warning .
2
'get_backend_timeout' ||| _STR:1_
'_get_memcache_timeout' ||| _STR:0_
example# 583
derive the class BaseMemcachedCache from base class BaseMemcachedCacheMethods and BaseCache .
0
example# 584
define the method __init__ with , self , server , params , library , value_not_found_exception as arguments .
0
example# 585
call the initialization method with argument params for the base class of the BaseMemcachedCache class .
0
example# 586
if server is an instance of six.string_types [ six . string_types ] ,
0
example# 587
split server with _STR:0_ as delimiter , substitute the result for self._servers [ self . _servers ] .
1
';' ||| _STR:0_
example# 588
if not ,
0
example# 589
substitute server for self._servers [ self . _servers ] .
0
example# 590
substitute value_not_found_exception for self.LibraryValueNotFoundException [ self . LibraryValueNotFoundException ] .
0
example# 591
substitute library for self._lib [ self . _lib ] .
0
example# 592
call the params.get [ params . get ] function with string _STR:0_ and None as arguments , substitute the result for self._options [ self . _options ] .
1
'OPTIONS' ||| _STR:0_
example# 593
property decorator ,
0
example# 594
define the method _cache with argument self .
0
example# 595
if self object has an attribute _STR:0_ ,
1
'_client' ||| _STR:0_
example# 596
call the self._lib.Client [ self . _lib . Client ] with argument self._servers [ self . _servers ] , substitute the result for self._client [ self . _client ] .
0
example# 597
return self._client [ self . _client ] .
0
example# 598
define the method get_backend_timeout with self and timeout set to DEFAULT_TIMEOUT as arguments .
0
example# 599
if timeout equals to DEFAULT_TIMEOUT ,
0
example# 600
substitute self.default_timeout [ self . default_timeout ] for timeout .
0
example# 601
if timeout is None ,
0
example# 602
return integer 0 .
0
example# 603
else if timeout converted into an integer equals to integer 0 ,
0
example# 604
timeout is a integer -1 .
0
example# 605
if timeout is greater than integer 2592000 ,
0
example# 606
convert return value of the function time.time [ time . time ] to an integer , increment timeout by it .
0
example# 607
convert timeout into an integer , return it .
0
example# 608
define the method make_key with self class instance , key and version defaulting to None as arguments .
0
example# 609
call the method make_key with arguments key and version from the base class of the class BaseMemcachedCache , use it as an argument for the call to the function force_str , return the result .
0
example# 610
define the method add with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
0
example# 611
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 612
call the method self._cache.add [ self . _cache . add ] with key , value , self.get_backend_timeout [ self . get_backend_timeout ] ( timeout ) as arguments .
0
example# 613
define the method get with 5 arguments , self class instance , key , default set to None and version set to None .
0
example# 614
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 615
call the self._cache.get [ self . _cache . get ] method with argument key , substitute the result for val .
0
example# 616
if val is None ,
0
example# 617
return default .
0
example# 618
return val .
0
example# 619
define the method set with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
0
example# 620
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 621
call the method self._cache.set [ self . _cache . set ] with key , value , self.get_backend_timeout [ self . get_backend_timeout ] ( timeout ) as arguments .
0
example# 622
define the method delete with self , key and version set to None as arguments .
0
example# 623
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 624
call the method self._cache.delete [ self . _cache . delete ] with argument key .
0
example# 625
define the method get_many with self class instance , keys and version defaulting to None as arguments .
0
example# 626
define the method get_many with 3 arguments , self class instance , keys and version set to None .
0
example# 627
call the method self._cache.get_multi [ self . _cache . get_multi ] with argument new_keys , substitute the result for ret .
0
example# 628
if ret is true .
0
example# 629
_ is an empty dictionary .
0
example# 630
zip together new_keys and keys , convert it to dictionary , assign it to m .
0
example# 631
for every k and v in return value of the ret.items [ ret . items ] function ,
0
example# 632
substitute v for value under the k-th element of m key of _ dictionary .
0
example# 633
substitute _ for ret .
0
example# 634
return ret .
0
example# 635
define the method close with self and dictionary pairs of elements kwargs .
0
example# 636
call the method self._cache.disconnect_all [ self . _cache . disconnect_all ] .
0
example# 637
define the method incr with self , key , delta defaulting to integer 1 and version defaulting to None as arguments .
0
example# 638
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 639
if delta is smaller than integer 0 ,
0
example# 640
evaluate the method self._cache.decr [ self . _cache . decr ] with key and negative delta as arguments , return the result .
0
example# 641
try ,
0
example# 642
call the method self._cache.incr [ self . _cache . incr ] with key and delta as arguments , substitute the result for val .
0
example# 643
if self.LibraryValueNotFoundException [ self . LibraryValueNotFoundException ] exception is caught ,
0
example# 644
val is None .
0
example# 645
if val is None ,
0
example# 646
raise an ValueError exception with string _STR:0_ as argument , substitute ' % s ' for key .
1
"Key '%s' not found" ||| _STR:0_
example# 647
return val .
0
example# 648
define the method decr with self , key , delta defaulting to integer 1 and version defaulting to None as arguments .
0
example# 649
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 650
if delta is smaller than integer 0 .
0
example# 651
evaluate the method self._cache.incr [ self . _cache . incr ] with key and negative delta as arguments , return the result .
0
example# 652
try ,
0
example# 653
call the method self._cache.decr [ self . _cache . decr ] with key and delta as arguments , substitute the result for val .
0
example# 654
if self.LibraryValueNotFoundException [ self . LibraryValueNotFoundException ] exception is caught ,
0
example# 655
val is None .
0
example# 656
if val is None ,
0
example# 657
raise an ValueError exception with string _STR:0_ as argument , substitute ' % s ' for key .
1
"Key '%s' not found" ||| _STR:0_
example# 658
return val .
0
example# 659
define the method set_many with self , data , timeout set to DEFAULT_TIMEOUT and version set to None as arguments .
0
example# 660
safe_data is an empty dictionary .
0
example# 661
for every key and value in data.items [ data . items ] function return value ,
0
example# 662
call the method self.make_key [ self . make_key ] with key and version set to version as arguments , substitute the result for key .
0
example# 663
substitute value for value under the key key of safe_data dictionary .
0
example# 664
call the method self._cache.set_multi [ self . _cache . set_multi ] with safe_data , self.get_backend_timeout [ self . get_backend_timeout ] ( timeout ) as arguments .
0
example# 665
define the function delete_many with self , keys and version set to None as arguments .
0
example# 666
l is lambda function with argument x , that calls the method self.make_key [ self . make_key ] with x and version set to version as arguments .
0
example# 667
call the method self_cache.delete_multi [ self_cache . delete_multi ] with argument list containing keys mapped through function l .
0
example# 668
define the method clear with argument self .
0
example# 669
call the method self._cache_flush_all [ self . _cache_flush_all ] .
0
example# 670
derive the class MemcachedCache from the BaseMemcachedCache base class .
0
example# 671
define the method __init__ with argument self , server and params .
0
example# 672
import memcache .
0
example# 673
call method __init__ from the base class of the class MemcachedCache with arguments : server , params ,
0
example# 674
library set to memcache and value_not_found_exception set to ValueError . property decorator ,
0
example# 675
define the method _cache with self class instance as an argument .
0
example# 676
if attribute _STR:0_ of the self object is None ,
1
'_client' ||| _STR:0_
example# 677
call the method self._lib.Client [ self . _lib . Client ] with self._servers [ self . _servers ] and pickleProtocol set to pickle.HIGHEST_PROTOCOL [ pickle . HIGHEST_PROTOCOL ] as arguments , substitute the result for self._client [ self . _client ] .
0
example# 678
return self._client [ self . _client ] .
0
example# 679
derive the class PyLibMCCache from BaseMemcachedCache base class .
0
example# 680
define the method __init__ with self , server and params as arguments .
0
example# 681
import pylibmc .
0
example# 682
call method __init__ from the base class of the class PyLibMCCache with arguments : server , params ,
0
example# 683
library set to pylibmc and value_not_found_exception set to pylibmc.NotFound [ pylibmc . NotFound ] . decorator cached_property ,
0
example# 684
define the method _cache with argument self .
0
example# 685
call the method self._lib.Client [ self . _lib . Client ] with argument self._servers [ self . _servers ] .
0
example# 686
if self._options [ self . _options ] exists ,
0
example# 687
substitute self._options [ self . _options ] for client.behaviors [ client . behaviors ] .
0
example# 688
return client .
0
example# 689
from __future__ import unicode_literals into default name space .
0
example# 690
import module hashlib .
0
example# 691
from django.utils.encoding [ django . utils . encoding ] import force_bytes into default name space .
0
example# 692
from django.utils.http [ django . utils . http ] import urlquote into default name space .
0
example# 693
TEMPLATE_FRAGMENT_KEY_TEMPLATE is a string _STR:0_ .
1
'template.cache.%s.%s' ||| _STR:0_
example# 694
define the function make_template_fragment_key with fragment_name and vary_on defaulting to None as arguments .
0
example# 695
if vary_on is None ,
0
example# 696
vary_on is an empty tuple .
0
example# 697
call the function urlquote with argument var for every var in vary_on , join the results into a string separated by _STR:0_ , substitute it for key .
1
':' ||| _STR:0_
example# 698
call the hashlib.md5 [ hashlib . md5 ] fuction with force_bytes ( key ) as argument .
0
example# 699
substitute ' % s ' in TEMPLATE_FRAGMENT_KEY_TEMPLATE string with fragment_name and args.hexdigest [ args . hexdigest ] ( ) , respectively , return the result .
0
example# 700
from __future__ import unicode_literals into default name space .
0
example# 701
from .messages import CheckMessage , Debug , Info , Warning , Error , Critical , DEBUG , INFO , WARNING , ERROR and CRITICAL into default name space .
0
example# 702
from .registry import register , run_checks , tag_exists and Tags into default name space .
0
example# 703
import module django.core.checks.compatibility.django_1_6_0 [ django . core . checks . compatibility . django_1_6_0 ] .
0
example# 704
import module django.core.checks.compatibility.django_1_7_0 [ django . core . checks . compatibility . django_1_7_0 ] .
0
example# 705
import module django.core.checks.model_checks [ django . core . checks . model_checks ] .
0
example# 706
__all__ is a list containing next strings , _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ , _STR:5_ ,
6
'Error' ||| _STR:4_
'Info' ||| _STR:2_
'Critical' ||| _STR:5_
'Debug' ||| _STR:1_
'CheckMessage' ||| _STR:0_
'Warning' ||| _STR:3_
example# 707
from __future__ import unicode_literals into default name space .
0
example# 708
from django.apps [ django . apps ] import apps into default name space .
0
example# 709
from .. import Warning , register and Tags into default name space .
0
example# 710
decorator register with argument Tags.compatibility [ Tags . compatibility ] .
0
example# 711
define the function check_1_6_compatibility with argument kwargs dictionary .
0
example# 712
errors is an empty list
0
example# 713
call the function _check_test_runner with dictionary kwargs as argument , use the result as an argument for the call to the function errors.extend [ errors . extend ] .
0
example# 714
call the function _check_boolean_field_default_value with dictionary kwargs as argument , use the result as an argument for the call to the function errors.extend [ errors . extend ] .
0
example# 715
return errors .
0
example# 716
define the function _check_test_runner with app_config set to None and kwargs dictionary as arguments .
0
example# 717
from django.conf [ django . conf ] import settings into default name space .
0
example# 718
weight is an integer 0 .
0
example# 719
if call to the settings.is_overridden [ settings . is_overridden ] with string _STR:0_ evaluates to boolean False .
1
'TEST_RUNNER' ||| _STR:0_
example# 720
try ,
0
example# 721
settings.SITE_ID [ settings . SITE_ID ] .
0
example# 722
increment weight by integer 2 .
0
example# 723
if AttributeError exception is caught ,
0
example# 724
do nothing .
0
example# 725
try ,
0
example# 726
settings.BASE_DIR [ settings . BASE_DIR ] .
0
example# 727
if AttributeError exception is caught ,
0
example# 728
increment weight by integer 2 .
0
example# 729
call the function settings.is_overridden [ settings . is_overridden ] with argument string _STR:0_ , if it evaluates to boolean True ,
1
'TEMPLATE_LOADERS' ||| _STR:0_
example# 730
increment weight by integer 2 .
0
example# 731
call the function settings.is_overridden [ settings . is_overridden ] with argument string _STR:0_ , if it evaluates to boolean True ,
1
'MANAGERS' ||| _STR:0_
example# 732
increment weight by integer 2 .
0
example# 733
call the function settings.is_overridden [ settings . is_overridden ] with argument string _STR:0_ , if it evaluates to boolean True ,
1
'ADMINS' ||| _STR:0_
example# 734
increment weight by integer 2 .
0
example# 735
if string _STR:0_ is not contained in settings.MIDDLEWARE_CLASSES [ settings . MIDDLEWARE_CLASSES ] set ,
1
'django.middleware.clickjacking.XFrameOptionsMiddleware' ||| _STR:0_
example# 736
increment weight by integer 2 .
0
example# 737
if weight is greater or equal to integer 6 ,
0
example# 738
call the Warning function with 3 arguments : hint tuple containing one string , Django 1.6 [ 1 . 6 ] introduced a new default test runner .
0
example# 739
It looks like this project was generated using Django 1.5 [ 1 . 5 ] or earlier . You should ensure your tests are all running & behaving as expected . See https : //docs.djangoproject.com/en/dev/releases/1.6/ [ //docs . djangoproject . com/en/dev/releases/1 . 6/ ] # new-test-runner for more information . `` , obj set to None and id set to a string _STR:0_ , put the result into a list and return it . if not ,
1
'1_6.W001' ||| _STR:0_
example# 740
return an empty list .
0
example# 741
define the function _check_boolean_field_default_value with app_config set to None and kwargs dictionary as arguments .
0
example# 742
from django.db [ django . db ] import models into default name space .
0
example# 743
append field to problem_fields list for every model in apps.get_models [ apps . get_models ] with argument kwargs dictionary , only if app_configs is None ,
0
example# 744
or model._meta.app_config [ model . _meta . app_config ] is contained in app_configs , for every field in model._meta.local_fields [ model . _meta . local_fields ] , # ANNOTATION only if field is an instance of models.BooleanField [ models . BooleanField ] and field.has_default [ field . has_default ] ( ) evaluates to False . call the Warning function with 4 arguments : string _STR:0_ ,
1
"BooleanField does not have a default value." ||| _STR:0_
example# 745
from __future__ import unicode_literals into default name space .
0
example# 746
from .. import Warning , register and Tags into default name space .
0
example# 747
decorator register with argument Tags.compatibility [ Tags . compatibility ] .
0
example# 748
define the function check_1_7_compatibility with argument kwargs dictionary .
0
example# 749
errors is an empty list .
0
example# 750
call the function _check_middleware_classes with dictionary kwargs as argument , use the result as an argument for the call to the function errors.extend [ errors . extend ] .
0
example# 751
return errors .
0
example# 752
define the function _check_middleware_classes with app_config set to None and kwargs dictionary as arguments .
0
example# 753
from django.conf [ django . conf ] import settings into default name space .
0
example# 754
call the function settings.is_overridden [ settings . is_overridden ] with argument string _STR:0_ , if the result is boolean False ,
1
'MIDDLEWARE_CLASSES' ||| _STR:0_
example# 755
call the Warning function with 4 arguments : string _STR:0_ , hint tuple containing one string ,
1
"MIDDLEWARE_CLASSES is not set." ||| _STR:0_
example# 756
_STR:0_ , obj set to None , and id set to a string _STR:1_ , put the result into a list and return it . if not ,
2
'1_7.W001' ||| _STR:1_
"Django 1.7 changed the global defaults for the MIDDLEWARE_CLASSES. django.contrib.sessions.middleware.SessionMiddleware,   django.contrib.auth.middleware.AuthenticationMiddleware, and django.contrib.messages.middleware.MessageMiddleware were removed   from the defaults. If your project needs these middleware then you should configure this setting." ||| _STR:0_
example# 757
return an empty list .
0
example# 758
from __future__ import unicode_literals into default name space .
0
example# 759
from django.utils.encoding [ django . utils . encoding ] import python_2_unicode_compatible and force_st into default name space .
0
example# 760
DEBUG is integer 10 .
0
example# 761
INFO is integer 20 .
0
example# 762
WARNING is integer 30 .
0
example# 763
ERROR is integer 40 .
0
example# 764
CRITICAL is integer 50 .
0
example# 765
decorator python_2_unicode_compatible .
0
example# 766
derive class CheckMessage from object base class .
0
example# 767
define initialization method __init__ with self class instance , level , msg , hint defaulting to None , obj defaulting to None and if defaulting to None as arguments .
0
example# 768
if level is not an integer raise an error with message string _STR:0_ .
1
"The first argument should be level." ||| _STR:0_
example# 769
substitute level for self.level [ self . level ] .
0
example# 770
substitute msg for self.msg [ self . msg ] .
0
example# 771
substitute hint for self.hint [ self . hint ] .
0
example# 772
substitute obj for self.obj [ self . obj ] .
0
example# 773
substitute id for self.id [ self . id ] .
0
example# 774
define private method __eq__ with self class instance and other as arguments .
0
example# 775
if for all attr in list of attributes _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ and _STR:4_ , self and other have the same attribute attr ,
5
'msg' ||| _STR:1_
'hint' ||| _STR:2_
'id' ||| _STR:4_
'level' ||| _STR:0_
'obj' ||| _STR:3_
example# 776
return boolean True , otherwise return boolean False . define private method __ne__ with self class instance and other as arguments .
0
example# 777
if self equals to other return boolean False , otherwise return True .
0
example# 778
define private method __str__ with argument self .
0
example# 779
from django.db [ django . db ] import models into default name space .
0
example# 780
if self.obj [ self . obj ] is None ,
0
example# 781
obj is a string _STR:0_ .
1
"?" ||| _STR:0_
example# 782
otherwise if self.object [ self . object ] is an instance of the models.base.ModelBase [ models . base . ModelBase ] class ,
0
example# 783
substitute self.obj [ self . obj ] for model .
0
example# 784
substitute model._meta.app_label [ model . _meta . app_label ] for app .
0
example# 785
convert app and model._meta.object_name [ model . _meta . object_name ] to strings , join them with separating _STR:0_ character , substitute it for obj .
1
'.' ||| _STR:0_
example# 786
if not ,
0
example# 787
call the function force_str with argument self.obj [ self . obj ] , substitute the result for obj .
0
example# 788
if self.id [ self . id ] exists , convert self.id [ self . id ] to a string , surround it with round brackets , substitute id for it , otherwise id is an empty string .
0
example# 789
if self.hint [ self . hint ] exists , replace ' % s ' in a string _STR:0_ with value of self.hint [ self . hint ] , substitute it for hint , otherwise hint is an empty string .
1
"\n\tHINT: %s" ||| _STR:0_
example# 790
replace all ' % s ' from string _STR:0_ with values of obj , id , self.msg [ self . msg ] and hint , respectively , return the result .
1
"%s: %s%s%s" ||| _STR:0_
example# 791
define private method __repr__ with argument self .
0
example# 792
in the string _STR:0_ , replace ' % s ' with the name of the type of this class instance ,
1
"<%s: level=%r, msg=%r, hint=%r, obj=%r, id=%r>" ||| _STR:0_
example# 793
replace all the _STR:0_ with self.level [ self . level ] , self.msg [ self . msg ] , self.hint [ self . hint ] . self.obj [ self . obj ] and self.id [ self . id ] , respectively , return the result . define the method is_serious with argument self .
1
'%r' ||| _STR:0_
example# 794
return boolean True if self.level [ self . level ] is greater than or equals to ERROR , otherwise return boolean False .
0
example# 795
define the method is_silence with argument self .
0
example# 796
from django.conf [ django . conf ] import settings into default name space .
0
example# 797
if self.id [ self . id ] is contained in settings.SILENCED_SYSTEM_CHECKS [ settings . SILENCED_SYSTEM_CHECKS ] return boolean True , False otherwise .
0
example# 798
derive the class Debug from base class CheckMessage .
0
example# 799
define initialization method __init__ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments .
0
example# 800
call the __init__ method with 3 arguments : DEBUG , unpacked list args and unpacked dictionary kwargs from the base class of Debug .
0
example# 801
derive the class Info from base class CheckMessage .
0
example# 802
define initialization method __init__ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments .
0
example# 803
call the __init__ method with 3 arguments : INFO , unpacked list args and unpacked dictionary kwargs from the base class of Info .
0
example# 804
derive the class Warning from base class CheckMessage .
0
example# 805
define initialization method __init__ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments .
0
example# 806
call the __init__ method with 3 arguments : WARNING , unpacked list args and unpacked dictionary kwargs from the base class of Warning .
0
example# 807
derive the class Error from base class CheckMessage .
0
example# 808
define initialization method __init__ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments .
0
example# 809
call the __init__ method with 3 arguments : ERROR , unpacked list args and unpacked dictionary kwargs from the base class of Error .
0
example# 810
derive the class Critical from base class CheckMessage .
0
example# 811
define initialization method __init__ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments .
0
example# 812
call the __init__ method with 3 arguments : CRITICAL , unpacked list args and unpacked dictionary kwargs from the base class of Critical .
0
example# 813
from __future__ import unicode_literals into default name space .
0
example# 814
from itertools import chain into default name space .
0
example# 815
import module types .
0
example# 816
from django.apps [ django . apps ] import apps into default name space .
0
example# 817
from . import Error , Tags and register into default name space .
0
example# 818
decorator register with Tags.models [ Tags . models ] as an argument .
0
example# 819
define the function check_all_models with app_configs defaulting to None and unpacked dictionary kwargs as arguments .
0
example# 820
call the model.check [ model . check ] method with unpacked dictionary kwargs for every model in return value of function apps.get_models [ apps . get_models ] ,
0
example# 821
only if app_configs is None ot model._meta.app_config [ model . _meta . app_config ] is contained in app_configs , error is a list containing all the previous elements . chain all errors elements into a list , return it .
0
example# 822
decorator register with Tags.models [ Tags . models ] and Tags.signals [ Tags . signals ] as arguments .
0
example# 823
define the function check_model_signals with app_config defaulting to None and unpacked dictionary kwargs as arguments ,
0
example# 824
from django.db [ django . db ] import models into default name space .
0
example# 825
errors is an empty list .
0
example# 826
for name in attributes of models_signals object ,
0
example# 827
get models.signals [ models . signals ] name attribute , store it in obj .
0
example# 828
if obj is instance of models.signals.ModelSignal [ models . signals . ModelSignal ] class ,
0
example# 829
for every reference and receivers in return value of the call of obj.unresolved_references.items [ obj . unresolved_references . items ] method ,
0
example# 830
for every receiver , _ and _ in receivers ,
0
example# 831
if receiver is an instance of types.FunctionType [ types . FunctionType ] type ,
0
example# 832
description is a string _STR:0_ replaced by value of receiver.__name__ [ receiver . __name__ ] .
1
"The '%s' function" ||| _STR:0_
example# 833
if not ,
0
example# 834
description is a string _STR:0_ with ' % s ' replaced by value of receiver.__class__.__name__ [ receiver . __class__ . __name__ ] .
1
"An instance of the '%s' class" ||| _STR:0_
example# 835
call the Error function with 4 arguments , string `` % s was connected to the ' % s ' signal with a lazy reference to the ' % s ' sender ,
0
example# 836
which has not been installed . '' with all the ' % s ' replaced by values of description , name and reference joined into a string delimited by _STR:0_ , respectively , obj set to receiver.__module__ [ receiver . __module__ ] , hint set to None and id set to string _STR:1_ , append the result to errors . return errors .
2
'signals.E001' ||| _STR:1_
'.' ||| _STR:0_
example# 837
from __future__ import unicode_literals into default name space .
0
example# 838
from itertools import chain into default name space .
0
example# 839
from django.utils.itercompat [ django . utils . itercompat ] import is_iterable into default name space .
0
example# 840
derive the class Tags with base class object .
0
example# 841
admin is a string _STR:0_
1
'admin' ||| _STR:0_
example# 842
compatibility is a string _STR:0_ .
1
'compatibility' ||| _STR:0_
example# 843
models is a string _STR:0_
1
'models' ||| _STR:0_
example# 844
signal is a string _STR:0_
1
'signals' ||| _STR:0_
example# 845
derive the class CheckRegistry with object as base class .
0
example# 846
define initialization method __init__ with argument self .
0
example# 847
self.registered_checks [ self . registered_checks ] is an empty list .
0
example# 848
define the method register with self ans unpacked list tags as arguments .
0
example# 849
define the method inner with argument check .
0
example# 850
replace tags for check.tags [ check . tags ] .
0
example# 851
if check is not contained in self.registered_checks [ self . registered_checks ] .
0
example# 852
call the method self.registered_checks.append [ self . registered_checks . append ] with argument check .
0
example# 853
return check .
0
example# 854
return inner .
0
example# 855
define the method run_checks with self class instance , app_configs defaulting to None , tags defaulting to None as argument .
0
example# 856
errors is an empty list .
0
example# 857
if tags is not None .
0
example# 858
append check to checks list , for every check in self.register_checks [ self . register_checks ] , if check has an attribute _STR:0_ and check.tags [ check . tags ] and tags set intersection is a non empty set .
1
'tags' ||| _STR:0_
example# 859
if not .
0
example# 860
substitute self.registered_checks [ self . registered_checks ] for checks .
0
example# 861
for every check in checks ,
0
example# 862
call the check function with argument app_config set to app_config , substitute the result for new_errors .
0
example# 863
if new_errors is not an iterable object raise an error with error message _STR:0_ , with ' % s ' replaced by value of check .
1
"The function %r did not return a list. All functions registered with the checks registry must return a list." ||| _STR:0_
example# 864
call the method errors.extend [ errors . extend ] with argument new_errors .
0
example# 865
return errors .
0
example# 866
define the method tag_exists with self class instance and tag as arguments .
0
example# 867
return boolean True if tag is contained in self.tags_available [ self . tags_available ] method return value , return False otherwise .
0
example# 868
define the method tags_available with argument self .
0
example# 869
append check.tags [ check . tags ] into a list for every check in self.registered_checks [ self . registered_checks ] if check has _STR:0_ attribute , put the elements into a set and return it .
1
'tags' ||| _STR:0_
example# 870
call the function CheckRegistry , substitute the result for registry .
0
example# 871
substitute registry.register [ registry . register ] for register .
0
example# 872
substitute registry.run_checks [ registry . run_checks ] for run_checks .
0
example# 873
substitute registry.tag_exists [ registry . tag_exists ] for tag_exists .
0
example# 874
from __future__ import unicode_literals into default name space .
0
example# 875
from django.conf [ django . conf ] import settings into default name space .
0
example# 876
from django.middleware.csrf [ django . middleware . csrf ] import get_token into default name space .
0
example# 877
from django.utils [ django . utils ] import six into default name space .
0
example# 878
from django.utils.encoding [ django . utils . encoding ] import smart_text into default name space .
0
example# 879
from django.utils.functional [ django . utils . functional ] import lazy into default name space .
0
example# 880
define the function csrf with an argument request .
0
example# 881
define the function _get_val .
0
example# 882
call the function get_token with an argument request , substitute the result for token .
0
example# 883
if token is None ,
0
example# 884
return string _STR:0_ .
1
'NOTPROVIDED' ||| _STR:0_
example# 885
if not ,
0
example# 886
call the smart_text function with an argument token , return the result .
0
example# 887
call the function lazy with arguments _get_val and six.text_type [ six . text_type ] , substitute the result for _get_val .
0
example# 888
return an dictionary containing 1 entry : return value of the function _get_val for _STR:0_ .
1
'csrf_token' ||| _STR:0_
example# 889
define the function debug with an argument request .
0
example# 890
context_extras is an empty dictionary .
0
example# 891
if settings.DEBUG [ settings . DEBUG ] is true and value of the request.META [ request . META ] dictionary under the _STR:0_ key is contained in settings.INTERNAL_IPS [ settings . INTERNAL_IPS ] ,
1
'REMOTE_ADDR' ||| _STR:0_
example# 892
value under the _STR:0_ key of the context_extras dictionary is boolean True .
1
'debug' ||| _STR:0_
example# 893
from django.db [ django . db ] import connection into default name space .
0
example# 894
substitute connection.queries [ connection . queries ] for value under the _STR:0_ key of the context_extras dictionary .
1
'debug' ||| _STR:0_
example# 895
return context_extras .
0
example# 896
define the function i18n with an argument request .
0
example# 897
from django.utils [ django . utils ] import translation into default name space .
0
example# 898
context_extras is an empty dictionary .
0
example# 899
substitute settings.LANGUAGES [ settings . LANGUAGES ] for the value under the _STR:0_ key of the context_extras dictionary .
1
'LANGUAGES' ||| _STR:0_
example# 900
call the translation.get_language [ translation . get_language ] function , substitute the result for the value under the _STR:0_ key of the context_extras dictionary .
1
'LANGUAGE_CODE' ||| _STR:0_
example# 901
call the translation.get_language_bidi [ translation . get_language_bidi ] function , substitute the result for the value under the _STR:0_ key of the context_extras dictionary .
1
'LANGUAGE_BIDI' ||| _STR:0_
example# 902
return context_extras .
0
example# 903
define the function tz with an argument request .
0
example# 904
from django.utils [ django . utils ] import timezone into default name space .
0
example# 905
return an dictionary containing 1 entry : return value of the function timezone.get_current_timezone_name [ timezone . get_current_timezone_name ] for _STR:0_ .
1
'TIME_ZONE' ||| _STR:0_
example# 906
define the function static with an argument request .
0
example# 907
return an dictionary containing 1 entry : settings.STATIC_URL [ settings . STATIC_URL ] for _STR:0_ .
1
'STATIC_URL' ||| _STR:0_
example# 908
define the function media with an argument request .
0
example# 909
return an dictionary containing 1 entry : settings.MEDIA_URL [ settings . MEDIA_URL ] for _STR:0_ .
1
'MEDIA_URL' ||| _STR:0_
example# 910
define the function request with an argument request .
0
example# 911
return an dictionary containing 1 entry : request for _STR:0_ .
1
'request' ||| _STR:0_
example# 912
from functools import reduce into default name space .
0
example# 913
import module operator .
0
example# 914
from django.utils [ django . utils ] import six into default name space .
0
example# 915
from django.utils.encoding [ django . utils . encoding ] import force_text into default name space .
0
example# 916
derive the class DjangoRuntimeWarning from the RuntimeWarning base class .
0
example# 917
do nothing .
0
example# 918
derive the class AppRegistryNotReady from the Exception base class .
0
example# 919
do nothing .
0
example# 920
derive the class ObjectDoesNotExist from the Exception base class .
0
example# 921
silent_variable_failure is an boolean True .
0
example# 922
derive the class MultipleObjectsReturned from the Exception base class .
0
example# 923
do nothing .
0
example# 924
derive the class SuspiciousOperation from the Exception base class .
0
example# 925
derive the class SuspiciousMultipartForm from the SuspiciousOperation base class .
0
example# 926
do nothing .
0
example# 927
derive the class SuspiciousFileOperation from the SuspiciousOperation base class .
0
example# 928
do nothing .
0
example# 929
derive the class DisallowedHost from the SuspiciousOperation base class .
0
example# 930
do nothing .
0
example# 931
derive the class DisallowedRedirect from the SuspiciousOperation base class .
0
example# 932
do nothing .
0
example# 933
derive the class PermissionDenied from the Exception base class .
0
example# 934
do nothing .
0
example# 935
derive the class ViewDoesNotExist from the Exception base class .
0
example# 936
do nothing .
0
example# 937
derive the class MiddlewareNotUsed from the Exception base class .
0
example# 938
do nothing .
0
example# 939
derive the class ImproperlyConfigured from the Exception base class .
0
example# 940
do nothing .
0
example# 941
derive the class FieldError from the Exception base class .
0
example# 942
do nothing .
0
example# 943
NON_FIELD_ERRORS is an string _STR:0_ .
1
'__all__' ||| _STR:0_
example# 944
derive the class ValidationError from the Exception base class .
0
example# 945
define the method __init__ with 4 arguments : self , message , code set to None and params set to None .
0
example# 946
call the __init__ method from the base class of the class ValidationError with arguments message , code and params .
0
example# 947
if message is an instance of ValidationError class ,
0
example# 948
if message has an _STR:0_ attribute ,
1
'error_dict' ||| _STR:0_
example# 949
substitute message.error_dict [ message . error_dict ] for message .
0
example# 950
alternatively , if six.PY3 [ six . PY3 ] is true check if message does not have an attribute _STR:0_ , if six.PY3 [ six . PY3 ] is false , check if message doesnt have an attribute _STR:1_ , perform the following ,
2
'message' ||| _STR:0_
'code' ||| _STR:1_
example# 951
substitute message.error_list [ message . error_list ] for message .
0
example# 952
if not ,
0
example# 953
substitute message.message [ message . message ] , message.code [ message . code ] , message.params [ message . params ] for message , code and params , respectively .
0
example# 954
if message is an instance of dict type ,
0
example# 955
self.error_dict [ self . error_dict ] is an empty dictionary .
0
example# 956
for every field , messages in return value of the message.items [ message . items ] method ,
0
example# 957
if messages is not an instance of the ValidationError class ,
0
example# 958
messages is an instance of the ValidationError class created with an argument messages .
0
example# 959
substitute messages.error_list [ messages . error_list ] for the value under the field key of the self.error_dict [ self . error_dict ] dictionary .
0
example# 960
otherwise if message is an instance of the list type .
0
example# 961
self.error_list [ self . error_list ] is an empty list .
0
example# 962
for every message is message ,
0
example# 963
if message is not an instance of the ValidationError class ,
0
example# 964
message is an instance of the ValidationError class created with an argument message .
0
example# 965
extend the self.error_list [ self . error_list ] list with message.error_list [ message . error_list ] .
0
example# 966
if not ,
0
example# 967
substitute message for self.message [ self . message ] .
0
example# 968
substitute code for self.code [ self . code ] .
0
example# 969
substitute params for self.params [ self . params ] .
0
example# 970
substitute list containing element self for self.error_list [ self . error_list ] .
0
example# 971
property getter decorator ,
0
example# 972
define the method message_dict with an argument self .
0
example# 973
get attribute _STR:0_ from the self object .
1
'error_dict' ||| _STR:0_
example# 974
convert object self to a dictionary , return it .
0
example# 975
property getter decorator ,
0
example# 976
define the messages with an argument self .
0
example# 977
if self has an _STR:0_ attribute ,
1
'error_dict' ||| _STR:0_
example# 978
call the operator.add [ operator . add ] on the values of the self object converted into a dictionary , until it is reduced to a single value , return it .
0
example# 979
convert self to a list and return it .
0
example# 980
define the method update_error_dict with arguments self and error_dict .
0
example# 981
if self has an _STR:0_ attribute ,
1
'error_dict' ||| _STR:0_
example# 982
for every field , error_list in self.error_dict.items [ self . error_dict . items ] method return value ,
0
example# 983
call the method extend with an argument error_list on the return value of the method error_dict.setdefault [ error_dict . setdefault ] called with 2 arguments : field and an empty list .
0
example# 984
if not ,
0
example# 985
call the method extend with an argument error_list on the return value of the method error_dict.setdefault [ error_dict . setdefault ] called with 2 arguments : NON_FIELD_ERRORS and an empty list .
0
example# 986
return error_dict .
0
example# 987
define the method __iter__ with an argument self .
0
example# 988
if self has an _STR:0_ attribute ,
1
'error_dict' ||| _STR:0_
example# 989
for every field , errors in self.error_dict.items [ self . error_dict . items ] method return value ,
0
example# 990
yield field and ValidationError object converted to an list , created with an argument errors .
0
example# 991
if not ,
0
example# 992
for every error in self.error_list [ self . error_list ] ,
0
example# 993
substitute error.message [ error . message ] for message .
0
example# 994
if error.params [ error . params ] is true ,
0
example# 995
divide message by error.params [ error . params ] , substitute the residue of the division for message .
0
example# 996
call the force_text with an argument message , yield the result .
0
example# 997
define the method __str__ with an argument self .
0
example# 998
if self has an attribute _STR:0_ ,
1
'error_dict' ||| _STR:0_
example# 999
return the printable representation of the self object converted to a dictionary .
0
example# 1000
return the printable representation of the self object converted to a list .
0
example# 1001
define the method __repr__ with an argument self .
0
example# 1002
return the string _STR:0_ , replace ' % s ' with self .
1
'ValidationError(%s)' ||| _STR:0_
example# 1003
from django.core.files.base [ django . core . files . base ] import File into default name space .
0
example# 1004
__all__ is an list containing a string _STR:0_ .
1
'File' ||| _STR:0_
example# 1005
from __future__ import unicode_literals into default name space .
0
example# 1006
import module os .
0
example# 1007
from io import BytesIO , StringIO and UnsupportedOperation into default name space .
0
example# 1008
from django.utils.encoding [ django . utils . encoding ] import smart_text into default name space .
0
example# 1009
from django.core.files.utils [ django . core . files . utils ] import FileProxyMixin into default name space .
0
example# 1010
from django.utils [ django . utils ] import six into default name space .
0
example# 1011
from django.utils.encoding [ django . utils . encoding ] import force_bytes and python_2_unicode_compatible into default name space .
0
example# 1012
decorator python_2_unicode_compatible ,
0
example# 1013
derive the class File from the FileProxyMixin base class .
0
example# 1014
bring integer 2 to the power of 10 , multiply it by 64 , substitute the result for DEFAULT_CHUNK_SIZE .
0
example# 1015
define the method __init__ with self class instance , file , and name defaulting to None as arguments .
0
example# 1016
substitute file for self.file [ self . file ] .
0
example# 1017
if name is None ,
0
example# 1018
get _STR:0_ attribute from the file object , if it doesnt exists use None , substitute it for name .
1
'name' ||| _STR:0_
example# 1019
substitute name for self.name [ self . name ] .
0
example# 1020
if file object has an attribute _STR:0_ ,
1
'mode' ||| _STR:0_
example# 1021
substitute file.mode [ file . mode ] for self.mode [ self . mode ] .
0
example# 1022
define the method __str__ with argument self .
0
example# 1023
evaluate the function smart_text with argument self.name [ self . name ] , if exists , or an empty string , if not , return the result .
0
example# 1024
define the method __repr__ with argument self .
0
example# 1025
substitute ' % s ' in string _STR:0_ with self.__class__.__name__ [ self . __class__ . __name__ ] and self , if exists , or string _STR:1_ if it doesnt , return it .
2
'None' ||| _STR:1_
'<%s: %s>' ||| _STR:0_
example# 1026
define the method __bool__ with argument self .
0
example# 1027
convert self.name [ self . name ] into an boolean , return it .
0
example# 1028
define the method __nonzero__ with argument self .
0
example# 1029
call the __bool__ method with argument self , on the return value of the type function with argument self , return the result .
0
example# 1030
define the method __len__ with argument self .
0
example# 1031
return self.size [ self . size ] .
0
example# 1032
define the method _get_size_from_underlying_file with argument self .
0
example# 1033
if self.file [ self . file ] has an attribute _STR:0_ ,
1
'size' ||| _STR:0_
example# 1034
return self.file.size [ self . file . size ] .
0
example# 1035
if self.file [ self . file ] has an attribute _STR:0_ ,
1
'name' ||| _STR:0_
example# 1036
try ,
0
example# 1037
call the os.path.getsize [ os . path . getsize ] function with argument self.file.name [ self . file . name ] , return the result .
0
example# 1038
if OSError or TypeError errors occurred .
0
example# 1039
do nothing .
0
example# 1040
if self.file [ self . file ] has an attribute _STR:0_ and an attribute _STR:1_ ,
2
'seek' ||| _STR:1_
'tell' ||| _STR:0_
example# 1041
get the position of the self.file [ self . file ] file pointer , substitute it for pos .
0
example# 1042
position the file self.file [ self . file ] pointer at the end .
0
example# 1043
get the position of the file self.file [ self . file ] pointer , substitute it for size .
0
example# 1044
position file self.file [ self . file ] pointer at the pos position .
0
example# 1045
return size .
0
example# 1046
raise an AttributeError exception with string _STR:0_ as argument .
1
"Unable to determine the file's size." ||| _STR:0_
example# 1047
define the method _get_size with argument self .
0
example# 1048
if self has an attribute _STR:0_ .
1
'_size' ||| _STR:0_
example# 1049
return self._size [ self . _size ] .
0
example# 1050
call the method self._get_size_from_underlying_file [ self . _get_size_from_underlying_file ] , substitute the result for self._size [ self . _size ] .
0
example# 1051
return self._size [ self . _size ] .
0
example# 1052
define the method _set_size with arguments self and size .
0
example# 1053
substitute size for self._size [ self . _size ] .
0
example# 1054
size is a property object with _get_size as getter method and _set_size as setter method .
0
example# 1055
define the method _get_closed with argument self .
0
example# 1056
if self.file [ self . file ] is false or self.file.closed [ self . file . closed ] is true , return boolean true , otherwise return boolean false .
0
example# 1057
closed is a property object with _get_closed as a getter method .
0
example# 1058
define the method chunks with arguments self and chunk_size defaulting to None .
0
example# 1059
if chunk_size is false ,
0
example# 1060
substitute the self.DEFAULT_CHUNK_SIZE [ self . DEFAULT_CHUNK_SIZE ] for chunk_size .
0
example# 1061
try ,
0
example# 1062
position the file pointer at the beginning of self file .
0
example# 1063
if AttributeError or UnsupportedOperation exception occurred .
0
example# 1064
do nothing .
0
example# 1065
endless loop ,
0
example# 1066
call the self.read [ self . read ] method with argument chunk_size , substitute the result for data .
0
example# 1067
if data is false ,
0
example# 1068
break from the smallest enclosing loop .
0
example# 1069
yield one element of data iterable .
0
example# 1070
define the method __multiple_chunks__ with arguments self and chunk_size defaulting to None .
0
example# 1071
if chunk_size is false ,
0
example# 1072
substitute self.DEFAULT_CHUNK_SIZE [ self . DEFAULT_CHUNK_SIZE ] for chunk_size .
0
example# 1073
if self.size [ self . size ] is greater than chunk_size , return boolean True , otherwise return boolean False .
0
example# 1074
define the method __iter__ with argument self .
0
example# 1075
buffer_ is None .
0
example# 1076
for every chunk in return value of the method self.chunks [ self . chunks ] ,
0
example# 1077
evaluate the function BytesIO with argument chunk , substitute it for chunk_buffer .
0
example# 1078
for every line in chunk_buffer ,
0
example# 1079
if buffer_ is true ,
0
example# 1080
increment line by buffer_ .
0
example# 1081
buffer_ is None .
0
example# 1082
if last element of line is newline or carriage return character ,
0
example# 1083
yield one element of line iterable .
0
example# 1084
if not ,
0
example# 1085
substitute line for buffer_ .
0
example# 1086
if buffer_ is not None ,
0
example# 1087
yield one element from the buffer_ iterable .
0
example# 1088
define the method __enter__ with argument self .
0
example# 1089
return self .
0
example# 1090
define the method __exit__ with self , exc_type , exc_value and tb as arguments .
0
example# 1091
close the file self .
0
example# 1092
define the method open with arguments self and mode defaulting to None .
0
example# 1093
if file self is not closed ,
0
example# 1094
position the file pointer at the beginning of self file .
0
example# 1095
otherwise if self.name [ self . name ] exists and self.name [ self . name ] file path exists ,
0
example# 1096
open the file self.name [ self . name ] in mode or self.mode [ self . mode ] mode , whichever exists , assign the file handler to self.file [ self . file ] .
0
example# 1097
if not ,
0
example# 1098
raise an ValueError exception with string _STR:0_ as an argument .
1
"The file cannot be reopened." ||| _STR:0_
example# 1099
define the method close with argument self .
0
example# 1100
call the method self.file.close [ self . file . close ] .
0
example# 1101
decorator python_2_unicode_compatible ,
0
example# 1102
derive the class ContentFile from File base class .
0
example# 1103
define the method __init__ with arguments self , content and name defaulting to None .
0
example# 1104
if six.PY3 [ six . PY3 ] is boolean True ,
0
example# 1105
substitute StringIO for stream_class if content is an instance of six.text_type [ six . text_type ] , otherwise substitute BytesIO for stream_class .
0
example# 1106
if not ,
0
example# 1107
substitute BytesIO for stream_class .
0
example# 1108
call the function force_bytes with argument content , substitute it for content .
0
example# 1109
call the __init__ method with stream_class ( content ) and name set to name arguments , from the base class of the ContentFile class .
0
example# 1110
substitute length of content for self.size [ self . size ] .
0
example# 1111
define the method __str__ with argument self .
0
example# 1112
return a string _STR:0_ .
1
'Raw content' ||| _STR:0_
example# 1113
define the method __bool__ with argument self .
0
example# 1114
return boolean True .
0
example# 1115
define the method __nonzero__ with argument self .
0
example# 1116
evaluate the method type ( self ) .__bool__ with argument self , return the result .
0
example# 1117
define the method open with arguments self and mode set to None .
0
example# 1118
call the self.seek [ self . seek ] method with argument integer 0 .
0
example# 1119
define the method close with argument self .
0
example# 1120
do nothing .
0
example# 1121
import module zlib .
0
example# 1122
from django.core.files [ django . core . files ] import File into default name space .
0
example# 1123
derive class ImageFile from the base class File .
0
example# 1124
define method _get_width with self class instance as the argument .
0
example# 1125
return the first element of the return value of the call to the self._det_image_dimensions [ self . _det_image_dimensions ] method .
0
example# 1126
get property attribute _get_width , and substitute it for width .
0
example# 1127
define method _get_height with self class instance as the argument .
0
example# 1128
return the second element of the return value of the call to the self._det_image_dimensions [ self . _det_image_dimensions ] method .
0
example# 1129
get property attribute _get_height , and substitute it for width .
0
example# 1130
define the method _get_image_dimensions with self class instance as the argument .
0
example# 1131
if self does not have an attribute named _STR:0_ .
1
'_dimensions_cache' ||| _STR:0_
example# 1132
substitute self.closed [ self . closed ] for close .
0
example# 1133
call the method self.open [ self . open ] ( )
0
example# 1134
evaluate the method get_image_dimensions with self class instance and close set to close as the arguments , substitute the result for self._dimensions_cache [ self . _dimensions_cache ] .
0
example# 1135
return self._dimensions_cache [ self . _dimensions_cache ] .
0
example# 1136
define the function get_image_dimension with file_or_path and close set to boolean False as the arguments .
0
example# 1137
from PIL module import ImageFile as PillowImageFile .
0
example# 1138
p is image parser object , set by calling the PillowImageFile.Parser [ PillowImageFile . Parser ] method .
0
example# 1139
if file_or_path has an attribute _STR:0_ ,
1
'read' ||| _STR:0_
example# 1140
substitute file_or_path for file .
0
example# 1141
get the position in bytes from the start of the file , store it in file_pos .
0
example# 1142
set the file position pointer at the beginning .
0
example# 1143
if not ,
0
example# 1144
open file named file_or_path for reading , store the file object handle in file .
0
example# 1145
close is boolean True .
0
example# 1146
try ,
0
example# 1147
chunk_size is an integer 1024 .
0
example# 1148
endless while loop ,
0
example# 1149
read chunk_size bytes from file and store it in data .
0
example# 1150
if data is empty .
0
example# 1151
break from the endless loop .
0
example# 1152
try ,
0
example# 1153
feed data to the parser p .
0
example# 1154
if zlib.error [ zlib . error ] as e exception is raised ,
0
example# 1155
if e.args [ e . args ] list first element starts with string _STR:0_ ,
1
"Error -5" ||| _STR:0_
example# 1156
do nothig .
0
example# 1157
if not ,
0
example# 1158
raise an exception .
0
example# 1159
if p.image [ p . image ] is not empty ,
0
example# 1160
return size of the image that was fed to the parser p .
0
example# 1161
double the chunk size .
0
example# 1162
return None .
0
example# 1163
execute regardless of the exception being raised ,
0
example# 1164
if close is True ,
0
example# 1165
close file file .
0
example# 1166
if not ,
0
example# 1167
set the file position pointer at file_pos .
0
example# 1168
import module os .
0
example# 1169
__all__ is a tuple containing strings : _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ and _STR:4_ .
5
'LOCK_SH' ||| _STR:1_
'lock' ||| _STR:3_
'LOCK_EX' ||| _STR:0_
'LOCK_NB' ||| _STR:2_
'unlock' ||| _STR:4_
example# 1170
define the _fd function with argument f .
0
example# 1171
return result of the f.fileno [ f . fileno ] method if f has an _STR:0_ attribute , otherwise return f .
1
'fileno' ||| _STR:0_
example# 1172
if os.name [ os . name ] equals to _STR:0_ ,
1
'nt' ||| _STR:0_
example# 1173
import msvcrt .
0
example# 1174
from ctypes import sizeof , c_ulong , c_void_p , c_int64 , Structure , Union , POINTER , windll and byref into default name space .
0
example# 1175
from ctypes.wintypes [ ctypes . wintypes ] import BOOL , DWORD and HANDLE into default name space .
0
example# 1176
LOCK_SH is a integer 0 .
0
example# 1177
LOCK_NB is a hexadecimal 1 .
0
example# 1178
LOCK_EX is a hexadecimal 2 .
0
example# 1179
if size of c_ulong does not equals to size of c_void_p ,
0
example# 1180
substitute c_int64 for ULONG_PTR .
0
example# 1181
if not ,
0
example# 1182
substitute c_ulong for ULONG_PTR .
0
example# 1183
substitute c_void_p for PVOID .
0
example# 1184
derive the class _OFFSET from the Structure base class .
0
example# 1185
_fields_ is a list containing 2 tuples : first tuple contains : string _STR:0_ and DWORD , second contains : string _STR:1_ and DWORD .
2
'OffsetHigh' ||| _STR:1_
'Offset' ||| _STR:0_
example# 1186
derive the class _OFFSET_UNION from the Union base class .
0
example# 1187
_anonymous_ is a list containing one string : _STR:0_ .
1
'_offset' ||| _STR:0_
example# 1188
_fields_ is a list containing 2 tuples : first tuple contains : string _STR:0_ and _OFFSET , second contains : string _STR:1_ and PVOID .
2
'Pointer' ||| _STR:1_
'_offset' ||| _STR:0_
example# 1189
derive the class OVERLAPPED from the Structure base class .
0
example# 1190
_anonymous_ is a list containing one string : _STR:0_ .
1
'_offset_union' ||| _STR:0_
example# 1191
_fields_ is a list containing 4 tuples : first tuple contains : string _STR:0_ and ULONG_PTR ,
1
'Internal' ||| _STR:0_
example# 1192
second contains : string _STR:0__offset_union_STR:1_hEvent ' and HANDLE . call the function POINTER with argument OVERLAPPED , substitute the result for LPOVERLAPPED .
2
' and _OFFSET_UNION, forth ' ||| _STR:1_
'InternalHigh and ULONG_PTR, third: ' ||| _STR:0_
example# 1193
substitute windll.kernel32.LockFileEx [ windll . kernel32 . LockFileEx ] for LockFileEx .
0
example# 1194
substitute BOOL for LockFileEx.restype [ LockFileEx . restype ] .
0
example# 1195
LockFileEx.argtypes [ LockFileEx . argtypes ] is a list containing 6 elements : HANDLE , DWORD , DWORD , DWORD , DWORD and LPOVERLAPPED .
0
example# 1196
substitute windll.kernel32.UnlockFileEx [ windll . kernel32 . UnlockFileEx ] for UnlockFileEx .
0
example# 1197
substitute BOOL for UnlockFileEx.restype [ UnlockFileEx . restype ] .
0
example# 1198
UnlockFileEx.argtypes [ UnlockFileEx . argtypes ] is a list containing 5 elements : HANDLE , DWORD , DWORD , DWORD and LPOVERLAPPED .
0
example# 1199
define the function lock with arguments f and flags .
0
example# 1200
call the function msvcrt.get_osfhandle [ msvcrt . get_osfhandle ] with return value of the _fd ( f ) function as argument , substitute the result for hfile .
0
example# 1201
call the OVERLAPPED function , substitute the result for overlapped .
0
example# 1202
call the LockFileEx function with 6 arguments : hfile , flags , integer 0 , integer 0 , hexadecimal value FFFF0000 , return value of the byref function called with argument overlapped , substitute the result for ret .
0
example# 1203
convert ret to a boolean , return it .
0
example# 1204
define the function unlock with argument f .
0
example# 1205
call the function msvcrt.get_osfhandle [ msvcrt . get_osfhandle ] with return value of the _fd ( f ) function as argument , substitute the result for hfile .
0
example# 1206
call the OVERLAPPED function , substitute the result for overlapped .
0
example# 1207
call the LockFileEx function with 5 arguments : hfile , integer 0 , integer 0 , hexadecimal value FFFF0000 , return value of the byref function called with argument overlapped , substitute the result for ret .
0
example# 1208
convert ret to a boolean , return it .
0
example# 1209
if not ,
0
example# 1210
try ,
0
example# 1211
import fcntl .
0
example# 1212
substitute fcntl.LOCK_SH [ fcntl . LOCK_SH ] for LOCK_SH .
0
example# 1213
substitute fcntl.LOCK_NB [ fcntl . LOCK_NB ] for LOCK_NB .
0
example# 1214
substitute fcntl.LOCK_EX [ fcntl . LOCK_EX ] for LOCK_EX .
0
example# 1215
if ImportError or AttributeError exception occurred ,
0
example# 1216
LOCK_EX , LOCK_SH and LOCK_NB are all equal to integer 0 .
0
example# 1217
define the function lock with arguments f and flags .
0
example# 1218
return boolean False .
0
example# 1219
define the function unlock with argument f .
0
example# 1220
return boolean True .
0
example# 1221
if not ,
0
example# 1222
define the function lock with arguments f and flags .
0
example# 1223
call the function fcntl.flock [ fcntl . flock ] with return value of the _fd ( f ) function and flags as arguments , substitute the result for ret .
0
example# 1224
if ret equals to integer 0 , return boolean True , otherwise return boolean False .
0
example# 1225
define the function unlock with argument f .
0
example# 1226
all the function fcntl.flock [ fcntl . flock ] with return value of the _fd ( f ) function and fcntl.LOCK_UN [ fcntl . LOCK_UN ] as arguments , substitute the result for ret .
0
example# 1227
if ret equals to integer 0 , return boolean True , otherwise return boolean False .
0
example# 1228
import module os .
0
example# 1229
from django.core.files [ django . core . files ] import locks into default name space .
0
example# 1230
try ,
0
example# 1231
from shutil import copystat into default name space .
0
example# 1232
if ImportError exception occurred ,
0
example# 1233
import stat .
0
example# 1234
define the function copystat with arguments src and dst .
0
example# 1235
call the os.stat [ os . stat ] function with argument src , substitute the result for st .
0
example# 1236
call the function stat.S_IMODE [ stat . S_IMODE ] with argument st.st_mode [ st . st_mode ] , substitute the result for mode .
0
example# 1237
if os has an attribute _STR:0_ ,
1
'utime' ||| _STR:0_
example# 1238
call the os.utime [ os . utime ] function with arguments dst and tuple containing 2 elements : st.st_atime [ st . st_atime ] and st.st_mtime [ st . st_mtime ] .
0
example# 1239
if os has an attribute _STR:0_ ,
1
'chmod' ||| _STR:0_
example# 1240
call the function os.chmod [ os . chmod ] with arguments dst and mode .
0
example# 1241
__all__ is a list containing a string _STR:0_ .
1
'file_move_safe' ||| _STR:0_
example# 1242
define the function _samefile with arguments src and dst .
0
example# 1243
if os.path [ os . path ] has an attribute _STR:0_ ,
1
'samefile' ||| _STR:0_
example# 1244
try ,
0
example# 1245
call the os.path.samefile [ os . path . samefile ] with arguments src and dst , return the result .
0
example# 1246
if exception OSError occurred ,
0
example# 1247
return boolean False .
0
example# 1248
if file path of src and dst files are the same , return boolean True , otherwise return boolean False .
0
example# 1249
define the function file_move_safe with 4 arguments : old_file_name , new_file_name , chunk_size set to multiple of integers 1024 and 64 ,
0
example# 1250
if call to the function _samefile with old_file_name and new_file_name evaluates to boolean True ,
0
example# 1251
return nothing .
0
example# 1252
try ,
0
example# 1253
if allow_overwrite is boolean False and call to the os.access [ os . access ] function with arguments new_file_name and os.F_OK [ os . F_OK ] evaluates to boolean True ,
0
example# 1254
raise an IOError exception with string _STR:0_ as argument , where ' % s ' is replaced by new_file_name .
1
"Destination file %s exists and allow_overwrite is False" ||| _STR:0_
example# 1255
call the os.rename [ os . rename ] function with arguments old_file_name and new_file_name .
0
example# 1256
return nothing .
0
example# 1257
if OSError exception is caught ,
0
example# 1258
do nothing .
0
example# 1259
open file old_file_name in read bytes mode , with file descriptor as f ,
0
example# 1260
evaluate the binary expression with 4 operands : os.O_WRONLY [ os . O_WRONLY ] , binary or os.O_CREATE [ os . O_CREATE ] , binary or _STR:0_ attribute of object os ,
1
'O_BINARY' ||| _STR:0_
example# 1261
binary or os.O_EXCL [ os . O_EXCL ] if allow_overwrite is boolean False , use the previous as the mode to open new_file_name file , assign the file descriptor to fd . try ,
0
example# 1262
call the function locks.lock [ locks . lock ] with arguments fd and locks.LOCK_EX [ locks . LOCK_EX ] .
0
example# 1263
current_chunk is None .
0
example# 1264
as long as current_chunk is not an empty string ,
0
example# 1265
read chunk_size bytes from the old_file file , substitute the result for current_chunk .
0
example# 1266
write current_chunk to file fd .
0
example# 1267
finally perform ,
0
example# 1268
call the function locks.unlock [ locks . unlock ] with fd as argument .
0
example# 1269
close the file fd .
0
example# 1270
call the function copystat with old_file_name and new_file_name as arguments .
0
example# 1271
tr ,
0
example# 1272
remove the old_file_name file .
0
example# 1273
if OSError , renamed to e , is caught ,
0
example# 1274
if attribute _STR:0_ of object e is not equal to integer 32 and if _STR:1_ attribute is not equal to integer 13 ,
2
'winerror' ||| _STR:0_
'errno' ||| _STR:1_
example# 1275
raise an exception .
0
example# 1276
import module os .
0
example# 1277
import module errno .
0
example# 1278
import module itertools .
0
example# 1279
from datetime import datetime into default name space .
0
example# 1280
from django.conf [ django . conf ] import settings into default name space .
0
example# 1281
from django.core.exceptions [ django . core . exceptions ] import SuspiciousFileOperation into default name space .
0
example# 1282
from django.core.files [ django . core . files ] import locks and File into default name space .
0
example# 1283
from django.core.files.move [ django . core . files . move ] import file_move_safe into default name space .
0
example# 1284
from django.utils.encoding [ django . utils . encoding ] import force_text and filepath_to_uri into default name space .
0
example# 1285
from django.utils.functional [ django . utils . functional ] import LazyObject into default name space .
0
example# 1286
from django.utils.module_loading [ django . utils . module_loading ] import import_string into default name space .
0
example# 1287
from django.utils.six.moves.urllib.parse [ django . utils . six . moves . urllib . parse ] import urljoin into default name space .
0
example# 1288
from django.utils.text [ django . utils . text ] import get_valid_filename into default name space .
0
example# 1289
from django.utils._os [ django . utils . _os ] import safe_join and abspathu into default name space .
0
example# 1290
from django.utils.deconstruct [ django . utils . deconstruct ] import deconstructible into default name space .
0
example# 1291
__all__ is a tuple containing strings : _STR:0_ , _STR:1_ , _STR:2_ and _STR:3_ .
4
'Storage' ||| _STR:0_
'FileSystemStorage' ||| _STR:1_
'DefaultStorage' ||| _STR:2_
'default_storage' ||| _STR:3_
example# 1292
derive the class Storage from the object base class .
0
example# 1293
define the method open with arguments self , name and mode defaulting to string _STR:0_ .
1
'rb' ||| _STR:0_
example# 1294
call the self._open [ self . _open ] method with name and mode arguments , return the result .
0
example# 1295
define the method save with arguments self , name and content .
0
example# 1296
if name is None ,
0
example# 1297
substitute content.name [ content . name ] for name .
0
example# 1298
if content has an _STR:0_ attribute ,
1
'chunks' ||| _STR:0_
example# 1299
content is a File object instance created with content argument .
0
example# 1300
call the method self.get_available_name [ self . get_available_name ] with argument name , substitute it for name .
0
example# 1301
call the method self._save [ self . _save ] with arguments name and content , substitute it for name .
0
example# 1302
replace all the strings _STR:0_/ ' in the string name , use it as an argument for the call to the force_text function , return the result .
1
'\\' with ' ||| _STR:0_
example# 1303
define the method det_valid_name with arguments self and name .
0
example# 1304
call the get_valid_filename with argument name , return the result .
0
example# 1305
define the method get_available_name with arguments self and name .
0
example# 1306
call the os.path.split [ os . path . split ] with argument name , assign the result to the dir_name and file_name respectively .
0
example# 1307
call the os.path.splitext [ os . path . splitext ] with argument file_name , assign the result to the file_root and file_ext respectively .
0
example# 1308
call the itertools.count [ itertools . count ] function with argument integer 1 , substitute the result for count .
0
example# 1309
as long as self.exists [ self . exists ] function with argument name evaluates to boolean True ,
0
example# 1310
substitute ' % s ' in string _STR:0_ with : file_root , next ( count ) and file_ext , join the dir_name and previous string into a valid file path , substitute it for name .
1
"%s_%s%s" ||| _STR:0_
example# 1311
return name .
0
example# 1312
define the method path with arguments self and name .
0
example# 1313
raise an NotImplementedError exception with argument string _STR:0_ .
1
"This backend doesn't support absolute paths." ||| _STR:0_
example# 1314
define the method delete with arguments self and name .
0
example# 1315
raise an NotImplementedError exception with argument string _STR:0_ .
1
'subclasses of Storage must provide a delete() method' ||| _STR:0_
example# 1316
define the method exists with arguments self and name .
0
example# 1317
raise an NotImplementedError exception with argument string _STR:0_ .
1
'subclasses of Storage must provide an exists() method' ||| _STR:0_
example# 1318
define the method listdir with arguments self and path .
0
example# 1319
raise an NotImplementedError exception with argument string _STR:0_ .
1
'subclasses of Storage must provide a listdir() method' ||| _STR:0_
example# 1320
define the method size with arguments self and name .
0
example# 1321
raise an NotImplementedError exception with argument string _STR:0_ .
1
'subclasses of Storage must provide a size() method' ||| _STR:0_
example# 1322
define the method url with arguments self and name .
0
example# 1323
raise an NotImplementedError exception with argument string _STR:0_ .
1
'subclasses of Storage must provide a url() method' ||| _STR:0_
example# 1324
define the method accessed_time with arguments self and name .
0
example# 1325
raise an NotImplementedError exception with argument string _STR:0_ .
1
'subclasses of Storage must provide an accessed_time() method' ||| _STR:0_
example# 1326
define the method created_time with arguments self and name .
0
example# 1327
raise an NotImplementedError exception with argument string _STR:0_ .
1
'subclasses of Storage must provide a created_time() method' ||| _STR:0_
example# 1328
define the method modified_time with arguments self and name .
0
example# 1329
raise an NotImplementedError exception with argument string _STR:0_ .
1
'subclasses of Storage must provide a modified_time() method' ||| _STR:0_
example# 1330
decorator deconstructible ,
0
example# 1331
derive the class FileSystemStorage from the Storage base class .
0
example# 1332
define the method __init__ with 5 arguments : self , location set to None , base_url set to None , file_permissions_mode set to None ,
0
example# 1333
and directory_permissions_mode set to None . if location is None ,
0
example# 1334
substitute the settings.MEDIA_ROOT [ settings . MEDIA_ROOT ] for location .
0
example# 1335
substitute the location for self.base_location [ self . base_location ] .
0
example# 1336
substitute the return value of the function abspathu with self.base_location [ self . base_location ] as argument for self.location [ self . location ] .
0
example# 1337
if base_url is None ,
0
example# 1338
substitute settings.MEDIA_URL [ settings . MEDIA_URL ] for base_url .
0
example# 1339
otherwise if base_url does not ends with _STR:0_ character ,
1
'/' ||| _STR:0_
example# 1340
append character _STR:0_ to the base_url .
1
'/' ||| _STR:0_
example# 1341
substitute base_url for self.base_url [ self . base_url ] .
0
example# 1342
self.file_permissions_mode [ self . file_permissions_mode ] is a tuple containing : file_permissions_mode if file_permissions_mode is not None ,
0
example# 1343
or settings.FILE_UPLOAD_PERMISSIONS [ settings . FILE_UPLOAD_PERMISSIONS ] if it is . self.directory_permissions_mode [ self . directory_permissions_mode ] is a tuple containing : directory_permissions_mode if directory_permissions_mode is not None ,
0
example# 1344
or settings.FILE_UPLOAD_DIRECTORY_PERMISSIONS [ settings . FILE_UPLOAD_DIRECTORY_PERMISSIONS ] if it is . define the method _open with arguments self , name and mode defaulting to string _STR:0_ .
1
'rb' ||| _STR:0_
example# 1345
call the function self.path [ self . path ] with argument name , use it and mode as arguments for the call to the function open , use it as an argument for creatinon of a File object instance , return it .
0
example# 1346
define the method _save with arguments self , name and content .
0
example# 1347
substitute result of the self.path [ self . path ] function with argument name for full_path .
0
example# 1348
call the function os.path.dirname [ os . path . dirname ] with argument full_path , substitute the result for directory .
0
example# 1349
if call to the function os.path.exists [ os . path . exists ] with argument directory evaluates to boolean False ,
0
example# 1350
try ,
0
example# 1351
if self.directory_permissions_mode [ self . directory_permissions_mode ] is not None ,
0
example# 1352
call the os.umask [ os . umask ] function with argument integer 0 , substitute the result for old_umask .
0
example# 1353
try ,
0
example# 1354
call the os.makedirs [ os . makedirs ] function with directory and self.directory_permissions_mode [ self . directory_permissions_mode ] as arguments .
0
example# 1355
finally perform ,
0
example# 1356
call the os.umask [ os . umask ] function with argument old_umask .
0
example# 1357
if not ,
0
example# 1358
call the function os.makedirs [ os . makedirs ] with argument directory .
0
example# 1359
if exception OSError , renamed to e , occurred ,
0
example# 1360
if e.errno [ e . errno ] is not equal to errno.EEXIST [ errno . EEXIST ] ,
0
example# 1361
raise an exception .
0
example# 1362
if directory is not an directory ,
0
example# 1363
raise an IOError exception with argument string _STR:0_ , where ' % s ' is replaced by directory .
1
"%s exists and is not a directory." ||| _STR:0_
example# 1364
endless loop ,
0
example# 1365
try ,
0
example# 1366
if content has an attribute _STR:0_ ,
1
'temporary_file_path' ||| _STR:0_
example# 1367
call the function file_move_safe with content.temporary_file_path [ content . temporary_file_path ] function result and full_path .
0
example# 1368
if not ,
0
example# 1369
evaluate binary expression with 4 operands : os.O_WRONLY [ os . O_WRONLY ] , binary or os.O_CREAT [ os . O_CREAT ] , binary or os.O_EXCL [ os . O_EXCL ] ,
0
example# 1370
binary or _STR:0_ attribute of the os object , or integer 0 if it doesnt exists . call the os.open [ os . open ] function with full_path , flags and octal number 0o666 as arguments , substitute the result for fd .
1
'O_BINARY' ||| _STR:0_
example# 1371
_file is None .
0
example# 1372
try ,
0
example# 1373
call the function locks.lock [ locks . lock ] with fd and locks.LOCK_EX [ locks . LOCK_EX ] as arguments .
0
example# 1374
for every chunk in content.chunks [ content . chunks ] function return value ,
0
example# 1375
if _file is None ,
0
example# 1376
mode is a string _STR:0_ is chunk is instance of the type bytes , otherwise mode is a string _STR:1_ .
2
'wt' ||| _STR:1_
'wb' ||| _STR:0_
example# 1377
call the function os.fdopen [ os . fdopen ] with arguments fd and mode , substitute it for _file .
0
example# 1378
write the chunk to the file _file .
0
example# 1379
finally perform ,
0
example# 1380
call the function locks.unlock [ locks . unlock ] with argument fd .
0
example# 1381
if _file is not None ,
0
example# 1382
close the _file file .
0
example# 1383
if not ,
0
example# 1384
close fd file .
0
example# 1385
if OSError , renamed to e , is caught ,
0
example# 1386
if e.errno [ e . errno ] equals to errno.EEXIST [ errno . EEXIST ] ,
0
example# 1387
call the method self.get_available_name [ self . get_available_name ] with argument name , substitute the result for name .
0
example# 1388
call the method self.path [ self . path ] with argument name , substitute the result for full_path .
0
example# 1389
if not ,
0
example# 1390
raise an exception .
0
example# 1391
if not ,
0
example# 1392
break from the smallest enclosing loop .
0
example# 1393
if self.file_permissions_mode [ self . file_permissions_mode ] is not None ,
0
example# 1394
call the function os.chmod [ os . chmod ] with arguments full_path and self.file_permissions_mode [ self . file_permissions_mode ] .
0
example# 1395
return name .
0
example# 1396
define the method delete with arguments self and name .
0
example# 1397
if name is boolean False raise an assert error with message string _STR:0_ .
1
"The name argument is not allowed to be empty." ||| _STR:0_
example# 1398
call the self.path [ self . path ] with argument name , substitute it for name .
0
example# 1399
if os.path.exists [ os . path . exists ] function with argument name , evaluates to boolean True ,
0
example# 1400
try ,
0
example# 1401
call the os.remove [ os . remove ] function with argument name .
0
example# 1402
if OSError , renamed to e , is caught ,
0
example# 1403
if e.errno [ e . errno ] equals to errno.EEXIST [ errno . EEXIST ] ,
0
example# 1404
raise an exception .
0
example# 1405
define the method exists with arguments self and name .
0
example# 1406
call the self.path [ self . path ] function with argument name , use the result as the argument for the call to the os.path.exists [ os . path . exists ] function , return the result .
0
example# 1407
define the method listdir with arguments self and path .
0
example# 1408
call the self.path [ self . path ] function with argument path , substitute it for path .
0
example# 1409
directories , files are empty lists .
0
example# 1410
for every entry in os.listdir [ os . listdir ] function return value called with the argument path ,
0
example# 1411
join path and entry into a file path , if it exists ,
0
example# 1412
append entry to the directories list .
0
example# 1413
if not ,
0
example# 1414
append entry to files list .
0
example# 1415
return directories and files .
0
example# 1416
define the method path with arguments self and name .
0
example# 1417
try ,
0
example# 1418
call the safe_join function with arguments self.location [ self . location ] and name , substitute it for path .
0
example# 1419
if ValueError exception is caught ,
0
example# 1420
raise an SuspiciousFileOperation exception with string _STR:0_ as argument , replace ' % s ' with name .
1
"Attempted access to '%s' denied." ||| _STR:0_
example# 1421
call the os.path.normpath [ os . path . normpath ] with argument path , return the result .
0
example# 1422
define the method size with arguments self and name .
0
example# 1423
call the self.path [ self . path ] with argument name , use the result as an argument for the call to the os.path.getsize [ os . path . getsize ] function , return the result .
0
example# 1424
define the method url with arguments self and name .
0
example# 1425
if self.base_url [ self . base_url ] is None ,
0
example# 1426
raise an ValueError with string _STR:0_ as argument .
1
"This file is not accessible via a URL." ||| _STR:0_
example# 1427
call the urljoin function with arguments : self.base_url [ self . base_url ] and result of the call to the function filepath_to_uri with argument name , return the result .
0
example# 1428
define the method accessed_time with arguments self and name .
0
example# 1429
call the function self.path [ self . path ] with argument name , use the result as an argument for the call to the function os.path.getatime [ os . path . getatime ] ,
0
example# 1430
use the result as an argument for the call to the function datetime.fromtimestamp [ datetime . fromtimestamp ] , return the result . define the method created_time with arguments self and name .
0
example# 1431
call the function self.path [ self . path ] with argument name , use the result as an argument for the call to the function os.path.getctime [ os . path . getctime ] ,
0
example# 1432
use the result as an argument for the call to the function datetime.fromtimestamp [ datetime . fromtimestamp ] , return the result . define the method modified_time with arguments self and name .
0
example# 1433
call the function self.path [ self . path ] with argument name , use the result as an argument for the call to the function os.path.getmtime [ os . path . getmtime ] ,
0
example# 1434
use the result as an argument for the call to the function datetime.fromtimestamp [ datetime . fromtimestamp ] , return the result . define the function get_storage_class with argument import_path=None defaulting to None .
0
example# 1435
call the import_string with argument : import_path if exists or settings.DEFAULT_FILE_STORAGE [ settings . DEFAULT_FILE_STORAGE ] , if not , return the result .
0
example# 1436
derive the class DefaultStorage from the LazyObject base class .
0
example# 1437
define the _setup method with argument self .
0
example# 1438
call the function that is the return value of get_storage_class method , substitute the result for self._wrapped [ self . _wrapped ] .
0
example# 1439
call the DefaultStorage method , substitute the result for default_storage .
0
example# 1440
import module os .
0
example# 1441
import module tempfile .
0
example# 1442
from django.core.files.utils [ django . core . files . utils ] import FileProxyMixin into default name space .
0
example# 1443
__all__ is a tuple , containing strings _STR:0_ and _STR:1_ .
2
'NamedTemporaryFile' ||| _STR:0_
'gettempdir' ||| _STR:1_
example# 1444
if module os field name equals to string _STR:0_ ,
1
'nt' ||| _STR:0_
example# 1445
derive class TemporaryFile from the base class FileProxyMixin .
0
example# 1446
define method __init__ with self class instance , mode string _STR:0_ , bufsize set to integer -1 , suffix and prefix set to empty strig ,
1
'w+b' ||| _STR:0_
example# 1447
dir set to None as the arguments . call the method tmpfile.mkstemp [ tmpfile . mkstemp ] with suffix set to suffix , prefix set to prefix and dir set to dir , store the result in the fd and name , respective .
0
example# 1448
substitute name for self.name [ self . name ] .
0
example# 1449
call the os.fdopen [ os . fdopen ] function with fd , mode and bufsize as the arguments , assign the file handle object to self.file [ self . file ] .
0
example# 1450
substitute False for self.close_called [ self . close_called ] .
0
example# 1451
substitute os.unlink [ os . unlink ] for unlink .
0
example# 1452
define the method close with self class instance as the argument .
0
example# 1453
if self.close_called [ self . close_called ] is False ,
0
example# 1454
substitute True for self.close_called [ self . close_called ] .
0
example# 1455
try ,
0
example# 1456
close the file object .
0
example# 1457
if OSError or IOError exceptions were raised ,
0
example# 1458
do nothing .
0
example# 1459
try ,
0
example# 1460
call the method unlink on self with self.name [ self . name ] as the argument .
0
example# 1461
if OSError exception was raised ,
0
example# 1462
do nothing .
0
example# 1463
property decorator , to be called by property built-in function .
0
example# 1464
define the method closed with self as the argument .
0
example# 1465
return self.file.closed [ self . file . closed ] .
0
example# 1466
define __del__ method with self as the argument .
0
example# 1467
call the method close on self .
0
example# 1468
define __enter__ method with self as the argument .
0
example# 1469
call the file.__enter__ [ file . __enter__ ] method on self .
0
example# 1470
return self .
0
example# 1471
define method __exit__ with self , exc , value and tb as the arguments .
0
example# 1472
call the file.__exit__ [ file . __exit__ ] method on self with exc , value and tb as the arguments .
0
example# 1473
substitute TemporaryFile for NamedTemporaryFile .
0
example# 1474
if not ,
0
example# 1475
substitute tempfile.NamedTemporaryFile [ tempfile . NamedTemporaryFile ] for NamedTemporaryFile .
0
example# 1476
substitute tempfile.gettempdir [ tempfile . gettempdir ] for gettempdir .
0
example# 1477
import module errno .
0
example# 1478
import module os .
0
example# 1479
from io import BytesIO into default name space .
0
example# 1480
from django.conf [ django . conf ] import settings into default name space .
0
example# 1481
from django.core.files.base [ django . core . files . base ] import File into default name space .
0
example# 1482
from django.core.files [ django . core . files ] import temp as tempfile into default name space .
0
example# 1483
from django.utils.encoding [ django . utils . encoding ] import force_str into default name space .
0
example# 1484
__all__ is a tuple containing strings : _STR:0_ , _STR:1_ , _STR:2_ and _STR:3_ .
4
'SimpleUploadedFile' ||| _STR:3_
'UploadedFile' ||| _STR:0_
'TemporaryUploadedFile' ||| _STR:1_
'InMemoryUploadedFile' ||| _STR:2_
example# 1485
derive the UploadedFile class from the File base class .
0
example# 1486
bring integer 2 to the power of 10 , multiply it by integer 64 , substitute the result for DEFAULT_CHUNK_SIZE .
0
example# 1487
define the method __init__ with 7 arguments : self , file set to None , name set to None , content_type set to None , size set to None , charset set to None and content_type_extra set to None .
0
example# 1488
call the __init__ method with arguments file and name , from the base class of the UploadedFile class .
0
example# 1489
substitute size for self.size [ self . size ] .
0
example# 1490
substitute content_type for self.content_type [ self . content_type ] .
0
example# 1491
substitute charset for self.charset [ self . charset ] .
0
example# 1492
substitute content_type_extra for self.content_type_extra [ self . content_type_extra ] .
0
example# 1493
define the method __repr__ with argument self .
0
example# 1494
substitute ' % s ' from string _STR:0_ with self.__class__.__name__ [ self . __class__ . __name__ ] , self.name [ self . name ] and self.content_type [ self . content_type ] , respectively , use it as an argument for the call to the function force_str , return the result .
1
"<%s: %s (%s)>" ||| _STR:0_
example# 1495
define the method _get_name with argument self .
0
example# 1496
return self._name [ self . _name ] .
0
example# 1497
define the method _set_name with arguments self and name .
0
example# 1498
if name is not None ,
0
example# 1499
call the function os.path.basename [ os . path . basename ] with argument name , substitute the result for name .
0
example# 1500
if length of name is greater than integer 255 ,
0
example# 1501
call the os.path.splitex [ os . path . splitex ] with argument name , assign the result to name and ext , respectively .
0
example# 1502
substitute the first 255 elements of ext for ext .
0
example# 1503
subtract length of the ext from the integer 255 , take first elements of the name list up to the previous result index ,
0
example# 1504
append ext to the end of it , substitute the resulting list for name . substitute name for self._name [ self . _name ] .
0
example# 1505
name is a property object with _get_name as a getter method and _set_name as a setter method .
0
example# 1506
derive the TemporaryUploadedFile class from the UploadedFile base class .
0
example# 1507
define the __init__ method with 6 arguments : self , name , content_type , size , charset and content_type_extra set to None .
0
example# 1508
if settings.FILE_UPLOAD_TEMP_DIR [ settings . FILE_UPLOAD_TEMP_DIR ] is true ,
0
example# 1509
call the method tempfile.NamedTemporaryFile [ tempfile . NamedTemporaryFile ] with arguments : suffix set to string _STR:0_ and dir set to settings.FILE_UPLOAD_TEMP_DIR [ settings . FILE_UPLOAD_TEMP_DIR ] .
1
'.upload' ||| _STR:0_
example# 1510
if not ,
0
example# 1511
call the method tempfile.NamedTemporaryFile [ tempfile . NamedTemporaryFile ] with argument suffix set to string _STR:0_ .
1
'.upload' ||| _STR:0_
example# 1512
call the method __init__ from the base class of the TemporaryUploadedFile class with arguments : file , name , content_type , size , charset and content_type_extra .
0
example# 1513
define the method temporary_file_path with argument self .
0
example# 1514
return self.file.name [ self . file . name ] .
0
example# 1515
define the method close with argument self .
0
example# 1516
try ,
0
example# 1517
call the self.file.close [ self . file . close ] method , return the result .
0
example# 1518
if OSError , renamed to e , exception is caught ,
0
example# 1519
if e.errno [ e . errno ] is not equal to errno.ENOENT [ errno . ENOENT ] ,
0
example# 1520
raise an exception .
0
example# 1521
derive the InMemoryUploadedFile class from the UploadedFile base class .
0
example# 1522
define the method __init__ with 8 arguments : self , file , field_name , name , content_type , size , charset and content_type_extra set to None .
0
example# 1523
call the method __init__ from the base class of the InMemoryUploadedFile base class , with 6 arguments : file , name , content_type ,
0
example# 1524
size , charset , content_type_extra . substitute field_name for self.field_name [ self . field_name ] .
0
example# 1525
define the method open with arguments self and mode set to None .
0
example# 1526
set the file pointer at the beginning of the self.file [ self . file ] file .
0
example# 1527
define the method chunks with arguments self ad chunk_size set to None .
0
example# 1528
set the file pointer at the beginning of the self.file [ self . file ] file .
0
example# 1529
read the whole self file and yield it as a generator return value .
0
example# 1530
define the method multiple_chunks with arguments self and hunk_size set to None .
0
example# 1531
return boolean False .
0
example# 1532
derive the SimpleUploadedFile class from the InMemoryUploadedFile base class .
0
example# 1533
define the method __init__ with 4 arguments : self , name , content and content_type defaulting to a string _STR:0_ .
1
'text/plain' ||| _STR:0_
example# 1534
if content is empty , substitute it for an empty string .
0
example# 1535
call the __init__ method from the base class of the SimpleUploadedFile class with 7 arguments : BytesIO ( content ) , None , name ,
0
example# 1536
content_type , length of content , None and None . decorator classmethod .
0
example# 1537
define the method from_dict with argument cls and file_dict .
0
example# 1538
call the method cls with 3 arguments : value under the _STR:0_ key of file_dict , value under the _STR:1_ key of file_dict ,
2
'content' ||| _STR:1_
'filename' ||| _STR:0_
example# 1539
from __future__ import unicode_literals into default name space .
0
example# 1540
from io import BytesIO into default name space .
0
example# 1541
from django.conf [ django . conf ] import settings into default name space .
0
example# 1542
from django.core.files.uploadedfile [ django . core . files . uploadedfile ] import TemporaryUploadedFile and InMemoryUploadedFile into default name space .
0
example# 1543
from django.utils.encoding [ django . utils . encoding ] import python_2_unicode_compatible into default name space .
0
example# 1544
from django.utils.module_loading [ django . utils . module_loading ] import import_string into default name space .
0
example# 1545
__all__ is a string containing strings : _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ ,
4
'UploadFileException' ||| _STR:0_
'FileUploadHandler' ||| _STR:3_
'SkipFile' ||| _STR:2_
'StopUpload' ||| _STR:1_
example# 1546
_STR:0_ , _STR:1_ , _STR:2_ and _STR:3_ . derive the class UploadFileException from the Exception base class .
4
'MemoryFileUploadHandler' ||| _STR:1_
'TemporaryFileUploadHandler' ||| _STR:0_
'load_handler' ||| _STR:2_
'StopFutureHandlers' ||| _STR:3_
example# 1547
do nothing .
0
example# 1548
decorator python_2_unicode_compatible ,
0
example# 1549
derive the class StopUpload from the UploadFileException base class .
0
example# 1550
define the method __init__ with arguments self and connection_reset defaulting to boolean False .
0
example# 1551
substitute connection_reset for self.connection_reset [ self . connection_reset ] .
0
example# 1552
define the method __str__ with argument self .
0
example# 1553
if self.connection_reset [ self . connection_reset ] is true ,
0
example# 1554
return string _STR:0_ .
1
'StopUpload: Halt current upload.' ||| _STR:0_
example# 1555
if not ,
0
example# 1556
return string _STR:0_ .
1
'StopUpload: Consume request data, then halt.' ||| _STR:0_
example# 1557
derive the class SkipFile from the UploadFileException base class .
0
example# 1558
do nothing .
0
example# 1559
derive the class StopFutureHandlers from the UploadFileException base class .
0
example# 1560
do nothing .
0
example# 1561
derive the class FileUploadHandler from the object base class .
0
example# 1562
bring integer 2 to the power of 10 , multiply it by integer 64 , substitute the result for chunk_size .
0
example# 1563
define the method __init__ with arguments self and request defaulting to None .
0
example# 1564
self.file_name [ self . file_name ] is None .
0
example# 1565
self.content_type [ self . content_type ] is None .
0
example# 1566
self.content_length [ self . content_length ] is None .
0
example# 1567
self.charset [ self . charset ] is None .
0
example# 1568
self.content_type_extra [ self . content_type_extra ] is None .
0
example# 1569
self.request [ self . request ] is None .
0
example# 1570
define the method handle_raw_input with arguments : self , input_data , META , content_length , boundary and encoding set to None .
0
example# 1571
do nothing .
0
example# 1572
define the method new_file with arguments : self , field_name , file_name , content_type , content_length , charset set to None ,
0
example# 1573
substitute field_name for self.field_name [ self . field_name ] .
0
example# 1574
substitute file_name for self.file_name [ self . file_name ] .
0
example# 1575
substitute content_type for self.content_type [ self . content_type ] .
0
example# 1576
substitute content_length for self.content_length [ self . content_length ] .
0
example# 1577
substitute charset for self.charset [ self . charset ] .
0
example# 1578
substitute content_type_extra for self.content_type_extra [ self . content_type_extra ] .
0
example# 1579
define the method receive_data_chunk with arguments : self , raw_data and start .
0
example# 1580
raise an NotImplementedError with argument string _STR:0_ .
1
'subclasses of FileUploadHandler must provide a receive_data_chunk() method' ||| _STR:0_
example# 1581
define the method file_complete with arguments : self and file_size .
0
example# 1582
raise an NotImplementedError with argument string _STR:0_ .
1
'subclasses of FileUploadHandler must provide a file_complete() method' ||| _STR:0_
example# 1583
define the method upload_complete with argument self .
0
example# 1584
do nothing .
0
example# 1585
derive the class TemporaryFileUploadHandler from the FileUploadHandler base class .
0
example# 1586
define the method __init__ with arguments self , argument list args and dictionary of arguments kwargs .
0
example# 1587
call the __init__ method from the base class of the TemporaryFileUploadHandler class with arguments : unpacked list args ,
0
example# 1588
and unpacked dictionary kwargs . define the method new_file with arguments : self , file_name , unpacked list args and unpacked dictionary kwargs .
0
example# 1589
call the method new_file from the base class of the TemporaryFileUploadHandler class with arguments : file_name , unpacked list args and unpacked dictionary kwargs .
0
example# 1590
self.file [ self . file ] is a instance of a class TemporaryUploadedFile initialized with arguments : self.file_name [ self . file_name ] , self.content_type [ self . content_type ] , integer 0 ,
0
example# 1591
self.charset [ self . charset ] and self.content_type_extra [ self . content_type_extra ] . define the method receive_data_chunk with arguments : self , raw_data and start .
0
example# 1592
call the method self.file.write [ self . file . write ] with argument raw_data .
0
example# 1593
define the method file_complete with arguments self and file_size .
0
example# 1594
position the file pointer at the start of the self.file [ self . file ] file .
0
example# 1595
substitute file_size for self.file.size [ self . file . size ] .
0
example# 1596
return self.file [ self . file ] .
0
example# 1597
derive the class MemoryFileUploadHandler from the FileUploadHandler base class .
0
example# 1598
define the method handle_raw_input with arguments : self , input_data , META , content_length , boundary and encoding set to None .
0
example# 1599
if content_length is greater than settings.FILE_UPLOAD_MAX_MEMORY_SIZE [ settings . FILE_UPLOAD_MAX_MEMORY_SIZE ] ,
0
example# 1600
self.activated [ self . activated ] is boolean False .
0
example# 1601
if not ,
0
example# 1602
self.activated [ self . activated ] is boolean True .
0
example# 1603
define the method new_file with arguments : self , unpacked list args and unpacked dictionary kwargs .
0
example# 1604
call the new_file method form the base class from the MemoryFileUploadHandler class with arguments : unpacked list args and unpacked list kwargs .
0
example# 1605
if self.activated [ self . activated ] is boolean True ,
0
example# 1606
call the function BytesIO , substitute the result for self.file [ self . file ] .
0
example# 1607
raise an exception StopFutureHandlers .
0
example# 1608
define the function receive_data_chunk with arguments self , raw_data and start .
0
example# 1609
if self.activated [ self . activated ] is boolean True ,
0
example# 1610
write raw_data to self.file [ self . file ] file .
0
example# 1611
if not ,
0
example# 1612
return raw_data .
0
example# 1613
define the function file_complete with arguments self and file_size .
0
example# 1614
if self.activated [ self . activated ] is boolean False ,
0
example# 1615
return nothing .
0
example# 1616
set file pointer at the beginning of the self.file [ self . file ] file .
0
example# 1617
initialize the object of a InMemoryUploadedFile class with arguments : file set to self.file [ self . file ] , field_name set to self.field_name [ self . field_name ] ,
0
example# 1618
name set to self.file_name [ self . file_name ] , content_type set to self.content_type [ self . content_type ] , size set to file_size , charset set to self.charset [ self . charset ] , and content_type_extra set to self.content_type_extra [ self . content_type_extra ] , return it . define the function load_handler with arguments : path , unpacked list args and unpacked dictionary kwargs .
0
example# 1619
call the import_string with arguments path , call the return function with arguments : unpacked list args and unpacked dictionary kwargs , return the result .
0
example# 1620
derive class FileProxyMixin from the base class object , making it a new-style class .
0
example# 1621
define lambda function that returns self.file.encoding [ self . file . encoding ] field , use it as an argument for property function , put the result in encoding .
0
example# 1622
define lambda function that returns self.file.fileno [ self . file . fileno ] field , use it as an argument for property function , put the result in fileno .
0
example# 1623
define lambda function that returns self.file.flush [ self . file . flush ] field , use it as an argument for property function , put the result in flush .
0
example# 1624
define lambda function that returns self.file.isatty [ self . file . isatty ] field , use it as an argument for property function , put the result in isatty .
0
example# 1625
define lambda function that returns self.file.newlines [ self . file . newlines ] field , use it as an argument for property function , put the result in newlines .
0
example# 1626
define lambda function that returns self.file.read [ self . file . read ] field , use it as an argument for property function , put the result in read .
0
example# 1627
define lambda function that returns self.file.readinto [ self . file . readinto ] field , use it as an argument for property function , put the result in readinto .
0
example# 1628
define lambda function that returns self.file.readline [ self . file . readline ] field , use it as an argument for property function , put the result in readline .
0
example# 1629
define lambda function that returns self.file.readlines [ self . file . readlines ] field , use it as an argument for property function , put the result in readlines .
0
example# 1630
define lambda function that returns self.file.seek [ self . file . seek ] field , use it as an argument for property function , put the result in seek .
0
example# 1631
define lambda function that returns self.file.softspace [ self . file . softspace ] field , use it as an argument for property function , put the result in softspace .
0
example# 1632
define lambda function that returns self.file.tell [ self . file . tell ] field , use it as an argument for property function , put the result in tell .
0
example# 1633
define lambda function that returns self.file.truncate [ self . file . truncate ] field , use it as an argument for property function , put the result in truncate .
0
example# 1634
define lambda function that returns self.file.write [ self . file . write ] field , use it as an argument for property function , put the result in write .
0
example# 1635
define lambda function that returns self.file.writelines [ self . file . writelines ] field , use it as an argument for property function , put the result in writelines .
0
example# 1636
define lambda function that returns self.file.xreadlines [ self . file . xreadlines ] field , use it as an argument for property function , put the result in xreadlines .
0
example# 1637
define iterator method __iter__ with self as the argument .
0
example# 1638
return iterator object based on the self.file [ self . file ] collection object .
0
example# 1639
from __future__ import unicode_literals into default name space .
0
example# 1640
import module logging .
0
example# 1641
import module sys .
0
example# 1642
import module types .
0
example# 1643
from django import http into default name space .
0
example# 1644
from django.conf [ django . conf ] import settings into default name space .
0
example# 1645
from django.core [ django . core ] import urlresolvers into default name space .
0
example# 1646
from django.core [ django . core ] import signals into default name space .
0
example# 1647
from django.core.exceptions [ django . core . exceptions ] import MiddlewareNotUsed , PermissionDenied and SuspiciousOperation into default name space .
0
example# 1648
from django.db [ django . db ] import connections and transaction into default name space .
0
example# 1649
from django.utils.encoding [ django . utils . encoding ] import force_text into default name space .
0
example# 1650
from django.utils.module_loading [ django . utils . module_loading ] import import_string into default name space .
0
example# 1651
from django.utils [ django . utils ] import six into default name space .
0
example# 1652
from django.views [ django . views ] import debug into default name space .
0
example# 1653
call the function logging.getLogger [ logging . getLogger ] with string _STR:0_ as the argument , assign the return object handle to logger .
1
'django.request' ||| _STR:0_
example# 1654
derive class BaseHandler , derive from the base class object , making this a new style class .
0
example# 1655
response_fixes is a list with http.fix_location_header [ http . fix_location_header ] and http.conditional_content_removal [ http . conditional_content_removal ] as elements .
0
example# 1656
define initialization method __init__ , with self class instance as the argument .
0
example# 1657
set class fields _request_middleware , _view_middleware , _template_response_middleware , _response_middleware and _exception_middleware to None .
0
example# 1658
define method load_middleware with class instance self as the argument .
0
example# 1659
self._view_middleware [ self . _view_middleware ] is an empty list .
0
example# 1660
self._template_response_middleware [ self . _template_response_middleware ] is an empty list .
0
example# 1661
_response_middleware is an empty list .
0
example# 1662
exception_middleware is an empty list .
0
example# 1663
request_middleware is an empty list .
0
example# 1664
for every middleware_path in settings.MIDDLEWARE_CLASSES [ settings . MIDDLEWARE_CLASSES ] :
0
example# 1665
evaluate the function import_string with middleware_path as argument , substitute the result for my_class .
0
example# 1666
try ,
0
example# 1667
call the mw_class function , store the result in the mw_instance .
0
example# 1668
if MiddlewareNotUsed exception is raised ,
0
example# 1669
skip this iteration of he smallest enclosing loop .
0
example# 1670
if mw_instance has an attribute named _STR:0_ .
1
'process_request' ||| _STR:0_
example# 1671
append mw_instance.process_request [ mw_instance . process_request ] at the end of request_middleware .
0
example# 1672
if mw_instance has an attribute named _STR:0_ .
1
'process_view' ||| _STR:0_
example# 1673
append mw_instance.process_view [ mw_instance . process_view ] at the end of self._view_middleware [ self . _view_middleware ] .
0
example# 1674
if mw_instance has an attribute named _STR:0_ .
1
'process_template_response' ||| _STR:0_
example# 1675
insert mw_instance.process_template_response [ mw_instance . process_template_response ] at the beginning of self._template_response_middleware [ self . _template_response_middleware ] .
0
example# 1676
if mw_instance has an attribute named _STR:0_ .
1
'process_response' ||| _STR:0_
example# 1677
insert mw_instance.process_response [ mw_instance . process_response ] at the beginning of self._response_middleware [ self . _response_middleware ] .
0
example# 1678
if mw_instance has an attribute named _STR:0_ .
1
'process_exception' ||| _STR:0_
example# 1679
insert mw_instance.process_exception [ mw_instance . process_exception ] at the beginning of self._exception_middleware [ self . _exception_middleware ] .
0
example# 1680
substitute self._request_middleware [ self . _request_middleware ] for request_middleware .
0
example# 1681
define the method make_view_atomic , with self class instance and view as the arguments .
0
example# 1682
get attribute _STR:0_ from the view object , if the attribute doesnt exist return the empty set , substitute the result for non_atomic_requests .
1
'_non_atomic_requests' ||| _STR:0_
example# 1683
call the method connections.all [ connections . all ] ( ) , perform the following for every db in the result ,
0
example# 1684
if value under the key 'ATOMIC_REQUESTS of db.settings_dic [ db . settings_dic ] dictionary is True and db.alias [ db . alias ] is not present in the non_atomic_requests ,
0
example# 1685
call the function transaction.atomic [ transaction . atomic ] , with using set to db.alias [ db . alias ] as the argument , return value is a function which is called ,
0
example# 1686
with the argument view , store the result in the view . return view
0
example# 1687
define method get_exception_response , with self class instance , request , resolver and status_code as the arguments .
0
example# 1688
try ,
0
example# 1689
call the function resolver.resolve_error_handler [ resolver . resolve_error_handler ] with status_code as an argument , assign the result to the callback and param_dict , respectively .
0
example# 1690
call the callback function with request and dictionary argument param_dict as the arguments , substitute it for response .
0
example# 1691
if an exception occurred ,
0
example# 1692
call the method signals.got_request_exception.send [ signals . got_request_exception . send ] with the sender set to the type of this class , and request set to request as the arguments .
0
example# 1693
call the method self.handle_uncaught_exception [ self . handle_uncaught_exception ] with request , resolver and return value of the function sys.exec_info [ sys . exec_info ] as the arguments .
0
example# 1694
return response
0
example# 1695
define the method get_response , with self class instance and request as the arguments .
0
example# 1696
substitute settings.ROOT_URLCONF [ settings . ROOT_URLCONF ] for urlconf .
0
example# 1697
call the method urlresolvers.set_urlconf [ urlresolvers . set_urlconf ] with urlconf as the argument .
0
example# 1698
call the method urlresolvers.RegexURLResolver [ urlresolvers . RegexURLResolver ] with raw literal string _STR:0_ and urlconf as the arguments , substitute the result for resolver .
1
'^/' ||| _STR:0_
example# 1699
try ,
0
example# 1700
set response to None .
0
example# 1701
for every middleware_method in self._request_middleware [ self . _request_middleware ] ,
0
example# 1702
call the middleware_method with the request as an argument , substitute the result for response .
0
example# 1703
if response is True ,
0
example# 1704
breaks from the smallest enclosing loop execution .
0
example# 1705
if response is None ,
0
example# 1706
if request has an attribute named _STR:0_ ,
1
'urlconf' ||| _STR:0_
example# 1707
substitute request.urlconf [ request . urlconf ] for urlconf .
0
example# 1708
call the function urlresolvers.set_urlconf [ urlresolvers . set_urlconf ] with urlconf as the argument .
0
example# 1709
call the method urlresolvers.RegexURLResolver [ urlresolvers . RegexURLResolver ] with raw literal string _STR:0_ and urlconf as the arguments , substitute the result for resolver .
1
'^/' ||| _STR:0_
example# 1710
call to the resolver.resolve [ resolver . resolve ] method with request.path_info [ request . path_info ] as an argument .
0
example# 1711
assign the values to the callback , callback_args , callback_kwargs , respectively , from the resolver_match tuple .
0
example# 1712
substitute resolver_match for request.resolver_match [ request . resolver_match ] .
0
example# 1713
for every middleware_method in self._view_middleware [ self . _view_middleware ] ,
0
example# 1714
call the middleware_method with request , callback , callback_args and callback_kwargs as the arguments , substitute the result for response .
0
example# 1715
if response is True ,
0
example# 1716
break from the smallest enclosing loop execution .
0
example# 1717
if response is None ,
0
example# 1718
call the method self.make_view_atomic [ self . make_view_atomic ] with callback as the argument , substitute the result for the wrapped_callback .
0
example# 1719
try ,
0
example# 1720
call the function wrapped_callback with request , list or arguments callback_args and dictionary arguments callback_kwargs ,
0
example# 1721
as the arguments , substitute the result for response . if Exception , renamed to e , exception is caught ,
0
example# 1722
for every middleware_method in self._exception_middleware [ self . _exception_middleware ] ,
0
example# 1723
call the middleware_method with request and e as the arguments , substitute the result for response .
0
example# 1724
if response is True ,
0
example# 1725
break from the smallest enclosing loop execution .
0
example# 1726
if response is None ,
0
example# 1727
raise the exception .
0
example# 1728
if response is None ,
0
example# 1729
if callback is of instance types.FunctionType [ types . FunctionType ] ,
0
example# 1730
get the name of the callback , substitute it for view_name .
0
example# 1731
if not ,
0
example# 1732
get the name of the type of the callback , append the string _STR:0_ to it , substitute it for view_name .
1
'.__call__' ||| _STR:0_
example# 1733
substitute the ' % s ' in the string _STR:0_ ,
1
"The view %s.%s didn't return an HttpResponse object. It returned None instead." ||| _STR:0_
example# 1734
with the name of the module callback is in and the view_name , respectively , use it as the argument for the ValueError exception raise . if response has an attribute named _STR:0_ and response.render [ response . render ] is a callable function ,
1
'render' ||| _STR:0_
example# 1735
for every middleware_method in self._template_response_middleware [ self . _template_response_middleware ] ,
0
example# 1736
call the function middleware_method with the request and response as the arguments , assign the result to response .
0
example# 1737
if response is None ,
0
example# 1738
replace ' % s ' in the string _STR:0_ ,
1
"%s.process_template_response didn't return an HttpResponse object. It returned None instead." ||| _STR:0_
example# 1739
with name of the class type of the middleware_method instance , use it as the argument for call to the ValueError exception raise . call the response.render [ response . render ] ( ) method and assign the return to the response .
0
example# 1740
if exception http.Http404 [ http . Http404 ] as e is caught ,
0
example# 1741
substitute ' % s ' in _STR:0_ with request.path [ request . path ] , extra is an dictionary with two pairs of elements _STR:1_ with value 404 ,
2
'Not Found: %s' ||| _STR:0_
'status_code' ||| _STR:1_
example# 1742
and 'request with value request , respectively use the previous as the arguments for the call to the logger.warning [ logger . warning ] function . if settings.DEBUG [ settings . DEBUG ] is True ,
0
example# 1743
call the function debug.technical_404_response [ debug . technical_404_response ] with request and e as arguments , assign the result to response .
0
example# 1744
if not ,
0
example# 1745
call the method self.get_exception_response [ self . get_exception_response ] with request , resolver and integer 404 as the arguments , assign the result to response .
0
example# 1746
if exception PermissionDenied is caught ,
0
example# 1747
substitute ' % s ' in _STR:0_ with request.path [ request . path ] , extra is an dictionary with two pairs of elements ,
1
'Forbidden (Permission denied): %s' ||| _STR:0_
example# 1748
_STR:0_ with value 403 , and 'request with value request , respectively use the previous as the arguments for the call to the logger.warning [ logger . warning ] function . call the method self.get_exception_response [ self . get_exception_response ] with request , resolver and integer 403 as the arguments , assign the result to response .
1
'status_code' ||| _STR:0_
example# 1749
if exception SuspiciousOperation as e is caught ,
0
example# 1750
substitute ' % s ' in _STR:0_ with the name of the type of the class object e , use it as the argument for the call to the ,
1
'django.security.%s' ||| _STR:0_
example# 1751
function logging.getLogger [ logging . getLogger ] , assign the result to the security_logger . evaluate the function force_text with e as an argument , extra is an dictionary with two pair of elements ,
0
example# 1752
_STR:0_ with integer value of 400 and _STR:1_ with value request , respectively use the previous to call the function security_logger.error [ security_logger . error ] . if settings.DEBUG [ settings . DEBUG ] is True ,
2
'request' ||| _STR:1_
'status code' ||| _STR:0_
example# 1753
evaluate the function debug.technical_500_response [ debug . technical_500_response ] with request , evaluated value of function sys.exc_info [ sys . exc_info ] as a list ,
0
example# 1754
status code set to integer 400 , return the result . call the method self.get_exception_response [ self . get_exception_response ] with the request , resolver and integer 400 as the arguments , substitute the result for response .
0
example# 1755
if SystemExit exception is caught ,
0
example# 1756
raise an exception .
0
example# 1757
otherwise if any other exception is caught ,
0
example# 1758
call the method signals.got_request_exception.send [ signals . got_request_exception . send ] with sender set to type of the self class instance and request set to request .
0
example# 1759
call to the self.handle_uncaught_exception [ self . handle_uncaught_exception ] method with request , resolver and value of the evaluated function sys.exec_info [ sys . exec_info ] ,
0
example# 1760
as the arguments , substitute the result for response . try ,
0
example# 1761
for every middleware_method in self._response_middleware [ self . _response_middleware ] ,
0
example# 1762
call the function middleware_method with request and response as the arguments , substitute the result for response .
0
example# 1763
if response is None ,
0
example# 1764
substitute ' % s ' is _STR:0_ ,
1
"%s.process_response didn't return an HttpResponse object. It returned None instead." ||| _STR:0_
example# 1765
with the name of the type of the self class instance of the middleware_method , raise the ValueError with the previous as the argument . call the method self.apply_response_fixes [ self . apply_response_fixes ] with the request and response as the arguments , substitute the result for response .
0
example# 1766
if any exception is caught ,
0
example# 1767
call the signals.got_request_exception.send [ signals . got_request_exception . send ] method with sender set to type of the self class instance and request set to request .
0
example# 1768
call to the self.handle_uncaught_exception [ self . handle_uncaught_exception ] method with request , resolver and value of the evaluated function sys.exec_info [ sys . exec_info ] ,
0
example# 1769
as the arguments , substitute the result for response . append the request to the end of the protected class member response._closable_objects [ response . _closable_objects ] .
0
example# 1770
return response .
0
example# 1771
define the method handle_uncaught_exception with self class instance , request , resolver and exec_info as arguments .
0
example# 1772
if settings.DEBUG_PROPAGATE_EXCEPTIONS [ settings . DEBUG_PROPAGATE_EXCEPTIONS ] is True ,
0
example# 1773
raise an exception .
0
example# 1774
substitute ' % s ' in _STR:0_ with request.path [ request . path ] , exc_info set to exc_info ,
1
'Internal Server Error: %s' ||| _STR:0_
example# 1775
extra is an dictionary with two pairs of elements _STR:0_ with value 500 , and 'request with value request , respectively use the previous as the arguments for the call to the logger.error [ logger . error ] function . if settings.DEBUG [ settings . DEBUG ] is True ,
1
'status_code' ||| _STR:0_
example# 1776
evaluate debug.technical_500_response [ debug . technical_500_response ] with request and list of arguments exec_info , return the result .
0
example# 1777
if resolver.urlconf_module [ resolver . urlconf_module ] is None :
0
example# 1778
call the function reraise from the module six , with list of arguments exec_info .
0
example# 1779
call the resolver.resolve_error_handler [ resolver . resolve_error_handler ] with integer 500 as the argument , assign the resulting tuple elements to the callback ,
0
example# 1780
and param_dict , respectively . evaluate the function callback with request and dictionary of parameters param_dict as the arguments , return the result .
0
example# 1781
define the method apply_response_fixes with self class instance , request and response as the arguments .
0
example# 1782
for every func in self.response_fixes [ self . response_fixes ] ,
0
example# 1783
call the function func with request and response as arguments , assign the result to response .
0
example# 1784
return response .
0
example# 1785
from __future__ import unicode_literals into default name space .
0
example# 1786
import module cgi .
0
example# 1787
import module codecs .
0
example# 1788
import module logging .
0
example# 1789
import module sys .
0
example# 1790
from io import BytesIO into default name space .
0
example# 1791
from threading import Lock into default name space .
0
example# 1792
import module warnings .
0
example# 1793
from django import http into default name space .
0
example# 1794
from django.conf [ django . conf ] import settings into default name space .
0
example# 1795
from django.core [ django . core ] import signals into default name space .
0
example# 1796
from django.core.handlers [ django . core . handlers ] import base into default name space .
0
example# 1797
from django.core.urlresolvers [ django . core . urlresolvers ] import set_script_prefix into default name space .
0
example# 1798
from django.utils [ django . utils ] import datastructures into default name space .
0
example# 1799
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
0
example# 1800
from django.utils.encoding [ django . utils . encoding ] import force_str and force_text into default name space .
0
example# 1801
from django.utils.functional [ django . utils . functional ] import cached_property into default name space .
0
example# 1802
from django.utils [ django . utils ] import six into default name space .
0
example# 1803
from django.http.response [ django . http . response ] import REASON_PHRASES as STATUS_CODE_TEXT # NOQA into default name space .
0
example# 1804
call logging.getLogger [ logging . getLogger ] method with string _STR:0_ as argument , store the result in logger .
1
'django.request' ||| _STR:0_
example# 1805
ISO_8859_1 is a string _STR:0_ , UTF_8 is a string _STR:1_ .
2
'utf-8' ||| _STR:1_
'iso-8859-1' ||| _STR:0_
example# 1806
derive class LimitedStream from the object base class , making it a new-style class .
0
example# 1807
def initialization method __init__ with self class instance , stream , limit and buf_size set to integer value of the product 64*1024*1024 .
0
example# 1808
substitute stream for self.stream [ self . stream ] .
0
example# 1809
substitute limit for self.remaining [ self . remaining ] .
0
example# 1810
substitute empty bytes string for self.buffer [ self . buffer ] .
0
example# 1811
substitute buf_size for self.buf_size [ self . buf_size ] .
0
example# 1812
define the method _read_limited with self class instance and size set to None as arguments .
0
example# 1813
if size is None or size is greater than self.remaining [ self . remaining ] ,
0
example# 1814
substitute self.remaining [ self . remaining ] for size .
0
example# 1815
if size equals to integer zero .
0
example# 1816
return empty bytes string .
0
example# 1817
read size number of bytes from self.stream [ self . stream ] stream , store the result in the result .
0
example# 1818
decrement self.remaining [ self . remaining ] by length of result .
0
example# 1819
return result .
0
example# 1820
define the method read with self class instance and size set to None as arguments .
0
example# 1821
if size is None ,
0
example# 1822
add self.buffer [ self . buffer ] and self._read_limited [ self . _read_limited ] method return value together , store it in result .
0
example# 1823
substitute empty bytes string for self.buffer [ self . buffer ] .
0
example# 1824
otherwise if size is less than length of self.buffer [ self . buffer ] ,
0
example# 1825
substitute first size elements of self.buffer [ self . buffer ] for result .
0
example# 1826
truncate first size number of elements of self.buffer [ self . buffer ] .
0
example# 1827
if not ,
0
example# 1828
call the method self.read_limited [ self . read_limited ] with length of self.buffer [ self . buffer ] subtracted from size as argument , add result to self.buffer [ self . buffer ] , store it in result .
0
example# 1829
substitute empty bytes string for self.buffer [ self . buffer ] .
0
example# 1830
return result .
0
example# 1831
define method readline with self class instance and size set to None .
0
example# 1832
while newline character is not contained in self.buffer [ self . buffer ] and , size is None or length of self.buffer [ self . buffer ] is less than size ,
0
example# 1833
if size is not zero ,
0
example# 1834
call the self._read_limiter [ self . _read_limiter ] with length of self.buffer [ self . buffer ] subtracted from size as argument , store the result into chunk .
0
example# 1835
if not ,
0
example# 1836
call the method self._read_limited [ self . _read_limited ] , store the return value into chunk .
0
example# 1837
if chunk is empty ,
0
example# 1838
break the execution of the smallest enclosing loop .
0
example# 1839
increment self.buffer [ self . buffer ] by chunk .
0
example# 1840
call the function BytesIO with self.buffer [ self . buffer ] as argument , store the result is sio .
0
example# 1841
if size is not empty ,
0
example# 1842
call the sio.readline [ sio . readline ] method with size as an argument , substitute the result for line .
0
example# 1843
if not ,
0
example# 1844
call the sio.readline [ sio . readline ] method , substitute the result for line .
0
example# 1845
call the sio.read [ sio . read ] method , substitute the result for self.buffer [ self . buffer ] .
0
example# 1846
return line .
0
example# 1847
derive the class WSGIRequest from base class http.HttpRequest [ http . HttpRequest ] .
0
example# 1848
define the initialization method __init__ with self class instance and environ as arguments .
0
example# 1849
call the get_script_name function with environ as argument , substitute the result for script_name .
0
example# 1850
call the get_path_info function with environ as argument , substitute the result for path_info .
0
example# 1851
if path_info is empty ,
0
example# 1852
path_info is a character _STR:0_ .
1
'/' ||| _STR:0_
example# 1853
substitute environ for self.environ [ self . environ ] .
0
example# 1854
substitute path_info for self.path_info [ self . path_info ] .
0
example# 1855
strip trailing _STR:0_ from the script_name string , remove first occurrence of _STR:0_ in path_info string , append second result to the first , separated with _STR:0_ , assign the result to self.path [ self . path ] .
1
'/' ||| _STR:0_
example# 1856
substitute environ for self.META [ self . META ] .
0
example# 1857
assign path_info to the value under the _STR:0_ key of the self.META [ self . META ] dictionary .
1
'PATH_INFO' ||| _STR:0_
example# 1858
assign script_name to the value under the _STR:0_ key of the self.META [ self . META ] dictionary .
1
'SCRIP_NAME' ||| _STR:0_
example# 1859
convert value under the _STR:0_ key of the environ dictionary to uppercase , substitute it for self.method [ self . method ] .
1
'REQUEST_METHOD' ||| _STR:0_
example# 1860
get the value under the _STR:0_ key of environ dictionary , if the key doesnt exist get the empty string ,
1
'CONTENT_TYPE' ||| _STR:0_
example# 1861
use it to call the cgi.parse_header [ cgi . parse_header ] method , assign the result to the _ and content_params respectively . if string _STR:0_ is contained in content_params ,
1
'charset' ||| _STR:0_
example# 1862
try ,
0
example# 1863
get the value under the _STR:0_ key of content_params dictionary , use it to call the codec.lookup [ codec . lookup ] method .
1
'charset' ||| _STR:0_
example# 1864
if exception LookupError is caught ,
0
example# 1865
do nothing .
0
example# 1866
if not ,
0
example# 1867
get the value under the _STR:0_ key of content_params dictionary , substitute it for self.encoding [ self . encoding ] .
1
'charset' ||| _STR:0_
example# 1868
self._post_parse_error [ self . _post_parse_error ] is boolean False .
0
example# 1869
try ,
0
example# 1870
convert value under the _STR:0_ key of the environ dictionary to an integer , substitute it for content_length .
1
'CONTENT_LENGTH' ||| _STR:0_
example# 1871
if exception ValueError or TypeError is caught ,
0
example# 1872
content_length is integer 0 .
0
example# 1873
self._stream [ self . _stream ] is a class instance of a LimitedStream class , initialized with self.environ [ self . environ ] dictionary value under the _STR:0_ key ,
1
'wsgi.input' ||| _STR:0_
example# 1874
and content_length . self._read_started [ self . _read_started ] is boolean False .
0
example# 1875
self.resolver_match [ self . resolver_match ] is None .
0
example# 1876
define the method _get_scheme with self class instance as argument .
0
example# 1877
return value under the _STR:0_ key of self.environ [ self . environ ] dictionary .
1
'wsgi.url_scheme' ||| _STR:0_
example# 1878
define the method _get_request with self class instance as argument .
0
example# 1879
call the warnings.warn [ warnings . warn ] method with string _STR:0_ ,
1
'`request.REQUEST` is deprecated, use `request.GET` or `request.POST` instead.' ||| _STR:0_
example# 1880
RemovedInDjango19Warning and integer 2 as arguments . if self does not have an _STR:0_ attribute ,
1
'_request' ||| _STR:0_
example# 1881
call the datastructures.MergeDict [ datastructures . MergeDict ] with self.POST [ self . POST ] and self.GET [ self . GET ] as arguments , assign the result to self._request [ self . _request ] .
0
example# 1882
return self._request [ self . _request ] .
0
example# 1883
decorator cached_property .
0
example# 1884
define method GET with self class instance as an argument .
0
example# 1885
call the get_bytes_from_wsgi function with self.environ [ self . environ ] , string _STR:0_ and empty string as arguments , substitute the return value for raw_query_string .
1
'QUERY_STRING' ||| _STR:0_
example# 1886
evaluate the http.QueryDict [ http . QueryDict ] method with raw_query_string and encoding set to self._encoding [ self . _encoding ] as arguments , return the result .
0
example# 1887
def _get_post method with self class instance as the argument .
0
example# 1888
if self does not has an _STR:0_ attribute .
1
'_post' ||| _STR:0_
example# 1889
call the self._load_post_and_files [ self . _load_post_and_files ] method .
0
example# 1890
return self._post [ self . _post ] .
0
example# 1891
define the _set_post method with self class instance and post as the arguments .
0
example# 1892
substitute post for self._post [ self . _post ] .
0
example# 1893
decorator cached_property .
0
example# 1894
define COOKIES method with self as the argument .
0
example# 1895
call get_str_from_wsgi function with self.environ [ self . environ ] , string _STR:0_ and empty string as arguments , substitute it for raw_cookie .
1
'HTTP_COOKIE' ||| _STR:0_
example# 1896
evaluate the function http.parse_cookie [ http . parse_cookie ] with raw_cookie as an argument , return the result .
0
example# 1897
define _get_files method with self class instance as the argument .
0
example# 1898
if self does not have _STR:0_ attribute ,
1
'_files' ||| _STR:0_
example# 1899
call the method self._load_post_and_files [ self . _load_post_and_files ] .
0
example# 1900
return self._files [ self . _files ] .
0
example# 1901
_get_post is a getter function and _set_post is a setter function for POST attribute of this class .
0
example# 1902
_get_files is getter function for FILES attribute of this class .
0
example# 1903
_get_request is getter function for REQUEST attribute of this class .
0
example# 1904
derive the WSGIHandler class from the base class base.BaseHandler [ base . BaseHandler ] .
0
example# 1905
evaluate function Lock ( ) assign the result to initLock .
0
example# 1906
substitute WSGIRequest for request_class .
0
example# 1907
define private method __call__ with self class instance , environ and start_response as the arguments .
0
example# 1908
if self._request_middleware [ self . _request_middleware ] is None ,
0
example# 1909
with self.initLock [ self . initLock ] ,
0
example# 1910
try ,
0
example# 1911
if self._request_middleware [ self . _request_middleware ] is None ,
0
example# 1912
call the self.load_middleware [ self . load_middleware ] method .
0
example# 1913
if exception is caught ,
0
example# 1914
self._request_middleware [ self . _request_middleware ] is None .
0
example# 1915
re raise an exception .
0
example# 1916
call the get_script_name function with environ as argument , use the result as an argument for call to the set_script_prefix function .
0
example# 1917
call the signals.request_started.send [ signals . request_started . send ] method with sender set to self.__class__ [ self . __class__ ] as argument .
0
example# 1918
try ,
0
example# 1919
call the self.request_class [ self . request_class ] method with environ as an argument , substitute the result for request .
0
example# 1920
if UnicodeDecodeError exception is caught ,
0
example# 1921
call the logger.warning [ logger . warning ] method with string _STR:0_ , exec_info set to sys.exec_info [ sys . exec_info ] ( ) and dictionary extra
1
'Bad Request (UnicodeDecodeError)' ||| _STR:0_
example# 1922
with one entry _STR:0_ is integer 400 , as arguments . call the http.HttpResponseBadRequest [ http . HttpResponseBadRequest ] function , assign the result to the response .
1
'status_code' ||| _STR:0_
example# 1923
if not ,
0
example# 1924
call the self.get_response [ self . get_response ] with request as the argument , substitute the result for response .
0
example# 1925
substitute self.__class__ [ self . __class__ ] for response._handler_class [ response . _handler_class ] .
0
example# 1926
replace ' % s ' in the string _STR:0_ with response.status_code [ response . status_code ] and response.reason_phrase [ response . reason_phrase ] , respectively , substitute it for status .
1
'%s %s' ||| _STR:0_
example# 1927
convert to k and v to strings for every k and v in return value of the response.item [ response . item ] method , response_headers is a list containing all the above iteration elements .
0
example# 1928
for every c in return value of the method response.cookies.values [ response . cookies . values ] ,
0
example# 1929
convert _STR:0_ to a string and convert the return value of method c.output [ c . output ] ( header=_STR:1_ ) call to a string ,
2
'' ||| _STR:1_
'Set-Cookie' ||| _STR:0_
example# 1930
format the previous in a tuple , append the tuple to the response_headers . call the start_response function with force_str ( status ) method return value and response_headers as arguments .
0
example# 1931
return response .
0
example# 1932
define the get_path_info function with environ as the argument .
0
example# 1933
call the function get_bytes_from_wsgi with environ , string _STR:0_ and character _STR:1_ as arguments , substitute the result for path_info .
2
'/' ||| _STR:1_
'PATH_INFO' ||| _STR:0_
example# 1934
return path_info.decode [ path_info . decode ] method return value called with UTF_8 as the argument .
0
example# 1935
define get_script_name function with environ as an argument .
0
example# 1936
if settings.FORCE_SCRIPT_NAME [ settings . FORCE_SCRIPT_NAME ] is not None ,
0
example# 1937
evaluate the force_text function with settings.FORCE_SCRIPT_NAME [ settings . FORCE_SCRIPT_NAME ] as argument , return the result .
0
example# 1938
call the get_bytes_from_wsgi function with environ , string _STR:0_ and empty strings as arguments , substitute the result for script_url .
1
'SCRIPT_URL' ||| _STR:0_
example# 1939
if script_url is false ,
0
example# 1940
call the get_bytes_from_wsgi function with environ , string _STR:0_ and empty strings as arguments , substitute the result for script_url .
1
'REDIRECT_URL' ||| _STR:0_
example# 1941
if script_url is true ,
0
example# 1942
call the get_bytes_from_wsgi function with environ , string _STR:0_ and empty strings as arguments , substitute the result for path_info .
1
'PATH_INFO' ||| _STR:0_
example# 1943
take all but the length of path_info last elements of script_url , substitute it for script_name .
0
example# 1944
if not ,
0
example# 1945
call the get_bytes_from_wsgi function with environ , string _STR:0_ and empty strings as arguments , substitute the result for script_name .
1
'SCRIPT_NAME' ||| _STR:0_
example# 1946
return scrip_name.decode [ scrip_name . decode ] method result called with UTF_8 as argument .
0
example# 1947
define the function get_bytes_from_wsgi with environ , key and default as arguments .
0
example# 1948
convert key and default to strings , get the value under the key string key of the environ dictionary , if it does not exists use the ,
0
example# 1949
default string value , substitute it for value . return value if six.PY2 [ six . PY2 ] is true , if not return value.encode [ value . encode ] ( ISO_8859_1 ) .
0
example# 1950
define the get_str_from_wsgi function with environ , key and default as arguments .
0
example# 1951
convert key and default to strings , get the value under the key string key of the environ dictionary , if it does not exists use the ,
0
example# 1952
default string value , substitute it for value . return value if six.PY2 [ six . PY2 ] is true , if not return value.encode [ value . encode ] ( ISO_8859_1 ) .decode ( UTF_8 ) .
0
example# 1953
from __future__ import unicode_literals into default name space .
0
example# 1954
from django.conf [ django . conf ] import settings into default name space .
0
example# 1955
from django.utils.module_loading [ django . utils . module_loading ] import import_string into default name space .
0
example# 1956
from django.core.mail.utils [ django . core . mail . utils ] import CachedDnsName and DNS_NAME into default name space .
0
example# 1957
from django.core.mail.message [ django . core . mail . message ] import EmailMessage , EmailMultiAlternatives , SafeMIMEText , SafeMIMEMultipart ,
0
example# 1958
DEFAULT_ATTACHMENT_MIME_TYPE , make_msgid , BadHeaderError and forbid_multi_line_headers into default name space . __all__ is a list of strings , _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ ,
5
'EmailMultiAlternatives' ||| _STR:3_
'EmailMessage' ||| _STR:2_
'CachedDnsName' ||| _STR:0_
'SafeMIMEText' ||| _STR:4_
'DNS_NAME' ||| _STR:1_
example# 1959
_STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ , _STR:5_ , _STR:6_ , _STR:7_ , _STR:8_ and _STR:9_ . define function get_connection with backend set to None , fail_silently set to boolean False and dictionary kwds as arguments .
10
'mail_managers' ||| _STR:9_
'get_connection' ||| _STR:5_
'SafeMIMEMultipart' ||| _STR:0_
'mail_admins' ||| _STR:8_
'send_mail' ||| _STR:6_
'forbid_multi_line_headers' ||| _STR:4_
'BadHeaderError' ||| _STR:3_
'make_msgid' ||| _STR:2_
'send_mass_mail' ||| _STR:7_
'DEFAULT_ATTACHMENT_MIME_TYPE' ||| _STR:1_
example# 1960
call the function import_string with backend if exists or settings.EMAIL_BACKEND [ settings . EMAIL_BACKEND ] if not , store the result into klass .
0
example# 1961
call the klass method with fail_silently set to fail_silently and dictionary arguments kwds as arguments , return the result .
0
example# 1962
define send_mail funtion with subject , message , from_email , recipient_list , fail_silently set to boolean False ,
0
example# 1963
if connection exists dont modify it , if not call get_connection function with username set to auth_user , password set to auth_password , fail_silently set to fail_silently as arguments , assign it to connection .
0
example# 1964
call the EmailMultiAlternatives function with , subject , message , from_email , recipient_list and connection set to connection , as arguments , assign the result to mail .
0
example# 1965
if html_message is True ,
0
example# 1966
call the mail.attach_alternative [ mail . attach_alternative ] method with html_message and string _STR:0_ as arguments .
1
'text/html' ||| _STR:0_
example# 1967
return the evaluated result of the mail.send [ mail . send ] method .
0
example# 1968
define the function send_mass_mail with , datatuple , fail_silently set to False , auth_user set to None , auth_password set to None ,
0
example# 1969
if connection exists dont change it , if not call the get_connection function with username set to auth_user ,
0
example# 1970
password set to auth_password , fail_silently set to fail_silently as arguments , assign the result to connection . call the EmailMessage function wit subject , message , sender , recipient and connection set to connection ,
0
example# 1971
for every subject , message , sender and recipient in datatuple , store the results in the messages list . return evaluated result of the method connection.send_messages [ connection . send_messages ] with messages as argument .
0
example# 1972
define the function mail_admins with subject , message , fails_silently set to boolean False , connection set to None ,
0
example# 1973
if settings.ADMINS [ settings . ADMINS ] is false ,
0
example# 1974
return nothing .
0
example# 1975
call the function EmailMultiAlternatives with settings.EMAIL_SUBJECT_PREFIX [ settings . EMAIL_SUBJECT_PREFIX ] and subject converted to strings and concatenated ,
0
example# 1976
message , settings.SERVER_EMAIL [ settings . SERVER_EMAIL ] , list of second elements of a for every a in settings.Managers [ settings . Managers ] and connection set to connection , as arguments , assign the result to mail . if html_message is true ,
0
example# 1977
call method mail.attach_alternative [ mail . attach_alternative ] as html_message and string _STR:0_ as arguments .
1
'text/hmtl' ||| _STR:0_
example# 1978
call the mail.send [ mail . send ] method with fail_silently=fail_silently as argument .
0
example# 1979
define the function mail_managers with subject , message , fails_silently set to boolean False , connection set to None ,
0
example# 1980
if settings.MANAGERS [ settings . MANAGERS ] does not exist ,
0
example# 1981
return nothing .
0
example# 1982
call the function EmailMultiAlternatives with settings.EMAIL_SUBJECT_PREFIX [ settings . EMAIL_SUBJECT_PREFIX ] and subject converted to strings and concatenated ,
0
example# 1983
message , settings.SERVER_EMAIL [ settings . SERVER_EMAIL ] , list of second elements of a for every a in settings.Managers [ settings . Managers ] and connection set to connection , as arguments , assign the result to mail . if html_message is true ,
0
example# 1984
call the mail.attach_alternative [ mail . attach_alternative ] method with html_message and string _STR:0_ as arguments .
1
'text/html' ||| _STR:0_
example# 1985
call the mail.send [ mail . send ] method with fail_silently set to fail_silently as argument .
0
example# 1986
derive the class BaseEmailBackend from the object base class .
0
example# 1987
define the method __init__ with arguments : self , fail_silently set to boolean False and unpacked dictionary kwargs .
0
example# 1988
substitute fail_silently for self.fail_silently [ self . fail_silently ] .
0
example# 1989
define the method open with argument self .
0
example# 1990
do nothing .
0
example# 1991
define the method close with argument self .
0
example# 1992
do nothing
0
example# 1993
define the method __enter__ with argument self .
0
example# 1994
call the method self.open [ self . open ] .
0
example# 1995
return self .
0
example# 1996
define the method __exit__ with arguments : self , exc_type , exc_value and traceback .
0
example# 1997
call the method self.close [ self . close ] .
0
example# 1998
define the method send_messages with arguments self and email_messages .
0
example# 1999
raise an NotImplementedError exception with argument string _STR:0_ .
1
'subclasses of BaseEmailBackend must override send_messages() method' ||| _STR:0_
example# 2000
import module sys .
0
example# 2001
import module threading .
0
example# 2002
from django.core.mail.backends.base [ django . core . mail . backends . base ] import BaseEmailBackend into default name space .
0
example# 2003
from django.utils [ django . utils ] import six into default name space .
0
example# 2004
derive the class EmailBackend from the BaseEmailBackend base class .
0
example# 2005
define the __init__ method with arguments : self , unpacked list args and unpacked dictionary kwargs .
0
example# 2006
pop the value under the _STR:0_ key of the kwargs dictionary , if it exists replace it for self.stream [ self . stream ] , if not replace sys.stdout [ sys . stdout ] for self.stream [ self . stream ] .
1
'stream' ||| _STR:0_
example# 2007
call the method threading.RLock [ threading . RLock ] , substitute the result for self._lock [ self . _lock ] .
0
example# 2008
call the __init__ method from the base class of the EmailBackend class , with arguments : unpacked list args and unpacked dictionary kwargs .
0
example# 2009
define the method write_message with arguments self and message .
0
example# 2010
call the method message.message [ message . message ] , substitute the result for msg .
0
example# 2011
call the method msg.as_bytes [ msg . as_bytes ] , substitute the result for msg_data .
0
example# 2012
if six.PY3 [ six . PY3 ] is boolean True ,
0
example# 2013
if method msg.get_charset [ msg . get_charset ] evaluates to true , call the get_output_charset method on the return value of the msg.get_charset [ msg . get_charset ] method , substitute the result for charset , otherwise if it is false , substitute the string _STR:0_ for charset .
1
'utf-8' ||| _STR:0_
example# 2014
call the method msg_data.decode [ msg_data . decode ] with argument charset , substitute the result for msg_data .
0
example# 2015
call the method self.stream.write [ self . stream . write ] with argument string _STR:0_ , with ' % s ' replaced with msg_data .
1
'%s\n' ||| _STR:0_
example# 2016
write 79 _STR:0_ characters into self.stream [ self . stream ] file stream .
1
'-' ||| _STR:0_
example# 2017
write a newline into a self.stream [ self . stream ] file stream .
0
example# 2018
define the method send_messages with arguments self and email_messages .
0
example# 2019
if email_messages is false ,
0
example# 2020
return .
0
example# 2021
msg_count is an integer 0 .
0
example# 2022
call the method self._lock [ self . _lock ] , with the result ,
0
example# 2023
try ,
0
example# 2024
call the method self.open [ self . open ] , substitute the result for stream_created .
0
example# 2025
for every message in email_messages ,
0
example# 2026
call the method self.write_message [ self . write_message ] with argument message .
0
example# 2027
call the method self.stream.flush [ self . stream . flush ] .
0
example# 2028
increment msg_count by one .
0
example# 2029
if stream_created is true ,
0
example# 2030
call the method self.close [ self . close ] .
0
example# 2031
if Exception exception is caught ,
0
example# 2032
if self.fail_silently [ self . fail_silently ] is boolean False ,
0
example# 2033
raise an exception .
0
example# 2034
return msg_count .
0
example# 2035
from django.core.mail.backends.base [ django . core . mail . backends . base ] import BaseEmailBackend into default name space .
0
example# 2036
derive the class EmailBackend from the BaseEmailBackend base class .
0
example# 2037
define the method send_messages with arguments self and email_messages .
0
example# 2038
create list out of email_messages , return the length of the list .
0
example# 2039
import module datetime .
0
example# 2040
import module os .
0
example# 2041
from django.conf [ django . conf ] import settings into default name space .
0
example# 2042
from django.core.exceptions [ django . core . exceptions ] import ImproperlyConfigured into default name space .
0
example# 2043
from django.core.mail.backends.console [ django . core . mail . backends . console ] import EmailBackend as ConsoleEmailBackend into default name space .
0
example# 2044
from django.utils [ django . utils ] import six into default name space .
0
example# 2045
derive the class EmailBackend from the ConsoleEmailBackend base class .
0
example# 2046
define the __init__ method with arguments : self , unpacked list args and unpacked dictionary kwargs .
0
example# 2047
self._fname [ self . _fname ] is None .
0
example# 2048
if _STR:0_ is contained in kwargs ,
1
'file_path' ||| _STR:0_
example# 2049
pop the value under the _STR:0_ key of kwargs dictionary , substitute it for self.file_path [ self . file_path ] .
1
'file_path' ||| _STR:0_
example# 2050
if not ,
0
example# 2051
get _STR:0_ from the settings , if it exists , substitute it for self.file_path [ self . file_path ] , if not substitute None for self.file_path [ self . file_path ] .
1
'EMAIL_FILE_PATH' ||| _STR:0_
example# 2052
if self.file_path [ self . file_path ] is not an instance of six.string_types [ six . string_types ] ,
0
example# 2053
raise an ImproperlyConfigured exception with argument string _STR:0_ , replace _STR:1_ with self.file_path [ self . file_path ] .
2
'Path for saving emails is invalid: %r' ||| _STR:0_
'%r' ||| _STR:1_
example# 2054
call the os.path.abspath [ os . path . abspath ] with argument self.file_path [ self . file_path ] , substitute the result for self.file_path [ self . file_path ] .
0
example# 2055
if self.file_path [ self . file_path ] file path exists and it is not a directory ,
0
example# 2056
raise an ImproperlyConfigured exception with argument string _STR:0_ , replace ' % s ' with self.file_path [ self . file_path ] .
1
'Path for saving email messages exists, but is not a directory: %s' ||| _STR:0_
example# 2057
otherwise if self.file_path [ self . file_path ] file path doesnt exists ,
0
example# 2058
try ,
0
example# 2059
call the os.makedirs [ os . makedirs ] with argument self.file_path [ self . file_path ] .
0
example# 2060
if OSError , renamed to err , is caught ,
0
example# 2061
raise an ImproperlyConfigured exception with argument string _STR:0_ ,
1
'Could not create directory for saving email messages: %s (%s)' ||| _STR:0_
example# 2062
replace ' % s ' with self.file_path [ self . file_path ] and err , respectively . if self.file_path [ self . file_path ] file is not writable ,
0
example# 2063
raise an ImproperlyConfigured exception with argument string _STR:0_ , replace ' % s ' with self.file_path [ self . file_path ] .
1
'Could not write to directory: %s' ||| _STR:0_
example# 2064
set value under the _STR:0_ key of kwargs dictionary to None .
1
'stream' ||| _STR:0_
example# 2065
call the __init__ method of the base class of the EmailBackend class with arguments : unpacked list args and unpacked dictionary kwargs .
0
example# 2066
define the method write_message with arguments self and message .
0
example# 2067
call the as_bytes method on the return value of the message.message [ message . message ] method append to it _STR:0_ character , use it as the argument for the call to the self.stream.write [ self . stream . write ] method .
1
'\n' ||| _STR:0_
example# 2068
write 79 _STR:0_ characters into self.stream [ self . stream ] file stream .
1
'-' ||| _STR:0_
example# 2069
write a newline character into self.stream [ self . stream ] file stream .
0
example# 2070
define the method _get_filename with argument self .
0
example# 2071
if self._fname [ self . _fname ] is None :
0
example# 2072
call the strftime function with argument string _STR:0_ on the return value of the function datetime.datetime.now [ datetime . datetime . now ] , substitute the result for timestamp .
1
"%Y%m%d-%H%M%S" ||| _STR:0_
example# 2073
fname is a string _STR:0_ , with ' % s ' replaced by timestamp and absolute value of the return value of the function id with argument self , respectively .
1
"%s-%s.log" ||| _STR:0_
example# 2074
join self.file_path [ self . file_path ] and fname into a valid file path , substitute it for self._fname [ self . _fname ] .
0
example# 2075
return self._fname [ self . _fname ] .
0
example# 2076
define the method open with argument self .
0
example# 2077
if self.stream [ self . stream ] is None :
0
example# 2078
open the file in mode _STR:0_ and with file name obtained by calling the self._get_filename [ self . _get_filename ] method .
1
'ab' ||| _STR:0_
example# 2079
return boolean True .
0
example# 2080
return boolean True .
0
example# 2081
define the method close with argument self .
0
example# 2082
try ,
0
example# 2083
if self.stream [ self . stream ] is not None ,
0
example# 2084
call the self.stream.close [ self . stream . close ] function .
0
example# 2085
finally perform ,
0
example# 2086
self.stream [ self . stream ] is None .
0
example# 2087
from django.core [ django . core ] import mail into default name space .
0
example# 2088
from django.core.mail.backends.base [ django . core . mail . backends . base ] import BaseEmailBackend into default name space .
0
example# 2089
derive the class EmailBackend from the BaseEmailBackend base class .
0
example# 2090
define the method __init__ with arguments : self , unpacked list args and unpacked dictionary kwargs .
0
example# 2091
call the method __init__ from the base class of EmailBackend class , with arguments : unpacked list args and unpacked dictionary kwargs .
0
example# 2092
if mail doesnt have an _STR:0_ attribute ,
1
'outbox' ||| _STR:0_
example# 2093
mail.outbox [ mail . outbox ] is an empty list .
0
example# 2094
define the method send_messages with arguments self and messages .
0
example# 2095
msg_count is integer 0 .
0
example# 2096
for every message in messages ,
0
example# 2097
call the method message.message [ message . message ] .
0
example# 2098
increment mes_count by one .
0
example# 2099
call the method mail.outbox.extend [ mail . outbox . extend ] with messages .
0
example# 2100
return msg_count .
0
example# 2101
import module smtplib .
0
example# 2102
import module ssl .
0
example# 2103
import module threading .
0
example# 2104
from django.conf [ django . conf ] import settings into default name space .
0
example# 2105
from django.core.mail.backends.base [ django . core . mail . backends . base ] import BaseEmailBackend into default name space .
0
example# 2106
from django.core.mail.utils [ django . core . mail . utils ] import DNS_NAME into default name space .
0
example# 2107
from django.core.mail.message [ django . core . mail . message ] import sanitize_address into default name space .
0
example# 2108
derive the class EmailBackend from the BaseEmailBackend base class .
0
example# 2109
define the method __init__ with arguments : self , host set to None , port set to None , username set to None , password set to None ,
0
example# 2110
use_tls set to None , fail_silently set to False , use_ssl set to None , timeout set to None and unpacked dictionary kwargs . call the __init__ method from the base class of the EmailBackend class with argument fail_silently set to fail_silently .
0
example# 2111
if host exists substitute it for self.host [ self . host ] , if not substitute settings.EMAIL_HOST [ settings . EMAIL_HOST ] for self.host [ self . host ] .
0
example# 2112
if port exists substitute it for self.host [ self . host ] , if not substitute settings.EMAIL_PORT [ settings . EMAIL_PORT ] for self.port [ self . port ] .
0
example# 2113
if username is None substitute settings.EMAIL_HOST_USER [ settings . EMAIL_HOST_USER ] for self.username [ self . username ] , if not substitute username for self.username [ self . username ] .
0
example# 2114
if password is None substitute settings.EMAIL_HOST_PASSWORD [ settings . EMAIL_HOST_PASSWORD ] for self.username [ self . username ] , if not substitute password for self.password [ self . password ] .
0
example# 2115
if use_tls is None substitute settings.EMAIL_USE_TLS [ settings . EMAIL_USE_TLS ] for self.username [ self . username ] , if not substitute use_tls for self.use_tls [ self . use_tls ] .
0
example# 2116
if use_ssl is None substitute settings.EMAIL_USE_SSL [ settings . EMAIL_USE_SSL ] for self.username [ self . username ] , if not substitute use_ssl for self.use_ssl [ self . use_ssl ] .
0
example# 2117
substitute timeout for self.timeout [ self . timeout ] .
0
example# 2118
if self.use_ssl [ self . use_ssl ] and self.use_tls [ self . use_tls ] are boolean True ,
0
example# 2119
raise an ValueError exception with argument string _STR:0_ .
1
"EMAIL_USE_TLS/EMAIL_USE_SSL are mutually exclusive, so only set one of those settings to True." ||| _STR:0_
example# 2120
self.connection [ self . connection ] is None .
0
example# 2121
call the method threading.RLock [ threading . RLock ] , substitute the result for self._lock [ self . _lock ] .
0
example# 2122
define the method open with argument self .
0
example# 2123
if self.connection [ self . connection ] is true ,
0
example# 2124
return boolean False ,
0
example# 2125
substitute smtplib.SMTP_SSL [ smtplib . SMTP_SSL ] for connection_class if self.use_ssl [ self . use_ssl ] is true , if not substitute smtplib.SMTP [ smtplib . SMTP ] for connection_class .
0
example# 2126
connection_params is a dictionary with 1 initial entry : return value of the function DNS_NAME.get_fqdn [ DNS_NAME . get_fqdn ] for _STR:0_ .
1
'local_hostname' ||| _STR:0_
example# 2127
if self.timeout [ self . timeout ] is not None ,
0
example# 2128
set value under the _STR:0_ key of the connection_params to self.timeout [ self . timeout ] .
1
'timeout' ||| _STR:0_
example# 2129
try ,
0
example# 2130
self.connection [ self . connection ] is a instance of a class contained in connection_class , instantiated with arguments : self.host [ self . host ] , self.port [ self . port ] ,
0
example# 2131
and unpacked dictionary connection_params . if self.use_ssl [ self . use_ssl ] and self.use_tls [ self . use_tls ] are false ,
0
example# 2132
call the method self.connection.ehlo [ self . connection . ehlo ] .
0
example# 2133
call the method self.connection.starttls [ self . connection . starttls ] .
0
example# 2134
call the method self.connection.ehlo [ self . connection . ehlo ] .
0
example# 2135
if self.username [ self . username ] and self.password [ self . password ] are true ,
0
example# 2136
call the method self.connection.login [ self . connection . login ] with arguments self.username [ self . username ] and self.password [ self . password ] .
0
example# 2137
return boolean True .
0
example# 2138
if smtplib.SMTPException [ smtplib . SMTPException ] exception is caught ,
0
example# 2139
if self.fail_silently [ self . fail_silently ] is boolean False ,
0
example# 2140
raise an exception .
0
example# 2141
define the method close with argument self .
0
example# 2142
if self.connection [ self . connection ] is None ,
0
example# 2143
return nothing .
0
example# 2144
try ,
0
example# 2145
try ,
0
example# 2146
call the method self.connection.quit [ self . connection . quit ] .
0
example# 2147
if ssl.SSLError [ ssl . SSLError ] or smtplib.SMTPServerDisconnected [ smtplib . SMTPServerDisconnected ] exception occurred ,
0
example# 2148
call the method self.connection.close [ self . connection . close ] .
0
example# 2149
if smtplib.SMTPException [ smtplib . SMTPException ] exception is caught ,
0
example# 2150
if self.fail_silently [ self . fail_silently ] is boolean True ,
0
example# 2151
return nothing .
0
example# 2152
raise an exception .
0
example# 2153
finally perform ,
0
example# 2154
self.connection [ self . connection ] is None .
0
example# 2155
define the method send_messages with arguments self and email_message .
0
example# 2156
if email_messages is false ,
0
example# 2157
return nothing .
0
example# 2158
call the method self._lock [ self . _lock ] , with the return value ,
0
example# 2159
call the method self.open [ self . open ] , substitute the result for the new_conn_created .
0
example# 2160
if self.connection [ self . connection ] is false ,
0
example# 2161
return nothing .
0
example# 2162
num_sent is an integer 0 .
0
example# 2163
for every message in email_messages :
0
example# 2164
call the method self._send [ self . _send ] with argument message , substitute the result for sent .
0
example# 2165
if sent is true ,
0
example# 2166
increment num_sent by one .
0
example# 2167
if new_conn_created is true ,
0
example# 2168
call the self.close [ self . close ] method .
0
example# 2169
return num_sent .
0
example# 2170
define the method _send with arguments self and email_message .
0
example# 2171
call the email_message.recipients [ email_message . recipients ] method , if it evaluates to false ,
0
example# 2172
return boolean False .
0
example# 2173
call the function sanitize_address with arguments email_message.from_email [ email_message . from_email ] and email_message.encoding [ email_message . encoding ] , substitute the result for from_email .
0
example# 2174
call the function sanitize_address with arguments addr and email_message.encoding [ email_message . encoding ] , for every addr in return value of the function email_message.recipients [ email_message . recipients ] , store the results in a recipients list .
0
example# 2175
call the function email_message.message [ email_message . message ] , substitute the result for message .
0
example# 2176
try ,
0
example# 2177
call the method self.connection.sendmail [ self . connection . sendmail ] with arguments : from_email , recipients and return value of the function message.as_bytes [ message . as_bytes ] .
0
example# 2178
if smtplib.SMTPException [ smtplib . SMTPException ] exception is caught ,
0
example# 2179
if self.fail_silently [ self . fail_silently ] is false ,
0
example# 2180
raise an exception .
0
example# 2181
return boolean False .
0
example# 2182
return boolean True .
0
example# 2183
from __future__ import unicode_literals into default name space .
0
example# 2184
import module mimetypes .
0
example# 2185
import module os .
0
example# 2186
import module random .
0
example# 2187
import module sys .
0
example# 2188
import module time .
0
example# 2189
from email import charset as Charset , encoders as Encoders , message_from_string and generator .
0
example# 2190
from email.message [ email . message ] import Message into default name space .
0
example# 2191
from email.mime.text [ email . mime . text ] import MIMEText into default name space .
0
example# 2192
from email.mime.multipart [ email . mime . multipart ] import MIMEMultipart into default name space .
0
example# 2193
from email.mime.base [ email . mime . base ] import MIMEBase into default name space .
0
example# 2194
from email.mime.message [ email . mime . message ] import MIMEMessage into default name space .
0
example# 2195
from email.header [ email . header ] import Header into default name space .
0
example# 2196
from email.utils [ email . utils ] import formatdate , getaddresses , formataddr and parseaddr into default name space .
0
example# 2197
from django.conf [ django . conf ] import settings into default name space .
0
example# 2198
from django.core.mail.utils [ django . core . mail . utils ] import DNS_NAME into default name space .
0
example# 2199
from django.utils.encoding [ django . utils . encoding ] import force_text into default name space .
0
example# 2200
from django.utils [ django . utils ] import six into default name space .
0
example# 2201
call the function Charset.Charset [ Charset . Charset ] with argument string _STR:0_ , substitute the result for utf8_charset .
1
'utf-8' ||| _STR:0_
example# 2202
utf8_charset.body_encoding [ utf8_charset . body_encoding ] is None .
0
example# 2203
DEFAULT_ATTACHMENT_MIME_TYPE is a string _STR:0_ .
1
'application/octet-stream' ||| _STR:0_
example# 2204
derive the class BadHeaderError from the ValueError base class .
0
example# 2205
do nothing .
0
example# 2206
define the function make_msgid with argument idstring set to None .
0
example# 2207
call the function time.time [ time . time ] , substitute the result for timeval .
0
example# 2208
call the function time.gmtime [ time . gmtime ] with argument timeval , use string _STR:0_ and the previous result as an argument for the call to the time.strftime [ time . strftime ] function , substitute the result for utcdate .
1
'%Y%m%d%H%M%S' ||| _STR:0_
example# 2209
try ,
0
example# 2210
call the function os.getpid [ os . getpid ] , substitute it for pid .
0
example# 2211
if AttributeError exception is caught ,
0
example# 2212
pid is integer 1 .
0
example# 2213
call the function random.randrange [ random . randrange ] with argument integer 100000 , substitute the result for randint .
0
example# 2214
if idstring is None ,
0
example# 2215
idstring is an empty string .
0
example# 2216
if not ,
0
example# 2217
append idstring to the _STR:0_ character , substitute it for idstring .
1
'.' ||| _STR:0_
example# 2218
substitute DNS_NAME for idhost .
0
example# 2219
msgid is a string _STR:0_ , replace ' % s ' with utcdate , pid , randint , idstring and idhost , respectively .
1
'<%s.%s.%s%s@%s>' ||| _STR:0_
example# 2220
return msgid .
0
example# 2221
ADDRESS_HEADERS is a set containing strings : _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ , _STR:5_ , _STR:6_ , _STR:7_ ,
8
'cc' ||| _STR:4_
'resent-sender' ||| _STR:7_
'resent-from' ||| _STR:6_
'to' ||| _STR:3_
'sender' ||| _STR:1_
'reply-to' ||| _STR:2_
'bcc' ||| _STR:5_
'from' ||| _STR:0_
example# 2222
_STR:0_ , _STR:1_ and _STR:2_ . define the function forbid_multi_line_headers with arguments : name , val and encoding .
3
'resent-bcc' ||| _STR:2_
'resent-cc' ||| _STR:1_
'resent-to' ||| _STR:0_
example# 2223
if encoding does not exists substitute it for settings.DEFAULT_CHARSET [ settings . DEFAULT_CHARSET ] .
0
example# 2224
call the function force_text with argument val , substitute it for val .
0
example# 2225
if characters _STR:0_ or _STR:1_ are contained in val ,
2
'\r' ||| _STR:1_
'\n' ||| _STR:0_
example# 2226
raise an BadHeaderError exception with argument string _STR:0_ ,
1
"Header values can't contain newlines (got %r for header %r)" ||| _STR:0_
example# 2227
where _STR:0_ are replaced by val and name , respectively . try ,
1
'%r' ||| _STR:0_
example# 2228
call the method val.encode [ val . encode ] with argument string _STR:0_ .
1
'ascii' ||| _STR:0_
example# 2229
if UnicodeEncodeError exception is caught ,
0
example# 2230
convert name to lower case , if it is contained in ADDRESS_HEADERS , s
0
example# 2231
call the function sanitize_address with arguments addr and encoding , for every addr in return value of the getadresses function with tuple containing val as argument , join all the results into a string separated by _STR:0_ , substitute the result for val .
1
', ' ||| _STR:0_
example# 2232
if not ,
0
example# 2233
call the encode function on the Header class instance , created with arguments val and encoding , substitute the result for val .
0
example# 2234
if not ,
0
example# 2235
if name converted to lower case equals to string _STR:0_ ,
1
'subject' ||| _STR:0_
example# 2236
call the encode function on the Header class instance , created with argument val , substitute the result for val .
0
example# 2237
return name converted to a string and val .
0
example# 2238
define the function sanitize_address with arguments addr and encoding .
0
example# 2239
if addr is a instance of six.string_types [ six . string_types ] ,
0
example# 2240
call the parseaddr function with return value of the force_text with argument addr , as argument , substitute the result for addr .
0
example# 2241
nm and addr are addr .
0
example# 2242
try ,
0
example# 2243
call the encode function on the Header class instance , created with arguments nm and encoding , substitute the result for nm .
0
example# 2244
if UnicodeEncodeError exception is caught ,
0
example# 2245
call the encode function on the Header class instance , created with arguments nm and string _STR:0_ , substitute the result for nm .
1
'utf-8' ||| _STR:0_
example# 2246
try ,
0
example# 2247
call the addr.encode [ addr . encode ] method with string _STR:0_ as an argument .
1
'ascii' ||| _STR:0_
example# 2248
if UnicodeEncodeError exception is caught ,
0
example# 2249
if character _STR:0_ is contained in addr ,
1
'@' ||| _STR:0_
example# 2250
call the addr.split [ addr . split ] method with character _STR:0_ and integer 1 as arguments , substitute the result for localpart and domain , respectively .
1
'@' ||| _STR:0_
example# 2251
instantiate Header class with localpart and encoding , convert it to a string , substitute the result for localpart .
0
example# 2252
call the decode function with argument string _STR:0_ on the return value of the method domain.encode [ domain . encode ] with argument string _STR:1_ substitute the result for domain .
2
'ascii' ||| _STR:0_
'idna' ||| _STR:1_
example# 2253
join localpart and domain in a string separated by _STR:0_ character , substitute it for addr .
1
'@' ||| _STR:0_
example# 2254
if not ,
0
example# 2255
call the encode function on the Header class instance , created with arguments addr and encoding , substitute the result for addr .
0
example# 2256
call the formataddr function with argument tuple containing 2 elements nm and addr .
0
example# 2257
derive the class MIMEMixin .
0
example# 2258
define the method as_string with arguments self and unixfrom set to boolean False .
0
example# 2259
fp is a instance of a class six.StringIO [ six . StringIO ] .
0
example# 2260
g is an instance of a class generator.Generator [ generator . Generator ] called with fp and mangle_from_ set to False .
0
example# 2261
call the method g.flatten [ g . flatten ] with arguments self and unixfrom set to unixfrom .
0
example# 2262
call the method fp.getvalue [ fp . getvalue ] , return the result .
0
example# 2263
if six.PY2 [ six . PY2 ] is boolean True ,
0
example# 2264
substitute as_string for as_bytes .
0
example# 2265
if not ,
0
example# 2266
define the method as_bytes with arguments self and unixfrom set to boolean False .
0
example# 2267
fp is a instance of a class six.BytesIO [ six . BytesIO ] .
0
example# 2268
g is an instance of a class generator.BytesGenerator [ generator . BytesGenerator ] called with fp and mangle_from_ set to False .
0
example# 2269
call the method g.flatten [ g . flatten ] with arguments self and unixfrom set to unixfrom .
0
example# 2270
call the method fp.getvalue [ fp . getvalue ] , return the result .
0
example# 2271
derive the class SafeMIMEMessage from the MIMEMixin and MIMEMessage base class .
0
example# 2272
define the method __setitem__ with arguments self , name and val .
0
example# 2273
call the function forbid_multi_line_headers with 3 arguments : name , val and string _STR:0_ , substitute the result for name and val , respectively .
1
'ascii' ||| _STR:0_
example# 2274
call the method MIMEMessage.__setitem__ [ MIMEMessage . __setitem__ ] with arguments self , name and val .
0
example# 2275
derive the class SafeMIMEText from the MIMEMixin and MIMEText base class .
0
example# 2276
define the __init__ method with arguments : self , text , subtype and charset .
0
example# 2277
substitute charset for self.encoding [ self . encoding ] .
0
example# 2278
if charset equals to string _STR:0_ ,
1
'utf-8' ||| _STR:0_
example# 2279
call the method MIMEText.__init__ [ MIMEText . __init__ ] with 4 arguments : self , text , subtype and None .
0
example# 2280
delete the value under the _STR:0_ key of self dictionary .
1
'Content-Transfer-Encoding' ||| _STR:0_
example# 2281
if integers 3 and 2 in a tuple are smaller than the sys.version_info [ sys . version_info ] and sys.version_info [ sys . version_info ] is smaller than integers 3,4 and 4 in a tuple , respectively ,
0
example# 2282
call the method text.encode [ text . encode ] with argument utf8_charset.output_charset [ utf8_charset . output_charset ] , substitute the result for payload .
0
example# 2283
call the method payload.decode [ payload . decode ] with 2 arguments : string _STR:0_ and string _STR:1_ , substitute the result for self._payload [ self . _payload ] .
2
'ascii' ||| _STR:0_
'surrogateescape' ||| _STR:1_
example# 2284
call the method self.set_charset [ self . set_charset ] with utf8_charset as an argument .
0
example# 2285
if not ,
0
example# 2286
call the method payload.decode [ payload . decode ] with 2 arguments : text and utf8_charset , substitute the result for self._payload [ self . _payload ] .
0
example# 2287
call the method self.replace_header [ self . replace_header ] with argument string _STR:0_ , _STR:1_ , where ' % s ' symbols are replaced by :
2
'text/%s; charset="%s"' ||| _STR:1_
'Content-Type' ||| _STR:0_
example# 2288
subtype and charset , respectively . if not ,
0
example# 2289
call the method MIMEText.__init__ [ MIMEText . __init__ ] with 4 arguments : self , text , subtype and charset .
0
example# 2290
define the method __setitem__ with arguments self , name and val .
0
example# 2291
call the function forbid_multi_line_headers with 3 arguments : name , val and self.encoding [ self . encoding ] , substitute the result for name and val , respectively .
0
example# 2292
call the method MIMEText.__setitem__ [ MIMEText . __setitem__ ] with arguments self , name and val .
0
example# 2293
derive the class SafeMIMEMultipart from the MIMEMixin and MIMEMultipart base class .
0
example# 2294
define the method __init__ with 6 arguments : self , _subtype set to string _STR:0_ , boundary set to None , _subparts set to None ,
1
'mixed' ||| _STR:0_
example# 2295
encoding set to None and unpacked dictionary _params . substitute encoding for self.encoding [ self . encoding ] .
0
example# 2296
call the method MIMEMultipart.__init__ [ MIMEMultipart . __init__ ] with 5 arguments : self , _subtype , boundary , _subparts and unpacked dictionary _params .
0
example# 2297
define the method __setitem__ with arguments self , name and val .
0
example# 2298
call the function forbid_multi_line_headers with 3 arguments : name , val and self.encoding [ self . encoding ] , substitute the result for name and val , respectively .
0
example# 2299
call the method MIMEMultipart.__setitem__ [ MIMEMultipart . __setitem__ ] with arguments self , name and val .
0
example# 2300
derive the class EmailMessage from the object base class .
0
example# 2301
content_subtype is a string _STR:0_ .
1
'plain' ||| _STR:0_
example# 2302
mixed_subtype is a string _STR:0_ .
1
'mixed' ||| _STR:0_
example# 2303
encoding is None .
0
example# 2304
define the method __init__ with 10 arguments : self , subject set to an empty string , body set to an empty string ,
0
example# 2305
if to is true ,
0
example# 2306
if to is not an six.string_types [ six . string_types ] instance raise an error with message string _STR:0_ .
1
'"to" argument must be a list or tuple' ||| _STR:0_
example# 2307
put to into a list , assign it to self.to [ self . to ] .
0
example# 2308
if not ,
0
example# 2309
self.to [ self . to ] is an empty list .
0
example# 2310
if cc is true ,
0
example# 2311
if cc is not an six.string_types [ six . string_types ] instance raise an error with message string _STR:0_ .
1
'"cc" argument must be a list or tuple' ||| _STR:0_
example# 2312
put cc into a list , assign it to self.cc [ self . cc ] .
0
example# 2313
if not ,
0
example# 2314
self.cc [ self . cc ] is an empty list .
0
example# 2315
if bcc is true ,
0
example# 2316
if bcc is not an six.string_types [ six . string_types ] instance raise an error with message string _STR:0_ .
1
'"bcc" argument must be a list or tuple' ||| _STR:0_
example# 2317
put bcc into a list , assign it to self.bcc [ self . bcc ] .
0
example# 2318
if not ,
0
example# 2319
self.bcc [ self . bcc ] is an empty list .
0
example# 2320
if from_email exists substitute from_email for self.from_email [ self . from_email ] , if not substitute settings.DEFAULT_FROM_EMAIL [ settings . DEFAULT_FROM_EMAIL ] for self.from_email [ self . from_email ] .
0
example# 2321
substitute subject for self.subject [ self . subject ] .
0
example# 2322
substitute body for self.body [ self . body ] .
0
example# 2323
if attachments exists substitute it for self.attachments [ self . attachments ] , if not attachments is an empty list .
0
example# 2324
if headers exists substitute it for self.extra_headers [ self . extra_headers ] , if not extra_headers is an empty dictionary .
0
example# 2325
substitute connection for self.connection [ self . connection ] .
0
example# 2326
define the method get_connection with arguments self and fail_silently set to boolean False .
0
example# 2327
from django.core.mail [ django . core . mail ] import get_connection into default name space .
0
example# 2328
if self.connection [ self . connection ] is false ,
0
example# 2329
call the function get_connection with argument fail_silently set to fail_silently , substitute it for self.connection [ self . connection ] .
0
example# 2330
return self.connection [ self . connection ] .
0
example# 2331
define the method message with argument self .
0
example# 2332
if self.encoding [ self . encoding ] exists substitute it for encoding , if not substitute settings.DEFAULT_CHARSET [ settings . DEFAULT_CHARSET ] for encoding .
0
example# 2333
msg is a instance of a SafeMIMEText class created with arguments : self.body [ self . body ] , self.content_subtype [ self . content_subtype ] and encoding .
0
example# 2334
call the self._create_message [ self . _create_message ] method with argument msg , substitute it for msg .
0
example# 2335
substitute self.subject [ self . subject ] for value under the _STR:0_ key of msg dictionary .
1
'Subject' ||| _STR:0_
example# 2336
call the method self.extra_headers.get [ self . extra_headers . get ] with string _STR:0_ and self.from_email [ self . from_email ] as arguments , substitute the result for value under the _STR:0_ key of msg dictionary .
1
'From' ||| _STR:0_
example# 2337
call the method self.extra_headers.get [ self . extra_headers . get ] with arguments : string _STR:0_ and joined string from self.to [ self . to ] elements separated by _STR:1_ ,
2
', ' ||| _STR:1_
'To' ||| _STR:0_
example# 2338
substitute the result for value under the _STR:0_ key of msg dictionary . if self.cc [ self . cc ] is true ,
1
'To' ||| _STR:0_
example# 2339
join elements of self.cc [ self . cc ] into a string separated by _STR:0_ , substitute the result for value under the _STR:1_ key of msg dictionary .
2
'Cc' ||| _STR:1_
', ' ||| _STR:0_
example# 2340
call the key.lower [ key . lower ] method for every key in self.extra_headers [ self . extra_headers ] , join the results into a header_names .
0
example# 2341
if _STR:0_ is not in header_names ,
1
'date' ||| _STR:0_
example# 2342
call the formatdate function , substitute it for value under the _STR:0_ key of msg dictionary .
1
'Date' ||| _STR:0_
example# 2343
if message-id ' is not in header_names ,
0
example# 2344
call the make_msgid function , substitute it for value under the _STR:0_ key of msg dictionary .
1
'Message-ID' ||| _STR:0_
example# 2345
for every name and value in return value of the method self.extra_headers.items [ self . extra_headers . items ] ,
0
example# 2346
convert name to lower case if it equals to string _STR:0_ or 'to ,
1
'from' ||| _STR:0_
example# 2347
skip this loop execution ,
0
example# 2348
substitute value for value under name key of msg dictionary .
0
example# 2349
return msg .
0
example# 2350
define the method recipients with argument self .
0
example# 2351
add together self.to [ self . to ] , self.cc [ self . cc ] and self.bcc [ self . bcc ] , return the result .
0
example# 2352
define the method send with arguments self and fail_silently set to boolean False .
0
example# 2353
call the method self.recipients [ self . recipients ] , if it evaluates to false ,
0
example# 2354
return an integer 0 .
0
example# 2355
call the method self.get_connection [ self . get_connection ] with argument fail_silently , on the result call the method send_messages with one argument : list containing self , return the result .
0
example# 2356
define the method attach with 4 arguments : self , filename set to None , content set to None and mimetype set to None .
0
example# 2357
if filename is an instance of MIMEBase ,
0
example# 2358
if content is not None raise an error .
0
example# 2359
if mimetype is not None raise an error .
0
example# 2360
append filename to the self.attachments [ self . attachments ] list .
0
example# 2361
if not ,
0
example# 2362
if content is not None raise an error .
0
example# 2363
append a tuple containing 3 elements : filename , content , mimetype to self.attachments [ self . attachments ] list .
0
example# 2364
define the method attach_file with arguments self , path and mimetype set to None .
0
example# 2365
call the os.path.basename [ os . path . basename ] with path as argument , substitute the result for filename .
0
example# 2366
open file named path in _STR:0_ mode , with file descriptor as f ,
1
'rb' ||| _STR:0_
example# 2367
read the whole file f , substitute the result for content .
0
example# 2368
call the method self.attach [ self . attach ] with arguments filename , content and mimetype .
0
example# 2369
define the method _create_message with arguments self and msg .
0
example# 2370
call the method self._create_attachments [ self . _create_attachments ] with argument msg , return the result .
0
example# 2371
define the method _create_attachments with arguments self and msg .
0
example# 2372
if self.attachments [ self . attachments ] is true ,
0
example# 2373
if self.encoding [ self . encoding ] exists substitute it for encoding , if not substitute settings.DEFAULT_CHARSET [ settings . DEFAULT_CHARSET ] for encoding .
0
example# 2374
substitute msg for body_msg .
0
example# 2375
msg is an instance of a class SafeMIMEMultipart , created with arguments : _subtype set to self.mixed_subtype [ self . mixed_subtype ] and encoding set to encoding .
0
example# 2376
if self.body [ self . body ] is true ,
0
example# 2377
call the method msg.attach [ msg . attach ] with an argument body_msg .
0
example# 2378
for every attachment in self.attachments [ self . attachments ] ,
0
example# 2379
if attachment is an instance of MIMEBase ,
0
example# 2380
call the method msg.attach [ msg . attach ] with an argument attachment .
0
example# 2381
if not ,
0
example# 2382
call the method self._create_attachment [ self . _create_attachment ] with an unpacked list attachment as an argument , use the result as an argument for the call to the msg.attach [ msg . attach ] method .
0
example# 2383
return msg .
0
example# 2384
define the method _create_mime_attachment with arguments self , content and mimetype .
0
example# 2385
call the method mimetype.split [ mimetype . split ] with arguments : character _STR:0_ and integer 1 , substitute the result for basetype and subtype , respectively .
1
'/' ||| _STR:0_
example# 2386
if basetype equals a string _STR:0_ ,
1
'text' ||| _STR:0_
example# 2387
if self.encoding [ self . encoding ] exists substitute it for encoding , if not substitute settings.DEFAULT_CHARSET [ settings . DEFAULT_CHARSET ] for encoding .
0
example# 2388
attachment is an instance of a class SafeMIMEText , created with arguments : content , subtype and encoding .
0
example# 2389
otherwise if basetype equals a string _STR:0_ and subtype equals a string _STR:1_ ,
2
'rfc822' ||| _STR:1_
'message' ||| _STR:0_
example# 2390
if content is an instance of a EmailMessage class ,
0
example# 2391
call the method content.message [ content . message ] , substitute the result for content .
0
example# 2392
otherwise if content is not an instance of Message class ,
0
example# 2393
call the message_from_string function with an argument content , substitute the result for content .
0
example# 2394
attachment is an instance of a class SafeMIMEMessage , created with the arguments content and subtype .
0
example# 2395
if not ,
0
example# 2396
attachment is an instance of a class MIMEBase , created with the arguments basetype and subtype .
0
example# 2397
call the method attachment.set_payload [ attachment . set_payload ] with an argument content .
0
example# 2398
call the method Encoders.encode_base64 [ Encoders . encode_base64 ] with an argument attachment .
0
example# 2399
return attachment .
0
example# 2400
define the method _create_attachment with 4 arguments : self , filename , content and mimetype set to None .
0
example# 2401
if mimetype is None ,
0
example# 2402
call the mimetypes.guess_type [ mimetypes . guess_type ] with an argument filename , assign the result to the mimetype and _ , respectively .
0
example# 2403
if mimetype is None ,
0
example# 2404
substitute DEFAULT_ATTACHMENT_MIME_TYPE for mimetype .
0
example# 2405
call the method self._create_mime_attachment [ self . _create_mime_attachment ] with the arguments content and mimetype , substitute the result for attachment .
0
example# 2406
if filename is true ,
0
example# 2407
try ,
0
example# 2408
call the method filename.encode [ filename . encode ] with an argument string _STR:0_
1
'ascii' ||| _STR:0_
example# 2409
if UnicodeEncodeError exception is caught ,
0
example# 2410
if six.PY2 [ six . PY2 ] is true ,
0
example# 2411
call the method filename.encode [ filename . encode ] with an argument string _STR:0_ , substitute the result for filename .
1
'utf-8' ||| _STR:0_
example# 2412
filename is a tuple containing 3 initial elements : string _STR:0_ , and empty string and filename .
1
'utf-8' ||| _STR:0_
example# 2413
call the method attachment.add_header [ attachment . add_header ] with 3 arguments : string _STR:0_ , string _STR:1_ and filename set to filename .
2
'attachment' ||| _STR:1_
'Content-Disposition' ||| _STR:0_
example# 2414
return attachment .
0
example# 2415
derive the class EmailMultiAlternatives from the EmailMessage base class .
0
example# 2416
alternative_subtype is a string _STR:0_ .
1
'alternative' ||| _STR:0_
example# 2417
define the method __init__ with 11 arguments : self , subject set to an empty string , body set to an empty string ,
0
example# 2418
call the method __init__ from the base class of the EmailMultiAlternatives class , with 9 arguments : subject , body , from_email , to ,
0
example# 2419
bcc , connection , attachments , headers and cc . if alternatives exists substitute it for self.alternatives [ self . alternatives ] , if not self.alternatives [ self . alternatives ] is an empty list .
0
example# 2420
define the method attach_alternative with arguments self , content and mimetype .
0
example# 2421
if content is None , raise an error .
0
example# 2422
if mimetype is None , raise an error .
0
example# 2423
append a tuple containing 2 elements : content and mimetype , to the self.alternatives [ self . alternatives ] list .
0
example# 2424
define the method _create_message with arguments self and msg .
0
example# 2425
call the method self._create_alternatives [ self . _create_alternatives ] with an argument msg , use it as an argument for the call to the self._create_attachments [ self . _create_attachments ] method , return the result .
0
example# 2426
define the method _create_alternatives with arguments self and msg .
0
example# 2427
if self.encoding [ self . encoding ] exists substitute it for encoding , if not substitute settings.DEFAULT_CHARSET [ settings . DEFAULT_CHARSET ] for encoding .
0
example# 2428
if self.alternatives [ self . alternatives ] is true ,
0
example# 2429
substitute msg for body_msg .
0
example# 2430
msg is an instance of a class SafeMIMEMultipart , created with the arguments : _subtype set to self.alternative_subtype [ self . alternative_subtype ] and encoding set to encoding .
0
example# 2431
if self.body [ self . body ] is true ,
0
example# 2432
call the msg.attach [ msg . attach ] with an argument body_msg .
0
example# 2433
for every alternative in self.alternatives [ self . alternatives ] ,
0
example# 2434
call the method self._create_mime_attachment [ self . _create_mime_attachment ] with unpacked list alternative as an argument , use the result as an argument for the call to the msg.attach [ msg . attach ] method .
0
example# 2435
return msg .
0
example# 2436
import module socket .
0
example# 2437
derive class CachedDnsName from the object base class .
0
example# 2438
define the method __str__ with argument self .
0
example# 2439
evaluate the self.get_fqdn [ self . get_fqdn ] method , return the result .
0
example# 2440
define the method get_fqdn with argument self .
0
example# 2441
if self doesnt have an attribute _STR:0_ ,
1
'_fqdn' ||| _STR:0_
example# 2442
call the function socket.getfqdn [ socket . getfqdn ] , substitute the result for self._fqdn [ self . _fqdn ] .
0
example# 2443
return self._fqdn [ self . _fqdn ] .
0
example# 2444
DNS_NAME is a instance of CachedDnsName class .
0
example# 2445
from __future__ import unicode_literals into default name space .
0
example# 2446
import module collections .
0
example# 2447
from importlib import import_module into default name space .
0
example# 2448
import module os .
0
example# 2449
import module sys .
0
example# 2450
import module django .
0
example# 2451
from django.apps [ django . apps ] import apps into default name space .
0
example# 2452
from django.conf [ django . conf ] import settings into default name space .
0
example# 2453
from django.core.exceptions [ django . core . exceptions ] import ImproperlyConfigured into default name space .
0
example# 2454
from django.core.management.base [ django . core . management . base ] import BaseCommand , CommandError , CommandParser and handle_default_options into default name space .
0
example# 2455
from django.core.management.color [ django . core . management . color ] import color_style into default name space .
0
example# 2456
from django.utils [ django . utils ] import lru_cache into default name space .
0
example# 2457
from django.utils [ django . utils ] import six into default name space .
0
example# 2458
define the function find_commands with an argument management_dir .
0
example# 2459
join management_dir and string _STR:0_ into a file path name , substitute it for command_dir .
1
'commands' ||| _STR:0_
example# 2460
try ,
0
example# 2461
for every f in return value of the os.listdir [ os . listdir ] function called with an argument command_dir , append f without 3 last elements to a list , only if f doesnt start with character _STR:0_ and doesnt ends with string _STR:1_ , return the resulting list .
2
'_' ||| _STR:0_
'.py' ||| _STR:1_
example# 2462
if OSError exception is caught ,
0
example# 2463
return an empty list .
0
example# 2464
define the function load_command_class with arguments : app_name and name .
0
example# 2465
replace ' % s ' in string _STR:0_ with app_name and name , respectively , use it as an result for the call to the
1
'%s.management.commands.%s' ||| _STR:0_
example# 2466
import_module function , substitute the result for module . return an instance of the module.Command [ module . Command ] class .
0
example# 2467
decorator lru_cache.lru_cache [ lru_cache . lru_cache ] with an argument maxsize set to None .
0
example# 2468
define the function get_commands .
0
example# 2469
commands is an dictionary containing elements : string _STR:0_ for every name in the function find_commands return value , called with first element of __path__ as an argument .
1
'django.core' ||| _STR:0_
example# 2470
if settings.configured [ settings . configured ] is false ,
0
example# 2471
return commands .
0
example# 2472
for every app_config in reversed list created out of the return value of the function apps.get_app_configs [ apps . get_app_configs ] ,
0
example# 2473
join app_config.path [ app_config . path ] and string _STR:0_ into a file path , substitute it for path .
1
'management' ||| _STR:0_
example# 2474
call the method commands.update [ commands . update ] , with an argument dictionary containing entries : app_config_name for name , for every name in return value of the function find_commands , called with an argument path .
0
example# 2475
return commands .
0
example# 2476
define the function call_command with 3 arguments : name , unpacked list args and unpacked dictionary options .
0
example# 2477
try ,
0
example# 2478
call the function get_commands , substitute the value under the name key of the return value , for app_name .
0
example# 2479
if KeyError exception is caught ,
0
example# 2480
raise an CommandError exception with an argument string _STR:0_ , with _STR:1_ replaced by name .
2
"Unknown command: %r" ||| _STR:0_
'%r' ||| _STR:1_
example# 2481
if app_name is an instance of BaseCommand ,
0
example# 2482
substitute app_namefor command .
0
example# 2483
if not ,
0
example# 2484
call the function load_command_class with arguments : app_name and name , substitute the result for command .
0
example# 2485
all the method command.create_parser [ command . create_parser ] with arguments : empty and name , substitute the result for parser .
0
example# 2486
if command.use_argparse [ command . use_argparse ] is true ,
0
example# 2487
call the method parser.parse_args [ parser . parse_args ] with an argument args set to args , substitute the result for defaults .
0
example# 2488
create dictionary out of the unpacked dictionary options , using defaults._get_kwargs [ defaults . _get_kwargs ] as a mapping function , substitute the result for defaults .
0
example# 2489
if not ,
0
example# 2490
call the method parser.parse_args [ parser . parse_args ] with an arguments args set to an empty list , assign the result for defaults and _ , respectively .
0
example# 2491
create dictionary out of the unpacked dictionary options , using defaults.__dict__ [ defaults . __dict__ ] as a mapping function , substitute the result for defaults .
0
example# 2492
call the command.execute [ command . execute ] method with arguments : unpacked list args and unpacked dictionary defaults , return the result .
0
example# 2493
derive the class ManagementUtility from object base class .
0
example# 2494
define the method __init__ with arguments : self class instance and argv set to None .
0
example# 2495
if argv is true , substitue it for self.argv [ self . argv ] , if not substitute sys.argv [ sys . argv ] for self.argv [ self . argv ] .
0
example# 2496
call the function os.path.basename [ os . path . basename ] with first element of self.argv [ self . argv ] as an argument , substitute the result for self.prog_name [ self . prog_name ] .
0
example# 2497
self.settings_exception [ self . settings_exception ] is None .
0
example# 2498
define the method main_help_text with arguments : self class instance and commands_only set to boolean False .
0
example# 2499
if commands_only is true ,
0
example# 2500
call the function get_commands , call the method keys on the result , substitute sorted result for usage .
0
example# 2501
if not ,
0
example# 2502
usage is a list containing 4 entries : an empty string , string _STR:0_ ,
1
"Type '%s help <subcommand>' for help on a specific subcommand." ||| _STR:0_
example# 2503
where ' % s ' is replaced with self.prog_name [ self . prog_name ] , an empty string and string _STR:0_ . call the method collections.defaultdict [ collections . defaultdict ] with a argument : lambda function without arguments that returns an empty list ,
1
"Available subcommands:" ||| _STR:0_
example# 2504
substitute the result for commands_dict . for every name and app in return value of the function six.iteritems [ six . iteritems ] calle with return argument of function get_commands as an arugment ,
0
example# 2505
if app equals a string _STR:0_ ,
1
'django.core' ||| _STR:0_
example# 2506
app is a string _STR:0_
1
'django' ||| _STR:0_
example# 2507
if not ,
0
example# 2508
call the method app.rpartition [ app . rpartition ] with an argument _STR:0_ , substitute last element of the result for app .
1
'.' ||| _STR:0_
example# 2509
append name to the value of under the app key of the commands_dict .
0
example# 2510
call the color_style function , substitute the result for style .
0
example# 2511
for every app in sorted return value of the commands_dict.keys [ commands_dict . keys ] function ,
0
example# 2512
append an empty string to usage .
0
example# 2513
call the style.NOTICE [ style . NOTICE ] method with an argument string _STR:0_ , where ' % s ' is replaced with app , append the result to usage .
1
"[%s]" ||| _STR:0_
example# 2514
for every name in sorted value under the app key of the commands_dict dictionary ,
0
example# 2515
append string _STR:0_ , where ' % s ' is replaced by name to the usage .
1
"    %s" ||| _STR:0_
example# 2516
if self.settings_exception [ self . settings_exception ] is not None ,
0
example# 2517
call the method style.NOTICE [ style . NOTICE ] with an argument string _STR:0_ , where ' % s ' is replaced by self.settings_exception [ self . settings_exception ] , append the result to usage .
1
"Note that only Django core commands are listed as settings are not properly configured (error: %s)." ||| _STR:0_
example# 2518
join usage elements in a string separated by newline characters , return it .
0
example# 2519
define the method fetch_command , with arguments self and subcommand .
0
example# 2520
call the function get_commands , substitute it for commands .
0
example# 2521
try ,
0
example# 2522
substitute value under the subcommand key of the commands dictionary for app_name .
0
example# 2523
if KeyError exception is caught ,
0
example# 2524
call settings.INSTALLED_APPS [ settings . INSTALLED_APPS ] .
0
example# 2525
call the method sys.stderr.write [ sys . stderr . write ] with an argument string _STR:0_ ,
1
"Unknown command: %r\nType '%s help' for usage.\n" ||| _STR:0_
example# 2526
where _STR:0_ is replaced with subcommand and ' % s ' is replaced with self.prog_name [ self . prog_name ] . call the function sys.exit [ sys . exit ] with an argument integer 1 .
1
'%r' ||| _STR:0_
example# 2527
if app_name is an instance of BaseCommands .
0
example# 2528
substitute app_name for klass .
0
example# 2529
if not ,
0
example# 2530
call the function load_command_class with arguments app_name and subcommand , substitute the result for klass .
0
example# 2531
return klass .
0
example# 2532
define the method autocomplete with an argument self .
0
example# 2533
if string _STR:0_ is not contained in os.environ [ os . environ ] ,
1
'DJANGO_AUTO_COMPLETE' ||| _STR:0_
example# 2534
return nothing .
0
example# 2535
slit by whitespace the value under the _STR:0_ key of the os.environ [ os . environ ] dictionary , substitute the result without the first element for cwords .
1
'COMP_WORDS' ||| _STR:0_
example# 2536
convert to an integer value under the _STR:0_ key of the os.environ [ os . environ ] dictionary , substitute it for cword .
1
'COMP_CWORD' ||| _STR:0_
example# 2537
try ,
0
example# 2538
substitute cwords element at the cword decremented by 1 index for curr .
0
example# 2539
if IndexError exception is caugh ,
0
example# 2540
curr is an empty string .
0
example# 2541
call the function get_commands , convert the result to a list , append string _STR:0_ to it , substitute it for subcommands .
1
'help' ||| _STR:0_
example# 2542
options is a list containing a tuple with 2 entries : string _STR:0_ and None .
1
'--help' ||| _STR:0_
example# 2543
if cword equlals a integer 1 ,
0
example# 2544
filter all the subcommands element through the lambda function with an argument x , that evaluates the method x.startswith [ x . startswith ] ,
0
example# 2545
with an argument curr , sort the result and join it in a list separated with blank spaces , print it to the standard output . otherwise if first element of cwords is contanied in subcommands and is not equal to string _STR:0_ ,
1
'help' ||| _STR:0_
example# 2546
call the method self.fetch_command [ self . fetch_command ] with first element of cwords as an argument , substitute it for subcommand_cls .
0
example# 2547
if first element of cwords equals a string _STR:0_ ,
1
'runfcgi' ||| _STR:0_
example# 2548
from django.core.servers.fastcgi [ django . core . servers . fastcgi ] import FASTCGI_OPTIONS into default namespace ,
0
example# 2549
append tuple containing two entries : k and integer 1 to options , for every k in FASTCGI_OPTIONS .
0
example# 2550
otherwise if first element of cwords is contanied in tuple with 8 entries : _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ ,
5
'sqlclear' ||| _STR:3_
'sqlcustom' ||| _STR:4_
'dumpdata' ||| _STR:0_
'sql' ||| _STR:1_
'sqlall' ||| _STR:2_
example# 2551
try ,
0
example# 2552
call the method apps.get_app_configs [ apps . get_app_configs ] , substitute the result for app_configs .
0
example# 2553
append tuple containing two entries : app_config.label [ app_config . label ] and integer 0 to options , for every app_config in app_configs .
0
example# 2554
if ImportError exception is caught ,
0
example# 2555
do nothing .
0
example# 2556
call the method subcommand_cls.create_parser [ subcommand_cls . create_parser ] with 2 argument an empty string an first element of cwords , substitute it for parser .
0
example# 2557
if subcommand_cls.use_argparse [ subcommand_cls . use_argparse ] is true ,
0
example# 2558
append to options a tuple containing 2 entries : firs element of sorted list of the s_opt.option_strings [ s_opt . option_strings ] ,
0
example# 2559
and evaluated boolean expression s_opt.nargs [ s_opt . nargs ] doesnt equal to integer 0 , for every s_opt in parser._actions [ parser . _actions ] , only if s_opt.option_strings [ s_opt . option_strings ] is true , if not ,
0
example# 2560
append to options a tuple containing 2 entries : result of the method s_opt.get_opt_string [ s_opt . get_opt_string ] and s_opt.nargs [ s_opt . nargs ] ,
0
example# 2561
for every s_opt in parser.option_list [ parser . option_list ] . for every x in slice of cwords from the second element to the element at the cword decremented by 1 index ,
0
example# 2562
split x by character _STR:0_ and append first element of the result to the prev_opts list . for every opt in options , if first element of opt is not contained in prev_opts , append opt to the list , substitute it for options .
1
'=' ||| _STR:0_
example# 2563
append tuple containing 2 elements : k and v to a list , for every k and v in options , only if k starts with curr ,
0
example# 2564
sort the result and substitute it for options . for every option in options ,
0
example# 2565
substitute first element of options for opt_label .
0
example# 2566
if second element of options is true ,
0
example# 2567
append _STR:0_ to opt_label .
1
'=' ||| _STR:0_
example# 2568
print opt_label to the standard output .
0
example# 2569
call the function sys.exit [ sys . exit ] with an integer 1 as an argument .
0
example# 2570
define the method execute with an argument self ,
0
example# 2571
try ,
0
example# 2572
substitute first element of self.argv [ self . argv ] for subcommand .
0
example# 2573
if IndexError exception is caught ,
0
example# 2574
subcommand is a string _STR:0_ .
1
'help' ||| _STR:0_
example# 2575
parser is an instance of CommandParser class , created with 3 arguments , None , usage as a string _STR:0_ and add_help set to boolean False .
1
"%(prog)s subcommand [options] [args]" ||| _STR:0_
example# 2576
call the method parser.add_argument [ parser . add_argument ] with an argument string _STR:0_ .
1
'--settings' ||| _STR:0_
example# 2577
call the method parser.add_argument [ parser . add_argument ] with an argument string _STR:0_ .
1
'--pythonpath' ||| _STR:0_
example# 2578
call the method parser.add_argument [ parser . add_argument ] with arguments : string _STR:0_ and nargs set to _STR:1_ .
2
'*' ||| _STR:1_
'args' ||| _STR:0_
example# 2579
try ,
0
example# 2580
call the method parser.parse_known_args [ parser . parse_known_args ] wiht an argument self.argv [ self . argv ] , without the first two elements , assign the result for options ,
0
example# 2581
and args , respectively . call the method handle_default_options with an argument options .
0
example# 2582
if CommandError exception is caught ,
0
example# 2583
do nothing .
0
example# 2584
no_settings_commands is a list containing entries : _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ , _STR:5_ , _STR:6_ ,
7
'--help' ||| _STR:2_
'version' ||| _STR:1_
'-h' ||| _STR:4_
'help' ||| _STR:0_
'compilemessages' ||| _STR:5_
'--version' ||| _STR:3_
'makemessages' ||| _STR:6_
example# 2585
_STR:0_ and _STR:1_ . try ,
2
'startproject' ||| _STR:1_
'startapp' ||| _STR:0_
example# 2586
call the settings.INSTALLED_APPS [ settings . INSTALLED_APPS ] .
0
example# 2587
if ImproperlyConfigured renamed to exc , exception is caught ,
0
example# 2588
substitute exc for self.settings_exception [ self . settings_exception ] ,
0
example# 2589
if subcommand is contained in no_settings_commands ,
0
example# 2590
call the method settings.configure [ settings . configure ] .
0
example# 2591
if settings.configured [ settings . configured ] is true ,
0
example# 2592
call the method django.setup [ django . setup ] .
0
example# 2593
call the method self.autocomplete [ self . autocomplete ] .
0
example# 2594
if subcommand equals to a string _STR:0_ .
1
'help' ||| _STR:0_
example# 2595
if string _STR:0_ is contained in args ,
1
'--commands' ||| _STR:0_
example# 2596
call the method self.main_help_text [ self . main_help_text ] with an argument commands_only set to boolean True , append new line to it , write it to sys.stdout [ sys . stdout ] .
0
example# 2597
otherwise , length of options.args [ options . args ] is lesser than integer 1 ,
0
example# 2598
call the method self.main_help_text [ self . main_help_text ] append new line to it , write it to sys.stdout [ sys . stdout ] .
0
example# 2599
if not ,
0
example# 2600
call the method self.fetch_command [ self . fetch_command ] with first element of options.args [ options . args ] as argument , on the result call the method print_help ,
0
example# 2601
with 2 arguments : self.prog_name [ self . prog_name ] and first element of options.args [ options . args ] . otherwise if subcommand equals a string _STR:0_ or self.argv [ self . argv ] , without the first element equals a list containing a string _STR:1_
2
'version' ||| _STR:0_
'--version' ||| _STR:1_
example# 2602
call the method django.get_version [ django . get_version ] append new line to it , write it to sys.stdout [ sys . stdout ] .
0
example# 2603
if self.argv [ self . argv ] , without the first element is contained in a tuple with 2 entries : a list containing a string _STR:0_ ,
1
'--help' ||| _STR:0_
example# 2604
and a list containing a string _STR:0_ , call the method self.main_help_text [ self . main_help_text ] , append new line to it , write it to sys.stdout [ sys . stdout ] .
1
'-h' ||| _STR:0_
example# 2605
if not ,
0
example# 2606
call the method self.fetch_command [ self . fetch_command ] with an argument command , call the method run_from_argv on the result with an argument self.argv [ self . argv ] .
0
example# 2607
define the function execute_from_command_line with an argument argv set to None .
0
example# 2608
utility is a instance of ManagementUtility class , created with an argument argv .
0
example# 2609
call the method utility.execute [ utility . execute ] .
0
example# 2610
from __future__ import unicode_literals into default name space .
0
example# 2611
import module os .
0
example# 2612
import module sys .
0
example# 2613
import module warnings .
0
example# 2614
from argparse import ArgumentParser into default name space .
0
example# 2615
from optparse import OptionParser into default name space .
0
example# 2616
import module django .
0
example# 2617
from django.core [ django . core ] import checks into default name space .
0
example# 2618
from django.core.exceptions [ django . core . exceptions ] import ImproperlyConfigured into default name space .
0
example# 2619
from django.core.management.color [ django . core . management . color ] import color_style and no_style into default name space .
0
example# 2620
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning and RemovedInDjango20Warning into default name space .
0
example# 2621
from django.utils.encoding [ django . utils . encoding ] import force_st into default name space .
0
example# 2622
derive the class CommandError from the base class Exception .
0
example# 2623
do nothing .
0
example# 2624
derive the CommandParser class from the ArgumentParser base class .
0
example# 2625
define the method __init__ with arguments : self , cmd and unpacked dictionary kwargs .
0
example# 2626
substitute cmd for self.cmd [ self . cmd ] .
0
example# 2627
call the method __init__ from the base class of the CommandParser class , with unpacked dictionary kwargs as argument .
0
example# 2628
define the method parse_args with 3 arguments : self , args set to None and namespace set to None .
0
example# 2629
if self.cmd [ self . cmd ] has an attribute _STR:0_ and next statement is not true : args is true or any arg doesnt start with _STR:1_ for arg in args ,
2
'-' ||| _STR:1_
'missing_args_message' ||| _STR:0_
example# 2630
call the method self.error [ self . error ] with an argument self.cmd.missing_args_message [ self . cmd . missing_args_message ] .
0
example# 2631
call the parse_args method with arguments args and namespace , from the base class of the CommandParser class .
0
example# 2632
define the method error with arguments self and message .
0
example# 2633
if self.cmd._called_from_command_line [ self . cmd . _called_from_command_line ] is true ,
0
example# 2634
call the method error with an argument message , from the base class of the class CommandParser .
0
example# 2635
if not ,
0
example# 2636
raise an CommandError exception with an argument string _STR:0_ , with ' % s ' replaced by message .
1
"Error: %s" ||| _STR:0_
example# 2637
define the function handle_default_options with an argument options .
0
example# 2638
if options.settings [ options . settings ] is true ,
0
example# 2639
substitute options.settings [ options . settings ] for value under the _STR:0_ key of the os.environ [ os . environ ] dictionary .
1
'DJANGO_SETTINGS_MODULE' ||| _STR:0_
example# 2640
if options.pythonpath [ options . pythonpath ] is true ,
0
example# 2641
insert options.pythonpath [ options . pythonpath ] at the beginning of sys.path [ sys . path ] .
0
example# 2642
derive the OutputWrapper class from the object base class .
0
example# 2643
define the method __init__ with 4 arguments : self , out , style , func set to None and endings set to newline character .
0
example# 2644
substitute out for self._out [ self . _out ] .
0
example# 2645
substitute None for self.style_func [ self . style_func ] .
0
example# 2646
if out has an _STR:0_ argument and return value of the function out.isatty [ out . isatty ] is true ,
1
'isatty' ||| _STR:0_
example# 2647
substitute style_func for self.style_func [ self . style_func ] .
0
example# 2648
substitute ending for self.ending [ self . ending ] .
0
example# 2649
define the method __getattr__ with arguments self and name .
0
example# 2650
get name attribute of the self._out [ self . _out ] object , return it .
0
example# 2651
define the method write with 4 arguments : self , msg , style_func with None and ending set None .
0
example# 2652
if ending is None substitute self.ending [ self . ending ] for ending .
0
example# 2653
if ending is true and msg doesnt end with ending ,
0
example# 2654
append ending to msg .
0
example# 2655
if f is not None append it to a list for every f in tuple containing 3 elements : style_func , self.style_func [ self . style_func ] ,
0
example# 2656
and lambda function returning x for x , substitute the firs element of resulting list for style_func . call the function style_func with an argument msg , use the result as an argument for the call to the function force_str ,
0
example# 2657
use the result as an argument for the call to the function self._out.write [ self . _out . write ] . derive the BaseCommand class from the object base class .
0
example# 2658
options_list is an empty tuple .
0
example# 2659
help is an empty string .
0
example# 2660
args is an empty string .
0
example# 2661
_called_from_command_line is boolean False .
0
example# 2662
can_import_settings is boolean True .
0
example# 2663
output_transaction is boolean False .
0
example# 2664
leave_locale_alone is boolean False .
0
example# 2665
define the method __init__ with an argument self .
0
example# 2666
call the function color_style , substitute the result for self.style [ self . style ] .
0
example# 2667
if self has an _STR:0_ attribute , has_old_option is boolean True , otherwise it is boolean False .
1
'requires_model_validation' ||| _STR:0_
example# 2668
if self has an _STR:0_ attribute , has_new_option is boolean True , otherwise it is boolean False .
1
'requires_system_checks' ||| _STR:0_
example# 2669
if has_old_option is true ,
0
example# 2670
call the function warnings.warn [ warnings . warn ] with 2 arguments : string _STR:0_
1
'"requires_model_validation" is deprecated ' ||| _STR:0_
example# 2671
_STR:0_ and RemovedInDjango19Warning . if has_old_option and has_new_option are both true ,
1
'in favor of "requires_system_checks".' ||| _STR:0_
example# 2672
raise an ImproperlyConfigured exception wiht an argument string _STR:0_
1
'Command %s defines both "requires_model_validation" ' ||| _STR:0_
example# 2673
_STR:0_ , replace ' % s ' for self.__class__.__name__ [ self . __class__ . __name__ ] . call the method self.requires_system_checks [ self . requires_system_checks ] with an argument : self.requires_system_checks [ self . requires_system_checks ] if has_new_option is true ,
1
'and "requires_system_checks", which is illegal. Use only "requires_system_checks".' ||| _STR:0_
example# 2674
or if it is false , but has_old_option is true use self.requires_model_validation [ self . requires_model_validation ] , if they are both false use boolean True as an argument . property decorator ,
0
example# 2675
define the method use_argparse with an argument self ,
0
example# 2676
convert self.option_list [ self . option_list ] into a boolean , return the inverted value .
0
example# 2677
define the method get_version with an arguments self .
0
example# 2678
call the function django.get_version [ django . get_version ] , return the result .
0
example# 2679
define the method usage with arguments self and subcommand .
0
example# 2680
substitute ' % s ' in the string _STR:0_ with subcommand and self.args [ self . args ] , respectively , substitute it for usage .
1
'%%prog %s [options] %s' ||| _STR:0_
example# 2681
if self.help [ self . help ] is true ,
0
example# 2682
join usage and self.help [ self . help ] into a string , separated by 2 new line characters , return it .
0
example# 2683
if not ,
0
example# 2684
return usage .
0
example# 2685
define the method create_parser with 3 arguments : self , prog_name and subcommand .
0
example# 2686
if self.use_argparse [ self . use_argparse ] is false ,
0
example# 2687
call the function warnings.warn [ warnings . warn ] with 2 arguments : string _STR:0_
1
"OptionParser usage for Django management commands " ||| _STR:0_
example# 2688
_STR:0_ and RemovedInDjango20Warning . parser is an instance of the object OptionParser , created with arguments : prog set to prog_name ,
1
"is deprecated, use ArgumentParser instead" ||| _STR:0_
example# 2689
usage set to return value of the method self.usage [ self . usage ] called with an argument subcommand , version set to return value of the method self.get_version [ self . get_version ] . call the method parser.add_option [ parser . add_option ] with 8 arguments : string _STR:0_ , string _STR:1_ , action set to string _STR:2_ ,
3
'-v' ||| _STR:0_
'store' ||| _STR:2_
'--verbosity' ||| _STR:1_
example# 2690
dest set to string _STR:0_ , default set to string _STR:1_ , type set to string _STR:2_ , choices is a list containing elements : _STR:3_ , _STR:1_ , _STR:4_ , _STR:5_ , and help as a string _STR:6_ . call the method parser.add_option [ parser . add_option ] with 2 arguments : string _STR:7_ and help as a string _STR:8_ .
9
'verbosity' ||| _STR:0_
'The Python path to a settings module, e.g. "myproject.settings.main". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.' ||| _STR:8_
'1' ||| _STR:1_
'choice' ||| _STR:2_
'0' ||| _STR:3_
'2' ||| _STR:4_
'3' ||| _STR:5_
'--settings' ||| _STR:7_
'Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output' ||| _STR:6_
example# 2691
call the method parser.add_option [ parser . add_option ] with 2 arguments : string _STR:0_ and help set to string _STR:1_ .
2
'A directory to add to the Python path, e.g. "/home/djangoprojects/myproject".' ||| _STR:1_
'--pythonpath' ||| _STR:0_
example# 2692
call the method parser.add_option [ parser . add_option ] with 3 arguments : string _STR:0_ , action set to a string _STR:1_ ,
2
'store_true' ||| _STR:1_
'--traceback' ||| _STR:0_
example# 2693
and help=_STR:0_ . call the method parser.add_option [ parser . add_option ] with 5 arguments : string _STR:1_ , action set to a string _STR:2_ ,
3
'--no-color' ||| _STR:1_
'store_true' ||| _STR:2_
'Raise on exception' ||| _STR:0_
example# 2694
dest set to string _STR:0_ default set to boolean False and help set to a string _STR:1_ . for every opt in self.option_list [ self . option_list ] ,
2
'no_color' ||| _STR:0_
"Don't colorize the command output." ||| _STR:1_
example# 2695
call the method parser.add_option [ parser . add_option ] with an argument opt .
0
example# 2696
if not ,
0
example# 2697
parser is an instance of CommandParser class , created with 3 arguments : self , prog as a string created by joining :
0
example# 2698
os.path.basename [ os . path . basename ] ( prog_name ) and subcommand , separated by whitespace and description set to self.help [ self . help ] , if exists , or None , otherwise . call the method parser.add_option [ parser . add_option ] with 3 arguments : string _STR:0_ , action set to string _STR:1_ ,
2
'version' ||| _STR:1_
'--version' ||| _STR:0_
example# 2699
and version set to result of the method self.get_version [ self . get_version ] . call the method parser.add_option [ parser . add_option ] with 8 arguments : string _STR:0_ , string _STR:1_ , action set to string _STR:2_ ,
3
'-v' ||| _STR:0_
'store' ||| _STR:2_
'--verbosity' ||| _STR:1_
example# 2700
dest set to string _STR:0_ , default set to string _STR:1_ , type set to int , choices is a list , containing integers : 0 , 1 , 2 and 3 , call the method parser.add_option [ parser . add_option ] with 2 arguments : string _STR:2_ and help as a string _STR:3_
4
'1' ||| _STR:1_
'--settings' ||| _STR:2_
'The Python path to a settings module,  e.g. "myproject.settings.main". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.' ||| _STR:3_
'verbosity' ||| _STR:0_
example# 2701
call the method parser.add_option [ parser . add_option ] with 2 arguments : string _STR:0_ and help set to a string _STR:1_
2
'A directory to add to the Python  path, e.g. "/home/djangoprojects/myproject".' ||| _STR:1_
'--pythonpath' ||| _STR:0_
example# 2702
call the method parser.add_option [ parser . add_option ] with 3 arguments : string _STR:0_ , action set to a string _STR:1_ ,
2
'store_true' ||| _STR:1_
'--traceback' ||| _STR:0_
example# 2703
and help set to string _STR:0_ . call the method parser.add_option [ parser . add_option ] with 5 arguments : string _STR:1_ , action is string _STR:2_ , dest is string _STR:3_ ,
4
'--no-color' ||| _STR:1_
'no_color' ||| _STR:3_
'store_true' ||| _STR:2_
'Raise on exception' ||| _STR:0_
example# 2704
default is boolean False , and help is a string _STR:0_ . if self.args [ self . args ] is true ,
1
"Don't colorize the command output." ||| _STR:0_
example# 2705
call the method parser.add_argument [ parser . add_argument ] with 2 arguments : string _STR:0_ and nargs set to _STR:1_ .
2
'*' ||| _STR:1_
'args' ||| _STR:0_
example# 2706
call the method self.add_arguments [ self . add_arguments ] with an argument parser .
0
example# 2707
return parser
0
example# 2708
define the method add_arguments with an argument self and parser .
0
example# 2709
do nothing
0
example# 2710
define the method print_help with 3 arguments : self , prog_name and subcommand .
0
example# 2711
call the method self.create_parser [ self . create_parser ] with arguments prog_name and subcommand .
0
example# 2712
call the method parser.print_help [ parser . print_help ] .
0
example# 2713
define the method run_from_argv with arguments self and argv .
0
example# 2714
self._called_from_command_line [ self . _called_from_command_line ] is boolean True .
0
example# 2715
call the method self.create_parser [ self . create_parser ] with first and second element of argv , substitute the result for parser .
0
example# 2716
if self.use_argparse [ self . use_argparse ] is true ,
0
example# 2717
call the method parser.parse_args [ parser . parse_args ] with argv , without the first 2 elements , substitute the result for options .
0
example# 2718
call the function vars with an argument options , substitute the result for cmd_options .
0
example# 2719
if _STR:0_ is contained in options ,
1
'args' ||| _STR:0_
example# 2720
substitute options.args [ options . args ] for args .
0
example# 2721
delete value under the _STR:0_ key of the cmd_options dictionary .
1
'args' ||| _STR:0_
example# 2722
if not ,
0
example# 2723
args is an empty tuple .
0
example# 2724
if not ,
0
example# 2725
call the method parser.parse_args [ parser . parse_args ] with argv , without the first 2 elements , substitute the result for options and args .
0
example# 2726
call the function vars with an argument options , substitute the result for cmd_options .
0
example# 2727
call the function handle_default_options with an argument options .
0
example# 2728
try ,
0
example# 2729
call the method self.execute [ self . execute ] , with 2 arguments : unpacked list args and unpacked dictionary cmd_options .
0
example# 2730
if Exception , renamed to e , exception is caught ,
0
example# 2731
if options.traceback [ options . traceback ] is true or e is not CommandError instance ,
0
example# 2732
raise an exception .
0
example# 2733
if it exists , get _STR:0_ attribute of self , substitute it for stderr , if not , stderr is an instance of OutputWrapper class ,
1
'stderr' ||| _STR:0_
example# 2734
created with arguments sys.stderr [ sys . stderr ] and self.style.ERROR [ self . style . ERROR ] . replace ' % s ' in string _STR:0_ with e.__class__.__name__ [ e . __class__ . __name__ ] and e , respectively , write it to the stderr stream .
1
'%s: %s' ||| _STR:0_
example# 2735
call the function sys.exit [ sys . exit ] with an argument integer 1 .
0
example# 2736
define the method execute with 3 arguments : self , unpacked list args and unpacked dictionary options .
0
example# 2737
self.stdout [ self . stdout ] is an instance of OutputWrapper class created with an argument : value under the _STR:0_ key of the options dictionary ,
1
'stdout' ||| _STR:0_
example# 2738
if the key doesnt exists use sys.stdout [ sys . stdout ] as an argument . if value under the _STR:0_ key of the options dictionary .
1
'no_color' ||| _STR:0_
example# 2739
call the function no_style , substitute the result for self.style [ self . style ] .
0
example# 2740
self.stderr [ self . stderr ] is an OutputWrapper object instance , created with value under the _STR:0_ key of the options dictionary as an argument ,
1
'stderr' ||| _STR:0_
example# 2741
if the key doesnt exists use sys.stderr [ sys . stderr ] as an argument . if not ,
0
example# 2742
self.stderr [ self . stderr ] is an instance of an OutputWrapper object , created with 2 arguments : value under the _STR:0_ key of the options dictionary , if it doesnt exists use the sys.stderr [ sys . stderr ] instead , and self.style.ERROR [ self . style . ERROR ] .
1
'stderr' ||| _STR:0_
example# 2743
if self.can_import_settings [ self . can_import_settings ] is true ,
0
example# 2744
from django.conf [ django . conf ] import settings into default namespace ,
0
example# 2745
saved_locale is None .
0
example# 2746
if self.leave_locale_alone [ self . leave_locale_alone ] is false ,
0
example# 2747
if self.can_import_settings [ self . can_import_settings ] is false ,
0
example# 2748
raise an CommandError exception with an argument string , _STR:0_
1
"Incompatible values of 'leave_locale_alone' " ||| _STR:0_
example# 2749
_STR:0_ , replace ' % s ' with self.leave_locale_alone [ self . leave_locale_alone ] and self.can_import_settings [ self . can_import_settings ] . from django.utils [ django . utils ] import translation into default namespace .
1
"(%s) and 'can_import_settings' (%s) command options." ||| _STR:0_
example# 2750
call the method translation.get_language [ translation . get_language ] , substitute th result for saved_locale .
0
example# 2751
call the method translation.activate [ translation . activate ] with an argument string _STR:0_ .
1
'en-us' ||| _STR:0_
example# 2752
try ,
0
example# 2753
if self.requires_system_checks [ self . requires_system_checks ] is true and values under the _STR:0_ and _STR:1_ keys of the options dictionary are false ,
2
'skip_checks' ||| _STR:1_
'skip_validation' ||| _STR:0_
example# 2754
call the method self.check [ self . check ] ,
0
example# 2755
call the method self.handle [ self . handle ] with 2 arguments unpacked list args and unpacked dictionary options , substitute the result for output .
0
example# 2756
if output is true ,
0
example# 2757
if self.output_transaction [ self . output_transaction ] is true ,
0
example# 2758
from django.db [ django . db ] import connections and DEFAULT_DB_ALIAS into default namespace .
0
example# 2759
get the value under the _STR:0_ key of the options dictionary , if it doesnt exists use the DEFAULT_DB_ALIAS to address an element
1
'database' ||| _STR:0_
example# 2760
from the connections list , substitute it for connection . call the method connection.ops.start_transaction_sql [ connection . ops . start_transaction_sql ] , if it evaluates to true ,
0
example# 2761
call the method connection.ops.start_transaction_sql [ connection . ops . start_transaction_sql ] , use the result as an argument for the call to the method self.style.SQL_KEYWORD [ self . style . SQL_KEYWORD ] ,
0
example# 2762
write the result to the self.stdout [ self . stdout ] stream . write output to self.stdout [ self . stdout ] stream .
0
example# 2763
if self.output_transaction [ self . output_transaction ] is true ,
0
example# 2764
call the method connection.ops.end_transaction_sql [ connection . ops . end_transaction_sql ] , use the result as the argument for the call to the method self.style.SQL_KEYWORD [ self . style . SQL_KEYWORD ] ,
0
example# 2765
append the result to the _STR:0_ string , write it to self.stdout [ self . stdout ] . finally perform ,
1
'\n' ||| _STR:0_
example# 2766
if saved_locale is not None ,
0
example# 2767
call the method translation.activate [ translation . activate ] with an argument saved_locale .
0
example# 2768
define the method with 3 arguments : self , app_config set to None and display_num_errors set to boolean False .
0
example# 2769
if app_config is None ,
0
example# 2770
app_configs is not None .
0
example# 2771
if not ,
0
example# 2772
app_configs is a list containing app_config .
0
example# 2773
call the method self.check [ self . check ] with 2 arguments app_configs set to app_configs , display_num_errors set to display_num_errors , return the result .
0
example# 2774
define the method check with 4 arguments : self , app_configs set to None , tags set to None , display_num_errors set to boolean False .
0
example# 2775
call the method checks.run_checks [ checks . run_checks ] with 2 arguments : app_configs set to app_configs , tags set t tags , substitute the result for all_issues .
0
example# 2776
msg is an empty string .
0
example# 2777
visible_issue_count is an integer 0 .
0
example# 2778
if all_issues is true ,
0
example# 2779
append e to debugs list for every e in all_issues , if e.level [ e . level ] is lesser than checks.INFO [ checks . INFO ] and result of the method e.is_silenced [ e . is_silenced ] in false .
0
example# 2780
append e to infos list for every e in all_issues , if checks.INFO [ checks . INFO ] is lesser or equal to e.level [ e . level ] ,
0
example# 2781
and e.level [ e . level ] is lesser than checks.WARNING [ checks . WARNING ] and result of the method e.is_silenced [ e . is_silenced ] in false . append e to warnings list for every e in all_issues , if checks.WARNING [ checks . WARNING ] is lesser than or equal to e.level [ e . level ] ,
0
example# 2782
and e.level [ e . level ] is lesser than checks.WARNING [ checks . WARNING ] and result of the method e.is_silenced [ e . is_silenced ] in false . append e to errors list for every e in all_issues , if checks.ERROR [ checks . ERROR ] is lesser than or equal to e.level [ e . level ] ,
0
example# 2783
and e.level [ e . level ] is lesser than checks.CRITICAL [ checks . CRITICAL ] . append e to criticals list for every e in all_issues , if checks.CRITICAL [ checks . CRITICAL ] is lesser than or equal to e.level [ e . level ] .
0
example# 2784
sorted_issues is a list of tuples with 5 entries : criticals and _STR:0_ , errors and _STR:1_ , warnings and _STR:2_ ,
3
'ERRORS' ||| _STR:1_
'CRITICALS' ||| _STR:0_
'WARNINGS' ||| _STR:2_
example# 2785
infos , _STR:0_ for every issues and group_name in sorted_issues ,
1
'INFOS' ||| _STR:0_
example# 2786
if issues is true ,
0
example# 2787
increment visible_issue_count for length of issues .
0
example# 2788
if e.is_serious [ e . is_serious ] method evaluates to true , call the function color_style , on the result call the method ERROR with result of the force_str called with an argument e , if not call the function color_style on the result call the method ERROR with result of the force_str called with an argument e , for every e in issues , formatted is a tuple containing the previous result .
0
example# 2789
sort elements formatted , join them in the list separated with newline character , substitute the result for formatted .
0
example# 2790
substitute ' % s ' in the string _STR:0_ , with group_name and formatted , substitute the result for msg .
1
'\n%s:\n%s\n' ||| _STR:0_
example# 2791
if msg is true ,
0
example# 2792
replace ' % s ' in string _STR:0_ with msg , substitute it for msg .
1
"System check identified some issues:\n%s" ||| _STR:0_
example# 2793
if display_num_errors is true ,
0
example# 2794
if msg is true ,
0
example# 2795
append newline character to msg .
0
example# 2796
append string _STR:0_ to msg , replace first ' % s ' for : string _STR:1_ ,
2
"System check identified %s (%s silenced)." ||| _STR:0_
"no issues" ||| _STR:1_
example# 2797
if visible_issue_count equals to integer 0 , or for string _STR:0_ if visible_issue_count equals integer 1 , or for string _STR:1_ , with ' % s ' replaced by visible_issue_count , subtract visible_issue_count from length of all_issues , and substitute it for second ' % s ' in the stirting string . if any element in the return value of the e.is_serious [ e . is_serious ] method is true , and if return value of the method e.is_silenced [ e . is_silenced ] is false ,
2
"1 issue" ||| _STR:0_
"%s issues" ||| _STR:1_
example# 2798
for every e in all_issues , raise an CommandError with argument msg ,
0
example# 2799
otherwise if msg and visible_issue_count are true ,
0
example# 2800
write msg to self.stderr [ self . stderr ] stream .
0
example# 2801
otherwise if msg is true ,
0
example# 2802
write msg to self.stderr [ self . stderr ] stream .
0
example# 2803
define the method handle with 3 arguments : self , unpacked args and unpacked dictionary options .
0
example# 2804
raise an NotImplementedError exception with an argument string _STR:0_ .
1
'subclasses of BaseCommand must provide a handle() method' ||| _STR:0_
example# 2805
derive the AppCommand class from the BaseCommand base class .
0
example# 2806
missing_args_message is an string _STR:0_ .
1
"Enter at least one application label." ||| _STR:0_
example# 2807
define the method add_arguments with self and parser as arguments .
0
example# 2808
call the method parser.add_argument [ parser . add_argument ] with 4 arguments : string _STR:0_ , metavar set to _STR:1_ , nargs set to _STR:2_ ,
3
'args' ||| _STR:0_
'+' ||| _STR:2_
'app_label' ||| _STR:1_
example# 2809
and help set to string _STR:0_ . define the method handle with 3 arguments : self , unpacked list app_labels and unpacked dictionary options .
1
'One or more application label.' ||| _STR:0_
example# 2810
from django.apps [ django . apps ] import apps into default name space .
0
example# 2811
try ,
0
example# 2812
call the method apps.get_app_config [ apps . get_app_config ] with an argument app_lable , for every app_label in app_labels , append the results to app_configs list .
0
example# 2813
if LookupError or ImportError , renamed to e , exceptions are caught ,
0
example# 2814
raise an CommandError with an argument string _STR:0_ , with ' % s ' replaced by e .
1
"%s. Are you sure your INSTALLED_APPS setting is correct?" ||| _STR:0_
example# 2815
output is an empty list .
0
example# 2816
for eery app_config in app_configs ,
0
example# 2817
call the self.handle_app_config [ self . handle_app_config ] method with app_config and options as arguments , substitute the result for app_output .
0
example# 2818
if app_output is true ,
0
example# 2819
append app_output to output .
0
example# 2820
join elements of output into a string , separated by newline characters , return it .
0
example# 2821
define the method handle_app_config with 3 arguments : self , app_config and unpacked dictionary options .
0
example# 2822
try ,
0
example# 2823
substitute self.handle_app [ self . handle_app ] for handle_app .
0
example# 2824
if AttributeError exception is caught ,
0
example# 2825
raise an NotImplementedError with an argument string _STR:0_ .
1
"Subclasses of AppCommand must provide a handle_app_config() method." ||| _STR:0_
example# 2826
if not ,
0
example# 2827
call the function warnings.warn [ warnings . warn ] with 3 argument : string _STR:0_ ,
1
"AppCommand.handle_app() is superseded by AppCommand.handle_app_config()." ||| _STR:0_
example# 2828
RemovedInDjango19Warning and stacklevel set to integer 2. if app_config.models_module [ app_config . models_module ] is None ,
0
example# 2829
raise an CommandError with an argument string _STR:0_ , where ' % s ' is replaced by app_config.label [ app_config . label ] .
1
"AppCommand cannot handle app '%s' in legacy mode because it doesn't have a models module." ||| _STR:0_
example# 2830
call the function handle_app with 2 arguments : app_config.models_module [ app_config . models_module ] and unpacked dictionary options .
0
example# 2831
derive the LabelCommand class from the BaseCommand base class .
0
example# 2832
label is a string _STR:0_
1
'label' ||| _STR:0_
example# 2833
substitute string _STR:0_ , with ' % s ' replaced by label , for missing_args_message .
1
"Enter at least one %s." ||| _STR:0_
example# 2834
define the method add_arguments with arguments self and parser .
0
example# 2835
call the method parser.add_argument [ parser . add_argument ] with 3 arguments : string _STR:0_ , metavar set to self.label [ self . label ] and nargs set to _STR:1_ .
2
'args' ||| _STR:0_
'+' ||| _STR:1_
example# 2836
define the method handle with 3 arguments : self , unpacked list labels and unpacked dictionary options .
0
example# 2837
output is an empty list .
0
example# 2838
for every label in labels ,
0
example# 2839
call the method self.handle_label [ self . handle_label ] with 2 arguments : label and unpacked dictionary options , substitute the result for label_output .
0
example# 2840
if label_output is true ,
0
example# 2841
append label_output to output .
0
example# 2842
join output into a string , separated by newline characters , return it .
0
example# 2843
define the method handle_label with 3 arguments : self , label and unpacked dictionary options .
0
example# 2844
raise an NotImplementedError exception with an argument string _STR:0_ .
1
'subclasses of LabelCommand must provide a handle_label() method' ||| _STR:0_
example# 2845
derive the NoArgsCommand class from the BaseCommand base class .
0
example# 2846
args is an empty string .
0
example# 2847
define the method __init__ with an argument self .
0
example# 2848
call the function warnings.warn [ warnings . warn ] with 2 arguments : string _STR:0_
1
"NoArgsCommand class is deprecated and will be removed in Django 2.0. " ||| _STR:0_
example# 2849
_STR:0_ and RemovedInDjango20Warning . call the __init__ method from the base class of the NoArgsCommand class .
1
"Use BaseCommand instead, which takes no arguments by default." ||| _STR:0_
example# 2850
define the method handle with 3 arguments : self , unpacked list args and unpacked dictionary options .
0
example# 2851
if args is true ,
0
example# 2852
raise an CommandError exception with an argument string _STR:0_ .
1
"Command doesn't accept any arguments" ||| _STR:0_
example# 2853
call the self.handle_noargs [ self . handle_noargs ] method with with unpacked dictionary options as argument , return the result .
0
example# 2854
define the method handle_noargs with 2 arguments : self and unpacked dictionary options .
0
example# 2855
raise an NotImplementedError with an argument string _STR:0_ .
1
'subclasses of NoArgsCommand must provide a handle_noargs() method' ||| _STR:0_
example# 2856
import module os .
0
example# 2857
import module sys .
0
example# 2858
from django.utils [ django . utils ] import termcolors into default name space .
0
example# 2859
define the function supports_color , without arguments .
0
example# 2860
substitute sys.platform [ sys . platform ] for plat .
0
example# 2861
evaluate the logic expression , plat does not equals to string _STR:0_ , and plat does not equals to string _STR:1_
2
'Pocket PC' ||| _STR:0_
'win32' ||| _STR:1_
example# 2862
or string _STR:0_ is in os.environ [ os . environ ] , substitute the evaluated boolean for supported_platform . if sys.stdout [ sys . stdout ] has an attribute named _STR:1_ and call to the sys.stdout.isatty [ sys . stdout . isatty ] returns boolean True , substitute True for is_a_tty .
2
'isatty' ||| _STR:1_
'ANICON' ||| _STR:0_
example# 2863
if supported_platform is False or is_a_tty is False ,
0
example# 2864
return boolean False .
0
example# 2865
return boolean True .
0
example# 2866
define function color_style , without input arguments .
0
example# 2867
call the function supports_color , if evaluates to False ,
0
example# 2868
substitute return value of function no_style for style .
0
example# 2869
if not ,
0
example# 2870
get the value under the key _STR:0_ of os.environ [ os . environ ] dictionary , if key doesnt exists return empty string , assign the result to DJANGO_COLORS .
1
'DJANGO_COLORS' ||| _STR:0_
example# 2871
call the function termcolors.parse_color_setting [ termcolors . parse_color_setting ] with DJANGO_COLORS as an argument , assign the result to color_settings .
0
example# 2872
if color_setting is True ,
0
example# 2873
define class dummy .
0
example# 2874
do nothing .
0
example# 2875
style is an instance of the dummy class .
0
example# 2876
for every role in termcolors.PALETTES [ termcolors . PALETTES ] list at the index termcolors.NOCOLOR_PALETTE [ termcolors . NOCOLOR_PALETTE ] ,
0
example# 2877
assign the value of the dictionary color_settings under the key role to format , if key doesnt exist assign the empty dictionary .
0
example# 2878
sets the role attribute of the style object to the value of the call to the termcolors.make_style [ termcolors . make_style ] function with dictionary format as an argument .
0
example# 2879
substitute style.ERROR [ style . ERROR ] for style.ERROR_OUTPUT [ style . ERROR_OUTPUT ] .
0
example# 2880
if not ,
0
example# 2881
substitute return value of function no_style for style .
0
example# 2882
return style .
0
example# 2883
define function no_style , without input arguments .
0
example# 2884
define class dummy .
0
example# 2885
define private method __getattr__ with self class instance and attr as the arguments .
0
example# 2886
create lambda identity function which returns x for input parameter x , return the function .
0
example# 2887
return an instance of a dummy class .
0
example# 2888
from __future__ import unicode_literals into default name space .
0
example# 2889
from django.apps [ django . apps ] import apps into default name space .
0
example# 2890
from django.core [ django . core ] import checks into default name space .
0
example# 2891
from django.core.checks.registry [ django . core . checks . registry ] import registry into default name space .
0
example# 2892
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 2893
derive the class Command from the BaseCommand base class .
0
example# 2894
help is a string _STR:0_ .
1
"Checks the entire Django project for potential problems." ||| _STR:0_
example# 2895
requires_system_checks is boolean False .
0
example# 2896
define the method add_arguments with arguments self and parser .
0
example# 2897
call the method parser.add_argument [ parser . add_argument ] with 3 arguments : string _STR:0_ , metavar set to string _STR:1_ and nargs set to _STR:2_ .
3
'*' ||| _STR:2_
'args' ||| _STR:0_
'app_label' ||| _STR:1_
example# 2898
call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:0_ , string _STR:1_ , action set to string _STR:2_ ,
3
'--tag' ||| _STR:0_
'append' ||| _STR:2_
'-t' ||| _STR:1_
example# 2899
dest set to string _STR:0_ and help set to string _STR:1_ . call the method parser.add_argument [ parser . add_argument ] with 4 arguments : string _STR:2_ , action set to string _STR:3_ ,
4
'tags' ||| _STR:0_
'store_true' ||| _STR:3_
'Run only checks labeled with given tag.' ||| _STR:1_
'--list-tags' ||| _STR:2_
example# 2900
dest set to string _STR:0_ and help set to string _STR:1_ . define method handle with arguments self , unapcked list app_labels and unpacked dictionary options .
2
'List available tags.' ||| _STR:1_
'list_tags' ||| _STR:0_
example# 2901
if value under the _STR:0_ key of options dictionay is true ,
1
'list_tags' ||| _STR:0_
example# 2902
call the method registry.tags_available [ registry . tags_available ] , sort the result and join it into a string , separate by newlines , write it to self.stdout [ self . stdout ] .
0
example# 2903
return nothing .
0
example# 2904
if app_labels is true ,
0
example# 2905
call the method apps.get_app_config [ apps . get_app_config ] with an argument app_label , for every app_label in app_labels , append the results to a list ,
0
example# 2906
substitute the resulting list for app_config . if not ,
0
example# 2907
app_configs is None .
0
example# 2908
get the value under the _STR:0_ key of the options dictionary , if it exists substitute it for tags , if not , tags is None .
1
'tags' ||| _STR:0_
example# 2909
if tags exists and if all elements in the return value of the method checks.tag_exists [ checks . tag_exists ] called with an argument tag ,
0
example# 2910
for every tag in tags , are false , for every tag in tags , if return value of the method checks.tag_exists [ checks . tag_exists ] called with an argument tag , evaluates to false ,
0
example# 2911
use tag as an argument to call the iterator method next , substitute the result for invalid_tag . raise an CommandError exception with an argument string _STR:0_ , where ' % s ' is replaced with invalid_tag .
1
'There is no system check with the "%s" tag.' ||| _STR:0_
example# 2912
call the method self.check [ self . check ] with arguments : app_configs set to app_configs , tags set to tags , display_num_errors set to boolean True .
0
example# 2913
from __future__ import unicode_literals into default name space .
0
example# 2914
import module codecs .
0
example# 2915
import module glob .
0
example# 2916
import module os .
0
example# 2917
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 2918
from django.core.management.utils [ django . core . management . utils ] import find_command and popen_wrapper into default name space .
0
example# 2919
from django.utils._os [ django . utils . _os ] import npath and upath into default name space .
0
example# 2920
define the function has_bom with fn as argument .
0
example# 2921
open the file fn in read mode , with file descriptor as f ,
0
example# 2922
read 4 bytes from file f and store it in sample .
0
example# 2923
evaluate the boolean expression , if first three characters of sample equals to string of bytes '\xef\xbb\xbf\ ' ,
0
example# 2924
of if sample starts with codecs.BOM_UTF16_LE [ codecs . BOM_UTF16_LE ] or sample starts with codecs.BOM_UTF16_BE [ codecs . BOM_UTF16_BE ] , return the evaluated boolean expression . define the function is_writable with path as argument ,
0
example# 2925
try ,
0
example# 2926
with open file path in append mode ,
0
example# 2927
call the os.utime [ os . utime ] unction , with path and None as arguments .
0
example# 2928
if IOError or OSError exceptions occurred ,
0
example# 2929
return boolean False .
0
example# 2930
return boolean True .
0
example# 2931
derive class Command from base class BaseCommand .
0
example# 2932
help is string _STR:0_ .
1
'Compiles .po files to .mo files for use with builtin gettext support.' ||| _STR:0_
example# 2933
requires_system_checks is boolean False .
0
example# 2934
leave_locale_alone is boolean True .
0
example# 2935
program is string _STR:0_
1
'msgfmt' ||| _STR:0_
example# 2936
program_options is list containing string _STR:0_ .
1
'--check-format' ||| _STR:0_
example# 2937
define method add_arguments with self class instance and parser as arguments .
0
example# 2938
call the method parser.add_argument [ parser . add_argument ] with string _STR:0_ , string _STR:1_ , dest set to string _STR:2_ , action set to string _STR:3_ ,
4
'locale' ||| _STR:2_
'--locale' ||| _STR:0_
'append' ||| _STR:3_
'-l' ||| _STR:1_
example# 2939
default as an empty list and help as an string _STR:0_ . call the method parser.add_argument [ parser . add_argument ] with string _STR:1_ , string _STR:2_ , dest set to string _STR:3_ , action set to string _STR:4_ ,
5
'Locale(s) to process (e.g. de_AT). Default is to process all. Can be used multiple times.' ||| _STR:0_
'-x' ||| _STR:2_
'append' ||| _STR:4_
'exclude' ||| _STR:3_
'--exclude' ||| _STR:1_
example# 2940
default as an empty list and help as an string _STR:0_ . define the handle method with self class instance and dictionary **options as arguments .
1
'Locales to exclude. Default is none. Can be used multiple times.' ||| _STR:0_
example# 2941
get the value under the key _STR:0_ of the options dictionary , substitute it for locale .
1
'locale' ||| _STR:0_
example# 2942
get the value under the key _STR:0_ of the options dictionary , substitute it for exclude .
1
'exclude' ||| _STR:0_
example# 2943
get the value under the key _STR:0_ of the options dictionary , convert it to an integer , substitute it for exclude .
1
'exclude' ||| _STR:0_
example# 2944
if evaluation of the function find_command with self.program [ self . program ] as argument equals to None ,
0
example# 2945
raise CommandError exception , with sring _STR:0_ as argument , substitute ' % s ' with self.program [ self . program ] .
1
"Can't find %s. Make sure you have GNU gettext tools 0.15 or newer installed." ||| _STR:0_
example# 2946
basedirs is a list containing tuple with strings , _STR:0_ and _STR:1_ .
2
'conf/locale' ||| _STR:0_
'locale' ||| _STR:1_
example# 2947
if value under the _STR:0_ key of os.environ [ os . environ ] dictionary exists .
1
'DJANGO_SETTINGS_MODULE' ||| _STR:0_
example# 2948
from django.conf [ django . conf ] import settings into default name space .
0
example# 2949
call function update with path as the argument , for every path in settings.LOCALE_PATHS [ settings . LOCALE_PATHS ] , extend basedirs list with previous items .
0
example# 2950
create a list out of basedir elements for which function os.path.isdir [ os . path . isdir ] returns true , apply the os.path.abspath [ os . path . abspath ] function on every element , and put the results in a list , basedir is set of previous list elements .
0
example# 2951
if basedirs is empty ,
0
example# 2952
raise CommandError exception with string _STR:0_ , as argument .
1
"This script should be run from the Django Git checkout or your project or app tree, or with the settings module specified." ||| _STR:0_
example# 2953
all_locales is an empty string .
0
example# 2954
for every basedir in basedirs ,
0
example# 2955
locale_dirs is a list of elements from the list of path names that maths the basedir path with _STR:0_ wild card characters for which call to the os.path.isdir [ os . path . isdir ] returned true , assign it to locale_dirs .
1
'/*' ||| _STR:0_
example# 2956
extend all_locales list with the elements of locale_dirs list on which os.path.basename [ os . path . basename ] function was applied .
0
example# 2957
take locale or all_locales , whichever is not empty , respectively , and substitute it for locales .
0
example# 2958
locales is relative complement of set exclude in set locales .
0
example# 2959
for every basedir in basedirs ,
0
example# 2960
if locales in not empty ,
0
example# 2961
join basedir , l and string _STR:0_ into a path separated by _STR:1_ for every l in locales , assign the list to dirs .
2
'/' ||| _STR:1_
'LC_MESSAGES' ||| _STR:0_
example# 2962
if not ,
0
example# 2963
dirs is a list containing basedir .
0
example# 2964
locations is an empty list .
0
example# 2965
for every ldir in dirs ,
0
example# 2966
for dirpath , dirnames and filenames , respectively , in directory tree tuple starting from the ldir ,
0
example# 2967
extend locations with tuple containing dirpath and f , for every f in filenames , only if it ends with string _STR:0_ .
1
'.po' ||| _STR:0_
example# 2968
if locations is not empty ,
0
example# 2969
call the self.compile_messages [ self . compile_messages ] with locations as argument ,
0
example# 2970
define compile_messages method with self class instance and locations as a arguments .
0
example# 2971
for every i and tuple containing dirpath and f , in enumerated list of locations ,
0
example# 2972
if self.verbosity [ self . verbosity ] is greater than integer 0 ,
0
example# 2973
call the self.stdout.write [ self . stdout . write ] method with string _STR:0_ as argument , replacing all the occurrences of ' % s ' with f and dirpath , respectively .
1
'processing file %s in %s\n' ||| _STR:0_
example# 2974
po_path is a string containing joined directory path from dirpath and f .
0
example# 2975
evaluate function has_bom with po_path as argument .
0
example# 2976
raise CommandError exception with string _STR:0_ , with ' % s ' replaced with po_path , as argument .
1
"The %s file has a BOM (Byte Order Mark). Django only supports .po files encoded in UTF-8 and without any BOM." ||| _STR:0_
example# 2977
call os.path.splitext [ os . path . splitext ] function with po_path as argument , substitute the first element of the result for base_path .
0
example# 2978
if i equals to integer 0 and
0
example# 2979
call the self.stderr.write [ self . stderr . write ] , with string _STR:0_ as argument , with ' % s ' replaced by dirpath .
1
"The po files under %s are in a seemingly not writable location. mo files will not be updated/created." ||| _STR:0_
example# 2980
return nothing .
0
example# 2981
extend self.program [ self . program ] list with self.program_options [ self . program_options ] , string _STR:0_ ,
1
'-o' ||| _STR:0_
example# 2982
return value of the npath function with string _STR:0_ appended to the base_path as argument , and return value of the npath function with string _STR:1_ appended to the base_path as argument , substitute it for args . call the popen_wrapper with args as the argument , assign the result to the output , errors and status , respectively .
2
'.mo' ||| _STR:0_
'.po' ||| _STR:1_
example# 2983
if status is True ,
0
example# 2984
if errors is True ,
0
example# 2985
msg is a string _STR:0_ , with ' % s ' replaced by self.program [ self . program ] and errors .
1
"Execution of %s failed: %s" ||| _STR:0_
example# 2986
if not ,
0
example# 2987
msg is a string _STR:0_ , with ' % s ' replaced by self.program [ self . program ] .
1
"Execution of %s failed" ||| _STR:0_
example# 2988
raise CommandError exception with msg as argument .
0
example# 2989
from django.conf [ django . conf ] import settings into default name space .
0
example# 2990
from django.core.cache [ django . core . cache ] import caches into default name space .
0
example# 2991
from django.core.cache.backends.db [ django . core . cache . backends . db ] import BaseDatabaseCache into default name space .
0
example# 2992
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 2993
from django.db [ django . db ] import connections , router , transaction , models and DEFAULT_DB_ALIAS into default name space .
0
example# 2994
from django.db.utils [ django . db . utils ] import DatabaseError into default name space .
0
example# 2995
from django.utils.encoding [ django . utils . encoding ] import force_text into default name space .
0
example# 2996
derive the class Command from the BaseCommand base class .
0
example# 2997
help is an string _STR:0_ .
1
"Creates the tables needed to use the SQL cache backend." ||| _STR:0_
example# 2998
requires_system_checks is boolean False .
0
example# 2999
define the method add_arguments with arguments self and parser .
0
example# 3000
call the method parser.add_argument [ parser . add_argument ] with 4 arguments : string _STR:0_ , metavar set to string _STR:1_ , nargs set to _STR:2_ character ,
3
'table_name' ||| _STR:1_
'*' ||| _STR:2_
'args' ||| _STR:0_
example# 3001
and help set to a string _STR:0_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:1_ , action set to string _STR:2_ , dest as a string _STR:3_ ,
4
'--database' ||| _STR:1_
'store' ||| _STR:2_
'Optional table names. Otherwise, settings.CACHES is used to find cache tables.' ||| _STR:0_
'database' ||| _STR:3_
example# 3002
default set to DEFAULT_DB_ALIAS and help set to a string : _STR:0_ define the method handle with arguments self , unpacked list tablenames and unpacked dictionary options .
1
'Nominates a database onto which the cache tables will be installed. Defaults to the "default" database.' ||| _STR:0_
example# 3003
get value under the _STR:0_ key of the options dictionary , substitute it for db .
1
'database' ||| _STR:0_
example# 3004
get the value under the _STR:0_ key of the options dictionary , convet it to an integer and substitute for self.verbosity [ self . verbosity ] .
1
'verbosity' ||| _STR:0_
example# 3005
if length of tablenames is greater than zero ,
0
example# 3006
for every tablename in tablenames ,
0
example# 3007
call the method self.create_table [ self . create_table ] with arguments : db and tablename .
0
example# 3008
if not ,
0
example# 3009
for every cache_alias in settings.CACHES [ settings . CACHES ] ,
0
example# 3010
substitute value under the cache_alias key of the caches dictionary for cache .
0
example# 3011
if cache is an instance of BaseDatabaseCache ,
0
example# 3012
all the method self.create_table [ self . create_table ] with arguments : db and cache._table [ cache . _table ] .
0
example# 3013
define the method create_table with arguments self , database and tablename .
0
example# 3014
cache is an instance of BaseDatabaseCache class , created with arguments : tablename and an empty dictionary .
0
example# 3015
call the method router.allow_migrate [ router . allow_migrate ] with 2 arguments : database and cache.cache_model_class [ cache . cache_model_class ] , if it evaluates to false ,
0
example# 3016
return nothing .
0
example# 3017
substitute value under the database key of the connections dictionary for connection .
0
example# 3018
if tablename is contained in return value of the method connection.introspection.table_names [ connection . introspection . table_names ] ,
0
example# 3019
if self.verbosity [ self . verbosity ] is greater than integer 0 ,
0
example# 3020
replace ' % s ' in string _STR:0_ with tablename , write it to the self.stdout [ self . stdout ] stream .
1
"Cache table '%s' already exists." ||| _STR:0_
example# 3021
return nothing .
0
example# 3022
fields is an tuple containing 3 entries : return value of the method models.CharField [ models . CharField ] called with 4 arguments :
0
example# 3023
name set to a string _STR:0_ , max_length set to integer 255 , unique set to boolean True and primary_key set to boolean True , return value of the method models.TextField [ models . TextField ] called with argument name set to a string _STR:1_ , and return value of the method models.DateTimeField [ models . DateTimeField ] called with 2 arguments : name set to string _STR:2_ and db_index set to True . table_output is an empty list .
3
'cache_key' ||| _STR:0_
'value' ||| _STR:1_
'expires' ||| _STR:2_
example# 3024
index_output is an empty list .
0
example# 3025
substitute connection.ops.quote_name [ connection . ops . quote_name ] for qn .
0
example# 3026
for every f in fields ,
0
example# 3027
field_output is an list containing 2 elements : return value of the function qn called with an argument f.name [ f . name ] ,
0
example# 3028
and return value of the function f.db_type [ f . db_type ] called with an argument connection set to connection . if f.null [ f . null ] is false , append string append _STR:0_ to field_output , otherwise append _STR:1_ to field_output .
2
"NOT NULL" ||| _STR:0_
"NULL" ||| _STR:1_
example# 3029
if f.primary_key [ f . primary_key ] is true ,
0
example# 3030
append string _STR:0_ to field_output .
1
"PRIMARY KEY" ||| _STR:0_
example# 3031
otherwise if f.unique [ f . unique ] is true ,
0
example# 3032
append string _STR:0_ to field_output .
1
"UNIQUE" ||| _STR:0_
example# 3033
if f.db_index [ f . db_index ] is true ,
0
example# 3034
if f.unique [ f . unique ] is true , substitute _STR:0_ for unique , otherwise unique is an empty string .
1
"UNIQUE " ||| _STR:0_
example# 3035
replace ' % s ' in string _STR:0_ with : unique , return value of the function qn called with an argument :
1
"CREATE %sINDEX %s ON %s (%s);" ||| _STR:0_
example# 3036
a string _STR:0_ , where ' % s ' is replaced with tablename and f.name [ f . name ] , respectively , return value of the function qn called with an argument tablename and return value of the function qn called with an argument f.name [ f . name ] . join field_output elements into a string , separated by whitespaces , append it to table_output .
1
'%s_%s' ||| _STR:0_
example# 3037
full_statement is a list containing : string _STR:0_ , where % s is replaced by result of the function qn called with an argument tablename .
1
"CREATE TABLE %s (" ||| _STR:0_
example# 3038
for every i and line in enumerated iterable table_output ,
0
example# 3039
replace % s in string _STR:0_ with : line and character _STR:1_ if i is lesser than length of table_output decremented by one ,
2
'    %s%s' ||| _STR:0_
',' ||| _STR:1_
example# 3040
or with an empty string if its not , append the resulting string to full_statement . append string _STR:0_ to full_statement .
1
');' ||| _STR:0_
example# 3041
evaluate method transaction.atomic [ transaction . atomic ] with arguments : using set to database and savepoint set to connection.features.can_rollback_ddl [ connection . features . can_rollback_ddl ] ,
0
example# 3042
with the result , evaluate method connection.cursor [ connection . cursor ] , with return value as curs ,
0
example# 3043
try ,
0
example# 3044
join full_statement into a string , separated by newlines , use it as an argument for the call to the method curs.execute [ curs . execute ] .
0
example# 3045
if DatabaseError , renamed to e , exception is caught ,
0
example# 3046
raise an CommandError with an argument string _STR:0_ , replace ' % s ' with :
1
"Cache table '%s' could not be created.\nThe error was: %s." ||| _STR:0_
example# 3047
tablename and return value of the function force_text called with an argument e , respectively . for every statement in index_output ,
0
example# 3048
execute statement on the database that curs points to .
0
example# 3049
if self.verbosity [ self . verbosity ] is greater than integer 1 ,
0
example# 3050
replace ' % s ' in string _STR:0_ with tablename , write it to self.stdout [ self . stdout ] .
1
"Cache table '%s' created." ||| _STR:0_
example# 3051
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 3052
from django.db [ django . db ] import connections and DEFAULT_DB_ALIAS into default name space .
0
example# 3053
derive the class Command from the BaseCommand base class .
0
example# 3054
help is a tuple containing a string _STR:0_ .
1
"Runs the command-line client for specified database, or the default database if none is provided." ||| _STR:0_
example# 3055
requires_system_checks is boolean False .
0
example# 3056
define the method add_arguments with self and parser .
0
example# 3057
call the method parser.add_argument [ parser . add_argument ] with arguments : string _STR:0_ , action set to string _STR:1_ , dest set to string _STR:2_ ,
3
'--database' ||| _STR:0_
'database' ||| _STR:2_
'store' ||| _STR:1_
example# 3058
default set to DEFAULT_DB_ALIAS and help set to string _STR:0_ . define the method handle with arguments self and unpacked dictionary options .
1
'Nominates a database onto which to open a shell. Defaults to the "default" database.' ||| _STR:0_
example# 3059
get the value under the _STR:0_ key of the options dictionary , use it as a key to access the element under the connections dictionary , substitute it for connection .
1
'database' ||| _STR:0_
example# 3060
try ,
0
example# 3061
call the method connection.client.runshell [ connection . client . runshell ] .
0
example# 3062
if OSError exception is caught ,
0
example# 3063
raise an CommandError exception with an argument string _STR:0_ ,
1
'You appear not to have the %r program installed or on your path.' ||| _STR:0_
example# 3064
from django.core.management.base [ django . core . management . base ] import BaseCommand into default name space .
0
example# 3065
define the function module_to_dict with 2 arguments : module and omittable as a lambda function with an argument k ,
0
example# 3066
return dictionary created out of tuple elements k and printable representation of v ,
0
example# 3067
for every k and v in return value of the method module.__dict__.items [ module . __dict__ . items ] , only if result of the method omittable called with an argument k is false . derive the class Command from the BaseCommand base class .
0
example# 3068
requires_system_checks is boolean False .
0
example# 3069
define the method add_arguments with 2 arguments self and parser .
0
example# 3070
call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:0_ , action set to string _STR:1_ , dest set to string _STR:2_ ,
3
'--all' ||| _STR:0_
'store_true' ||| _STR:1_
'all' ||| _STR:2_
example# 3071
default set to boolean False and help set to a string _STR:0_ define the method handle with arguments self and unpacked dictionary options .
1
'Display all settings, regardless of their value. Default values are prefixed by "###".' ||| _STR:0_
example# 3072
from django.conf [ django . conf ] import settings , global_settings into default name space .
0
example# 3073
call the method settings._setup [ settings . _setup ] .
0
example# 3074
call the function module_to_dict with an argument settings._wrapped [ settings . _wrapped ] , substitute it for user_settings .
0
example# 3075
call the function module_to_dict with an argument global_settings , substitute it for default_settings .
0
example# 3076
output is an empty string .
0
example# 3077
for every key in sorted list of user_settings ,
0
example# 3078
if key is not contained in default_settings ,
0
example# 3079
replace ' % s ' in string _STR:0_ with key and value under the key key of the user_setting dictionary , append it to the output .
1
"%s = %s  ###" ||| _STR:0_
example# 3080
otherwise if value under the key key of the user_settings dictionary is not equal to the value under the key key of the default_settings dictionary ,
0
example# 3081
replace ' % s ' in string _STR:0_ with key and value under the key key of the user_setting dictionary , append it to the output .
1
"%s = %s" ||| _STR:0_
example# 3082
otherwise if value under the key _STR:0_ of the options dictionary is true ,
1
'all' ||| _STR:0_
example# 3083
replace ' % s ' in string _STR:0_ with key and value under the key key of the user_setting dictionary , append it to the output .
1
"### %s = %s" ||| _STR:0_
example# 3084
join elements of the output into a string , separated by newlies , return the string .
0
example# 3085
import module warnings .
0
example# 3086
from collections import OrderedDict into default name space .
0
example# 3087
from django.apps [ django . apps ] import apps into default name space .
0
example# 3088
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 3089
from django.core [ django . core ] import serializers into default name space .
0
example# 3090
from django.db [ django . db ] import router and DEFAULT_DB_ALIAS into default name space .
0
example# 3091
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
0
example# 3092
derive the class Command from the BaseCommand base class .
0
example# 3093
help is a tuple containing a string _STR:0_
1
"Output the contents of the database as a fixture of the given " ||| _STR:0_
example# 3094
_STR:0_ . define the method add_arguments with arguments self and parser .
1
"format (using each model's default manager unless --all is specified)." ||| _STR:0_
example# 3095
call the method parser.add_argument [ parser . add_argument ] with 4 arguments : string _STR:0_ , metavar set to string _STR:1_ ,
2
'app_label[.ModelName]' ||| _STR:1_
'args' ||| _STR:0_
example# 3096
nargs set to _STR:0_ and help is a string _STR:1_ . call the method parser.add_argument [ parser . add_argument ] with 4 arguments : string _STR:2_ , default set to string _STR:3_ ,
4
'*' ||| _STR:0_
'json' ||| _STR:3_
'--format' ||| _STR:2_
'Restricts dumped data to the specified app_label or app_label.ModelName.' ||| _STR:1_
example# 3097
dest set to _STR:0_ and help is a string _STR:1_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:2_ , default set to None , dest set to _STR:3_ ,
4
'--indent' ||| _STR:2_
'Specifies the output serialization format for fixtures.' ||| _STR:1_
'indent' ||| _STR:3_
'format' ||| _STR:0_
example# 3098
type set to int and help is a string _STR:0_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:1_ , default set to string _STR:2_ , dest set to _STR:3_ ,
4
'--database' ||| _STR:1_
'Specifies the indent level to use when pretty-printing output.' ||| _STR:0_
'database' ||| _STR:3_
'store' ||| _STR:2_
example# 3099
add set to DEFAULT_DB_ALIAS and help is _STR:0_ . call the method parser.add_argument [ parser . add_argument ] with 6 arguments : string _STR:1_ , string _STR:2_ , dest set to _STR:3_ , action set to _STR:4_ ,
5
'--exclude' ||| _STR:2_
'-e' ||| _STR:1_
'append' ||| _STR:4_
'exclude' ||| _STR:3_
'Nominates a specific database to dump fixtures from. Defaults to the "default" database.' ||| _STR:0_
example# 3100
default is a an empty list and help is a string _STR:0_ . call the method parser.add_argument [ parser . add_argument ] with 6 arguments : string _STR:1_ , string _STR:2_ , action is string _STR:3_ , dest is string _STR:4_ ,
5
'--natural' ||| _STR:2_
'-n' ||| _STR:1_
'use_natural_keys' ||| _STR:4_
'store_true' ||| _STR:3_
'(use multiple --exclude to exclude multiple apps/models).' ||| _STR:0_
example# 3101
default is boolean False and help is a string _STR:0_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:1_ , action set to string _STR:2_ ,
3
'Use natural keys if they are available (deprecated: use --natural-foreign instead).' ||| _STR:0_
'store_true' ||| _STR:2_
'--natural-foreign' ||| _STR:1_
example# 3102
dest is string _STR:0_ , default is boolean False and help is a string _STR:1_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:2_ , action set to _STR:3_ ,
4
'store_true' ||| _STR:3_
'Use natural foreign keys if they are available.' ||| _STR:1_
'--natural-primary' ||| _STR:2_
'use_natural_foreign_keys' ||| _STR:0_
example# 3103
dest is _STR:0_ , default is boolean False and help is a string _STR:1_ . call the method parser.add_argument [ parser . add_argument ] with 6 arguments : string _STR:2_ , string _STR:3_ , action set to _STR:4_ ,
5
'-a' ||| _STR:2_
'use_natural_primary_keys' ||| _STR:0_
'--all' ||| _STR:3_
'store_true' ||| _STR:4_
'Use natural primary keys if they are available.' ||| _STR:1_
example# 3104
dest is _STR:0_ , default is boolean False and help is a string _STR:1_ . call the method parser.add_argument [ parser . add_argument ] with 3 arguments : string _STR:2_ , dest set to string _STR:3_ ,
4
'primary_keys' ||| _STR:3_
'--pks' ||| _STR:2_
'use_base_manager' ||| _STR:0_
'(use multiple --exclude to exclude multiple apps/models).' ||| _STR:1_
example# 3105
and help is a string _STR:0_ _STR:1_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:2_ , string _STR:3_ , default is None , dest set to string _STR:4_ ,
5
'output' ||| _STR:4_
'--output' ||| _STR:3_
"Only dump objects with given primary keys. Accepts a comma separated list of keys. " ||| _STR:0_
'-o' ||| _STR:2_
"This option will only work when you specify one model." ||| _STR:1_
example# 3106
and help is a string _STR:0_ . define the method handle with arguments self , unpacked list app_labels and unpacked dictionary options .
1
'Specifies file to which the output is written.' ||| _STR:0_
example# 3107
get the value under the _STR:0_ key of the options dictionary , substitute the result for format .
1
'format' ||| _STR:0_
example# 3108
get the value under the _STR:0_ key of the options dictionary , substitute the result for indent .
1
'indent' ||| _STR:0_
example# 3109
get the value under the _STR:0_ key of the options dictionary , substitute the result for database .
1
'database' ||| _STR:0_
example# 3110
get the value under the _STR:0_ key of the options dictionary , substitute the result for exclude .
1
'exclude' ||| _STR:0_
example# 3111
get the value under the _STR:0_ key of the options dictionary , substitute the result for output .
1
'output' ||| _STR:0_
example# 3112
get the value under the _STR:0_ key of the options dictionary , substitute the result for traceback .
1
'traceback' ||| _STR:0_
example# 3113
get the value under the _STR:0_ key of the options dictionary , substitute the result for use_natural_keys .
1
'use_natural_keys' ||| _STR:0_
example# 3114
if use_natural_keys is true ,
0
example# 3115
call the function warnings.warn [ warnings . warn ] with an argument string _STR:0_ ,
1
"``--natural`` is deprecated; use ``--natural-foreign`` instead." ||| _STR:0_
example# 3116
and RemovedInDjango19Warning . get the value under the _STR:0_ key of the options dictionary , substitute the result for use_natural_foreign_keys .
1
' use_natural_foreign_keys' ||| _STR:0_
example# 3117
get the value under the _STR:0_ key of the options dictionary , substitute the result for use_natural_primary_keys .
1
'use_natural_primary_keys' ||| _STR:0_
example# 3118
get the value under the _STR:0_ key of the options dictionary , substitute the result for use_base_manager .
1
'use_base_manager' ||| _STR:0_
example# 3119
get the value under the _STR:0_ key of the options dictionary , substitute the result for pks .
1
'primary_keys' ||| _STR:0_
example# 3120
if pks is true ,
0
example# 3121
split string pks by _STR:0_ , substitute the result for primary_keys .
1
',' ||| _STR:0_
example# 3122
if not ,
0
example# 3123
primary_keys is an empty list .
0
example# 3124
excluded_apps is an empty set .
0
example# 3125
excluded_models is an empty set .
0
example# 3126
for every exclude in excludes ,
0
example# 3127
if _STR:0_ is contained in exclude ,
1
'.' ||| _STR:0_
example# 3128
try ,
0
example# 3129
call the method apps.get_model [ apps . get_model ] with exclude as an argument , substitute it for model .
0
example# 3130
if LookupError exception is caught ,
0
example# 3131
raise an CommandError exception with an argument string _STR:0_ , where ' % s ' is replaced with exclude .
1
'Unknown model in excludes: %s' ||| _STR:0_
example# 3132
add model to excluded_models set .
0
example# 3133
if not ,
0
example# 3134
try ,
0
example# 3135
call the method apps.get_app_config [ apps . get_app_config ] with an argument exclude , substitute the result for app_config .
0
example# 3136
if LookupError exception is caught ,
0
example# 3137
raise CommandError with an argument string _STR:0_ , where ' % s ' is replaced with exclude .
1
'Unknown app in excludes: %s' ||| _STR:0_
example# 3138
add app_config to excluded_apps set .
0
example# 3139
if length of app_labels equals integer 0 ,
0
example# 3140
if primary_keys is true ,
0
example# 3141
raise an CommandError exception with an argument string _STR:0_ .
1
"You can only use --pks option with one model" ||| _STR:0_
example# 3142
app_list is an instance of OrderedDict class , created with an argument a tuple containing elements : app_config and None ,
0
example# 3143
for every app_config in return value of the method apps.get_app_configs [ apps . get_app_configs ] , only if app_config.models_module [ app_config . models_module ] is not None , and app_config is not contained in excluded_apps . if not ,
0
example# 3144
if length of app_labels is greater than integer 1 and primary_keys is true ,
0
example# 3145
raise an CommandError exception with an argument string _STR:0_ .
1
"You can only use --pks option with one model" ||| _STR:0_
example# 3146
app_list is an instance of a class OrderedDict .
0
example# 3147
for every label in app_labels ,
0
example# 3148
try ,
0
example# 3149
split label by _STR:0_ , assign the result to app_label and model_label , respectively .
1
'.' ||| _STR:0_
example# 3150
try ,
0
example# 3151
call the method apps.get_app_config [ apps . get_app_config ] with an argument app_label , substitute the result for app_config .
0
example# 3152
if LookupError exception is caught ,
0
example# 3153
raise CommandError with an argument string _STR:0_ , where ' % s ' is replaced with exclude .
1
'Unknown app in excludes: %s' ||| _STR:0_
example# 3154
if app_config.models_module [ app_config . models_module ] is None or app_config is contained in excluded_apps ,
0
example# 3155
skip this loop iteration .
0
example# 3156
try ,
0
example# 3157
call the method app_config.get_model [ app_config . get_model ] with an argument model_label , substitute the result for model .
0
example# 3158
if LookupError exception is caught ,
0
example# 3159
raise CommandError with an argument string _STR:0_ , where ' % s ' is replaced with app_label and model_label , respectively .
1
'Unknown model: %s' ||| _STR:0_
example# 3160
call the method app_list.setdefault [ app_list . setdefault ] with 2 arguments app_config and an empty list , substitute the result for app_list_value .
0
example# 3161
if app_list_value is not None ,
0
example# 3162
if mode is not contained in app_list_value ,
0
example# 3163
append model to app_list_value .
0
example# 3164
if ValueError exception is caught ,
0
example# 3165
if primary_keys is true ,
0
example# 3166
raise an CommandError exception with an argument string _STR:0_ .
1
"You can only use --pks option with one model" ||| _STR:0_
example# 3167
substitute label for app_label .
0
example# 3168
try ,
0
example# 3169
call the method apps.get_app_config [ apps . get_app_config ] with an argument app_label , substitute the result for app_config .
0
example# 3170
if LookupError exception is caught ,
0
example# 3171
raise CommandError with an argument string _STR:0_ , where ' % s ' is replaced with app_label .
1
'Unknown application: %s' ||| _STR:0_
example# 3172
if app_config.models_module [ app_config . models_module ] is None or app_config is contained in excluded_apps
0
example# 3173
skip this loop iteration .
0
example# 3174
value under the app_config key of the app_list is None .
0
example# 3175
if format is not contained in return value of the method serializers.get_public_serializer_formats [ serializers . get_public_serializer_formats ] ,
0
example# 3176
try ,
0
example# 3177
call the method serializers.get_serializer [ serializers . get_serializer ] with an argument format .
0
example# 3178
if serializers.SerializerDoesNotExist [ serializers . SerializerDoesNotExist ] exception is caught ,
0
example# 3179
do nothing .
0
example# 3180
raise CommandError with an argument string _STR:0_ , where ' % s ' is replaced with format .
1
'Unknown serialization format: %s' ||| _STR:0_
example# 3181
define the function get_objects .
0
example# 3182
call the method app_list.items [ app_list . items ] , use the result as an argument for the call to the function sort_dependencies , for every model in result ,
0
example# 3183
if model is contained in excluded_models ,
0
example# 3184
skip this loop iteration .
0
example# 3185
if model._meta.proxy [ model . _meta . proxy ] is false and return value of the function router.allow_migrate [ router . allow_migrate ] called with arguments using and model is true ,
0
example# 3186
if use_base_manager is true ,
0
example# 3187
substitute model._base_manager [ model . _base_manager ] for objects .
0
example# 3188
if not ,
0
example# 3189
substitute model._default_manager [ model . _default_manager ] for objects .
0
example# 3190
call the method objects.using [ objects . using ] with an argument using , call the method order_by on the result with an argument model._meta.pk.name [ model . _meta . pk . name ] ,
0
example# 3191
substitute the result for queryset . if primary_keys is true ,
0
example# 3192
call the method queryset.filter [ queryset . filter ] with an argument pk__in set to primary_keys , substitute the result for queryset .
0
example# 3193
for every obj in result of the method queryset.iterator [ queryset . iterator ] ,
0
example# 3194
yield obj , as an return value of the generator .
0
example# 3195
try ,
0
example# 3196
self.stdout.ending [ self . stdout . ending ] is None .
0
example# 3197
open the output file in writing mode if output is true , assign the file descriptor to stream , otherwise stream is None .
0
example# 3198
try ,
0
example# 3199
call the method serializers.serialize [ serializers . serialize ] with 6 arguments : format , result of the function get_objects , indent set to indent ,
0
example# 3200
use_natural_foreign_keys set to use_natural_foreign_keys , use_natural_primary_keys set to use_natural_primary_keys , and stream set to stream , if the stream is true , otherwise stream set to self.stdout [ self . stdout ] . finally perform ,
0
example# 3201
if stream is true ,
0
example# 3202
close the file stream .
0
example# 3203
if Exception , renamed to e , exception is caught ,
0
example# 3204
if show_traceback is true ,
0
example# 3205
raise an exception .
0
example# 3206
raise CommandError with an argument string _STR:0_ , where ' % s ' is replaced with e .
1
"Unable to serialize database: %s" ||| _STR:0_
example# 3207
define the function sort_dependencies with an argument app_list .
0
example# 3208
model_dependencies is an empty list .
0
example# 3209
models is an empty set .
0
example# 3210
for every app_config and model_list in app_list ,
0
example# 3211
if model_list is None ,
0
example# 3212
call the method app_config.get_models [ app_config . get_models ] , substitute the result fr model_list .
0
example# 3213
for every model in model_list ,
0
example# 3214
add model to models set .
0
example# 3215
if model has an _STR:0_ attribute ,
1
'natural_key' ||| _STR:0_
example# 3216
get _STR:0_ attribute of the model.natural_key [ model . natural_key ] , substitute it for deps , if the attribute doesnt exist , deps in an empty list .
1
'dependencies' ||| _STR:0_
example# 3217
if deps is true ,
0
example# 3218
for every dep in deps call the method apps.get_model [ apps . get_model ] with an argument dep , and append the result to the list , substitute it for deps .
0
example# 3219
if not ,
0
example# 3220
deps is an empty list .
0
example# 3221
for every field in model._meta.fields [ model . _meta . fields ] ,
0
example# 3222
if field.rel [ field . rel ] has an _STR:0_ attribute ,
1
'to' ||| _STR:0_
example# 3223
substitute field.rel.to [ field . rel . to ] with rel_model .
0
example# 3224
if rel_model has an attribute _STR:0_ and rel_model is not equal to model ,
1
'natural_key' ||| _STR:0_
example# 3225
append rel_model to deps .
0
example# 3226
for every field in model._meta.many_to_many [ model . _meta . many_to_many ] ,
0
example# 3227
if field.rel.through._meta.auto_created [ field . rel . through . _meta . auto_created ] is true ,
0
example# 3228
substitute field.rel.to [ field . rel . to ] for rel_model .
0
example# 3229
if rel_model has an _STR:0_ attribute and rel_model is not equal to model ,
1
'natural_key' ||| _STR:0_
example# 3230
append rel_model to deps .
0
example# 3231
append a tuple containing 2 elements : model and deps to model_dependencies .
0
example# 3232
call the methof model_dependencies.reverse [ model_dependencies . reverse ] .
0
example# 3233
model_list is an empty list .
0
example# 3234
while model_dependencies is true ,
0
example# 3235
skipped is an empty list .
0
example# 3236
changed is boolean False .
0
example# 3237
while model_dependencies is true ,
0
example# 3238
remove first element from model_dependencies , assign it to model and deps , respectively .
0
example# 3239
found is boolean True .
0
example# 3240
for every d in deps , if d is not contained in models and d is contained in model_list add boolean True to a tuple ,
0
example# 3241
otherwise add boolean False , for every candidate in the result perform following , if candidate is false ,
0
example# 3242
found is boolean False .
0
example# 3243
if found is true ,
0
example# 3244
append model to model_list .
0
example# 3245
changed is boolean True .
0
example# 3246
if not ,
0
example# 3247
append a tuple containing 2 elemetns : model and deps , to skipped .
0
example# 3248
if changed is false ,
0
example# 3249
raise an CommandError with argument : string _STR:0_ , where ' % s ' is replaced with :
1
"Can't resolve dependencies for %s in serialized app list." ||| _STR:0_
example# 3250
model._meta.app_label [ model . _meta . app_label ] and model._meta.object_name [ model . _meta . object_name ] joined into a string , with separator _STR:0_ , result joined into a string , separated by string _STR:1_ for every model and deps in sorted list of elements skipped sorted by key : return value of the lambda function with an argument obj , and result the __name__ field of the first element of obj . substitute skipped for model_dependencies .
2
', ' ||| _STR:1_
'.' ||| _STR:0_
example# 3251
return model_list .
0
example# 3252
import module sys .
0
example# 3253
from importlib import import_module into default name space .
0
example# 3254
from django.apps [ django . apps ] import apps into default name space .
0
example# 3255
from django.db [ django . db ] import connections , router , transaction and DEFAULT_DB_ALIAS into default name space .
0
example# 3256
from django.core.management [ django . core . management ] import call_command into default name space .
0
example# 3257
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 3258
from django.core.management.color [ django . core . management . color ] import no_style into default name space .
0
example# 3259
from django.core.management.sql [ django . core . management . sql ] import sql_flush and emit_post_migrate_signal into default name space .
0
example# 3260
from django.utils.six.moves [ django . utils . six . moves ] import input into default name space .
0
example# 3261
from django.utils [ django . utils ] import six into default name space .
0
example# 3262
derive the class Command from the BaseCommand base class .
0
example# 3263
help is a tuple containing a string : _STR:0_
1
'Removes ALL DATA from the database, including data added during ' ||| _STR:0_
example# 3264
_STR:0_ define the add_arguments with arguments self and parser .
1
'migrations. Unmigrated apps will also have their initial_data fixture reloaded. Does not achieve a "fresh install" state.' ||| _STR:0_
example# 3265
call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:0_ , action set to string _STR:1_ ,
2
'store_false' ||| _STR:1_
'--noinput' ||| _STR:0_
example# 3266
dest set to string _STR:0_ , default set to boolean True , help as a string _STR:1_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:2_ , action set to string _STR:3_ , dest as a string _STR:4_ ,
5
'interactive' ||| _STR:0_
'Tells Django to NOT prompt the user for input of any kind.' ||| _STR:1_
'database' ||| _STR:4_
'store' ||| _STR:3_
'--database' ||| _STR:2_
example# 3267
default set to DEFAULT_DB_ALIAS and help as a string _STR:0_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:1_ , action set to string _STR:2_ ,
3
'--no-initial-data' ||| _STR:1_
'store_false' ||| _STR:2_
'Nominates a database to flush. Defaults to the "default" database.' ||| _STR:0_
example# 3268
dest set to string _STR:0_ , default=True and help as a string _STR:1_ . define the method handle with arguments self and unpacked dictionary options .
2
'Tells Django not to load any initial data after database synchronization.' ||| _STR:1_
'load_initial_data' ||| _STR:0_
example# 3269
substitute value under the _STR:0_ key of the options dictionary for database .
1
'database' ||| _STR:0_
example# 3270
substitute value under the database key of the connections dictionary for connection .
0
example# 3271
substitute value under the _STR:0_ key of the options dictionary for verbosity .
1
'verbosity' ||| _STR:0_
example# 3272
substitute value under the _STR:0_ key of the options dictionary for interactive .
1
'interactive' ||| _STR:0_
example# 3273
get the value _STR:0_ key of the options dictionary , if it exists substitute it for reset_sequences , otherwise reset_sequences is boolean True .
1
'reset_sequences' ||| _STR:0_
example# 3274
get the value _STR:0_ key of the options dictionary , if it exists substitute it for allow_cascade , otherwise allow_cascade is boolean False .
1
'allow_cascade' ||| _STR:0_
example# 3275
get the value _STR:0_ key of the options dictionary , if it exists substitute it for inhibit_post_migrate , otherwise inhibit_post_migrate is boolean False .
1
'inhibit_post_migrate' ||| _STR:0_
example# 3276
call the function no_style , substitute it for self.style [ self . style ] .
0
example# 3277
for every app_config in return value of the method apps.get_app_configs [ apps . get_app_configs ] ,
0
example# 3278
try ,
0
example# 3279
call the function import_module with 2 arguments : string .management and app_config.name [ app_config . name ] .
0
example# 3280
if ImportError exception is caught ,
0
example# 3281
do nothing .
0
example# 3282
call the method sql_flush with 5 arguments : self.style [ self . style ] , connection , only_django set to boolean True ,
0
example# 3283
reset_sequences set to reset_sequences , allow_cascade set to allow_cascade , substitute the result for sql_list . if interactive is true ,
0
example# 3284
request user input from the standard input , assign it o confirm , with the query string : _STR:0_
1
"You have requested a flush of the database." ||| _STR:0_
example# 3285
_STR:0_ _STR:1_Type _STR:2_ to continue , or _STR:3_ to cancel : `` , where ' % s ' is replaced with value under the _STR:4_ key of the connection.settings_dict [ connection . settings_dict ] dictionary . if not ,
5
"Are you sure you want to do this?" ||| _STR:1_
'yes' ||| _STR:2_
'NAME' ||| _STR:4_
'no' ||| _STR:3_
"This will IRREVERSIBLY DESTROY all data currently in the %r database, and return each table to an empty state." ||| _STR:0_
example# 3286
confirm is a string _STR:0_ .
1
'yes' ||| _STR:0_
example# 3287
if confirm equals a string _STR:0_ ,
1
'yes' ||| _STR:0_
example# 3288
try ,
0
example# 3289
call the method transaction.atomic [ transaction . atomic ] with 2 arguments : using set to database , savepoint set to connection.features.can_rollback_ddl [ connection . features . can_rollback_ddl ] ,
0
example# 3290
with the result , call the method connection.cursor [ connection . cursor ] , with the result as cursor ,
0
example# 3291
for every sql in sql_list ,
0
example# 3292
call the method cursor.execute [ cursor . execute ] with an argument sql .
0
example# 3293
if Exception , renamed to e , exception is caught ,
0
example# 3294
new_msg is a tuple containing a string : _STR:0_
1
"Database %s couldn't be flushed. Possible reasons:\n" ||| _STR:0_
example# 3295
_STR:0_ _STR:1_ _STR:2_ , where ' % s ' is replaced by value under the _STR:3_ key of the connection.settings_dict [ connection . settings_dict ] dictionary and e. call the function six.reraise [ six . reraise ] with 3 arguments : CommandError , CommandError created with argument new_msg ,
4
"The full error: %s" ||| _STR:2_
"  * The SQL was invalid.\nHint: Look at the output of 'django-admin.py sqlflush'. That's the SQL this command wasn't able to run.\n" ||| _STR:1_
"  * The database isn't running or isn't configured correctly.\n  * At least one of the expected database tables doesn't exist.\n" ||| _STR:0_
'NAME' ||| _STR:3_
example# 3296
and third element of the return value of the function sys.exc_info [ sys . exc_info ] . if inhibit_post_migrate is false ,
0
example# 3297
call the method self.emit_post_migrate [ self . emit_post_migrate ] with arguments verbosity , interactive and database .
0
example# 3298
if value under the _STR:0_ key of the options dictionary is true ,
1
'load_initial_data' ||| _STR:0_
example# 3299
call the function call_command with 3 arguments : string _STR:0_ , string _STR:1_ and unpacked dictionary options .
2
'loaddata' ||| _STR:0_
'initial_data' ||| _STR:1_
example# 3300
if not ,
0
example# 3301
write string _STR:0_ to self.stdout [ self . stdout ] stream .
1
"Flush cancelled.\n" ||| _STR:0_
example# 3302
class static method ,
0
example# 3303
define the method emit_post_migrate with arguments verbosity , interactive and database .
0
example# 3304
all_models is an empty list .
0
example# 3305
for every app_config in return value of the method apps.get_app_configs [ apps . get_app_configs ] ,
0
example# 3306
call the method router.get_migratable_models [ router . get_migratable_models ] with arguments app_config , database and include_auto_created set to boolean True ,
0
example# 3307
extend all_models list with the result . call the function emit_post_migrate_signal with 4 arguments : all_models converted into a set , verbosity , interactive and database .
0
example# 3308
from __future__ import unicode_literals into default name space .
0
example# 3309
from collections import OrderedDict into default name space .
0
example# 3310
import module keyword .
0
example# 3311
import module re .
0
example# 3312
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 3313
from django.db [ django . db ] import connections and DEFAULT_DB_ALIAS into default name space .
0
example# 3314
derive the class Command from the BaseCommand base class .
0
example# 3315
help is an string _STR:0_ .
1
"Introspects the database tables in the given database and outputs a Django model module." ||| _STR:0_
example# 3316
requires_system_checks is boolean False .
0
example# 3317
db_module is a string _STR:0_ .
1
'django.db' ||| _STR:0_
example# 3318
define the method add_arguments with arguments self and parser .
0
example# 3319
call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:0_ , action set to string _STR:1_ , dest as a string _STR:2_ ,
3
'--database' ||| _STR:0_
'database' ||| _STR:2_
'store' ||| _STR:1_
example# 3320
default set to DEFAULT_DB_ALIAS and help as a string _STR:0_ . define the method handle with 2 arguments : self and unpacked dictionary options .
1
'Nominates a database to introspect. Defaults to using the "default" database.' ||| _STR:0_
example# 3321
try ,
0
example# 3322
for every line in return value of the method self.handle_inspection [ self . handle_inspection ] called with an argument options ,
0
example# 3323
append new line to line , write it to self.stdout [ self . stdout ] stream .
0
example# 3324
if NotImplementedError exception is caught ,
0
example# 3325
raise an CommandError exception with an argument _STR:0_ .
1
"Database inspection isn't supported for the currently selected database backend." ||| _STR:0_
example# 3326
define the method handle_inspection with 2 argument : self and options .
0
example# 3327
get value under the _STR:0_ key of the options dictionary , use it as a key to get the value from the connections dictionary ,
1
'database' ||| _STR:0_
example# 3328
substitute the result for connection . get the value under the _STR:0_ key of the options dictionary , substitute it for table_name_filter .
1
'table_name_filter' ||| _STR:0_
example# 3329
table2model is a lambda function with an argument table_name , return value is the return value of the re.sub [ re . sub ] method ,
0
example# 3330
called with 3 arguments : raw string _STR:0_ , empty string and result of the method table_name.title [ table_name . title ] . strip_prefix is a lambda function with an argument s , return value is s without the first element if s starts with string _STR:1_ ' ,
2
'[^a-zA-Z0-9]' ||| _STR:0_
'u' ||| _STR:1_
example# 3331
otherwise returns s. call the method connection.cursor [ connection . cursor ] , with the result as cursor ,
0
example# 3332
yield string _STR:0_ as the result .
1
"# This is an auto-generated Django model module." ||| _STR:0_
example# 3333
yield string _STR:0_ as the result .
1
"# You'll have to do the following manually to clean this up:" ||| _STR:0_
example# 3334
yield string _STR:0_ as the result .
1
"#   * Rearrange models' order" ||| _STR:0_
example# 3335
yield string _STR:0_ as the result .
1
"#   * Make sure each model has one field with primary_key=True" ||| _STR:0_
example# 3336
yield string _STR:0_ as the result .
1
"#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table" ||| _STR:0_
example# 3337
yield string _STR:0_ as the result .
1
"# Feel free to rename the models, but don't rename db_table values or field names." ||| _STR:0_
example# 3338
yield string _STR:0_ as the result .
1
"#" ||| _STR:0_
example# 3339
yield string _STR:0_ as the result .
1
"# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [app_label]'" ||| _STR:0_
example# 3340
yield string _STR:0_ as the result .
1
"# into your database." ||| _STR:0_
example# 3341
yield string _STR:0_ as the result .
1
"from __future__ import unicode_literals" ||| _STR:0_
example# 3342
yield and empty string as the result .
0
example# 3343
yield string _STR:0_ % self.db_module [ self . db_module ] as the result , where `` % s '' is replaced with self.db_module [ self . db_module ] .
1
'from %s import models' ||| _STR:0_
example# 3344
known_models is an empty list .
0
example# 3345
for every table_name in return value of the method connection.introspection.table_names [ connection . introspection . table_names ] called with an argument cursor ,
0
example# 3346
if table_name_filter is not None and table_name_filter is callable object ,
0
example# 3347
call the function table_name_filter with an argument table_name , if it evaluates to true ,
0
example# 3348
skip this loop iteration ,
0
example# 3349
yield and empty string as the result .
0
example# 3350
yield and empty string as the result .
0
example# 3351
yield string _STR:0_ % self.db_module [ self . db_module ] as the result , where `` % s '' is replaced with result of the call to the function ,
1
'from %s import models' ||| _STR:0_
example# 3352
table2model with an argument table_name . call the function table2model with an argument table_name , append the result to known_models .
0
example# 3353
try ,
0
example# 3354
call the method connection.introspection.get_relations [ connection . introspection . get_relations ] with 2 arguments cursor , table_name and substitute the result for relations .
0
example# 3355
if NotImplementedError exception is caught ,
0
example# 3356
relations is an empty dictionary .
0
example# 3357
try ,
0
example# 3358
call the method connection.introspection.get_relations [ connection . introspection . get_relations ] with 2 arguments cursor , table_name and substitute the result for indexes .
0
example# 3359
if NotImplementedError exception is caught ,
0
example# 3360
indexes is an empty dictionary .
0
example# 3361
used_column_names is an empty list .
0
example# 3362
for every i and row in enumerated result of the method connection.introspection.get_table_description [ connection . introspection . get_table_description ] called with arguments : cursor and table_name ,
0
example# 3363
comment_notes is an empty list .
0
example# 3364
extra_params is an instance of the class OrderedDict .
0
example# 3365
substitute first element of row for column_name .
0
example# 3366
if i is contained in relations , is_relation is boolean True , otherwise is_relation is boolean False .
0
example# 3367
call the method self.normalize_col_name [ self . normalize_col_name ] with 3 arguments column_name , used_column_names , is_relation , assign the result to att_name , params and notes , respectively .
0
example# 3368
add params to extra_params dictionary .
0
example# 3369
extend comment_notes list with notes .
0
example# 3370
append att_name to used_column_names list .
0
example# 3371
if column_name is contained in indexes ,
0
example# 3372
if value under the _STR:0_ key of the dictionary contained under the column_name key of the dictionary indexes is true ,
1
'primary_key' ||| _STR:0_
example# 3373
value under the _STR:0_ key of the extra_params dictionary is boolean True ,
1
'primary_key' ||| _STR:0_
example# 3374
otherwise if , if value under the _STR:0_ key of the dictionary contained under the column_name key of the dictionary indexes is true ,
1
'unique' ||| _STR:0_
example# 3375
value under the _STR:0_ key of the extra_params dictionary is boolean True ,
1
'unique' ||| _STR:0_
example# 3376
if is_relation is true ,
0
example# 3377
if second element of the i-th row of relations equals table_name , rel_to is string _STR:0_ ,
1
'self' ||| _STR:0_
example# 3378
otherwise call the method table2model with second element of the i-th row of relations and substitute it for rel_to . if rel_to is contained in known_models ,
0
example# 3379
append rel_to to string 'ForeignKey ( , substitute the result for field_type .
0
example# 3380
if not ,
0
example# 3381
append rel_to to string _STR:0_ '' to it , substitute the result for field_type .
1
'ForeignKey(, append character "' ||| _STR:0_
example# 3382
if not ,
0
example# 3383
call the method self.get_field_type [ self . get_field_type ] with 3 arguments connection , table_name and row , assign the result to field_type , field_params ,
0
example# 3384
field_notes , respectively . add field_params to extra_params dictionary .
0
example# 3385
extend comment_notes list with field_notes .
0
example# 3386
append _STR:0_ to field_type .
1
'(' ||| _STR:0_
example# 3387
if att_name equals string _STR:0_ and extra_params equals a dictionary with 1 entry : boolean True for _STR:1_ ,
2
'id' ||| _STR:0_
'primary_key' ||| _STR:1_
example# 3388
if field_type equals a string _STR:0_ ,
1
'AutoField(' ||| _STR:0_
example# 3389
skip this loop iteration .
0
example# 3390
otherwise if field_type equals a string _STR:0_ and connection.features.can_introspect_autofield [ connection . features . can_introspect_autofield ] is false ,
1
'IntegerField(' ||| _STR:0_
example# 3391
append string _STR:0_ to comment_notes .
1
'AutoField?' ||| _STR:0_
example# 3392
if seventh element of row is true ,
0
example# 3393
if field_type equals a string _STR:0_ ,
1
'BooleanField(' ||| _STR:0_
example# 3394
field_type is a string _STR:0_
1
'NullBooleanField(' ||| _STR:0_
example# 3395
if not ,
0
example# 3396
value under the _STR:0_ key of the extra_params dictionary is boolean True .
1
'blank' ||| _STR:0_
example# 3397
if field_type is not equal to string _STR:0_ or string _STR:1_ ,
2
'TextField(' ||| _STR:0_
'CharField(' ||| _STR:1_
example# 3398
value under the _STR:0_ key of the extra_params dictionary is boolean True .
1
'null' ||| _STR:0_
example# 3399
field_desc is a string _STR:0_ , where ' % s ' is replaced with : att_name , an empty string if _STR:1_ is contained in field_type ,
2
'%s = %s%s' ||| _STR:0_
'.' ||| _STR:1_
example# 3400
or with string _STR:0_ if it is not and field_type . if extra_params is true ,
1
'models.' ||| _STR:0_
example# 3401
if field_desc doesnt end with _STR:0_ ,
1
'(' ||| _STR:0_
example# 3402
append string _STR:0_ to field_desc .
1
', ' ||| _STR:0_
example# 3403
in string _STR:0_ replace ' % s ' with k and return value of the function strip_prefix with an argument printable representation of v ,
1
'%s=%s' ||| _STR:0_
example# 3404
for every k and v in return value of the extra_params.items [ extra_params . items ] method , join all results into a string separated by a string _STR:0_ , substitute it for field_desc . append string _STR:1_ to field_desc .
2
')' ||| _STR:1_
', ' ||| _STR:0_
example# 3405
if comment_notes is true ,
0
example# 3406
join elements of comment_notes into a string , separated by whitespaces , append it to the string _STR:0_ , append the result to field_desc .
1
' #' ||| _STR:0_
example# 3407
yield string _STR:0_ , where ' % s ' is replaced with field_desc .
1
'    %s' ||| _STR:0_
example# 3408
for meta_line in return value of the method self.get_meta [ self . get_meta ] called with an argument table_name .
0
example# 3409
yield meta_line as the result .
0
example# 3410
define the method normalize_col_name with 4 arguments : self , col_name , used_column_names and is_relation .
0
example# 3411
field_params is an empty dictionary .
0
example# 3412
field_notes is an empty list .
0
example# 3413
convert col_name to lowercase , substitute the result for new_name .
0
example# 3414
if new_name is not equal to col_name ,
0
example# 3415
append string _STR:0_ to field_notes .
1
'Field name made lowercase.' ||| _STR:0_
example# 3416
if is_relation ,
0
example# 3417
if new_name ends with string _STR:0_ ,
1
'_id' ||| _STR:0_
example# 3418
substitute new_name , without the last 3 elements for new_name .
0
example# 3419
if not ,
0
example# 3420
substitute col_name for value under the _STR:0_ key of the field_params dictionary .
1
'db_column' ||| _STR:0_
example# 3421
cal the method re.subn [ re . subn ] with 3 arguments : raw string _STR:0_ , string _STR:1_ and new_name .
2
'_' ||| _STR:1_
'\W' ||| _STR:0_
example# 3422
if num_repl is greater than integer 0 ,
0
example# 3423
append string _STR:0_ to field_notes .
1
'Field renamed to remove unsuitable characters.' ||| _STR:0_
example# 3424
call the method new_name.find [ new_name . find ] , with an argument string _STR:0_ , if it evaluates to greater or equal than integer 0 ,
1
'__' ||| _STR:0_
example# 3425
while the result of the method new_name.find [ new_name . find ] , called with an argument string _STR:0_ is greater or equals integer 0 ,
1
'__' ||| _STR:0_
example# 3426
replace all the occurrences of _STR:0_ with _STR:1_ in new_name .
2
'__' ||| _STR:0_
'_' ||| _STR:1_
example# 3427
convert col_name to lowercase , on the result call the method find with an argument string _STR:0_ , if the result is greater of equal to integer 0 ,
1
'__' ||| _STR:0_
example# 3428
append string _STR:0_ to field_notes .
1
"Field renamed because it contained more than one '_' in a row." ||| _STR:0_
example# 3429
if new_name starts with a string _STR:0_ ,
1
'_' ||| _STR:0_
example# 3430
convert new_name to a string and append it to string _STR:0_ , substitute the result for new_name .
1
'field' ||| _STR:0_
example# 3431
append string _STR:0_ to field_notes .
1
"Field renamed because it started with '_'." ||| _STR:0_
example# 3432
if new_name ends with a string _STR:0_ ,
1
'_' ||| _STR:0_
example# 3433
convert new_name to a string and append string _STR:0_ to it , substitute the result for new_name .
1
'field' ||| _STR:0_
example# 3434
append string _STR:0_ to field_notes .
1
"Field renamed because it ended with '_'." ||| _STR:0_
example# 3435
call the method keyword.iskeyword [ keyword . iskeyword ] with an argument new_name , if it evaluates to true ,
0
example# 3436
append string _STR:0_ to new_name .
1
'_field' ||| _STR:0_
example# 3437
append string _STR:0_ to field_notes .
1
"Field renamed because it was a Python reserved word." ||| _STR:0_
example# 3438
if first element of new_name is digit ,
0
example# 3439
convert new_name to a string and append it to string _STR:0_ , substitute the result for new_name .
1
'number_' ||| _STR:0_
example# 3440
append string _STR:0_ to field_notes .
1
"Field renamed because it wasn't a valid Python identifier." ||| _STR:0_
example# 3441
if new_name is contained in used_column_names ,
0
example# 3442
num is an integer 0 .
0
example# 3443
in string _STR:0_ , replace ' % s ' with new_name and _STR:1_ with num , while the result is contained in used_column_names ,
2
'%s_%d' ||| _STR:0_
'%d' ||| _STR:1_
example# 3444
increment num by one .
0
example# 3445
in string _STR:0_ , replace ' % s ' with new_name and _STR:1_ with num , substitute the result for new_name .
2
'%s_%d' ||| _STR:0_
'%d' ||| _STR:1_
example# 3446
append string _STR:0_ to field_notes .
1
"Field renamed because of name conflict." ||| _STR:0_
example# 3447
if col_name is not equal to new_name and field_notes is true ,
0
example# 3448
substitute col_name for value under the _STR:0_ key of the field_params dictionary .
1
'db_column' ||| _STR:0_
example# 3449
return new_name , field_params and field_notes .
0
example# 3450
define the method get_field_type with 4 arguments : self , connection , table_name and row .
0
example# 3451
field_params is an instance of a class OrderedDict .
0
example# 3452
field_notes is an empty list .
0
example# 3453
try ,
0
example# 3454
call the method connection.introspection.get_field_type [ connection . introspection . get_field_type ] with 2 arguments : second element of row and row , substitute the result for field_type .
0
example# 3455
if KeyError exception is caught ,
0
example# 3456
field_type is a string _STR:0_ .
1
'TextField' ||| _STR:0_
example# 3457
append a string _STR:0_ to field_notes .
1
'This field type is a guess.' ||| _STR:0_
example# 3458
if field_type is a tuple ,
0
example# 3459
substitute field_type for field_type and new_params , respectively .
0
example# 3460
call the method field_params.update [ field_params . update ] with an argument new_params.1 [ new_params . 1 ]
0
example# 3461
if field_type equals a string CharField ' and fourth element of row is true ,
0
example# 3462
convert fourth element of row to an integer , substitute it for value under the _STR:0_ key of the field_params .
1
'max_digits' ||| _STR:0_
example# 3463
if field_type equals a string _STR:0_ ,
1
'DecimalField' ||| _STR:0_
example# 3464
if fifth and sixth elements of row are None ,
0
example# 3465
append string _STR:0_ to field_notes .
1
'max_digits and decimal_places have been guessed, as this database handles decimal fields as float' ||| _STR:0_
example# 3466
if fifth element of row is not None , substitute it for value under the _STR:0_ key of the field_params ,
1
'max_digits' ||| _STR:0_
example# 3467
otherwise , value under the _STR:0_ key of the field_params is integer 10. if sixth element of row is not None , substitute it for value under the _STR:1_ key of the field_params ,
2
'decimal_places' ||| _STR:1_
'max_digits' ||| _STR:0_
example# 3468
otherwise , value under the _STR:0_ key of the field_params is integer 5. if not
1
'decimal_places' ||| _STR:0_
example# 3469
substitute fifth element of row for value under the _STR:0_ key of the field_params .
1
'max_digits' ||| _STR:0_
example# 3470
substitute sixth element of row for value under the _STR:0_ key of the field_params .
1
'decimal_places' ||| _STR:0_
example# 3471
return field_type , field_params and field_notes .
0
example# 3472
define the method get_meta with arguments self and table_name .
0
example# 3473
return the list , containing 4 elements : an empty string , string _STR:0_ , string _STR:1_ ,
2
"        managed = False" ||| _STR:1_
"    class Meta:" ||| _STR:0_
example# 3474
from __future__ import unicode_literals into default name space .
0
example# 3475
import module glob .
0
example# 3476
import module gzip .
0
example# 3477
import module os .
0
example# 3478
import module warnings .
0
example# 3479
import module zipfile .
0
example# 3480
from django.apps [ django . apps ] import apps into default name space .
0
example# 3481
from django.conf [ django . conf ] import settings into default name space .
0
example# 3482
from django.core [ django . core ] import serializers into default name space .
0
example# 3483
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 3484
from django.core.management.color [ django . core . management . color ] import no_style into default name space .
0
example# 3485
from django.db [ django . db ] import connections , router , transaction , DEFAULT_DB_ALIAS , IntegrityError and DatabaseError into default name space .
0
example# 3486
from django.utils [ django . utils ] import lru_cache into default name space .
0
example# 3487
from django.utils.encoding [ django . utils . encoding ] import force_text into default name space .
0
example# 3488
from django.utils.functional [ django . utils . functional ] import cached_property into default name space .
0
example# 3489
from django.utils._os [ django . utils . _os ] import upath into default name space .
0
example# 3490
from itertools import product into default name space .
0
example# 3491
try ,
0
example# 3492
import bz2 .
0
example# 3493
has_bz2 is boolean True .
0
example# 3494
if ImportError exception is caught ,
0
example# 3495
has_bz2 is boolean False .
0
example# 3496
derive the class Command from the BaseCommand base class .
0
example# 3497
help is an string _STR:0_ .
1
'Installs the named fixture(s) in the database.' ||| _STR:0_
example# 3498
missing_args_message is a tuple containing a string _STR:0_
1
"No database fixture specified. Please provide the " ||| _STR:0_
example# 3499
_STR:0_ define the method add_arguments with 2 arguments : self and parser .
1
"path of at least one fixture in the command line." ||| _STR:0_
example# 3500
call the method parser.add_argument [ parser . add_argument ] with 4 arguments : string _STR:0_ , metavar set to string _STR:1_ , nargs set to _STR:2_ ,
3
'fixture' ||| _STR:1_
'args' ||| _STR:0_
'+' ||| _STR:2_
example# 3501
and help set to _STR:0_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:1_ , action set to string _STR:2_ , dest as a string _STR:3_ ,
4
'--database' ||| _STR:1_
'database' ||| _STR:3_
'store' ||| _STR:2_
'Fixture labels.' ||| _STR:0_
example# 3502
default set to DEFAULT_DB_ALIAS and help as a string _STR:0_ call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:1_ , action as a string _STR:2_ , dest as a string _STR:3_ ,
4
'--app' ||| _STR:1_
'Nominates a specific database to load fixtures into. Defaults to the "default" database.' ||| _STR:0_
'app_label' ||| _STR:3_
'store' ||| _STR:2_
example# 3503
default set to None , help is a string _STR:0_ . call the method parser.add_argument [ parser . add_argument ] with 6 arguments : string _STR:1_ , string _STR:2_ , action as a string _STR:3_ ,
4
'-i' ||| _STR:2_
'Only look for fixtures in the specified app.' ||| _STR:0_
'store_true' ||| _STR:3_
'--ignorenonexistent' ||| _STR:1_
example# 3504
dest as a string _STR:0_ , default set to boolean False and help set to string _STR:1_ . define the method handle with 3 arguments : self , unpacked list fixture_labels and unpacked dictionary options .
2
'ignore' ||| _STR:0_
'Ignores entries in the serialized data for fields that do not currently exist on the model.' ||| _STR:1_
example# 3505
get the value under the _STR:0_ key of the options dictionary , substitute it for self.ignore [ self . ignore ] .
1
'ignore' ||| _STR:0_
example# 3506
get the value under the _STR:0_ key of the options dictionary , substitute it for self.database [ self . database ] .
1
'database' ||| _STR:0_
example# 3507
get the value under the _STR:0_ key of the options dictionary , substitute it for self.app_label [ self . app_label ] .
1
'app_label' ||| _STR:0_
example# 3508
get the value under the _STR:0_ key of the options dictionary , if the key exists substitute it for self.hide_empty [ self . hide_empty ] ,
1
'hide_empty' ||| _STR:0_
example# 3509
if not , self.hide_empty [ self . hide_empty ] is boolean False . get the value under the _STR:0_ key of the options dictionary , substitute it for self.verbosity [ self . verbosity ] .
1
'verbosity' ||| _STR:0_
example# 3510
call the method transaction.atomic [ transaction . atomic ] with an argument using set to self.using [ self . using ] , with the result ,
0
example# 3511
call the method self.loaddata [ self . loaddata ] with an argument fixture_labels .
0
example# 3512
call the method transaction.get_autocommit [ transaction . get_autocommit ] with an argument self.using [ self . using ] , if it evaluates to true ,
0
example# 3513
get the value under the self.using [ self . using ] key of the connections dictionary , call the method close on it .
0
example# 3514
define the method loaddata with 2 arguments self and fixture_labels .
0
example# 3515
get the value under the self.using [ self . using ] key of the connections dictionary , substitute it for connection .
0
example# 3516
self.fixture_count [ self . fixture_count ] is integer 0 .
0
example# 3517
self.loaded_object_count [ self . loaded_object_count ] is integer 0 .
0
example# 3518
self.fixture_object_count [ self . fixture_object_count ] is integer 0 .
0
example# 3519
self.models [ self . models ] is an empty set .
0
example# 3520
call the method serializers.get_public_serializer_formats [ serializers . get_public_serializer_formats ] , substitute the result for self.serialization_formats [ self . serialization_formats ] .
0
example# 3521
self.compression_formats [ self . compression_formats ] is an dictionary with 3 initial entries : tuple containing 2 elements : open and string _STR:0_ for None ,
1
'rb' ||| _STR:0_
example# 3522
tuple with 2 arguments : gzip.GzipFile [ gzip . GzipFile ] and string _STR:0_ for _STR:1_ , tuple with 2 arguments : SingleZipReader and string _STR:2_ for _STR:3_ . if has_bz2 is true ,
4
'r' ||| _STR:2_
'gzip' ||| _STR:3_
'rb' ||| _STR:0_
'gz' ||| _STR:1_
example# 3523
substitute tuple with 2 elements : bz2.BZ2File [ bz2 . BZ2File ] and string _STR:0_ for value under the _STR:1_ key of the self.compression_formats [ self . compression_formats ] dictionary .
2
'r' ||| _STR:0_
'bz2' ||| _STR:1_
example# 3524
call the method connection.constraint_checks_disabled [ connection . constraint_checks_disabled ] , with the result perform ,
0
example# 3525
for every fixture_label in fixture_labels ,
0
example# 3526
call the method self.load_label [ self . load_label ] with an argument fixture_label .
0
example# 3527
for model in self.models [ self . models ] append model._meta.db_table [ model . _meta . db_table ] to a list , substitute the resulting list for table_names .
0
example# 3528
try ,
0
example# 3529
call the method connection.check_constraints [ connection . check_constraints ] with an arguments table_names set to table_names .
0
example# 3530
if Exception , renamed to e , exception is caught ,
0
example# 3531
e.args [ e . args ] is a tuple , containing 1 element : string _STR:0_ , where ' % s ' is replaced with e .
1
"Problem installing fixtures: %s" ||| _STR:0_
example# 3532
raise an exception .
0
example# 3533
if self.loaded_object_count [ self . loaded_object_count ] is greater than zero ,
0
example# 3534
call the method connection.ops.sequence_reset_sql [ connection . ops . sequence_reset_sql ] with 2 arguments : return value of the no_style and self.models [ self . models ] ,
0
example# 3535
substitute the result for sequence_sql . if sequence_sql is true ,
0
example# 3536
if self.verbosity [ self . verbosity ] is grater than , or equal to integer 2 ,
0
example# 3537
write a string _STR:0_ to self.stdout [ self . stdout ] stream .
1
"Resetting sequences\n" ||| _STR:0_
example# 3538
call the method connection.cursor [ connection . cursor ] , with the result renamed to cursor , perform the following ,
0
example# 3539
for every line in sequence_sql ,
0
example# 3540
call the method cursor.execute [ cursor . execute ] with an argument line .
0
example# 3541
if self.verbosity [ self . verbosity ] is greater of equal to integer 1 ,
0
example# 3542
if self.fixture_count [ self . fixture_count ] equals integer 0 and self.hide_empty [ self . hide_empty ] is true ,
0
example# 3543
do nothing .
0
example# 3544
otherwise if self.fixture_object_count [ self . fixture_object_count ] equals self.loaded_object_count [ self . loaded_object_count ] ,
0
example# 3545
call the method self.stdout.write [ self . stdout . write ] with an argument string _STR:0_ ,
1
"Installed %d object(s) from %d fixture(s)" ||| _STR:0_
example# 3546
where _STR:0_ is replaced with self.loaded_object_count [ self . loaded_object_count ] and self.fixture_count [ self . fixture_count ] , respectively . if not ,
1
'%d' ||| _STR:0_
example# 3547
call the method self.stdout.write [ self . stdout . write ] with an argument string _STR:0_ ,
1
"Installed %d object(s) (of %d) from %d fixture(s)" ||| _STR:0_
example# 3548
substitute _STR:0_ with self.loaded_object_count [ self . loaded_object_count ] , self.fixture_object_count [ self . fixture_object_count ] and self.fixture_count [ self . fixture_count ] . define the method load_label with self and fixture_label as arguments .
1
'%d' ||| _STR:0_
example# 3549
for every fixture_file , fixture_dir and fixture_name in return value of the method self.find_fixtures [ self . find_fixtures ] called with an argument fixture_label ,
0
example# 3550
call the function os.path.basename [ os . path . basename ] with an argument fixture_file , use the result as an argument for the call to the method ,
0
example# 3551
self.parse_name [ self . parse_name ] , assign the result to _ , ser_fmt and cmp_fmt , respectively . get the value under the cmp_fmt key of the self.compression_formats [ self . compression_formats ] dictionary , assign it to open_method and mode .
0
example# 3552
call the function open_method with arguments : fixture_file and mode , substitute the result for fixture .
0
example# 3553
try ,
0
example# 3554
increment self.fixture_count [ self . fixture_count ] by one .
0
example# 3555
objects_in_fixture is integer 0 .
0
example# 3556
loaded_objects_in_fixture is integer 0 .
0
example# 3557
if self.verbosity [ self . verbosity ] is greater or equal to integer 2 ,
0
example# 3558
call the method self.stdout.write [ self . stdout . write ] with an argument string _STR:0_ ,
1
"Installing %s fixture '%s' from %s." ||| _STR:0_
example# 3559
substitute ' % s ' with ser_fmt , fixture_name and return value of the function humanize called with an argument fixture_dir . call the method serializers.deserialize [ serializers . deserialize ] with 4 arguments : ser_fmt , fixture , using set to self.using [ self . using ] ,
0
example# 3560
and ignorenonexistent set to self.ignore [ self . ignore ] , substitute the result for objects . for every obj in objects ,
0
example# 3561
increment objects_in_fixture by one .
0
example# 3562
call the method router.allow_migrate [ router . allow_migrate ] with 2 arguments : self.using [ self . using ] and obj.object.__class__ [ obj . object . __class__ ] , if it evaluates to true ,
0
example# 3563
increment loaded_objects_in_fixture by one .
0
example# 3564
add obj.object.__class__ [ obj . object . __class__ ] to self.models [ self . models ] set .
0
example# 3565
try ,
0
example# 3566
call the method obj.save [ obj . save ] with an argument using set to self.using [ self . using ] .
0
example# 3567
if DatabaseError or IntegrityError , renamed to e , exceptions are caught ,
0
example# 3568
e.args [ e . args ] is a tuple containing string `` Could not load % ( app_label ) s. % ( object_name ) s ( pk= % ( pk ) s ) : % ( error_msg ) s ,
0
example# 3569
where _STR:0_ is replaced for obj.object._meta.app_label [ obj . object . _meta . app_label ] , _STR:1_ is replaced with obj.object._meta.object_name [ obj . object . _meta . object_name ] , _STR:2_ is replaced with obj.object.pk [ obj . object . pk ] and _STR:3_ is replaced with result of the function force_text with an argument e. raise an exceptions
4
'%(object_name)s' ||| _STR:1_
'%(error_msg)s' ||| _STR:3_
'%(pk)s' ||| _STR:2_
'%(app_label)s' ||| _STR:0_
example# 3570
increment self.loaded_object_count [ self . loaded_object_count ] by loaded_objects_in_fixture .
0
example# 3571
increment self.fixture_object_count [ self . fixture_object_count ] by objects_in_fixture .
0
example# 3572
if Exception , renamed to e , exception is caught ,
0
example# 3573
if e is not an instance of CommandError class ,
0
example# 3574
e.args [ e . args ] is a tuple containing string _STR:0_ , where ' % s ' is replaced with fixture_file , e .
1
"Problem installing fixture '%s': %s" ||| _STR:0_
example# 3575
raise an exception .
0
example# 3576
finally perform ,
0
example# 3577
call the method fixture.close [ fixture . close ] .
0
example# 3578
if objects_in_fixture equals integer 0 ,
0
example# 3579
call the method warnings.warn [ warnings . warn ] with 2 arguments : string _STR:0_ ,
1
"No fixture data found for '%s'. (File format may be invalid.)" ||| _STR:0_
example# 3580
where ' % s ' is replaced with fixture_name , and RuntimeWarning . decorator method lru_cache.lru_cache [ lru_cache . lru_cache ] with an argument maxsize set to None .
0
example# 3581
define the method find_fixtures with arguments : self and fixture_label .
0
example# 3582
call the method self.parse_name [ self . parse_name ] with an argument fixture_label , substitute the result for fixture_name , ser_fmt , cmp_fmt , respective .
0
example# 3583
databases is a list containing 2 elements : self.using [ self . using ] and None .
0
example# 3584
call the method self.compression_formats.keys [ self . compression_formats . keys ] , convert it to list , substitute it for cmp_fmts if cmp_fmt is None ,
0
example# 3585
otherwise cmp_fmts is a list containing cmp_fmt . call the method serializers.get_public_serializer_formats [ serializers . get_public_serializer_formats ] , substitute the result for ser_fmts if ser_fmt is None ,
0
example# 3586
otherwise ser_fmts is a list containing ser_fmt . if self.verbosity [ self . verbosity ] is greater or equal to integer 2 ,
0
example# 3587
call the method self.stdout.write [ self . stdout . write ] with an argument string _STR:0_ , where ' % s ' is replaced with fixture_name .
1
"Loading '%s' fixtures..." ||| _STR:0_
example# 3588
if fixture_name is an absolute file path ,
0
example# 3589
call the method os.path.dirname [ os . path . dirname ] with an argument fixture_name , append it to a list , substitute resulting list for fixture_dirs .
0
example# 3590
call the method os.path.basename [ os . path . basename ] with an argument fixture_name , substitute the result for fixture_name .
0
example# 3591
if not ,
0
example# 3592
substitute self.fixture_dirs [ self . fixture_dirs ] for fixture_dirs .
0
example# 3593
if os.path.sep [ os . path . sep ] is contained in fixture_name ,
0
example# 3594
join dir_ and return value of the function os.path.dirname [ os . path . dirname ] called with an argument fixture_name into a valid file path ,
0
example# 3595
append it to a list , perform the previous for every dir_ in fixture_dirs , substitute the resulting list for fixture_dirs . call the method os.path.basename [ os . path . basename ] with an argument fixture_name , substitute the result for fixture_name .
0
example# 3596
for every ext in combo , if ext is true , join it to a string , separated by _STR:0_ , put the result in a tuple ,
1
'.' ||| _STR:0_
example# 3597
perform the previous for every combo in result of the function product called with 3 arguments : databases , ser_fmts and cmp_fmts , substitute the result for suffixes . join fixture_name and suffix into a string , separated by _STR:0_ for every suffix in suffixes , put the results in set , substitute it for targets .
1
'.' ||| _STR:0_
example# 3598
fixture_files is an empty list .
0
example# 3599
for every fixture_dir in fixture_dirs ,
0
example# 3600
if self.verbosity [ self . verbosity ] is greater or equals to integer 2 .
0
example# 3601
call the method self.stdout.write [ self . stdout . write ] with an argument string _STR:0_ ,
1
"Checking %s for fixtures..." ||| _STR:0_
example# 3602
where ' % s ' is replaced with result of the function humanize , called with an argument fixture_dir . fixture_files_in_dir is an empty list .
0
example# 3603
join fixture_dir , fixture_name with appended character _STR:0_ into a valid file path ,
1
'*' ||| _STR:0_
example# 3604
use it as an argument for the call to the glob.iglob [ glob . iglob ] , for every candidate in result , call the method os.path.basename [ os . path . basename ] with an argument candidate , is result is contained in targets ,
0
example# 3605
append tuple containing 3 elements : candidate , fixture_dir and fixture_name to list fixture_files_in_dir .
0
example# 3606
if self.verbosity [ self . verbosity ] is greater or equals integer 2 and fixture_files_in_dir is false ,
0
example# 3607
call the method self.stdout.write [ self . stdout . write ] with an argument string _STR:0_ , where ' % s ' is replaced with fixture_name ,
1
"No fixture '%s' in %s." ||| _STR:0_
example# 3608
and result of the function humanize called with an argument fixture_dir . if length of fixture_files_in_dir is greater than 1 ,
0
example# 3609
raise an CommandError exception with an argument string _STR:0_ , where ' % s ' is replaced with :
1
"Multiple fixtures named '%s' in %s. Aborting." ||| _STR:0_
example# 3610
fixture_name and result of the function humanize called with an argument fixture_dir . extend fixture_files list with fixture_files_in_dir .
0
example# 3611
if fixture_name is not equal to string _STR:0_ and fixture_files is false ,
1
'initial_data' ||| _STR:0_
example# 3612
call the method warnings.warn [ warnings . warn ] with an argument string _STR:0_ where ' % s ' is replaced with fixture_name .
1
"No fixture named '%s' found." ||| _STR:0_
example# 3613
return fixture_files .
0
example# 3614
decorator cached_property ,
0
example# 3615
define the method fixture_dirs with an argument self .
0
example# 3616
dirs is an empty dictionary .
0
example# 3617
for ever app_config in return value of the method apps.get_app_configs [ apps . get_app_configs ] ,
0
example# 3618
if self.app_label [ self . app_label ] is true and app_config.label [ app_config . label ] is not equal to self.app_label [ self . app_label ] ,
0
example# 3619
skip this loop iteration .
0
example# 3620
join app_config.path [ app_config . path ] and string _STR:0_ into a valid file path , substitute it for app_dir .
1
'fixtures' ||| _STR:0_
example# 3621
if app_dir is a directory ,
0
example# 3622
append app_dir to dirs list .
0
example# 3623
convert settings.FIXTURE_DIRS [ settings . FIXTURE_DIRS ] to a list , extend dirs by it .
0
example# 3624
append an empty string to dirs list .
0
example# 3625
call the function os.path.realpath [ os . path . realpath ] with an argument d , use the result as an argument for the call to the function os.path.abspath [ os . path . abspath ] ,
0
example# 3626
use the result as an argument for the call to the upath function , for every d in dirs , append the results into a list , substitute the resulting list for dirs . return dirs .
0
example# 3627
define the method parse_name with arguments self and fixture_name .
0
example# 3628
call the method fixture_name.rsplit [ fixture_name . rsplit ] with 2 arguments : character _STR:0_ and integer 2 , substitute the result for parts .
1
'.' ||| _STR:0_
example# 3629
if length of parts is greater than integer 1 and last element of parts is contained in self.compression_formats [ self . compression_formats ] ,
0
example# 3630
substitute the last element of parts for cmp_fmt .
0
example# 3631
substitute the last element of parts for parts .
0
example# 3632
if not ,
0
example# 3633
cmp_fmt is None .
0
example# 3634
if length of parts is greater than integer 1 .
0
example# 3635
if last element of parts is contained in self.serialization_formats [ self . serialization_formats ] ,
0
example# 3636
substitute the last element of parts for ser_fmt .
0
example# 3637
substitute the last element of parts for parts .
0
example# 3638
if not ,
0
example# 3639
raise an CommandError with an argument string _STR:0_ ,
1
"Problem installing fixture '%s': %s is not a known serialization format." ||| _STR:0_
example# 3640
replace ' % s ' with : elements of last element of parts joined into a string and last element of parts . if not ,
0
example# 3641
ser_fmt is None .
0
example# 3642
join elements of parts into a string , separated with _STR:0_ , substitute it for name .
1
'.' ||| _STR:0_
example# 3643
return name , ser_fmt and cmp_fmt .
0
example# 3644
derive class SingleZipReader for zipfile.ZipFile [ zipfile . ZipFile ] base class .
0
example# 3645
define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
0
example# 3646
call the method zipfile.ZipFile.__init___ [ zipfile . ZipFile . __init___ ] with the arguments self , unpacked list args and unpacked dictionary kwargs .
0
example# 3647
call the method self.namelist [ self . namelist ] , if the length of the result is not integer 1 ,
0
example# 3648
raise an ValueError with an string _STR:0_ .
1
"Zip-compressed fixtures must contain one file." ||| _STR:0_
example# 3649
define the method read with an argument self .
0
example# 3650
call the method zipfile.ZipFile.read [ zipfile . ZipFile . read ] with 2 arguments : self and first element of the result of the self.namelist [ self . namelist ] method .
0
example# 3651
define the function humanize with an argument dirname .
0
example# 3652
if dirname is true , return dirname converted to a string and surounded by single quotes , if not return string _STR:0_ .
1
'absolute path' ||| _STR:0_
example# 3653
from __future__ import unicode_literals into default name space .
0
example# 3654
import module fnmatch .
0
example# 3655
import module glob .
0
example# 3656
import module io .
0
example# 3657
import module os .
0
example# 3658
import module re .
0
example# 3659
import module sys .
0
example# 3660
from itertools import dropwhile into default name space .
0
example# 3661
import module django .
0
example# 3662
from django.core.management.base [ django . core . management . base ] import CommandError and BaseCommand into default name space .
0
example# 3663
from django.core.management.utils [ django . core . management . utils ] import handle_extensions , find_command and popen_wrapper into default name space .
0
example# 3664
from django.utils.encoding [ django . utils . encoding ] import force_st into default name space .
0
example# 3665
from django.utils.functional [ django . utils . functional ] import total_ordering into default name space .
0
example# 3666
from django.utils [ django . utils ] import six into default name space .
0
example# 3667
from django.utils.text [ django . utils . text ] import get_text_list into default name space .
0
example# 3668
from django.utils.jslex [ django . utils . jslex ] import prepare_js_for_gettext into default name space .
0
example# 3669
call the method re.compile [ re . compile ] with 2 arguments : raw string _STR:0_ ,
1
'^(?P<value>"Plural-Forms.+?\\n")\s*$' ||| _STR:0_
example# 3670
and result of the bitwise OR performed on the re.MULTILINE [ re . MULTILINE ] and re.DOTALL [ re . DOTALL ] operands , substitute the result for plural_forms_re/ STATUS_OK is integer 0 .
0
example# 3671
define the method check_programs with an argument unpacked list programs .
0
example# 3672
for every program in programs ,
0
example# 3673
call the function find_command with an argument program , if it evaluates to None ,
0
example# 3674
raise an CommandError exception with an argument _STR:0_ , where ' % s ' is replaced with program .
1
"Can't find %s. Make sure you have GNU gettext tools 0.15 or newer installed." ||| _STR:0_
example# 3675
total_ordering decorator ,
0
example# 3676
derive the class TranslatableFile from the object class .
0
example# 3677
define the method __init__ with 4 arguments : self , dirpath , file_name and locale_dir .
0
example# 3678
substitute file_name for self.file_name [ self . file_name ] .
0
example# 3679
substitute dirpath for self.dirpath [ self . dirpath ] .
0
example# 3680
substitute locale_dir for self.locale_dir [ self . locale_dir ] .
0
example# 3681
define the method __repr__with an argument self .
0
example# 3682
join self.dirpath [ self . dirpath ] and self.file [ self . file ] in a string , substitute with it ' % s ' in string _STR:0_ , return the result .
1
"<TranslatableFile: %s>" ||| _STR:0_
example# 3683
define the method __eq__ with self and other arguments :
0
example# 3684
if self.path [ self . path ] equals other.path [ other . path ] , return boolean True , if not return boolean False .
0
example# 3685
define the mehod __lt__ with self and other .
0
example# 3686
if self.path [ self . path ] is lesser than other.path [ other . path ] , return boolean True , otherwise return boolean False .
0
example# 3687
property decorator .
0
example# 3688
define the method path with an argument self .
0
example# 3689
join self.dirpath [ self . dirpath ] and self.file [ self . file ] into a file path , return it .
0
example# 3690
define the method process with 3 arguments : self , command and domain .
0
example# 3691
from django.conf [ django . conf ] import settings into default namespace .
0
example# 3692
from django.utils.translation [ django . utils . translation ] import templatize into default namespace .
0
example# 3693
if command.verbosity [ command . verbosity ] is greater than integer 1 ,
0
example# 3694
substitute ' % s ' is string _STR:0_ with self.file [ self . file ] and self.dirpath [ self . dirpath ] , write it to command.stdout [ command . stdout ] .
1
'processing file %s in %s\n' ||| _STR:0_
example# 3695
call the method os.path.splitext [ os . path . splitext ] with an argument self.file [ self . file ] , assign the result to _ and file_ext .
0
example# 3696
if domain equals a string _STR:0_ and file_ext is contained in command.extensions [ command . extensions ] ,
1
'djangojs' ||| _STR:0_
example# 3697
is_templatized is boolean True .
0
example# 3698
join self.dirpath [ self . dirpath ] and self.file [ self . file ] into a file path , substitute it for orig_file .
0
example# 3699
call the function io.open [ io . open ] with orig_file and encoding set to settings.FILE_CHARSET [ settings . FILE_CHARSET ] , with the result renamed to fp ,
0
example# 3700
perform the following : call the method fp.read [ fp . read ] , substitute the result for src_data .
0
example# 3701
call the function prepare_js_for_gettext with an argument src_data , substitute it for src_data .
0
example# 3702
convert self.file [ self . file ] to a string and append _STR:0_ string to it , substitute the result for thefile .
1
'.c' ||| _STR:0_
example# 3703
join self.dirpath [ self . dirpath ] and thefile in a string , substitute the result for work_file .
0
example# 3704
call the function io.open [ io . open ] with 3 arguments : work_file , string _STR:0_ and encoding set to string _STR:1_ as arguments ,
2
'w' ||| _STR:0_
'utf-8' ||| _STR:1_
example# 3705
with the result renamed to fp , perform the following : call the method fp.write [ fp . write ] with an arguments src_data .
0
example# 3706
append command.xgettext_options [ command . xgettext_options ] to the list containing 10 elements : string _STR:0_ , string _STR:1_ , domain , string _STR:2_ ,
3
'-d' ||| _STR:1_
'--language=C' ||| _STR:2_
'xgettext' ||| _STR:0_
example# 3707
string _STR:0_ , string _STR:1_ , string _STR:2_ , string _STR:3_ , string _STR:4_ and string _STR:5_ , substitute it for args . append work_file to args .
6
'--keyword=gettext_lazy' ||| _STR:1_
'--keyword=pgettext:1c,2' ||| _STR:3_
'--output=-' ||| _STR:5_
'--keyword=ngettext_lazy:1,2' ||| _STR:2_
'--keyword=gettext_noop' ||| _STR:0_
'--keyword=npgettext:1c,2,3' ||| _STR:4_
example# 3708
otherwise if domains equals a string django_STR:0_.py [ django_STR:0_ . py ] ' or file_ext is contained in command.extensions [ command . extensions ] ,
1
' and, file_ext equals ' ||| _STR:0_
example# 3709
substitute self.file [ self . file ] for thefile .
0
example# 3710
join self.dirpath [ self . dirpath ] and self.file [ self . file ] into a file path , substitute it for orig_file .
0
example# 3711
if file_ext is contained in command.extensions [ command . extensions ] , is_templatized is boolean True , otherwise it is boolean False .
0
example# 3712
if is_templatized is true ,
0
example# 3713
call the function io.open [ io . open ] with 3 arguments : work_file , string _STR:0_ and encoding set to settings.FILE_CHARSET [ settings . FILE_CHARSET ] as arguments ,
1
'w' ||| _STR:0_
example# 3714
with the result renamed to fp , perform the following : call the method fp.read [ fp . read ] , substitute the result for src_data .
0
example# 3715
convert self.file [ self . file ] to string and append string _STR:0_ to it , substitute the result for thefile .
1
'.py' ||| _STR:0_
example# 3716
call the function templatize with 2 arguments : src_data and sliced orig_file , without first 2 elements , substitute the result for content .
0
example# 3717
call the function io.open [ io . open ] with 3 arguments : self.dirpath [ self . dirpath ] and thefile joined into a file path , string _STR:0_ ,
1
'w' ||| _STR:0_
example# 3718
and encoding set to string _STR:0_ as arguments , with the result renamed to fp , perform the following : call the method fp.write [ fp . write ] with an argument content .
1
'utf-8' ||| _STR:0_
example# 3719
join self.dirpath [ self . dirpath ] , thefile into a file path , substitute it for work_file .
0
example# 3720
append command.xgettext_options [ command . xgettext_options ] to list containing 15 elements : string _STR:0_ , string _STR:1_ , domain , string _STR:2_ ,
3
'--language=Python' ||| _STR:2_
'-d' ||| _STR:1_
'xgettext' ||| _STR:0_
example# 3721
string _STR:0_ , string _STR:1_ , string _STR:2_ , string _STR:3_ , string _STR:4_ , string _STR:5_ , string _STR:6_ , string _STR:7_ , string _STR:8_ , string _STR:9_ and string _STR:10_ , substitute the result for args . append work_file to args .
11
'--keyword=gettext_lazy' ||| _STR:1_
'--keyword=ugettext_lazy' ||| _STR:4_
'--keyword=pgettext:1c,2' ||| _STR:6_
'--keyword=npgettext_lazy:1c,2,3' ||| _STR:9_
'--output=-' ||| _STR:10_
'--keyword=ugettext_noop' ||| _STR:3_
'--keyword=ngettext_lazy:1,2' ||| _STR:2_
'--keyword=gettext_noop' ||| _STR:0_
'--keyword=ungettext_lazy:1,2' ||| _STR:5_
'--keyword=npgettext:1c,2,3' ||| _STR:7_
'--keyword=pgettext_lazy:1c,2' ||| _STR:8_
example# 3722
if not ,
0
example# 3723
return nothing .
0
example# 3724
call the function popen_wrapper with argument args , assign the result to msgs , errors and status .
0
example# 3725
if errors is true ,
0
example# 3726
if status is not equal to STATUS_OK ,
0
example# 3727
if is_templatized is true ,
0
example# 3728
call the function os.unlink [ os . unlink ] with an argument work_file .
0
example# 3729
raise an CommandError exception with an argument string _STR:0_ ,
1
"errors happened while running xgettext on %s\n%s" ||| _STR:0_
example# 3730
where ' % s ' are replaced by sel.file [ sel . file ] and errors , respectively . if command.verbosity [ command . verbosity ] is greater than integer 0 ,
0
example# 3731
call the method command.stdout.write [ command . stdout . write ] with an argument errors .
0
example# 3732
if msgs is true ,
0
example# 3733
if six.PY2 [ six . PY2 ] is true ,
0
example# 3734
call the method msgs.decode [ msgs . decode ] with an argument string _STR:0_ , substitute the result for msgs .
1
'utf-8' ||| _STR:0_
example# 3735
join into a file path : self.locale_dir [ self . locale_dir ] and string _STR:0_ appended to domain converted to string , substitute it for potfile .
1
'.pot' ||| _STR:0_
example# 3736
if is_templatized is true ,
0
example# 3737
if os.name [ os . name ] equals string _STR:0_ ,
1
'nt' ||| _STR:0_
example# 3738
append work_file to string _STR:0_ , substitute it for old .
1
'#: ' ||| _STR:0_
example# 3739
append orig_file to string _STR:0_ , substitute it for new .
1
'#: ' ||| _STR:0_
example# 3740
if not ,
0
example# 3741
append work_file to string _STR:0_ , substitute it for old .
1
'#: ' ||| _STR:0_
example# 3742
append orig_file to string _STR:0_ , substitute it for new .
1
'#: ' ||| _STR:0_
example# 3743
replace every occurrence of old for new in msgs , substitute the result for msgs .
0
example# 3744
call the function write_pot_file with 2 arguments : potfile and msgs .
0
example# 3745
if is_templatized is true ,
0
example# 3746
call the function os.unlink [ os . unlink ] with an argument work_file .
0
example# 3747
define the function write_pot_file with 2 arguments potfile and msgs .
0
example# 3748
if potfile fie exists ,
0
example# 3749
call the function dropwhile with 2 arguments : function len and msgs spit into parts at newlines , join the result into a string ,
0
example# 3750
separated by newline , substitute it for msgs . if not ,
0
example# 3751
replace every occurrence of string _STR:0_ for string _STR:1_ in msgs , substitute the result for msgs .
2
'charset=CHARSET' ||| _STR:0_
'charset=UTF-8' ||| _STR:1_
example# 3752
call the function io.open [ io . open ] with 3 arguments : potfile , string _STR:0_ and encoding set to string _STR:1_ as arguments ,
2
'a' ||| _STR:0_
'utf-8' ||| _STR:1_
example# 3753
with the result renamed to fp , perform the following : call the method fp.write [ fp . write ] with an argument msgs .
0
example# 3754
derive the class Command from the BaseCommands base class .
0
example# 3755
help is a string _STR:0_
1
"Runs over the entire source tree of the current directory and " ||| _STR:0_
example# 3756
_STR:0_ _STR:1_ _STR:2_ _STR:3_ . requires_system_checks is boolean False .
4
"pulls out all strings marked for translation. It creates (or updates) a message " ||| _STR:0_
"--locale, --exclude or --all options." ||| _STR:3_
"file in the conf/locale (in the django tree) or locale (for projects and " ||| _STR:1_
"applications) directory.\n\nYou must run this command with one of either the " ||| _STR:2_
example# 3757
leave_locale_alone is boolean True
0
example# 3758
msgmerge_options is an list with elements : strings _STR:0_ and _STR:1_ .
2
'-q' ||| _STR:0_
'--previous' ||| _STR:1_
example# 3759
msguniq_options is an list with elements : string _STR:0_ .
1
'--to-code=utf-8' ||| _STR:0_
example# 3760
msgattrib_options is an list with elements : string _STR:0_ .
1
'--no-obsolete' ||| _STR:0_
example# 3761
xgettext_options is an list with elements : strings _STR:0_ and _STR:1_ .
2
'--from-code=UTF-8' ||| _STR:0_
'--add-comments=Translators' ||| _STR:1_
example# 3762
define the method add_arguments with 2 arguments : self and parser .
0
example# 3763
call the method parser.add_argument [ parser . add_argument ] with 6 arguments : string _STR:0_ , string _STR:1_ , default as an empty list ,
2
'--locale' ||| _STR:0_
'-l' ||| _STR:1_
example# 3764
dest as a string _STR:0_ , action as a string _STR:1_ and help as a string , _STR:2_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:3_ , string _STR:4_ , default as a empty list ,
5
'locale' ||| _STR:0_
'-x' ||| _STR:4_
'Creates or updates the message files for the given locale(s) (e.g. pt_BR). Can be used multiple times.' ||| _STR:2_
'append' ||| _STR:1_
'--exclude' ||| _STR:3_
example# 3765
dest as a string _STR:0_ , action as a string _STR:1_ and help as a string _STR:2_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:3_ , string _STR:4_ , default as a string _STR:5_ ,
6
'-d' ||| _STR:4_
'Locales to exclude. Default is none. Can be used multiple times.' ||| _STR:2_
'append' ||| _STR:1_
'django' ||| _STR:5_
'--domain' ||| _STR:3_
'exclude' ||| _STR:0_
example# 3766
dest set to string _STR:0_ and help as a string _STR:1_ . call the method parser.add_argument [ parser . add_argument ] with 6 arguments : string _STR:2_ , string _STR:3_ , action as a string_STR:4_ ,
5
'-a' ||| _STR:3_
'The domain of the message files (default: "django").' ||| _STR:1_
'store_true' ||| _STR:4_
'--all' ||| _STR:2_
'domain' ||| _STR:0_
example# 3767
dest as a string _STR:0_ default as boolean False and help as a string _STR:1_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:2_ , string _STR:3_ , dest set to string _STR:4_ ,
5
'Updates the message files for all existing locales.' ||| _STR:1_
'extensions' ||| _STR:4_
'--extension' ||| _STR:2_
'-e' ||| _STR:3_
'all' ||| _STR:0_
example# 3768
help set to a string _STR:0_ _STR:1_ and action as a string _STR:2_ . call the method parser.add_argument [ parser . add_argument ] with 6 arguments : string _STR:3_ , string _STR:4_ , action as a string _STR:5_ ,
6
'--symlinks' ||| _STR:3_
'The file extension(s) to examine (default: "html,txt", or "js" ' ||| _STR:0_
'append' ||| _STR:2_
'-s' ||| _STR:4_
'store_true' ||| _STR:5_
'if the domain is "djangojs"). Separate multiple extensions with commas, or use -e multiple times.' ||| _STR:1_
example# 3769
dest as a string _STR:0_ , default as boolean False and help as a string _STR:1_ _STR:2_ . call the method parser.add_argument [ parser . add_argument ] with 7 arguments : string _STR:3_ , string _STR:4_ , action as a string _STR:5_ ,
6
'-i' ||| _STR:4_
'Follows symlinks to directories when examining ' ||| _STR:1_
'--ignore' ||| _STR:3_
'append' ||| _STR:5_
'symlinks' ||| _STR:0_
'source code and templates for translation strings.' ||| _STR:2_
example# 3770
dest as a string _STR:0_ , default as an empty list , metavar as a string _STR:1_ , and help as a string _STR:2_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:3_ , action as a string _STR:4_ ,
5
'Ignore files or directories matching this glob-style pattern. Use multiple times to ignore more.' ||| _STR:2_
'ignore_patterns' ||| _STR:0_
'--no-default-ignore' ||| _STR:3_
'store_false' ||| _STR:4_
'PATTERN' ||| _STR:1_
example# 3771
dest as a string _STR:0_ , default set to boolean True , and help as a string _STR:1_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:2_ , action as a string _STR:3_ , dest as a string _STR:4_ ,
5
"Don't ignore the common glob-style patterns 'CVS', '.*', '*~' and '*.pyc'." ||| _STR:1_
'no_wrap' ||| _STR:4_
'--no-wrap' ||| _STR:2_
'store_true' ||| _STR:3_
'use_default_ignore_patterns' ||| _STR:0_
example# 3772
default as boolean False and help as a string _STR:0_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:1_ , action set to string _STR:2_ ,
3
'--no-location' ||| _STR:1_
'store_true' ||| _STR:2_
"Don't break long message lines into several lines." ||| _STR:0_
example# 3773
dest set to string _STR:0_ , default as boolean False and help as a string _STR:1_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:2_ , action as a string _STR:3_ ,
4
"Don't write '#: filename:line' lines." ||| _STR:1_
'no_location' ||| _STR:0_
'store_true' ||| _STR:3_
'--no-obsolete' ||| _STR:2_
example# 3774
dest as a string _STR:0_ , default as boolean False and help as a string _STR:1_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:2_ , action as a string _STR:3_ ,
4
'no_obsolete' ||| _STR:0_
'--keep-pot' ||| _STR:2_
'store_true' ||| _STR:3_
"Remove obsolete message strings." ||| _STR:1_
example# 3775
dest as a string _STR:0_ , default as boolean False and help as a string _STR:1_ define the method handle with 3 arguments : self , unpacked list args and unpacked dictionary options .
2
'keep_pot' ||| _STR:0_
"Keep .pot file after making messages. Useful when debugging." ||| _STR:1_
example# 3776
get the value under the _STR:0_ key of the options dictionary , substitute it for locale .
1
'locale' ||| _STR:0_
example# 3777
get the value under the _STR:0_ key of the options dictionary , substitute it for exclude .
1
'exclude' ||| _STR:0_
example# 3778
get the value under the _STR:0_ key of the options dictionary , substitute it for self.domain [ self . domain ] .
1
'domain' ||| _STR:0_
example# 3779
get the value under the _STR:0_ key of the options dictionary , substitute it for self.verbosity [ self . verbosity ] .
1
'verbosity' ||| _STR:0_
example# 3780
get the value under the _STR:0_ key of the options dictionary , substitute it for process_all .
1
'all' ||| _STR:0_
example# 3781
get the value under the _STR:0_ key of the options dictionary , substitute it for extensions .
1
'extensions' ||| _STR:0_
example# 3782
get the value under the _STR:0_ key of the options dictionary , substitute it for self.symlinks [ self . symlinks ] .
1
'symlinks' ||| _STR:0_
example# 3783
get the value under the _STR:0_ key of the options dictionary , substitute it for ignore_patterns .
1
'ignore_patterns' ||| _STR:0_
example# 3784
get the value under the _STR:0_ key of the options dictionary , if it is true ,
1
'use_default_ignore_patterns' ||| _STR:0_
example# 3785
append list containing 4 elements : _STR:0_ , _STR:1_ , _STR:2_ and _STR:3_ , to ignore_patterns .
4
'.*' ||| _STR:1_
'*.pyc' ||| _STR:3_
'*~' ||| _STR:2_
'CVS' ||| _STR:0_
example# 3786
put elements of ignore_patterns into a set , substitute the length of it for self.ignore_patterns [ self . ignore_patterns ] .
0
example# 3787
get the value under the _STR:0_ key of the options dictionary , if it is true ,
1
'no_wrap' ||| _STR:0_
example# 3788
append list containing string _STR:0_ to self.msgmerge_options [ self . msgmerge_options ]
1
'--no-wrap' ||| _STR:0_
example# 3789
append list containing string _STR:0_ to self.msguniq_options [ self . msguniq_options ] .
1
'--no-wrap' ||| _STR:0_
example# 3790
append list containing string _STR:0_ to self.msgattrib_options [ self . msgattrib_options ] .
1
'--no-wrap' ||| _STR:0_
example# 3791
append list containing string _STR:0_ to self.xgettext_options [ self . xgettext_options ] .
1
'--no-wrap' ||| _STR:0_
example# 3792
get the value under the _STR:0_ key of the options dictionary , if it is true ,
1
'no_location' ||| _STR:0_
example# 3793
append list containing string _STR:0_ to self.msgmerge_options [ self . msgmerge_options ] .
1
'--no-location' ||| _STR:0_
example# 3794
append list containing string _STR:0_ to self.msguniq_options [ self . msguniq_options ] .
1
'--no-location' ||| _STR:0_
example# 3795
append list containing string _STR:0_ to self.msgattrib_options [ self . msgattrib_options ] .
1
'--no-location' ||| _STR:0_
example# 3796
append list containing string _STR:0_ to self.xgettext_options [ self . xgettext_options ] .
1
'--no-location' ||| _STR:0_
example# 3797
get the value under the _STR:0_ key of the options dictionary , substitute it for self.no_obsolete [ self . no_obsolete ] .
1
'no_obsolete' ||| _STR:0_
example# 3798
get the value under the _STR:0_ key of the options dictionary , substitute it for self.keep_pot [ self . keep_pot ] .
1
'keep_pot' ||| _STR:0_
example# 3799
if self.domain [ self . domain ] is not equal to string _STR:0_ or string _STR:1_ ,
2
'djangojs' ||| _STR:1_
'django' ||| _STR:0_
example# 3800
raise an CommandError exception with an argument string _STR:0_ .
1
"currently makemessages only supports domains 'django' and 'djangojs'" ||| _STR:0_
example# 3801
if self.domain [ self . domain ] equals to string _STR:0_ ,
1
'djangojs' ||| _STR:0_
example# 3802
if extensions is false , substitute it for exts , otherwise exts is a list containing string _STR:0_ .
1
'js' ||| _STR:0_
example# 3803
if not ,
0
example# 3804
if extensions is false , substitute it for exts , otherwise exts is a list containing 2 elements : string _STR:0_ and string _STR:1_ .
2
'html' ||| _STR:0_
'txt' ||| _STR:1_
example# 3805
call the function handle_extensions exts , substitute self.extensions [ self . extensions ] .
0
example# 3806
evaluate the boolean expression : locale is None and exclude is false and process_all is false ,
0
example# 3807
if the result is true or self.domain [ self . domain ] is not None , raise an CommandError exception with an argument string _STR:0_ , where ' % s ' are replaced by :
1
"Type '%s help %s' for usage information." ||| _STR:0_
example# 3808
return value of the function os.path.basename [ os . path . basename ] called with first element of sys.argv [ sys . argv ] as an argument , and second element of sys.argv [ sys . argv ] . from django.conf [ django . conf ] import settings into default namespace .
0
example# 3809
if settings.configured [ settings . configured ] ,
0
example# 3810
settings.USE_I18N [ settings . USE_I18N ] is boolean True .
0
example# 3811
if not ,
0
example# 3812
call the method settings.configure [ settings . configure ] with an argument USE_I18N set to boolean True .
0
example# 3813
if self.verbosity [ self . verbosity ] is integer 1 ,
0
example# 3814
call the method self.stdout.write [ self . stdout . write ] with an argument string _STR:0_ ,
1
'examining files with the extensions: %s\n' ||| _STR:0_
example# 3815
substitute ' % s ' with return value of the function get_text_list called with 2 arguments : self.extensions [ self . extensions ] converted into a list and string _STR:0_ . self.invoked_for_django [ self . invoked_for_django ] is boolean False .
1
'and' ||| _STR:0_
example# 3816
self.locale_paths [ self . locale_paths ] is an empty list .
0
example# 3817
self.default_locale_path [ self . default_locale_path ] is None .
0
example# 3818
join _STR:0_ and _STR:1_ into a file path , if it is a directory ,
2
'locale' ||| _STR:1_
'conf' ||| _STR:0_
example# 3819
join _STR:0_ and _STR:1_ into a file path , use it as an argument for the call the method os.path.abspath [ os . path . abspath ] ,
2
'locale' ||| _STR:1_
'conf' ||| _STR:0_
example# 3820
put the results into a list , substitute self.locale_paths [ self . locale_paths ] for it . substitute first element of self.locale_paths [ self . locale_paths ] for self.default_locale_path [ self . default_locale_path ] .
0
example# 3821
self.invoked_for_django [ self . invoked_for_django ] is boolean True .
0
example# 3822
if not ,
0
example# 3823
convert settings.LOCALE_PATHS [ settings . LOCALE_PATHS ] into a list and extend list self.locale_paths [ self . locale_paths ] with it .
0
example# 3824
if _STR:0_ is a directory ,
1
'locale' ||| _STR:0_
example# 3825
call the function os.path.abspath [ os . path . abspath ] with an argument _STR:0_ , append the result to self.locale_paths [ self . locale_paths ] .
1
'locale' ||| _STR:0_
example# 3826
if self.locale_paths [ self . locale_paths ] is true ,
0
example# 3827
substitute first element of self.locale_paths [ self . locale_paths ] for self.default_locale_path [ self . default_locale_path ] .
0
example# 3828
if self.default_locale_path [ self . default_locale_path ] directory doesnt exists ,
0
example# 3829
create a directory self.default_locale_path [ self . default_locale_path ] .
0
example# 3830
call the function glob.glob [ glob . glob ] with an argument : string _STR:0_ appended to self.default_locale_path [ self . default_locale_path ] converted into a string ,
1
'/*' ||| _STR:0_
example# 3831
filter out the results for which function os.path.isdir [ os . path . isdir ] returns false , substitute the result for locale_dirs . map the locale_dirs elements with mapping function os.path.basename [ os . path . basename ] , substitute the result for all_locales .
0
example# 3832
if process_all is true ,
0
example# 3833
substitute all_locales for locales .
0
example# 3834
if not ,
0
example# 3835
if locale is not false or None , substitute it for locales , otherwise substitute all_locales for locales .
0
example# 3836
locales is a difference between the locales and exclude sets .
0
example# 3837
if locales is true ,
0
example# 3838
call the function check_programs with 3 arguments : strings _STR:0_ , _STR:1_ and _STR:2_ .
3
'msgattrib' ||| _STR:2_
'msguniq' ||| _STR:0_
'msgmerge' ||| _STR:1_
example# 3839
call the function check_programs with an argument string _STR:0_ .
1
'xgettext' ||| _STR:0_
example# 3840
try ,
0
example# 3841
call the method self.build_potfiles [ self . build_potfiles ] , substitute the result for potfiles .
0
example# 3842
for every locale in locales ,
0
example# 3843
if self.verbosity [ self . verbosity ] is greater than integer 0 ,
0
example# 3844
replace ' % s ' in string _STR:0_ with locale , write it to self.stdout [ self . stdout ] .
1
"processing locale %s\n" ||| _STR:0_
example# 3845
for every potfile in potfiles ,
0
example# 3846
call the method self.write_po_file [ self . write_po_file ] with 2 arguments : potfile and locale .
0
example# 3847
finally perform ,
0
example# 3848
if self.keep_pot [ self . keep_pot ] is false ,
0
example# 3849
call the method self.remove_potfiles [ self . remove_potfiles ] .
0
example# 3850
define the method build_potfiles with an argument self .
0
example# 3851
call the method self.find_files [ self . find_files ] with an argument string _STR:0_ , substitute the result for file_list .
1
'.' ||| _STR:0_
example# 3852
call the method self.remove_potfiles [ self . remove_potfiles ] .
0
example# 3853
for f in file_list ,
0
example# 3854
try ,
0
example# 3855
call the function f.process [ f . process ] with 2 arguments : self and self.domain [ self . domain ] .
0
example# 3856
if except UnicodeDecodeError exception is caught ,
0
example# 3857
substitute ' % s ' in string _STR:0_ with f.file [ f . file ] and f.dirpath [ f . dirpath ] , write it to self.stdout [ self . stdout ] .
1
"UnicodeDecodeError: skipped file %s in %s" ||| _STR:0_
example# 3858
potfiles is an empty list .
0
example# 3859
for every path in self.locale_paths [ self . locale_paths ] ,
0
example# 3860
join into a path : path and string _STR:0_ , where ' % s ' is replaced with self.domain [ self . domain ] converted into a string .
1
'%s.pot' ||| _STR:0_
example# 3861
if potfile file path doesnt exist ,
0
example# 3862
skip this loop iteration .
0
example# 3863
append self.msguniq_options [ self . msguniq_options ] to a list containing a string _STR:0_ , append list containing potfile to the result , substitute it for args .
1
'msguniq' ||| _STR:0_
example# 3864
call the function popen_wrapper with an argument args , assign the result to msgs , errors and status , respectively .
0
example# 3865
if six.PY2 [ six . PY2 ] is true ,
0
example# 3866
call the method msgs.decode [ msgs . decode ] with an argument string _STR:0_ , substitute it for msgs .
1
'utf-8' ||| _STR:0_
example# 3867
if errors is true ,
0
example# 3868
if status is not equal to STATUS_OK ,
0
example# 3869
raise an CommandError exception with an argument string _STR:0_ , where ' % s ' is replaced with errors .
1
"errors happened while running msguniq\n%s" ||| _STR:0_
example# 3870
otherwise if self.verbosity [ self . verbosity ] is greater than integer 0 ,
0
example# 3871
write errors to self.stdout [ self . stdout ] .
0
example# 3872
call the function io.open [ io . open ] with 3 arguments : potfile , string _STR:0_ and encoding set to string _STR:1_ as arguments ,
2
'w' ||| _STR:0_
'utf-8' ||| _STR:1_
example# 3873
with the result renamed to fp , perform the following : write msgs to fp .
0
example# 3874
append potfile to potfiles .
0
example# 3875
return potfiles .
0
example# 3876
define the method remove_potfiles with an argument self .
0
example# 3877
for every path in self.locale_paths [ self . locale_paths ] ,
0
example# 3878
join into a file path : path and string _STR:0_ , where ' % s ' is replaced with self.domain [ self . domain ] converted into a string , substitute the result for pot_path .
1
'%s.pot' ||| _STR:0_
example# 3879
if pot_path file path exists ,
0
example# 3880
call the method os.unlink [ os . unlink ] with an argument pot_path .
0
example# 3881
define the method find_potfiles with an arguments self and root .
0
example# 3882
define the function is_ignored with arguments path and ignore_patterns .
0
example# 3883
call the function os.path.basename [ os . path . basename ] with an arguments path , substitute the result for filename .
0
example# 3884
ignore is a lambda function with pattern as an argument , return value is the return value of the function fnmatch.fnmatchcase [ fnmatch . fnmatchcase ] ,
0
example# 3885
called with arguments : filename and pattern . call the function ignore with an argument pattern , for every pattern in ignore_patterns ,
0
example# 3886
if any resulting element is true , return boolean True , otherwise return boolean False . convert os.sep [ os . sep ] into a string and append _STR:0_ to it , substitute the result for dir_suffix .
1
'*' ||| _STR:0_
example# 3887
for p in self.ignore_patterns [ self . ignore_patterns ] if p ends with dir_suffix take sliced list p from the start ,
0
example# 3888
to the negative length of the dir_suffix as the end index and append it to a list , if p doesnt end with dir_suffix , append p to a list , substitute resulting list for norm_patterns . all_files is an empty list .
0
example# 3889
call the function os.walk [ os . walk ] with 3 arguments : root , topdown set to boolean True , followlinks set to self.symlinks [ self . symlinks ] ,
0
example# 3890
for every dirpath , dirnames and filenames in the result , for every dirname in list dirnames ,
0
example# 3891
join dirpath and dirname into a file path , use is as an argument for the call to the function os.path.join [ os . path . join ] ,
0
example# 3892
use the result as an argument for the call to the os.path.join [ os . path . join ] function , use the result and the norm_patterns as arguments for the call to the is_ignored function , if it evaluates to true , remove dirname from the dirnames .
0
example# 3893
if self.verbosity [ self . verbosity ] is greater than integer 1 ,
0
example# 3894
replace ' % s ' in string _STR:0_ with dirname , write it to self.stdout [ self . stdout ] stream .
1
'ignoring directory %s\n' ||| _STR:0_
example# 3895
otherwise if dirname equals string _STR:0_ ,
1
'locale' ||| _STR:0_
example# 3896
remove dirname from the dirnames .
0
example# 3897
call the method os.path.abspath [ os . path . abspath ] with an argument dirpath , join the result and dirname into a file path , inset it at the beggining of self.locale_paths [ self . locale_paths ] .
0
example# 3898
for every filename in filenames ,
0
example# 3899
join dirpath and filename into path , use it as an argument for the call to the function os.path.normpath [ os . path . normpath ] , substitute it for file_path .
0
example# 3900
call the function is_ignored , with arguments : file_path and self.ignore_patterns [ self . ignore_patterns ] , if it evaluates to true ,
0
example# 3901
if self.verbosity [ self . verbosity ] is greater than integer 1 ,
0
example# 3902
replace ' % s ' in string _STR:0_ with filename and dirpath , write it to self.stdout [ self . stdout ] .
1
'ignoring file %s in %s\n' ||| _STR:0_
example# 3903
if not ,
0
example# 3904
locale_dir is None .
0
example# 3905
for every path in self.locale_paths [ self . locale_paths ] ,
0
example# 3906
call the function os.path.abspath [ os . path . abspath ] with an argument dirpath , if it starts with return value of the method os.path.dirname [ os . path . dirname ] ,
0
example# 3907
called with an argument path , substitute path for locale_dir .
0
example# 3908
break the loop execution .
0
example# 3909
if locale_dir is false ,
0
example# 3910
substitute self.default_locale_path [ self . default_locale_path ] for locale_dir .
0
example# 3911
if locale_dir is false ,
0
example# 3912
raise an CommandError with an argument string _STR:0_ ,
1
"Unable to find a locale path to store translations for file %s" ||| _STR:0_
example# 3913
where ' % s ' is replaced with file_path . create an object TranslatableFile with arguments : dirpath , filename and locale_dir , append it to all_files .
0
example# 3914
sort all_files and return it .
0
example# 3915
define the method write_po_file with arguments self , potfile and locale .
0
example# 3916
call the method os.path.dirname [ os . path . dirname ] with an argument potfile , join the result , locale and string _STR:0_ into a file path ,
1
'LC_MESSAGES' ||| _STR:0_
example# 3917
substitute it for basedir . if basedir is not a directory ,
0
example# 3918
make basedir directory ,
0
example# 3919
convert self.domain [ self . domain ] into a string and append string _STR:0_ to it , join basedir and result in file path , substitute it for pofile .
1
'.po' ||| _STR:0_
example# 3920
if pofile path exists ,
0
example# 3921
append self.msgmerge_options [ self . msgmerge_options ] to a list containing string _STR:0_ , append to it a list containing pofile and potfile , substitute the result for args .
1
'msgmerge' ||| _STR:0_
example# 3922
call the function popen_wrapper with an argument args , assign the result to msgs , errors and status .
0
example# 3923
if six.PY2 [ six . PY2 ] is true ,
0
example# 3924
call the method msgs.decode [ msgs . decode ] with an argument string _STR:0_ , substitute the result for msgs .
1
'utf-8' ||| _STR:0_
example# 3925
if errors is true ,
0
example# 3926
if statue is not equal to STATUS_OK .
0
example# 3927
raise an CommandError with an argument string _STR:0_ , where ' % s ' is replaced with errors .
1
"errors happened while running msgmerge\n%s" ||| _STR:0_
example# 3928
otherwise if self.verbosity [ self . verbosity ] is greater than integer 0 ,
0
example# 3929
write errors to self.stdout [ self . stdout ] .
0
example# 3930
if not ,
0
example# 3931
call the function io.open [ io . open ] with 3 arguments : potfile , string _STR:0_ and encoding set to string _STR:1_ as arguments ,
2
'r' ||| _STR:0_
'utf-8' ||| _STR:1_
example# 3932
with the result renamed to fp , perform the following : read file fp and substitute the result for msgs .
0
example# 3933
if self.invoked_for_django [ self . invoked_for_django ] is false ,
0
example# 3934
call the method self.copy_plural_forms [ self . copy_plural_forms ] with arguments : msgs and locale , substitute it for msgs .
0
example# 3935
substitute ' % s ' in string _STR:0_ with self.domain [ self . domain ] ,
1
"#. #-#-#-#-#  %s.pot (PACKAGE VERSION)  #-#-#-#-#\n" ||| _STR:0_
example# 3936
replace all the occurrences of previous string in msgs for an empty string , substitute the result for msgs . call the function io.open [ io . open ] with 3 arguments : pofile , string _STR:0_ and encoding set to string _STR:1_ as arguments ,
2
'w' ||| _STR:0_
'utf-8' ||| _STR:1_
example# 3937
with the result renamed to fp , perform the following : write msgs to fp .
0
example# 3938
if self.no_obsolete [ self . no_obsolete ] is true ,
0
example# 3939
append self.msgattrib_options [ self . msgattrib_options ] to a list containing string _STR:0_ , append to it a list containing string _STR:1_ , pofile and pofile ,
2
'msgattrib' ||| _STR:0_
'-o' ||| _STR:1_
example# 3940
substitute the result for args . call the function popen_wrapper with an argument args , assign the result to msgs , errors and status , respectively .
0
example# 3941
if errors is true ,
0
example# 3942
if status is not equal to STATUS_OK ,
0
example# 3943
raise an CommandError with an argument string _STR:0_ , where ' % s ' is replaced with errors .
1
"errors happened while running msgattrib\n%s" ||| _STR:0_
example# 3944
otherwise if self.verbosity [ self . verbosity ] is greater than integer 0 ,
0
example# 3945
write errors to self.stdout [ self . stdout ] .
0
example# 3946
define the method copy_plural_forms with arguments self , msgs and locale .
0
example# 3947
call the function os.path.dirname [ os . path . dirname ] with an argument django.__file__ [ django . __file__ ] , join the result into a path ,
0
example# 3948
use it as an argument for the call to the function os.path.normpath [ os . path . normpath ] , substitute the result for django_dir . if self.domain [ self . domain ] equals a string _STR:0_ ,
1
'djangojs' ||| _STR:0_
example# 3949
domains is a tuple with 2 elements : strings _STR:0_ and _STR:1_ .
2
'djangojs' ||| _STR:0_
'django' ||| _STR:1_
example# 3950
if not ,
0
example# 3951
domains is a tuple with element string _STR:0_ .
1
'django' ||| _STR:0_
example# 3952
for every domain in domains ,
0
example# 3953
join into a file path : django_dir , _STR:0_ , _STR:1_ , locale , _STR:2_ and string _STR:3_ appended to domain , substitute the result for django_po .
4
'locale' ||| _STR:1_
'.po' ||| _STR:3_
'conf' ||| _STR:0_
'LC_MESSAGES' ||| _STR:2_
example# 3954
if django_po file path exists ,
0
example# 3955
call the function io.open [ io . open ] with 3 arguments : django_po , string _STR:0_ and encoding set to string _STR:1_ as arguments ,
2
'r' ||| _STR:0_
'utf-8' ||| _STR:1_
example# 3956
with the result renamed to fp , perform the following : read data from file fp , use the result as an argument for the call to the function plural_forms_re.search [ plural_forms_re . search ] , substitute it for m .
0
example# 3957
if m is true ,
0
example# 3958
call the method m.group [ m . group ] with an argument string _STR:0_ , use the result as an argument for the call to the force_str ,
1
'value' ||| _STR:0_
example# 3959
substitute the result for plural_form_line . if self.verbosity [ self . verbosity ] is greater than integer 1 ,
0
example# 3960
replace ' % s ' in string _STR:0_ with plural_form_line , write it to self.stdout [ self . stdout ] .
1
"copying plural forms: %s\n" ||| _STR:0_
example# 3961
lines is an empty list .
0
example# 3962
found is boolean False .
0
example# 3963
split msgs by newline characters , for every line in result ,
0
example# 3964
if found is false and , line is false or return value of the function plural_forms_re.search [ plural_forms_re . search ] called with an argument line is false ,
0
example# 3965
append newline to plural_form_line , substitute the result for line .
0
example# 3966
found is boolean True .
0
example# 3967
append line to lines .
0
example# 3968
join elements of lines into a string , separated by newline characters , substitute it for msgs .
0
example# 3969
break the loop execution .
0
example# 3970
return msgs .
0
example# 3971
import module sys .
0
example# 3972
import module os .
0
example# 3973
import module operator .
0
example# 3974
from django.apps [ django . apps ] import apps into default name space .
0
example# 3975
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 3976
from django.db.migrations [ django . db . migrations ] import Migration into default name space .
0
example# 3977
from django.db.migrations.loader [ django . db . migrations . loader ] import MigrationLoader into default name space .
0
example# 3978
from django.db.migrations.autodetector [ django . db . migrations . autodetector ] import MigrationAutodetector into default name space .
0
example# 3979
from django.db.migrations.questioner [ django . db . migrations . questioner ] import MigrationQuestioner and InteractiveMigrationQuestioner into default name space .
0
example# 3980
from django.db.migrations.state [ django . db . migrations . state ] import ProjectState into default name space .
0
example# 3981
from django.db.migrations.writer [ django . db . migrations . writer ] import MigrationWriter into default name space .
0
example# 3982
from django.utils.six.moves [ django . utils . six . moves ] import reduce into default name space .
0
example# 3983
derive the class Command from the BaseCommand class .
0
example# 3984
help is a string _STR:0_ .
1
"Creates new migration(s) for apps." ||| _STR:0_
example# 3985
define the method add_arguments with 2 arguments self and parser .
0
example# 3986
call the method parser.add_argument [ parser . add_argument ] with 4 arguments : string _STR:0_ , metavar set to string _STR:1_ , nargs set to character_STR:2_ ,
3
'*' ||| _STR:2_
'args' ||| _STR:0_
'app_label' ||| _STR:1_
example# 3987
and help as a string _STR:0_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:1_ , action as a string _STR:2_ , dest as string _STR:3_ ,
4
'store_true' ||| _STR:2_
'dry_run' ||| _STR:3_
'--dry-run' ||| _STR:1_
'Specify the app label(s) to create migrations for.' ||| _STR:0_
example# 3988
default set to boolean False , help as a string _STR:0_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:1_ , action as a string _STR:2_ , dest as a string _STR:3_ ,
4
"Just show what migrations would be made; don't actually write them." ||| _STR:0_
'--merge' ||| _STR:1_
'store_true' ||| _STR:2_
'merge' ||| _STR:3_
example# 3989
default set to boolean False and help set to a string _STR:0_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:1_ , action as a string _STR:2_ , dest as a string _STR:3_ ,
4
'--empty' ||| _STR:1_
"Enable fixing of migration conflicts." ||| _STR:0_
'store_true' ||| _STR:2_
'empty' ||| _STR:3_
example# 3990
default set to boolean False and help as a string _STR:0_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:1_ , action as a string _STR:2_ ,
3
"Create an empty migration." ||| _STR:0_
'store_false' ||| _STR:2_
'--noinput' ||| _STR:1_
example# 3991
dest as a string _STR:0_ , default set to boolean True , and help as a string _STR:1_ . define the method handle with 3 arguments : self , unpacked list app_labels and unpacked dictionary options .
2
'interactive' ||| _STR:0_
'Tells Django to NOT prompt the user for input of any kind.' ||| _STR:1_
example# 3992
get the value under the _STR:0_ key of the options dictionary , substitute it for self.verbosity [ self . verbosity ] .
1
'verbosity' ||| _STR:0_
example# 3993
get the value under the _STR:0_ key of the options dictionary , substitute it for self.interactive [ self . interactive ] .
1
'interactive' ||| _STR:0_
example# 3994
get the value under the _STR:0_ key of the options dictionary , if the key exists substitute it for self.dry_run [ self . dry_run ] ,
1
'dry_run' ||| _STR:0_
example# 3995
if not , self.dry_run [ self . dry_run ] is boolean False . get the value under the _STR:0_ key of the options dictionary , if the key exists substitute it for self.merge [ self . merge ] ,
1
'merge' ||| _STR:0_
example# 3996
if not , self.merge [ self . merge ] is boolean False . get the value under the _STR:0_ key of the options dictionary , if the key exists substitute it for self.empty [ self . empty ] ,
1
'empty' ||| _STR:0_
example# 3997
if not , self.empty [ self . empty ] is boolean False . crate a set containing of app_labels elements , substitute it for app_labels .
0
example# 3998
bad_app_labels is an empty set .
0
example# 3999
for every app_label in app_labels ,
0
example# 4000
try ,
0
example# 4001
call the method apps.get_app_config [ apps . get_app_config ] with an argument app_label .
0
example# 4002
if LookupError exception is caught ,
0
example# 4003
call the method bad_app_labels with an argument app_label ,
0
example# 4004
if bad_app_labels is true ,
0
example# 4005
for every app_label in bad_app_labels ,
0
example# 4006
write string _STR:0_ with ' % s ' where ' % s ' is replaced with app_label ,
1
"App '%s' could not be found. Is it in INSTALLED_APPS?" ||| _STR:0_
example# 4007
write it for self.stderr [ self . stderr ] . exit the program with the integer 2 as exit code .
0
example# 4008
loader is an instance of MigrationLoader class , created with 2 arguments : None and ignore_no_migrations set to boolean True .
0
example# 4009
call the method loader.detect_conflicts [ loader . detect_conflicts ] , substitute the result for conflicts .
0
example# 4010
if conflicts is true and self.merge [ self . merge ] is false ,
0
example# 4011
for every app and names in result of the method conflicts.items [ conflicts . items ] , join names into a string , separated by _STR:0_ ,
1
', ' ||| _STR:0_
example# 4012
join it with app into a string , separated with string _STR:0_ , substitute it for name_str . substitute _STR:1_python manage.py [ manage . py ] makemigrations -- merge ' '' ,
2
'; ' ||| _STR:0_
'%s\ in string "Conflicting migrations detected (%s).\nTo fix them run ' ||| _STR:1_
example# 4013
with name_str , use it as an argument to throw an CommandError exception . if self.merge [ self . merge ] is true and conflicts is false ,
0
example# 4014
write string _STR:0_ to self.stdout [ self . stdout ] stream .
1
"No conflicts detected to merge." ||| _STR:0_
example# 4015
return nothing .
0
example# 4016
if self.merge [ self . merge ] and conflicts are both true ,
0
example# 4017
call the method self.handle_merge [ self . handle_merge ] with 2 arguments : loader and conflicts , return the result .
0
example# 4018
autodetector is an instance of the MigrationAutodetector class , created with 3 arguments : result of the method loader.project_state [ loader . project_state ] ,
0
example# 4019
result of the method ProjectState.from_apps [ ProjectState . from_apps ] with an argument apps and result of the method InteractiveMigrationQuestioner , called with 2 arguments specified_apps set to app_labels and dry_run set to self.dry_run [ self . dry_run ] . if self.empty [ self . empty ] is true ,
0
example# 4020
if app_labels is false ,
0
example# 4021
raise an CommandError with an argument string _STR:0_ .
1
"You must supply at least one app label when using --empty." ||| _STR:0_
example# 4022
crate a dictionary with app mapping and from the class Migration , created with arguments : string _STR:0_ and app ,
1
'custom' ||| _STR:0_
example# 4023
for every app in app_labels . call the method autodetector.arrange_for_graph [ autodetector . arrange_for_graph ] with 2 arguments : changes , loader.graph [ loader . graph ] , substitute the result for changes .
0
example# 4024
call the method self.write_migration_files [ self . write_migration_files ] with an argument changes .
0
example# 4025
return nothing .
0
example# 4026
call the method autodetector.changes [ autodetector . changes ] with 3 arguments : graph set to loader.graph [ loader . graph ] , trim_to_apps set to app_labels ,
0
example# 4027
if it exists or None if not and convert_apps set to app_labels , if it exists or None if not , substitute the result for changes . if changes is false and self.verbosity [ self . verbosity ] is greater than , or equal to iteger 1 ,
0
example# 4028
if length of app_labels is equal to integer 1 ,
0
example# 4029
substitute ' % s ' in string _STR:0_ with the result of the method app_labels.pop [ app_labels . pop ] , write it to self.stdout [ self . stdout ] .
1
"No changes detected in app '%s'" ||| _STR:0_
example# 4030
otherwise if length of app_labels is greater than integer 1 ,
0
example# 4031
substitute ' % s ' in string _STR:0_ with the app_labels joined into a string , separated by string _STR:1_ ,
2
"', '" ||| _STR:1_
"No changes detected in apps '%s'" ||| _STR:0_
example# 4032
write it to self.stdout [ self . stdout ] . if not ,
0
example# 4033
write string _STR:0_ to self.stdout [ self . stdout ] stream .
1
"No changes detected" ||| _STR:0_
example# 4034
return nothing .
0
example# 4035
call the method self.write_migration_files [ self . write_migration_files ] with an argument changes .
0
example# 4036
define the method write_migration_files with arguments self and changes .
0
example# 4037
directory_created is an empty dictionary .
0
example# 4038
for every app_label and app_migrations in result of the method changes.items [ changes . items ] ,
0
example# 4039
if self.verbosity [ self . verbosity ] is greater or equal to integer 1 ,
0
example# 4040
substitute ' % s ' in a string _STR:0_ with app_label , append newline to it ,
1
"Migrations for '%s':" ||| _STR:0_
example# 4041
use it as an argument for the call to the method self.style.MIGRATE_HEADING [ self . style . MIGRATE_HEADING ] , write the result to self.stdout [ self . stdout ] . for every migration in app_migrations ,
0
example# 4042
writer is an instance of MigrationWriter class , created with an argument migration .
0
example# 4043
if self.verbosity [ self . verbosity ] is greater or equal to integer 1 ,
0
example# 4044
substitute ' % s ' in a string _STR:0_ with return value of the self.style.MIGRATE_LABEL [ self . style . MIGRATE_LABEL ] method called with argument writer.filename [ writer . filename ] ,
1
"  %s:\n" ||| _STR:0_
example# 4045
write the result to self.stdout [ self . stdout ] . for every operation in migration.operations [ migration . operations ] ,
0
example# 4046
substitute ' % s ' in a string _STR:0_ with return value of the operation.describe [ operation . describe ] method , write the result to self.stdout [ self . stdout ] .
1
"    - %s\n" ||| _STR:0_
example# 4047
if self.dry_run [ self . dry_run ] is false ,
0
example# 4048
call the function os.path.dirname [ os . path . dirname ] with an argument writer.path [ writer . path ] , substitute the result for migrations_directory .
0
example# 4049
get the value under the app_label key of the directory_created dictionary , if exists and it is false ,
0
example# 4050
if migrations_directory is not a directory ,
0
example# 4051
make a directory migrations_directory .
0
example# 4052
join migrations_directory and string _STR:0_ into a file path , substitute it for init_path .
1
"__init__.py" ||| _STR:0_
example# 4053
if init_path is not a file ,
0
example# 4054
crate a file named init_path .
0
example# 4055
value under the all_label key of the directory_created dictionary is boolean True .
0
example# 4056
call the method writer.as_string [ writer . as_string ] , substitute the result for migration_string .
0
example# 4057
open writer.path [ writer . path ] file in write mode , with the file descriptor as fh , perform ,
0
example# 4058
write migration_string to file fh .
0
example# 4059
otherwise if self.verbosity [ self . verbosity ] equals integer 3 ,
0
example# 4060
substitute ' % s ' in a string _STR:0_ with writer.filename [ writer . filename ] , append newline to it ,
1
"Full migrations file '%s':" ||| _STR:0_
example# 4061
use it as an argument for the call to the method self.style.MIGRATE_HEADING [ self . style . MIGRATE_HEADING ] , write the result to self.stdout [ self . stdout ] . call the method writer.as_string [ writer . as_string ] , append newline to the result , write it to self.stdout [ self . stdout ] .
0
example# 4062
define the method handle_merge with arguments self , loader and conflicts .
0
example# 4063
if self.interactive [ self . interactive ] is true ,
0
example# 4064
questioner is an instance of a InteractiveMigrationQuestioner class .
0
example# 4065
if not ,
0
example# 4066
questioner is an instance of a InteractiveMigrationQuestioner class , created with an argument : defaults set to dictionary with entry :
0
example# 4067
boolean True for _STR:0_ . for every app_label and migration_names in result of the method conflicts.items [ conflicts . items ] ,
1
'ask_merge' ||| _STR:0_
example# 4068
merge_migrations is an empty list .
0
example# 4069
for every migration_name in migration_names ,
0
example# 4070
call the method loader.get_migration [ loader . get_migration ] with arguments app_label and migration_name , substitute the result for migration .
0
example# 4071
call the method loader.graph.forwards_plan [ loader . graph . forwards_plan ] with argument a tuple , with 2 elements : app_label and migration_name ,
0
example# 4072
substitute the result for migration.ancestry [ migration . ancestry ] . append migration to merge_migrations .
0
example# 4073
common_ancestor is None .
0
example# 4074
for m in merge_migrations append m.ancestry [ m . ancestry ] to a list , zip the resulting list into tuples of pairs , for every level in result ,
0
example# 4075
apply operator.eq [ operator . eq ] function to elements of level iterable , until level is reduced to a single value , if the result is true ,
0
example# 4076
substitute first element of level for common_ancestor .
0
example# 4077
if not ,
0
example# 4078
break the loop execution ,
0
example# 4079
if common_ancestor is None ,
0
example# 4080
raise an ValueError with an argument string _STR:0_ , where ' % s ' is replaced with migration_names .
1
"Could not find common ancestor of %s" ||| _STR:0_
example# 4081
for every migration in merge_migrations ,
0
example# 4082
call the method migration.ancestry.index [ migration . ancestry . index ] with an argument common_ancestor , increment the result by one ,
0
example# 4083
slice migration.ancestry [ migration . ancestry ] list from the last result as an starting index to the end , substitute the slice for migration.branch [ migration . branch ] . migration.merged_operations [ migration . merged_operations ] is an empty list .
0
example# 4084
for every node_app and node_name in migration.branch [ migration . branch ] ,
0
example# 4085
call the method loader.get_migration [ loader . get_migration ] with arguments node_app and node_name , extend the migration.merged_operations [ migration . merged_operations ] with the operations field of the result .
0
example# 4086
if self.verbosity [ self . verbosity ] is greater than integer 1 ,
0
example# 4087
substitute ' % s ' in a string _STR:0_ with app_label ,
1
"Merging %s" ||| _STR:0_
example# 4088
use it as an argument for the call to the method self.style.MIGRATE_HEADING [ self . style . MIGRATE_HEADING ] , write the result to self.stdout [ self . stdout ] . for every migration in merge_migrations ,
0
example# 4089
substitute ' % s ' in a string _STR:0_ with migration.name [ migration . name ] ,
1
"  Branch %s" ||| _STR:0_
example# 4090
use it as an argument for the call to the method self.style.MIGRATE_HEADING [ self . style . MIGRATE_HEADING ] , write the result to self.stdout [ self . stdout ] . for every operation in migration.merged_operations [ migration . merged_operations ] ,
0
example# 4091
substitute ' % s ' in a string _STR:0_ with return value of the operation.describe [ operation . describe ] method , write the result to self.stdout [ self . stdout ] .
1
"    - %s\n" ||| _STR:0_
example# 4092
call the method questioner.ask_merge [ questioner . ask_merge ] with an argument app_label , if it evaluates to true ,
0
example# 4093
numbers is a list containing return value of the MigrationAutodetector.parse_number [ MigrationAutodetector . parse_number ] method called with an argument migration.name [ migration . name ] ,
0
example# 4094
for every migration in merge_migrations . try ,
0
example# 4095
biggest_number is maximum numbers element .
0
example# 4096
if ValueError exception is caught ,
0
example# 4097
biggest_number is integer 1 .
0
example# 4098
subclass is a instance of a class named Migration , derived from the base class Migration , with 1 field :
0
example# 4099
dependencies set to a list of tuples with 2 elements : app_label and migration.name [ migration . name ] for every migration in merge_migrations . call the method subsclass with 2 arguments : string _STR:0_ , replace _STR:1_ with biggest_number incremented by one ,
2
"%04i_merge" ||| _STR:0_
'%04i' ||| _STR:1_
example# 4100
that occupies minimum 4 places within a string , and app_label , substitute the result for new_migration . writer is instance of MigrationWriter class , created with new_migration argument .
0
example# 4101
open writer.path [ writer . path ] file in write mode , with the file descriptor as fh , perform the following ,
0
example# 4102
call the method writer.as_string [ writer . as_string ] , write the result to fh file .
0
example# 4103
if self.verbosity [ self . verbosity ] is greater than integer 0 ,
0
example# 4104
substitute ' % s ' in a string _STR:0_ with writer path , write it to self.stdout [ self . stdout ] .
1
"\nCreated new merge migration %s" ||| _STR:0_
example# 4105
from __future__ import unicode_literals into default name space .
0
example# 4106
from collections import OrderedDict into default name space .
0
example# 4107
from importlib import import_module into default name space .
0
example# 4108
import module itertools .
0
example# 4109
import module traceback .
0
example# 4110
from django.apps [ django . apps ] import apps into default name space .
0
example# 4111
from django.core.management [ django . core . management ] import call_command into default name space .
0
example# 4112
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 4113
from django.core.management.color [ django . core . management . color ] import no_style into default name space .
0
example# 4114
from django.core.management.sql [ django . core . management . sql ] import custom_sql_for_model , emit_post_migrate_signal and emit_pre_migrate_signal into default name space .
0
example# 4115
from django.db [ django . db ] import connections , router , transaction and DEFAULT_DB_ALIAS into default name space .
0
example# 4116
from django.db.migrations.executor [ django . db . migrations . executor ] import MigrationExecutor into default name space .
0
example# 4117
from django.db.migrations.loader [ django . db . migrations . loader ] import MigrationLoader and AmbiguityError into default name space .
0
example# 4118
from django.db.migrations.state [ django . db . migrations . state ] import ProjectState into default name space .
0
example# 4119
from django.db.migrations.autodetector [ django . db . migrations . autodetector ] import MigrationAutodetector into default name space .
0
example# 4120
from django.utils.module_loading [ django . utils . module_loading ] import module_has_submodule into default name space .
0
example# 4121
derive the class Command from the base class BaseCommand .
0
example# 4122
help is a string _STR:0_ .
1
"Updates database schema. Manages both apps with migrations and those without." ||| _STR:0_
example# 4123
define the method add_arguments with self class instance and parse as the arguments .
0
example# 4124
call the method parser.add_argument [ parser . add_argument ] with string _STR:0_ , nargs set to charcter _STR:1_ , help containing string ,
2
'?' ||| _STR:1_
'app_label' ||| _STR:0_
example# 4125
_STR:0_ as arguments . call the method parser.add_argument [ parser . add_argument ] with string _STR:1_ , nargs set to charcter _STR:2_ , help containing string ,
3
'migration_name' ||| _STR:1_
'App label of an application to synchronize the state.' ||| _STR:0_
'?' ||| _STR:2_
example# 4126
_STR:0_ as arguments . call the method parser.add_argument [ parser . add_argument ] with string _STR:1_ , action containing string _STR:2_ , dest set to string _STR:3_ ,
4
'store_false' ||| _STR:2_
'interactive' ||| _STR:3_
'--noinput' ||| _STR:1_
'Database state will be brought to the state after that migration.' ||| _STR:0_
example# 4127
default set to True , help containing string _STR:0_ as arguments . call the method parser.add_argument [ parser . add_argument ] with string _STR:1_ , action containing string _STR:2_ ,
3
'--no-initial-data' ||| _STR:1_
'store_false' ||| _STR:2_
'Tells Django to NOT prompt the user for input of any kind.' ||| _STR:0_
example# 4128
dest set to string _STR:0_ , default set to True , help containing string _STR:1_ as arguments . call the method parser.add_argument [ parser . add_argument ] with string _STR:2_ , action containing string _STR:3_ , dest set to string _STR:4_ ,
5
'database' ||| _STR:4_
'Tells Django not to load any initial data after database synchronization.' ||| _STR:1_
'--database' ||| _STR:2_
'store' ||| _STR:3_
'load_initial_data' ||| _STR:0_
example# 4129
default set to DEFAULT_DB_ALIAS , help containing string _STR:0_ as arguments . call the method parser.add_argument [ parser . add_argument ] with string _STR:1_ , action containing string _STR:2_ , dest set to string _STR:3_ ,
4
'--fake' ||| _STR:1_
'store_true' ||| _STR:2_
'Nominates a database to synchronize. Defaults to the "default" database.' ||| _STR:0_
'fake' ||| _STR:3_
example# 4130
default set to False , help containing string _STR:0_ as arguments . call the method parser.add_argument [ parser . add_argument ] with string _STR:1_ , string _STR:2_ , action contains string _STR:3_ , dest set to string _STR:4_ ,
5
'--list' ||| _STR:1_
'list' ||| _STR:4_
'-l' ||| _STR:2_
'store_true' ||| _STR:3_
'Mark migrations as run without actually running them' ||| _STR:0_
example# 4131
default set to False , help containing string _STR:0_ as arguments . define the method handle with self instance of a class , list args , dictionary options as arguments .
1
'Show a list of all known migrations and which are applied' ||| _STR:0_
example# 4132
get the value from the options dictionary under the key _STR:0_ , substitute it for self.verbosity [ self . verbosity ] .
1
'verbosity' ||| _STR:0_
example# 4133
get the value from the options dictionary under the key _STR:0_ , substitute it for self.interactive [ self . interactive ] .
1
'interactive' ||| _STR:0_
example# 4134
get the value from the options dictionary under the key _STR:0_ , substitute it for self.show_traceback [ self . show_traceback ] .
1
'traceback' ||| _STR:0_
example# 4135
get the value from the options dictionary under the key _STR:0_ , substitute it for self.load_initial_data [ self . load_initial_data ] .
1
'load_initial_data' ||| _STR:0_
example# 4136
get the value from the options dictionary under the key _STR:0_ , or False if the key dont exists , substitute it for self.test_database [ self . test_database ] .
1
'test_database' ||| _STR:0_
example# 4137
for every app_config in return value of the call to the function apps.get_app_configs [ apps . get_app_configs ] ,
0
example# 4138
if call to the function module_has_submodule with app_config.module [ app_config . module ] and _STR:0_ evaluates to True .
1
"management" ||| _STR:0_
example# 4139
import module _STR:0_ from the package app_config.name [ app_config . name ] .
1
'.management' ||| _STR:0_
example# 4140
get the value under the key _STR:0_ of the options dictionary , substitute it for db .
1
'database' ||| _STR:0_
example# 4141
substitute connections element at the index of the value db for connections .
0
example# 4142
get the value under the _STR:0_ key of options dictionary , if key doesnt exist return False , if the return value is True ,
1
'list' ||| _STR:0_
example# 4143
call the method self.show_migration_list [ self . show_migration_list ] with connection as first argument , as second argument use value under the _STR:0_ key of options dictionary ,
1
'app_label' ||| _STR:0_
example# 4144
if exists , if not use None as the second argument , return the result . call the function MigrationExecutor with connection and self.migration_progress_callback [ self . migration_progress_callback ] as arguments , substitute the result fro executor .
0
example# 4145
call the executor.loader.detect_conflicts [ executor . loader . detect_conflicts ] , substitute the result fr conflicts .
0
example# 4146
if conflicts is true ,
0
example# 4147
for every app and names in key , value tuple pairs of conflicts dictionary join names into a string separated by commas ,
0
example# 4148
in _STR:0_ substitute ' % s ' with names string and app , respective , join all the previous pairs into a string separated by _STR:1_ , substitute it for name_str . raise CommandError exception , with _STR:2_ ,
3
"Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'" ||| _STR:2_
';' ||| _STR:1_
"%s in %s" ||| _STR:0_
example# 4149
with ' % s ' substituted for name_str , as argument . run_syncdb is boolean False .
0
example# 4150
target_app_labels_only is boolean True .
0
example# 4151
if values under the _STR:0_ and _STR:1_ keys of the options dictionary are True ,
2
'migration_name' ||| _STR:1_
'app_label' ||| _STR:0_
example# 4152
assign values under the _STR:0_ and _STR:1_ keys of the options dictionary to the app_label and migration_name , respectively .
2
'migration_name' ||| _STR:1_
'app_label' ||| _STR:0_
example# 4153
if app_label is not contained in executor.loader.migrated_apps [ executor . loader . migrated_apps ] ,
0
example# 4154
raise CommandError exception with _STR:0_ ,
1
"App '%s' does not have migrations (you cannot selectively sync unmigrated apps)" ||| _STR:0_
example# 4155
with ' % s ' substituted for app_label , as arguments . if migration_name equals to string _STR:0_ ,
1
'zero' ||| _STR:0_
example# 4156
targets is a list containing tuple with two elements , app_label and None .
0
example# 4157
if not ,
0
example# 4158
try ,
0
example# 4159
call the executor.loader.get_migration_by_prefix [ executor . loader . get_migration_by_prefix ] with app_label and migration_name , substitute the result for migration .
0
example# 4160
if AmbiguityError exception is caught ,
0
example# 4161
raise CommandError exception with _STR:0_ ,
1
"More than one migration matches '%s' in app '%s'. Please be more specific." ||| _STR:0_
example# 4162
with ' % s ' substituted for migration_name and app_label , respectively , as arguments . if KeyError exception is caught ,
0
example# 4163
raise CommandError exception with _STR:0_ ,
1
"Cannot find a migration matching '%s' from app '%s'." ||| _STR:0_
example# 4164
with ' % s ' substituted for migration_name and app_label , respectively , as arguments . targets is a list containing tuple with two elements , app_label and migration.name [ migration . name ] .
0
example# 4165
target_app_labels_only is boolean False .
0
example# 4166
otherwise if value under the _STR:0_ key of options dictionary is true ,
1
'app_label' ||| _STR:0_
example# 4167
substitute the value under the _STR:0_ key of options dictionary for app_label .
1
'app_label' ||| _STR:0_
example# 4168
if app_label is not contained in executor.loader.migrated_apps [ executor . loader . migrated_apps ] ,
0
example# 4169
raise CommandError exception with _STR:0_ ,
1
"App '%s' does not have migrations (you cannot selectively sync unmigrated apps)" ||| _STR:0_
example# 4170
with ' % s ' substituted for app_label , as arguments . for every key in return vale of the method executor.loader.graph.leaf_nodes [ executor . loader . graph . leaf_nodes ] , check if the first element of key equals to app_label ,
0
example# 4171
if it does append it to targets list . if not ,
0
example# 4172
call the method executor.loader.graph.leaf_nodes [ executor . loader . graph . leaf_nodes ] and substitute its result for targets .
0
example# 4173
run_syncdb is boolean True .
0
example# 4174
call the executor.migration_plan [ executor . migration_plan ] method with targets as the argument , substitute the result for plan .
0
example# 4175
if self.verbosity [ self . verbosity ] is greater or equal to integer 1 .
0
example# 4176
call the self.style.MIGRATE_HEADING [ self . style . MIGRATE_HEADING ] method , with string _STR:0_ as an argument ,
1
"Operations to perform:" ||| _STR:0_
example# 4177
use the result as an argument for the call to the self.stdout.write [ self . stdout . write ] method . if run_syncdb and executor.loader.unmigrated_apps [ executor . loader . unmigrated_apps ] exist ,
0
example# 4178
join the executor.loader.unmigrated_apps [ executor . loader . unmigrated_apps ] into a string separated by string _STR:0_ append it to the end of a string _STR:1_ ,
2
"  Synchronize unmigrated apps: " ||| _STR:1_
', ' ||| _STR:0_
example# 4179
use it as an argument for the call to the self.style.MIGRATE_LABEL [ self . style . MIGRATE_LABEL ] method , use the result of the previous method as an argument for the call to the self.stdout.write [ self . stdout . write ] method . if target_app_labels_only is true ,
0
example# 4180
for every a and n in targets , put a into a set , join all the set elements into a string separated by string _STR:0_ ,
1
', ' ||| _STR:0_
example# 4181
if set is empty return string _STR:0_ instead , append the previous to the string _STR:1_ , use the previous string as the argument for the call to the method self.style.MIGRATE_LABEL [ self . style . MIGRATE_LABEL ] , use the result as an argument for the call to the method self.stdout.write [ self . stdout . write ] . if not ,
2
" Apply all migrations: " ||| _STR:1_
'(none)' ||| _STR:0_
example# 4182
if element of targets in first row and second column is None ,
0
example# 4183
convert the first element of the first row of targets to string , append it to the string _STR:0_ ,
1
"  Unapply all migrations: " ||| _STR:0_
example# 4184
use the it as an argument for the call to the self.style.MIGRATE_LABEL [ self . style . MIGRATE_LABEL ] method , use the result to cal the self.stdout.write [ self . stdout . write ] method . if not ,
0
example# 4185
replace ' % s ' in string _STR:0_ with second and first element of the first targets row , respectively ,
1
"%s, from %s" ||| _STR:0_
example# 4186
append it to the string _STR:0_ , use it as the argument for the call to the self.style.MIGRATE_LABEL [ self . style . MIGRATE_LABEL ] method , call the self.stdout.write [ self . stdout . write ] method with previous return value as an argument . if run_syncdb and executor.loader.unmigrated_apps [ executor . loader . unmigrated_apps ] is true ,
1
"  Target specific migration: " ||| _STR:0_
example# 4187
if self.verbosity [ self . verbosity ] is greater or equal to integer 1 .
0
example# 4188
call the self.style.MIGRATE_HEADING [ self . style . MIGRATE_HEADING ] with string _STR:0_ as an argument ,
1
"Synchronizing apps without migrations:" ||| _STR:0_
example# 4189
use the result as an argument for the call to the self.stdout.write [ self . stdout . write ] . call the self.sync_apps [ self . sync_apps ] method with connection and executor.loader.unmigrated_apps [ executor . loader . unmigrated_apps ] as arguments , substitute it for created_models .
0
example# 4190
if not ,
0
example# 4191
create_models is an empty list .
0
example# 4192
if the value under the _STR:0_ key of the options dictionary exists ,
1
'test_flush' ||| _STR:0_
example# 4193
call the function call_command with string _STR:0_ , verbosity set to greater element , self.verbosity [ self . verbosity ] decremented by 1 or integer 0 ,
1
'flush' ||| _STR:0_
example# 4194
interactive set to boolean False , database set to db , reset_sequences set to boolean False , inhibit_post_migrate set to boolean True . if self.verbosity [ self . verbosity ] is greater or equal to integer 1 ,
0
example# 4195
call the self.style.MIGRATE_HEADING [ self . style . MIGRATE_HEADING ] method with string _STR:0_ as an argument , use the result as an argument for the call to the self.stdout.write [ self . stdout . write ] method .
1
"Running migrations:" ||| _STR:0_
example# 4196
if plan is not true ,
0
example# 4197
if self.verbosity [ self . verbosity ] is greater or equal to integer 1 ,
0
example# 4198
call the method self.stdout.write [ self . stdout . write ] with string _STR:0_ as an argument .
1
"  No migrations to apply." ||| _STR:0_
example# 4199
call the MigrationAutodetector function with arguments , return value of the call to the method executor.loader.project_state [ executor . loader . project_state ] ,
0
example# 4200
and return value of the call to the method ProjectState.from_apps [ ProjectState . from_apps ] with apps as an argument , assign it to the autodetector . call the method autodetector.changes [ autodetector . changes ] with the graph set to executor.loader.graph [ executor . loader . graph ] as an argument , substitute it for the changes .
0
example# 4201
if changes is true ,
0
example# 4202
call the method self.style.NOTICE [ self . style . NOTICE ] with string _STR:0_ as an argument , use the result as an argument for the call to the self.stdout.write [ self . stdout . write ] method .
1
"  Your models have changes that are not yet reflected in a migration, and so won't be applied." ||| _STR:0_
example# 4203
call the method self.style.NOTICE [ self . style . NOTICE ] with string _STR:0_ as an argument , use the result as an argument for the call to the self.stdout.write [ self . stdout . write ] method .
1
"  Run 'manage.py makemigrations' to make new migrations, and then re-run 'manage.py migrate' to apply them." ||| _STR:0_
example# 4204
if not ,
0
example# 4205
call the executor.migrate [ executor . migrate ] method with , targets , plan and fake set to the value under the _STR:0_ key of options dictionary ,
1
'fake' ||| _STR:0_
example# 4206
if the _STR:0_ key doesnt exists set fake to boolean False , as arguments . call the method emit_post_migrate_signal with created_models , self.verbosity [ self . verbosity ] , self.interactive [ self . interactive ] and connection.alias [ connection . alias ] as arguments .
1
'fake' ||| _STR:0_
example# 4207
define the method migration_progress_callback with self class instance , action , migration and fake set to boolean False as arguments .
0
example# 4208
if self.verbosity [ self . verbosity ] is greater or equal to integer 1 ,
0
example# 4209
if action equals to string _STR:0_ ,
1
"apply_start" ||| _STR:0_
example# 4210
call the self.stdout.write [ self . stdout . write ] method , with string _STR:0_ with ' % s ' replaced with migration and ending set to _STR:1_ , as arguments .
2
'' ||| _STR:1_
"  Applying %s..." ||| _STR:0_
example# 4211
flush the output buffer of the self.stdout [ self . stdout ] object .
0
example# 4212
otherwise if action equals to string _STR:0_ ,
1
'apply_success' ||| _STR:0_
example# 4213
if fake is true ,
0
example# 4214
wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS [ self . style . MIGRATE_SUCCESS ] with string _STR:0_ as a argument .
1
" FAKED" ||| _STR:0_
example# 4215
if not ,
0
example# 4216
wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS [ self . style . MIGRATE_SUCCESS ] with string _STR:0_ as a argument .
1
" OK" ||| _STR:0_
example# 4217
otherwise if action equals to string _STR:0_ .
1
'unapply_start' ||| _STR:0_
example# 4218
call the self.stdout.write [ self . stdout . write ] method , with string _STR:0_ with ' % s ' replaced with migration and ending set to _STR:1_ , as arguments .
2
'' ||| _STR:1_
"  Unapplying %s..." ||| _STR:0_
example# 4219
flush the output buffer of the self.stdout [ self . stdout ] object .
0
example# 4220
otherwise if action equals to string _STR:0_ .
1
"unapply_success" ||| _STR:0_
example# 4221
if fake is true ,
0
example# 4222
wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS [ self . style . MIGRATE_SUCCESS ] with string _STR:0_ as a argument .
1
" FAKED" ||| _STR:0_
example# 4223
if not ,
0
example# 4224
wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS [ self . style . MIGRATE_SUCCESS ] with string _STR:0_ as a argument .
1
" OK" ||| _STR:0_
example# 4225
define the method sync_apps with self class instance , connection and app_labels as arguments .
0
example# 4226
call the connection.cursor [ connection . cursor ] method , substitute the result for cursor .
0
example# 4227
try ,
0
example# 4228
call the connection.introspection.table_names [ connection . introspection . table_names ] with cursor as argument , store the result in tables .
0
example# 4229
call the connection.introspection.table_names [ connection . introspection . table_names ] with tables as argument , store the result in seen_models .
0
example# 4230
created_models is a set .
0
example# 4231
pending_references is a empty dictionary .
0
example# 4232
for every app_config in return value of the method apps.get_app_configs [ apps . get_app_configs ] if app_config.models_module [ app_config . models_module ] is not None ,
0
example# 4233
and app_config.label [ app_config . label ] is contained in app_labels , create a tuple containing app_config.label [ app_config . label ] and return value of the method router.get_migratable_models [ router . get_migratable_models ] called with app_config , connection.alias [ connection . alias ] and include_auto_created set to True , append the tuple to the list all_models . define the method model_installed with model as an argument .
0
example# 4234
substitute model._meta [ model . _meta ] for opts .
0
example# 4235
substitute connection.introspection.table_name_converter [ connection . introspection . table_name_converter ] for converter .
0
example# 4236
evaluate next boolean expression , value of converter function with opts.db_table [ opts . db_table ] as argument is contained in tables ,
0
example# 4237
or opts.auto_created [ opts . auto_created ] is True and return value of converter function with opts.auto_created._meta.db_table [ opts . auto_created . _meta . db_table ] is contained in tables , invert the evaluated expression and return it . manifest is OrderDict class instance , created with tuple of two elements , app_name and list of elements of model_list for which model_installed function returned true , for every app_name and model_list in all_modules .
0
example# 4238
unpack the manifest.values [ manifest . values ] function return value and feed it to the itertools.chain [ itertools . chain ] function , create_models is a set containing chanied list .
0
example# 4239
call the emit_pre_migrate_signal with create_models , self.verbosity [ self . verbosity ] , self.interactive [ self . interactive ] . connection.alias [ connection . alias ] as arguments .
0
example# 4240
if self.verbosity [ self . verbosity ] is greater or equal than integer 1 ,
0
example# 4241
write the string _STR:0_ to the standard output .
1
"  Creating tables...\n" ||| _STR:0_
example# 4242
with the call to the transaction.atomic [ transaction . atomic ] method with using set to connection.alias [ connection . alias ] , savepoint set to connection.features.can_rollback_ddl [ connection . features . can_rollback_ddl ] as arguments ,
0
example# 4243
for every app_name and model_list in return value of manifest.items [ manifest . items ] function ,
0
example# 4244
for every model in model_list ,
0
example# 4245
if self.verbosity [ self . verbosity ] is greater or equal to 3 ,
0
example# 4246
call the self.stdout.write [ self . stdout . write ] method with string _STR:0_ as argument , with all occurrences of ' % s ' replaced with ,
1
"    Processing %s.%s model\n" ||| _STR:0_
example# 4247
app_name and model._meta.object_name [ model . _meta . object_name ] , respectively . evaluate connection.creation.sql_create_model [ connection . creation . sql_create_model ] method with model , no_style ( ) and seen_models as arguments ,
0
example# 4248
assign the result to the sql and references , respectively . add model to seen_models set .
0
example# 4249
add model to created_models set .
0
example# 4250
for every refto and refs in return value of references.items [ references . items ] method .
0
example# 4251
call the method extend with refs as argument , on the result call the pending_references.setdefault [ pending_references . setdefault ] method with refto and empty list as arguments .
0
example# 4252
if refto is contained in seen_models ,
0
example# 4253
call the connection.creation.sql_for_pending_references [ connection . creation . sql_for_pending_references ] method with refto , no_style ( ) and pending_references as arguments ,
0
example# 4254
use the result as the argument for the call to the sql.extend [ sql . extend ] method . call the connection.creation.sql_for_pending_references [ connection . creation . sql_for_pending_references ] method with refto , no_style ( ) and pending_references as arguments ,
0
example# 4255
use the result as the argument for the call to the sql.extend [ sql . extend ] method . if self.verbosity [ self . verbosity ] is greater or equal than integer 1 and sql is true ,
0
example# 4256
call the self.stdout.write [ self . stdout . write ] method with string _STR:0_ as argument , with all occurrences of ' % s ' replaced with model._meta.db_table [ model . _meta . db_table ] .
1
"    Creating table %s\n" ||| _STR:0_
example# 4257
for statements is sql ,
0
example# 4258
call the cursor.execute [ cursor . execute ] method with statement as argument .
0
example# 4259
evaluate the method connection.introspection.table_name_converter [ connection . introspection . table_name_converter ] with model._meta.db_table [ model . _meta . db_table ] as argument , append it to tables .
0
example# 4260
finally , perform ,
0
example# 4261
call the cursor.close [ cursor . close ] method .
0
example# 4262
call the connection.cursor [ connection . cursor ] method , substitute it for cursor .
0
example# 4263
try ,
0
example# 4264
if self.verbosity [ self . verbosity ] is greater or equal than integer 1 ,
0
example# 4265
write the string _STR:0_ to the standard output .
1
"  Installing custom SQL...\n" ||| _STR:0_
example# 4266
for every app_name and mode_list in return value of manifest.items [ manifest . items ] method ,
0
example# 4267
for model in model_list ,
0
example# 4268
if model is contained in created_models ,
0
example# 4269
call the method custom_sql_for_model with model , no_style ( ) and connection as arguments , substitute the result for custom_sql .
0
example# 4270
if custom_sql is empty ,
0
example# 4271
if self.verbosity [ self . verbosity ] is greater or equal to integer 2 ,
0
example# 4272
call the self.stdout.write [ self . stdout . write ] method with string _STR:0_ as argument ,
1
"    Installing custom SQL for %s.%s model\n" ||| _STR:0_
example# 4273
with all occurrences of ' % s ' replaced with app_name and model._meta.object_name [ model . _meta . object_name ] , respectively . try ,
0
example# 4274
with call to the function transaction.atomic [ transaction . atomic ] with using set to connection.alias [ connection . alias ] as argument ,
0
example# 4275
for every sql in custom_sql ,
0
example# 4276
call the cursor.execute [ cursor . execute ] method with sql as argument .
0
example# 4277
if exception of class Exception , as e , is caught ,
0
example# 4278
call the self.stderr.write [ self . stderr . write ] method with string _STR:0_ as argument ,
1
"    Failed to install custom SQL for %s.%s model: %s\n" ||| _STR:0_
example# 4279
with all occurrences of ' % s ' replaced with app_name and model._meta.object_name [ model . _meta . object_name ] and e , respectively . if self.show_traceback [ self . show_traceback ] is true ,
0
example# 4280
call the traceback.print_exc [ traceback . print_exc ] method .
0
example# 4281
if not ,
0
example# 4282
if self.verbosity [ self . verbosity ] is greater or equal to integer 3 ,
0
example# 4283
call the self.stderr.write [ self . stderr . write ] method with string _STR:0_ as argument ,
1
"    No custom SQL for %s.%s model\n" ||| _STR:0_
example# 4284
with all occurrences of ' % s ' replaced with app_name and model._meta.object_name [ model . _meta . object_name ] , respectively . if self.verbosity [ self . verbosity ] is greater or equal to integer 1 ,
0
example# 4285
write string _STR:0_ to the standard output .
1
"  Installing indexes...\n" ||| _STR:0_
example# 4286
for every app_name and model_list in return value of manifest.items [ manifest . items ] method ,
0
example# 4287
for every model in model_list ,
0
example# 4288
if model is contained in created_models ,
0
example# 4289
call the connection.creation.sql_indexes_for_model [ connection . creation . sql_indexes_for_model ] with model and no_style ( ) as arguments , substitute the result for index_squl .
0
example# 4290
if index_sql is not empty ,
0
example# 4291
if self.verbosity [ self . verbosity ] is greater or equal to integer 2 ,
0
example# 4292
call the self.stderr.write [ self . stderr . write ] method with string _STR:0_ as argument ,
1
"    Installing index for %s.%s model\n" ||| _STR:0_
example# 4293
with all occurrences of ' % s ' replaced with app_name and model._meta.object_name [ model . _meta . object_name ] , respectively . try ,
0
example# 4294
with call to the function transaction.atomic [ transaction . atomic ] with using set to connection.alias [ connection . alias ] and savepoint set to connection.features.can_rollback_ddl [ connection . features . can_rollback_ddl ] , as arguments .
0
example# 4295
for every sql in index_sql ,
0
example# 4296
call the method cursor.execute [ cursor . execute ] with sql as argument .
0
example# 4297
if exception of the class Exception , as e , is caught ,
0
example# 4298
call the self.stderr.write [ self . stderr . write ] method with string _STR:0_ as argument ,
1
"    Failed to install index for %s.%s model: %s\n" ||| _STR:0_
example# 4299
with all occurrences of ' % s ' replaced with app_name and model._meta.object_name [ model . _meta . object_name ] and e , respectively . finally perform ,
0
example# 4300
call the cursor.close [ cursor . close ] method .
0
example# 4301
if self.load_initial_data [ self . load_initial_data ] is not empty ,
0
example# 4302
for every app_label in app_labels ,
0
example# 4303
call the method call_command with string _STR:0_ , string _STR:1_ , verbosity set to self.verbosity [ self . verbosity ] ,
2
'loaddata' ||| _STR:0_
'initial_data' ||| _STR:1_
example# 4304
database set to connection.alias [ connection . alias ] , skip_validation set to boolean True , app_label set to app_label and hide_empty set to boolean True . return created_models
0
example# 4305
define show_migration_list with self class instance , connection and app_names set to None , as arguments .
0
example# 4306
loader is instance of MigrationLoader initialized with connection as an argument .
0
example# 4307
substitute loader.graph [ loader . graph ] for graph .
0
example# 4308
if app_names is not empty ,
0
example# 4309
invalid_apps is an empty list .
0
example# 4310
for every app_name is app_names ,
0
example# 4311
if app_name is not contained in loader.migrated_apps [ loader . migrated_apps ] ,
0
example# 4312
append app_name to the invalid_apps .
0
example# 4313
if invalid_apps in not empty ,
0
example# 4314
raise a CommandError exception , with string _STR:0_ as argument , substitute ' % s ' in previous string with ,
1
"No migrations present for: %s" ||| _STR:0_
example# 4315
string joined from invalided_apps list and separated with string _STR:0_ . if not ,
1
', ' ||| _STR:0_
example# 4316
sort loader.migrated_apps [ loader . migrated_apps ] , substitute it for app_names .
0
example# 4317
for every app_name in app_names .
0
example# 4318
call self.stdout.write [ self . stdout . write ] method with app_name and self.style.MIGRATE_LABEL [ self . style . MIGRATE_LABEL ] as arguments .
0
example# 4319
shown is an empty set .
0
example# 4320
for every node in return value of the graph.leaf_nodes [ graph . leaf_nodes ] method called with the app_name argument ,
0
example# 4321
for every plan_node in return value of the graph.forwards_plan [ graph . forwards_plan ] method called with node as argument .
0
example# 4322
if plan_node is not contained in shown and first element of plan_node equals to app_name ,
0
example# 4323
substitute second element of plan_node for title .
0
example# 4324
if replaces filed of graph.nodes [ graph . nodes ] element at the plan_node index is true ,
0
example# 4325
substitute ' % s ' in the string _STR:0_ with length of replaces filed of graph.nodes [ graph . nodes ] element at the plan_node index , append the string to the title .
1
" (%s squashed migrations)" ||| _STR:0_
example# 4326
if plan_node is contained in loader.applied_migrations [ loader . applied_migrations ] ,
0
example# 4327
substitute ' % s ' with title in the string _STR:0_ , write it to the standard output .
1
" [X] %s" ||| _STR:0_
example# 4328
if not ,
0
example# 4329
substitute ' % s ' with title in the string _STR:0_ , write it to the standard output .
1
" [ ] %s" ||| _STR:0_
example# 4330
add plan_node to the shown set .
0
example# 4331
if shown is an empty set ,
0
example# 4332
call the self.stdout.write [ self . stdout . write ] method with string _STR:0_ and self.style.MIGRATE_FAILURE [ self . style . MIGRATE_FAILURE ] as arguments .
1
" (no migrations)" ||| _STR:0_
example# 4333
import module argparse .
0
example# 4334
import module warnings .
0
example# 4335
from django.core.management.base [ django . core . management . base ] import BaseCommand into default name space .
0
example# 4336
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
0
example# 4337
derive the class Command from the BaseCommand class .
0
example# 4338
help is a string _STR:0_ .
1
"Runs this project as a FastCGI application. Requires flup." ||| _STR:0_
example# 4339
define the method add_arguments with 2 arguments self and parser .
0
example# 4340
call the method parser.add_argument [ parser . add_argument ] with 3 arguments : string _STR:0_ , nargs set to argparse.REMAINDER [ argparse . REMAINDER ] and help as a string _STR:1_
2
'Various KEY=val options.' ||| _STR:1_
'args' ||| _STR:0_
example# 4341
define the method handle with 3 arguments : self , unpacked list args and unpacked dictionary options .
0
example# 4342
call the method warnings.warn [ warnings . warn ] with 2 arguments : string _STR:0_ ,
1
"FastCGI support has been deprecated and will be removed in Django 1.9." ||| _STR:0_
example# 4343
and RemovedInDjango19Warning . from django.conf [ django . conf ] import settings into default namespace .
0
example# 4344
from django.utils [ django . utils ] import translation into default namespace .
0
example# 4345
try ,
0
example# 4346
call the method translation.activate [ translation . activate ] with an argument settings.LANGUAGE_CODE [ settings . LANGUAGE_CODE ] .
0
example# 4347
if AttributeError exception is caught ,
0
example# 4348
do nothing .
0
example# 4349
from django.core.servers.fastcgi [ django . core . servers . fastcgi ] import runfastcgi into default namespace .
0
example# 4350
call the function runfastcgi with an argument args .
0
example# 4351
define the method usage with 2 argument : self and subcommand .
0
example# 4352
from django.core.servers.fastcgi [ django . core . servers . fastcgi ] import FASTCGI_HELP into default namespace .
0
example# 4353
return FASTCGI_HELP .
0
example# 4354
from __future__ import unicode_literals into default name space .
0
example# 4355
from datetime import datetime into default name space .
0
example# 4356
import module errno .
0
example# 4357
import module os .
0
example# 4358
import module re .
0
example# 4359
import module sys .
0
example# 4360
import module socket .
0
example# 4361
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 4362
from django.core.servers.basehttp [ django . core . servers . basehttp ] import run and get_internal_wsgi_application into default name space .
0
example# 4363
from django.db [ django . db ] import connections and DEFAULT_DB_ALIAS into default name space .
0
example# 4364
from django.db.migrations.executor [ django . db . migrations . executor ] import MigrationExecutor into default name space .
0
example# 4365
from django.utils [ django . utils ] import autoreload into default name space .
0
example# 4366
from django.utils [ django . utils ] import six into default name space .
0
example# 4367
from django.core.exceptions [ django . core . exceptions ] import ImproperlyConfigured into default name space .
0
example# 4368
call the method re.compile [ re . compile ] with 2 arguments : raw string _STR:0_ '' ^ ( ? : ( ? P < addr > ( ? P < ipv4 > \d { 1,3 } ( ? : \.\d [ \ . \d ] { 1,3 } ) { 3 } ) |_STR:0_ ''
2
"" ||| _STR:0_
"^(?: (?P<addr> (?P<ipv4>\d{1,3}(?:\.\d{1,3}){3}) |" ||| _STR:1_
example# 4369
_STR:0_ '' ( ? P < ipv6 > \ [ [ a-fA-F0-9 : ] +\ ] ) | ( ? P < fqdn > [ a-zA-Z0-9- ] + ( ? : \ . [ a-zA-Z0-9- ] + ) * ) ) : ) ? ( ? P < port > \d+ ) $ _STR:0_ '' , re.X [ re . X ] DEFAULT_PORT is a string _STR:2_ .
3
"(?P<ipv6>\[[a-fA-F0-9:]+\]) | (?P<fqdn>[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*) ):)?(?P<port>\d+)$" ||| _STR:1_
"8000" ||| _STR:2_
"" ||| _STR:0_
example# 4370
derive the class Command from the BaseCommand class .
0
example# 4371
help is a string _STR:0_ .
1
"Starts a lightweight Web server for development." ||| _STR:0_
example# 4372
requires_system_checks is boolean False .
0
example# 4373
define the method add_arguments with 2 arguments self and parser .
0
example# 4374
call the method parser.add_argument [ parser . add_argument ] with 3 arguments : string _STR:0_ , nargs=_STR:1_ and help as a string _STR:2_ .
3
'addrport' ||| _STR:0_
'?' ||| _STR:1_
'Optional port number, or ipaddr:port' ||| _STR:2_
example# 4375
call the method parser.add_argument [ parser . add_argument ] with 6 arguments : string _STR:0_ , string _STR:1_ , action set to string _STR:2_ ,
3
'-6' ||| _STR:1_
'store_true' ||| _STR:2_
'--ipv6' ||| _STR:0_
example# 4376
dest set to string _STR:0_ , default set to boolean False and help set to string _STR:1_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:2_ , action set to string _STR:3_ ,
4
'store_false' ||| _STR:3_
'use_ipv6' ||| _STR:0_
'Tells Django to use an IPv6 address.' ||| _STR:1_
'--nothreading' ||| _STR:2_
example# 4377
dest set to string _STR:0_ , default set to boolean True and help set to _STR:1_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:2_ , action set to string _STR:3_ ,
4
'store_false' ||| _STR:3_
'--noreload' ||| _STR:2_
'use_threading' ||| _STR:0_
'Tells Django to NOT use threading.' ||| _STR:1_
example# 4378
dest set to string _STR:0_ , default set to boolean True and help is a string _STR:1_ . def get_handler with 3 arguments : self , unpacked list args and unpacked dictionary options .
2
'use_reloader' ||| _STR:0_
'Tells Django to NOT use the auto-reloader.' ||| _STR:1_
example# 4379
call the function get_internal_wsgi_application , return the result .
0
example# 4380
define the method handle with 3 arguments : self , unpacked list args and unpacked dictionary options .
0
example# 4381
from django.conf [ django . conf ] import settings into default namespace .
0
example# 4382
if not settings.DEBUG [ settings . DEBUG ] is true and settings.ALLOWED_HOSTS [ settings . ALLOWED_HOSTS ] is false ,
0
example# 4383
raise an CommandError exception with an argument string _STR:0_ .
1
'You must set settings.ALLOWED_HOSTS if DEBUG is False.' ||| _STR:0_
example# 4384
substitute value under the _STR:0_ key of the options dictionary for self.use_ipv6 [ self . use_ipv6 ] .
1
'use_ipv6' ||| _STR:0_
example# 4385
if self.use_ipv6 [ self . use_ipv6 ] is true and socket.has_ipv6 [ socket . has_ipv6 ] is false ,
0
example# 4386
raise an CommandError exception with an argument string _STR:0_ .
1
'Your Python does not support IPv6.' ||| _STR:0_
example# 4387
self._raw_ipv6 [ self . _raw_ipv6 ] is boolean False .
0
example# 4388
get the value under the _STR:0_ key of the options dictionary , if it is false ,
1
'addrport' ||| _STR:0_
example# 4389
self.addr [ self . addr ] is an empty string .
0
example# 4390
substitute DEFAULT_PORT for self.port [ self . port ] .
0
example# 4391
if not ,
0
example# 4392
call the method re.match [ re . match ] with 2 arguments : naiveip_re and value under the _STR:0_ key of the options dictionary , substitute the result for m .
1
'addrport' ||| _STR:0_
example# 4393
if m is None ,
0
example# 4394
raise an CommandError exception with an argument string _STR:0_ ,
1
'"%s" is not a valid port number or address:port pair.' ||| _STR:0_
example# 4395
where ' % s ' is replaced with value under the _STR:0_ key of the options dictionary . call the method m.groups [ m . groups ] , assign the result to self.addr [ self . addr ] , _ipv4 , _ipv6 , _fqdn and self.port [ self . port ] , respectively .
1
'addrport' ||| _STR:0_
example# 4396
call the method self.port.isdigit [ self . port . isdigit ] , if it evaluates to false ,
0
example# 4397
raise an CommandError exception with an argument string _STR:0_ , where _STR:1_ is repaced with self.port [ self . port ] .
2
"%r is not a valid port number." ||| _STR:0_
'%r' ||| _STR:1_
example# 4398
if self.addr [ self . addr ] is true ,
0
example# 4399
if _ipv6 is true ,
0
example# 4400
substitute self.addr [ self . addr ] without the first and last element for self.addr [ self . addr ] .
0
example# 4401
self.use_ipv6 [ self . use_ipv6 ] is boolean True .
0
example# 4402
self._raw_ipv6 [ self . _raw_ipv6 ] is boolean True .
0
example# 4403
otherwise if self.use_ipv6 [ self . use_ipv6 ] is true and _fqdn is false ,
0
example# 4404
raise an CommandError exception with an argument string _STR:0_ where ' % s ' is replaced with self.addr [ self . addr ] .
1
'"%s" is not a valid IPv6 address.' ||| _STR:0_
example# 4405
if self.addr [ self . addr ] is false ,
0
example# 4406
if self.use_ipv6 [ self . use_ipv6 ] substitute string _STR:0_ for self.addr [ self . addr ] , if not substitute _STR:1_ for self.addr [ self . addr ] .
2
'127.0.0.1' ||| _STR:1_
'::1' ||| _STR:0_
example# 4407
convert self.use_ipv6 [ self . use_ipv6 ] to boolean , substitute it for self._raw_ipv6 [ self . _raw_ipv6 ] .
0
example# 4408
call the self.run [ self . run ] method with unpacked dictionary options as an argument .
0
example# 4409
define the method run with 3 arguments : self and unpacked dictionary options .
0
example# 4410
substitute value under the _STR:0_ key of the options dictionary for use_reloader .
1
'use_reloader' ||| _STR:0_
example# 4411
if use_reloader is true ,
0
example# 4412
call the method autoreload.main [ autoreload . main ] with 3 arguments : self.inner_run [ self . inner_run ] , None and options .
0
example# 4413
if not ,
0
example# 4414
call the method self.inner_run [ self . inner_run ] with 2 arguments : None and unpacked dictionary options .
0
example# 4415
define the method inner_run with 3 arguments : self , unpacked list args and unpacked dictionary options .
0
example# 4416
from django.conf [ django . conf ] import settings into default namespace .
0
example# 4417
django.utils [ django . utils ] import translation into default namespace .
0
example# 4418
substitute value under the _STR:0_ key of the options dictionary for threading .
1
'use_threading' ||| _STR:0_
example# 4419
get the value under the _STR:0_ key of the options dictionary , if it exists substitute it for shutdown_message ,
1
'shutdown_message' ||| _STR:0_
example# 4420
if not , shutdown_message is an empty string . if sys.platform [ sys . platform ] equals string win32_STR:0_CTRL-BREAK_STR:1_CONTROL-C ' for quit_command .
2
' for quit_command, if not substitute string ' ||| _STR:1_
', substitute string ' ||| _STR:0_
example# 4421
write string _STR:0_ to self.stdout [ self . stdout ] stream .
1
"Performing system checks...\n\n" ||| _STR:0_
example# 4422
call the method self.validate [ self . validate ] with an argument display_num_errors set to boolean True .
0
example# 4423
try ,
0
example# 4424
call the method self.check_migrations [ self . check_migrations ] .
0
example# 4425
if ImproperlyConfigured exception is caught ,
0
example# 4426
do nothing .
0
example# 4427
call the function datetime.now [ datetime . now ] , on the result call the method strftime with an argument string _STR:0_ , substitute the result for now .
1
'%B %d, %Y - %X' ||| _STR:0_
example# 4428
if six.PY2 [ six . PY2 ] is true ,
0
example# 4429
call the method now.decode [ now . decode ] with an argument string _STR:0_ , substitute the result for now .
1
'utf-8' ||| _STR:0_
example# 4430
call the method self.stdout.write [ self . stdout . write ] with an argument : string _STR:0_
1
"%(started_at)s\nDjango version %(version)s, using settings %(settings)r\n" ||| _STR:0_
example# 4431
_STR:0_ , where _STR:1_ is replaced with now , _STR:2_ is replaced with return value of the method self.get_version [ self . get_version ] , _STR:3_ is replaced with settings.SETTINGS_MODULE [ settings . SETTINGS_MODULE ] , _STR:4_ is replaced with self.addr [ self . addr ] if self._raw_ipv6 [ self . _raw_ipv6 ] is true , or with self.addr [ self . addr ] if it is false , _STR:5_ is replaced with self.port [ self . port ] and _STR:6_ is replaced with quit_command . call the method translation.activate [ translation . activate ] with an argument settings.LANGUAGE_CODE [ settings . LANGUAGE_CODE ] .
7
'%(quit_command)s' ||| _STR:6_
'%(port)s' ||| _STR:5_
'%(addr)s' ||| _STR:4_
'%(version)s' ||| _STR:2_
'"%(started_at)s' ||| _STR:1_
'%(settings)r' ||| _STR:3_
"Starting development server at http://%(addr)s:%(port)s/\n Quit the server with %(quit_command)s.\n" ||| _STR:0_
example# 4432
try ,
0
example# 4433
call the method self.get_handler [ self . get_handler ] with 2 arguments unpacked list args and unpacked dictionary options , substitute the result for handler .
0
example# 4434
call the function run with 5 arguments : self.addr [ self . addr ] , self.port [ self . port ] converted to an integer , handler , ipv6 set to self.use_ipv6 [ self . use_ipv6 ] , and threading set to threading .
0
example# 4435
if socket.error [ socket . error ] , renamed to e , exception is caught ,
0
example# 4436
ERRORS is a dictionary with 3 initial entries : string _STR:0_ for errno.EACCES [ errno . EACCES ] ,
1
"You don't have permission to access that port." ||| _STR:0_
example# 4437
_STR:0_ for errno.EADDRINUSE [ errno . EADDRINUSE ] and _STR:1_ for errno.EADDRNOTAVAIL [ errno . EADDRNOTAVAIL ] . try ,
2
"That IP address can't be assigned-to." ||| _STR:1_
"That port is already in use." ||| _STR:0_
example# 4438
get the value under the e.errno [ e . errno ] key of the ERRORS dictionary , substitute it for error_text .
0
example# 4439
if KeyError exception is caught .
0
example# 4440
convert e to a string , substitute it for error_text .
0
example# 4441
replace ' % s ' in a string _STR:0_ with error_text , write it to self.stderr [ self . stderr ] .
1
"Error: %s" ||| _STR:0_
example# 4442
exit the program with the code integer 1 .
0
example# 4443
if KeyboardInterrupt exception is caught ,
0
example# 4444
if shutdown_message is true ,
0
example# 4445
write shutdown_message to self.stdout [ self . stdout ] file stream .
0
example# 4446
exit program with code integer 0 .
0
example# 4447
define the method check_migrations with an argument self .
0
example# 4448
executor is an instance of the class MigrationExecutor created with an argument : value under the DEFAULT_DB_ALIAS key of the connections dictionary .
0
example# 4449
call the method executor.migration_plan [ executor . migration_plan ] wiht return value of te method executor.loader.graph.leaf_nodes [ executor . loader . graph . leaf_nodes ] as argument , substitute it for plan .
0
example# 4450
if plan is true ,
0
example# 4451
call the method self.style.NOTICE [ self . style . NOTICE ] with an argument :
0
example# 4452
string : _STR:0_ , write it to self.stdout [ self . stdout ] . call the method self.style.NOTICE [ self . style . NOTICE ] with an argument string _STR:1_ ,
2
"Run 'python manage.py migrate' to apply them.\n" ||| _STR:1_
"\nYou have unapplied migrations; your app may not work properly until they are applied." ||| _STR:0_
example# 4453
write it to self.stdout [ self . stdout ] . substitute Command for BaseRunserverCommand .
0
example# 4454
import module os .
0
example# 4455
from django.core.management.base [ django . core . management . base ] import BaseCommand into default name space .
0
example# 4456
derive the class Command from the BaseCommand class .
0
example# 4457
help is a string _STR:0_ .
1
"Runs a Python interactive interpreter. Tries to use IPython or bpython, if one of them is available." ||| _STR:0_
example# 4458
requires_system_checks is boolean False .
0
example# 4459
shells is a list containing 2 elements : string _STR:0_ and string _STR:1_ .
2
'ipython' ||| _STR:0_
'bpython' ||| _STR:1_
example# 4460
define the method add_arguments with 2 arguments self and parser .
0
example# 4461
call the method parser.add_argument [ parser . add_argument ] with 4 arguments : string _STR:0_ , action set to string _STR:1_ , dest as a string _STR:2_ ,
3
'plain' ||| _STR:2_
'store_true' ||| _STR:1_
'--plain' ||| _STR:0_
example# 4462
and help is a string _STR:0_ . call the method parser.add_argument [ parser . add_argument ] with 4 arguments : string _STR:1_ , action as a string _STR:2_ ,
3
'store_true' ||| _STR:2_
'--no-startup' ||| _STR:1_
'Tells Django to use plain Python, not IPython or bpython.' ||| _STR:0_
example# 4463
dest as a string _STR:0_ and help as a string _STR:1_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:2_ , string _STR:3_ , choices set to string self.shells [ self . shells ] ,
4
'-i' ||| _STR:2_
'no_startup' ||| _STR:0_
'--interface' ||| _STR:3_
'When using plain Python, ignore the PYTHONSTARTUP environment variable and ~/.pythonrc.py script.' ||| _STR:1_
example# 4464
dest as a string _STR:0_ and help as a string _STR:1_ . define the method _ipython_pre_011 with an argument self .
2
'Specify an interactive interpreter interface. Available options: "ipython" and "bpython"' ||| _STR:1_
'interface' ||| _STR:0_
example# 4465
from IPython.Shell [ IPython . Shell ] import IPShell into default namespace .
0
example# 4466
shell is an instance of IPShell class , created with an argument argv as an empty list .
0
example# 4467
call the method shell.mainloop [ shell . mainloop ] .
0
example# 4468
define the method _ipython_pre_100 with an argument self .
0
example# 4469
from IPython.frontend.terminal.ipapp [ IPython . frontend . terminal . ipapp ] import TerminalIPythonApp into default namespace .
0
example# 4470
call the method instance of TerminalIPythonApp class , substitute the result for app .
0
example# 4471
call the method app.initialize [ app . initialize ] with an argument argv as an empty list .
0
example# 4472
call the method app.start [ app . start ] .
0
example# 4473
define the method _ipython with an argument self .
0
example# 4474
from IPython import start_ipython into default namespace .
0
example# 4475
call the method start_ipython with an argument argv as an empty list .
0
example# 4476
define the method ipython with an argument self .
0
example# 4477
for every ip in tuple containing 3 elements : self._ipython [ self . _ipython ] , self._ipython_pre_100 [ self . _ipython_pre_100 ] and self._ipython_pre_011 [ self . _ipython_pre_011 ] ,
0
example# 4478
try ,
0
example# 4479
call the function ip .
0
example# 4480
if ImportError exception is caught ,
0
example# 4481
do nothing .
0
example# 4482
if not ,
0
example# 4483
return nothing .
0
example# 4484
raise an ImportError exception with an argument string _STR:0_ .
1
"No IPython" ||| _STR:0_
example# 4485
define the method bpython with an argument self .
0
example# 4486
import bpython .
0
example# 4487
call the method bpython.embed [ bpython . embed ] .
0
example# 4488
define the method run_shell with an arguments self and shell set to None .
0
example# 4489
if shell is true substitute list with element shell for available_shells , if not substitute self.shells [ self . shells ] for available_shells .
0
example# 4490
for every shell in available_shells ,
0
example# 4491
try ,
0
example# 4492
get shell attribute of the self object , call it and return the result .
0
example# 4493
if ImportError exception is caught ,
0
example# 4494
do nothing .
0
example# 4495
raise an ImportError exception .
0
example# 4496
define the method handle with 3 arguments : self and unpacked dictionary options .
0
example# 4497
try ,
0
example# 4498
if value under _STR:0_ key of the options dictionary is true ,
1
'plain' ||| _STR:0_
example# 4499
raise an ImportError exception .
0
example# 4500
call the method self.run_shell [ self . run_shell ] with an argument shell set to value under the _STR:0_ key of the options dictionary .
1
'interface' ||| _STR:0_
example# 4501
if ImportError exception is caught ,
0
example# 4502
import code .
0
example# 4503
imported_objects is an empty dictionary .
0
example# 4504
try ,
0
example# 4505
import readline .
0
example# 4506
if ImportError exception is caught ,
0
example# 4507
do nothing .
0
example# 4508
if not ,
0
example# 4509
import rlcompleter .
0
example# 4510
call the method rlcompleter.Completer [ rlcompleter . Completer ] with an argument imported_objects , use the complete field of the result as an argument for the call to the method readline.set_completer [ readline . set_completer ] .
0
example# 4511
call the method readline.parse_and_bind [ readline . parse_and_bind ] with an argument string _STR:0_ .
1
"tab:complete" ||| _STR:0_
example# 4512
get the value under the _STR:0_ key of the options dictionary , if it evaluates to false ,
1
'no_startup' ||| _STR:0_
example# 4513
for every pythonrc in tuple containing 2 elements : return value of the function os.environ.get [ os . environ . get ] called with a string _STR:0_ ,
1
"PYTHONSTARTUP" ||| _STR:0_
example# 4514
and string _STR:0_ as tuples second element . if pythonrc is true ,
1
'~/.pythonrc.py' ||| _STR:0_
example# 4515
skip this loop iteration .
0
example# 4516
call the function os.path.expanduser [ os . path . expanduser ] with an argument pythonrc , substitute the result for pythonrc .
0
example# 4517
if pythonrc is not a file ,
0
example# 4518
skip this loop iteration .
0
example# 4519
try ,
0
example# 4520
open pythonrc , with the file handle renamed to handle perform the following ,
0
example# 4521
compile the handle.read [ handle . read ] in mode _STR:0_ source is read from file pythonrc , execute the compiled script with imported_objects variables .
1
'exec' ||| _STR:0_
example# 4522
if NameError exception is caught ,
0
example# 4523
do nothing .
0
example# 4524
call the method code.interact [ code . interact ] with an argument local set to imported_objects .
0
example# 4525
from __future__ import unicode_literals into default name space .
0
example# 4526
from django.core.management.base [ django . core . management . base ] import AppCommand into default name space .
0
example# 4527
from django.core.management.sql [ django . core . management . sql ] import sql_create into default name space .
0
example# 4528
from django.db [ django . db ] import connections and DEFAULT_DB_ALIAS into default name space .
0
example# 4529
derive the class Command from the AppCommand base class .
0
example# 4530
help is a string _STR:0_ .
1
"Prints the CREATE TABLE SQL statements for the given app name(s)." ||| _STR:0_
example# 4531
output_transaction is boolean True .
0
example# 4532
define the method add_arguments with 2 arguments self and parser .
0
example# 4533
call the method add_arguments from the base class of the class Command , with an argument parser .
0
example# 4534
call the method parser.add_argument [ parser . add_argument ] with 3 arguments : string _STR:0_ , default set to DEFAULT_DB_ALIAS ,
1
'--database' ||| _STR:0_
example# 4535
and help set to a string _STR:0_ . define the method handle_app_config with 3 arguments : self , app_config and unpacked dictionary options .
1
'Nominates a database to print the SQL for. Defaults to the "default" database.' ||| _STR:0_
example# 4536
if app_config.models_module [ app_config . models_module ] is None ,
0
example# 4537
return nothing .
0
example# 4538
get the value under the _STR:0_ key of the options dictionary , use it as the key to get the value from the connections dictionary , substitute the result for connection .
1
'database' ||| _STR:0_
example# 4539
call the function sql_create with 3 arguments : app_config , self.style [ self . style ] and connection , substitute the result for statements .
0
example# 4540
join statements into a string , separated by newlines , return it .
0
example# 4541
from __future__ import unicode_literals into default name space .
0
example# 4542
from django.core.management.base [ django . core . management . base ] import AppCommand into default name space .
0
example# 4543
from django.core.management.sql [ django . core . management . sql ] import sql_all into default name space .
0
example# 4544
from django.db [ django . db ] import connections and DEFAULT_DB_ALIAS into default name space .
0
example# 4545
derive the class Command from the AppCommand base class .
0
example# 4546
help is a string _STR:0_ .
1
"Prints the CREATE TABLE, custom SQL and CREATE INDEX SQL statements for the given model module name(s)." ||| _STR:0_
example# 4547
output_transaction is boolean True .
0
example# 4548
define the method add_arguments with 2 arguments self and parser .
0
example# 4549
call the method add_arguments from the base class of the class Command , with an argument parser .
0
example# 4550
call the method parser.add_argument [ parser . add_argument ] with 3 arguments : string _STR:0_ , default set to DEFAULT_DB_ALIAS ,
1
'--database' ||| _STR:0_
example# 4551
and help set to a string _STR:0_ . define the method handle_app_config with 3 arguments : self , app_config and unpacked dictionary options .
1
'Nominates a database to print the SQL for. Defaults to the "default" database.' ||| _STR:0_
example# 4552
if app_config.models_module [ app_config . models_module ] is None ,
0
example# 4553
return nothing .
0
example# 4554
get the value under the _STR:0_ key of the options dictionary , use it as the key to get the value from the connections dictionary , substitute the result for connection .
1
'database' ||| _STR:0_
example# 4555
call the function sql_all with 3 arguments : app_config , self.style [ self . style ] and connection , substitute the result for statements .
0
example# 4556
join statements into a string , separated by newlines , return it .
0
example# 4557
from __future__ import unicode_literals into default name space .
0
example# 4558
from django.core.management.base [ django . core . management . base ] import AppCommand into default name space .
0
example# 4559
from django.core.management.sql [ django . core . management . sql ] import sql_delete into default name space .
0
example# 4560
from django.db [ django . db ] import connections and DEFAULT_DB_ALIAS into default name space .
0
example# 4561
derive the class Command from the AppCommand base class .
0
example# 4562
help is a string _STR:0_ .
1
"Prints the DROP TABLE SQL statements for the given app name(s)." ||| _STR:0_
example# 4563
output_transaction is boolean True .
0
example# 4564
define the method add_arguments with 2 arguments self and parser .
0
example# 4565
call the method add_arguments from the base class of the class Command , with an argument parser .
0
example# 4566
call the method parser.add_argument [ parser . add_argument ] with 3 arguments : string _STR:0_ , default set to DEFAULT_DB_ALIAS ,
1
'--database' ||| _STR:0_
example# 4567
and help set to a string _STR:0_ . define the method handle_app_config with 3 arguments : self , app_config and unpacked dictionary options .
1
'Nominates a database to print the SQL for. Defaults to the "default" database.' ||| _STR:0_
example# 4568
if app_config.models_module [ app_config . models_module ] is None ,
0
example# 4569
return nothing .
0
example# 4570
get the value under the _STR:0_ key of the options dictionary , use it as the key to get the value from the connections dictionary , substitute the result for connection .
1
'database' ||| _STR:0_
example# 4571
call the function sql_destroy_indexes with 3 arguments : app_config , self.style [ self . style ] and connection , substitute the result for statements .
0
example# 4572
join statements into a string , separated by newlines , return it .
0
example# 4573
from __future__ import unicode_literals into default name space .
0
example# 4574
from django.core.management.base [ django . core . management . base ] import AppCommand into default name space .
0
example# 4575
from django.core.management.sql [ django . core . management . sql ] import sql_custom into default name space .
0
example# 4576
from django.db [ django . db ] import connections and DEFAULT_DB_ALIAS into default name space .
0
example# 4577
derive class Command from the base class AppCommand .
0
example# 4578
help is a string , _STR:0_ .
1
"Prints the custom table modifying SQL statements for the given app name(s)." ||| _STR:0_
example# 4579
substitute True for output_transaction .
0
example# 4580
define method add_arguments with class instance self and parser as the input arguments .
0
example# 4581
call the function add_arguments with parser as an argument , from the base class of the Command class .
0
example# 4582
call the parser.add_argument [ parser . add_argument ] method with the string _STR:0_ , default set to DEFAULT_DB_ALIAS and help containig string ,
1
'--database' ||| _STR:0_
example# 4583
_STR:0_ as the arguments . define method handle_app_config with self class instance , app_config and dictionary options as arguments .
1
'Nominates a database to print the SQL for. Defaults to the "default" database.' ||| _STR:0_
example# 4584
if app_config.models_module [ app_config . models_module ] is None ,
0
example# 4585
return nothing .
0
example# 4586
extract the value under the key _STR:0_ from the options dictionary , use the value for indexing connections list , substitute the result for connection .
1
'database' ||| _STR:0_
example# 4587
call the function sql_custom with app_config , self.style [ self . style ] and connection as the arguments , substitute the result for statements .
0
example# 4588
join the list of statements into a string separated by new lines , return it .
0
example# 4589
from __future__ import unicode_literals into default name space .
0
example# 4590
from django.core.management.base [ django . core . management . base ] import AppCommand into default name space .
0
example# 4591
from django.core.management.sql [ django . core . management . sql ] import sql_destroy_indexes into default name space .
0
example# 4592
from django.db [ django . db ] import connections and DEFAULT_DB_ALIAS into default name space .
0
example# 4593
derive the class Command from the AppCommand base class .
0
example# 4594
help is an string _STR:0_ .
1
"Prints the DROP INDEX SQL statements for the given model module name(s)." ||| _STR:0_
example# 4595
output_transaction is boolean True .
0
example# 4596
define the method add_arguments with 2 arguments : self and parser .
0
example# 4597
call the add_arguments method from the base class of the class Command with parser as an argument .
0
example# 4598
call the method parser.add_argument [ parser . add_argument ] with 3 arguments : string _STR:0_ , default set to DEFAULT_DB_ALIAS ,
1
'--database' ||| _STR:0_
example# 4599
and help set to string _STR:0_ . define the handle_app_config with 3 arguments self , app_config and unpacked dictionary options .
1
'Nominates a database to print the SQL for. Defaults to the "default" database.' ||| _STR:0_
example# 4600
if app_config.models_module [ app_config . models_module ] is None .
0
example# 4601
return nothing .
0
example# 4602
get the value under the _STR:0_ key of the options dictionary , use it as the key to get the value from the connections dictionary , substitute the result for connection .
1
'database' ||| _STR:0_
example# 4603
call the function sql_destroy_indexes with 3 arguments : app_config , self.style [ self . style ] and connection , substitute the result for statements .
0
example# 4604
join statements into a string , separated by newlines , return it .
0
example# 4605
from __future__ import unicode_literals into default name space .
0
example# 4606
from django.core.management.base [ django . core . management . base ] import BaseCommand into default name space .
0
example# 4607
from django.core.management.sql [ django . core . management . sql ] import sql_flush into default name space .
0
example# 4608
from django.db [ django . db ] import connections and DEFAULT_DB_ALIAS into default name space .
0
example# 4609
derive the class Command from the base class BaseCommand .
0
example# 4610
help is a string , containing _STR:0_ .
1
"Returns a list of the SQL statements required to return all tables in the database to the state they were in just after they were installed." ||| _STR:0_
example# 4611
output_transaction is boolean True .
0
example# 4612
define method add_arguments with self class instance and parser as the arguments .
0
example# 4613
call the parent class of Command class add_arguments method and parser as the arguments .
0
example# 4614
call the add_argument method on parser object , use string _STR:0_ , default set to DEFAULT_DB_ALIAS and help set to string ,
1
'--database' ||| _STR:0_
example# 4615
_STR:0_ as the arguments . define the method handle with self class instance and dictionary options as the arguments .
1
'Nominates a database to print the SQL for. Defaults to the "default" database.' ||| _STR:0_
example# 4616
call the sql_flush function with self.style [ self . style ] , connections under the key with the value of options dictionary under the _STR:0_ key ,
1
'database' ||| _STR:0_
example# 4617
from __future__ import unicode_literals into default name space .
0
example# 4618
from django.core.management.base [ django . core . management . base ] import AppCommand into default name space .
0
example# 4619
from django.core.management.sql [ django . core . management . sql ] import sql_indexes into default name space .
0
example# 4620
from django.db [ django . db ] import connections and DEFAULT_DB_ALIAS into default name space .
0
example# 4621
derive the class Command from the base class AppCommand .
0
example# 4622
help is a string _STR:0_ .
1
"Prints the CREATE INDEX SQL statements for the given model module name(s)." ||| _STR:0_
example# 4623
output_transaction is boolean True .
0
example# 4624
define the method add_arguments with self class instance and parser as the arguments .
0
example# 4625
call the add_arguments method with parser as argument form the base class of the class Command .
0
example# 4626
call parse.add_argument [ parse . add_argument ] method , with string _STR:0_ , default set to DEFAULT_DB_ALIAS ,
1
'--database' ||| _STR:0_
example# 4627
and help as a string _STR:0_ , as arguments . define the method handle_app_config with self class instance , app_config and dictionary options as arguments .
1
'Nominates a database to print the SQL for. Defaults to the "default" database.' ||| _STR:0_
example# 4628
if app_config.models_module [ app_config . models_module ] is None ,
0
example# 4629
return nothing .
0
example# 4630
get the value under the _STR:0_ key of options dictionary , use it as a index to get connections list element , store it in connection .
1
'database' ||| _STR:0_
example# 4631
call the function sql_indexes with app_config , self.style [ self . style ] and connection as arguments , store the result in statements .
0
example# 4632
join statements in a string separated by newline , return the result .
0
example# 4633
from __future__ import unicode_literals into default name space .
0
example# 4634
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 4635
from django.db [ django . db ] import connections and DEFAULT_DB_ALIAS into default name space .
0
example# 4636
from django.db.migrations.executor [ django . db . migrations . executor ] import MigrationExecutor into default name space .
0
example# 4637
from django.db.migrations.loader [ django . db . migrations . loader ] import AmbiguityError into default name space .
0
example# 4638
derive class Command from the base class BaseCommand .
0
example# 4639
help is a string _STR:0_
1
"Prints the SQL statements for the named migration." ||| _STR:0_
example# 4640
def method add_arguments with self class instance and parser as the arguments .
0
example# 4641
call the add_argument method on the parser object , with string _STR:0_ , and help set to string _STR:1_ as arguments .
2
'app_label' ||| _STR:0_
'App label of the application containing the migration.' ||| _STR:1_
example# 4642
call the add_argument method on the parser object , with string _STR:0_ , and help set to string _STR:1_ as arguments .
2
'migration_name' ||| _STR:0_
'Migration name to print the SQL for.' ||| _STR:1_
example# 4643
call the add_argument method on the parser object , with string _STR:0_ , default set to DEFAULT_DB_ALIAS and help set to string _STR:1_ as arguments .
2
'Nominates a database to create SQL for. Defaults to the default" database.' ||| _STR:1_
'--database' ||| _STR:0_
example# 4644
call the add_argument method on the parser object with string _STR:0_ , asction set to _STR:1_ , dest set to _STR:2_ ,
3
'--backwards' ||| _STR:0_
'store_true' ||| _STR:1_
'backwards' ||| _STR:2_
example# 4645
default set to False and help set to string_STR:0_ as arguments . define the method handle with self class instance , list of arguments args and options dictionary as the arguments .
1
'Creates SQL to unapply the migration, rather than to apply it' ||| _STR:0_
example# 4646
get the value under the key _STR:0_ of the options dictionary , use it as a index to get an element from connections , substitute it for connection .
1
'database' ||| _STR:0_
example# 4647
call the MigrationExecutor with the connection as the argument , substitute it for executor .
0
example# 4648
get the values under the keys _STR:0_ and _STR:1_ of the options dictionary , substitute the results for app_label and migration_name , respectively .
2
'migration_name' ||| _STR:1_
'app_label' ||| _STR:0_
example# 4649
if app_label is not contained in executor.loader.migrated_apps [ executor . loader . migrated_apps ] ,
0
example# 4650
raise a exception of CommandError class , with string _STR:0_ with ' % s ' replaced with app_label as the argument .
1
"App '%s' does not have migrations" ||| _STR:0_
example# 4651
try ,
0
example# 4652
call the executor.loader.get_migration_by_prefix [ executor . loader . get_migration_by_prefix ] with app_label and migration_name with arguments , substitute the result fr migration .
0
example# 4653
if AmbiguityError exception is raised ,
0
example# 4654
raise a exception of ComandError class with string _STR:0_ ,
1
"More than one migration matches '%s' in app '%s'. Please be more specific." ||| _STR:0_
example# 4655
with all ' % s ' strings replaced with migration_name and app_label , respectively , as an argument . if KeyError exception is raised ,
0
example# 4656
raise a exception of CommandError class , with string _STR:0_ ,
1
"Cannot find a migration matching '%s' from app '%s'. Is it in INSTALLED_APPS?" ||| _STR:0_
example# 4657
replace all the ' % s ' occurrences with migration_name and app_label , respectively . target is a list containing tuple with two elements app_label and migration.name [ migration . name ] .
0
example# 4658
get executor.loader.graph.nodes [ executor . loader . graph . nodes ] list item at the index of the first element of targets list , get the value under the _STR:0_ key of options dictionary , put previous two elements is a tuple , tuple is contained in a plan list .
1
'backwards' ||| _STR:0_
example# 4659
call method executor.collect_sql [ executor . collect_sql ] with plan as the argument , substitute the result for sql_statements .
0
example# 4660
for every statements in sql_statements :
0
example# 4661
call method self.stdout.write [ self . stdout . write ] with statement as an argument .
0
example# 4662
from __future__ import unicode_literals into default name space .
0
example# 4663
from django.core.management.base [ django . core . management . base ] import AppCommand into default name space .
0
example# 4664
from django.core.management.sql [ django . core . management . sql ] import check_for_migrations into default name space .
0
example# 4665
from django.db [ django . db ] import connections and DEFAULT_DB_ALIAS into default name space .
0
example# 4666
derive the class Command from the AppCommand base class .
0
example# 4667
help is a string _STR:0_ .
1
'Prints the SQL statements for resetting sequences for the given app name(s).' ||| _STR:0_
example# 4668
output_transaction is boolean True .
0
example# 4669
define the method add_arguments , with 2 arguments self and parser .
0
example# 4670
call the method add_arguments from the base class of the Command class , with an argument parser .
0
example# 4671
call the method parser.add_argument [ parser . add_argument ] with 3 arguments : string _STR:0_ , default set to DEFAULT_DB_ALIAS ,
1
'--database' ||| _STR:0_
example# 4672
and help set to string _STR:0_ . define the method handle_app_config with 3 arguments : self , app_config and unpacked dictionary options .
1
'Nominates a database to print the SQL for. Defaults to the "default" database.' ||| _STR:0_
example# 4673
if app_config.models_module [ app_config . models_module ] is None ,
0
example# 4674
return nothing .
0
example# 4675
get the value under the _STR:0_ key of the options dictionary ,
1
'database' ||| _STR:0_
example# 4676
use the result as a key to get the value from the connections dictionary , substitute the result for connection . call the function check_for_migrations with 2 arguments : app_config and connection .
0
example# 4677
call the method app_config.get_models [ app_config . get_models ] with include_auto_created set to boolean True , substitute the result for models .
0
example# 4678
call the method connection.ops.sequence_reset_sql [ connection . ops . sequence_reset_sql ] with 2 arguments self.style [ self . style ] and models , substitute the result for statements .
0
example# 4679
join statements into a string , separated by newline characters , return it .
0
example# 4680
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 4681
from django.utils [ django . utils ] import six into default name space .
0
example# 4682
from django.db [ django . db ] import connections , DEFAULT_DB_ALIAS and migrations into default name space .
0
example# 4683
from django.db.migrations.loader [ django . db . migrations . loader ] import AmbiguityError into default name space .
0
example# 4684
from django.db.migrations.executor [ django . db . migrations . executor ] import MigrationExecutor into default name space .
0
example# 4685
from django.db.migrations.writer [ django . db . migrations . writer ] import MigrationWriter into default name space .
0
example# 4686
from django.db.migrations.optimizer [ django . db . migrations . optimizer ] import MigrationOptimizer into default name space .
0
example# 4687
derive the class Command from the BaseCommand class .
0
example# 4688
help is a string _STR:0_ .
1
"Squashes an existing set of migrations (from first until specified) into a single new one." ||| _STR:0_
example# 4689
define the method add_arguments with 2 arguments self and parser .
0
example# 4690
call the method parser.add_argument [ parser . add_argument ] with 2 arguments : string _STR:0_ ,
1
'app_label' ||| _STR:0_
example# 4691
and help is a string _STR:0_ . call the method parser.add_argument [ parser . add_argument ] with 2 arguments : string _STR:1_ ,
2
'migration_name' ||| _STR:1_
'App label of the application to squash migrations for.' ||| _STR:0_
example# 4692
and help is a string _STR:0_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:1_ , action as a string _STR:2_ ,
3
'Migrations will be squashed until and including this migration.' ||| _STR:0_
'store_true' ||| _STR:2_
'--no-optimize' ||| _STR:1_
example# 4693
dest as a string _STR:0_ , default set to boolean False and help as a string _STR:1_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:2_ , action set to string _STR:3_ ,
4
'store_false' ||| _STR:3_
'no_optimize' ||| _STR:0_
'--noinput' ||| _STR:2_
'Do not try to optimize the squashed operations.' ||| _STR:1_
example# 4694
dest as a string _STR:0_ , default as boolean True help as a string _STR:1_ . define the method handle with 3 arguments : self and unpacked dictionary options .
2
'interactive' ||| _STR:0_
'Tells Django to NOT prompt the user for input of any kind.' ||| _STR:1_
example# 4695
get the value under the _STR:0_ key of the options dictionary , substitute it for self.verbosity [ self . verbosity ] .
1
'verbosity' ||| _STR:0_
example# 4696
get the value under the _STR:0_ key of the options dictionary , substitute it for self.interactive [ self . interactive ] .
1
'interactive' ||| _STR:0_
example# 4697
get the values under the _STR:0_ and _STR:1_ keys of the options dictionary ,
2
'migration_name' ||| _STR:1_
'app_label' ||| _STR:0_
example# 4698
substitute them for app_label and migration_name , respectively . executor is an instance of MigrationExecutor , created with value under the DEFAULT_DB_ALIAS key of the connections dictionary .
0
example# 4699
if app_label is not contained in executor.loader.migrated_apps [ executor . loader . migrated_apps ] ,
0
example# 4700
raise an CommandError with an argument string _STR:0_ ,
1
"App '%s' does not have migrations (so squashmigrations on it makes no sense)" ||| _STR:0_
example# 4701
where ' % s ' is replaced with app_label . try ,
0
example# 4702
call the method executor.loader.get_migration_by_prefix [ executor . loader . get_migration_by_prefix ] with arguments app_label , migration_name , substitute the result for migration .
0
example# 4703
if AmbiguityError exception is caught ,
0
example# 4704
raise an CommandError with an argument string _STR:0_ ,
1
"More than one migration matches '%s' in app '%s'. Please be more specific." ||| _STR:0_
example# 4705
where ' % s ' is replaced with migration_name and app_label . if KeyError exception is caught ,
0
example# 4706
raise an CommandError with an argument string _STR:0_ ,
1
"Cannot find a migration matching '%s' from app '%s'." ||| _STR:0_
example# 4707
where ' % s ' is replaced with migration_name and app_label . migrations_to_squash is a list created dynamically with elements : return value of the method executor.loader.get_migration [ executor . loader . get_migration ] called ,
0
example# 4708
with arguments al and mn , for every al , mn in executor.loader.graph.forwards_plan [ executor . loader . graph . forwards_plan ] method return value called with 2 arguments : migration.app_label [ migration . app_label ] , migration.name [ migration . name ] , only if al equals migration.app_label [ migration . app_label ] . if self.verbosity [ self . verbosity ] is greater than integer 0 or self.interactive [ self . interactive ] is true ,
0
example# 4709
call the method self.style.MIGRATE_HEADING [ self . style . MIGRATE_HEADING ] with an argument string _STR:0_ ,
1
"Will squash the following migrations:" ||| _STR:0_
example# 4710
write it to self.stdout [ self . stdout ] . for every migration in migrations_to_squash ,
0
example# 4711
append migration.name [ migration . name ] to string _STR:0_ , write it to self.stdout [ self . stdout ] stream .
1
' - ' ||| _STR:0_
example# 4712
if self.interactive [ self . interactive ] is true ,
0
example# 4713
answer is None .
0
example# 4714
while answer is false or answer is not contained in string _STR:0_ , perform the following ,
1
"yn" ||| _STR:0_
example# 4715
call the method six.moves.input [ six . moves . input ] with an argument string _STR:0_ , substitute the result for answer .
1
"Do you wish to proceed? [yN] " ||| _STR:0_
example# 4716
if answer is false ,
0
example# 4717
substitute _STR:0_ for answer .
1
'n' ||| _STR:0_
example# 4718
break from the loop execution ,
0
example# 4719
if not ,
0
example# 4720
convert first element of answer to lowercase and substitute it for answer .
0
example# 4721
if answer equals a string _STR:0_ ,
1
'y' ||| _STR:0_
example# 4722
return nothing .
0
example# 4723
operations is an empty list .
0
example# 4724
for every smigration in migrations_to_squash ,
0
example# 4725
call the method operations.extend [ operations . extend ] with an argument smigration.operations [ smigration . operations ] .
0
example# 4726
if self.verbosity [ self . verbosity ] is greater than integer 0 ,
0
example# 4727
call the method self.style.MIGRATE_HEADING [ self . style . MIGRATE_HEADING ] with an argument string _STR:0_ , write it to self.stdout [ self . stdout ] .
1
"Optimizing..." ||| _STR:0_
example# 4728
optimizer is an instance of MigrationOptimizer class .
0
example# 4729
call the method optimizer.optimize [ optimizer . optimize ] with 2 arguments operations and migration.app_label [ migration . app_label ] , substitute the result for new_operations .
0
example# 4730
if self.verbosity [ self . verbosity ] is greater than integer 0 ,
0
example# 4731
if lengths of new_operations and operations are the same ,
0
example# 4732
write string _STR:0_ to self.stdout [ self . stdout ] stream .
1
"  No optimizations possible." ||| _STR:0_
example# 4733
if not ,
0
example# 4734
replace ' % s ' in string _STR:0_ with lengths of operations and ew_operations , respectively ,
1
"  Optimized from %s operations to %s operations." ||| _STR:0_
example# 4735
write it to self.stdout [ self . stdout ] stream . replaces is an empty list .
0
example# 4736
for every migration in migrations_to_squash ,
0
example# 4737
if migration.replaces [ migration . replaces ] is true ,
0
example# 4738
extend replaces list with migration.replaces [ migration . replaces ] ,
0
example# 4739
if not ,
0
example# 4740
append tuple with 2 elements : migration.app_label [ migration . app_label ] and migration.name [ migration . name ] to replaces .
0
example# 4741
subclass is a class named Migration , sub classed from migrations.Migration [ migrations . Migration ] base class , with fields dependencies set to an empty list ,
0
example# 4742
dependencies set to new_operations and replaces set to replaces . call the function subclass with 2 arguments string _STR:0_ , where ' % s ' is replaced with migration.name [ migration . name ] and app_label ,
1
"0001_squashed_%s" ||| _STR:0_
example# 4743
substitute the result for new_migration . writer is an instance of a class MigrationWriter , created with an argument new_migration .
0
example# 4744
open writer.path [ writer . path ] file in write mode , with file descriptor as fh , perform the following ,
0
example# 4745
call the method writer.as_string [ writer . as_string ] , write the result to file fh .
0
example# 4746
if self.verbosity [ self . verbosity ] is greater than integer 0 ,
0
example# 4747
replace ' % s ' in a string _STR:0_ with writer.path [ writer . path ] , use it as an argument for the call to the method ,
1
"Created new squashed migration %s" ||| _STR:0_
example# 4748
self.style.MIGRATE_HEADING [ self . style . MIGRATE_HEADING ] , write the result to self.stdout [ self . stdout ] . write string _STR:0_ to self.stdout [ self . stdout ] .
1
"  You should commit this migration but leave the old ones in place;" ||| _STR:0_
example# 4749
write string _STR:0_ to self.stdout [ self . stdout ] .
1
"  the new migration will be used for new installs. Once you are sure" ||| _STR:0_
example# 4750
write string _STR:0_ to self.stdout [ self . stdout ] .
1
"  all instances of the codebase have applied the migrations you squashed," ||| _STR:0_
example# 4751
write string _STR:0_ to self.stdout [ self . stdout ] .
1
"  you can delete them." ||| _STR:0_
example# 4752
from importlib import import_module into default name space .
0
example# 4753
from django.core.management.base [ django . core . management . base ] import CommandError into default name space .
0
example# 4754
from django.core.management.templates [ django . core . management . templates ] import TemplateCommand into default name space .
0
example# 4755
derive the class Command from the TemplateCommand base class .
0
example# 4756
help is a tuple containing a string _STR:0_ .
1
"Creates a Django app directory structure for the given app name in the current directory or optionally in the given directory." ||| _STR:0_
example# 4757
missing_args_message is a string _STR:0_ .
1
"You must provide an application name." ||| _STR:0_
example# 4758
define the method handle with 2 arguments : self and unpacked dictionary options .
0
example# 4759
remove values under the keys _STR:0_ and _STR:1_ of the options dictionary and substitute it for app_name and target , respectively .
2
'directory' ||| _STR:1_
'name' ||| _STR:0_
example# 4760
call the method self.validate_name [ self . validate_name ] with 2 arguments : app_name and string _STR:0_ .
1
'app' ||| _STR:0_
example# 4761
try ,
0
example# 4762
call the function import_module with an argument app_name .
0
example# 4763
if ImportError exception is caught ,
0
example# 4764
do nothing .
0
example# 4765
in not ,
0
example# 4766
raise an CommandError exception with an argument string _STR:0_
1
"%r conflicts with the name of an existing Python module and cannot be used " ||| _STR:0_
example# 4767
_STR:0_ , where _STR:1_ is replaced with app_name . call the method handle from the base class of Command class , with 4 arguments : string _STR:2_ , app_name , target and unpacked dictionary options .
3
"as an app name. Please try another name." ||| _STR:0_
'%r' ||| _STR:1_
'app' ||| _STR:2_
example# 4768
from importlib import import_module into default name space .
0
example# 4769
from django.core.management.base [ django . core . management . base ] import CommandError into default name space .
0
example# 4770
from django.core.management.templates [ django . core . management . templates ] import TemplateCommand into default name space .
0
example# 4771
from django.utils.crypto [ django . utils . crypto ] import get_random_string into default name space .
0
example# 4772
derive class Command from the TemplateCommand base class .
0
example# 4773
help is a tuple containing string _STR:0_
1
"Creates a Django project directory structure for the given " ||| _STR:0_
example# 4774
_STR:0_ . missing_args_message is a string _STR:1_ .
2
"project name in the current directory or optionally in the given directory." ||| _STR:0_
"You must provide a project name." ||| _STR:1_
example# 4775
define the method handle with arguments self and unpacked dictionary options .
0
example# 4776
remove the elements from the _STR:0_ and _STR:1_ keys of the options dictionary , substitute them for project_name and target , respectively .
2
'dictionary' ||| _STR:1_
'name' ||| _STR:0_
example# 4777
call the method self.validate_name [ self . validate_name ] with arguments project_name and string _STR:0_ .
1
"project" ||| _STR:0_
example# 4778
try ,
0
example# 4779
call the function import_module with an argument project_name .
0
example# 4780
if ImportError exception is caught ,
0
example# 4781
do nothing .
0
example# 4782
if not ,
0
example# 4783
raise an exception CommandError , with argument string _STR:0_ , where _STR:1_ is replaced with project_name .
2
"%r conflicts with the name of an existing Python module and cannot be used as a project name. Please try another name." ||| _STR:0_
'%r' ||| _STR:1_
example# 4784
chars is a string _STR:0_ .
1
'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)' ||| _STR:0_
example# 4785
call the function get_random_string with 2 arguments : integer 50 and chars , substitute it for value under the _STR:0_ of the options dictionary .
1
'secret_key' ||| _STR:0_
example# 4786
call the handle method of the base class of the Command class , with 4 arguments : string _STR:0_ , project_name , target ,
1
'project' ||| _STR:0_
example# 4787
import module warnings .
0
example# 4788
from django.apps [ django . apps ] import apps into default name space .
0
example# 4789
from django.contrib.auth [ django . contrib . auth ] import get_user_model into default name space .
0
example# 4790
from django.db [ django . db ] import DEFAULT_DB_ALIAS into default name space .
0
example# 4791
from django.core.management [ django . core . management ] import call_command into default name space .
0
example# 4792
from django.core.management.base [ django . core . management . base ] import BaseCommand into default name space .
0
example# 4793
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
0
example# 4794
from django.utils.six.moves [ django . utils . six . moves ] import input into default name space .
0
example# 4795
derive class Command from the BaseCommand base class .
0
example# 4796
help is a string _STR:0_ .
1
"Deprecated - use 'migrate' instead." ||| _STR:0_
example# 4797
define the method add_arguments with self and parser as arguments .
0
example# 4798
call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:0_ , action set to string _STR:1_ ,
2
'store_false' ||| _STR:1_
'--noinput' ||| _STR:0_
example# 4799
dest set to string _STR:0_ , default set to boolean True and help as _STR:1_ call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:2_ , action set to string _STR:3_ ,
4
'--no-initial-data' ||| _STR:2_
'interactive' ||| _STR:0_
'Tells Django to NOT prompt the user for input of any kind.' ||| _STR:1_
'store_false' ||| _STR:3_
example# 4800
dest set to string _STR:0_ , default set to boolean True , and help as a string _STR:1_ call the method parser.add_argument [ parser . add_argument ] with 3 arguments : string _STR:2_ , default set to DEFAULT_DB_ALIAS ,
3
'Tells Django not to load any initial data after database synchronization.' ||| _STR:1_
'--database' ||| _STR:2_
'load_initial_data' ||| _STR:0_
example# 4801
and help set to string _STR:0_ . define the method handle with 2 arguments : self and unpacked dictionary options .
1
'Nominates a database to synchronize. Defaults to the "default" database.' ||| _STR:0_
example# 4802
call the method warnings.warn [ warnings . warn ] with 2 arguments : string _STR:0_ and RemovedInDjango19Warning .
1
"The syncdb command will be removed in Django 1.9" ||| _STR:0_
example# 4803
call the function call_command with 2 arguments : string migrate and unpacked dictionary options .
0
example# 4804
try ,
0
example# 4805
call the method apps.get_model [ apps . get_model ] with 2 arguments : string _STR:0_ and string _STR:1_ .
2
'Permission' ||| _STR:1_
'auth' ||| _STR:0_
example# 4806
if LookupError exception is caught .
0
example# 4807
return nothing .
0
example# 4808
call the function get_user_model , substitute the result for UserModel .
0
example# 4809
if return value of the method UserModel._default_manager.exists [ UserModel . _default_manager . exists ] is false and value under the _STR:0_ key of the options dictionary is true ,
1
'interactive' ||| _STR:0_
example# 4810
msg is a tuple containing string _STR:0_ .
1
"\nYou have installed Django's auth system, and don't have any superusers defined.\nWould you like to create one now? (yes/no): " ||| _STR:0_
example# 4811
call the method input with an argument msg and store the result in confirm .
0
example# 4812
endless loop ,
0
example# 4813
if confirm is not equal to string _STR:0_ or string _STR:1_ ,
2
'no' ||| _STR:1_
'yes' ||| _STR:0_
example# 4814
query a string _STR:0_ and store the result in confirm .
1
'Please enter either "yes" or "no": ' ||| _STR:0_
example# 4815
skip this loop iteration .
0
example# 4816
if confirm equals string _STR:0_ ,
1
'yes' ||| _STR:0_
example# 4817
call the function call_command with 3 arguments : string _STR:0_ , interactive is boolean True ,
1
"createsuperuser" ||| _STR:0_
example# 4818
and database set to value under the _STR:0_ key of the options dictionary . break the loop execution .
1
'database' ||| _STR:0_
example# 4819
import module logging .
0
example# 4820
import module sys .
0
example# 4821
import module os .
0
example# 4822
from django.conf [ django . conf ] import settings into default name space .
0
example# 4823
from django.core.management.base [ django . core . management . base ] import BaseCommand into default name space .
0
example# 4824
from django.test.utils [ django . test . utils ] import get_runner into default name space .
0
example# 4825
derive class Command from the BaseCommand base class .
0
example# 4826
help is a string _STR:0_ .
1
'Discover and run tests in the specified modules or the current directory.' ||| _STR:0_
example# 4827
requires_system_checks is boolean False .
0
example# 4828
define the method __init__ with an argument self .
0
example# 4829
self.test_runner [ self . test_runner ] is None .
0
example# 4830
call the method __init__ form the base class of the Command class .
0
example# 4831
define the method run_from_argv with arguments self and argv .
0
example# 4832
option is a string _STR:0_ .
1
'--testrunner=' ||| _STR:0_
example# 4833
for arg in argv list without the first two elements ,
0
example# 4834
if arg starts with options ,
0
example# 4835
get the length of the options , use it as a starting index for the slicing arg list , substitute it for self.test_runner [ self . test_runner ] .
0
example# 4836
break the loop execution .
0
example# 4837
call the run_from_argv function from the base class of the Command class with argv as a argument , .
0
example# 4838
define the method add_arguments with arguments self and parser .
0
example# 4839
call the method parser.add_argument [ parser . add_argument ] with 4 arguments : string _STR:0_ , metavar set to string _STR:1_ , nargs set to string _STR:2_ ,
3
'*' ||| _STR:2_
'args' ||| _STR:0_
'test_label' ||| _STR:1_
example# 4840
and help is a string _STR:0_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:1_ , action set to _STR:2_ , dest set to _STR:3_ ,
4
'store_false' ||| _STR:2_
'interactive' ||| _STR:3_
'Module paths to test; can be modulename, modulename.TestCase or modulename.TestCase.test_method' ||| _STR:0_
'--noinput' ||| _STR:1_
example# 4841
default set to boolean True , help set to string _STR:0_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:1_ , action set to string _STR:2_ , dest set to _STR:3_ ,
4
'failfast' ||| _STR:3_
'Tells Django to NOT prompt the user for input of any kind.' ||| _STR:0_
'store_true' ||| _STR:2_
'--failfast' ||| _STR:1_
example# 4842
default set to boolean False and help set to string _STR:0_ . call the method parser.add_argument [ parser . add_argument ] with 4 arguments : string _STR:1_ , action set to string _STR:2_ , dest set to _STR:3_ ,
4
'--testrunner' ||| _STR:1_
'testrunner' ||| _STR:3_
'store' ||| _STR:2_
'Tells Django to stop running the test suite after first failed test.' ||| _STR:0_
example# 4843
and help set to a string _STR:0_ . call the method parser.add_argument [ parser . add_argument ] with 5 arguments : string _STR:1_ , action set to string _STR:2_ , dest set to _STR:3_ ,
4
'Tells Django to use specified test runner class instead of the one specified by the TEST_RUNNER setting.' ||| _STR:0_
'--liveserver' ||| _STR:1_
'store' ||| _STR:2_
'liveserver' ||| _STR:3_
example# 4844
default set to None and help set to string _STR:0_ _STR:1_ call the function get_runner with arguments settings and self.test_runner [ self . test_runner ] , substitute the result for test_runner_class .
2
'with LiveServerTestCase) is expected to run from. The default value is localhost:8081.' ||| _STR:1_
'Overrides the default address where the live server (used ' ||| _STR:0_
example# 4845
if test_runner_class has an _STR:0_ attribute ,
1
'option_list' ||| _STR:0_
example# 4846
raise an RuntimeError exception with an argument string _STR:0_
1
"The method to extend accepted command-line arguments by the " ||| _STR:0_
example# 4847
_STR:0_ if test_runner_class has an attribute _STR:1_ ,
2
'add_arguments' ||| _STR:1_
"test management command has changed in Django 1.8. Please create an add_arguments class method to achieve this." ||| _STR:0_
example# 4848
call the method test_runner_class.add_arguments [ test_runner_class . add_arguments ] with an argument parser .
0
example# 4849
define the method execute with 3 arguments self , unpacked list args and unpacked dictionary options .
0
example# 4850
if value under the _STR:0_ key of the options dictionary is greater than zero ,
1
'verbosity' ||| _STR:0_
example# 4851
call the method logging.getLogger [ logging . getLogger ] with an argument string _STR:0_ , substitute the result for logger .
1
'py.warnings' ||| _STR:0_
example# 4852
call the method logging.StreamHandler [ logging . StreamHandler ] , substitute the result for handler .
0
example# 4853
call the method logger.addHandler [ logger . addHandler ] with an argument handler .
0
example# 4854
call the method execute form the base class of the class Command , with 2 arguments : unpacked list args and unpacked dictionary options .
0
example# 4855
if value under the _STR:0_ key of the options dictionary is greater than zero ,
1
'verbosity' ||| _STR:0_
example# 4856
call the method logger.removeHandler [ logger . removeHandler ] with an argument handler .
0
example# 4857
define the method handle with 3 arguments : self , unpacked list test_labels and unpacked dictionary options .
0
example# 4858
from django.conf [ django . conf ] import settings into default namespace .
0
example# 4859
from django.test.utils [ django . test . utils ] import get_runner into default namespace .
0
example# 4860
call the method get_runner with 2 arguments : settings and value under the _STR:0_ key of the options dictionary , substitute it for the TestRunner .
1
'testrunner' ||| _STR:0_
example# 4861
if value under the _STR:0_ key of the options dictionary is not None ,
1
'liveserver' ||| _STR:0_
example# 4862
substitute value under the _STR:0_ key of the options dictionary for value under the _STR:1_ key of the os.environ [ os . environ ] dictionary .
2
'DJANGO_LIVE_TEST_SERVER_ADDRESS' ||| _STR:1_
'liveserver' ||| _STR:0_
example# 4863
delete the value under the _STR:0_ key of the options dictionary .
1
'liveserver' ||| _STR:0_
example# 4864
test_runner is an instance of TestRunner class , called with an argument unpacked dictionary options .
0
example# 4865
call the method test_runner.run_tests [ test_runner . run_tests ] with an argument test_labels , substitute it for failures .
0
example# 4866
if failures is true ,
0
example# 4867
exit the program with failures converted to boolean as a message .
0
example# 4868
from django.core.management [ django . core . management ] import call_command into default name space .
0
example# 4869
from django.core.management.base [ django . core . management . base ] import BaseCommand into default name space .
0
example# 4870
from django.db [ django . db ] import connection into default name space .
0
example# 4871
derive class Command from the BaseCommand base class .
0
example# 4872
help is a string _STR:0_ .
1
'Runs a development server with data from the given fixture(s).' ||| _STR:0_
example# 4873
args is a string _STR:0_ .
1
'[fixture ...]' ||| _STR:0_
example# 4874
requires_system_checks is boolean False .
0
example# 4875
define the method with self class instance and parser as arguments .
0
example# 4876
call parser.add_argument [ parser . add_argument ] method with _STR:0_ , metavar set to string _STR:1_ , nargs set to string _STR:2_ and help set to string _STR:3_ .
4
'*' ||| _STR:2_
'Path(s) to fixtures to load before running the server.' ||| _STR:3_
'fixture' ||| _STR:1_
'args' ||| _STR:0_
example# 4877
call parser.add_argument [ parser . add_argument ] method with _STR:0_ , action set to string _STR:1_ , dest set to string _STR:2_ ,
3
'store_false' ||| _STR:1_
'interactive' ||| _STR:2_
'--noinput' ||| _STR:0_
example# 4878
default set to boolean True and help set to string _STR:0_ . call the parser.add_argument [ parser . add_argument ] with string _STR:1_ , default set to an empty string and help as string _STR:2_ .
3
'--addrport' ||| _STR:1_
'Tells Django to NOT prompt the user for input of any kind.' ||| _STR:0_
'Port number or ipaddr:port to run the server on.' ||| _STR:2_
example# 4879
call parser.add_argument [ parser . add_argument ] method with _STR:0_ , string _STR:1_ , action set to string _STR:2_ , dest set to string _STR:3_ ,
4
'-6' ||| _STR:1_
'store_true' ||| _STR:2_
'--ipv6' ||| _STR:0_
'use_ipv6' ||| _STR:3_
example# 4880
default set to boolean False and help set to string _STR:0_ . define the method handle with self class instance , list of arguments fixture_labels and dictionary options as arguments .
1
'Tells Django to use an IPv6 address.' ||| _STR:0_
example# 4881
get the value under the key _STR:0_ of options dictionary , substitute it for verbosity .
1
'verbosity' ||| _STR:0_
example# 4882
get the value under the key _STR:0_ of options dictionary , substitute it for interactive .
1
'interactive' ||| _STR:0_
example# 4883
call the method connection.creation.create_test_db [ connection . creation . create_test_db ] with verbosity set to verbosity , autoclobber set to inverse value of interactive ,
0
example# 4884
serialize set to boolean False , substitute the return value for db_name . call the method call_command with 3 arguments , string _STR:0_ , unpacked list fixture_labels and unpacked dictionary containing 1 element : verbosity for _STR:1_ .
2
'loaddata' ||| _STR:0_
'verbosity' ||| _STR:1_
example# 4885
replace _STR:0_ from string _STR:1_ , with db_name , substitute it for shutdown_message .
2
'%r' ||| _STR:0_
'\nServer stopped.\nNote that the test database, %r, has not been deleted. You can explore it on your own.' ||| _STR:1_
example# 4886
substitute connection.features.test_db_allows_multiple_connections [ connection . features . test_db_allows_multiple_connections ] for use_threading .
0
example# 4887
call the function call_command with 6 arguments , string _STR:0_ , addrport as the value under the _STR:1_ key of options dictionary ,
2
'addrport' ||| _STR:1_
'runserver' ||| _STR:0_
example# 4888
from __future__ import unicode_literals into default name space .
0
example# 4889
import module warnings .
0
example# 4890
from django.core.management.commands.check [ django . core . management . commands . check ] import Command as CheckCommand into default name space .
0
example# 4891
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
0
example# 4892
derive class Command from CheckCommand base class .
0
example# 4893
concatenate CheckCommand.help [ CheckCommand . help ] to string _STR:0_ , substitute it for help .
1
'Deprecated. Use "check" command instead. ' ||| _STR:0_
example# 4894
define the method handle with self class instance and dictionary pair of elements options as arguments .
0
example# 4895
call the method warnings.warn [ warnings . warn ] with string _STR:0_ and RemovedInDjango19Warning as arguments .
1
'"validate" has been deprecated in favor of "check".' ||| _STR:0_
example# 4896
call the handle function with dictionary pair of elements options from the base class of the class Command .
0
example# 4897
from __future__ import unicode_literals into default name space .
0
example# 4898
import module codecs .
0
example# 4899
import module os .
0
example# 4900
import module re .
0
example# 4901
import module warnings .
0
example# 4902
from django.apps [ django . apps ] import apps into default name space .
0
example# 4903
from django.conf [ django . conf ] import settings into default name space .
0
example# 4904
from django.core.management.base [ django . core . management . base ] import CommandError into default name space .
0
example# 4905
from django.db [ django . db ] import models and router into default name space .
0
example# 4906
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
0
example# 4907
define the function check_for_migrations with 2 arguments : app_config and connection .
0
example# 4908
from django.db.migrations.loader [ django . db . migrations . loader ] import MigrationLoader into default name space .
0
example# 4909
loader is an instance of MigrationLoader class , created with an argument connection .
0
example# 4910
if app_config.label [ app_config . label ] is contained in loader.migrated_apps [ loader . migrated_apps ] ,
0
example# 4911
raise an CommandError exception , with an arguent : string _STR:0_ , where ' % s ' is replaced for app_config.label [ app_config . label ] .
1
"App '%s' has migrations. Only the sqlmigrate and sqlflush commands can be used when an app has migrations." ||| _STR:0_
example# 4912
define the function sql_create with 3 arguments : app_config , style and connection .
0
example# 4913
call the function check_for_migrations with an arguments app_config , connection .
0
example# 4914
if value under the _STR:0_ key of the connection.settings_dict [ connection . settings_dict ] dictionary equals a string _STR:1_ ,
2
'django.db.backends.dummy' ||| _STR:1_
'ENGINE' ||| _STR:0_
example# 4915
raise an CommandError exception with an argument string _STR:0_
1
"Django doesn't know which syntax to use for your SQL statements,\n" ||| _STR:0_
example# 4916
_STR:0_ . call the method app_config.get_models [ app_config . get_models ] with an argument include_auto_created set to boolean True , substitute it for app_models .
1
"because you haven't properly specified the ENGINE setting for the database.\n see: https://docs.djangoproject.com/en/dev/ref/settings/#databases" ||| _STR:0_
example# 4917
final_output is an empty list .
0
example# 4918
call the method connection.introspection.table_names [ connection . introspection . table_names ] , substitute the result for tables .
0
example# 4919
if model is not contained in app_models for every model in return value of the connection.introspection.installed_models [ connection . introspection . installed_models ] function return value ,
0
example# 4920
add model to a set , substitute the result for known_models . pending_references is an empty dictionary .
0
example# 4921
for every model in return value of the function router.get_migratable_models [ router . get_migratable_models ] , called with arguments :
0
example# 4922
app_config , connection.alias [ connection . alias ] and include_auto_created set to boolean True . call the method connection.creation.sql_create_model [ connection . creation . sql_create_model ] with arguments model , style and known_models , substitute the result for output and references .
0
example# 4923
call the method final_output.extend [ final_output . extend ] with an argument output .
0
example# 4924
for every refto and refs in return value of the method references.items [ references . items ] ,
0
example# 4925
call the method pending_references.setdefault [ pending_references . setdefault ] with 2 arguments : refto and an empty list , extend the result with refs .
0
example# 4926
if refto is contained in known_models ,
0
example# 4927
call the method connection.creation.sql_for_pending_references [ connection . creation . sql_for_pending_references ] with 3 arguments : refo , style and pending_references ,
0
example# 4928
use the result as an argument for the call to the method final_output.extend [ final_output . extend ] . call the method connection.creation.sql_for_pending_references [ connection . creation . sql_for_pending_references ] with 3 arguments : refo , style and pending_references ,
0
example# 4929
use the result as an argument for the call to the method final_output.extend [ final_output . extend ] . add model to known_models set .
0
example# 4930
call the method pending_references.keys [ pending_references . keys ] , put the result into a set and substitute it for not_installed_models .
0
example# 4931
if not_installed_models is true ,
0
example# 4932
alter_sql is an empty list .
0
example# 4933
for every model in not_installed_models ,
0
example# 4934
for every sql in return value of the function connection.creation.sql_for_pending_references [ connection . creation . sql_for_pending_references ] called with arguments : model , style ,
0
example# 4935
and pending_references append sql to the string _STR:0_ , put the results in a list , extend alter_sql with the result . if alter_sql ,
1
'-- ' ||| _STR:0_
example# 4936
append string _STR:0_ to the final_output .
1
'-- The following references should be added but depend on non-existent tables:' ||| _STR:0_
example# 4937
extend final_output with alter_sql .
0
example# 4938
return final_output .
0
example# 4939
define the function sql_delete with 4 arguments : app_config , style , connection and close_connection set to boolean True .
0
example# 4940
call the function check_for_migrations with arguments app_config and connection .
0
example# 4941
try ,
0
example# 4942
call the method connection.cursor [ connection . cursor ] , substitute the result for cursor .
0
example# 4943
if Exception exception is caught ,
0
example# 4944
cursor is None .
0
example# 4945
try ,
0
example# 4946
if cursor is true ,
0
example# 4947
call the method connection.introspection.table_names [ connection . introspection . table_names ] with an argument cursor , substitute the result for table_names .
0
example# 4948
if not ,
0
example# 4949
table_names is an empty list .
0
example# 4950
output is an empty list .
0
example# 4951
to_delete is an empty set .
0
example# 4952
references_to_delete is an empty dictionary .
0
example# 4953
call the method router.get_migratable_models [ router . get_migratable_models ] with argument : app_config , connection.alias [ connection . alias ] and include_auto_created set to True , substitute the result for app_models .
0
example# 4954
for every model in app_models ,
0
example# 4955
if cursor is true and return value of the function connection.introspection.table_name_converter [ connection . introspection . table_name_converter ] called with an arugment : model._meta.db_table [ model . _meta . db_table ] is contained in table_names ,
0
example# 4956
substitute model._meta [ model . _meta ] for opts .
0
example# 4957
for every f in opts.local_fields [ opts . local_fields ] ,
0
example# 4958
if f.rel [ f . rel ] and f.rel.to [ f . rel . to ] are not contained in to_delete ,
0
example# 4959
call the method references_to_delete.setdefault [ references_to_delete . setdefault ] with arguments : r.rel.to [ r . rel . to ] and an empty list , append to the result tuple with 2 entries : model and f .
0
example# 4960
call the method to_delete.add [ to_delete . add ] with an argument model .
0
example# 4961
for every model in app_models ,
0
example# 4962
if return value of the function connection.introspection.table_name_converter [ connection . introspection . table_name_converter ] called with an arugment : model._meta.db_table [ model . _meta . db_table ] is contained in table_names
0
example# 4963
call the method connection.creation.sql_destroy_model [ connection . creation . sql_destroy_model ] with arguments : model , references_to_delete and style , extend with the result the list output .
0
example# 4964
finally perform ,
0
example# 4965
if both cursor and close_connection are true ,
0
example# 4966
call the method cursor.close [ cursor . close ] ,
0
example# 4967
call the method connection.close [ connection . close ] ,
0
example# 4968
return reversed list output .
0
example# 4969
define the function sql_flush with 4 arguments : style , connection , only_django set to boolean False ,
0
example# 4970
if only_django ,
0
example# 4971
call the method connection.introspection.django_table_names [ connection . introspection . django_table_names ] with an argument boolean true , substitute the result for tables .
0
example# 4972
if not ,
0
example# 4973
call the method connection.introspection.table_names [ connection . introspection . table_names ] , substitute the result for tables .
0
example# 4974
call the method connection.introspection.sequence_list [ connection . introspection . sequence_list ] if reset_sequences is true , substitute the result for seqs , if not , seqs is an empty tuple .
0
example# 4975
call the method connection.ops.sql_flush [ connection . ops . sql_flush ] with arguments : style , tables , seqs and allow_cascade , substitute the result for statements .
0
example# 4976
return statements .
0
example# 4977
define the function sql_custom with 3 arguments : app_config , style and connection .
0
example# 4978
call the method check_for_migrations with arguments : app_config and connection .
0
example# 4979
output is an empty list .
0
example# 4980
call the method router.get_migratable_models [ router . get_migratable_models ] with arguments app_config and connection.alias [ connection . alias ] .
0
example# 4981
for every model in app_models ,
0
example# 4982
call the function custom_sql_for_model with 3 arguments : model , style and connection , extend the output with the result .
0
example# 4983
return output .
0
example# 4984
define the function sql_indexes with 3 arguments : app_config , style and connection .
0
example# 4985
call the function check_for_migrations with an arguments app_config and connection .
0
example# 4986
outut is an empty list .
0
example# 4987
for model in router.get_migratable_models [ router . get_migratable_models ] method return value , called with 3 arguments : app_config , connection.alias [ connection . alias ] ,
0
example# 4988
and include_auto_created set to boolean True , call the method connection.creation.sql_indexes_for_model [ connection . creation . sql_indexes_for_model ] with arguments model and style , extend output with the result .
0
example# 4989
return output .
0
example# 4990
define the function sql_destroy_indexes with 3 arguments : app_config , style and connection .
0
example# 4991
call the function check_for_migrations with arguments app_config and connection .
0
example# 4992
output is an empty list .
0
example# 4993
for model in return value of the method router.get_migratable_models [ router . get_migratable_models ] with arguments app_config , connection.alias [ connection . alias ] ,
0
example# 4994
and include_auto_created set to boolean True , call the method connection.creation.sql_destroy_indexes_for_model [ connection . creation . sql_destroy_indexes_for_model ] with arguments model and style , extend the output with the result .
0
example# 4995
return output .
0
example# 4996
define the function sql_all with 3 arguments : app_config , style and connection .
0
example# 4997
call the function check_for_migrations with arguments app_config and connection .
0
example# 4998
use the app_config , style and connection as arguments for the call to the sql_create , sql_custom and sql_indexes functions , append the results respectively , return the result .
0
example# 4999
define the function _split_statements with an argument content .
0
example# 5000
call the function re.compile [ re . compile ] with an argument raw string _STR:0_ , substitute the result for comment_re .
1
"^((?:'[^']*'|[^'])*?)--.*$" ||| _STR:0_
example# 5001
statements is an empty list .
0
example# 5002
statement is an empty list .
0
example# 5003
split content by newline character , for every line in result ,
0
example# 5004
call the method comment_re.sub [ comment_re . sub ] with an arguments : raw string _STR:0_ and line , strip the whitespaces surrounding the result , return it .
1
'\1' ||| _STR:0_
example# 5005
if cleaned_line is false ,
0
example# 5006
skip this loop iteration ,
0
example# 5007
append cleaned_lien to statement .
0
example# 5008
if cleaned_line ends with _STR:0_ character ,
1
';' ||| _STR:0_
example# 5009
join statements into a string , separated by white spaces , append it to statements .
0
example# 5010
statement is an empty list .
0
example# 5011
return statements .
0
example# 5012
define the function custom_sql_for_model with 3 arguments : app_config , style and connection .
0
example# 5013
substitute model._meta [ model . _meta ] for opts .
0
example# 5014
app_dirs is an empty list .
0
example# 5015
call the method apps.get_app_config [ apps . get_app_config ] with an argument model._met.app_label [ model . _met . app_label ] , substitute path field of the result for app_dir .
0
example# 5016
join app_dir and string _STR:0_ into a file path , use the result as an argument for the call to the function os.path.normpath [ os . path . normpath ] ,
1
'sql' ||| _STR:0_
example# 5017
append the result to app_dirs . join app_dir and string _STR:0_ into a file path , use the result as an argument for the call to the function os.path.normpath [ os . path . normpath ] ,
1
'models/sql' ||| _STR:0_
example# 5018
append the result to old_app_dirs . if file path old_app_dir exists ,
0
example# 5019
call the function warnings.warn [ warnings . warn ] with 2 arguments : string _STR:0_ and RemovedInDjango19Warning .
1
"Custom SQL location '<app_label>/models/sql' is deprecated, use '<app_label>/sql' instead." ||| _STR:0_
example# 5020
append old_app_dir to app_dirs .
0
example# 5021
output is an empty list .
0
example# 5022
if opts.managed [ opts . managed ] is true ,
0
example# 5023
for every f in opts.local_fields [ opts . local_fields ] that has an _STR:0_ attribute , append f to a list , substitute the resulting list for post_sql_fields .
1
'post_create_sql' ||| _STR:0_
example# 5024
for every f in post_sql_fields ,
0
example# 5025
call the method f.post_create_sql [ f . post_create_sql ] with arguments : style and model._meta.db_table [ model . _meta . db_table ] , extend the output with the result .
0
example# 5026
once split at the _STR:0_ value under the _STR:1_ key of the connection.settings_dict [ connection . settings_dict ] dictionary , substitute last element of the result for backend_name .
2
'ENGINE' ||| _STR:1_
'.' ||| _STR:0_
example# 5027
sql_files is an empty list .
0
example# 5028
for every app_dir in app_dirs ,
0
example# 5029
join into a file path : app_dir and string % s. % s.sql [ s . sql ] , where ' % s ' is replaced by opts.model_name [ opts . model_name ] and backend_name , respectively ,
0
example# 5030
append the result to sql_files . join into a file path : app_dir and string % s. % s.sql [ s . sql ] , where ' % s ' is replaced by opts.model_name [ opts . model_name ] , append the result to sql_files .
0
example# 5031
for every sql_file in sql_files ,
0
example# 5032
if file path sql_file exists ,
0
example# 5033
call the function codecs.open [ codecs . open ] with 3 arguments : sql_file , string _STR:0_ and encoding set to settings.FILE_CHARSET [ settings . FILE_CHARSET ] , with the result renamed to fp ,
1
'r' ||| _STR:0_
example# 5034
call the method connection.ops.prepare_sql_script [ connection . ops . prepare_sql_script ] with 2 arguments : return value of the function fp.read [ fp . read ] ,
0
example# 5035
and _allow_fallback set to boolean True , extend the output with the result . return output .
0
example# 5036
define the function emit_pre_migrate_signal with 4 arguments : create_models , verbosity , interactive and db .
0
example# 5037
for app_config in return value of the method apps.get_app_configs [ apps . get_app_configs ] ,
0
example# 5038
if app_config.models_module [ app_config . models_module ] is None ,
0
example# 5039
skip this loop iteration ,
0
example# 5040
if verbosity is greater or equal to integer 2 ,
0
example# 5041
replace ' % s ' in string _STR:0_ with app_config.label [ app_config . label ] , print it to the standard output .
1
"Running pre-migrate handlers for application %s" ||| _STR:0_
example# 5042
call the method models.signals.pre_migrate.send [ models . signals . pre_migrate . send ] with 5 arguments : sender set to app_config , app_config set to app_config ,
0
example# 5043
verbosity set to verbosity , interactive set to interactive and using set to db . call the method models.signals.pre_syncdb.send [ models . signals . pre_syncdb . send ] with 6 arguments : sender set to app_config.models_module [ app_config . models_module ] ,
0
example# 5044
app set to app_config.models_module [ app_config . models_module ] , create_models set to create_models , verbosity set to verbosity , interactive set to interactive , and db set to db . define the function emit_post_migrate_signal with 4 arguments : created_models , verbosity , interactive and db .
0
example# 5045
for app_config in return value of the method apps.get_app_configs [ apps . get_app_configs ] ,
0
example# 5046
if app_config.models_module [ app_config . models_module ] is None ,
0
example# 5047
skip this loop iteration ,
0
example# 5048
if verbosity is greater or equal to integer 2 ,
0
example# 5049
replace ' % s ' in string _STR:0_ with app_config.label [ app_config . label ] , print it to the standard output .
1
"Running post-migrate handlers for application %s" ||| _STR:0_
example# 5050
call the method models.signals.post_migrate.send [ models . signals . post_migrate . send ] with 5 arguments : sender set to app_config , app_config set to app_config ,
0
example# 5051
verbosity set to verbosity , interactive set to interactive and using set to db . call the method models.signals.post_syncdb.send [ models . signals . post_syncdb . send ] with 6 arguments : sender set to app_config.models_module [ app_config . models_module ] ,
0
example# 5052
import module cgi .
0
example# 5053
import module errno .
0
example# 5054
import module mimetypes .
0
example# 5055
import module os .
0
example# 5056
import module posixpath .
0
example# 5057
import module re .
0
example# 5058
import module shutil .
0
example# 5059
import module stat .
0
example# 5060
import module sys .
0
example# 5061
import module tempfile .
0
example# 5062
from os import path into default name space .
0
example# 5063
import module django .
0
example# 5064
from django.template [ django . template ] import Template and Context into default name space .
0
example# 5065
from django.utils [ django . utils ] import archive into default name space .
0
example# 5066
from django.utils.six.moves.urllib.request [ django . utils . six . moves . urllib . request ] import urlretrieve into default name space .
0
example# 5067
from django.utils._os [ django . utils . _os ] import rmtree_errorhandle into default name space .
0
example# 5068
from django.core.management.base [ django . core . management . base ] import BaseCommand and CommandError into default name space .
0
example# 5069
from django.core.management.utils [ django . core . management . utils ] import handle_extensions into default name space .
0
example# 5070
call the function re.compile [ re . compile ] with 2 arguments : string _STR:0_ and re.I [ re . I ] , substitute the result for _drive_re .
1
'^([a-z]):' ||| _STR:0_
example# 5071
call the function re.compile [ re . compile ] with 2 arguments : string _STR:0_ and re.I [ re . I ] , substitute the result for _url_drive_re .
1
'^([a-z])[:|]' ||| _STR:0_
example# 5072
derive the class TemplateCommand from the BaseCommand base class .
0
example# 5073
requires_system_checks is boolean False .
0
example# 5074
can_import_settings is boolean False .
0
example# 5075
url_schemes is list of strings _STR:0_ , _STR:1_ and _STR:2_ .
3
'https' ||| _STR:1_
'http' ||| _STR:0_
'ftp' ||| _STR:2_
example# 5076
leave_locale_alone is boolean True .
0
example# 5077
define the method add_aguments with arguments self and parser .
0
example# 5078
call the method parser.add_argument [ parser . add_argument ] with 2 arguments : string _STR:0_ and help set to string _STR:1_ .
2
'Name of the application or project.' ||| _STR:1_
'name' ||| _STR:0_
example# 5079
call the method parser.add_argument [ parser . add_argument ] with 3 arguments : string _STR:0_ , nargs set to _STR:1_ and help set to string _STR:2_ .
3
'?' ||| _STR:1_
'directory' ||| _STR:0_
'Name of the application or project.' ||| _STR:2_
example# 5080
call the method parser.add_argument [ parser . add_argument ] with 2 arguments : string _STR:0_ and help set to string _STR:1_ .
2
'The path or URL to load the template from.' ||| _STR:1_
'--template' ||| _STR:0_
example# 5081
call the method parser.add_argument [ parser . add_argument ] with 6 arguments : string _STR:0_ , string _STR:1_ , dest set to string _STR:2_ ,
3
'extensions' ||| _STR:2_
'--extension' ||| _STR:0_
'-e' ||| _STR:1_
example# 5082
action set to _STR:0_ , default is a list containing string _STR:1_ and help set to string : _STR:2_ . call the method parser.add_argument [ parser . add_argument ] with 6 arguments : string _STR:3_ , string _STR:4_ , dest set to string _STR:5_ ,
6
'files' ||| _STR:5_
'py' ||| _STR:1_
'--name' ||| _STR:3_
'The file extension(s) to render (default: "py"). Separate multiple extensions with commas, or use -e multiple times.' ||| _STR:2_
'append' ||| _STR:0_
'-n' ||| _STR:4_
example# 5083
action set to string _STR:0_ , default as an empty list and help set to a string : _STR:1_ . define the method handle with 5 arguments : self , app_or_project , name , target set to None and unpacked dictionary options .
2
'The file name(s) to render. Separate multiple extensions with commas, or use -n multiple times.' ||| _STR:1_
'append' ||| _STR:0_
example# 5084
substitute app_or_project for self.app_or_project [ self . app_or_project ] .
0
example# 5085
self.paths_to_remove [ self . paths_to_remove ] is an empty list .
0
example# 5086
substitute value under the _STR:0_ key of the options dictionary for self.verbosity [ self . verbosity ] .
1
'verbosity' ||| _STR:0_
example# 5087
call the method self.validate_name [ self . validate_name ] with 2 arguments name and app_or_project .
0
example# 5088
if target is None ,
0
example# 5089
join the current working directory and name into a file path , substitute it for top_dir .
0
example# 5090
try ,
0
example# 5091
make a directory top_dir .
0
example# 5092
if OSError renamed to e , exception is caught ,
0
example# 5093
if e.errno [ e . errno ] equals errno.EEXIST [ errno . EEXIST ] ,
0
example# 5094
replace ' % s ' in string _STR:0_ with top_dir , substitute it for message .
1
"'%s' already exists" ||| _STR:0_
example# 5095
if not ,
0
example# 5096
substitute e for message .
0
example# 5097
raise an CommandError exception with an argument message .
0
example# 5098
if not ,
0
example# 5099
ge the absolute path of the return value of the function path.expanduser [ path . expanduser ] with the argument target , substitute it for top_dir .
0
example# 5100
if file path top_dir doesnt exists ,
0
example# 5101
raise an CommandError exception with an argument string _STR:0_ ,
1
"Destination directory '%s' does not exist, please create it first." ||| _STR:0_
example# 5102
where ' % s ' is replaced with top_dir . call the function handle_extensions with 2 arguments : value under the _STR:0_ key of the options dictionary ,
1
'extensions' ||| _STR:0_
example# 5103
and ignored as an empty tuple , convert the result into a tuple and substitute it for extensions . extra_files is an empty list .
0
example# 5104
for every file in value under the _STR:0_ key of the options dictionary .
1
'files' ||| _STR:0_
example# 5105
split file by _STR:0_ character , apply on its every element a lambda function which takes an argument x ,
1
',' ||| _STR:0_
example# 5106
and returns x striped of the surrounding whitespaces , extend the extra_files with the mapped list . if self.verbosity [ self . verbosity ] is greater or equal to integer 2 ,
0
example# 5107
call the method self.stdout.write [ self . stdout . write ] , with an argument string _STR:0_ ,
1
"Rendering %s template files with extensions: %s\n" ||| _STR:0_
example# 5108
where ' % s ' is replaced with app_or_project and extensions joined into a string , separated by a string _STR:0_ . call the method self.stdout.write [ self . stdout . write ] , with an argument string _STR:1_ ,
2
', ' ||| _STR:0_
"Rendering %s template files with filenames: %s\n" ||| _STR:1_
example# 5109
where ' % s ' is replaced with app_or_project and extra_files joined into a string , separated by a string _STR:0_ . append string _STR:1_ to app_or_project , substitute it for base_name .
2
', ' ||| _STR:0_
'_name' ||| _STR:1_
example# 5110
append string _STR:0_ to app_or_project , substitute it for base_subdir .
1
'_template' ||| _STR:0_
example# 5111
append string _STR:0_ to app_or_project , substitute it for base_directory .
1
'_directory' ||| _STR:0_
example# 5112
if second last element of django.VERSION [ django . VERSION ] is not equal to a string _STR:0_ ,
1
'final' ||| _STR:0_
example# 5113
docs_version is a string _STR:0_ .
1
'dev' ||| _STR:0_
example# 5114
if not ,
0
example# 5115
convert first 2 elements of django.VERSION [ django . VERSION ] into a strings , join them together , separated by a _STR:0_ , substitute the result for docs_version .
1
'.' ||| _STR:0_
example# 5116
context is an instance of a class Context , created with 2 arguments : dictionary created by apllying options to unpacked dictionary containing 3 entries :
0
example# 5117
name for base_name , top_dir for base_directory and docs_version for _STR:0_ and autoescape set to boolean False . from django.conf [ django . conf ] import settings into a default name space ,
1
'docs_version' ||| _STR:0_
example# 5118
if settings.configured [ settings . configured ] is false ,
0
example# 5119
call the method settings.configure [ settings . configure ] .
0
example# 5120
call the method self.handle_template [ self . handle_template ] with 2 arguments : value under the _STR:0_ key of the options dictionary and base_subdir .
1
'template' ||| _STR:0_
example# 5121
increment length of template_dir by one and substitute it for prefix_length .
0
example# 5122
for every root , dirs and files in subdirectory tree starting from the base dir template_dir ,
0
example# 5123
slice root starting from the prefix_length index to the end , substitute it for path_rest .
0
example# 5124
call the method path_rest.replace [ path_rest . replace ] with arguments base_name and name , substitute the result for relative_dir .
0
example# 5125
if relative_dir is true ,
0
example# 5126
join top_dir and relative_dir into a file path , substitute it for target_dir .
0
example# 5127
if target_dir path doesnt exists ,
0
example# 5128
make target_dir directory ,
0
example# 5129
for dirname in dirs ,
0
example# 5130
if dirname starts with character _STR:0_ or dirname equals a string _STR:1_ ,
2
'__pycache__' ||| _STR:1_
'.' ||| _STR:0_
example# 5131
remove dirname key from dirs .
0
example# 5132
for every filename in files ,
0
example# 5133
if filename ends with _STR:0_ , _STR:1_ or _STR:2_ ,
3
'.pyo' ||| _STR:0_
'.py.class' ||| _STR:2_
'.pyc' ||| _STR:1_
example# 5134
skip this loop iteration ,
0
example# 5135
join root and filename into a file path , substitute it for old_path .
0
example# 5136
join top_dir , relative_dir and return value of the function filename.replace [ filename . replace ] called with 2 arguments : base_name and name ,
0
example# 5137
into a file path , substitute it for new_path . if new_path file path exists ,
0
example# 5138
raise a CommandError exception with an argument :
0
example# 5139
string _STR:0_ , where _STR:1_rb ' mode , with file descriptor renamed to template_file ,
2
'%s" is replaced with new_path.   open old_path file in ' ||| _STR:1_
"%s already exists, overlaying a project or app into an existing directory won't replace conflicting files" ||| _STR:0_
example# 5140
call the method template_file.read [ template_file . read ] , substitute it for content .
0
example# 5141
if filename ends with extensions or filename is contained in extra_files ,
0
example# 5142
call the method content.decode [ content . decode ] with an argument string _STR:0_ , substitute it for content .
1
'utf-8' ||| _STR:0_
example# 5143
template is an instance of Template class , created with an argument content .
0
example# 5144
call the method template.render [ template . render ] with an argument context , substitute it for content .
0
example# 5145
call the method content.encode [ content . encode ] with an argument string _STR:0_ , substitute it for content .
1
'utf-8' ||| _STR:0_
example# 5146
open new_path file in _STR:0_ mode , with file descriptor renamed to new_file ,
1
'wb' ||| _STR:0_
example# 5147
write content to new_file file .
0
example# 5148
if self.verbosity [ self . verbosity ] is greater or equal to integer 2 ,
0
example# 5149
replace ' % s ' in string _STR:0_ with new_path , write it to the self.stdout [ self . stdout ] stream .
1
"Creating %s\n" ||| _STR:0_
example# 5150
try ,
0
example# 5151
call the function shutil.copymode [ shutil . copymode ] with arguments old_path and new_path .
0
example# 5152
call the method self.make_writeable [ self . make_writeable ] with an argument new_path .
0
example# 5153
if OSError exception is caught ,
0
example# 5154
replace ' % s ' in string _STR:0_ ,
1
"Notice: Couldn't set permission bits on %s. You're probably using an uncommon filesystem setup. No problem." ||| _STR:0_
example# 5155
with new_path and self.style.NOTICE [ self . style . NOTICE ] , respectively , write it to self.stderr [ self . stderr ] stream . if self.paths_to_remove [ self . paths_to_remove ] is true ,
0
example# 5156
if self.verbosity [ self . verbosity ] is greater or equal to integer 2 ,
0
example# 5157
write string _STR:0_ to self.stdout [ self . stdout ] stream .
1
"Cleaning up temporary files.\n" ||| _STR:0_
example# 5158
for every path_to_remove in self.paths_to_remove [ self . paths_to_remove ] ,
0
example# 5159
if path_to_remove is file ,
0
example# 5160
remove file path_to_remove ,
0
example# 5161
if not ,
0
example# 5162
call the function shutil.rmtree [ shutil . rmtree ] with 2 arguments : path_to_remove and onerror set to rmtree_errorhandler .
0
example# 5163
define the method handle_template with 3 arguments : self , template and subdir .
0
example# 5164
if template is None ,
0
example# 5165
join first element of django.__path__ [ django . __path__ ] , string _STR:0_ and subdir into a valid file path , return it .
1
'conf' ||| _STR:0_
example# 5166
if not ,
0
example# 5167
if template starts with a string _STR:0_ ,
1
'file://' ||| _STR:0_
example# 5168
remove first 7 elements form template .
0
example# 5169
call the method path.expanduser [ path . expanduser ] with an argument template , substitute it for expanded_template .
0
example# 5170
call the method path.normpath [ path . normpath ] with an argument expanded_template , substitute it for expanded_template .
0
example# 5171
if expanded_template is a directory ,
0
example# 5172
return expanded_template .
0
example# 5173
call the method self.is_url [ self . is_url ] with an argument template , if it evaluates to true ,
0
example# 5174
call the method self.download [ self . download ] with an argument template , substitute the result for absolute_path .
0
example# 5175
if not ,
0
example# 5176
get the absolute file path of the expanded_template , substitute it for absolute_path .
0
example# 5177
if file path absolute_path exists ,
0
example# 5178
call the method self.extract [ self . extract ] with an argument absolute_path , return the result .
0
example# 5179
raise an CommandError exception with an argument string _STR:0_ , replace ' % s ' with self.app_or_project [ self . app_or_project ] and template .
1
"couldn't handle %s template %s." ||| _STR:0_
example# 5180
define validate_name with 3 arguments : self , name and app_or_project .
0
example# 5181
if name is None ,
0
example# 5182
raise an CommandError exception with an argument string _STR:0_ , where ' % s ' is replaced with string _STR:1_ ,
2
"you must provide %s %s name" ||| _STR:0_
'an' ||| _STR:1_
example# 5183
and app_or_project if app_or_project equals to string _STR:0_ , if not , it is replaced with _STR:1_ and app_or_project . call the method re.search [ re . search ] with 2 arguments : raw string _STR:2_ and name , if it evaluates to false ,
3
'a' ||| _STR:1_
'^[_a-zA-Z]\w*$' ||| _STR:2_
'app' ||| _STR:0_
example# 5184
call the method re.search [ re . search ] with 2 arguments : raw string _STR:0_ and name , if it evaluates to false ,
1
'^[_a-zA-Z]' ||| _STR:0_
example# 5185
message is a string _STR:0_ .
1
'make sure the name begins with a letter or underscore' ||| _STR:0_
example# 5186
if not ,
0
example# 5187
message is a string _STR:0_ .
1
'use only numbers, letters and underscores' ||| _STR:0_
example# 5188
raise an CommandError with an argument string _STR:0_ , were _STR:1_ is replaced with name ,
2
'%r' ||| _STR:1_
"%r is not a valid %s name. Please %s." ||| _STR:0_
example# 5189
and ' % s ' is replaced with app_or_project and message , respectively . define the method download with arguments self and url .
0
example# 5190
define the function cleanup_url with an argument url .
0
example# 5191
strip url of surrounding _STR:0_ characters , substitute it for tmp .
1
'/' ||| _STR:0_
example# 5192
split tmp at _STR:0_ character , substitute the last element of the result for filename .
1
'/' ||| _STR:0_
example# 5193
if url ends with _STR:0_ character ,
1
'/' ||| _STR:0_
example# 5194
append _STR:0_ to tmp , substitute it for display_url .
1
'/' ||| _STR:0_
example# 5195
if not ,
0
example# 5196
substitute url for display_url .
0
example# 5197
return filename and display_url .
0
example# 5198
replace ' % s ' in string _STR:0_ with self.app_or_project [ self . app_or_project ] .
1
'django_%s_template_' ||| _STR:0_
example# 5199
call the function tempfile.mkdtemp [ tempfile . mkdtemp ] with arguments : prefix set to prefix and suffix set to string _STR:0_ .
1
'_download' ||| _STR:0_
example# 5200
append the tempdir to self.paths_to_remove [ self . paths_to_remove ] .
0
example# 5201
call the function cleanup_url with an argument url , assign the result to filename and display_url , respectively .
0
example# 5202
if self.verbosity [ self . verbosity ] is greater or equal to integer 2 ,
0
example# 5203
replace ' % s ' in string _STR:0_ , with display_url , write it to self.stdout [ self . stdout ] stream .
1
"Downloading %s\n" ||| _STR:0_
example# 5204
try ,
0
example# 5205
call the function urlretrieve with arguments url and tempdir and filename joined into a file path , assign the result to the_path , and info , respectively .
0
example# 5206
if IOErro , renamed to e , exception is caught ,
0
example# 5207
raise an CommandError exception with an argument string _STR:0_ , where ' % s ' is replaced with url ,
1
"couldn't download URL %s to %s: %s" ||| _STR:0_
example# 5208
filename and e. split the_path at the _STR:0_ character , substitute last element of the result for used_name .
1
'/' ||| _STR:0_
example# 5209
get the value under the _STR:0_ key of the info dictionary , substitute it for content_disposition .
1
'content-disposition' ||| _STR:0_
example# 5210
if content_disposition is true ,
0
example# 5211
call the method cgi.parse_header [ cgi . parse_header ] with an argument content_disposition , assign the result to _ and params , respectively .
0
example# 5212
get the value under the _STR:0_ key of the params dictionary , if the key exists substitute it for guessed_filename ,
1
'filename' ||| _STR:0_
example# 5213
if not , substitute used_name for guessed_filename . if not ,
0
example# 5214
substitute used_name for guessed_filename .
0
example# 5215
call the method self.splitext [ self . splitext ] with an argument guessed_filename , substitute the second element of the result for ext .
0
example# 5216
get the value under the _STR:0_ key of the info dictionary , substitute it for content_type .
1
'content-type' ||| _STR:0_
example# 5217
if ext is false and content_type is true ,
0
example# 5218
call the method mimetypes.guess_extension [ mimetypes . guess_extension ] with an argument content_type , substitute result for ext .
0
example# 5219
if ext is true ,
0
example# 5220
append ext to guessed_filename .
0
example# 5221
if used_name is not equal to guessed_filename ,
0
example# 5222
join tempdir and guessed_filename into a file path , substitute it for guessed_path .
0
example# 5223
call the function shutil.move [ shutil . move ] with arguments the_path and guessed_path .
0
example# 5224
return guessed_path .
0
example# 5225
return the_path .
0
example# 5226
define the method splitext with arguments self and the_path .
0
example# 5227
call the method posixpath.splitext [ posixpath . splitext ] with an argument the_path .
0
example# 5228
convert base to lowercase , if it ends with string _STR:0_ ,
1
'.tar' ||| _STR:0_
example# 5229
take last four elements of base and append ext to it , substitute result for ext .
0
example# 5230
substitute last four elements of base for base .
0
example# 5231
return base and ext .
0
example# 5232
define the function with arguments self and filename .
0
example# 5233
replace ' % s ' in string _STR:0_ with self.app_or_project [ self . app_or_project ] , substitute it for prefix .
1
'django_%s_template_' ||| _STR:0_
example# 5234
call the method tempfile.mkdtemp [ tempfile . mkdtemp ] with 2 arguments : prefix set to prefix , suffix set to string _STR:0_ , substitute the result for tempdir .
1
'_extract' ||| _STR:0_
example# 5235
append tempdir to self.self.paths_to_remove [ self . self . paths_to_remove ] .
0
example# 5236
if self.verbosity [ self . verbosity ] is greater or equal to integer 2 .
0
example# 5237
substitute ' % s ' in string _STR:0_ with filename , write it to self.stdout [ self . stdout ] stream .
1
"Extracting %s\n" ||| _STR:0_
example# 5238
try ,
0
example# 5239
call the method archive.extract [ archive . extract ] with arguments : filename and tempdir .
0
example# 5240
return tempdir .
0
example# 5241
if archive.ArchiveException [ archive . ArchiveException ] or IOError , renamed to e , exception are caught ,
0
example# 5242
raise an CommandError with an argument string _STR:0_ , where ' % s ' is replaced with filename , tempdir and e .
1
"couldn't extract file %s to %s: %s" ||| _STR:0_
example# 5243
define the method is_url with arguments self and template .
0
example# 5244
if character _STR:0_ is not contained in template ,
1
':' ||| _STR:0_
example# 5245
return boolean False .
0
example# 5246
split template once at the first character _STR:0_ , convert the first element to lowercase and substitute it for scheme .
1
':' ||| _STR:0_
example# 5247
if scheme is countaine in self.url_schemes [ self . url_schemes ] return boolean True , otherwise return False .
0
example# 5248
define the method make_writeable with arguments self and filename .
0
example# 5249
if sys.platform [ sys . platform ] starts with string _STR:0_ ,
1
'java' ||| _STR:0_
example# 5250
return nothing .
0
example# 5251
if call to the method os.access [ os . access ] with arguments : filename and os.W_OK [ os . W_OK ] , evaluates to false ,
0
example# 5252
call the function os.stat [ os . stat ] with an argument filename , substitute the result for st .
0
example# 5253
call the method stat.S_IMODE [ stat . S_IMODE ] with an argument st.st_mode [ st . st_mode ] , calculate binary OR with the result and stat.S_IWUSR [ stat . S_IWUSR ] , as operands ,
0
example# 5254
substitute the result for new_permission . call the function os.chmod [ os . chmod ] wiht arguments filename and new_permissions .
0
example# 5255
from __future__ import unicode_literals into default name space .
0
example# 5256
import module os .
0
example# 5257
from subprocess import PIPE and Popen into default name space .
0
example# 5258
import module sys .
0
example# 5259
from django.utils.encoding [ django . utils . encoding ] import force_text and DEFAULT_LOCALE_ENCODING into default name space .
0
example# 5260
from django.utils [ django . utils ] import six into default name space .
0
example# 5261
from .base import CommandError into default name space .
0
example# 5262
define the function popen_wrapper with 2 arguments : args and os_err_exc_type set to CommandError .
0
example# 5263
try ,
0
example# 5264
p is a instance of Popen class , created with 6 arguments : args , shell set to boolean False , stdout set to PIPE ,
0
example# 5265
stderr set to PIPE , close_fds set to boolean True is os.name [ os . name ] is not equal to _STR:0_ , universal_newlines set to boolean True . if OSError , renamed to e , exception is caught ,
1
'nt' ||| _STR:0_
example# 5266
call the force_text function with 3 arguments : e.strerror [ e . strerror ] , DEFAULT_LOCALE_ENCODING and strings_only set to boolean True .
0
example# 5267
call the method six.reraise [ six . reraise ] 3 with arguments : os_err_exc_type , return value of the function os_err_exc_type ,
0
example# 5268
called with string as an argument _STR:0_ , where ' % s ' is replaced by : first element of args and strerror , respective , and third element of the result of the function sys.exc_info [ sys . exc_info ] . call the method p.communicate [ p . communicate ] , assign the result to output and errors , respectively .
1
'Error executing %s: %s' ||| _STR:0_
example# 5269
return a tuple containing 3 entries : output , result of the function force_text , called with 3 arguments : errors ,
0
example# 5270
DEFAULT_LOCALE_ENCODING and strings_only set to boolean True and p.returncode [ p . returncode ] . define the function handle_extensions with 2 arguments : extensions set to tuple containing string _STR:0_ and ignored set to tuple containing string _STR:1_ .
2
'html' ||| _STR:0_
'py' ||| _STR:1_
example# 5271
ext_list is an empty list ,
0
example# 5272
for every ext in extensions ,
0
example# 5273
delete all the whitespaces from ext , split it by _STR:0_ character , extend ext_list with the result .
1
',' ||| _STR:0_
example# 5274
for every i and ext in enumerated iterable ext_list ,
0
example# 5275
if ext doesnt start with _STR:0_ character ,
1
'.' ||| _STR:0_
example# 5276
prepend _STR:0_ to the i-th element of the ext_list .
1
'.' ||| _STR:0_
example# 5277
if striped x by _STR:0_ character is not contained in ignored , for every x in ext_list put x into a set , return the resulting set .
1
'.' ||| _STR:0_
example# 5278
define the function find_command with 3 arguments : cmd , path set to None and pathext set to None .
0
example# 5279
if path is None ,
0
example# 5280
call the function os.environ.get [ os . environ . get ] with 2 arguments : string _STR:0_ and an empty string , split the result at the os.pathsep [ os . pathsep ] , substitute the result for path .
1
'PATH' ||| _STR:0_
example# 5281
if path is an instance of six.string_types [ six . string_types ] ,
0
example# 5282
path is an list containing path .
0
example# 5283
if pathext is None ,
0
example# 5284
call the method os.environ.get [ os . environ . get ] with 2 arguments : strings _STR:0_ and _STR:1_ , split the result at os.pathsep [ os . pathsep ] , substitute it for pathext .
2
'PATHEXT' ||| _STR:0_
'.COM;.EXE;.BAT;.CMD' ||| _STR:1_
example# 5285
for ext in pathext ,
0
example# 5286
if cmd ends with ext ,
0
example# 5287
pathext is an list containing an empty string .
0
example# 5288
break the loop execution .
0
example# 5289
for every p in path ,
0
example# 5290
join p and cmd into a file path , substitute it for f .
0
example# 5291
if f is a file ,
0
example# 5292
return f .
0
example# 5293
for every ext in pathext ,
0
example# 5294
add ext to f , substitute the result for fext .
0
example# 5295
if fext is a file ,
0
example# 5296
return fext .
0
example# 5297
return None .
0
example# 5298
import module collections .
0
example# 5299
from math import ceil into default name space .
0
example# 5300
from django.utils [ django . utils ] import six into default name space .
0
example# 5301
derive the class InvalidPage from the Exception base class .
0
example# 5302
do nothing .
0
example# 5303
derive the class PageNotAnInteger from the InvalidPage base class .
0
example# 5304
do nothing .
0
example# 5305
derive the class EmptyPage from the InvalidPage base class .
0
example# 5306
do nothing .
0
example# 5307
derive the class Paginator from the object base class .
0
example# 5308
def the method __init__ with 5 arguments : self , object_list , per_page , orphans set to integer 0 and allow_empty_first_page set to boolean True .
0
example# 5309
substitute object_list for self.object_list [ self . object_list ] .
0
example# 5310
convert per_page into an integer and substitute it for self.per_page [ self . per_page ] .
0
example# 5311
convert orphans into an integer and substitute it for self.orphans [ self . orphans ] .
0
example# 5312
substitute allow_empty_first_page for self.allow_empty_first_page [ self . allow_empty_first_page ] .
0
example# 5313
self._num_pages [ self . _num_pages ] and self._count [ self . _count ] are None .
0
example# 5314
define the method validate_number with self class instance and number as arguments .
0
example# 5315
try ,
0
example# 5316
convert number into an integer and substitute it for number
0
example# 5317
if TypeError or ValueError exceptions are caught ,
0
example# 5318
raise an exception PageNotAnInteger with string _STR:0_ as an argument .
1
'That page number is not an integer' ||| _STR:0_
example# 5319
if number is lesser than integer 1 ,
0
example# 5320
raise an EmptyPage exception with string _STR:0_ as an argument .
1
'That page number is less than 1' ||| _STR:0_
example# 5321
if number is greater than self.num_pages [ self . num_pages ] ,
0
example# 5322
if number equals a integer 1 and self.allow_empty_first_page [ self . allow_empty_first_page ] is true ,
0
example# 5323
do nothing .
0
example# 5324
if not ,
0
example# 5325
raise an EmptyPage exception with string _STR:0_ as an argument .
1
'That page contains no results' ||| _STR:0_
example# 5326
return number .
0
example# 5327
define the method page with self class instance and number as arguments .
0
example# 5328
call the method self.validate_number [ self . validate_number ] with an argument number , substitute it for number .
0
example# 5329
decrement number by one , multiply it with self.per_page [ self . per_page ] , substitute the result for bottom .
0
example# 5330
sum bottom and self.per_page [ self . per_page ] , substitute the result for top .
0
example# 5331
if sum of the top and self.orphans [ self . orphans ] is greater or equal to self.count [ self . count ] ,
0
example# 5332
substitute self.count [ self . count ] for top .
0
example# 5333
call the self._get_pages [ self . _get_pages ] method with 3 arguments : self.object_list [ self . object_list ] from the bottom to the top index , number and self , return the result .
0
example# 5334
define the method _get_page with self class instance , unpacked list args and unpacked dictionary kwargs as arguments .
0
example# 5335
return a instance of the class Page , created with 2 arguments : unpacked list args and unpacked dictionary kwargs .
0
example# 5336
define the method _get_count with an argument self .
0
example# 5337
if self._count [ self . _count ] is None ,
0
example# 5338
try ,
0
example# 5339
substitute the return value of the method self.object_list.count [ self . object_list . count ] for self._count [ self . _count ] .
0
example# 5340
if TypeError or AttributeError exceptions are caught ,
0
example# 5341
substitute length of self.object_list [ self . object_list ] for self._count [ self . _count ] .
0
example# 5342
return self._count [ self . _count ] .
0
example# 5343
count is a property object with _get_count as a getter method .
0
example# 5344
define the method _get_num_pages with an argument self .
0
example# 5345
if self._num_pages [ self . _num_pages ] is None ,
0
example# 5346
if self.count [ self . count ] equals a integer 0 and self.allow_empty_first_page [ self . allow_empty_first_page ] is false ,
0
example# 5347
self._num_pages [ self . _num_pages ] is a integer 0 .
0
example# 5348
if not ,
0
example# 5349
get greater value between integer 1 and result of subtraction of self.orphans [ self . orphans ] from self.count [ self . count ] , substitute it for hits .
0
example# 5350
divide hits by a floating point number self.per_page [ self . per_page ] , convert its ceiling value to an integer and substitute it for self._num_pages [ self . _num_pages ] .
0
example# 5351
return self._num_pages [ self . _num_pages ] .
0
example# 5352
num_pages is a property object with _get_num_pages as a getter method .
0
example# 5353
define the method _get_page_range with an argument self .
0
example# 5354
return all the integers from the integer 1 to the self.num_pages [ self . num_pages ] .
0
example# 5355
page_range is a property object with _get_page_range as a getter method .
0
example# 5356
substitute Paginator for QuerySetPaginator .
0
example# 5357
derive the class Page from the collections.Sequence [ collections . Sequence ] base class .
0
example# 5358
define the method __init__ with 4 arguments : self , object_list , number , and paginator .
0
example# 5359
substitute object_list for self.object_list [ self . object_list ] .
0
example# 5360
substitute number for self.number [ self . number ] .
0
example# 5361
substitute paginator for self.paginator [ self . paginator ] .
0
example# 5362
define the method __repr__ with an argument self .
0
example# 5363
return the string _STR:0_ , with occurrences of ' % s ' replaced by self.number [ self . number ] and self.paginator.num_pages [ self . paginator . num_pages ] , respectively .
1
'<Page %s of %s>' ||| _STR:0_
example# 5364
define the method __len__ with an argument self .
0
example# 5365
return the length of self.object_list [ self . object_list ] .
0
example# 5366
define the method __getitem__ with arguments self and index .
0
example# 5367
if index is not an instance of six.integer_types [ six . integer_types ] or tuple type ,
0
example# 5368
raise a TypeError exception ,
0
example# 5369
if self.object [ self . object ] is not an instance of list type ,
0
example# 5370
convert self.object_list [ self . object_list ] to a list .
0
example# 5371
return self.object_list [ self . object_list ] element at index .
0
example# 5372
define the method has_next with an argument self .
0
example# 5373
if self.number [ self . number ] is lesser than self.paginator.num_pages [ self . paginator . num_pages ] , return boolean True , otherwise return boolean False .
0
example# 5374
define the method has_previous with an argument self .
0
example# 5375
if self.number [ self . number ] is greater than integer 1 , return boolean True , otherwise return boolean False .
0
example# 5376
define the method has_other_pages with an argument self .
0
example# 5377
call the method self.has_previous [ self . has_previous ] , if it evaluate to false , call the self.has_next [ self . has_next ] method , return the result .
0
example# 5378
define the method next_page_number with an argument self .
0
example# 5379
call the method self.paginator.validate_number [ self . paginator . validate_number ] with self.number [ self . number ] incremented by 1 as argument , return the result .
0
example# 5380
define the method previous_page_number with an argument self .
0
example# 5381
call the method self.paginator.validate_number [ self . paginator . validate_number ] with self.number [ self . number ] decremented by 1 as argument , return the result .
0
example# 5382
define the method start_index with an argument self .
0
example# 5383
if self.paginator.count [ self . paginator . count ] equals a integer 0 ,
0
example# 5384
return integer 0 .
0
example# 5385
decrement self.number [ self . number ] by one , multiply it by self.paginator.per_page [ self . paginator . per_page ] , increment the result by one , return it .
0
example# 5386
define the method end_index with an argument self .
0
example# 5387
if self.number [ self . number ] equals to self.paginator.num_pages [ self . paginator . num_pages ] ,
0
example# 5388
return self.paginator.count [ self . paginator . count ] .
0
example# 5389
multiply self.number [ self . number ] and self.paginator.per_page [ self . paginator . per_page ] , return the result .
0
example# 5390
import module importlib .
0
example# 5391
from django.conf [ django . conf ] import settings into default name space .
0
example# 5392
from django.utils [ django . utils ] import six into default name space .
0
example# 5393
from django.core.serializers.base [ django . core . serializers . base ] import SerializerDoesNotExist into default name space .
0
example# 5394
BUILTIN_SERIALIZERS is a dictionary containing 4 inital entries : _STR:0_ for _STR:1_ ,
2
"django.core.serializers.xml_serializer" ||| _STR:0_
"xml" ||| _STR:1_
example# 5395
_STR:0_ for _STR:1_ , _STR:2_ for _STR:3_ , and _STR:4_ for _STR:5_ . _serializers is an empty dictionary .
6
"django.core.serializers.python" ||| _STR:0_
"django.core.serializers.pyyaml" ||| _STR:4_
"python" ||| _STR:1_
"yaml" ||| _STR:5_
"json" ||| _STR:3_
"django.core.serializers.json" ||| _STR:2_
example# 5396
derive the class BadSerializer from the object base class .
0
example# 5397
internal_use_only is boolean False .
0
example# 5398
define the __init__method with arguments self and exception .
0
example# 5399
substitute exception for self.exception [ self . exception ] .
0
example# 5400
define the __call__method with arguments self , unpacked list args and unpacked dictionary kwargs .
0
example# 5401
raise an self.exception [ self . exception ] exception .
0
example# 5402
define the function register_serializer with 3 arguments : format , serializer_module and serializers set to None .
0
example# 5403
if serializers is None and _serializers is false ,
0
example# 5404
call the function _load_serializers .
0
example# 5405
try ,
0
example# 5406
call the function importlib.import_module [ importlib . import_module ] with an argument serializer_module , substitute it for module .
0
example# 5407
if ImportError , renamed to exc , exception is caught ,
0
example# 5408
ba_serializer is a instance of BadSerializer class , created with an argument exc .
0
example# 5409
create a instance of a class BadSerializerModule from the object base class , with elements Deserializer set to bad_serializer and Serializer set to bad_serializer .
0
example# 5410
if serializers is None ,
0
example# 5411
substitute module for the value under the format key of the _serializers dictionary .
0
example# 5412
if not ,
0
example# 5413
substitute module for the value under the format key of the serializers dictionary .
0
example# 5414
define the function unregister_serializer with an argument format .
0
example# 5415
if _serializers is false ,
0
example# 5416
call the function _load_serializers .
0
example# 5417
if format is not contained in _serializers ,
0
example# 5418
raise a SerializerDoesNotExist exception with an argument format .
0
example# 5419
delete the _serializers dictionary entry at the format key .
0
example# 5420
define the function get_serializer with an argument format .
0
example# 5421
if _serializers is false ,
0
example# 5422
call the function _load_serializers .
0
example# 5423
if format is not contained in _serializers ,
0
example# 5424
raise a SerializerDoesNotExist exception with an argument format .
0
example# 5425
get the value under the format key of the _serializers dictionary , return the Serializer filed of the result .
0
example# 5426
define the function get_serializer_formats .
0
example# 5427
if _serializers is false ,
0
example# 5428
call the function _load_serializers .
0
example# 5429
convert _serializers into a list , return it .
0
example# 5430
define the function get_public_serializer_formats .
0
example# 5431
f _serializers is false ,
0
example# 5432
call the function _load_serializers .
0
example# 5433
append k into a list for every k and v in return value of the six.iteritems [ six . iteritems ] function with an argument _serializers ,
0
example# 5434
only if v.Serializer.internal_use_only [ v . Serializer . internal_use_only ] is false , return the resulting list . define the function get_deserializer with an argument format .
0
example# 5435
f _serializers is false ,
0
example# 5436
call the function _load_serializers .
0
example# 5437
if format is not contained in _serializers ,
0
example# 5438
raise a SerializerDoesNotExist exception with an argument format .
0
example# 5439
get the value under the format key of the _serializers dictionary , return the Deserializer filed of the result .
0
example# 5440
define the function serializer with 3 arguments : format , queryset and unpacked dictionary options .
0
example# 5441
call the get_serializer function with an argument format , call the return value object and substitute it for s .
0
example# 5442
call the s.serialize [ s . serialize ] method with arguments queryset and unpacked dictionary options .
0
example# 5443
evaluate the method s.getvalue [ s . getvalue ] , return the result .
0
example# 5444
define the function deserialize with 3 arguments : format , stream_or_string and unpacked dictionary options .
0
example# 5445
call the get_deserializer function with an argument format , substitute the result for d .
0
example# 5446
call the object d with arguments stream_or_string and unpacked dictionary options , return the result .
0
example# 5447
define the function _load_serializers .
0
example# 5448
use the global variable _serializers .
0
example# 5449
serializers is an empty dictionary .
0
example# 5450
for every format in BUILTIN_SERIALIZERS ,
0
example# 5451
call the function register_serializer with 3 arguments : format , value under the format key of the BUILTIN_SERIALIZERS dictionary and serializers .
0
example# 5452
if setting has an _STR:0_ attribute ,
1
"SERIALIZATION_MODULES" ||| _STR:0_
example# 5453
for every format in settings.SERIALIZATION_MODULES [ settings . SERIALIZATION_MODULES ] ,
0
example# 5454
call the function register_serializer with 3 arguments : format , value under the format key of the settings.SERIALIZATION_MODULES [ settings . SERIALIZATION_MODULES ] dictionary and serializers .
0
example# 5455
substitute serializers for _serializers .
0
example# 5456
import module warnings .
0
example# 5457
from django.db [ django . db ] import models into default name space .
0
example# 5458
from django.utils [ django . utils ] import six into default name space .
0
example# 5459
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
0
example# 5460
derive the class SerializerDoesNotExist from the KeyError base class .
0
example# 5461
do nothing .
0
example# 5462
derive the class SerializationError from the Exception base class .
0
example# 5463
do nothing .
0
example# 5464
derive the class DeserializationError from the Exception base class .
0
example# 5465
do nothing .
0
example# 5466
derive the class Serializer from the object base class .
0
example# 5467
internal_use_only is a boolean False .
0
example# 5468
define the method serialize with 3 arguments : self , queryset and unpacked dictionary options .
0
example# 5469
substitute options for self.options [ self . options ] .
0
example# 5470
remove the _STR:0_ key from the options dictionary and substitute it for self.stream [ self . stream ] ,
1
'stream' ||| _STR:0_
example# 5471
if the key doesnt exists call the six.String [ six . String ] function and substitute the result for self.stream [ self . stream ] . remove the _STR:0_ key from the options dictionary and substitute it for self.selected_fields [ self . selected_fields ] ,
1
'fields' ||| _STR:0_
example# 5472
if the key doesnt exists substitute None for self.selected_fields [ self . selected_fields ] . remove the _STR:0_ key from the options dictionary and substitute it for self.use_natural_keys [ self . use_natural_keys ] ,
1
'use_natural_keys' ||| _STR:0_
example# 5473
if the key doesnt exists substitute boolean False for self.use_natural_keys [ self . use_natural_keys ] . if self.use_natural_keys [ self . use_natural_keys ] is true ,
0
example# 5474
call the function warnings.warn [ warnings . warn ] with 2 arguments : string _STR:0_ and RemovedInDjango19Warning .
1
"``use_natural_keys`` is deprecated; use ``use_natural_foreign_keys`` instead." ||| _STR:0_
example# 5475
remove the _STR:0_ key from the options dictionary and substitute it for self.use_natural_foreign_keys [ self . use_natural_foreign_keys ] ,
1
'use_natural_primary_keys' ||| _STR:0_
example# 5476
if the key doesnt exists substitute self.use_natural_keys [ self . use_natural_keys ] for self.use_natural_foreign_keys [ self . use_natural_foreign_keys ] . remove the _STR:0_ key from the options dictionary and substitute it for self.use_natural_primary_keys [ self . use_natural_primary_keys ] ,
1
'use_natural_primary_keys' ||| _STR:0_
example# 5477
if the key doesnt exists substitute boolean False for self.use_natural_primary_keys [ self . use_natural_primary_keys ] . call the method self.start_serialization [ self . start_serialization ]
0
example# 5478
self.first [ self . first ] is boolean True .
0
example# 5479
for every obj in queryset ,
0
example# 5480
call the self.start_object [ self . start_object ] with an argument obj .
0
example# 5481
substitute obj._meta.concrete_model [ obj . _meta . concrete_model ] for concrete_model .
0
example# 5482
for every field in concrete_model._meta.local_fields [ concrete_model . _meta . local_fields ] ,
0
example# 5483
if field.serialize [ field . serialize ] is true ,
0
example# 5484
if field.rel [ field . rel ] is None ,
0
example# 5485
if self.selected_fields [ self . selected_fields ] is None or field.attname [ field . attname ] is contained in self.selected_fields [ self . selected_fields ]
0
example# 5486
call the method self.handle_field [ self . handle_field ] with arguments obj and filed .
0
example# 5487
if not ,
0
example# 5488
if self.selected_fields [ self . selected_fields ] is None or last three elements of field.attname [ field . attname ] are contained in self.selected_fields [ self . selected_fields ] :
0
example# 5489
call the method self.handle_fk_field [ self . handle_fk_field ] with arguments obj and field .
0
example# 5490
for every field in concrete_model._meta.many_to_many [ concrete_model . _meta . many_to_many ] ,
0
example# 5491
if field.serialize [ field . serialize ] is true ,
0
example# 5492
if self.selected_fields [ self . selected_fields ] is None or field.attname [ field . attname ] is contained in self.selected_fields [ self . selected_fields ] ,
0
example# 5493
call the method self.handle_m2m_field [ self . handle_m2m_field ] with arguments obj and filed .
0
example# 5494
call the method self.end_object [ self . end_object ] with an argument obj .
0
example# 5495
if self.first [ self . first ] is true ,
0
example# 5496
self.first [ self . first ] is boolean False .
0
example# 5497
call the method self.end_serialization [ self . end_serialization ] .
0
example# 5498
call the method self.getvalue [ self . getvalue ] , return the result .
0
example# 5499
define the method start_serialization with an argument self .
0
example# 5500
raise a NotImplementedError with an argument string _STR:0_ .
1
'subclasses of Serializer must provide a start_serialization() method' ||| _STR:0_
example# 5501
define the method end_serialization with an argument self .
0
example# 5502
do nothing .
0
example# 5503
define the method start_object with argument self and obj .
0
example# 5504
raise a NotImplementedError with an argument string _STR:0_ .
1
'subclasses of Serializer must provide a start_object() method' ||| _STR:0_
example# 5505
define the method end_object with argument self and obj .
0
example# 5506
do nothing .
0
example# 5507
define the method handle_field with argument self , obj and field .
0
example# 5508
raise a NotImplementedError with an argument string
0
example# 5509
define the method handle_fk_field with argument self , obj and field .
0
example# 5510
raise a NotImplementedError with an argument string
0
example# 5511
define the method handle_m2m_field with argument self , obj and field .
0
example# 5512
raise a NotImplementedError with an argument string _STR:0_ .
1
'subclasses of Serializer must provide an handle_m2m_field() method' ||| _STR:0_
example# 5513
define the method getvalue with an argument self .
0
example# 5514
get _STR:0_ attribute of the self.stream [ self . stream ] object , if it exists and is callable ,
1
'getvalue' ||| _STR:0_
example# 5515
evaluate self.stream.getvalue [ self . stream . getvalue ] method , return the result .
0
example# 5516
derive the class Deserializer from the six.Iterator [ six . Iterator ] base class .
0
example# 5517
define the method __init__ , with 3 arguments : self , stream_or_string and unpacked dictionary options .
0
example# 5518
substitute options for self.options [ self . options ] .
0
example# 5519
if stream_or_string is an instance of six.string_types [ six . string_types ] type .
0
example# 5520
call the function six.StringIO [ six . StringIO ] with an argument stream_or_string , substitute the result for self.stream [ self . stream ] .
0
example# 5521
if not ,
0
example# 5522
substitute stream_or_string for self.stream [ self . stream ] .
0
example# 5523
define the method __iter__ with an argument self .
0
example# 5524
return self .
0
example# 5525
define the method __next__ with an argument self .
0
example# 5526
raise a NotImplementedError with an argument string _STR:0_ .
1
'subclasses of Deserializer must provide a __next__() method' ||| _STR:0_
example# 5527
derive the class DeserializedObject from the object base class .
0
example# 5528
define the method __init__ , with 3 arguments : self , m2m and data set None .
0
example# 5529
substitute obj for self.object [ self . object ] .
0
example# 5530
substitute m2m_data for self.m2m_data [ self . m2m_data ] .
0
example# 5531
define the method __repr__ with an argument self .
0
example# 5532
return a string _STR:0_ , where ' % s ' are replaced with self.object._meta.app_label [ self . object . _meta . app_label ] ,
1
"<DeserializedObject: %s.%s(pk=%s)>" ||| _STR:0_
example# 5533
self.object._meta.object_name [ self . object . _meta . object_name ] and self.object.pk [ self . object . pk ] , respectively . define the method save , with 3 arguments : self , save_m2m set to boolean True and using set to boolean True .
0
example# 5534
call the models.Model.save_base [ models . Model . save_base ] method with arguments self.object [ self . object ] , using as using and raw set to boolean True .
0
example# 5535
if self.m2m.data [ self . m2m . data ] and save_m2m are true ,
0
example# 5536
for every accessor_name and object_list is return value of the method self.m2m_data.items [ self . m2m_data . items ] .
0
example# 5537
set accessor_name of the self.object [ self . object ] to object_list .
0
example# 5538
self.m2m_data [ self . m2m_data ] is None .
0
example# 5539
define the function build_instance with 3 arguments : Model , data and db .
0
example# 5540
obj is an instance of Model class , created with an unpacked dictionary data as argument .
0
example# 5541
if obj.pk [ obj . pk ] is None , and Model has an _STR:0_ attribute , and Model._default_manager [ Model . _default_manager ] has and _STR:1_ ,
2
'natural_key' ||| _STR:0_
'get_by_natural_key' ||| _STR:1_
example# 5542
call the method obj.natural_key [ obj . natural_key ] , substitute the result for natural_key .
0
example# 5543
try ,
0
example# 5544
call the method Model._default_manager.db_manager [ Model . _default_manager . db_manager ] with an argument db , on the result call the get_by_natural_key with ,
0
example# 5545
an unpacked list natural_key as argument , substitute the pk filed of the resulting object for obj.pk [ obj . pk ] . if Model.DoesNotExist [ Model . DoesNotExist ] exception is caught ,
0
example# 5546
do nothing .
0
example# 5547
return obj .
0
example# 5548
from __future__ import absolute_import into default name space .
0
example# 5549
from __future__ import unicode_literals into default name space .
0
example# 5550
import module datetime .
0
example# 5551
import module decimal .
0
example# 5552
import module json .
0
example# 5553
import module sys .
0
example# 5554
from django.core.serializers.base [ django . core . serializers . base ] import DeserializationError into default name space .
0
example# 5555
from django.core.serializers.python [ django . core . serializers . python ] import Serializer as PythonSerializer into default name space .
0
example# 5556
from django.core.serializers.python [ django . core . serializers . python ] import Deserializer as PythonDeserializer into default name space .
0
example# 5557
from django.utils [ django . utils ] import six into default name space .
0
example# 5558
from django.utils.timezone [ django . utils . timezone ] import is_aware into default name space .
0
example# 5559
define the class Serializer from the PythonSerializer base class .
0
example# 5560
internal_use_only is boolean False .
0
example# 5561
define the method start_serialization with an argument self .
0
example# 5562
call the method json.__version__.split [ json . __version__ . split ] with an argument _STR:0_ , if the result is respectively greater than list containing strings _STR:1_ , _STR:2_ and _STR:3_ ,
4
'1' ||| _STR:2_
'2' ||| _STR:1_
'.' ||| _STR:0_
'3' ||| _STR:3_
example# 5563
call the method self.options.update [ self . options . update ] with dictionary as an argument , containing 1 element : boolean False for _STR:0_ .
1
'use_decimal' ||| _STR:0_
example# 5564
self._current [ self . _current ] is None .
0
example# 5565
call the method self.options.copy [ self . options . copy ] , substitute the result for self.json_kwargs [ self . json_kwargs ] .
0
example# 5566
remove the entry under the _STR:0_ key of the self.json_kwargs [ self . json_kwargs ] dictionary .
1
'stream' ||| _STR:0_
example# 5567
remove the entry under the _STR:0_ key of the self.json_kwargs [ self . json_kwargs ] dictionary .
1
'fields' ||| _STR:0_
example# 5568
get the value under the _STR:0_ key of self.options [ self . options ] dictionary , if it is true ,
1
'indent' ||| _STR:0_
example# 5569
substitute a tuple with 2 elements : characters _STR:0_ and _STR:1_ for value under the _STR:2_ key of the self.json_kwargs [ self . json_kwargs ] dictionary .
3
': ' ||| _STR:1_
'separators' ||| _STR:2_
',' ||| _STR:0_
example# 5570
write a _STR:0_ to the self.stream [ self . stream ] file stream .
1
'[' ||| _STR:0_
example# 5571
define the method end_serialization with an argument self .
0
example# 5572
if value under the _STR:0_ key of the self.options [ self . options ] dictionary is true ,
1
'indent' ||| _STR:0_
example# 5573
write a new line to the self.stream [ self . stream ] file stream .
0
example# 5574
write _STR:0_ to the self.stream [ self . stream ] file stream .
1
']' ||| _STR:0_
example# 5575
if value under the _STR:0_ key of the self.options [ self . options ] dictionary is true ,
1
'indent' ||| _STR:0_
example# 5576
write a new line to the self.stream [ self . stream ] file stream .
0
example# 5577
define the method end_object with arguments self and obj .
0
example# 5578
get the value under the _STR:0_ key of the self.options [ self . options ] dictionary , substitute it for indent .
1
'indent' ||| _STR:0_
example# 5579
if self.first [ self . first ] is false ,
0
example# 5580
write _STR:0_ to the self.stream [ self . stream ] file stream .
1
',' ||| _STR:0_
example# 5581
if indent is false ,
0
example# 5582
write a white space to the self.stream [ self . stream ] file stream .
0
example# 5583
if indent is true ,
0
example# 5584
write new line to the self.stream [ self . stream ] file stream .
0
example# 5585
call the json.dump [ json . dump ] function with 4 arguments : return value of the method self.get_dump_object [ self . get_dump_object ] called with an argument obj , self.stream [ self . stream ] , cls set to DjangoJSONEncoder and unpacked dictionary self.json_kwargs [ self . json_kwargs ] .
0
example# 5586
self._current [ self . _current ] is None .
0
example# 5587
define the method getvalue with an argument self .
0
example# 5588
call the getvalue method from the base class of the class PythonSerializer , return the result .
0
example# 5589
define the function Deserializer with arguments stream_or_string and unpacked dictionary options .
0
example# 5590
if stream_or_string is not an instance of bytes or six.string_types [ six . string_types ] ,
0
example# 5591
call the stream_or_string.read [ stream_or_string . read ] function , substitute the result for stream_or_string .
0
example# 5592
if stream_or_string is instance of bytes type ,
0
example# 5593
call the method stream_or_string.decode [ stream_or_string . decode ] with an argument string _STR:0_ , substitute the result for stream_or_string .
1
'utf-8' ||| _STR:0_
example# 5594
try ,
0
example# 5595
call the function json.loads [ json . loads ] with an argument stream_or_string , substitute the result for objects .
0
example# 5596
for every obj in PythonDeserializer called with arguments objects and unpacked dictionary options ,
0
example# 5597
yield obj as generator return value ,
0
example# 5598
if GeneratorExit exception is caught ,
0
example# 5599
raise an exception ,
0
example# 5600
if Exception , renamed to e , exception is caught ,
0
example# 5601
call the six.reraise [ six . reraise ] function with 3 arguments : DeserializationError , DeserializationError called with an argument e ,
0
example# 5602
third element of the return value of the function sys.exc_info [ sys . exc_info ] . define the class DjangoJSONEncoder from the json.JSONEncoder [ json . JSONEncoder ] base class .
0
example# 5603
define the method defalt with arguments self and o .
0
example# 5604
if o is an instance of datetime.datetime [ datetime . datetime ] object .
0
example# 5605
call the method o.isoformat [ o . isoformat ] substitute the result for r .
0
example# 5606
if o.microsecond [ o . microsecond ] is true ,
0
example# 5607
remove 3 elements from r starting at the index 23 .
0
example# 5608
if r ends with string _STR:0_ ,
1
'+00:00' ||| _STR:0_
example# 5609
cut the last 6 elemetns from r , append character _STR:0_ to it , substitute the result for r .
1
'Z' ||| _STR:0_
example# 5610
return r .
0
example# 5611
otherwise if o is an instance of datetime.date [ datetime . date ] object ,
0
example# 5612
call the method o.isoformat [ o . isoformat ] , return the result .
0
example# 5613
otherwise if o is an instance of datetime.time [ datetime . time ] object ,
0
example# 5614
call the function is_aware with an argument o , if it evaluates to true ,
0
example# 5615
raise a ValueError exception with an argument string _STR:0_ .
1
"JSON can't represent timezone-aware times." ||| _STR:0_
example# 5616
call the method o.isoformat [ o . isoformat ] substitute the result for r .
0
example# 5617
if o.microsecond [ o . microsecond ] is true ,
0
example# 5618
substitute first 12 elements of r for r .
0
example# 5619
return r .
0
example# 5620
otherwise if o is an instance of decimal.Decimal [ decimal . Decimal ] object ,
0
example# 5621
convert o to an string , return it .
0
example# 5622
if not ,
0
example# 5623
call the method default with an argument o from the base class of the class DjangoJSONEncoder , return the result .
0
example# 5624
substitute DjangoJSONEncoder for DateTimeAwareJSONEncoder .
0
example# 5625
from __future__ import unicode_literals into default name space .
0
example# 5626
from django.apps [ django . apps ] import apps into default name space .
0
example# 5627
from django.conf [ django . conf ] import settings into default name space .
0
example# 5628
from django.core.serializers [ django . core . serializers ] import base into default name space .
0
example# 5629
from django.db [ django . db ] import models and DEFAULT_DB_ALIAS into default name space .
0
example# 5630
from django.utils.encoding [ django . utils . encoding ] import smart_text and is_protected_type into default name space .
0
example# 5631
from django.utils [ django . utils ] import six into default name space .
0
example# 5632
derive Serializer from the base.Serializer [ base . Serializer ] base class .
0
example# 5633
internal_use_only is boolean True .
0
example# 5634
define the method start_serialization with an argument self .
0
example# 5635
self._current [ self . _current ] is None .
0
example# 5636
self.objects [ self . objects ] is an empty list .
0
example# 5637
define the method end_serialization with an argument self .
0
example# 5638
do nothing .
0
example# 5639
define the method start_object with arguments self and obj .
0
example# 5640
self.current [ self . current ] is an empty dictionary .
0
example# 5641
define the method end_object with arguments self and obj .
0
example# 5642
call the self.get_dum_object [ self . get_dum_object ] method with an argument obj , use the result as an argument for the self.objects.append [ self . objects . append ] method .
0
example# 5643
self._current [ self . _current ] is None .
0
example# 5644
define the method get_dump_object with arguments self and obj .
0
example# 5645
data is an dictionary with 2 initial entries : return value of the smart_text function with the argument obj._meta [ obj . _meta ] for _STR:0_ ,
1
'model' ||| _STR:0_
example# 5646
and self._current [ self . _current ] for _STR:0_ . if self.use_natural_primary_keys [ self . use_natural_primary_keys ] is false or obj doesnt have a _STR:1_ attribute .
2
'natural_key' ||| _STR:1_
'fields' ||| _STR:0_
example# 5647
call the smart_text function with 2 arguments : return value of the obj._get_pk_val [ obj . _get_pk_val ] function and string_only set to boolean True ,
0
example# 5648
substitute it for value under the _STR:0_ key of data dictionary . return data .
1
'pk' ||| _STR:0_
example# 5649
define handle_field method with self , obj and field arguments .
0
example# 5650
call the method field._get_val_from_obj [ field . _get_val_from_obj ] with obj argument , substitute the result for value .
0
example# 5651
call the function is_protected_type with an argument value , if it evaluates to true ,
0
example# 5652
substitute value for field.name [ field . name ] key of self._current [ self . _current ] dictionary .
0
example# 5653
if not ,
0
example# 5654
call the function field.value_to_string [ field . value_to_string ] with an argument obj , substitute the result for value under the field.name [ field . name ] key of self._current [ self . _current ] dictionary .
0
example# 5655
define the method handle_fk_field with self , obj and field arguments .
0
example# 5656
if self.use_natural_foreign_keys [ self . use_natural_foreign_keys ] is true and field.rel.to [ field . rel . to ] has an _STR:0_ attribute .
1
'natural_key' ||| _STR:0_
example# 5657
get field.name [ field . name ] from the obj , substitute it for related .
0
example# 5658
if related is true ,
0
example# 5659
call the method related.natural_key [ related . natural_key ] , substitute the result for value .
0
example# 5660
if not ,
0
example# 5661
value is None .
0
example# 5662
if not ,
0
example# 5663
get return value of the field.get_attname [ field . get_attname ] function attribute of the obj object , substitute it for value .
0
example# 5664
substitute value for value under the field.name [ field . name ] key of the self._current [ self . _current ] dictionary .
0
example# 5665
define the method handle_m2m_field with self , obj and field arguments .
0
example# 5666
if field.rel.through._meta.auto_created [ field . rel . through . _meta . auto_created ] is true ,
0
example# 5667
if self.use_natural_foreign_keys [ self . use_natural_foreign_keys ] is true and field.rel.to [ field . rel . to ] has an _STR:0_ attribute ,
1
'natural_key' ||| _STR:0_
example# 5668
m2m_value is an lambda function with value as an argument , return value is the result of the method value.natural_key [ value . natural_key ] .
0
example# 5669
if not ,
0
example# 5670
m2m_value is a lambda function with an argument value , return value is the result of the function smart_text called with arguments :
0
example# 5671
return value of the value._get_pk_val [ value . _get_pk_val ] method and strings_only set to boolean True . call the function m2m_value with the argument related , for every related in itterator object generated from the attribute field.name [ field . name ] ,
0
example# 5672
of the obj object , append the results in a list , substitute it for value under the field.name [ field . name ] key of the self._current [ self . _current ] dictionary . define the method getvalue with an argument self .
0
example# 5673
return self.objects [ self . objects ] .
0
example# 5674
define the function Deserializer with arguments object_list and unpacked dictionary options .
0
example# 5675
remove the value under the _STR:0_ key from the options dictionary , assign it to the db , if the entry doesnt exists ,
1
'using' ||| _STR:0_
example# 5676
substitute DEFAULT_DB_ALIAS for db . remove the value under the _STR:0_ key from the options dictionary , assign it to the ignore , if the entry doesnt exists ,
1
'ignorenonexistent' ||| _STR:0_
example# 5677
substitute boolean False for ignore . for every d in object_list ,
0
example# 5678
try ,
0
example# 5679
call the function _get_model with an argument value under the _STR:0_ key of the d dictionary , substitute the result for Model .
1
'model' ||| _STR:0_
example# 5680
if base.DeserializationError [ base . DeserializationError ] exception is caught ,
0
example# 5681
if ignore is true ,
0
example# 5682
skip this loop iteration ,
0
example# 5683
if not ,
0
example# 5684
raise an exception .
0
example# 5685
data is an empty dictionary ,
0
example# 5686
if _STR:0_ is contained in d ,
1
'pk' ||| _STR:0_
example# 5687
call the method Model._meta.pk.to_python [ Model . _meta . pk . to_python ] with one argument : value under the _STR:0_ key of dictionary d , or None if previous doesnt exists ,
1
'pk' ||| _STR:0_
example# 5688
substitute the result for the value under the Model._meta.pk.attname [ Model . _meta . pk . attname ] key of data dictionary . m2m_data is an empty dictionary .
0
example# 5689
call the method Model._meta.get_all_field_names [ Model . _meta . get_all_field_names ] , substitute the result for model_fields .
0
example# 5690
for every field_name and field_value in return value of the function six.iteritems [ six . iteritems ] called with value under the _STR:0_ key of dictionary d ,
1
'fields' ||| _STR:0_
example# 5691
if ignore is true and field_name is not contained in model_fields ,
0
example# 5692
skip this loop iteration ,
0
example# 5693
if field_value is an instance of the str type ,
0
example# 5694
call the smart_text function with 3 arguments : field_value , value under the _STR:0_ key of the options dictionary or ,
1
'encoding' ||| _STR:0_
example# 5695
settings.DEFAULT_CHARSET [ settings . DEFAULT_CHARSET ] if the key doesnt exists and strings_only set to boolean True . call the Model._meta.get_field [ Model . _meta . get_field ] method with an argument field_name , substitute the result for field .
0
example# 5696
if field.rel [ field . rel ] is true , and field.rel [ field . rel ] is an instance of models.ManyToManyRel [ models . ManyToManyRel ] ,
0
example# 5697
if field.rel.to._default_manager [ field . rel . to . _default_manager ] has an attribute _STR:0_ ,
1
'get_by_natural_key' ||| _STR:0_
example# 5698
define the function m2m_convert with an argument value .
0
example# 5699
if value has an attribute _STR:0_ and value is not an instance of six.text_type [ six . text_type ] ,
1
'__iter__' ||| _STR:0_
example# 5700
call the method field.rel.to._default_manager.db_manager [ field . rel . to . _default_manager . db_manager ] with an argument db on the return value call the method get_by_natural_key ,
0
example# 5701
with unpacked list value as an argument , return the pk field of the result . if not ,
0
example# 5702
call the method field.rel.to._meta.pk.to_python [ field . rel . to . _meta . pk . to_python ] with an argument value , use the result as an argument for the call to the ,
0
example# 5703
smart_text function , return the result . if not ,
0
example# 5704
m2m_convert is a lambda function with an argument v , return value is the result of the function smart_text called with an argument :
0
example# 5705
return value of the method field.rel.to._meta.pk.to_python [ field . rel . to . _meta . pk . to_python ] called with an argument v. call the m2m_convert function with pk as argument , for every pk in field_value , substitute the value under the field.name [ field . name ] key of the m2m_data dictionary .
0
example# 5706
otherwise if field.rel [ field . rel ] is true and field.rel [ field . rel ] is an instance of the models.ManyToOneRel [ models . ManyToOneRel ] object ,
0
example# 5707
if field_value is not None ,
0
example# 5708
if field.rel.to._default_manager [ field . rel . to . _default_manager ] has an _STR:0_ attribute ,
1
'get_by_natural_key' ||| _STR:0_
example# 5709
if field_value has an attribute _STR:0_ and is not an instance of six.text_type [ six . text_type ] object ,
1
'__iter__' ||| _STR:0_
example# 5710
call the method field.rel.to._default_manager.db_manager [ field . rel . to . _default_manager . db_manager ] with db as argument , call the get_by_natural_key method on the result with ,
0
example# 5711
unpacked list field_value as an argument , substitute the result for obj . get field.rel.field_name [ field . rel . field_name ] attribute of the object obj , substitute it for value .
0
example# 5712
if field.rel.to._meta.pk.rel [ field . rel . to . _meta . pk . rel ] is true ,
0
example# 5713
substitute value.pk [ value . pk ] for value .
0
example# 5714
if not ,
0
example# 5715
all the method field.rel.to._meta.get_field [ field . rel . to . _meta . get_field ] with field.rel.field_name [ field . rel . field_name ] as argument , call the to_python method on the result with ,
0
example# 5716
unpacked list field_value as an argument , substitute the result for value . substitute value for value under the field.attname [ field . attname ] key of the data dictionary .
0
example# 5717
if not ,
0
example# 5718
all the method field.rel.to._meta.get_field [ field . rel . to . _meta . get_field ] with field.rel.field_name [ field . rel . field_name ] as argument , call the to_python method on the result with ,
0
example# 5719
unpacked list field_value as an argument , substitute the result for value of under the field.attname [ field . attname ] key of the data dictionary . if not ,
0
example# 5720
value under the field.attname [ field . attname ] key of the data dictionary is None .
0
example# 5721
if not ,
0
example# 5722
call the field.to_python [ field . to_python ] method with field_value , substitute the result for field.name [ field . name ] key of the data dictionary .
0
example# 5723
call the method base.build_instance [ base . build_instance ] with arguments Model , data and db , substitute the result for obj .
0
example# 5724
call the function base.DeserializedObject [ base . DeserializedObject ] with obj and m2m_data as arguments , yield the result as the generator return value .
0
example# 5725
define the function _get_model with an argument model_identifier .
0
example# 5726
try ,
0
example# 5727
call the method apps.get_model [ apps . get_model ] with an argument model_identifier .
0
example# 5728
if LookupError or TypeError exceptions are caught ,
0
example# 5729
raise an base.DeserializationError [ base . DeserializationError ] exception with an argument string _STR:0_ , where ' % s ' is replaced with model_identifier .
1
"Invalid model identifier: '%s'" ||| _STR:0_
example# 5730
import module decimal .
0
example# 5731
import module yaml .
0
example# 5732
import module sys .
0
example# 5733
from io import StringIO into default name space .
0
example# 5734
from django.db [ django . db ] import models into default name space .
0
example# 5735
from django.core.serializers.base [ django . core . serializers . base ] import DeserializationError into default name space .
0
example# 5736
from django.core.serializers.python [ django . core . serializers . python ] import Serializer as PythonSerializer into default name space .
0
example# 5737
from django.core.serializers.python [ django . core . serializers . python ] import Deserializer as PythonDeserializer into default name space .
0
example# 5738
from django.utils [ django . utils ] import six into default name space .
0
example# 5739
try ,
0
example# 5740
from yaml import CSafeLoader as SafeLoader into default name space .
0
example# 5741
yaml import CSafeDumper as SafeDumper into default name space .
0
example# 5742
if ImportError exception is caught ,
0
example# 5743
from yaml import SafeLoader , SafeDumper into default name space .
0
example# 5744
derive the class DjangoSafeDumper from the SafeDumper base class .
0
example# 5745
define the method represent_decimal with arguments self and data .
0
example# 5746
call the method self.represent_scalar [ self . represent_scalar ] with 2 arguments : string _STR:0_ and data converted into a string , return the result .
1
'tag:yaml.org,2002:str' ||| _STR:0_
example# 5747
call the method DjangoSafeDumper.add_representer [ DjangoSafeDumper . add_representer ] with arguments decimal.Decimal [ decimal . Decimal ] and DjangoSafeDumper.represent_decimal [ DjangoSafeDumper . represent_decimal ] .
0
example# 5748
derive the class Serializer from the PythonSerializer base class .
0
example# 5749
internal_use_only is a boolean False .
0
example# 5750
define the method handle_field with arguments self , obj and field .
0
example# 5751
if field is an instance of models.TimeField [ models . TimeField ] and filed.name [ filed . name ] attribute of obj is not None ,
0
example# 5752
get field.name [ field . name ] attribute of obj , convert it to a string , substitute it for the value under the filed.name [ filed . name ] key of self._current [ self . _current ] dictionary .
0
example# 5753
if not ,
0
example# 5754
call the handle_filed method of the base class of the Serializer class , with arguments obj and field .
0
example# 5755
define the method end_serialization with an argument self .
0
example# 5756
call the function yaml.dump [ yaml . dump ] with 4 arguments : self.objects [ self . objects ] , self.stream [ self . stream ] , Dumper=DjangoSafeDumper and unpacked dictionary self.options [ self . options ] .
0
example# 5757
define the method getvalue with an argument self .
0
example# 5758
call the getvalue method of the base class of the PythonSerializer class , return the result .
0
example# 5759
define the function Deserializer with 2 arguments : stream_or_string and unpacked dictionary options .
0
example# 5760
if stream_or_string is an instance of bytes ,
0
example# 5761
call the method stream_or_string.decode [ stream_or_string . decode ] with string _STR:0_ as argument , substitute the result for stream_or_string .
1
'utf-8' ||| _STR:0_
example# 5762
if stream_or_string is an instance of the six.string_types [ six . string_types ] ,
0
example# 5763
call the function StringIO with an argument stream_or_string , substitute the result for stream .
0
example# 5764
if not ,
0
example# 5765
substitute stream_or_string for stream .
0
example# 5766
try ,
0
example# 5767
for every obj in return value of the PythonDeserializer created with 2 arguments : return value of the function yaml.load [ yaml . load ] ,
0
example# 5768
with 2 arguments : stream and Loader set to SafeLoader , and unpacked dictionary options , yield one element of the itterable obj .
0
example# 5769
if exception GeneratorExit is caught ,
0
example# 5770
raise an exception .
0
example# 5771
if Exception , renamed to e , exception is caught ,
0
example# 5772
call the function six.reraise [ six . reraise ] with 3 arguments : DeserializationError , return value of the DeserializationError called with an argument e ,
0
example# 5773
from __future__ import unicode_literals into default name space .
0
example# 5774
from django.apps [ django . apps ] import apps into default name space .
0
example# 5775
from django.conf [ django . conf ] import settings into default name space .
0
example# 5776
from django.core.serializers [ django . core . serializers ] import base into default name space .
0
example# 5777
from django.db [ django . db ] import models and DEFAULT_DB_ALIAS into default name space .
0
example# 5778
from django.utils.xmlutils [ django . utils . xmlutils ] import SimplerXMLGenerator into default name space .
0
example# 5779
from django.utils.encoding [ django . utils . encoding ] import smart_text into default name space .
0
example# 5780
from xml.dom [ xml . dom ] import pulldom into default name space .
0
example# 5781
from xml.sax [ xml . sax ] import handler into default name space .
0
example# 5782
from xml.sax.expatreader [ xml . sax . expatreader ] import ExpatParser as _ExpatParser into default name space .
0
example# 5783
derive the class Serializer from the base.Serializer [ base . Serializer ] base class .
0
example# 5784
define the method indent with argument self and level .
0
example# 5785
if value under the _STR:0_ key of the options dictionary exists and is not None ,
1
'indend' ||| _STR:0_
example# 5786
get the value under the _STR:0_ key of the options dictionary , multiply it with level , create a string containing number of whitespaces equal to the previous result , append it to the string containing newline character , use the result as the argument for the call to the self.xml.ignorableWhitespace [ self . xml . ignorableWhitespace ] method .
1
'indent' ||| _STR:0_
example# 5787
define the method start_serialization with an argument self .
0
example# 5788
self.xml [ self . xml ] is a instance of SimplerXMLGenerator class created with 2 arguments : self.stream [ self . stream ] and value under the _STR:0_ key of the
1
'encoding' ||| _STR:0_
example# 5789
options dictionary , if the key doesnt exists use settings.DEFAULT_CHARSET [ settings . DEFAULT_CHARSET ] instead . call the self.xml.startDocument [ self . xml . startDocument ] method .
0
example# 5790
call the method self.xml.startElement [ self . xml . startElement ] with 2 arguments , string _STR:0_ and a dictionary containing 1 element : _STR:1_ for _STR:2_ .
3
"version" ||| _STR:2_
"django-objects" ||| _STR:0_
"1.0" ||| _STR:1_
example# 5791
define the method end_serialization with an argument self .
0
example# 5792
call the self.indent [ self . indent ] method with integer 0 as an argument .
0
example# 5793
call the method self.xml.endElement [ self . xml . endElement ] with an argument string _STR:0_ .
1
"django-objects" ||| _STR:0_
example# 5794
call the self.xml.endDocument [ self . xml . endDocument ] method .
0
example# 5795
define the method start_object with arguments self and obj .
0
example# 5796
if _STR:0_ is not an attribute of obj ,
1
'_meta' ||| _STR:0_
example# 5797
raise an base.SerializationError [ base . SerializationError ] exception with argument string _STR:0_ ,
1
"Non-model object (%s) encountered during serialization" ||| _STR:0_
example# 5798
replace ' % s ' with type of the obj object . call the method self.indent [ self . indent ] with argument integer 1 .
0
example# 5799
attrs is a dictionary containing 1 entry : return value of the smart_text function with argument obj._meta [ obj . _meta ] for _STR:0_ .
1
'model' ||| _STR:0_
example# 5800
if self.use_natural_primary_keys [ self . use_natural_primary_keys ] is false and obj doesnt have _STR:0_ argument .
1
'natural_key' ||| _STR:0_
example# 5801
substitute return value of the method obj._get_pk_val [ obj . _get_pk_val ] for obj_pk .
0
example# 5802
if obj_pk is not None ,
0
example# 5803
substitute the return value of the smart_text function with an argument obj_pk for the value under the _STR:0_ key of the attrs dictionary .
1
'pk' ||| _STR:0_
example# 5804
call the method self.xml.startElement [ self . xml . startElement ] with arguments string _STR:0_ and attrs .
1
'object' ||| _STR:0_
example# 5805
define the method end_object with arguments self and obj .
0
example# 5806
call the method self.indent [ self . indent ] with argument integer 1 .
0
example# 5807
call the method self.xml.endElement [ self . xml . endElement ] with an argument string _STR:0_ .
1
'object' ||| _STR:0_
example# 5808
define the method handle_field with arguments self , obj and field .
0
example# 5809
call the method self.indent [ self . indent ] with argument integer 2 .
0
example# 5810
call the method self.xml.startElement [ self . xml . startElement ] with 2 arguments : string _STR:0_ and a dictionary containing 2 entries : field.name [ field . name ] for _STR:1_ ,
2
'name' ||| _STR:1_
'field' ||| _STR:0_
example# 5811
and return value of the field.get_internal_type [ field . get_internal_type ] method for _STR:0_ . if field.name [ field . name ] attribute of obj is not None ,
1
'type' ||| _STR:0_
example# 5812
call the method field.value_to_string [ field . value_to_string ] with an argument obj , use the result as an argument for the call the method self.xml.characters [ self . xml . characters ] .
0
example# 5813
if not ,
0
example# 5814
call the method self.xml.addQuickElement [ self . xml . addQuickElement ] with an argument string _STR:0_ .
1
'None' ||| _STR:0_
example# 5815
call the method self.xml.endElement [ self . xml . endElement ] with an argument string _STR:0_
1
'field' ||| _STR:0_
example# 5816
define the method handle_fk_field with arguments self , obj and field .
0
example# 5817
call the method self._start_relational_field [ self . _start_relational_field ] with an argument field .
0
example# 5818
evaluate the field.get_attname [ field . get_attname ] , use the result as the name of the obj attribute to get , substitute it for related_att .
0
example# 5819
if related_att is not None ,
0
example# 5820
if self.use_natural_foreign_keys [ self . use_natural_foreign_keys ] is true and field.rel.to [ field . rel . to ] has an attribute _STR:0_ ,
1
'natural_key' ||| _STR:0_
example# 5821
get field.name [ field . name ] attribute of the obj , substitute it for related .
0
example# 5822
call the method related.natural_key [ related . natural_key ] , substitute the result for related .
0
example# 5823
for every key_value in related ,
0
example# 5824
call the method self.xml.startElement [ self . xml . startElement ] with arguments string _STR:0_ and an empty dictionary .
1
'natural' ||| _STR:0_
example# 5825
call the function smart_text with argument key_value , use the result as an argument for the call to the self.xml.characters [ self . xml . characters ] method .
0
example# 5826
call the method self.xml.endElement [ self . xml . endElement ] with an argument string _STR:0_
1
'natural' ||| _STR:0_
example# 5827
if not ,
0
example# 5828
call the function smart_text with argument related_att , use the result as an argument for the call to the self.xml.characters [ self . xml . characters ] method .
0
example# 5829
if not ,
0
example# 5830
call the method self.xml.addQuickElement [ self . xml . addQuickElement ] with an argument string _STR:0_ .
1
'None' ||| _STR:0_
example# 5831
call the method self.xml.endElement [ self . xml . endElement ] with an argument string _STR:0_ .
1
'field' ||| _STR:0_
example# 5832
define the method handle_m2m_field with arguments self , obj and field .
0
example# 5833
if field.rel.through._meta.auto_created [ field . rel . through . _meta . auto_created ] is true ,
0
example# 5834
call the method self._start_relational_field [ self . _start_relational_field ] with the argument field .
0
example# 5835
if self.use_natural_foreign_keys [ self . use_natural_foreign_keys ] is true and field.rel.to [ field . rel . to ] has an attribute _STR:0_ ,
1
'natural_key' ||| _STR:0_
example# 5836
define the function handle_m2m with an argument value ,
0
example# 5837
call the value.natural_key [ value . natural_key ] method , substitute the result for natural .
0
example# 5838
call the method self.xml.startElement [ self . xml . startElement ] with argument string _STR:0_ and an empty dictionary .
1
'object' ||| _STR:0_
example# 5839
for every key_value in natural ,
0
example# 5840
call the method self.xml.startElement [ self . xml . startElement ] with argument string _STR:0_ and an empty dictionary .
1
'natural' ||| _STR:0_
example# 5841
call the function smart_text with argument key_value , use the result as an argument for the call to the self.xml.characters [ self . xml . characters ] method .
0
example# 5842
call the method self.xml.startElement [ self . xml . startElement ] with an argument string _STR:0_ .
1
'natural' ||| _STR:0_
example# 5843
call the method self.xml.startElement [ self . xml . startElement ] with an argument string _STR:0_ .
1
'object' ||| _STR:0_
example# 5844
if not ,
0
example# 5845
define the function handle_m2m with an argument value ,
0
example# 5846
call the self.xml.addQuickElement [ self . xml . addQuickElement ] method with 2 arguments : string _STR:0_ and attr dictionary containing 1 entry :
1
'object' ||| _STR:0_
example# 5847
return value of the function smart_text with return value of the method value._get_pk_val [ value . _get_pk_val ] as an argument for _STR:0_ . for every relobj in iterator generated from the field.name [ field . name ] attribute of the obj object .
1
'pk' ||| _STR:0_
example# 5848
call the function handle_m2m with an argument relobj .
0
example# 5849
call the method self.xml.endElement [ self . xml . endElement ] with an argument string _STR:0_ .
1
'field' ||| _STR:0_
example# 5850
define the method _start_relational_field with arguments self and field .
0
example# 5851
call the method self.indent [ self . indent ] with argument integer 2 .
0
example# 5852
call the method self.xml.startElement [ self . xml . startElement ] with 2 arguments : string _STR:0_ and dictionary containing 3 entries : field.name [ field . name ] for _STR:1_ ,
2
'name' ||| _STR:1_
'field' ||| _STR:0_
example# 5853
field.rel.__class__.__name__ [ field . rel . __class__ . __name__ ] for _STR:0_ and return value of the function smart_text with an argument field.rel.to._meta [ field . rel . to . _meta ] for _STR:1_ . derive the class Deserializer from the base.Deserializer [ base . Deserializer ] base class .
2
'rel' ||| _STR:0_
'to' ||| _STR:1_
example# 5854
define the method __init__ with 3 arguments : self , stream_or_string and unpacked dictionary options .
0
example# 5855
call the method __init__ from the base class of the Deserializer class with arguments stream_or_string and unpacked dictionary options .
0
example# 5856
call the method pulldom.parse [ pulldom . parse ] with arguments : self.stream [ self . stream ] and return value of the method self._make_parser [ self . _make_parser ] ,
0
example# 5857
substitute the result for self.event_stream [ self . event_stream ] . remove the _STR:0_ key from the options dictionary , substitute the return value for self.db [ self . db ] , if the key doesnt exists substitute
1
'using' ||| _STR:0_
example# 5858
DEFAULT_DB_ALIAS for self.db [ self . db ] . remove the _STR:0_ key from the options dictionary , substitute the return value for self.db [ self . db ] ,
1
'ignorenonexistent' ||| _STR:0_
example# 5859
if the key doesnt exists substitute boolean False for self.ignore [ self . ignore ] . define the method _make_parser with an argument self .
0
example# 5860
return the instance of DefusedExpatParser class .
0
example# 5861
define the method __next__ with an argument self .
0
example# 5862
for every event and node in self.event_stream [ self . event_stream ] ,
0
example# 5863
if event equals a string _STR:0_ and node.nodeName [ node . nodeName ] equals a string _STR:1_ ,
2
"START_ELEMENT" ||| _STR:0_
'object' ||| _STR:1_
example# 5864
call the method self.event_stream.expandNode [ self . event_stream . expandNode ] with an argument node .
0
example# 5865
call the method self._handle_object [ self . _handle_object ] with an argument node , return the result .
0
example# 5866
raise an StopIteration exception .
0
example# 5867
define the method _handle_object with arguments self and node .
0
example# 5868
call the method self._get_model_from_node [ self . _get_model_from_node ] with arguments node and string _STR:0_ .
1
'model' ||| _STR:0_
example# 5869
data is an empty dictionary .
0
example# 5870
call the method node.hasAttribute [ node . hasAttribute ] with string _STR:0_ as an argument , if it evaluates to true ,
1
'pk' ||| _STR:0_
example# 5871
call the method node.getAttribute [ node . getAttribute ] with an argument string _STR:0_ , use the result as the argument for the call to the method , Model._meta.pk.to_python [ Model . _meta . pk . to_python ] with , substitute the result for value under the Model._meta.pk.attname [ Model . _meta . pk . attname ] key of the data dictionary .
1
'pk' ||| _STR:0_
example# 5872
m2m_data is an empty dictionary .
0
example# 5873
call the method Model._meta.get_all_field_names [ Model . _meta . get_all_field_names ] , substitute the result for model_fields .
0
example# 5874
for every field_node in return value of the method node.getElementsByTagName [ node . getElementsByTagName ] with an argument string _STR:0_ .
1
'field' ||| _STR:0_
example# 5875
call the method field_node.getAttribute [ field_node . getAttribute ] with an argument string _STR:0_ , substitute the result for field_name .
1
'name' ||| _STR:0_
example# 5876
if field_name is false ,
0
example# 5877
raise an base.DeserializationError [ base . DeserializationError ] exception with string _STR:0_ as argument .
1
"<field> node is missing the 'name' attribute" ||| _STR:0_
example# 5878
if self.ignore [ self . ignore ] is true and field_name is not contained in model_fields ,
0
example# 5879
skip this loop iteration .
0
example# 5880
call the method Model._meta.get_field [ Model . _meta . get_field ] with an argument field_name , substitute it for field .
0
example# 5881
if field.rel [ field . rel ] is true and field.rel [ field . rel ] is an instance of models.ManyToManyRel [ models . ManyToManyRel ] ,
0
example# 5882
call the method self._handle_m2m_field_node [ self . _handle_m2m_field_node ] with an argument field_node and field , substitute the result for value under the field.name [ field . name ] key of m2m_data dictionary .
0
example# 5883
otherwise , if field.rel [ field . rel ] is true and field.rel [ field . rel ] is an instance of models.ManyToOneRel [ models . ManyToOneRel ] ,
0
example# 5884
call the method self._handle_fk_field_node [ self . _handle_fk_field_node ] with field_node and field as arguments , substitute the result for the value under the
0
example# 5885
field.attname [ field . attname ] of the data dictionary . if not ,
0
example# 5886
call the method field_node.getElementsByTagName [ field_node . getElementsByTagName ] with an argument string _STR:0_ , if it evaluates to true ,
1
'None' ||| _STR:0_
example# 5887
value is None .
0
example# 5888
if not ,
0
example# 5889
call the function getInnerText with argument field_node , on the result call the method strip , use the result as an argument for the
0
example# 5890
call to the field.to_python [ field . to_python ] method , substitute the result for value . substitute value for value under the field.name [ field . name ] key of the data dictionary .
0
example# 5891
call the method base.build_instance [ base . build_instance ] with arguments Model , data and self.db [ self . db ] , substitute the result for obj .
0
example# 5892
call the method base.DeserializedObject [ base . DeserializedObject ] with arguments obj and m2m_data , return the result .
0
example# 5893
define the method _handle_fk_field_node with arguments self , node and field .
0
example# 5894
call the method node.getElementsByTagName [ node . getElementsByTagName ] with an argument string _STR:0_ , if it evaluates to true ,
1
'None' ||| _STR:0_
example# 5895
return None .
0
example# 5896
if not ,
0
example# 5897
if field.rel.to._default_manager [ field . rel . to . _default_manager ] has an atttribute _STR:0_ ,
1
'get_by_natural_key' ||| _STR:0_
example# 5898
call the method node.getElementsByTagName [ node . getElementsByTagName ] with the argument string _STR:0_ , substitute the result for keys .
1
'natural' ||| _STR:0_
example# 5899
if keys is true ,
0
example# 5900
call the function getInnerText with argument k , on the result call the method strip , for every k in keys , append the results to field_value list .
0
example# 5901
call the method field.rel.to._default_manager.db_manager [ field . rel . to . _default_manager . db_manager ] with an argument self.db [ self . db ] , on the result call the method get_by_natural_key ,
0
example# 5902
with unpacked list field_value as an argument , substitute the result for obj . get the field.rel.field_name [ field . rel . field_name ] from the obj , substitute it for obj_pk .
0
example# 5903
if field.rel.to._meta.pk.rel [ field . rel . to . _meta . pk . rel ] is true ,
0
example# 5904
substitute obj_pk.pk [ obj_pk . pk ] for obj_pk .
0
example# 5905
if not ,
0
example# 5906
call the function getInnerText with an argument node , call the strip method on the result , substitute the result for field_value .
0
example# 5907
call the field.rel.to._meta.get_field [ field . rel . to . _meta . get_field ] method with an field.rel.field_name [ field . rel . field_name ] argument , on the result call the method to_python ,
0
example# 5908
with field_value as an argument , substitute the result for obj_pk . return obj_pk .
0
example# 5909
if not ,
0
example# 5910
call the function getInnerText with an argument node , call the strip method on the result , substitute the result for field_value .
0
example# 5911
call the field.rel.to._meta.get_field [ field . rel . to . _meta . get_field ] method with an field.rel.field_name [ field . rel . field_name ] argument , on the result call the method to_python ,
0
example# 5912
with field_value as an argument , return the result . define the method _handle_m2m_field_node with arguments self , node and field .
0
example# 5913
if field.rel.to._default_manager [ field . rel . to . _default_manager ] has an attribute _STR:0_ ,
1
'get_by_natural_key' ||| _STR:0_
example# 5914
define the function m2m_convert with an argument n ,
0
example# 5915
call the method n.getElementsByTagName [ n . getElementsByTagName ] with string _STR:0_ as argument , substitute result for keys .
1
'natural' ||| _STR:0_
example# 5916
if keys is true ,
0
example# 5917
call the function getInnerText with argument k , on the result call the method strip , for every k in keys , append the results to field_value list .
0
example# 5918
call the method field.rel.to._default_manager.db_manager [ field . rel . to . _default_manager . db_manager ] with an argument self.db [ self . db ] , on the result call the method get_by_natural_key ,
0
example# 5919
with unpacked list field_value as an argument , substitute the field pk of the result for obj_pk . if not ,
0
example# 5920
call the method n.getAttribute [ n . getAttribute ] with string _STR:0_ as argument , use the result as an argument for the call to the field.rel.to._meta.pk.to_python [ field . rel . to . _meta . pk . to_python ] method , substitute the result for obj_pk .
1
'pk' ||| _STR:0_
example# 5921
return obj_pk .
0
example# 5922
if not ,
0
example# 5923
m2m_convert is an lambda function with an argument n , return value is the return value of the method field.rel.to._meta.pk.to_python [ field . rel . to . _meta . pk . to_python ] ,
0
example# 5924
called with n.getAttribute [ n . getAttribute ] ( _STR:0_ ) method . call the m2m_convert function with an argument c , for every c in return value of the method node.getElementsByTagName [ node . getElementsByTagName ] ,
1
'pk' ||| _STR:0_
example# 5925
with an argument string _STR:0_ , return the result . define the method _get_model_from_node with arguments self , node and attr .
1
'object' ||| _STR:0_
example# 5926
call the method node.getAttribute [ node . getAttribute ] with an argument attr , substitute the result for model_identifier .
0
example# 5927
if model_identifier is false ,
0
example# 5928
raise an base.DeserializationError [ base . DeserializationError ] exception with an argument string _STR:0_ ,
1
"<%s> node is missing the required '%s' attribute" ||| _STR:0_
example# 5929
where ' % s ' is replaced with node.nodeName [ node . nodeName ] and attr . try ,
0
example# 5930
call the method apps.get_model [ apps . get_model ] with an argument model_identifier , return the result .
0
example# 5931
if LookupError or TypeError exceptions are caught ,
0
example# 5932
raise an base.DeserializationError [ base . DeserializationError ] exception with an argument string _STR:0_ ,
1
"<%s> node has invalid model identifier: '%s'" ||| _STR:0_
example# 5933
where ' % s ' is replaced with node.nodeName [ node . nodeName ] and attr . define the function getInnerText with an argument node .
0
example# 5934
inner_text is an empty list .
0
example# 5935
for every child in node.childNodes [ node . childNodes ] ,
0
example# 5936
if child.nodeType [ child . nodeType ] equals to child.TEXT_NODE [ child . TEXT_NODE ] or child.nodeType [ child . nodeType ] equals to child.CDATA_SECTION_NODE [ child . CDATA_SECTION_NODE ] ,
0
example# 5937
append child.data [ child . data ] to the inner_text list .
0
example# 5938
otherwise if child.nodeType [ child . nodeType ] equals to child.ELEMENT_NODE [ child . ELEMENT_NODE ] ,
0
example# 5939
call the function getInnerText with an argument child , use the result as an argument for the call to the method inner_text.extend [ inner_text . extend ] .
0
example# 5940
if not ,
0
example# 5941
do nothing .
0
example# 5942
join inner_text elements into a string .
0
example# 5943
derive the class DefusedExpatParser from the _ExpatParser base class .
0
example# 5944
define the method __init__ with arguments self , unpacked list args and unpacked dictionary kwargs .
0
example# 5945
call the method _ExpatParser.__init__ [ _ExpatParser . __init__ ] with arguments self , unpacked list args and unpacked dictionary kwargs .
0
example# 5946
call the method self.setFeature [ self . setFeature ] with 2 arguments : handler.feature_external_ges [ handler . feature_external_ges ] and boolean False .
0
example# 5947
call the method self.setFeature [ self . setFeature ] with 2 arguments : handler.feature_external_pes [ handler . feature_external_pes ] and boolean False .
0
example# 5948
define the method start_doctype_decl with an arguments self , name , sysid , pubid and has_internal_subset .
0
example# 5949
raise an DTDForbidden exception with arguments name , sysid and pubid .
0
example# 5950
define the method entity_decl with arguments self , name , is_parameter_entity , value , base , sysid , pubid and notation_name .
0
example# 5951
raise an EntitiesForbidden exception with arguments name , value , base , sysid , pubid and notation_name .
0
example# 5952
define the method unparsed_entity_decl with arguments self , name , base , sysid , pubid and notation_name .
0
example# 5953
raise an EntitiesForbidden exception with arguments name , None , base , sysid , pubid and notation_name .
0
example# 5954
define the method external_entity_ref_handler with arguments self , context , base , sysid and pubid .
0
example# 5955
raise an ExternalReferenceForbidden exception with arguments context , base , sysid and pubid .
0
example# 5956
define the method reset with an argument self .
0
example# 5957
call the method _ExpatParser.reset [ _ExpatParser . reset ] with an argumen sefl .
0
example# 5958
substitute self._parser [ self . _parser ] for parser .
0
example# 5959
substitute self.start_doctype_decl [ self . start_doctype_decl ] for parser.StartDoctypeDeclHandler [ parser . StartDoctypeDeclHandler ] .
0
example# 5960
substitute self.entity_decl [ self . entity_decl ] for parser.EntityDeclHandler [ parser . EntityDeclHandler ] .
0
example# 5961
substitute self.unparsed_entity_decl [ self . unparsed_entity_decl ] for parser.UnparsedEntityDeclHandler [ parser . UnparsedEntityDeclHandler ] .
0
example# 5962
substitute self.external_entity_ref_handler [ self . external_entity_ref_handler ] for parser.ExternalEntityRefHandler [ parser . ExternalEntityRefHandler ] .
0
example# 5963
derive the class DefusedXmlException from the ValueError base class .
0
example# 5964
define the method __repr__ with an argument self .
0
example# 5965
convert self into a string and return it .
0
example# 5966
derive the class DTDForbidden from the DefusedXmlException base class .
0
example# 5967
define the method __init__ with arguments self , name , sysid and pubid .
0
example# 5968
call the method __init__ from the base class of the DTDForbidden class .
0
example# 5969
substitute name for self.name [ self . name ] .
0
example# 5970
substitute sysid for self.sysid [ self . sysid ] .
0
example# 5971
substitute pubid for self.pubid [ self . pubid ] .
0
example# 5972
define the method __str__ with an argument self .
0
example# 5973
tpl is an string _STR:0_ .
1
"DTDForbidden(name='{}', system_id={!r}, public_id={!r})" ||| _STR:0_
example# 5974
call the method tpl.format [ tpl . format ] with an arguments self.name [ self . name ] , self.sysid [ self . sysid ] and self.pubid [ self . pubid ] .
0
example# 5975
derive the class EntitiesForbidden from the DefusedXmlException base class .
0
example# 5976
define the method __init__ with arguments self , name , value , base , sysid , pubid and notation_name .
0
example# 5977
call the method __init__ from the base class of the EntitiesForbidden class .
0
example# 5978
substitute name for self.name [ self . name ] .
0
example# 5979
substitute value for self.value [ self . value ] .
0
example# 5980
substitute base for self.base [ self . base ] .
0
example# 5981
substitute sysid for self.sysid [ self . sysid ] .
0
example# 5982
substitute pubid for self.pubid [ self . pubid ] .
0
example# 5983
substitute notation_name for self.notation_name [ self . notation_name ] .
0
example# 5984
define the method __str__ with an argument self .
0
example# 5985
tpl is an string _STR:0_ .
1
"EntitiesForbidden(name='{}', system_id={!r}, public_id={!r})" ||| _STR:0_
example# 5986
call the method tpl.format [ tpl . format ] with an arguments self.name [ self . name ] , self.sysid [ self . sysid ] and self.pubid [ self . pubid ] .
0
example# 5987
derive the class ExternalReferenceForbidden from the DefusedXmlException base class .
0
example# 5988
define the method __init__ with arguments self , context , base , sysid and pubid .
0
example# 5989
call the method __init__ from the base class of the ExternalReferenceForbidden class .
0
example# 5990
substitute context for self.context [ self . context ] .
0
example# 5991
substitute base for self.base [ self . base ] .
0
example# 5992
substitute sysid for self.sysid [ self . sysid ] .
0
example# 5993
substitute pubid for self.pubid [ self . pubid ] .
0
example# 5994
define the method __str__ with an argument self .
0
example# 5995
tpl is an string _STR:0_ .
1
"ExternalReferenceForbidden(system_id='{}', public_id={})" ||| _STR:0_
example# 5996
call the method tpl.format [ tpl . format ] with an arguments self.sysid [ self . sysid ] and self.pubid [ self . pubid ] .
0
example# 5997
from __future__ import unicode_literals into default name space .
0
example# 5998
import module socket .
0
example# 5999
import module sys .
0
example# 6000
from wsgiref import simple_server into default name space .
0
example# 6001
from wsgiref.util [ wsgiref . util ] import FileWrapper
0
example# 6002
from django.core.exceptions [ django . core . exceptions ] import ImproperlyConfigured into default name space .
0
example# 6003
from django.core.management.color [ django . core . management . color ] import color_style into default name space .
0
example# 6004
from django.core.wsgi [ django . core . wsgi ] import get_wsgi_application into default name space .
0
example# 6005
from django.utils [ django . utils ] import six into default name space .
0
example# 6006
from django.utils.module_loading [ django . utils . module_loading ] import import_string into default name space .
0
example# 6007
from django.utils.six.moves [ django . utils . six . moves ] import socketserver into default name space .
0
example# 6008
__all__ is a tuple containing 2 initial elements : strigs _STR:0_ and _STR:1_ .
2
'WSGIRequestHandler' ||| _STR:1_
'WSGIServer' ||| _STR:0_
example# 6009
define the funtion get_internal_wsgi_application .
0
example# 6010
from django.conf [ django . conf ] import settings into default name space .
0
example# 6011
get _STR:0_ attribute from the settings , substitute it for app_path .
1
'WSGI_APPLICATION' ||| _STR:0_
example# 6012
if app_path is None ,
0
example# 6013
call the function get_wsgi_application , return the result .
0
example# 6014
try ,
0
example# 6015
call the import_string with app_path as an argument , return the result .
0
example# 6016
if ImportError , rename it to e , exception is caught ,
0
example# 6017
msg is a tuple containing one initial entry : a string _STR:0_ , where _STR:1_ is replaced by app_path and _STR:2_ is replaced by e .
3
'%(exception)s' ||| _STR:2_
"WSGI application '%(app_path)s' could not be loaded; Error importing module: '%(exception)s'" ||| _STR:0_
'%(app_path)s' ||| _STR:1_
example# 6018
call the function six.reraise [ six . reraise ] with 3 arguments : ImproperlyConfigured , ImproperlyConfigured ( msg ) and third element of return value of the function sys.exc_info [ sys . exc_info ] .
0
example# 6019
derive the class WSGIServer from simple_server.WSGIServer [ simple_server . WSGIServer ] and object base classes .
0
example# 6020
request_queue_size is integer 10 .
0
example# 6021
define the __init__ method with 3 arguments : self , unpacked list args and unpacked dictionary **kwargs .
0
example# 6022
pop value under the _STR:0_ key of the kwargs dictionary , if it is true ,
1
'ipv6' ||| _STR:0_
example# 6023
substitute socket.AF_INET6 [ socket . AF_INET6 ] for self.address_family [ self . address_family ] .
0
example# 6024
call the __init__ method from the base class of the WSGIServer class , with 2 arguments : unpacked list args and unpacked dictionary kwargs .
0
example# 6025
define the function server_bind with an argument self .
0
example# 6026
call the server_bind method from the base class of the WSGIServer class .
0
example# 6027
call the self.setup_environ [ self . setup_environ ] method .
0
example# 6028
derive the class WSGIRequestHandler from simple_server.WSGIRequestHandler [ simple_server . WSGIRequestHandler ] and object base classes .
0
example# 6029
define the __init__ method with 3 arguments : self , unpacked list args and unpacked dictionary **kwargs .
0
example# 6030
call the color_style method , substitute the result for self.style [ self . style ] .
0
example# 6031
call the __init__ method from the base class of the WSGIRequestHandler class , with 2 arguments : unpacked list args and unpacked dictionary kwargs .
0
example# 6032
define the function address_string with an argument self .
0
example# 6033
return the first element of self.client_address [ self . client_address ] .
0
example# 6034
define the function server_bind with an argument self .
0
example# 6035
msg is a string _STR:0_ , where ' % s ' are replaced with return value of the method self.log_date_time_string [ self . log_date_time_string ] and formated args .
1
"[%s] %s\n" ||| _STR:0_
example# 6036
if first element of the second row of args equals a string _STR:0_ ,
1
'2' ||| _STR:0_
example# 6037
call the self.style.HTTP_SUCCESS [ self . style . HTTP_SUCCESS ] with an argument msg , substitute it for msg .
0
example# 6038
otherwise if first element of second row of args equals a string _STR:0_ ,
1
'1' ||| _STR:0_
example# 6039
call the self.style.HTTP_INFO [ self . style . HTTP_INFO ] with an argument msg , substitute it for msg .
0
example# 6040
otherwise if second element of args equals a string _STR:0_ ,
1
'304' ||| _STR:0_
example# 6041
call the self.style.HTTP_NOT_MODIFIED [ self . style . HTTP_NOT_MODIFIED ] with an argument msg , substitute it for msg .
0
example# 6042
otherwise if first element of second row of args equals a string _STR:0_ ,
1
'3' ||| _STR:0_
example# 6043
call the self.style.HTTP_REDIRECT [ self . style . HTTP_REDIRECT ] with an argument msg , substitute it for msg .
0
example# 6044
otherwise if second element of args equals a string _STR:0_ ,
1
'404' ||| _STR:0_
example# 6045
call the self.style.HTTP_NOT_FOUND [ self . style . HTTP_NOT_FOUND ] with an argument msg , substitute it for msg .
0
example# 6046
otherwise if first element of second row of args equals a string _STR:0_ ,
1
'4' ||| _STR:0_
example# 6047
call the self.style.HTTP_BAD_REQUEST [ self . style . HTTP_BAD_REQUEST ] with an argument msg , substitute it for msg .
0
example# 6048
if not ,
0
example# 6049
call the self.style.HTTP_SERVER_ERROR [ self . style . HTTP_SERVER_ERROR ] with an argument msg , substitute it for msg .
0
example# 6050
call the sys.stderr.write [ sys . stderr . write ] function with an argument msg .
0
example# 6051
define the function run with 5 arguments : addr , port , wsgi_handler , ipv6 set to boolean False and threading set to boolean False .
0
example# 6052
server_address is a tuple containing 2 initial elements : addr and port .
0
example# 6053
if threading is true ,
0
example# 6054
call the function type with 3 arguments : string _STR:0_ , tuple containing 2 elements : socketserver.ThreadingMixIn [ socketserver . ThreadingMixIn ] and WSGIServer ,
1
'WSGIServer' ||| _STR:0_
example# 6055
and an empty dictionary , substitute the result for httpd_cls . if not ,
0
example# 6056
substitute WSGIServer for httpd_cls .
0
example# 6057
call the httpd_cls function with 4 arguments : server_address , WSGIRequestHandler and ipv6 set to ipv6 , substitute the result for httpd .
0
example# 6058
if threading is true ,
0
example# 6059
httpd.daemon_threads [ httpd . daemon_threads ] is boolean True .
0
example# 6060
call the method httpd.set_app [ httpd . set_app ] with an argument wsgi_handler .
0
example# 6061
call the method httpd.serve_forever [ httpd . serve_forever ] .
0
example# 6062
import module importlib .
0
example# 6063
import module os .
0
example# 6064
import module sys .
0
example# 6065
__version__ is a string _STR:0_ .
1
"0.1" ||| _STR:0_
example# 6066
__all__ is a list containing a string _STR:0_ .
1
"runfastcgi" ||| _STR:0_
example# 6067
FASTCGI_OPTIONS is a dictionary containing 16 initial entries : _STR:0_ for _STR:1_ , None for _STR:2_ , None for _STR:3_ ,
4
'protocol' ||| _STR:1_
'port' ||| _STR:3_
'host' ||| _STR:2_
'fcgi' ||| _STR:0_
example# 6068
define the method fastcgi_help with an argument message set to None .
0
example# 6069
print FASTCGI_HELP to the standard output .
0
example# 6070
if message is true ,
0
example# 6071
print message to the standard output .
0
example# 6072
return boolean False .
0
example# 6073
define the function runfastcgi with 2 arguments : argset set to an empty list and unpacked dictionary kwargs .
0
example# 6074
call the method FASTCGI_OPTIONS.copy [ FASTCGI_OPTIONS . copy ] , substitute the result for options .
0
example# 6075
call the options.update [ options . update ] method with an argument kwargs .
0
example# 6076
for every x in argset ,
0
example# 6077
if character _STR:0_ is contained in x ,
1
'=' ||| _STR:0_
example# 6078
call the x.split [ x . split ] method with arguments : character _STR:0_ and integer 1 , store the result in k and v , respectively .
1
'=' ||| _STR:0_
example# 6079
if not ,
0
example# 6080
substitute x for k and boolean True for v .
0
example# 6081
substitute v for value under the k converted to lower case key of options dictionary .
0
example# 6082
if string _STR:0_ is contained in options ,
1
'help' ||| _STR:0_
example# 6083
call the fastcgi_help function , return the result .
0
example# 6084
try ,
0
example# 6085
import flup
0
example# 6086
if ImportError , renamed to e , exception is caught ,
0
example# 6087
call the method sys.stderr.write [ sys . stderr . write ] with an argument string _STR:0_ , where ' % s ' is replaced by e .
1
"ERROR: %s\n" ||| _STR:0_
example# 6088
call the method sys.stderr.write [ sys . stderr . write ] with an argument string _STR:0_ .
1
"  Unable to load the flup package.  In order to run django\n" ||| _STR:0_
example# 6089
call the method sys.stderr.write [ sys . stderr . write ] with an argument string _STR:0_ .
1
"  as a FastCGI application, you will need to get flup from\n" ||| _STR:0_
example# 6090
call the method sys.stderr.write [ sys . stderr . write ] with an argument string _STR:0_ .
1
"  http://www.saddi.com/software/flup/   If you've already\n" ||| _STR:0_
example# 6091
call the method sys.stderr.write [ sys . stderr . write ] with an argument string _STR:0_ .
1
"  installed flup, then make sure you have it in your PYTHONPATH.\n" ||| _STR:0_
example# 6092
return boolean False .
0
example# 6093
append value under the _STR:0_ key of the options dictionary to the string _STR:1_ , substitute it for flup_module .
2
'protocol' ||| _STR:0_
'server.' ||| _STR:1_
example# 6094
if value under the _STR:0_ key of the options dictionary equals to string _STR:1_ or _STR:2_ ,
3
'fork' ||| _STR:2_
'perfork' ||| _STR:1_
'method' ||| _STR:0_
example# 6095
wsgi_opts is a dictionary with 4 initial entries : value under the key _STR:0_ of options dictionary converted to an integer ,
1
'maxspare' ||| _STR:0_
example# 6096
for _STR:0_ , value under the key _STR:1_ of options dictionary converted to an integer for _STR:2_ , value under the key _STR:3_ of options dictionary converted to an integer , for _STR:4_ , and value under the key _STR:5_ of options dictionary converted to an integer , for _STR:6_ . append string _STR:7_ to flup_module .
8
'minSpare' ||| _STR:2_
'maxSpare' ||| _STR:0_
'maxrequests' ||| _STR:5_
'maxRequests' ||| _STR:6_
'maxchildren' ||| _STR:3_
'_fork' ||| _STR:7_
'minspare' ||| _STR:1_
'maxChildren' ||| _STR:4_
example# 6097
otherwise if value under the _STR:0_ key of optins dictionary equals to string _STR:1_ or _STR:2_ ,
3
'threaded' ||| _STR:2_
'thread' ||| _STR:1_
'method' ||| _STR:0_
example# 6098
wsgi_opts is a dictionary with 4 initial entries : value under the key _STR:0_ of options dictionary converted to an integer ,
1
'maxspare' ||| _STR:0_
example# 6099
for _STR:0_ , value under the key _STR:1_ of options dictionary converted to an integer for _STR:2_ , and value under the key _STR:3_ of options dictionary converted to an integer , for _STR:4_ . if not ,
5
'maxSpare' ||| _STR:0_
'minspare' ||| _STR:1_
'maxchildren' ||| _STR:3_
'minSpare' ||| _STR:2_
'maxThreads' ||| _STR:4_
example# 6100
call the function fastcgi_help with an argument string _STR:0_ , return the result .
1
"ERROR: Implementation must be one of prefork or thread." ||| _STR:0_
example# 6101
if value under the _STR:0_ key of options dictionary is not None , substitute it for value under the _STR:0_ key of wsgi_opts dictionary .
1
'debug' ||| _STR:0_
example# 6102
try ,
0
example# 6103
call the function importlib.import_module [ importlib . import_module ] with 2 arguments : flup_module converted to string and appended to _STR:0_ character , and string _STR:1_ , substitute the result for module .
2
'flup' ||| _STR:1_
'.' ||| _STR:0_
example# 6104
substitute module.WSGIServer [ module . WSGIServer ] for WSGIServer .
0
example# 6105
if Exception exception is caught ,
0
example# 6106
append flup_module to string _STR:0_ , print it to the standard output .
1
"Can't import flup." ||| _STR:0_
example# 6107
return boolean False .
0
example# 6108
from django.core.servers.basehttp [ django . core . servers . basehttp ] import get_internal_wsgi_application into default name space .
0
example# 6109
if value under the _STR:0_ key of the options dictionary is false and values under the _STR:1_ and _STR:2_ keys of the options dictionary are true ,
3
'socket' ||| _STR:0_
'host' ||| _STR:1_
'port' ||| _STR:2_
example# 6110
set the value under the _STR:0_ key of the wsgi_opts dictionary to a tuple containing 2 elements : value under the _STR:1_ key ,
2
'bindAddress' ||| _STR:0_
'host' ||| _STR:1_
example# 6111
of the options dictionary and value under the _STR:0_ key of the options dictionary converted into an integer . if value under the _STR:1_ key of the options dictionary is true and values under the _STR:2_ and _STR:0_ keys of the options dictionary are false ,
3
'socket' ||| _STR:1_
'host' ||| _STR:2_
'port' ||| _STR:0_
example# 6112
substitute the value under the _STR:0_ key of options dictionary for value under the _STR:1_ key of wsgi_opts dictionary .
2
'socket' ||| _STR:0_
'bindAddress' ||| _STR:1_
example# 6113
if values under the _STR:0_ , _STR:1_ and _STR:2_ keys of the options dictionary are false ,
3
'socket' ||| _STR:0_
'host' ||| _STR:1_
'port' ||| _STR:2_
example# 6114
set value under the _STR:0_ key of wsgi_opts to None .
1
'bindAddress' ||| _STR:0_
example# 6115
if not ,
0
example# 6116
call the fastcgi_help function with an argument string _STR:0_ , return it .
1
"Invalid combination of host, port, socket." ||| _STR:0_
example# 6117
if value under the _STR:0_ of options dictionary is None ,
1
'daemonize' ||| _STR:0_
example# 6118
if the value under the _STR:0_ key of the wsgi_opts dictionary is not None , set daemonize to boolean True , if not , set it to boolean False .
1
'bindAddress' ||| _STR:0_
example# 6119
if not ,
0
example# 6120
convert the value under the _STR:0_ key of options dictionary to lowercase , if it equals to string _STR:1_ , _STR:2_ or _STR:3_ ,
4
'daemonize' ||| _STR:0_
'yes' ||| _STR:2_
'true' ||| _STR:1_
't' ||| _STR:3_
example# 6121
daemonize is boolean True .
0
example# 6122
convert the value under the _STR:0_ key of options dictionary to lowercase , if it equals to string _STR:1_ , _STR:2_ or _STR:3_ ,
4
'false' ||| _STR:1_
'daemonize' ||| _STR:0_
'f' ||| _STR:3_
'no' ||| _STR:2_
example# 6123
daemonize is boolean False .
0
example# 6124
if not ,
0
example# 6125
call the fastcgi_help function with an argument string _STR:0_ , return it .
1
"ERROR: Invalid option for daemonize parameter." ||| _STR:0_
example# 6126
daemon_kwargs is an empty dictionary .
0
example# 6127
if value under the _STR:0_ key of options dictionary is true ,
1
'outlog' ||| _STR:0_
example# 6128
substitute the value under the _STR:0_ key of options dictionary for value under the _STR:1_ key of daemon_kwargs dictionary .
2
'outlog' ||| _STR:0_
'out_log' ||| _STR:1_
example# 6129
if value under the _STR:0_ key of options dictionary is true ,
1
'errlog' ||| _STR:0_
example# 6130
substitute the value under the _STR:0_ key of options dictionary for value under the _STR:1_ key of daemon_kwargs dictionary .
2
'errlog' ||| _STR:0_
'err_log' ||| _STR:1_
example# 6131
if value under the _STR:0_ key of options dictionary is true ,
1
'umask' ||| _STR:0_
example# 6132
convert the value under the _STR:0_ key of options dictionary into an integer of base 8 , substitute it for value under the _STR:0_ key of daemon_kwargs dictionary .
1
'umask' ||| _STR:0_
example# 6133
if daemonize is true ,
0
example# 6134
from django.utils.daemonize [ django . utils . daemonize ] import become_daemon into default name space .
0
example# 6135
call the function become_daemon with 2 arguments : our_home_dir set to the value under the _STR:0_ key of options dictionary and ,
1
'workdir' ||| _STR:0_
example# 6136
unpacked dictionary daemon_kwargs . if value under the _STR:0_ of options dictionary exists ,
1
'pidfile' ||| _STR:0_
example# 6137
open the file whose name is stored in the value under the _STR:0_ key of options dictionary and mode _STR:1_ , with the file descriptor as fp ,
2
'pidfile' ||| _STR:0_
'w' ||| _STR:1_
example# 6138
call the method fp.write [ fp . write ] with an argument string _STR:0_ % d ' replaced by os.getpid [ os . getpid ] function return value .
1
'%d\n", with ' ||| _STR:0_
example# 6139
create the object WSGIServer with 2 arguments : get_internal_wsgi_application return value and unpacked dictionary wsgi_opts , call the method run on it .
0
example# 6140
if __name__ equals a string _STR:0_ .
1
'__main__' ||| _STR:0_
example# 6141
call the function runfastcgi with an argument all the elements , except the first from the sys.argv [ sys . argv ] list .
0
example# 6142
from django.dispatch [ django . dispatch ] import Signal into default name space .
0
example# 6143
request_started is a instance of a Signal class .
0
example# 6144
request_finished is a instance of a Signal class .
0
example# 6145
got_request_exception is a instance of a Signal class , created with an argument providing_args as the list containing string _STR:0_ .
1
'request' ||| _STR:0_
example# 6146
from __future__ import unicode_literals into default name space .
0
example# 6147
import module base64 .
0
example# 6148
import module json .
0
example# 6149
import module time .
0
example# 6150
import module zlib .
0
example# 6151
from django.conf [ django . conf ] import settings into default name space .
0
example# 6152
from django.utils [ django . utils ] import baseconv into default name space .
0
example# 6153
from django.utils.crypto [ django . utils . crypto ] import constant_time_compare and salted_hmac into default name space .
0
example# 6154
from django.utils.encoding [ django . utils . encoding ] import force_bytes , force_str and force_text into default name space .
0
example# 6155
from django.utils.module_loading [ django . utils . module_loading ] import import_string into default name space .
0
example# 6156
derive the class BadSignature from the Exception base class .
0
example# 6157
do nothing .
0
example# 6158
derive the class SignatureExpired from the BadSignature base class .
0
example# 6159
do nothing .
0
example# 6160
define the function b64_encode with an argument s .
0
example# 6161
call the method base64.urlsafe_b64encode [ base64 . urlsafe_b64encode ] with an argument s , on the result call the strip function with _STR:0_ as the argument , return the result .
1
'=' ||| _STR:0_
example# 6162
define the function b64_decode with an argument s .
0
example# 6163
calculate negative length of s , by modulus integer 4 , use the result as the number of _STR:0_ characters to be stored in pad .
1
'=' ||| _STR:0_
example# 6164
call the method base64.urlsafe_b64decode [ base64 . urlsafe_b64decode ] with sum of s and pad as argument .
0
example# 6165
define the function b64_hmac with arguments salt , value and key .
0
example# 6166
call the salted_hmac with 3 arguments : salt , value and key , call the digest method on the result ,
0
example# 6167
use the result as an argument for the call to the b64_encode function , return the result . define the function get_cookie_signer with an argument salt set to string _STR:0_ .
1
'django.core.signing.get_cookie_signer' ||| _STR:0_
example# 6168
call the import_string function with an argument settings.SIGNING_BACKEND [ settings . SIGNING_BACKEND ] , substitute the result for Signer .
0
example# 6169
call the force_bytes function with an argument settings.SECRET_KEY [ settings . SECRET_KEY ] , substitute the result for key .
0
example# 6170
create the Singer class with 2 arguments : key appended to string _STR:0_ and salt set to salt , return it .
1
'django.http.cookies' ||| _STR:0_
example# 6171
derive the class JSONSerializer from the object base class .
0
example# 6172
define the method dumps with arguments self and obj .
0
example# 6173
call the json.dumps [ json . dumps ] function with 2 arguments : obj and separators set to tuple containing _STR:0_ and _STR:1_ characters ,
2
':' ||| _STR:1_
',' ||| _STR:0_
example# 6174
call the encode method on the result with string _STR:0_ as an argument , return the result . define the method loads with arguments self and data .
1
'latin-1' ||| _STR:0_
example# 6175
call the data.decode [ data . decode ] method with a string _STR:0_ as an argument , use the result as an argument for the call to the json.load [ json . load ] function , return the result .
1
'latin-1' ||| _STR:0_
example# 6176
define the function dumps with 5 arguments : obj , key set to None , salt set to string _STR:0_ ,
1
'django.core.signing' ||| _STR:0_
example# 6177
call the serializer function , call the dumps method on the result with an argument obj , substitute result for data .
0
example# 6178
is_compressed is boolean False .
0
example# 6179
if compress is true ,
0
example# 6180
call the function zlib.compress [ zlib . compress ] with an argument data , substitute the result for compressed .
0
example# 6181
if length of compressed is lesser than length of data decremented by 1 ,
0
example# 6182
substitute compressed for data .
0
example# 6183
is_compressed is boolean True .
0
example# 6184
call the b64_encode function with an argument data , substitute the result for base64d .
0
example# 6185
if is_compressed is true ,
0
example# 6186
prefix the base64d with a _STR:0_ character .
1
'.' ||| _STR:0_
example# 6187
instantiate the TimestampSigner object with arguments key and salt set to salt , call its method sign with an argument base64 , return it .
0
example# 6188
define the function loads with 5 arguments : s , key set to None , salt set to string _STR:0_ ,
1
'django.core.signing' ||| _STR:0_
example# 6189
instantiate TimestampSigner object with arguments key and salt set to salt , call its method unsign with arguments :
0
example# 6190
s and max_age set to max_age , use it as an argument for the force_bytes function , substitute the result for base64d . decompress is boolean False .
0
example# 6191
if first element of base64d equals to a _STR:0_ character ,
1
'.' ||| _STR:0_
example# 6192
substitute first element of base64d for base64d .
0
example# 6193
decompress is boolean True .
0
example# 6194
call the method b64_decode with an argument base64 , substitute the result for data .
0
example# 6195
if decompress is true ,
0
example# 6196
call the function zlib.decompress [ zlib . decompress ] with an argument data , substitute the result for data .
0
example# 6197
call the serializer function , call the loads method on the return value with an argument data , return the result .
0
example# 6198
derive the class Signer from the object base class .
0
example# 6199
define the method __init__ with 4 arguments : self , key set to None , sep set to _STR:0_ and salt set to None .
1
':' ||| _STR:0_
example# 6200
call the function force_str with an argument sep , substitute the result for self.sep [ self . sep ] .
0
example# 6201
if key exists , substitute it for self.key [ self . key ] , if not substitute settings.SECRET_KEY [ settings . SECRET_KEY ] for key .
0
example# 6202
call the force_str function with an argument : salt , if it exists , if not with a string _STR:0_ , with ' % s ' replaced by ,
1
'%s.%s' ||| _STR:0_
example# 6203
self.__class__.__module__ [ self . __class__ . __module__ ] and self.__class__.__name__ [ self . __class__ . __name__ ] , respectively , substitute the result for self.salt [ self . salt ] . define the method signature with arguments self and value .
0
example# 6204
call the function base64_hmac with 3 arguments : string _STR:0_ appended to self.salt [ self . salt ] , value and self.key [ self . key ] , substitute the result for signature .
1
'signer' ||| _STR:0_
example# 6205
call the function force_str with an argument signature , return the result .
0
example# 6206
define the method sign with arguments self and value .
0
example# 6207
call the function force_str with an argument value , substitute the result for value .
0
example# 6208
convert value , self.sep [ self . sep ] and return value of a method self.signature [ self . signature ] called with an argument value , concatenate them together , return the result .
0
example# 6209
define the method unsign with arguments self and signed_value .
0
example# 6210
call the function signed_value with an argument value , substitute the result for signed_value .
0
example# 6211
if self.sep [ self . sep ] is not contained in signed_value ,
0
example# 6212
raise an BadSignature exception with an argument string _STR:0_ , where ' % s ' is replaced by self.sep [ self . sep ] .
1
'No "%s" found in value' ||| _STR:0_
example# 6213
call the signed_value.rsplit [ signed_value . rsplit ] method with arguments self.sep [ self . sep ] and integer 1 , substitute the result for value and sig , respectively .
0
example# 6214
call the function constant_time_compare with 2 arguments : sig and return value of the self.signature [ self . signature ] method with an argument value , if it evaluates to true ,
0
example# 6215
call the force_text function with an argument value , return the result .
0
example# 6216
raise an BadSignature exception with an argument string _STR:0_ , where ' % s ' is replaced by sig .
1
'Signature "%s" does not match' ||| _STR:0_
example# 6217
derive the class TimestampSigner from the Signer base class .
0
example# 6218
define the method timestamp with an argument self .
0
example# 6219
call the method baseconv.base62.encode [ baseconv . base62 . encode ] with result of the time.time [ time . time ] function converted to an integer , as an argument , return the result .
0
example# 6220
define the method sign with arguments self and value .
0
example# 6221
call the force_str function with an argument value , substitute the result for value .
0
example# 6222
convert value , self.sep [ self . sep ] and return value of the function timestamp , concatenate them , substitute the result for value .
0
example# 6223
call the sign method from the base class of the TimestampSigner class with an argument value , return the result
0
example# 6224
define the method unsign with arguments self , value and max_age set to None .
0
example# 6225
call the unsign method from the base class of the TimestampSigner class with an argument value , substitute the result for result .
0
example# 6226
call the result.rsplit [ result . rsplit ] method with arguments self.sep [ self . sep ] and integer 1 , substitute the result for value and timestamp , respectively .
0
example# 6227
call the baseconv.base62.decode [ baseconv . base62 . decode ] method with an argument timestamp , substitute the result for timestamp .
0
example# 6228
if max_age is not None ,
0
example# 6229
subtract timestamp from the return value of the function time.time [ time . time ] , substitute the result for age .
0
example# 6230
if age is greater than max_age ,
0
example# 6231
raise an SignatureExpired exception with an argument string _STR:0_ , where ' % s ' is replaced by age and max_age , respectively .
1
'Signature age %s > %s seconds' ||| _STR:0_
example# 6232
return value .
0
example# 6233
from __future__ import unicode_literals into default name space .
0
example# 6234
import module functools .
0
example# 6235
from importlib import import_module into default name space .
0
example# 6236
import module re .
0
example# 6237
from threading import local into default name space .
0
example# 6238
import module warnings .
0
example# 6239
from django.http [ django . http ] import Http404 into default name space .
0
example# 6240
from django.core.exceptions [ django . core . exceptions ] import ImproperlyConfigured and ViewDoesNotExist into default name space .
0
example# 6241
from django.utils.datastructures [ django . utils . datastructures ] import MultiValueDict into default name space .
0
example# 6242
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango20Warning into default name space .
0
example# 6243
from django.utils.encoding [ django . utils . encoding ] import force_str , force_text and iri_to_uri into default name space .
0
example# 6244
from django.utils.functional [ django . utils . functional ] import lazy into default name space .
0
example# 6245
from django.utils.http [ django . utils . http ] import urlquote into default name space .
0
example# 6246
from django.utils.module_loading [ django . utils . module_loading ] import module_has_submodule into default name space .
0
example# 6247
from django.utils.regex_helper [ django . utils . regex_helper ] import normalize into default name space .
0
example# 6248
from django.utils [ django . utils ] import six and lru_cache into default name space .
0
example# 6249
from django.utils.translation [ django . utils . translation ] import get_language into default name space .
0
example# 6250
call the function local , substitute the result for _prefixes .
0
example# 6251
call the function local , substitute the result _urlconf .
0
example# 6252
derive the class ResolverMatch with object as base class .
0
example# 6253
define the __init__ method with 7 arguments : self , func , args , kwargs , url_name set to None , app_name set to None and namespaces set to None .
0
example# 6254
substitute func for self.func [ self . func ] .
0
example# 6255
substitute args for self.args [ self . args ] .
0
example# 6256
substitute kwargs for self.kwargs [ self . kwargs ] .
0
example# 6257
substitute url_name for self.url_name [ self . url_name ] .
0
example# 6258
substitute app_name for self.app_name [ self . app_name ] .
0
example# 6259
if namespaces is true ,
0
example# 6260
append x to self.namespaces [ self . namespaces ] list for every x in namespaces , only if x is true .
0
example# 6261
if not ,
0
example# 6262
self.namespaces [ self . namespaces ] is an empty list .
0
example# 6263
join self.namespaces [ self . namespaces ] into a string separated with character _STR:0_ , substitute it for self.namespace [ self . namespace ] .
1
':' ||| _STR:0_
example# 6264
if func doesnt have a attribute _STR:0_ ,
1
'__name__' ||| _STR:0_
example# 6265
join func.__class__.__module__ [ func . __class__ . __module__ ] and func.__class__.__name__ [ func . __class__ . __name__ ] into a string , separated by character _STR:0_ , substitute it for self._func_path [ self . _func_path ] .
1
'.' ||| _STR:0_
example# 6266
if not ,
0
example# 6267
join func.__module__ [ func . __module__ ] and func.__name__ [ func . __name__ ] into a string , separated by character _STR:0_ , substitute it for self._func_path [ self . _func_path ] .
1
'.' ||| _STR:0_
example# 6268
if url_name exists substitute it for view_path , if not substitute .self._func_path for view_path .
0
example# 6269
append list containing view_path to self.namespaces [ self . namespaces ] list , join all the elements into a string separated by character _STR:0_ ,
1
':' ||| _STR:0_
example# 6270
substitute it for self.view_name [ self . view_name ] . define the method __getitem__ with arguments self and index .
0
example# 6271
return the element at the index index of the tuple containing 3 elements : self.func [ self . func ] , self.args [ self . args ] and self.kwargs [ self . kwargs ] .
0
example# 6272
define the method __repr__ with an argument self .
0
example# 6273
in the string _STR:0_ , replace all the occurrences of :
1
"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_name=%s, namespaces=%s)" ||| _STR:0_
example# 6274
string ' % s ' with self._func_path [ self . _func_path ] , self.args [ self . args ] , self.kwargs [ self . kwargs ] , self.url_name [ self . url_name ] , self.app_name [ self . app_name ] and self.namespaces [ self . namespaces ] , respectively . derive the class Resolver404 with Http404 as base class .
0
example# 6275
do nothing .
0
example# 6276
derive the class NoReverseMatch with Exception as base class .
0
example# 6277
do nothing .
0
example# 6278
method lru_cache.lru_cache [ lru_cache . lru_cache ] with an argument maxsize set to None , as a decorator ,
0
example# 6279
define the function get_callable with arguments lookup_view and can_fail set to boolean False .
0
example# 6280
if lookup_view is a callable object ,
0
example# 6281
return lookup_view .
0
example# 6282
call the function get_mod_func with an argument lookup_view , store the result in mod_name and func_name , respectively .
0
example# 6283
if func_name is false ,
0
example# 6284
if can_fail is true ,
0
example# 6285
return lookup_view .
0
example# 6286
if not ,
0
example# 6287
raise an ImportError exception with an argument string _STR:0_ ,
1
"Could not import '%s'. The path must be fully qualified." ||| _STR:0_
example# 6288
where ' % s ' is replaced by lookup_view . try ,
0
example# 6289
call the function import_module with an argument mod_name .
0
example# 6290
if ImportError exception is caught .
0
example# 6291
if can_fail is true ,
0
example# 6292
return lookup_view
0
example# 6293
if not ,
0
example# 6294
call the function get_mod_func with an argument mod_name , store the result in parentmod and submod , respectively .
0
example# 6295
if submod is true and return value of the function module_has_submodule called with 2 arguments : result of the function :
0
example# 6296
import_module called with an argument parentmod and submod , evaluates to false . raise an ViewDoesNotExist exception with an argument string _STR:0_ ,
1
"Could not import '%s'. Parent module %s does not exist." ||| _STR:0_
example# 6297
where string ' % s ' is replaced by lookup_view and mod_name , respectively . if not ,
0
example# 6298
raise an exception .
0
example# 6299
if not ,
0
example# 6300
try ,
0
example# 6301
get func_name attribute from the mod object , substitute it for view_func .
0
example# 6302
if AttributeError exception is caught .
0
example# 6303
if can fail is true ,
0
example# 6304
return lookup_view
0
example# 6305
if not ,
0
example# 6306
raise an ViewDoesNotExist exception with an argument string _STR:0_ ,
1
"Could not import '%s'. View does not exist in module %s." ||| _STR:0_
example# 6307
where string ' % s ' is replaced by lookup_view and mod_name , respectively . if not ,
0
example# 6308
if view_function is not a callable function ,
0
example# 6309
raise an ViewDoesNotExist exception with an argument string _STR:0_ ,
1
"Could not import '%s.%s'. View is not callable." ||| _STR:0_
example# 6310
where string ' % s ' is replaced by mod_name and func_name , respectively . return view_func .
0
example# 6311
method lru_cache.lru_cache [ lru_cache . lru_cache ] with an argument maxsize set to None , as a decorator ,
0
example# 6312
define the function get_resolver with an argument urlconf .
0
example# 6313
if urlconf is None ,
0
example# 6314
from django.conf [ django . conf ] import settings into default name space .
0
example# 6315
substitute settings.ROOT_URLCONF [ settings . ROOT_URLCONF ] for urlconf .
0
example# 6316
return an instance of a class RegexURLResolver created with arguments : raw string _STR:0_ and urlconf .
1
'^/' ||| _STR:0_
example# 6317
method lru_cache.lru_cache [ lru_cache . lru_cache ] with an argument maxsize set to None , as a decorator ,
0
example# 6318
define the function get_ns_resolver with arguments ns_pattern and resolver .
0
example# 6319
ns_resolver is class instance of a class RegexURLResolver , created with 2 arguments : ns_pattern and resolver.url_patterns [ resolver . url_patterns ] .
0
example# 6320
return an instance of a class RegexURLResolver created with arguments : raw string _STR:0_ and a list containing an element ns_resolver .
1
'^/' ||| _STR:0_
example# 6321
define the function get_mod_func with an argument callback .
0
example# 6322
try ,
0
example# 6323
call the method callback.rindex [ callback . rindex ] with an argument character _STR:0_ , substitute the result for dot .
1
'.' ||| _STR:0_
example# 6324
if ValueError exception is caught ,
0
example# 6325
return callback and a empty string .
0
example# 6326
return callback split into two lists at the dot index , without the element at the dot index .
0
example# 6327
derive the class LocaleRegexProvider with object as base class .
0
example# 6328
define the method __init__ with arguments self and regex .
0
example# 6329
substitute regex for self._regex [ self . _regex ] .
0
example# 6330
self._regex_dict [ self . _regex_dict ] is an empty dictionary .
0
example# 6331
property decorator ,
0
example# 6332
define the method regex with an argument self .
0
example# 6333
call the function get_language , substitute the result for language_code .
0
example# 6334
if language_code is not contained in self._regex_dict [ self . _regex_dict ] ,
0
example# 6335
if self.regex [ self . regex ] is not an instance of six.string_types [ six . string_types ] ,
0
example# 6336
substitute self._regex [ self . _regex ] for regex .
0
example# 6337
if not ,
0
example# 6338
call the function force_text with arguments self and _regex , substitute the result for regex .
0
example# 6339
try ,
0
example# 6340
call the function re.compile [ re . compile ] with arguments regex and re.UNICODE [ re . UNICODE ] , substitute the result for compiled_regex .
0
example# 6341
if re.error [ re . error ] , renamed to e , is caught ,
0
example# 6342
raise an ImproperlyConfigured exception with argument string _STR:0_ ,
1
'"%s" is not a valid regular expression: %s' ||| _STR:0_
example# 6343
where ' % s ' is replace by regex and return value of the function six.text_type [ six . text_type ] with an argument e. substitute the compiled_regex for value under the language_code key of the self._regex_dict [ self . _regex_dict ] dictionary .
0
example# 6344
return the value under the language_code key of the self._regex_dict [ self . _regex_dict ] dictionary .
0
example# 6345
derive the class RegexURLPattern with LocaleRegexProvider as base class .
0
example# 6346
define the method __init__ with 5 arguments : self , regex , callback , default_args set to None and name set to None .
0
example# 6347
call the method LocaleRegexProvider.__init__ [ LocaleRegexProvider . __init__ ] with arguments self and regex .
0
example# 6348
if callback is an callable object ,
0
example# 6349
substitute callback for self._callback [ self . _callback ] .
0
example# 6350
if not ,
0
example# 6351
self._callback [ self . _callback ] is None .
0
example# 6352
substitute callback for self._callback_str [ self . _callback_str ] .
0
example# 6353
if default_args exists substitute it for self.default_args [ self . default_args ] , if not , self.default_args [ self . default_args ] is an empty dictionary .
0
example# 6354
substitute name for self.name [ self . name ] .
0
example# 6355
define the method __repr__ with an argument self .
0
example# 6356
substitute ' % s ' in string _STR:0_ with self.__class__.__name__ [ self . __class__ . __name__ ] , self.name [ self . name ] and self.regex.pattern [ self . regex . pattern ] , respectively ,
1
'<%s %s %s>' ||| _STR:0_
example# 6357
use it as an argument for the call to the force_str function , return the result . define the method add_prefix with arguments self and prefix .
0
example# 6358
if prefix is false , and self doesnt have _STR:0_ attribute ,
1
'_callback_str' ||| _STR:0_
example# 6359
return nothing .
0
example# 6360
joint prefix , character _STR:0_ and self._callback_str [ self . _callback_str ] together , substitute the result for self._callback_str [ self . _callback_str ] .
1
'.' ||| _STR:0_
example# 6361
define the method resolve with arguments self and path .
0
example# 6362
call the method self.regex.search [ self . regex . search ] with an argument path , substitute the result for match .
0
example# 6363
if match is true ,
0
example# 6364
call the method match.groupdict [ match . groupdict ] , substitute the result for kwargs .
0
example# 6365
if kwargs is true ,
0
example# 6366
args is an empty tuple .
0
example# 6367
if not ,
0
example# 6368
call the method match.groups [ match . groups ] , substitute the result for args .
0
example# 6369
call the method kwargs.update [ kwargs . update ] with an argument self.default_args [ self . default_args ] .
0
example# 6370
return an instance of a ResolverMatch class , crated with arguments self.callback [ self . callback ] , args , kwargs and self.name [ self . name ] .
0
example# 6371
property decorator ,
0
example# 6372
define the method callback with an argument self .
0
example# 6373
if self._callback [ self . _callback ] is not None ,
0
example# 6374
return self._callback [ self . _callback ] .
0
example# 6375
call the function get_callable with an argument self._callback_str [ self . _callback_str ] , substitute the result for self._callback [ self . _callback ] .
0
example# 6376
return self._callback [ self . _callback ] .
0
example# 6377
derive the class RegexURLResolver with LocaleRegexProvider as base class .
0
example# 6378
define the method __init__ with 6 arguments : self , regex , urlconf_name , default_kwargs set to None , app_name set to None and namespace set to None .
0
example# 6379
call the method LocaleRegexProvider.__init__ [ LocaleRegexProvider . __init__ ] with arguments self and regex .
0
example# 6380
substitute urlconf_name for self.urlconf_name [ self . urlconf_name ] .
0
example# 6381
if urlconf_name is not an instance of six.string_types [ six . string_types ] class ,
0
example# 6382
substitute self.urlconf_name [ self . urlconf_name ] for self.urlconf_module [ self . urlconf_module ] .
0
example# 6383
self.callback [ self . callback ] is None .
0
example# 6384
if default_kwargs exists , substitute it for self.default_kwargs [ self . default_kwargs ] , otherwise self.default_kwargs [ self . default_kwargs ] is an empty dictionary .
0
example# 6385
substitute namespace for self.namespace [ self . namespace ] .
0
example# 6386
substitute app_name for self.app_name [ self . app_name ] .
0
example# 6387
self._reverse_dict [ self . _reverse_dict ] is an empty dictionary .
0
example# 6388
self._namespace_dict [ self . _namespace_dict ] is an empty dictionary .
0
example# 6389
self._app_dict [ self . _app_dict ] is an empty dictionary .
0
example# 6390
self._callback_strs [ self . _callback_strs ] is an empty set .
0
example# 6391
self._populated [ self . _populated ] is boolean False .
0
example# 6392
define the method __repr__ with an argument self .
0
example# 6393
if self.urlconf_name [ self . urlconf_name ] is an instance of a list type and its length is not zero .
0
example# 6394
replace ' % s ' in string _STR:0_ with __class__.__name__ [ __class__ . __name__ ] field of first element of self.urlconf_name [ self . urlconf_name ] , substitute it for urlconf_repr .
1
'<%s list>' ||| _STR:0_
example# 6395
if not ,
0
example# 6396
create a printable representation of self.urlconf_name [ self . urlconf_name ] object , substitute it for urlconf_repr .
0
example# 6397
replace all ' % s ' in string _STR:0_ with self.__class__.__name__ [ self . __class__ . __name__ ] , urlconf_repr , self.app_name [ self . app_name ] ,
1
'<%s %s (%s:%s) %s>' ||| _STR:0_
example# 6398
self.namespace [ self . namespace ] and self.regex.pattern [ self . regex . pattern ] , respectively . return it . define the method _populate with an argument self .
0
example# 6399
lookups is an instance of the MultiValueDict class .
0
example# 6400
namespaces is an empty dictionary .
0
example# 6401
apps is an empty dictionary .
0
example# 6402
call the function get_language , substitute the result for language_code .
0
example# 6403
for every pattern in reversed list self.url_patterns [ self . url_patterns ] ,
0
example# 6404
if pattern has an attribute _STR:0_ ,
1
'_callback_str' ||| _STR:0_
example# 6405
call the method self._callback_strs.add [ self . _callback_strs . add ] with an argument pattern._callback_str [ pattern . _callback_str ] .
0
example# 6406
otherwise , if pattern has an _STR:0_ attribute .
1
'_callback' ||| _STR:0_
example# 6407
substitute pattern._callback [ pattern . _callback ] for callback .
0
example# 6408
if callback is an instance of functools.partial [ functools . partial ] object ,
0
example# 6409
substitute callback.func [ callback . func ] for callback .
0
example# 6410
if callback doesnt have _STR:0_ attribute ,
1
'__name__' ||| _STR:0_
example# 6411
join callback.__module__ [ callback . __module__ ] , character _STR:0_ and callback.__class__.__name__ [ callback . __class__ . __name__ ] together , substitute the result for lookup_str .
1
"." ||| _STR:0_
example# 6412
if not ,
0
example# 6413
join together callback.__module__ [ callback . __module__ ] , character _STR:0_ and callback.__name__ [ callback . __name__ ] , substitute the result for lookup_str .
1
"." ||| _STR:0_
example# 6414
call the method self._callback_strs.add [ self . _callback_strs . add ] with an argument lookup_str .
0
example# 6415
substitute pattern.regex.pattern [ pattern . regex . pattern ] for p_pattern .
0
example# 6416
if p_pattern starts with a string _STR:0_ ,
1
'^' ||| _STR:0_
example# 6417
remove the first element from p_pattern .
0
example# 6418
if pattern is an instance of RegexURLResolver class ,
0
example# 6419
if pattern.namespace [ pattern . namespace ] is true ,
0
example# 6420
substitute the tuple containing 2 elements p_pattern and pattern for value under the pattern.namespace [ pattern . namespace ] key of the namespaces dictionary .
0
example# 6421
if pattern.app_name [ pattern . app_name ] is true ,
0
example# 6422
call the method apps.setdefault [ apps . setdefault ] with 2 arguments : pattern and an empty list , append to the resulting object pattern.namespace [ pattern . namespace ] .
0
example# 6423
if not ,
0
example# 6424
substitute pattern.regex.pattern [ pattern . regex . pattern ] for parent_pat .
0
example# 6425
for every name in pattern.reverse_dict [ pattern . reverse_dict ] ,
0
example# 6426
for every matches , pat and defaults in return value of the method pattern.reverse_dict.getlist [ pattern . reverse_dict . getlist ] called with an argument name ,
0
example# 6427
call the method normalize with sum of parent_pat and pat as an argument , substitute the result for new_matches .
0
example# 6428
call the method lookups.appendlist [ lookups . appendlist ] with 2 arguments : name and a tuple containing 3 elements : new_matches , sum of p_pattern and pat ,
0
example# 6429
and dictionary created by applying defaults mapping on the pattern.default_kwargs [ pattern . default_kwargs ] dictionary . for every namespace and tuple containing : prefix and sub_pattern , in return value of the method pattern.namespace_dict.items [ pattern . namespace_dict . items ] ,
0
example# 6430
substitute tuple containing 2 elements : sum of p_pattern and prefix , and sub_pattern for value under the namespace key of the namespace dictionary .
0
example# 6431
for every app_name and namespace_list in pattern.app_dict.items [ pattern . app_dict . items ] method return value ,
0
example# 6432
call the method apps.setdefault [ apps . setdefault ] with 2 arguments : app_name and an empty list , extend the resulting list with namespaces_list .
0
example# 6433
call the method self._callback_strs.update [ self . _callback_strs . update ] with an argument pattern._callback_strs [ pattern . _callback_strs ] .
0
example# 6434
if not ,
0
example# 6435
call the function normalize with an argument p_pattern , substitute the result for bits .
0
example# 6436
call the method lookups.appendlist [ lookups . appendlist ] with 2 arguments : pattern.callback [ pattern . callback ] and a tuple containing 3 elements : bits , p_pattern ,
0
example# 6437
and pattern.default_args [ pattern . default_args ] . if pattern.name [ pattern . name ] is not None ,
0
example# 6438
call the method lookups.appendlist [ lookups . appendlist ] with 2 arguments : pattern.name [ pattern . name ] and a tuple containing 3 elements : bits , p_pattern ,
0
example# 6439
and pattern.default_args [ pattern . default_args ] . substitute lookups for the value under language_code key of the self._reverse_dict [ self . _reverse_dict ] dictionary .
0
example# 6440
substitute namespaces for the value under language_code key of the self._namespace_dict [ self . _namespace_dict ] dictionary .
0
example# 6441
substitute apps for the value under language_code key of the self._app_dict [ self . _app_dict ] dictionary .
0
example# 6442
self._populated [ self . _populated ] is boolean True .
0
example# 6443
property decorator ,
0
example# 6444
define the method reverse_dict with an argument self .
0
example# 6445
call the function get_language , substitute the result for language_code .
0
example# 6446
if language_code is not contained in self._reverse_dict [ self . _reverse_dict ]
0
example# 6447
call the method self._populate [ self . _populate ] .
0
example# 6448
return the value under the language_code key of the self._reverse_dict [ self . _reverse_dict ] dictionary .
0
example# 6449
property decorator ,
0
example# 6450
define the method namespace_dict with an argument self .
0
example# 6451
call the method get_language , substitute the result for language_code .
0
example# 6452
if language_code is not contained in self._namespace_dict [ self . _namespace_dict ] ,
0
example# 6453
call the method self._populate [ self . _populate ] .
0
example# 6454
return the value under the language_code key of the self._namespace_dict [ self . _namespace_dict ] dictionary .
0
example# 6455
property decorator ,
0
example# 6456
define the method app_dict with an argument self .
0
example# 6457
call the method get_language , substitute the result for language_code .
0
example# 6458
if language_code is not containsed in self._app_dict [ self . _app_dict ]
0
example# 6459
call the method self._populate [ self . _populate ] .
0
example# 6460
return the value under the language_code key of the self._app_dict [ self . _app_dict ] dictionary .
0
example# 6461
define the method resolve with an argument self .
0
example# 6462
call the function force_text with an argument path , substitute the result for path .
0
example# 6463
tried is an empty list .
0
example# 6464
call the function self.regex.search [ self . regex . search ] with an argument path , substitute the result for match .
0
example# 6465
if match is true ,
0
example# 6466
slice the path list from the result of the match.end [ match . end ] method as the start index to the end , substitute it for new_path .
0
example# 6467
for every pattern in self.url_patterns [ self . url_patterns ] ,
0
example# 6468
try ,
0
example# 6469
call the method pattern.resolve [ pattern . resolve ] with an argument new_path , substitute the result for sub_match .
0
example# 6470
if Resolver404 , renamed to e , exception is caught ,
0
example# 6471
call the get method with an argument string _STR:0_ on the first element of the e.args [ e . args ] , substitute the result for sub_tried .
1
'tried' ||| _STR:0_
example# 6472
if sub_tried is not None ,
0
example# 6473
call the method tried.extend [ tried . extend ] with an argument : t added to a list containing element pattern , for every t in sub_tried .
0
example# 6474
if not ,
0
example# 6475
append list containing pattern to tried .
0
example# 6476
if not ,
0
example# 6477
if sub_match is true ,
0
example# 6478
sub_match_dict is a dictionary created from self.default_kwargs [ self . default_kwargs ] dictionary using mapping function match.groupdict [ match . groupdict ] .
0
example# 6479
call the method sub_match_dict.update [ sub_match_dict . update ] with an argument sub_match.kwargs [ sub_match . kwargs ] .
0
example# 6480
return an instance of a class ResolverMatch created with 6 arguments : sub_match.func [ sub_match . func ] , sub_match.args [ sub_match . args ] , sub_match_dict ,
0
example# 6481
sub_match.url_name [ sub_match . url_name ] , self.app_name [ self . app_name ] if it exists or if not sub_match.app_name [ sub_match . app_name ] and sub_match.namespaces [ sub_match . namespaces ] list appended to self.name [ self . name ] . append pattern to tried list .
0
example# 6482
raise an Resolver404 exception with an argument dictionary containing 2 entries : new_path for _STR:0_ and tried for _STR:1_ .
2
'tried' ||| _STR:1_
'path' ||| _STR:0_
example# 6483
raise an Resolver404 exception with an argument dictionary containing 1 entry : path for _STR:0_ .
1
'path' ||| _STR:0_
example# 6484
property decorator ,
0
example# 6485
define the method urlconf_module with an argument self .
0
example# 6486
try ,
0
example# 6487
return self._urlconf_module [ self . _urlconf_module ] .
0
example# 6488
if AttributeError exception is caught .
0
example# 6489
call the function import_module with argument self.urlconf_name [ self . urlconf_name ] , substitute the result for self._urlconf_module [ self . _urlconf_module ] .
0
example# 6490
return self._urlconf_module [ self . _urlconf_module ] .
0
example# 6491
property decorator ,
0
example# 6492
define the method url_patterns with an argument self .
0
example# 6493
get attribute _STR:0_ form the self.urlconf_module [ self . urlconf_module ] , substitute it for patterns , if the attribute doesnt exist ,
1
"urlpatterns" ||| _STR:0_
example# 6494
substitute self.urlconf_module [ self . urlconf_module ] for self.urlconf_module [ self . urlconf_module ] . try ,
0
example# 6495
call the function iter with an argument patterns .
0
example# 6496
if TypeError exception is caught ,
0
example# 6497
msg is a string _STR:0_The included urlconf _STR:1_ does not appear to have any patterns in it .
2
'{name}' ||| _STR:1_
"" ||| _STR:0_
example# 6498
If you see valid patterns in the file then the issue is probably caused by a circular import . '' raise an ImproperlyConfigured exception with an argument : return value of the method msg.format [ msg . format ] , called with an argument name set to self.urlconf_name [ self . urlconf_name ] .
0
example# 6499
return patterns .
0
example# 6500
define the method resolve_error_handler with arguments self and view_type .
0
example# 6501
replace ' % s ' in the string _STR:0_ with view_type , use it as an name of the attribute to get from the self.urlconf_module [ self . urlconf_module ] ,
1
'handler%s' ||| _STR:0_
example# 6502
substitute it for callback , if the attribute doesnt exists , callback is None . if not callback ,
0
example# 6503
from django.conf [ django . conf ] import urls into default name space ,
0
example# 6504
replace ' % s ' in the string _STR:0_ with view_type , use it as an name of the attribute to get from the urls , substitute it for callback .
1
'handler%s' ||| _STR:0_
example# 6505
call the function get_callable with an argument callback , return the result and an empty dictionary .
0
example# 6506
define the method reverse with arguments self , lookup_view , unpacked list args and unpacked dictionary kwargs .
0
example# 6507
call the method self._reverse_with_prefix [ self . _reverse_with_prefix ] with 4 arguments : lookup_view , an empty string , unpacked list args and unpacked dictionary kwargs .
0
example# 6508
define the method _reverse_with_prefix with arguments self , lookup_view , _prefix , unpacked list args and unpacked dictionary kwargs .
0
example# 6509
if args and kwargs are both true ,
0
example# 6510
raise an ValueError exception with an argument string _STR:0_ .
1
"Don't mix *args and **kwargs in call to reverse()!" ||| _STR:0_
example# 6511
call the function force_text with an argument v , for every v in args , put the results in a text_args list .
0
example# 6512
text_kwargs is a dictionary created from the result of the function force_text with an argument v , mapped through function k , for every k and v in return value of the kwargs.items [ kwargs . items ] .
0
example# 6513
if self._populated [ self . _populated ] is false ,
0
example# 6514
call the method self._populate [ self . _populate ] ,
0
example# 6515
substitute lookup_view for original_lookup ,
0
example# 6516
try ,
0
example# 6517
if lookup_view is contained in self._callback_strs [ self . _callback_strs ] ,
0
example# 6518
call the function get_callable with arguments lookup_view and boolean True , substitute the result for lookup_view .
0
example# 6519
if ImportError , AttributeError , renamed to e , exceptions are caught ,
0
example# 6520
raise an NoReverseMatch exception with an argument string _STR:0_ , where ' % s ' is replaced with lookup_view and e , respectively .
1
"Error importing '%s': %s." ||| _STR:0_
example# 6521
if not ,
0
example# 6522
if original_lookup and lookup_view are not callable objects ,
0
example# 6523
call the function warnings.warn [ warnings . warn ] with 3 arguments : string _STR:0_ , with ' % s ' replaced with
1
'Reversing by dotted path is deprecated (%s).' ||| _STR:0_
example# 6524
original_lookup , RemovedInDjango20Warning and stacklevel set to integer 3. call the method self.reverse_dict.getlist [ self . reverse_dict . getlist ] with an argument lookup_view , substitute the result for possibilities .
0
example# 6525
call the function urlquote with an argument _prefix , use the result as an argument for the call to the normalize function ,
0
example# 6526
substitute the fitst element of the result for prefix_norm and prefix_args , respectively . for every possibility , pattern and defaults in possibilities ,
0
example# 6527
for every result and params in possibility ,
0
example# 6528
if args is true ,
0
example# 6529
if length of args is not equal to the sum of the lengths of params and prefix_args ,
0
example# 6530
skip this loop iteration .
0
example# 6531
create a list of tuples out of 2 lists : appended params list to prefix_args and text_args , covert the result into a dictionary ,
0
example# 6532
substitute it for candidate_subs . if not ,
0
example# 6533
if the union of the kwargs and defaults dictionary keys converted into sets is not the same as the union of the defaults and prefix
0
example# 6534
dictionary keys converted into sets , skip this loop iteration ,
0
example# 6535
matches is boolean True ,
0
example# 6536
for every k and v in return value of the function defaults.items [ defaults . items ] ,
0
example# 6537
if the value of the kwargs dictionary under the key k is not equal to v ,
0
example# 6538
matches is boolean False .
0
example# 6539
break from this loop execution .
0
example# 6540
if matches is false ,
0
example# 6541
skip this loop iteration ,
0
example# 6542
substitute text_kwargs for candidate_subs .
0
example# 6543
replace all the occurrences of the _STR:0_ string for _STR:1_ , append result to the previous result , substitute it for candidate_pat .
2
'%%' ||| _STR:1_
'%' ||| _STR:0_
example# 6544
call the function re.search [ re . search ] with 3 arguments : string _STR:0_ , with ' % s ' replaced for prefix_norm and pattern , respectively ,
1
'^%s%s' ||| _STR:0_
example# 6545
candidate_pat formated with candidate_subs and re.UNICODE [ re . UNICODE ] . candidate_subs is dictionary created from elements in return value of the function urlquote called with argument v ,
0
example# 6546
mapped with a function k , for every k and v in return value of the method candidate_subs.items [ candidate_subs . items ] . format candidate_pat with candidate_subs , return the result .
0
example# 6547
get the attribute _STR:0_ from the getattr , if it exists substitute it for m , if not , m is None .
1
'__module__' ||| _STR:0_
example# 6548
get the attribute _STR:0_ from the getattr , if it exists substitute it for m , if not , m is None .
1
'__name__' ||| _STR:0_
example# 6549
if m and n are not None ,
0
example# 6550
join m and n into a string , separated by _STR:0_ , substitute the result for lookup_view_s .
1
'.' ||| _STR:0_
example# 6551
if not ,
0
example# 6552
substitute lookup_view for lookup_view_s .
0
example# 6553
append pattern into a list patterns , for every possibility , pattern and defaults in possibilities .
0
example# 6554
raise an NoReverseMatch exception with an argument string _STR:0_ ,
1
"Reverse for '%s' with arguments '%s' and keyword " ||| _STR:0_
example# 6555
_STR:0_ , replace ' % s ' with lookup_view_s , args , kwargs , length of patterns , patterns , and respectively . derive the class LocaleRegexURLResolver with RegexURLResolver as base class .
1
"arguments '%s' not found. %d pattern(s) tried: %s" ||| _STR:0_
example# 6556
define the __init__ method with 5 arguments : self , urlconf_name , default_kwargs set to None , app_name set to None and namespace set to None .
0
example# 6557
call the __init__ method of the base class of the class LocaleRegexURLResolver , with arguments : None , urlconf_name , default_kwargs , app_name and namespace .
0
example# 6558
property decorator ,
0
example# 6559
define the method regex with an argument self .
0
example# 6560
call the function get_language , substitute the result for language_code .
0
example# 6561
if language_code is not contained in self._regex_dict [ self . _regex_dict ] ,
0
example# 6562
call the function re.compile [ re . compile ] with 2 arguments , string _STR:0_ , where ' % s ' is replaced with language_code and re.UNICODE [ re . UNICODE ] , substitute the result for regex_compiled .
1
'^%s/' ||| _STR:0_
example# 6563
substitute the regex_compiled for value under the language_code key of the self._regex_dict [ self . _regex_dict ] dictionary .
0
example# 6564
return the value under the language_code of the self._regex_dict [ self . _regex_dict ] dictionary .
0
example# 6565
define the function resolve with arguments path and urlconf set to None .
0
example# 6566
if urlconf is None ,
0
example# 6567
call the function get_urlconf with an argument urlconf .
0
example# 6568
call the function get_resolver with an argument urlconf , on the result call the method resolve with an argument path , return it .
0
example# 6569
define the function reverse with 6 arguments : viewname , urlconf set to None , args set to None , kwargs set to None ,
0
example# 6570
prefix set to None , current_app set to None . if urlconf is None ,
0
example# 6571
call the function get_urlconf with an argument urlconf .
0
example# 6572
call the function get_resolver with an argument urlconf , substitute the result for resolver .
0
example# 6573
if args in None of boolean False , substitute it for an empty list .
0
example# 6574
if args in None of boolean False , substitute it for an empty dictionary .
0
example# 6575
if prefix is None ,
0
example# 6576
call the function get_script_prefix , substitute the result for prefix .
0
example# 6577
if viewname is not an instance of the six.string_types [ six . string_types ] object ,
0
example# 6578
substitute viewname for view .
0
example# 6579
if not ,
0
example# 6580
call the method viewname.split [ viewname . split ] , with an argument _STR:0_ , substitute the result for parts .
1
':' ||| _STR:0_
example# 6581
call the method parts.reverse [ parts . reverse ] .
0
example# 6582
substitute first element of parts for view .
0
example# 6583
substitute parts , without the first element , for path .
0
example# 6584
resolved_path is an empty list .
0
example# 6585
ns_pattern is an empty string .
0
example# 6586
while path is true ,
0
example# 6587
pop the element form the path as substitute the result for ns .
0
example# 6588
try ,
0
example# 6589
get the value under the ns key of the resolver.app_dict [ resolver . app_dict ] dictionary , substitute it for app_list .
0
example# 6590
if current_app and is true and current_app is contained in app_list ,
0
example# 6591
substitute current_app for ns .
0
example# 6592
otherwise if ns is not contained in app_list ,
0
example# 6593
substitute first element of app_list for ns .
0
example# 6594
if KeyError exception is caught ,
0
example# 6595
do nothing .
0
example# 6596
try ,
0
example# 6597
substitute the value under the ns key of the resolver.namespace_dict [ resolver . namespace_dict ] dictionary for extra and resolver , respectively .
0
example# 6598
call the method resolved_path.append [ resolved_path . append ] with an argument ns .
0
example# 6599
add ns_pattern and extra , substitute the result for ns_pattern .
0
example# 6600
if KeyError , renamed to key , exception is caught ,
0
example# 6601
if resolved_path is true ,
0
example# 6602
raise an NoReverseMatch exception with an argument string _STR:0_ ,
1
"%s is not a registered namespace inside '%s'" ||| _STR:0_
example# 6603
respectively replace ' % s ' with key and elements of the resolved_path joined into a string , separated by _STR:0_ . if not ,
1
':' ||| _STR:0_
example# 6604
raise an NoReverseMatch exception with an argument string _STR:0_ , with ' % s ' replaced with key .
1
"%s is not a registered namespace" ||| _STR:0_
example# 6605
if ns_pattern is true ,
0
example# 6606
call the function get_ns_resolver with arguments ns_pattern and resolver , substitute the result for resolver .
0
example# 6607
call the method resolver._reverse_with_prefix [ resolver . _reverse_with_prefix ] with 4 arguments : view , prefix , unpacked list args , unpacked dictionary kwargs ,
0
example# 6608
use the result as an argument for the call to the function iri_to_uri , return the result . call the function lazy with arguments reverse and str , substitute the results for reverse_lazy .
0
example# 6609
define the function clear_url_caches .
0
example# 6610
call the function get_callable.cache_clear [ get_callable . cache_clear ] .
0
example# 6611
call the function get_resolver.cache_clear [ get_resolver . cache_clear ] .
0
example# 6612
call the function get_ns_resolver.cache_clear [ get_ns_resolver . cache_clear ] .
0
example# 6613
define the function set_script_prefix with an argument prefix .
0
example# 6614
if prefix doesnt end with character _STR:0_ ,
1
'/' ||| _STR:0_
example# 6615
append _STR:0_ to prefix .
1
'/' ||| _STR:0_
example# 6616
substitute prefix for _prefixes.values [ _prefixes . values ] .
0
example# 6617
define the function get_script_prefix .
0
example# 6618
get _STR:0_ attribute of the _prefixes , if it exists , return it , otherwise return _STR:1_ .
2
'value' ||| _STR:0_
'/' ||| _STR:1_
example# 6619
define the function clear_script_prefix .
0
example# 6620
try ,
0
example# 6621
delete _prefixes.values [ _prefixes . values ] .
0
example# 6622
if AttributeError exception is caught ,
0
example# 6623
do nothing .
0
example# 6624
define the function set_urlconf with an argument urlconf_name .
0
example# 6625
if urlconf_name is true ,
0
example# 6626
substitute urlconf_name for _urlconfs.value [ _urlconfs . value ] .
0
example# 6627
if not ,
0
example# 6628
if _urlconfs has an attribute _STR:0_ ,
1
'value' ||| _STR:0_
example# 6629
delete _urlconfs.value [ _urlconfs . value ] .
0
example# 6630
define the function get_urlconf with an argument default set to None .
0
example# 6631
get the _STR:0_ attribute of the _urlconfs , if it exists return it , otherwise return defaults .
1
'value' ||| _STR:0_
example# 6632
define the function is_valid_path with arguments path and urlconf set to None .
0
example# 6633
try ,
0
example# 6634
call the function resolve with arguments path and urlconf .
0
example# 6635
return boolean True .
0
example# 6636
if Resolver404 exception is caught ,
0
example# 6637
return boolean False .
0
example# 6638
from __future__ import unicode_literals into default name space .
0
example# 6639
import module re .
0
example# 6640
from django.core.exceptions [ django . core . exceptions ] import ValidationError into default name space .
0
example# 6641
from django.utils.deconstruct [ django . utils . deconstruct ] import deconstructible into default name space .
0
example# 6642
from django.utils.translation [ django . utils . translation ] import ugettext_lazy as _ and ungettext_lazy into default name space .
0
example# 6643
from django.utils.encoding [ django . utils . encoding ] import force_text into default name space .
0
example# 6644
from django.utils.ipv6 [ django . utils . ipv6 ] import is_valid_ipv6_address into default name space .
0
example# 6645
from django.utils [ django . utils ] import six into default name space .
0
example# 6646
from django.utils.six.moves.urllib.parse [ django . utils . six . moves . urllib . parse ] import urlsplit and urlunsplit into default name space .
0
example# 6647
EMPTY_VALUES is a tuple containing 5 initial elements : None , empty string , empty list , empty tuple and an empty dictionary .
0
example# 6648
decorator deconstructible ,
0
example# 6649
derive the class RegexValidator form the object base class .
0
example# 6650
regex is an empty string .
0
example# 6651
call a function _ with a string _STR:0_ as an argument , substitute the result for message .
1
'Enter a valid value.' ||| _STR:0_
example# 6652
code is a string _STR:0_
1
'invalid' ||| _STR:0_
example# 6653
inverse_match is boolean False .
0
example# 6654
flags is a integer 0 .
0
example# 6655
define the method __init__ with 6 arguments : self , regex set to None , message set to None , code set to None ,
0
example# 6656
inverse_match set to None and flags set to None . if regex is not None ,
0
example# 6657
substitute regex for self.regex [ self . regex ] .
0
example# 6658
if message is not None ,
0
example# 6659
substitute message for self.message [ self . message ] .
0
example# 6660
if code is not None ,
0
example# 6661
substitute code for self.code [ self . code ] .
0
example# 6662
if inverse_match is not None ,
0
example# 6663
substitute inverse_match for self.inverse_match [ self . inverse_match ] .
0
example# 6664
if flags is not None ,
0
example# 6665
substitute flags for self.flags [ self . flags ] .
0
example# 6666
if self.flags [ self . flags ] is true and self.regex [ self . regex ] is not an instance of a six.string_types [ six . string_types ] type ,
0
example# 6667
raise an TypeError exception with an argument string _STR:0_ .
1
"If the flags are set, regex must be a regular expression string." ||| _STR:0_
example# 6668
if self.regex [ self . regex ] is not an instance of a six.string_types [ six . string_types ] type ,
0
example# 6669
call the re.compile [ re . compile ] function with self.regex [ self . regex ] and self.flags [ self . flags ] as arguments , substitute the result for self.regex [ self . regex ] .
0
example# 6670
define the method __call__ with arguments self and value .
0
example# 6671
if self.inverse_match [ self . inverse_match ] equals to return value of the self.regex.search [ self . regex . search ] method converted to boolean , called with argument force_text ( value ) ,
0
example# 6672
raise a ValidationError exception with arguments self.message [ self . message ] and code set to self.code [ self . code ] .
0
example# 6673
define the method __eq__ with arguments self and other .
0
example# 6674
evaluate the logical expression , if other is an instance of RegexValidator and self.regex.pattern [ self . regex . pattern ] equals to other.regex.pattern [ other . regex . pattern ] ,
0
example# 6675
and self.regex.flags [ self . regex . flags ] equals to other.regex.flags [ other . regex . flags ] and self.message [ self . message ] equals to other.message [ other . message ] and self.code [ self . code ] equals to other.code [ other . code ] , and self.inverse_match [ self . inverse_match ] equals to other.inverse_match [ other . inverse_match ] , return the result . define the method __ne__ with arguments self and other .
0
example# 6676
if self equals to other return boolean False , otherwise return boolean True .
0
example# 6677
decorator deconstructible ,
0
example# 6678
derive the class URLValidator form the RegexValidator base class .
0
example# 6679
call the re.compile [ re . compile ] function with 2 arguments : raw string _STR:0_ ,
1
"^(?:[a-z0-9\.\-]*)://(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+" ||| _STR:0_
example# 6680
_STR:0_ , _STR:1_ and re.IGNORECASE [ re . IGNORECASE ] , substitute the result for regex . call a function _ with a string _STR:2_ as an argument , substitute the result for message .
3
"(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}(?<!-)\.?)|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\[?[A-F0-9]*:[A-F0-9:]+\]?)(?::\d+)?(?::\d+)?(?:/" ||| _STR:0_
'Enter a valid value.' ||| _STR:2_
"?|[/?]\S+)$" ||| _STR:1_
example# 6681
schemes is a list containing 4 initial elements : _STR:0_ , _STR:1_ , _STR:2_ and _STR:3_ .
4
'https' ||| _STR:1_
'ftps' ||| _STR:3_
'http' ||| _STR:0_
'ftp' ||| _STR:2_
example# 6682
define the method __init__ with 3 arguments : self , schemes set to None and unpacked dictionary kwargs .
0
example# 6683
call the __init__ method of the base class of the class URLValidator , with unpacked dictionary kwargs as argument .
0
example# 6684
if schemes is not None ,
0
example# 6685
substitute schemes for self.schemes [ self . schemes ] .
0
example# 6686
define the method __call__ with arguments self and value .
0
example# 6687
call the function force_text with an argument value , substitute the result for value .
0
example# 6688
call the value.split [ value . split ] method with _STR:0_ as argument , convert first element of the result to lower case , substitute the result for scheme .
1
'://' ||| _STR:0_
example# 6689
if scheme is not contained in self.schemes [ self . schemes ] ,
0
example# 6690
raise a ValidationError exception with arguments self.message [ self . message ] and code set to self.code [ self . code ] .
0
example# 6691
try ,
0
example# 6692
call the __call__ method from the base class of the class URLValidator , with an argument value .
0
example# 6693
if ValidationError , renamed to e , is caught ,
0
example# 6694
if value is true ,
0
example# 6695
call the function urlsplit with an argument value , assign the result to scheme , netloc , path , query and fragment , respectively .
0
example# 6696
try ,
0
example# 6697
call the method netloc.encode [ netloc . encode ] with an argument string _STR:0_ , on the return value call the decode method with string _STR:1_ as argument , substitute the result for netloc .
2
'idna' ||| _STR:0_
'ascii' ||| _STR:1_
example# 6698
if UnicodeError exception is caught ,
0
example# 6699
raise an exception e .
0
example# 6700
call the function urlunsplit with a tuple containing 5 elements : scheme , netloc , path , query and fragment , as an argument , substitute the result for url .
0
example# 6701
call the __call__ method from the base class of the URLValidator class , with an argument url .
0
example# 6702
if not ,
0
example# 6703
raise an exception .
0
example# 6704
if not ,
0
example# 6705
substitute value for url .
0
example# 6706
define the function validate_integer with an argument value .
0
example# 6707
try ,
0
example# 6708
convert value into an integer .
0
example# 6709
if ValueError or TypeError exceptions are caught ,
0
example# 6710
raise a ValidationError exception with 2 arguments : return value of the function _ with an string argument _STR:0_ ,
1
'Enter a valid integer.' ||| _STR:0_
example# 6711
and code set to string _STR:0_ . decorator deconstructible ,
1
'invalid' ||| _STR:0_
example# 6712
derive the class EmailValidator form the object base class .
0
example# 6713
call a function _ with a string _STR:0_ as an argument , substitute the result for message .
1
'Enter a valid value.' ||| _STR:0_
example# 6714
code is a string _STR:0_ .
1
'invalid' ||| _STR:0_
example# 6715
call the re.compile [ re . compile ] function with 2 arguments : raw string _STR:0_ ,
1
"(^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*$" ||| _STR:0_
example# 6716
_STR:0_ ( [ \001-\010\013\014\016-\037 ! # -\ [ \ ] -\177 ] |\\ [ \001-\011\013\014\016-\177 ] ) *_STR:1_ and re.IGNORECASE [ re . IGNORECASE ] , substitute the result for user_regex . call the re.compile [ re . compile ] function with 2 arguments : raw string _STR:2_ ,
3
"$)" ||| _STR:1_
'(?:[A-Z0-9](?:[A-Z0-9-]{0,247}[A-Z0-9])?\.)+(?:[A-Z]{2,6}|[A-Z0-9-]{2,}(?<!-))$' ||| _STR:2_
"|^" ||| _STR:0_
example# 6717
and re.IGNORECASE [ re . IGNORECASE ] , substitute the result for domain_regex . call the re.compile [ re . compile ] function with 2 arguments : raw string _STR:0_ and re.IGNORECASE [ re . IGNORECASE ] , substitute the result for literal_regex .
1
'\[([A-f0-9:\.]+)\]$' ||| _STR:0_
example# 6718
domain_whitelist is a list containing string _STR:0_ .
1
'localhost' ||| _STR:0_
example# 6719
define the __init__ method with 4 arguments : self , message set to None , code set to None and whitelist set to None .
0
example# 6720
if message is not None
0
example# 6721
substitute message for self.message [ self . message ] .
0
example# 6722
if code is not None
0
example# 6723
substitute code for self.code [ self . code ] .
0
example# 6724
if whitelist is not None
0
example# 6725
substitute whitelist for self.domain_whitelist [ self . domain_whitelist ] .
0
example# 6726
define the method __call__ with arguments self and value .
0
example# 6727
call the function force_text with an argument value , substitute the result for value .
0
example# 6728
if value is false or character _STR:0_ is not contained in value ,
1
'@' ||| _STR:0_
example# 6729
raise a ValidationError exception with arguments self.message [ self . message ] and code set to self.code [ self . code ] .
0
example# 6730
call the method value.rsplit [ value . rsplit ] with arguments character _STR:0_ and integer 1 , assign the result to user_part and domain_part , respectively .
1
'@' ||| _STR:0_
example# 6731
call the self.user_regex.match [ self . user_regex . match ] method with an argument user_part , if it evaluates to false ,
0
example# 6732
raise a ValidationError exception with arguments self.message [ self . message ] and code set to self.code [ self . code ] .
0
example# 6733
if domain_part is not contained in self.domain_whitelist [ self . domain_whitelist ] and method self.validate_domain_part [ self . validate_domain_part ] with an argument domain_part evaluates to false ,
0
example# 6734
try ,
0
example# 6735
call the method domain_part.encode [ domain_part . encode ] with an argument string _STR:0_ , on the return value call the decode method with string _STR:1_ as argument , substitute the result for domain_part .
2
'idna' ||| _STR:0_
'ascii' ||| _STR:1_
example# 6736
if method self.validate_domain_part [ self . validate_domain_part ] with an argument domain_part evaluates to true ,
0
example# 6737
return nothing .
0
example# 6738
if UnicodeError exception is caught ,
0
example# 6739
do nothing .
0
example# 6740
raise a ValidationError exception with arguments self.message [ self . message ] and code set to self.code [ self . code ] .
0
example# 6741
define the method validate_domain_part with arguments self and domain_part .
0
example# 6742
call the self.domain_regex.match [ self . domain_regex . match ] method with an argument domain_part , if it evaluates to true ,
0
example# 6743
return boolean True .
0
example# 6744
evaluate method self.literal_regex.match [ self . literal_regex . match ] with an argument domain_part , substitute the result for literal_match .
0
example# 6745
if literal_match is true ,
0
example# 6746
call the method literal_match.group [ literal_match . group ] with an integer 1 , substitute the result for ip_address .
0
example# 6747
try ,
0
example# 6748
call the function validate_ipv46_address with an argument ip_address .
0
example# 6749
return boolean True .
0
example# 6750
if ValidationError exception is caught ,
0
example# 6751
do nothing .
0
example# 6752
return boolean False .
0
example# 6753
define the method __eq__ with arguments self and other .
0
example# 6754
if other is instance of EmailValidator and , self.domain_whitelist [ self . domain_whitelist ] equals to other.domain_whitelist [ other . domain_whitelist ] ,
0
example# 6755
and self.message [ self . message ] equals to other.message [ other . message ] , and self.code [ self . code ] equals to other.code [ other . code ] , return boolean True , otherwise return boolean False . validate_email is an instance of EmailValidator class .
0
example# 6756
call the re.compile [ re . compile ] function with an argument raw string _STR:0_ , substitute the result for slug_re .
1
'^[-a-zA-Z0-9_]+$' ||| _STR:0_
example# 6757
validate_slug is a instance of a RegexValidator class , created with 3 arguments : slug_re , return value of the call to the function ,
0
example# 6758
_ with an argument string _STR:0_ , and string _STR:1_ . call the re.compile [ re . compile ] function with an argument raw string _STR:2_ ,
3
'invalid' ||| _STR:1_
"Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens." ||| _STR:0_
'^(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}$' ||| _STR:2_
example# 6759
substitute the result for ipv4_re . validate_ipv4_address is a instance of a RegexValidator class , created with 3 arguments : ipv4_re ,
0
example# 6760
return value of the call to the function _ with an argument string _STR:0_ and string _STR:1_ . define the function validate_ipv6_address with an argument value .
2
'Enter a valid IPv4 address.' ||| _STR:0_
'invalid' ||| _STR:1_
example# 6761
call the function is_valid_ipv6_address with an argument value , if it evaluates to false ,
0
example# 6762
raise a ValidationError exception with 2 arguments : return value of the function _ called with an argument string _STR:0_ , and code set to string _STR:1_ .
2
'invalid' ||| _STR:1_
'Enter a valid IPv6 address.' ||| _STR:0_
example# 6763
define the function validate_ipv46_address with an argument value .
0
example# 6764
try ,
0
example# 6765
call the function validate_ipv4_address with an argument value .
0
example# 6766
if ValidationError exception is caught ,
0
example# 6767
try ,
0
example# 6768
call the function validate_ipv6_address with an argument value .
0
example# 6769
if ValidationError exception is caught ,
0
example# 6770
raise a ValidationError exception with 2 arguments : return value of the function _ called with an argument string _STR:0_ , and code set to string _STR:1_ .
2
'invalid' ||| _STR:1_
'Enter a valid IPv4 or IPv6 address.' ||| _STR:0_
example# 6771
ip_address_validator_map is a dictionary containing 3 initial entries : tuple containing 2 elements : list with an element , validate_ipv46_address and return value of the function _ with an argument string _STR:0_ for _STR:1_ ,
2
'both' ||| _STR:1_
'Enter a valid IPv4 or IPv6 address.' ||| _STR:0_
example# 6772
tuple containing 2 elements : list with an element validate_ipv4_address and return value of the function _ with an argument string , _STR:0_ for _STR:1_ and tuple containing 2 elements : list with an element validate_ipv6_address , and return value of the function _ with an argument string _STR:2_ for _STR:3_ . define the function ip_address_validators with arguments protocol and unpack_ipv4 .
4
'ipv6' ||| _STR:3_
'Enter a valid IPv4 address.' ||| _STR:0_
'Enter a valid IPv6 address.' ||| _STR:2_
'ipv4' ||| _STR:1_
example# 6773
if protocol is not equal to string _STR:0_ and unpack_ipv4 is true ,
1
'both' ||| _STR:0_
example# 6774
raise a ValueError exception with an argument _STR:0_ .
1
"You can only use `unpack_ipv4` if `protocol` is set to 'both'" ||| _STR:0_
example# 6775
try ,
0
example# 6776
convert protocol to lowercase , use it as a key to get a value from the ip_address_validator_map dictionary , return it .
0
example# 6777
if KeyError exception is caught ,
0
example# 6778
raise a ValueError exception with an argument _STR:0_ , replace ' % s ' with protocol ,
1
"The protocol '%s' is unknown. Supported: %s" ||| _STR:0_
example# 6779
and ip_address_validator_map converted to a list , respectively . call the re.compile [ re . compile ] function with an argument raw string _STR:0_ , substitute the result for comma_separated_int_list_re .
1
'^[\d,]+$' ||| _STR:0_
example# 6780
validate_comma_separated_integer_list is a instance of a RegexValidator class , created with 3 arguments : comma_separated_int_list_re ,
0
example# 6781
return value of the call to the function _ with an argument string _STR:0_ and string _STR:1_ . decorator deconstructible ,
2
'Enter only digits separated by commas.' ||| _STR:0_
'invalid' ||| _STR:1_
example# 6782
derive the class BaseValidator form the object base class .
0
example# 6783
compare is a lambda function with arguments self , a and b , return value is boolean True if a is not b , otherwise it is False .
0
example# 6784
clean is a lambda function with arguments self and x , return value is x .
0
example# 6785
call the function _ with the argument string _STR:0_ , substitute the result for message .
1
'Ensure this value is %(limit_value)s (it is %(show_value)s).' ||| _STR:0_
example# 6786
code is a string _STR:0_
1
'limit_value' ||| _STR:0_
example# 6787
define the method __init__ with self and limit_value as arguments .
0
example# 6788
substitute the limit_value for self.limit_value [ self . limit_value ] .
0
example# 6789
define the method __call__ with arguments self and value .
0
example# 6790
call the method self.clean [ self . clean ] with value as argument , substitute the result for cleaned .
0
example# 6791
params is a dictionary with 2 initial entries : self.limit_value [ self . limit_value ] for _STR:0_ and cleaned for _STR:1_ .
2
'limit_value' ||| _STR:0_
'show_value' ||| _STR:1_
example# 6792
call the self.compare [ self . compare ] method with arguments cleaned and self.limit_value [ self . limit_value ] , if it evaluates to true ,
0
example# 6793
raise a ValidationError exception with arguments self.message [ self . message ] , code set to self.code [ self . code ] and params set to params .
0
example# 6794
define the method __eq__ with arguments self and other .
0
example# 6795
if other is an instance of self.__class__ [ self . __class__ ] and , self.limit_value [ self . limit_value ] equals to other.limit_value [ other . limit_value ] , and self.message [ self . message ] equals to other.message [ other . message ] ,
0
example# 6796
and self.code [ self . code ] equals to other.code [ other . code ] , return boolean True , otherwise return boolean False . decorator deconstructible ,
0
example# 6797
derive the class MaxValueValidator form the BaseValidator base class .
0
example# 6798
compare is a lambda function with arguments self , a and b , return value is boolean true if a is greater than b , otherwise is false .
0
example# 6799
call the function _ with an argument string _STR:0_ , substitute the result for message .
1
'Ensure this value is less than or equal to %(limit_value)s.' ||| _STR:0_
example# 6800
code is a string _STR:0_
1
'max_value' ||| _STR:0_
example# 6801
decorator deconstructible ,
0
example# 6802
derive the class MinValueValidator form the BaseValidator base class .
0
example# 6803
compare is a lambda function with arguments self , a and b , return value is boolean true if a is lesser than b , otherwise is false .
0
example# 6804
call the function _ with an argument string _STR:0_ , substitute the result for message .
1
'Ensure this value is greater than or equal to %(limit_value)s.' ||| _STR:0_
example# 6805
code is a string _STR:0_
1
'min_value' ||| _STR:0_
example# 6806
decorator deconstructible ,
0
example# 6807
derive the class MinLengthValidator form the BaseValidator base class .
0
example# 6808
compare is a lambda function with arguments self , a and b , return value is boolean true if a is lesser than b , otherwise is false .
0
example# 6809
clean is a lambda function with self and x as arguments , return value is length of x .
0
example# 6810
call the function ungettext_lazy with 3 arguments : string 'Ensure this value has at least % ( limit_value ) d character ( it has % ( show_value ) d ) ,
0
example# 6811
string _STR:0_ and string _STR:1_ , substitute the result for message . code is a string _STR:2_
3
'Ensure this value has at least %(limit_value)d characters (it has %(show_value)d).' ||| _STR:0_
'limit_value' ||| _STR:1_
'min_length' ||| _STR:2_
example# 6812
decorator deconstructible ,
0
example# 6813
derive the class MaxLengthValidator form the BaseValidator base class .
0
example# 6814
compare is a lambda function with arguments self , a and b , return value is boolean true if a is greater than b , otherwise is false .
0
example# 6815
clean is a lambda function with self and x as arguments , return value is length of x .
0
example# 6816
call the function ungettext_lazy with 3 arguments : string 'Ensure this value has at most % ( limit_value ) d character ( it has % ( show_value ) d ) ,
0
example# 6817
string _STR:0_ and string _STR:1_ , substitute the result for message . code is a string _STR:2_
3
'Ensure this value has at most %(limit_value)d characters (it has %(show_value)d).' ||| _STR:0_
'limit_value' ||| _STR:1_
'max_length' ||| _STR:2_
example# 6818
import module django .
0
example# 6819
from django.core.handlers.wsgi [ django . core . handlers . wsgi ] import WSGIHandler into default name space .
0
example# 6820
define the function get_wsgi_application .
0
example# 6821
call the django.setup [ django . setup ] method .
0
example# 6822
return WSGIHandler object .
0
example# 6823
from django.core.exceptions [ django . core . exceptions ] import ValidationError into default name space .
0
example# 6824
from django.forms.fields [ django . forms . fields ] import everything into default name space .
0
example# 6825
from django.forms.forms [ django . forms . forms ] import everything into default name space .
0
example# 6826
from django.forms.formsets [ django . forms . formsets ] import everything into default name space .
0
example# 6827
from django.forms.models [ django . forms . models ] import everything into default name space .
0
example# 6828
from django.forms.widgets [ django . forms . widgets ] import everything into default name space .
0
example# 6829
from django.forms.extras.widgets [ django . forms . extras . widgets ] import SelectDateWidget into default name space .
0
example# 6830
__all__ is an list containing string _STR:0_ .
1
'SelectDateWidget' ||| _STR:0_
example# 6831
from __future__ import unicode_literals into default name space .
0
example# 6832
import module datetime .
0
example# 6833
import module re .
0
example# 6834
from django.forms.widgets [ django . forms . widgets ] import Widget and Select into default name space .
0
example# 6835
from django.utils [ django . utils ] import datetime_safe into default name space .
0
example# 6836
from django.utils.dates [ django . utils . dates ] import MONTHS into default name space .
0
example# 6837
from django.utils.encoding [ django . utils . encoding ] import force_str into default name space .
0
example# 6838
from django.utils.safestring [ django . utils . safestring ] import mark_safe into default name space .
0
example# 6839
from django.utils.formats [ django . utils . formats ] import get_format into default name space .
0
example# 6840
from django.utils [ django . utils ] import six into default name space .
0
example# 6841
from django.conf [ django . conf ] import settings into default name space .
0
example# 6842
__all__ is an tuple containing string _STR:0_ .
1
'SelectDateWidget' ||| _STR:0_
example# 6843
compile regex from the raw string _STR:0_ , substitute it for RE_DATE .
1
'(\d{4})-(\d\d?)-(\d\d?)$' ||| _STR:0_
example# 6844
define the function _parse_date_fmt .
0
example# 6845
call the function get_format with an argument string _STR:0_ , substitute it for fmt .
1
'DATE_FORMAT' ||| _STR:0_
example# 6846
escaped is boolean False .
0
example# 6847
for every char in fmt ,
0
example# 6848
if escaped is true ,
0
example# 6849
escaped is boolean False .
0
example# 6850
otherwise if cahr equals a string '\\ ' ,
0
example# 6851
escaped is boolean True .
0
example# 6852
otherwis if char is contained in string _STR:0_ ,
1
'Yy' ||| _STR:0_
example# 6853
yield string _STR:0_ as an return value of the generator .
1
'year' ||| _STR:0_
example# 6854
otherwise if char is contained in string _STR:0_ ,
1
'bEFMmNn' ||| _STR:0_
example# 6855
yield string _STR:0_ as an return value of the generator .
1
'month' ||| _STR:0_
example# 6856
otherwise if char is contained in string _STR:0_ ,
1
'dj' ||| _STR:0_
example# 6857
yield string _STR:0_ as an return value of the generator .
1
'day' ||| _STR:0_
example# 6858
derive the class SelectDateWidget for the Widget base class .
0
example# 6859
none_value is a tuple containing 2 elements : integer 0 and string _STR:0_ .
1
'---' ||| _STR:0_
example# 6860
month_field is a string _STR:0_ .
1
'%s_month' ||| _STR:0_
example# 6861
day_field is a string _STR:0_ .
1
'%s_day' ||| _STR:0_
example# 6862
year_field is a string _STR:0_ .
1
'%s_year' ||| _STR:0_
example# 6863
define the method __init__ with 5 arguments : self , attrs set to None , years set to None , months set to None and empty_label set to None .
0
example# 6864
if attrs is not None substitute it for self.attrs [ self . attrs ] , or if not self.attrs [ self . attrs ] is an empty dictionary .
0
example# 6865
if years is true ,
0
example# 6866
substitute years for self.years [ self . years ] .
0
example# 6867
if not ,
0
example# 6868
call the function datetime.date.today [ datetime . date . today ] , substitute the year field of the result for this_year .
0
example# 6869
self.years [ self . years ] is list containing 10 successive integers from this_year .
0
example# 6870
if months is true ,
0
example# 6871
substitute months for self.months [ self . months ] .
0
example# 6872
if not ,
0
example# 6873
substitute MONTHS for self.months [ self . months ] .
0
example# 6874
if empty_label is an instance of list or tuple type ,
0
example# 6875
if length of empty_label is not equal to integer 3 .
0
example# 6876
raise an ValueError with an argument string _STR:0_ .
1
'empty_label list/tuple must have 3 elements.' ||| _STR:0_
example# 6877
self.year_none_value [ self . year_none_value ] is a tuple containing 2 elements : integer 0 and first element of empty_label .
0
example# 6878
self.month_none_value [ self . month_none_value ] is a tuple containing 2 elements : integer 0 and second element of empty_label .
0
example# 6879
self.day_none_value [ self . day_none_value ] is a tuple containing 2 elements : integer 0 and third element of empty_label .
0
example# 6880
if not ,
0
example# 6881
if empty_label is not None ,
0
example# 6882
self.none_value [ self . none_value ] is a tuple containing 2 elements : integer 0 and empty_label .
0
example# 6883
substitute self.none_value [ self . none_value ] for self.year_none_value [ self . year_none_value ] .
0
example# 6884
substitute self.none_value [ self . none_value ] for self.month_none_value [ self . month_none_value ] .
0
example# 6885
substitute self.none_value [ self . none_value ] for self.day_none_value [ self . day_none_value ] .
0
example# 6886
define the method render with 4 arguments : self , name , value and attrs set to None .
0
example# 6887
try ,
0
example# 6888
substitute value.year [ value . year ] , value.month [ value . month ] and value.day [ value . day ] for year_val , month_val and day_val , respectively .
0
example# 6889
if AttributeError exception is caught ,
0
example# 6890
year_val and month_val and day_val are set to None .
0
example# 6891
if value is an instance of six.string_types [ six . string_types ] ,
0
example# 6892
if settings.USE_L10N [ settings . USE_L10N ] is true ,
0
example# 6893
try ,
0
example# 6894
call the function get_format with an argument string _STR:0_ , substitute the first element of the result for input_format .
1
'DATE_INPUT_FORMATS' ||| _STR:0_
example# 6895
call the method datetime.datetime.strptime [ datetime . datetime . strptime ] with 2 arguments : return value of the function force_str called with an argument value ,
0
example# 6896
and input_format , substitute the result for v. substitute v.year [ v . year ] , v.month [ v . month ] and v.day [ v . day ] for year_val , month_val and day_val , respectively .
0
example# 6897
if ValueError exception is caught ,
0
example# 6898
do nothing .
0
example# 6899
if not ,
0
example# 6900
call the method RE_DATE.match [ RE_DATE . match ] with an argument value , substitute the result for match .
0
example# 6901
if match is true ,
0
example# 6902
for v in return value of the function match.groups [ match . groups ] , convert v into an integer and append i to a list ,
0
example# 6903
assign the result for year_val , month_val and day_val , respectively . html is an empty dictionary .
0
example# 6904
for every i in self.years [ self . years ] append tuple containing i and i elements into a list , substitute the resulting string for choices .
0
example# 6905
call the method self.create_select [ self . create_select ] with 6 arguments : name , self.year_field [ self . year_field ] , value , year_val , choices and self.year_none_value [ self . year_none_value ] ,
0
example# 6906
substitute the result for the value under the _STR:0_ key of the html dictionary . call the function six.iteritems [ six . iteritems ] with an argument self.months [ self . months ] , convert the result to a list and substitute it for choices .
1
'year' ||| _STR:0_
example# 6907
call the method self.create_select [ self . create_select ] with 6 arguments : name , self.month_field [ self . month_field ] , value , month_val , choices and self.month_none_value [ self . month_none_value ] ,
0
example# 6908
substitute the result for the value under the _STR:0_ key of the html dictionary . for every i in successive list of integers from 1 to 30 , append tuple containing i and i elements into a list ,
1
'month' ||| _STR:0_
example# 6909
substitute the resulting string for choices . call the method self.create_select [ self . create_select ] with 6 arguments : name , self.year_field [ self . year_field ] , value , day_val , choices and self.day_none_value [ self . day_none_value ] ,
0
example# 6910
substitute the result for the value under the _STR:0_ key of the html dictionary . output is an empty list .
1
'day' ||| _STR:0_
example# 6911
for every field in return value of the function _parse_date_fmt ,
0
example# 6912
get the value under the field key of the html dictionary , append it to output .
0
example# 6913
join output into a string , separated by newline characters , use it as an argument for the call to the mark_safe , return the result .
0
example# 6914
define the method id_for_label with arguments self and id .
0
example# 6915
for every first_select in return value of the function _parse_date_fmt .
0
example# 6916
substitute ' % s ' in string _STR:0_ with id_ and first_select , return it .
1
'%s_%s' ||| _STR:0_
example# 6917
if not ,
0
example# 6918
convert if into a string append to it a string _STR:0_ , return the result .
1
'_month' ||| _STR:0_
example# 6919
define the method id_for_label with arguments self , data , files and name .
0
example# 6920
format self.year_field [ self . year_field ] string with name , use it as the key for the data dictionary , substitute the result for y .
0
example# 6921
format self.month_field [ self . month_field ] string with name , use it as the key for the data dictionary , substitute the result for m .
0
example# 6922
format self.day_field [ self . day_field ] string with name , use it as the key for the data dictionary , substitute the result for d .
0
example# 6923
if y , m and d are all equal to string _STR:0_ ,
1
'0' ||| _STR:0_
example# 6924
return None .
0
example# 6925
if y and m and d are all true ,
0
example# 6926
if settings.USE_L10N [ settings . USE_L10N ] is true ,
0
example# 6927
call the function get_format with an argument string _STR:0_ , substitute the first element of the result for input_format .
1
'DATE_INPUT_FORMATS' ||| _STR:0_
example# 6928
try ,
0
example# 6929
call the function datetime.date [ datetime . date ] with 3 arguments : y , m and d all converted into a integers , substitute the result for date_value .
0
example# 6930
if ValueError exception is caught ,
0
example# 6931
substitute ' % s ' in string _STR:0_ with y , m and d , return the result .
1
'%s-%s-%s' ||| _STR:0_
example# 6932
if not ,
0
example# 6933
call the method datetime_safe.new_date [ datetime_safe . new_date ] with an argument date_value , substitute the result for date_value .
0
example# 6934
call the method date_value.strftime [ date_value . strftime ] with an argument input_format , return the result .
0
example# 6935
if not ,
0
example# 6936
substitute ' % s ' in string _STR:0_ with y , m and d , return the result .
1
'%s-%s-%s' ||| _STR:0_
example# 6937
get the name key of the data dictionary , if the key exists return it , if not return None .
0
example# 6938
define the method id_for_label with arguments self , name , field , value , val , choices and none_value .
0
example# 6939
if _STR:0_ is contained in self.attrs [ self . attrs ] ,
1
'id' ||| _STR:0_
example# 6940
get the value under the _STR:0_ key of the attrs dictionary , substitute the return value field of the self object for id_ .
1
'id' ||| _STR:0_
example# 6941
if not ,
0
example# 6942
substitute ' % s ' in string _STR:0_ with name , return it .
1
'id_%s' ||| _STR:0_
example# 6943
if self.is_required [ self . is_required ] is false ,
0
example# 6944
insert none_value at the beginning of the choices list .
0
example# 6945
call the method self.build_attrs [ self . build_attrs ] with an argument id set to field modulus id_ , substitute the result for local_attrs .
0
example# 6946
s is an instance of the Select class , created with choices set to choices .
0
example# 6947
call the method s.render [ s . render ] with 3 arguments : field string formated with name , val and local_attrs , substitute the result for select_html .
0
example# 6948
return select_html .
0
example# 6949
from __future__ import unicode_literals into default name space .
0
example# 6950
import module copy .
0
example# 6951
import module datetime .
0
example# 6952
import module os .
0
example# 6953
import module re .
0
example# 6954
import module sys .
0
example# 6955
import module warnings .
0
example# 6956
from decimal import Decimal and DecimalException into default name space .
0
example# 6957
from io import BytesIO into default name space .
0
example# 6958
from django.core [ django . core ] import validators into default name space .
0
example# 6959
from django.core.exceptions [ django . core . exceptions ] import ValidationError into default name space .
0
example# 6960
from django.forms.utils [ django . forms . utils ] import from_current_timezone and to_current_timezone into default name space .
0
example# 6961
from django.forms.widgets [ django . forms . widgets ] import TextInput , NumberInput , EmailInput , URLInput , HiddenInput , MultipleHiddenInput , ClearableFileInput ,
0
example# 6962
CheckboxInput , Select , NullBooleanSelect , SelectMultiple , DateInput , DateTimeInput , TimeInput , SplitDateTimeWidget , SplitHiddenDateTimeWidget and FILE_INPUT_CONTRADICTION . from django.utils [ django . utils ] import formats into default name space .
0
example# 6963
from django.utils.encoding [ django . utils . encoding ] import smart_text , force_str and force_text into default name space .
0
example# 6964
from django.utils.ipv6 [ django . utils . ipv6 ] import clean_ipv6_address into default name space .
0
example# 6965
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
0
example# 6966
from django.utils [ django . utils ] import six into default name space .
0
example# 6967
from django.utils.six.moves.urllib.parse [ django . utils . six . moves . urllib . parse ] import urlsplit and urlunsplit into default name space .
0
example# 6968
from django.utils.translation [ django . utils . translation ] import ugettext_lazy as _ and ungettext_lazy into default name space .
0
example# 6969
from django.core.validators [ django . core . validators ] import EMPTY_VALUES into default name space .
0
example# 6970
__all__ a tuple containing strings : _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ , _STR:5_ , _STR:6_ ,
7
'IntegerField' ||| _STR:2_
'DateField' ||| _STR:3_
'CharField' ||| _STR:1_
'DateTimeField' ||| _STR:5_
'Field' ||| _STR:0_
'TimeField' ||| _STR:4_
'RegexField' ||| _STR:6_
example# 6971
_STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ , _STR:5_ , _STR:6_ , _STR:7_ , _STR:8_ , _STR:9_ , _STR:10_ , _STR:11_ , _STR:12_ , _STR:13_ , _STR:14_ , _STR:15_ , _STR:16_ , _STR:17_ , _STR:18_ . derive the class Field from the base class object .
19
'FilePathField' ||| _STR:15_
'FileField' ||| _STR:1_
'MultiValueField' ||| _STR:9_
'TypedChoiceField' ||| _STR:17_
'ImageField' ||| _STR:2_
'URLField' ||| _STR:3_
'BooleanField' ||| _STR:4_
'NullBooleanField' ||| _STR:5_
'IPAddressField' ||| _STR:13_
'ComboField' ||| _STR:8_
'SplitDateTimeField' ||| _STR:12_
'EmailField' ||| _STR:0_
'GenericIPAddressField' ||| _STR:14_
'MultipleChoiceField' ||| _STR:7_
'SlugField' ||| _STR:16_
'DecimalField' ||| _STR:11_
'ChoiceField' ||| _STR:6_
'FloatField' ||| _STR:10_
'TypedMultipleChoiceField' ||| _STR:18_
example# 6972
substitute substitute TextInput for widget .
0
example# 6973
substitute HiddenInput for hidden_widget .
0
example# 6974
default_validators is an empty list .
0
example# 6975
default_error_messages is an dictionary containing entry : return value of the function _ called with an string _STR:0_ for _STR:1_ .
2
'This field is required.' ||| _STR:0_
'required' ||| _STR:1_
example# 6976
put elements of validators.EMPTY_VALUES [ validators . EMPTY_VALUES ] to a list , substitute the result for empty_values .
0
example# 6977
creation_counter is an integer 0 .
0
example# 6978
define the function __init__ with 11 arguments : self , required set to boolean True , widget set to None , label set to None ,
0
example# 6979
initial set to None , help_text set to an empty string , error_messages set to None , show_hidden_initial set to boolean False , validators is an empty , localize set to boolean False , label_suffix set to None . substitute required , label and initial for self.required [ self . required ] , self.label [ self . label ] and self.initial [ self . initial ] .
0
example# 6980
substitute show_hidden_initial for self.show_hidden_initial [ self . show_hidden_initial ] .
0
example# 6981
substitute help_text for self.help_text [ self . help_text ] .
0
example# 6982
substitute label_suffix for self.label_suffix [ self . label_suffix ] .
0
example# 6983
substitute self.widget [ self . widget ] if the widget is false , otherwise substitute widget for widget .
0
example# 6984
if widget is an instance of type class ,
0
example# 6985
call the function widget , substitute the result for widget .
0
example# 6986
substitute localize for self.localize [ self . localize ] .
0
example# 6987
if self.localize [ self . localize ] is true ,
0
example# 6988
widget.is_localized [ widget . is_localized ] is boolean True .
0
example# 6989
substitute self.required [ self . required ] for widget.is_required [ widget . is_required ] .
0
example# 6990
call the method self.widget_attrs [ self . widget_attrs ] with an argument widget , substitute the result for extra_attrs .
0
example# 6991
if extra_attrs is true ,
0
example# 6992
update widget.attrs [ widget . attrs ] dictionary with extra_attrs .
0
example# 6993
substitute widget for self.widget [ self . widget ] .
0
example# 6994
substitute Field.creation_counter [ Field . creation_counter ] for self.creation_counter [ self . creation_counter ] .
0
example# 6995
increment Field.creation_counter [ Field . creation_counter ] by one .
0
example# 6996
messages is an empty dictionary .
0
example# 6997
for every c in reversed order of self.__class__.__mro__ [ self . __class__ . __mro__ ] ,
0
example# 6998
get _STR:0_ from the c object , if it doesnt exists return an empty dictionary ,
1
'default_error_messages' ||| _STR:0_
example# 6999
use the result as the argument for the call to the messages.update [ messages . update ] function . update messages dictionary with error_messages , if it exists , if not do n't update it .
0
example# 7000
substitute messages for self.error_messages [ self . error_messages ] .
0
example# 7001
add self.default_validators [ self . default_validators ] and validators , substitute the result for self.validators [ self . validators ] .
0
example# 7002
call the method __init__ from the base class of the Field class .
0
example# 7003
define the method prepare_value with arguments : self and value .
0
example# 7004
return value .
0
example# 7005
define the method to_python with arguments self and value .
0
example# 7006
return value .
0
example# 7007
define the method to_python with arguments self and value .
0
example# 7008
if value is contained in self.empty_values [ self . empty_values ] and self.required [ self . required ] is true ,
0
example# 7009
raise an ValidationError with 2 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary and code set to string _STR:0_ .
1
'required' ||| _STR:0_
example# 7010
define the method run_validators with arguments self and value .
0
example# 7011
if value is contained in self.empty_values [ self . empty_values ] ,
0
example# 7012
return nothing ,
0
example# 7013
errors is an empty list .
0
example# 7014
for every v in self.validators [ self . validators ] ,
0
example# 7015
try
0
example# 7016
call the function v with an argument value .
0
example# 7017
if ValidationError , substituted for e , exception is caught ,
0
example# 7018
if e has an attribute _STR:0_ and e.code [ e . code ] is contained in self.error_messages [ self . error_messages ] ,
1
'code' ||| _STR:0_
example# 7019
get the value under the e.code [ e . code ] key of the self.error_messages [ self . error_messages ] dictionary , substitute the result for e.message [ e . message ] .
0
example# 7020
extend errors list with e.error_list [ e . error_list ] .
0
example# 7021
if errors is true ,
0
example# 7022
raise an ValidationError exception with an argument errors ,
0
example# 7023
define the method clean with arguments self and value .
0
example# 7024
call the method self.to_python [ self . to_python ] with an argument value , substitute it for value .
0
example# 7025
call the method self.validate [ self . validate ] with an argument value .
0
example# 7026
call the method self.run_validators [ self . run_validators ] with an argument value .
0
example# 7027
return value .
0
example# 7028
define the method bound_data with arguments self , data and initial .
0
example# 7029
return data .
0
example# 7030
define the method widget_attrs with arguments self and widget .
0
example# 7031
return is empty dictionary .
0
example# 7032
define the method get_limit_choices_to with arguments self .
0
example# 7033
if self.limit_choices_to [ self . limit_choices_to ] object is callable ,
0
example# 7034
call the method self.limit_choices_to [ self . limit_choices_to ] , return the result ,
0
example# 7035
return self.limit_choices_to [ self . limit_choices_to ] .
0
example# 7036
define the method _has_changed with arguments self , initial and data .
0
example# 7037
substitute initial for initial_value , if initial is not None , if not , initial_value is an empty string .
0
example# 7038
try ,
0
example# 7039
call the function self.to_python [ self . to_python ] with an argument data , substitute the result for data .
0
example# 7040
if self has an attribute _STR:0_ ,
1
'_coerce' ||| _STR:0_
example# 7041
call the method self._coerce [ self . _coerce ] with an argument data , substitute the result for data .
0
example# 7042
if ValidationError exception is caught ,
0
example# 7043
return boolean True .
0
example# 7044
substitute data for data_value if data is not None , otherwise data_value is an empty list .
0
example# 7045
if initial_value is not equal to data_value , return boolean True , otherwise return boolean False .
0
example# 7046
define the method __deepcopy__ with arguments self and memo .
0
example# 7047
call the method copy.copy [ copy . copy ] with an argument self , substitute the result for result .
0
example# 7048
substitute result for the value of the memo dictionary , with identity of the self object as an key .
0
example# 7049
call the method copy.deepcopy [ copy . deepcopy ] with arguments self.widget [ self . widget ] and memo , substitute the result for result.widget [ result . widget ] .
0
example# 7050
substitute elements of self.validators [ self . validators ] list for result.validators [ result . validators ] .
0
example# 7051
return result .
0
example# 7052
derive the class CharField from the base class Field class .
0
example# 7053
define the method __init__ with 5 arguments : self , max_length set to None , min_length set to None , unpacked list args ,
0
example# 7054
and unpacked dictionary kwargs . substitute max_length and min_length for self.max_length [ self . max_length ] for self.min_length [ self . min_length ] .
0
example# 7055
call the method __init__ from the base class of the class CharField , with arguments unpacked list args and unpacked dictionary kwargs .
0
example# 7056
if min_length is not None ,
0
example# 7057
call the method validators.MinLengthValidator [ validators . MinLengthValidator ] with min_length converted into an integer , append the result to list self.validators [ self . validators ] .
0
example# 7058
if max_length is not None ,
0
example# 7059
call the method validators.MaxLengthValidator [ validators . MaxLengthValidator ] with max_length converted into an integer , append the result to list self.validators [ self . validators ] .
0
example# 7060
define the method to_python with arguments self and value .
0
example# 7061
if value in self.empty_values [ self . empty_values ] ,
0
example# 7062
return an empty string .
0
example# 7063
evaluate the function smart_text with an argument value , return the result .
0
example# 7064
define the method widget_attrs with arguments self and widget .
0
example# 7065
call the method widget_attrs from the base class of the class CharField , with an argument widget , substitute the result for attrs .
0
example# 7066
if self.max_length [ self . max_length ] is not None ,
0
example# 7067
update attrs dictionary with entry : self.max_length [ self . max_length ] converted into a string for _STR:0_ .
1
'maxlength' ||| _STR:0_
example# 7068
return attrs .
0
example# 7069
derive the class IntegerField from the base class Field class .
0
example# 7070
substitute NumberInput for widget .
0
example# 7071
default_error_messages is an dictionary with an initial entry : result of the function _ called with an argument string ,
0
example# 7072
_STR:0_ for _STR:1_ . define the method __init__ with 5 arguments : self , max_value set to None , min_value set to None , unpacked list args and unpacked dictionary kwargs .
2
'Enter a whole number.' ||| _STR:0_
'invalid' ||| _STR:1_
example# 7073
substitute max_value and min_value for self.max_value [ self . max_value ] and self.min_value [ self . min_value ] .
0
example# 7074
get the value under the _STR:0_ key of the kwargs dictionary , if it is true and self.widget [ self . widget ] equals to NumberInput ,
1
'localize' ||| _STR:0_
example# 7075
if _STR:0_ key of the kwargs dictionary doesnt exists assign it widget field of the base class of the IntegerField class value .
1
'widget' ||| _STR:0_
example# 7076
call the method __init__ from the base class of the class IntegerField , with arguments unpacked list args and unpacked dictionary kwargs .
0
example# 7077
if max_value is not None ,
0
example# 7078
call the method validators.MaxValueValidator [ validators . MaxValueValidator ] with max_value converted into an integer , append the result to list self.validators [ self . validators ] .
0
example# 7079
if min_value is not None ,
0
example# 7080
call the method validators.MinValueValidator [ validators . MinValueValidator ] with min_value converted into an integer , append the result to list self.validators [ self . validators ] .
0
example# 7081
define the method to_python with arguments self and value .
0
example# 7082
call the method to_python with an argument value , from the base class of the IntegerField class , substitute the result for value .
0
example# 7083
if value is contained in self.empty_values [ self . empty_values ] ,
0
example# 7084
return None .
0
example# 7085
if self.localize [ self . localize ] is true ,
0
example# 7086
call the method formats.sanitize_separators [ formats . sanitize_separators ] with an argument value , substitute the result for value .
0
example# 7087
try ,
0
example# 7088
convert value into an string , convert the result into an integer and substitute it for value .
0
example# 7089
if ValueError or TypeError exceptions are caught ,
0
example# 7090
raise an ValidationError with 2 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary and code set to _STR:0_ .
1
'invalid' ||| _STR:0_
example# 7091
return value
0
example# 7092
define the method widget_attrs with arguments self and widget .
0
example# 7093
call the method widget_attrs with an argument widget , from the base class of the class IntegerField , substitute it for attrs .
0
example# 7094
if widget is an instance of the NumberInput ,
0
example# 7095
if self.min_value [ self . min_value ] is not None ,
0
example# 7096
substitute self.min_value [ self . min_value ] for the value under the _STR:0_ key of the attrs dictionary .
1
'min' ||| _STR:0_
example# 7097
if self.max_value [ self . max_value ] is not None ,
0
example# 7098
substitute self.max_value [ self . max_value ] for the value under the _STR:0_ key of the attrs dictionary .
1
'max' ||| _STR:0_
example# 7099
return attrs .
0
example# 7100
derive the class FloatField from the base class IntegerField class .
0
example# 7101
default_error_messages is an dictionary with an initial entry : result of the function _ called with an argument string ,
0
example# 7102
_STR:0_ for _STR:1_ . define the method to_python with arguments self and value .
2
'Enter a number.' ||| _STR:0_
'invalid' ||| _STR:1_
example# 7103
call the method to_python with an argument value , from the base class of the IntegerField class , substitute the result for value .
0
example# 7104
if value is contained in self.empty_values [ self . empty_values ] ,
0
example# 7105
return None .
0
example# 7106
if self.localize [ self . localize ] is true ,
0
example# 7107
call the method formats.sanitize_separators [ formats . sanitize_separators ] with an argument value , substitute the result for value .
0
example# 7108
try ,
0
example# 7109
convert value into an floating point number , substitute it for value .
0
example# 7110
if ValueError or TypeError exceptions are caught ,
0
example# 7111
raise an ValidationError with 2 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary and code set to _STR:0_ .
1
'invalid' ||| _STR:0_
example# 7112
return value .
0
example# 7113
define the method validate with arguments self and value .
0
example# 7114
call the method validate with an argument value , from the base class of the FloatField class .
0
example# 7115
if value is Nan , or value is contained in return value of the Decimal called twice with string _STR:0_ and with string _STR:1_ ,
2
'Inf' ||| _STR:0_
'-Inf' ||| _STR:1_
example# 7116
raise an ValidationError with 2 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary and code set to _STR:0_ .
1
'invalid' ||| _STR:0_
example# 7117
return value .
0
example# 7118
define the method widget_attrs with arguments self and widget .
0
example# 7119
call the method widget_attrs with an argument widget , from the base class of the FloatField class , substitute the result for attrs .
0
example# 7120
if widget is an instance of the NumberInput class , and string _STR:0_ is not contained in widget.attrs [ widget . attrs ] ,
1
'step' ||| _STR:0_
example# 7121
if _STR:0_ attribute of attrs dictionary does not exists , set it to to string _STR:1_ .
2
'step' ||| _STR:0_
'any' ||| _STR:1_
example# 7122
return attrs .
0
example# 7123
derive the class DecimalField from the base class IntegerField class .
0
example# 7124
default_error_messages is a dictionary with 4 initial entries : return value of the function _ called with string as an argument ,
0
example# 7125
_STR:0_ for _STR:1_ , return value of the function ungettext_lazy called with 3 string arguments : _STR:2_ , _STR:3_ , and _STR:4_ for _STR:5_ , return value of the function ungettext_lazy called with 3 string arguments : _STR:6_ , _STR:7_ and _STR:4_ , for _STR:8_ and return value of the function ungettext_lazy called with 3 string arguments : _STR:9_ , _STR:10_ and _STR:4_ for _STR:11_ . define the method __init__ with 7 arguments : self , max_value set to None , min_value set to None , max_digits set to None ,
12
'max_whole_digits' ||| _STR:11_
'Ensure that there are no more than %(max)s digits in total.' ||| _STR:3_
'Ensure that there are no more than %(max)s decimal place.' ||| _STR:6_
'Ensure that there are no more than %(max)s decimal places.' ||| _STR:7_
'max' ||| _STR:4_
'Ensure that there are no more than %(max)s digit before the decimal point.' ||| _STR:9_
'invalid' ||| _STR:1_
'max_digits' ||| _STR:5_
'Enter a number.' ||| _STR:0_
'max_decimal_places' ||| _STR:8_
'Ensure that there are no more than %(max)s digit in total.' ||| _STR:2_
'Ensure that there are no more than %(max)s digits before the decimal point.' ||| _STR:10_
example# 7126
decimal_places set to None , unpacked list args and unpacked dictionary kwargs . substitute max_digits and decimal_places for self.max_digits [ self . max_digits ] and self.decimal_places [ self . decimal_places ] .
0
example# 7127
call the method __init__ from the base class of the class DecimalField , with 4 arguments : max_value , min_value ,
0
example# 7128
unpacked list args and unpacked dictionary kwargs . define the method to_python with arguments self and value .
0
example# 7129
if value is contained in self.empty_values [ self . empty_values ] ,
0
example# 7130
return None .
0
example# 7131
if self.localize [ self . localize ] is true ,
0
example# 7132
call the method formats.sanitize_separators [ formats . sanitize_separators ] with an argument value , substitute the result for value .
0
example# 7133
call the function smart_text with an argument value , strip the result of whitespaces from both ends and substitute it for value .
0
example# 7134
try ,
0
example# 7135
value is an instance of a class Decimal created with value as an argument .
0
example# 7136
if DecimalException exception is caught ,
0
example# 7137
raise an ValidationError with 2 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary and code set to _STR:0_ .
1
'invalid' ||| _STR:0_
example# 7138
return value .
0
example# 7139
define the method validate with arguments self and value .
0
example# 7140
call the method validate with an argument value from the base class of the DecimalField class .
0
example# 7141
if value is contained in self.empty_values [ self . empty_values ] ,
0
example# 7142
return nothing .
0
example# 7143
if value is not equal to value or value equals return value of the call to Decimal with argument _STR:0_ ,
1
'Inf' ||| _STR:0_
example# 7144
or value equals return value of the call to Decimal with argument _STR:0_ raise an ValidationError with 2 arguments : value under the _STR:1_ key of the self.error_messages [ self . error_messages ] dictionary and code set to _STR:1_ .
2
'-Inf' ||| _STR:0_
'invalid' ||| _STR:1_
example# 7145
call the method value.as_tuple [ value . as_tuple ] , assign the result to sign , digittuple and exponent , respectively .
0
example# 7146
substitute absolute value of the exponent for decimals .
0
example# 7147
substitute length of digittuple for digits .
0
example# 7148
if decimals is greater than digits ,
0
example# 7149
substitute decimals for digits .
0
example# 7150
subtract decimals from digits , substitute the result for whole_digits .
0
example# 7151
if self.max_digits [ self . max_digits ] is not None and digits is grater than self.max_digits [ self . max_digits ] ,
0
example# 7152
raise an ValidationError with 3 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary ,
1
'max_digits' ||| _STR:0_
example# 7153
code set to string _STR:0_ and params set to a dictionary with an entry : self.max_digits [ self . max_digits ] for _STR:1_ . if self.decimal_places [ self . decimal_places ] is not None and decimals is grater than self.decimal_places [ self . decimal_places ] :
2
'max' ||| _STR:1_
'max_digits' ||| _STR:0_
example# 7154
raise an ValidationError with 3 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary ,
1
'max_decimal_places' ||| _STR:0_
example# 7155
code set to string _STR:0_ and params set to a dictionary with an entry : self.decimal_places [ self . decimal_places ] for _STR:1_ . if self.max_digits [ self . max_digits ] is not None and self.decimal_places [ self . decimal_places ] is not None and whole_digits is grater than the difference of ,
2
'max_decimal_places' ||| _STR:0_
'max' ||| _STR:1_
example# 7156
self.max_digits [ self . max_digits ] and self.decimal_places [ self . decimal_places ] , raise an ValidationError with 3 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary ,
1
'max_whole_digits' ||| _STR:0_
example# 7157
code set to string _STR:0_ and params set to a dictionary with an entry : difference of the self.max_digits [ self . max_digits ] and self.decimal_places [ self . decimal_places ] , for _STR:1_ . return value .
2
'max_whole_digits' ||| _STR:0_
'max' ||| _STR:1_
example# 7158
define the method widget_attrs with arguments self and widget .
0
example# 7159
call the method widget_attrs with an argument widget , from the base class of the DecimalField class , substitute the result for attrs .
0
example# 7160
if widget is an instance of NumberInput and string _STR:0_ is not contained in widget.attrs [ widget . attrs ] .
1
'step' ||| _STR:0_
example# 7161
if self.decimal_places [ self . decimal_places ] is not None ,
0
example# 7162
call the object Decimal with string _STR:0_ as an argument , divide it by 10 , bring the result to the power of self.decimal_places [ self . decimal_places ] ,
1
'1' ||| _STR:0_
example# 7163
convert the result to a lowercase string , substitute it for step . if not ,
0
example# 7164
step is an string _STR:0_ .
1
'any' ||| _STR:0_
example# 7165
if _STR:0_ key of the attrs dictionary doesnt exists assign it step as an value .
1
'step' ||| _STR:0_
example# 7166
return attrs .
0
example# 7167
derive the class BaseTemporalField from the base class Field class .
0
example# 7168
define the method __init__ with arguments self , input_formats set to None , unpacked list args and unpacked dictionary kwargs .
0
example# 7169
call the method __init__ from the base class of the BaseTemporalField class , with arguments : unpacked list args and unpacked dictionary kwargs .
0
example# 7170
if input_formats is not None ,
0
example# 7171
substitute input_formats for self.input_formats [ self . input_formats ] .
0
example# 7172
define the method to_python with arguments self and value .
0
example# 7173
call the function force_text with arguments value and strings_only set to boolean True , substitute the result for unicode_value .
0
example# 7174
if unicode_value is an instance of six.text_type [ six . text_type ] ,
0
example# 7175
strip whitespaces from both ends of unicode_value , substitute the result for value .
0
example# 7176
if value is an instance of six.text_type [ six . text_type ] class ,
0
example# 7177
for every format in self.input_formats [ self . input_formats ] ,
0
example# 7178
try ,
0
example# 7179
call the method self.strptime [ self . strptime ] with arguments value and format , return the result .
0
example# 7180
if ValueError or TypeError exceptions are caught ,
0
example# 7181
skip this loop iteration .
0
example# 7182
raise an ValidationError with 2 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary and code set to _STR:0_ .
1
'invalid' ||| _STR:0_
example# 7183
define the method strptime with arguments self , value and format .
0
example# 7184
raise an NotImplementedError with an argument string _STR:0_ .
1
'Subclasses must define this method.' ||| _STR:0_
example# 7185
derive the class DateField from the base class BaseTemporalField class .
0
example# 7186
substitute DateInput for widget .
0
example# 7187
call the method formats.get_format_lazy [ formats . get_format_lazy ] with an argument string _STR:0_ , substitute the result for input_formats .
1
'DATE_INPUT_FORMATS' ||| _STR:0_
example# 7188
default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string _STR:0_ for _STR:1_ .
2
'Enter a valid date.' ||| _STR:0_
'invalid' ||| _STR:1_
example# 7189
define the method to_python with arguments self and value .
0
example# 7190
if value is contained in self.empty_values [ self . empty_values ] ,
0
example# 7191
return None .
0
example# 7192
if value is an instance of datetime.datetime [ datetime . datetime ] class ,
0
example# 7193
call the method value.date [ value . date ] , return the result .
0
example# 7194
if value is an instance of datetime.date [ datetime . date ] class ,
0
example# 7195
return value .
0
example# 7196
call the method to_python with an argument value from the base class of the DateField class , return the result .
0
example# 7197
define the method strptime with arguments self , value and format .
0
example# 7198
call the method datetime.datetime.strptime [ datetime . datetime . strptime ] with 2 arguments : result of the function force_str called with an argument value ,
0
example# 7199
and format , call the method date on the result , return the result . derive the class TimeField from the base class BaseTemporalField class .
0
example# 7200
substitute TimeInput for widget .
0
example# 7201
call the method formats.get_format_lazy [ formats . get_format_lazy ] with an argument string _STR:0_ , substitute the result for input_formats .
1
'TIME_INPUT_FORMATS' ||| _STR:0_
example# 7202
default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string _STR:0_ for _STR:1_ .
2
'invalid' ||| _STR:1_
'Enter a valid time.' ||| _STR:0_
example# 7203
define the method to_python with arguments self and value .
0
example# 7204
if value is contained in self.empty_values [ self . empty_values ] ,
0
example# 7205
return None .
0
example# 7206
if value is an instance of datetime.time [ datetime . time ] ,
0
example# 7207
return value ,
0
example# 7208
call the method to_python with an argument value from the base class of the TimeField class , return the result .
0
example# 7209
define the method strptime with arguments self , value and format .
0
example# 7210
call the method datetime.datetime.strptime [ datetime . datetime . strptime ] with 2 arguments : result of the function force_str called with an argument value ,
0
example# 7211
and format , call the method time on the result , return the result . derive the class DateTimeField from the base class BaseTemporalField class .
0
example# 7212
substitute DateTimeInput for widget .
0
example# 7213
call the method formats.get_format_lazy [ formats . get_format_lazy ] with an argument string _STR:0_ , substitute the result for input_formats .
1
'DATETIME_INPUT_FORMATS' ||| _STR:0_
example# 7214
default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string _STR:0_ for _STR:1_ .
2
'invalid' ||| _STR:1_
'Enter a valid date/time.' ||| _STR:0_
example# 7215
define the method prepare_value with arguments self and value .
0
example# 7216
if value is an instance of datetime.datetime [ datetime . datetime ] ,
0
example# 7217
call the function to_current_timezone with an argument value , substitute the result for value .
0
example# 7218
return value .
0
example# 7219
define the method to_python with arguments self and value .
0
example# 7220
if value is contained in self.empty_values [ self . empty_values ] ,
0
example# 7221
return None .
0
example# 7222
if value is an instance of datetime.datetime [ datetime . datetime ] ,
0
example# 7223
call the function __current_timezone with an argument value , return the result .
0
example# 7224
if value is an instance of datetime.date [ datetime . date ] ,
0
example# 7225
call the function datetime.datetime [ datetime . datetime ] with 3 arguments : value.year [ value . year ] , value.month [ value . month ] and value.day [ value . day ] , substitute the result for result .
0
example# 7226
call the function from_current_timezone with an argument result , return the result .
0
example# 7227
if value is an instance of list type ,
0
example# 7228
call the function warnings.warn [ warnings . warn ] with 3 arguments : string _STR:0_
1
'Using SplitDateTimeWidget with DateTimeField is deprecated. ' ||| _STR:0_
example# 7229
_STR:0_ , RemovedInDjango19Warning and stacklevel set to integer 2. if length of value is not equal to integer 2 ,
1
'Use SplitDateTimeField instead.' ||| _STR:0_
example# 7230
raise an ValidationError with 2 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary and code set to _STR:0_ .
1
'invalid' ||| _STR:0_
example# 7231
if first and second elements of value are contained in self.empty_values [ self . empty_values ] ,
0
example# 7232
return None .
0
example# 7233
substitute ' % s ' in string _STR:0_ with the elements of value converted into a tuple , substitute the result for value .
1
'%s %s' ||| _STR:0_
example# 7234
call the method to_python with an argument value from the base class of the DateTimeField class , substitute the result for result .
0
example# 7235
call the function from_current_timezone with an argument , return the result .
0
example# 7236
define the method strptime with arguments self , value and format .
0
example# 7237
call the method datetime.datetime.strptime [ datetime . datetime . strptime ] with 2 arguments : result of the function force_str called with an argument value ,
0
example# 7238
and format , return the result . derive the class RegexField from the base class CharField class .
0
example# 7239
define the method __init__ with 7 arguments : self , regex , max_length set to None , min_length set to None , error_message set to None ,
0
example# 7240
if error_message is not None ,
0
example# 7241
get the value under the _STR:0_ key of the kwargs dictionary , if it exists substitute it for error_messages , if not ,
1
'error_messages' ||| _STR:0_
example# 7242
error_messages is an empty dictionary . substitute error_message for value under the _STR:0_ key of the error_messages dictionary .
1
'invalid' ||| _STR:0_
example# 7243
substitute error_messages for value under the _STR:0_error_messages ' key of the kwargs dictionary .
1
'' ||| _STR:0_
example# 7244
call the method __init__ from the base class of the class RegexField , with 4 arguments : max_length , min_length , unpacked list args ,
0
example# 7245
unpacked dictionary kwargs . call the method self._set_regex [ self . _set_regex ] with an argument regex .
0
example# 7246
define the method _get_regex an argument self .
0
example# 7247
return self._regex [ self . _regex ] .
0
example# 7248
define the method _set_regex with arguments self and regex .
0
example# 7249
if regex is an instance of six.string_types [ six . string_types ] class ,
0
example# 7250
call the function re.compile [ re . compile ] with 2 arguments regex , re.UNICODE [ re . UNICODE ] and substitute the result for regex .
0
example# 7251
substitute regex for self._regex [ self . _regex ] .
0
example# 7252
if self has an _STR:0_ attribute and self._regex_validator [ self . _regex_validator ] is contained in self.validators [ self . validators ] ,
1
'_regex_validator' ||| _STR:0_
example# 7253
remove self._regex_validator [ self . _regex_validator ] from self.validators [ self . validators ] .
0
example# 7254
call the method validators.RegexValidator [ validators . RegexValidator ] with an argument regex set to regex , substitute it for self._regex_validator [ self . _regex_validator ] .
0
example# 7255
append self._regex_validator [ self . _regex_validator ] to self.validators [ self . validators ] .
0
example# 7256
regex is an property object of this class , with _get_regex getter and _set_regex setter function .
0
example# 7257
derive the class EmailField from the base class CharField class .
0
example# 7258
substitute EmailInput for widget .
0
example# 7259
default_validators is a list with an element validators.validate_email [ validators . validate_email ] .
0
example# 7260
define the method clean with 2 arguments self and value .
0
example# 7261
call the method self.to_python [ self . to_python ] with an argument value , strip the whitespaces from the both ends of the result and substitute it for value .
0
example# 7262
call the method clean with an argument value from the base class of the EmailField class .
0
example# 7263
derive the class FileField from the base class Field class .
0
example# 7264
substitute ClearableFileInput for widget .
0
example# 7265
default_error_messages is an dictionary with 5 initial entries : return value of the function _ called with an argument string ,
0
example# 7266
_STR:0_ for _STR:1_ , return value of the function _ called with an argument , string _STR:2_ for _STR:3_ , return value of the function _ called with an argument _STR:4_ , for _STR:5_ , return value of the function ungettext_lazy called with 3 arguments : string _STR:6_ , string _STR:7_ and string _STR:8_ for _STR:9_ , and return value of the function _ called with an argument string , _STR:10_ for _STR:11_ . define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
12
"No file was submitted. Check the encoding type on the form." ||| _STR:0_
'max' ||| _STR:8_
'Ensure this filename has at most %(max)d character (it has %(length)d).' ||| _STR:6_
'missing' ||| _STR:3_
'contradiction' ||| _STR:11_
'Ensure this filename has at most %(max)d characters (it has %(length)d).' ||| _STR:7_
'empty' ||| _STR:5_
'Please either submit a file or check the clear checkbox, not both.' ||| _STR:10_
'invalid' ||| _STR:1_
"No file was submitted." ||| _STR:2_
'max_length' ||| _STR:9_
"The submitted file is empty." ||| _STR:4_
example# 7267
remove the value under _STR:0_ key from the kwargs dictionary and if the key exists substitute it for self.max_length [ self . max_length ] ,
1
'max_length' ||| _STR:0_
example# 7268
if not self.max_length [ self . max_length ] is None . remove the value under _STR:0_ key from the kwargs dictionary and if the key exists ,
1
'allow_empty_file' ||| _STR:0_
example# 7269
substitute it for self.allow_empty_file [ self . allow_empty_file ] , if not self.allow_empty_file [ self . allow_empty_file ] is boolean False . call the method __init__ from the base class of the FileField class , with 2 arguments : unpacked list args and unpacked dictionary .
0
example# 7270
define the method to_python with arguments self and data .
0
example# 7271
if data in self.empty_values [ self . empty_values ] is true ,
0
example# 7272
return None .
0
example# 7273
try ,
0
example# 7274
substitute data.name [ data . name ] for file_name .
0
example# 7275
substitute data.size [ data . size ] for file_name .
0
example# 7276
if AttributeError exception is caught ,
0
example# 7277
raise an ValidationError with 2 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary and code set to _STR:0_ .
1
'invalid' ||| _STR:0_
example# 7278
if self.max_length [ self . max_length ] is not None and length of file_name is grater than self.max_length [ self . max_length ] ,
0
example# 7279
params is a dictionary with 2 initial entries : self.max_length [ self . max_length ] for _STR:0_ and length of file_name for _STR:1_ .
2
'length' ||| _STR:1_
'max' ||| _STR:0_
example# 7280
raise an ValidationError with 2 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary and code set to _STR:0_ .
1
'max_length' ||| _STR:0_
example# 7281
if file_name is false ,
0
example# 7282
raise an ValidationError with 2 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary and code set to _STR:0_ .
1
'invalid' ||| _STR:0_
example# 7283
if self.allow_empty_file [ self . allow_empty_file ] and file_size are both false ,
0
example# 7284
raise an ValidationError with 2 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary and code set to _STR:0_ .
1
'empty' ||| _STR:0_
example# 7285
return data .
0
example# 7286
define the method clean with arguments self , data and initial set to None .
0
example# 7287
if data is bound to the same object as FILE_INPUT_CONTRADICTION ,
0
example# 7288
raise an ValidationError with 2 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary and code set to _STR:0_ .
1
'contradiction' ||| _STR:0_
example# 7289
if data is boolean False ,
0
example# 7290
if self.required [ self . required ] is false ,
0
example# 7291
return boolean False .
0
example# 7292
data is None .
0
example# 7293
if data is false and initial is true ,
0
example# 7294
return initial .
0
example# 7295
call the method clean with an argument data from the base class of the class FileField , return the result .
0
example# 7296
define the method bound_data with arguments self , data and initial .
0
example# 7297
if data is not None or FILE_INPUT_CONTRADICTION ,
0
example# 7298
return initial .
0
example# 7299
return data .
0
example# 7300
define the method _has_changed with arguments self , data and initial .
0
example# 7301
if data is None ,
0
example# 7302
return is boolean False .
0
example# 7303
return is boolean True .
0
example# 7304
derive the class ImageField from the base class FileField class .
0
example# 7305
default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string ,
0
example# 7306
_STR:0_ for _STR:1_ . define the method to_python with arguments self and data .
2
'"Upload a valid image. The file you uploaded was either not an image or a corrupted image."' ||| _STR:0_
'invalid_image' ||| _STR:1_
example# 7307
call the method to_python with an argument data from the base class of the class ImageField , substitute the result for f .
0
example# 7308
if f is None ,
0
example# 7309
return None .
0
example# 7310
from PIL import Image into default namespace .
0
example# 7311
if data has an _STR:0_ attribute ,
1
'temporary_file_path' ||| _STR:0_
example# 7312
substitute the result of the function data.temporary_file_path [ data . temporary_file_path ] for file .
0
example# 7313
if not ,
0
example# 7314
if data has an attribute _STR:0_ ,
1
'read' ||| _STR:0_
example# 7315
file is an instance of BytesIO class created with an argument : return value of the method data.read [ data . read ] .
0
example# 7316
if not ,
0
example# 7317
file is an instance of BytesIO class created with an argument : value under the _STR:0_ key of the data dictionary .
1
'content' ||| _STR:0_
example# 7318
try ,
0
example# 7319
call the method Image.open [ Image . open ] with an argument file , on the result call the verify method
0
example# 7320
if Exception exception is caught ,
0
example# 7321
call the function six.reraise [ six . reraise ] with 3 arguments : ValidationError , ValidationError created with 2 arguments :
0
example# 7322
value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary and code set to a string _STR:0_ , and third element of the return value of the function sys.exc_info [ sys . exc_info ] . if f has an attribute _STR:1_ and if f.seek [ f . seek ] is an callable object ,
2
'seek' ||| _STR:1_
'invalid_image' ||| _STR:0_
example# 7323
call the method f.seek [ f . seek ] with an argument integer 0 .
0
example# 7324
return f .
0
example# 7325
derive the class URLField from the base class CharField class .
0
example# 7326
substitute URLInput for widget .
0
example# 7327
default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string _STR:0_ for _STR:1_ .
2
'invalid' ||| _STR:1_
'Enter a valid URL.' ||| _STR:0_
example# 7328
default_validators is a list with an element , return value of the validators.URLValidator [ validators . URLValidator ] method .
0
example# 7329
define the method to_python with arguments self and data .
0
example# 7330
define the function split_url with an argument url .
0
example# 7331
try ,
0
example# 7332
call the urlsplit with an argument url , convert the result into a list and return it .
0
example# 7333
if ValueError exception is caught ,
0
example# 7334
raise an ValidationError with 2 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary and code set to _STR:0_ .
1
'invalid' ||| _STR:0_
example# 7335
call the method to_python with an argument data from the base class of the class URLField , substitute the result for value .
0
example# 7336
if value is true ,
0
example# 7337
call the function split_url with an argument value , substitute the result for url_fields .
0
example# 7338
if first element of the url_fields is false ,
0
example# 7339
first element of url_fields is string _STR:0_ .
1
'http' ||| _STR:0_
example# 7340
if second element of url_fields is false ,
0
example# 7341
substitute third element of url_fields for second element of url_fields .
0
example# 7342
third element of url_fields is an empty string .
0
example# 7343
call the function urlunsplit with an argument url_fields , use the result as an argument for the call to the function split_url ,
0
example# 7344
substitute the result for url_fields . call the function urlunsplit with an argument url_fields , substitute the result for value .
0
example# 7345
return value .
0
example# 7346
define the method clean with arguments self and value .
0
example# 7347
call the method self.to_python [ self . to_python ] with an argument value , strip the whitespaces from the result , substitute it for value .
0
example# 7348
call the method clean with an argument data from the base class of the class URLField , return the result .
0
example# 7349
derive the class BooleanField from the base class Field class .
0
example# 7350
substitute CheckboxInput for widget .
0
example# 7351
define the method to_python with arguments self and value .
0
example# 7352
if value is an instance of six.string_types [ six . string_types ] and value converted to lowercase is not equal to strings _STR:0_ or _STR:1_ ,
2
'false' ||| _STR:0_
'0' ||| _STR:1_
example# 7353
value is boolean False .
0
example# 7354
if not ,
0
example# 7355
convert value into boolean and substitute it for value .
0
example# 7356
call the method to_python with an argument data from the base class of the class BooleanField , return the result .
0
example# 7357
define the method validate with arguments self and value .
0
example# 7358
if value is false and self.required [ self . required ] is true ,
0
example# 7359
raise an ValidationError with 2 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary and code set to _STR:0_ .
1
'required' ||| _STR:0_
example# 7360
define the method _has_changed with arguments self , initial and data .
0
example# 7361
if initial equals a string _STR:0_ ,
1
'False' ||| _STR:0_
example# 7362
initial is boolean False .
0
example# 7363
convert initial and data into boolean , if they are not equal return boolean True , if they are return boolean False .
0
example# 7364
derive the class NullBooleanField from the base class BooleanField class .
0
example# 7365
substitute NullBooleanSelect for widget .
0
example# 7366
define the method to_python with arguments self and value .
0
example# 7367
if value is boolean True , string _STR:0_ or string _STR:1_ ,
2
'1' ||| _STR:1_
'True' ||| _STR:0_
example# 7368
return boolean True .
0
example# 7369
otherwise if value is boolean False , string _STR:0_ or string _STR:1_
2
'False' ||| _STR:0_
'0' ||| _STR:1_
example# 7370
return boolean False ,
0
example# 7371
if not ,
0
example# 7372
return None .
0
example# 7373
define the method validate with arguments self and value .
0
example# 7374
do nothing .
0
example# 7375
define the method _has_changed with arguments self , initial and data .
0
example# 7376
if initial is not None ,
0
example# 7377
convert initial into boolean and substitute it for initial .
0
example# 7378
if data is not None ,
0
example# 7379
convert data into boolean and substitute it for data .
0
example# 7380
if initial is not equal to data , return boolean True , if it is return boolean False .
0
example# 7381
derive the class ChoiceField from the base class Field class .
0
example# 7382
substitute Select for widget .
0
example# 7383
default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string ,
0
example# 7384
_STR:0_ for _STR:1_ . define the method __init__ with 9 arguments : self , choices set to an empty tuple , required set to boolean True , widget set to None ,
2
'invalid_choice' ||| _STR:1_
'Select a valid choice. %(value)s is not one of the available choices.' ||| _STR:0_
example# 7385
label set to None , initial set to None , help_text set to an empty string , unpacked list args and unpacked dictionary kwargs . call the __init__ method of the base class of the class ChoiceField , called with 7 arguments : required set to required ,
0
example# 7386
widget set to widget , label set to label , initial set to initial , help_text set to help_text , unpacked list args , and unpacked dictionary kwargs . substitute choices for self.choices [ self . choices ] .
0
example# 7387
define the method __deepcopy__ with arguments self and memo .
0
example# 7388
call the method __deepcopy__ with an argument memo from the base class of the class ChoiceField , substitute the result for result .
0
example# 7389
call the method copy.deepcopy [ copy . deepcopy ] with arguments self._choices [ self . _choices ] and memo , substitute the result for result._choices [ result . _choices ] .
0
example# 7390
return result .
0
example# 7391
define the method _get_choices with an argument self .
0
example# 7392
return self._choices [ self . _choices ] .
0
example# 7393
define the method _set_choices with arguments self and value .
0
example# 7394
self._choices [ self . _choices ] and self.widget.choices [ self . widget . choices ] are assigned value converted into a list .
0
example# 7395
choices is an property object of this class where _get_choices is a getter and _set_choices is a setter function .
0
example# 7396
define the method to_python with arguments self and value .
0
example# 7397
if value is contained in self.empty_values [ self . empty_values ] ,
0
example# 7398
return an empty string .
0
example# 7399
call the function smart_text with an argument value , return the result .
0
example# 7400
define the method validate with arguments self and value .
0
example# 7401
call the method validate with an argument value from the base class of the class ChoiceField .
0
example# 7402
if value is true and method self.valid_value [ self . valid_value ] called with an argument value evaluates to false ,
0
example# 7403
raise an ValidationError with 3 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary ,
1
'invalid_choice' ||| _STR:0_
example# 7404
code set to an string _STR:0_ and dictionary params with an entry : value for _STR:1_ . define the method valid_value with arguments self and value .
2
'invalid_choice' ||| _STR:0_
'value' ||| _STR:1_
example# 7405
call the function force_text with an argument value , substitute the result for text_value .
0
example# 7406
for every k and v in self.choices [ self . choices ] ,
0
example# 7407
if v is an instance of list or tuple type ,
0
example# 7408
for every k2 and v2 in v ,
0
example# 7409
if value equals k2 or text_value equals return value of the function force_text called with argument k2 ,
0
example# 7410
return boolean True .
0
example# 7411
if not ,
0
example# 7412
if value equals k or text_value equals return value of the function force_text called with argument k ,
0
example# 7413
return boolean True .
0
example# 7414
return boolean False .
0
example# 7415
derive the class TypedChoiceField from the base class ChoiceField class .
0
example# 7416
define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
0
example# 7417
if _STR:0_ key of the kwargs dictionary exists remove it and substitute its value for self.coerce [ self . coerce ] ,
1
'coerce' ||| _STR:0_
example# 7418
if not , self.coerce [ self . coerce ] is an identity lambda function with an argument val . if _STR:0_ key of the kwargs dictionary exists remove it and substitute its value for self.empty_value [ self . empty_value ] ,
1
'empty_value' ||| _STR:0_
example# 7419
if not , sself.empty_value [ sself . empty_value ] is an empty string . call the method __init__ with 2 arguments : unpacked list args and unpacked dictionary kwargs ,
0
example# 7420
from the base class of the class TypedChoiceField . define the method _coerce with arguments self and value .
0
example# 7421
if value equals self.empty_value [ self . empty_value ] or value is contained in self.empty_values [ self . empty_values ] ,
0
example# 7422
return self.empty_value [ self . empty_value ] .
0
example# 7423
try ,
0
example# 7424
call the function self.coerce [ self . coerce ] with an argument value , substitute it for value .
0
example# 7425
if ValueError , TypeError or ValidationError exception is caught ,
0
example# 7426
raise an ValidationError with 3 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary ,
1
'invalid_choice' ||| _STR:0_
example# 7427
code set to an string _STR:0_ and dictionary params with an entry : value for _STR:1_ . return value .
2
'invalid_choice' ||| _STR:0_
'value' ||| _STR:1_
example# 7428
define the method clean with arguments self and value .
0
example# 7429
call the method clean with an argument value from the base class of the class TypedChoiceField , substitute the result for value .
0
example# 7430
call the method self._coerce [ self . _coerce ] with an argument value , return the result .
0
example# 7431
derive the class MultipleChoiceField from the base class ChoiceField class .
0
example# 7432
substitute MultipleHiddenInput for hidden_widget .
0
example# 7433
substitute SelectMultiple for widget .
0
example# 7434
default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string ,
0
example# 7435
_STR:0_ for _STR:1_ , and return value of the function _ called with an argument string _STR:2_ for _STR:3_ . define the method to_python with arguments self and value .
4
'invalid_list' ||| _STR:3_
'invalid_choice' ||| _STR:1_
'Enter a list of values.' ||| _STR:2_
'Select a valid choice. %(value)s is not one of the available choices.' ||| _STR:0_
example# 7436
if value is false ,
0
example# 7437
return an empty list .
0
example# 7438
otherwise if value is not an instance of list ot tuple type ,
0
example# 7439
raise an ValidationError with 2 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary and code set to _STR:0_ .
1
'invalid_list' ||| _STR:0_
example# 7440
for every val in value call the function smart_text with an argument val , return the results in a lit .
0
example# 7441
define the method validate with arguments self and value .
0
example# 7442
if self.required [ self . required ] is true and value is false ,
0
example# 7443
raise an ValidationError with 3 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary ,
1
'required' ||| _STR:0_
example# 7444
and code set to an string _STR:0_ . for every val in value ,
1
'required' ||| _STR:0_
example# 7445
call the method self.valid_value [ self . valid_value ] with an argument val , if it evaluates to false ,
0
example# 7446
raise an ValidationError with 3 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary ,
1
'invalid_choice' ||| _STR:0_
example# 7447
code set to an string _STR:0_ and dictionary params with an entry : val for _STR:1_ . define the method _has_changed with arguments self , initial and data .
2
'invalid_choice' ||| _STR:0_
'value' ||| _STR:1_
example# 7448
if initial is None ,
0
example# 7449
initial is an empty list .
0
example# 7450
if data is None ,
0
example# 7451
data is an empty list .
0
example# 7452
if lengths of initial and data are not the same ,
0
example# 7453
return boolean True .
0
example# 7454
for every value in initial call the function force_text with an argument value , add the results into a set , substitute the resulting set for initial_set .
0
example# 7455
for every value in data call the function force_text with an argument value , add the results into a set , substitute the resulting set for data_set .
0
example# 7456
if data_set is not equal to initial_set , return boolean True , otherwise return boolean False .
0
example# 7457
derive the class TypedMultipleChoiceField from the base class MultipleChoiceField class .
0
example# 7458
define the method __init__ with 3 arguments : self unpacked list args and unpacked dictionary kwargs .
0
example# 7459
if _STR:0_ key of the kwargs dictionary exists remove it and substitute its value for self.coerce [ self . coerce ] ,
1
'coerce' ||| _STR:0_
example# 7460
if not , self.coerce [ self . coerce ] is an identity lambda function with an argument val . if _STR:0_ key of the kwargs dictionary exists remove it and substitute its value for self.empty_value [ self . empty_value ] ,
1
'empty_value' ||| _STR:0_
example# 7461
if not , self.empty_value [ self . empty_value ] is an empty list . call the method __init__ with 2 arguments : unpacked list args and unpacked dictionary kwargs ,
0
example# 7462
from the base class of the class TypedMultipleChoiceField . define the method _coerce with arguments self and value .
0
example# 7463
if value equals self.empty_value [ self . empty_value ] or value is contained in self.empty_values [ self . empty_values ] ,
0
example# 7464
return self.empty_value [ self . empty_value ] .
0
example# 7465
new_value is an empty list .
0
example# 7466
for every choice in value ,
0
example# 7467
try ,
0
example# 7468
call the method self.coerce [ self . coerce ] with an argument choice , append the result to new_value .
0
example# 7469
if ValueError , TypeError or ValidationError exception is caught ,
0
example# 7470
raise an ValidationError with 3 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary ,
1
'invalid_choice' ||| _STR:0_
example# 7471
code set to an string _STR:0_ and dictionary params with an entry : choice for _STR:1_ . return new_value .
2
'invalid_choice' ||| _STR:0_
'value' ||| _STR:1_
example# 7472
define the method clean with arguments self and value .
0
example# 7473
call the method clean with an argument value from the base class of the class TypedMultipleChoiceField , substitute the result for value .
0
example# 7474
call the method self._coerce [ self . _coerce ] with an argument value , return the result .
0
example# 7475
define the method validate with arguments self and value .
0
example# 7476
if value is not equal self.empty_value [ self . empty_value ] ,
0
example# 7477
call the method validate with an argument value from the base class of the class TypedMultipleChoiceField .
0
example# 7478
otherwise if self.required [ self . required ] is true ,
0
example# 7479
raise an ValidationError with 2 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary and code set to _STR:0_ .
1
'required' ||| _STR:0_
example# 7480
derive the class ComboField from the base class Field class .
0
example# 7481
define the method __init__ with arguments : self , fields set to an empty tuple , unpacked list args and unpacked dictionary kwargs .
0
example# 7482
call the method __init__ with 2 arguments : unpacked list args and unpacked dictionary kwargs , from the base class of the class ComboField .
0
example# 7483
for every f in fields ,
0
example# 7484
f.required [ f . required ] is boolean False .
0
example# 7485
substitute fields for self.fields [ self . fields ] .
0
example# 7486
define the method clean with arguments self and value .
0
example# 7487
call the method clean with an argument value from the base class of the class ComboField .
0
example# 7488
for every field in self.fields [ self . fields ] ,
0
example# 7489
call the method field.clean [ field . clean ] with an argument value , substitute the result for value .
0
example# 7490
return value .
0
example# 7491
derive the class MultiValueField from the base class Field class .
0
example# 7492
default_error_messages is an dictionary with 2 entries : return value of the function _ called with an argument string ,
0
example# 7493
_STR:0_ for _STR:1_ and return value of the function _ called with an argument string , _STR:2_ for _STR:3_ . define the method __init__ with arguments self , fields set to an empty ilst , unpacked list args and unpacked dictionary kwargs .
4
'Enter a complete value.' ||| _STR:2_
'Enter a list of values.' ||| _STR:0_
'incomplete' ||| _STR:3_
'invalid' ||| _STR:1_
example# 7494
if _STR:0_ key of the kwargs dictionary exists remove it and substitute its value for self.require_all_fields [ self . require_all_fields ] ,
1
'require_all_fields' ||| _STR:0_
example# 7495
if not , self.require_all_fields [ self . require_all_fields ] is boolean True . call the method __init__ with 2 arguments : unpacked list args and unpacked dictionary kwargs , from the base class of the class MultiValueField .
0
example# 7496
for every f in fields ,
0
example# 7497
if _STR:0_ key of the f.error_messages [ f . error_messages ] doesnt exists , assign it the value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary .
1
'incomplete' ||| _STR:0_
example# 7498
if self.require_all_fields [ self . require_all_fields ] is true ,
0
example# 7499
f.required [ f . required ] is boolean False .
0
example# 7500
substitute fields for self.fields [ self . fields ] .
0
example# 7501
define the method __deepcopy__ with arguments self and memo .
0
example# 7502
call the method __deepcopy__ with an argument memo , from the base class of the class MultiValueField , substitute the result for result .
0
example# 7503
for every x in self.fields [ self . fields ] call the method x.__deepcopy__ [ x . __deepcopy__ ] with an argument memo , put the result into a tuple , substitute it for result.fields [ result . fields ] .
0
example# 7504
return result .
0
example# 7505
define the method validate with arguments self and value .
0
example# 7506
do nothing .
0
example# 7507
define the method clean with arguments self and value .
0
example# 7508
clean_data is an empty list .
0
example# 7509
errors is an empty list .
0
example# 7510
if value is false or value is not an instance of list or tuple types ,
0
example# 7511
if value is false or for every v in value every v is contained in self.empty_values [ self . empty_values ] ,
0
example# 7512
if self.required [ self . required ] is true ,
0
example# 7513
raise an ValidationError with 2 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary and code set to _STR:0_ .
1
'required' ||| _STR:0_
example# 7514
if not ,
0
example# 7515
call the function self.compress [ self . compress ] with empty list as an argument , return the result .
0
example# 7516
if not ,
0
example# 7517
raise an ValidationError with 2 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary and code set to _STR:0_ .
1
'invalid' ||| _STR:0_
example# 7518
for every i and field in enumerated iterable self.fields [ self . fields ] ,
0
example# 7519
try ,
0
example# 7520
substitute i-th element of value for field_value .
0
example# 7521
if IndexError exception is caught ,
0
example# 7522
field_value is None .
0
example# 7523
if field_value is cotained in self.empty_values [ self . empty_values ] ,
0
example# 7524
if self.require_all_fields [ self . require_all_fields ] is boolean true ,
0
example# 7525
if self.required [ self . required ] is boolean true ,
0
example# 7526
raise an ValidationError with 2 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary and code set to _STR:0_ .
1
'required' ||| _STR:0_
example# 7527
otherwise if field.required [ field . required ] is true ,
0
example# 7528
get the value under the _STR:0_ key of the field.error_messages [ field . error_messages ] dictionary , if it is not contained in errors ,
1
'incomplete' ||| _STR:0_
example# 7529
get the value under the _STR:0_ key of the field.error_messages [ field . error_messages ] dictionary , append it to errors .
1
'incomplete' ||| _STR:0_
example# 7530
skip this loop iteration ,
0
example# 7531
try ,
0
example# 7532
call the method field.clean [ field . clean ] with an argument field_value , append the result to clean_data .
0
example# 7533
if ValidationError , renamed to e , is caught ,
0
example# 7534
extend errors list with m for every m in e.error_list [ e . error_list ] , only if m is not in errors .
0
example# 7535
if errors is true ,
0
example# 7536
raise an ValidationError with an argument errors .
0
example# 7537
call the method self.compress [ self . compress ] with an argument clean_data , substitute the result for out .
0
example# 7538
call the method self.validate [ self . validate ] with an argument out .
0
example# 7539
call the method self.run_validators [ self . run_validators ] with an argument out .
0
example# 7540
return out .
0
example# 7541
define the method compress with arguments self and data_list .
0
example# 7542
raise an NotImplementedError with an argument string _STR:0_ .
1
'Subclasses must implement this method.' ||| _STR:0_
example# 7543
define the method has_changed with arguments self , initial and data .
0
example# 7544
if initial is None ,
0
example# 7545
for every x in sequence of integer from integer 0 to length of data , append an empty string to a list , substitute the resulting list for initial .
0
example# 7546
if not ,
0
example# 7547
if initial is not an instance of the list type ,
0
example# 7548
call the method self.widget.decompress [ self . widget . decompress ] with an argument initial , substitute the result for initial .
0
example# 7549
for every field , initial and data in list of tuples tuple containing elements of self.fields [ self . fields ] , initial and data , respectively ,
0
example# 7550
call the method field._has_changed [ field . _has_changed ] with 2 arguments : return value of the function field.to_python [ field . to_python ] called with an argument initial ,
0
example# 7551
and data , if it evaluates to true , return boolean True .
0
example# 7552
return boolean False .
0
example# 7553
derive the class FilePathField from the base class ChoiceField class .
0
example# 7554
define the method __init__ with 13 arguments : self , path , match set to None , recursive set to boolean False ,
0
example# 7555
allow_files set to boolean True , allow_folders set to boolean False , required set to boolean True , widget set to None , label set to None , initial set to None , help_text set to an empty string , unpacked list args , unpacked dictionary kwargs . substitute path , match and recursive for self.path [ self . path ] , self.match [ self . match ] and self.recursive [ self . recursive ] .
0
example# 7556
substitute allow_files and allow_folders for self.allow_files [ self . allow_files ] and self.allow_folders [ self . allow_folders ] .
0
example# 7557
call the __init__ method of the base class of the class FilePathField , with arguments : choices set to an empty tuple,4
0
example# 7558
required set to required , widget set to widget , label set to label , initial st to initial , help_text set to help_text , unpacked list args , unpacked dictionary kwargs . if self.required [ self . required ] is true ,
0
example# 7559
self.choices [ self . choices ] is an empty list .
0
example# 7560
if not ,
0
example# 7561
self.choices [ self . choices ] is an list containing an tuple with 2 elements : an empty string and string _STR:0_ .
1
"---------" ||| _STR:0_
example# 7562
if self.match [ self . match ] is not None ,
0
example# 7563
compile self.match [ self . match ] regular expression , substitute it for self.match_re [ self . match_re ] .
0
example# 7564
if recursive is true ,
0
example# 7565
for root , dirs and files in sorted list of the directory tree starting from the directory self.path [ self . path ] ,
0
example# 7566
if self.allow_files [ self . allow_files ] is true ,
0
example# 7567
for every f in files ,
0
example# 7568
if self.match [ self . match ] is None or call to the method self.match_re.search [ self . match_re . search ] with an argument f , evaluated to true ,
0
example# 7569
join root and f into a file , substitute it for f .
0
example# 7570
append a tuple with 2 elements : f and f with first occurrence of the path replaced with an empty string , to self.choices [ self . choices ] .
0
example# 7571
if self.allow_folders [ self . allow_folders ] is true ,
0
example# 7572
for every f in files ,
0
example# 7573
if f equals to string _STR:0_ ,
1
'__pycache__' ||| _STR:0_
example# 7574
skip this loop execution .
0
example# 7575
if self.match [ self . match ] is None or call to the method self.match_re.search [ self . match_re . search ] with an argument f , evaluated to true ,
0
example# 7576
join root and f in path , substitute the result for f .
0
example# 7577
append a tuple with 2 elements : f and f with first occurrence of the path replaced with an empty string , to self.choices [ self . choices ] .
0
example# 7578
if not ,
0
example# 7579
try ,
0
example# 7580
for f in sorted list of the files in the self.path [ self . path ] directory ,
0
example# 7581
if f equals to string _STR:0_ ,
1
'__pycache__' ||| _STR:0_
example# 7582
skip this loop execution .
0
example# 7583
join self.path [ self . path ] and f in path , substitute the result for full_file .
0
example# 7584
if self.allow_files [ self . allow_files ] is true and full_file is a file , or if self.allow_folders [ self . allow_folders ] is true and full_file is an directory ,
0
example# 7585
and only if self.match [ self . match ] is None or return value of the method self.match_re.search [ self . match_re . search ] called with an argument f is true . append a tuple containing 2 elements : full_file and f to self.choices [ self . choices ] list .
0
example# 7586
if OSError exception is caught ,
0
example# 7587
do nothing .
0
example# 7588
substitute self.choices [ self . choices ] for self.widgetchoices [ self . widgetchoices ] .
0
example# 7589
derive the class SplitDateTimeField from the base class MultiValueField class .
0
example# 7590
substitute SplitDateTimeWidget for widget .
0
example# 7591
substitute SplitHiddenDateTimeWidget for hidden_widget .
0
example# 7592
default_error_messages is an dictionary with 2 entries : return value of the function _ called with an string _STR:0_ ,
1
'Enter a valid date.' ||| _STR:0_
example# 7593
for _STR:0_ and return value of the function _ called with an string _STR:1_ , for 'invalid_time . define the method __init__ with 3 arguments : self , input_date_formats set to None , input_time_formats set to None ,
2
'invalid_date' ||| _STR:0_
'Enter a valid time.' ||| _STR:1_
example# 7594
and errors set to the result of self.default_error_messages.copy [ self . default_error_messages . copy ] .
0
example# 7595
if _STR:0_ is contained in kwargs ,
1
'error_messages' ||| _STR:0_
example# 7596
get the value under the _STR:0_ key of the kwargs dictionary , update errors dictionary with it .
1
'error_messages' ||| _STR:0_
example# 7597
get the value under the _STR:0_ key of the kwargs dictionary , substitute it for localize , if the key doesnt exists , substitute the result for localize .
1
'localize' ||| _STR:0_
example# 7598
fields is an tuple containing instances of the class DateField , created with 3 arguments : input_formats set to input_date_formats ,
0
example# 7599
error_messages as an dictionary with an entry : value under the _STR:0_ of errors dictionary for _STR:1_ , localize set to localize , and an instance of the class TimeField created with 3 arguments : input_formats set to input_time_formats , error_messages as an dictionary with an entry : value under the _STR:2_ of errors dictionary for _STR:1_ , localize set to localize call the __init__ method with fields , unpacked list args and unpacked dictionary kwargs from the base class of the SplitDateTimeField class .
3
'invalid_date' ||| _STR:0_
'invalid_time' ||| _STR:2_
'invalid' ||| _STR:1_
example# 7600
define the method compress with arguments self and data_list .
0
example# 7601
if data_list is true ,
0
example# 7602
if first element of data_list is contained in self.empty_values [ self . empty_values ] ,
0
example# 7603
raise an ValidationError with 2 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary and code set to string _STR:0_ .
1
'invalid_date' ||| _STR:0_
example# 7604
if second element of data_list is contained in self.empty_values [ self . empty_values ] ,
0
example# 7605
raise an ValidationError with 2 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary and code set to string _STR:0_ .
1
'invalid_time' ||| _STR:0_
example# 7606
call the method datetime.datetime.combine [ datetime . datetime . combine ] with unpacked list data_list , substitute the result for result .
0
example# 7607
call the method from_current_timezone with an argument result , return the result .
0
example# 7608
return None .
0
example# 7609
derive the class IPAddressField from the base class CharField class .
0
example# 7610
default_validators is an list containing validators.validate_ipv4_address [ validators . validate_ipv4_address ] .
0
example# 7611
define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
0
example# 7612
call the function warnings.warn [ warnings . warn ] with 2 arguments string _STR:0_ ,
1
"IPAddressField has been deprecated. Use GenericIPAddressField instead." ||| _STR:0_
example# 7613
and RemovedInDjango19Warning . call the __init__ method with unpacked list args and unpacked dictionary kwargs from the base class of the IPAddressField class .
0
example# 7614
define the method to_python with arguments self and value .
0
example# 7615
if value is contained in self.empty_values [ self . empty_values ] ,
0
example# 7616
return an empty string .
0
example# 7617
strip whitespaces from both sides of the value , return the result .
0
example# 7618
derive the class GenericIPAddressField from the base class CharField class .
0
example# 7619
define the method __init__ with 5 arguments : self , protocol set to string _STR:0_ , unpack_ipv4 set to boolean False ,
1
'both' ||| _STR:0_
example# 7620
unpacked list args , unpacked dictionary kwargs . substitute unpack_ipv4 for self.unpack_ipv4 [ self . unpack_ipv4 ] .
0
example# 7621
call the method validators.ip_address_validators [ validators . ip_address_validators ] with arguments protocol , unpack_ipv4 , substitute first element of the result for self.default_validators [ self . default_validators ] .
0
example# 7622
call the __init__ method with unpacked list args and unpacked dictionary kwargs from the base class of the GenericIPAddressField class .
0
example# 7623
define the method to_python with arguments self and value .
0
example# 7624
if value is contained in self.empty_values [ self . empty_values ] ,
0
example# 7625
return an empty string .
0
example# 7626
strip whitespaces from both sides of the value , substitute it for value .
0
example# 7627
if value is true and character _STR:0_ is contained in value ,
1
':' ||| _STR:0_
example# 7628
call the function clean_ipv6_address with arguments value and self.unpack_ipv4 [ self . unpack_ipv4 ] , return the result .
0
example# 7629
return value .
0
example# 7630
derive the class SlugField from the base class CharField class .
0
example# 7631
default_validators is an list containing validators.validate_slug [ validators . validate_slug ] .
0
example# 7632
define the method clean with arguments self and value .
0
example# 7633
call the self.to_python [ self . to_python ] method with an argument value , strip the result of the whitespaces from the sides , substitute the result for value .
0
example# 7634
call the clean method wiht value argument from the base class of the SlugField class , return the result .
0
example# 7635
from __future__ import unicode_literals into default name space .
0
example# 7636
from collections import OrderedDict into default name space .
0
example# 7637
import module copy .
0
example# 7638
import module datetime .
0
example# 7639
import module warnings .
0
example# 7640
from django.core.exceptions [ django . core . exceptions ] import ValidationError and NON_FIELD_ERRORS into default name space .
0
example# 7641
from django.forms.fields [ django . forms . fields ] import Field and FileField into default name space .
0
example# 7642
from django.forms.utils [ django . forms . utils ] import flatatt , ErrorDict and ErrorList into default name space .
0
example# 7643
from django.forms.widgets [ django . forms . widgets ] import Media , MediaDefiningClass , TextInput and Textarea into default name space .
0
example# 7644
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
0
example# 7645
from django.utils.encoding [ django . utils . encoding ] import smart_text , force_text and python_2_unicode_compatible into default name space .
0
example# 7646
from django.utils.html [ django . utils . html ] import conditional_escape and format_html into default name space .
0
example# 7647
from django.utils.safestring [ django . utils . safestring ] import mark_safe into default name space .
0
example# 7648
from django.utils.translation [ django . utils . translation ] import ugettext as _ into default name space .
0
example# 7649
from django.utils [ django . utils ] import six into default name space .
0
example# 7650
__all__is an tuple with 2 elements : strings _STR:0_ and _STR:1_ .
2
'BaseForm' ||| _STR:0_
'Form' ||| _STR:1_
example# 7651
define the function pretty_name with an argument name .
0
example# 7652
if name is false ,
0
example# 7653
return an empty string .
0
example# 7654
replace all the occurrences of character _STR:0_ in name with a whitespace , capitalize the first letter and return the result .
1
'_' ||| _STR:0_
example# 7655
define the function get_declared_fields with 3 arguments : bases , attrs and with_base_fields set to boolean True .
0
example# 7656
call the function warnings.warn [ warnings . warn ] with 3 arguments : string _STR:0_ ,
1
"get_declared_fields is deprecated and will be removed in Django 1.9." ||| _STR:0_
example# 7657
RemovedInDjango19Warning , stacklevel set to integer 2. for field_name every obj in list created from the elements of the return value of the function six.iteritems [ six . iteritems ] with an argument attrs .
0
example# 7658
if obj is an instance of Field , append to a list a tuple with 2 elements : field_name , and poped value under the field_name key of the attrs dictionary , substitute the resulting list for fields . sort fields elements with key being a lambda function with argument x and return value creation_counter filed of first element of x .
0
example# 7659
if with_base_fields is true ,
0
example# 7660
for every base in reversed order of bases ,
0
example# 7661
if base has an attribute _STR:0_ .
1
'base_fields' ||| _STR:0_
example# 7662
call the method six.iteritems [ six . iteritems ] with an argument base.base_fields [ base . base_fields ] , convert it to a list and append fields to it , substitute the result for fields .
0
example# 7663
if not ,
0
example# 7664
for every base in reversed order of bases ,
0
example# 7665
if base has an _STR:0_ attribute ,
1
'declared_fields' ||| _STR:0_
example# 7666
call the method six.iteritems [ six . iteritems ] with an argument base.declared_fields [ base . declared_fields ] , convert it to a list and append fields to it , substitute the result for fields .
0
example# 7667
return an instance of OrderedDict class , created with an argument fields .
0
example# 7668
derive the class DeclarativeFieldsMetaclass from the base class MediaDefiningClass .
0
example# 7669
define the method __new__ with 4 arguments : mcs , name , bases and attrs .
0
example# 7670
current_fields is an empty list .
0
example# 7671
for every key and value in list created out of the elements of the result of the call to the method attrs.items [ attrs . items ] ,
0
example# 7672
if value is an instance of Field class ,
0
example# 7673
append a tuple with elements key and value to current_fields .
0
example# 7674
remove entry at the key key of the attrs dictionary .
0
example# 7675
sort current_fields elements with key being a lambda function with argument x and return value creation_counter filed of first element of x .
0
example# 7676
value under the _STR:0_ key of the attrs dictionary is an instance of OrderedDict class , created with an argument current_fields .
1
'declared_fields' ||| _STR:0_
example# 7677
call the method __new__ from the base class of the class DeclarativeFieldsMetaclass , with 4 arguments : mcs , name , bases and attrs .
0
example# 7678
declared_fields is an instance of OrderedDict class .
0
example# 7679
for every base in new_class.__mro__ [ new_class . __mro__ ] in reversed order ,
0
example# 7680
if base has an attribute _STR:0_ ,
1
'declared_fields' ||| _STR:0_
example# 7681
update declared_fields dictionary with entry base.declared_fields [ base . declared_fields ] .
0
example# 7682
call the method base.__dict__.items [ base . __dict__ . items ] , for every attr and value in the result ,
0
example# 7683
if value is None and attr is contained in declared_fields ,
0
example# 7684
remove entry at the attr key of the declared_fields dictionary .
0
example# 7685
substitute declared_fields for new_class.base_fields [ new_class . base_fields ] .
0
example# 7686
substitute declared_fields for new_class.declared_fields [ new_class . declared_fields ] .
0
example# 7687
return new_class .
0
example# 7688
python_2_unicode_compatible decorator ,
0
example# 7689
derive the class BaseForm from the base class object .
0
example# 7690
define the method __init__ with 4 arguments : self , data set to None , files set to None , auto_id is an string _STR:0_ , prefix is None ,
1
'id_%s' ||| _STR:0_
example# 7691
initial set to None , error_class set to ErrorList , label_suffix set to None , empty_permitted set to boolean False . if data is not None or files is not None , self.is_bound [ self . is_bound ] is boolean True , otherwise it is boolean False .
0
example# 7692
if data is true , substitute it for self.data [ self . data ] , if not self.data [ self . data ] is an empty dictionary .
0
example# 7693
if files is true , substitute it for self.files [ self . files ] , if not self.files [ self . files ] is an empty dictionary .
0
example# 7694
substitute auto_id for self.auto_id [ self . auto_id ] .
0
example# 7695
substitute prefix for self.prefix [ self . prefix ] .
0
example# 7696
if initial is true , substitute it for self.initial [ self . initial ] , if not self.files [ self . files ] is an empty dictionary .
0
example# 7697
substitute .error_class for self.error_class [ self . error_class ] .
0
example# 7698
if label_suffix is not None substitute label_suffix for self.label_suffix [ self . label_suffix ] ,
0
example# 7699
otherwise substitute return value of the function _ called with an argument _STR:0_ for self.label_suffix [ self . label_suffix ] . substitute empty_permitted for self.empty_permitted [ self . empty_permitted ] .
1
':' ||| _STR:0_
example# 7700
self._errors [ self . _errors ] is None .
0
example# 7701
self._changed_data [ self . _changed_data ] is None .
0
example# 7702
call the function copy.deepcopy [ copy . deepcopy ] with an argument self.base_fields [ self . base_fields ] , substitute the result for self.fields [ self . fields ] .
0
example# 7703
define the method __str__ with an argument self .
0
example# 7704
call the method self.as_table [ self . as_table ] , return the result .
0
example# 7705
define the method __iter__ with an argument self .
0
example# 7706
for every name in self.fields [ self . fields ] ,
0
example# 7707
get the value under the name key of the self dictionary , yield it as the return value of the generator .
0
example# 7708
define the method __getitem__ with 2 arguments : self and name .
0
example# 7709
try ,
0
example# 7710
get the value under the name key of the self.fields [ self . fields ] dictionary , substitute it for field .
0
example# 7711
if KeyError exception is caught ,
0
example# 7712
raise an KeyError with an argument string _STR:0_ , substitute ' % s ' with name and self.__class__.__name__ [ self . __class__ . __name__ ] .
1
"Key %r not found in '%s'" ||| _STR:0_
example# 7713
return an instance of BoundField class , created with arguments self , field and name .
0
example# 7714
property decorator ,
0
example# 7715
define the method errors with an argument self .
0
example# 7716
if self._errors [ self . _errors ] is None ,
0
example# 7717
call the method self.full_clean [ self . full_clean ] .
0
example# 7718
return self._errors [ self . _errors ] .
0
example# 7719
define the method is_valid with an argument self .
0
example# 7720
if self.is_bound [ self . is_bound ] is true and self.errors [ self . errors ] is false , return boolean True , otherwise return boolean False .
0
example# 7721
define the method add_prefix with 2 arguments : self and field_name .
0
example# 7722
substitute ' % s ' in string _STR:0_ with self.prefix [ self . prefix ] and field_name and return it , if self.prefix [ self . prefix ] is true , if not return field_name .
1
'%s-%s' ||| _STR:0_
example# 7723
define the method add_initial_prefix with 2 arguments : self and field_name .
0
example# 7724
return string _STR:0_ where ' % s ' is replaced with return value of the self.add_prefix [ self . add_prefix ] method called with an argument field_name .
1
'initial-%s' ||| _STR:0_
example# 7725
define the method _html_output with 6 arguments : self , normal_row , error_row , row_ender , help_text_html and errors_on_separate_row .
0
example# 7726
call the method self.non_field_errors [ self . non_field_errors ] , substitute the result for top_errors .
0
example# 7727
output and hidden_fields are both empty lists .
0
example# 7728
call the method self.fields.items [ self . fields . items ] , for every name and field in return value ,
0
example# 7729
html_class_attr is an empty string .
0
example# 7730
substitute value under the name key for bf .
0
example# 7731
call the method self.error_class [ self . error_class ] with an argument list containing results of the function conditional_escape ,
0
example# 7732
called with an argument error , for every error in bf.errors [ bf . errors ] , substitute the result for bf_errors . if bf.is_hidden [ bf . is_hidden ] is true ,
0
example# 7733
if bf_errors is true ,
0
example# 7734
call the function _ with an argument string _STR:0_ , where _STR:1_ is replaced with name ,
2
'%(name)s' ||| _STR:1_
'(Hidden field %(name)s) %(error)s' ||| _STR:0_
example# 7735
and _STR:0_ is replaced with return value of the force_text function called with an argument e , extend the top_errors with the result . call the function six.text_type [ six . text_type ] with an argument bf , append the result to hidden_fields .
1
'%(error)s' ||| _STR:0_
example# 7736
if not ,
0
example# 7737
call the method bf.css_classes [ bf . css_classes ] , substitute the result for css_classes .
0
example# 7738
if css_classes is true ,
0
example# 7739
replace `` % s '' from the string _STR:0_ with css_classes , substitute it for html_class_attr .
1
' class="%s"' ||| _STR:0_
example# 7740
if errors_on_separate_row and bf_errors are both true ,
0
example# 7741
call the function force_text with an argument bf_errors , format the error_row string with the result , append it to the output .
0
example# 7742
if bf.label [ bf . label ] is true ,
0
example# 7743
call the function force_text with an argument bf.label [ bf . label ] , use the result as an argument for the call to the function conditional_escape , substitute the result label .
0
example# 7744
call the function bf.label_tag [ bf . label_tag ] with an argument label , if the result is true substitute it for label , otherwise label is an empty string .
0
example# 7745
if not ,
0
example# 7746
label is an empty string .
0
example# 7747
if field.help_text [ field . help_text ] is true ,
0
example# 7748
call the function force_text with an argument field.help_text [ field . help_text ] , format help_text_html with it , substitute the result for help_text .
0
example# 7749
if not ,
0
example# 7750
label is an empty string .
0
example# 7751
format string normal_row with an dictionary containing 6 entries : return value of the function force_text with an argument bf_errors ,
0
example# 7752
for _STR:0_ , return value of the function force_text with an argument label for _STR:1_ , return value of the function six.text_type [ six . text_type ] , with an argument bf , for _STR:2_ , help_text for help_text , html_class_attr for _STR:3_ and bf.html_name [ bf . html_name ] for _STR:4_ . if top_errors is true ,
5
'field_name' ||| _STR:4_
'errors' ||| _STR:0_
'html_class_attr' ||| _STR:3_
'label' ||| _STR:1_
'field' ||| _STR:2_
example# 7753
call the function force_text with an argument top_errors , format error_row with it , insert it at the beginning of output .
0
example# 7754
if hidden_fields is true ,
0
example# 7755
join hidden_fields elements into a string , without separation , substitute the result for str_hidden .
0
example# 7756
if output is true ,
0
example# 7757
substitute last element of output for last_row .
0
example# 7758
if last_row doesnt ends with row_ender ,
0
example# 7759
format string normal_row with an dictionary containing 5 entries : an empty string for _STR:0_ , empty string for _STR:1_ ,
2
'errors' ||| _STR:0_
'label' ||| _STR:1_
example# 7760
empty string for _STR:0_ , empty string for _STR:1_ and html_class_attr for html_class_attr . append last_row to output .
2
'help_text' ||| _STR:1_
'field' ||| _STR:0_
example# 7761
create list out of last_row elements from the start to the last length of row_ender element , append str_hidden and row_ender to it ,
0
example# 7762
substitute the result for last element of output . if not ,
0
example# 7763
append str_hidden to output .
0
example# 7764
join elements of output into a string with newline as separator , use it as an argument for the call to the function mark_safe , return it .
0
example# 7765
define the method as_table with an argument self .
0
example# 7766
return the result of the method self._html_output [ self . _html_output ] , called with 5 arguments : normal_row to a string ,
0
example# 7767
_STR:0_ , error_row set to a a string , _STR:1_ , row_ender set to a string _STR:2_ , help_text_html set to a string , _STR:3_ and errors_on_separate_row set to boolean False . define the method as_ul with an argument self .
4
'</td></tr>' ||| _STR:2_
'<br /><span class="helptext">%s</span>' ||| _STR:3_
'<tr%(html_class_attr)s><th>%(label)s</th><td>%(errors)s%(field)s%(help_text)s</td></tr>' ||| _STR:0_
'<tr><td colspan="2">%s</td></tr>' ||| _STR:1_
example# 7768
return the result of the method self._html_output [ self . _html_output ] , called with 5 arguments : normal_row to a string ,
0
example# 7769
_STR:0_ , error_row set to a a string _STR:1_ , row_ender set to a string _STR:2_ , help_text_html set to a string , _STR:3_ , and errors_on_separate_row set to boolean False . define the method as_p with an argument self .
4
'<li%(html_class_attr)s>%(errors)s%(label)s %(field)s%(help_text)s</li>' ||| _STR:0_
' <span class="helptext">%s</span>' ||| _STR:3_
'<li>%s</li>' ||| _STR:1_
'</li>' ||| _STR:2_
example# 7770
return the result of the method self._html_output [ self . _html_output ] , called with 5 arguments : normal_row to a string ,
0
example# 7771
_STR:0_ , error_row set to a a string ' % s ' , row_ender set to a string _STR:1_ , help_text_html set to a string , < span class=_STR:2_ > % s < /span > ' and errors_on_separate_row set to boolean True . define the method non_field_errors with an argument self .
3
"helptext" ||| _STR:2_
'<p%(html_class_attr)s>%(label)s %(field)s%(help_text)s</p>' ||| _STR:0_
'</p>' ||| _STR:1_
example# 7772
return the result of the method self.errors.get [ self . errors . get ] called with 2 arguments : NON_FIELD_ERRORS and return value of the method ,
0
example# 7773
self.error_class [ self . error_class ] called with an argument error_class set to string _STR:0_ . define the method _raw_value with 2 arguments : self and fieldname .
1
'nonfield' ||| _STR:0_
example# 7774
substitute the value under the fieldname key of the self.fields [ self . fields ] dictionary for field .
0
example# 7775
call the method self.add_prefix [ self . add_prefix ] with an argument fieldname , substitute it for prefix .
0
example# 7776
return the result of the method field.widget.value_from_datadict [ field . widget . value_from_datadict ] called with 3 arguments : self.data [ self . data ] , self.files [ self . files ] and prefix .
0
example# 7777
define the method add_error with 3 arguments : self , field and errors .
0
example# 7778
if error is not an instance of ValidationError ,
0
example# 7779
error is an instance of ValidationError created with an argument error .
0
example# 7780
if error has an attribute _STR:0_ ,
1
'error_dict' ||| _STR:0_
example# 7781
if field is not None ,
0
example# 7782
raise an TypeError with an argument string _STR:0_ .
1
"The argument `field` must be `None` when the `error`argument contains errors for multiple fields." ||| _STR:0_
example# 7783
if not ,
0
example# 7784
substitute error.error_dict [ error . error_dict ] for error .
0
example# 7785
if not ,
0
example# 7786
error is an dictionary with an initial entry error.error_list [ error . error_list ] for filed if true , or NON_FIELD_ERRORS if not .
0
example# 7787
call the method error.items [ error . items ] , for every field and error_list in the result ,
0
example# 7788
if field is not contained in self.errors [ self . errors ] ,
0
example# 7789
if field is not equal to NON_FIELD_ERRORS and field is not contained in self.fields [ self . fields ] ,
0
example# 7790
raise an ValueError with an argument string _STR:0_ , with ' % s ' replaced with self.__class__.__name__ [ self . __class__ . __name__ ] and field , respectively .
1
"'%s' has no field named '%s'." ||| _STR:0_
example# 7791
if field equals NON_FIELD_ERRORS ,
0
example# 7792
call the method self.error_class [ self . error_class ] with an argument error_class as an string _STR:0_ ,
1
'nonfield' ||| _STR:0_
example# 7793
substitute the result for value under the field key of the self._errors [ self . _errors ] dictionary . if not ,
0
example# 7794
call the method self.error_class [ self . error_class ] , substitute the result for value under the field key of the self._errors [ self . _errors ] dictionary .
0
example# 7795
extend the value under the field key of the self._errors [ self . _errors ] dictionary with error_list .
0
example# 7796
if field is contained in self.cleaned_data [ self . cleaned_data ] ,
0
example# 7797
delete the entry of self.cleaned_data [ self . cleaned_data ] dictionary under the key field .
0
example# 7798
define the method has_error with 3 arguments : self , field and code set to None .
0
example# 7799
if code is None ,
0
example# 7800
if field is contained in self.errors [ self . errors ] return boolean True , if not , return boolean False .
0
example# 7801
if field is contained in self.errors [ self . errors ] ,
0
example# 7802
call the method self.errors.as_data [ self . errors . as_data ] , for every error for value under the filed key of the returned dictionary ,
0
example# 7803
if error.code [ error . code ] equals code ,
0
example# 7804
return boolean True .
0
example# 7805
return boolean False .
0
example# 7806
define the method full_clean with an argument self .
0
example# 7807
self._errors [ self . _errors ] is an instance of ErrorDict .
0
example# 7808
if self.is_bound [ self . is_bound ] is false ,
0
example# 7809
return nothing .
0
example# 7810
self.cleaned_data [ self . cleaned_data ] is an empty dictionary .
0
example# 7811
if self.empty_permitted [ self . empty_permitted ] is true and call to the method self.has_changed [ self . has_changed ] evaluates to false ,
0
example# 7812
return nothing .
0
example# 7813
call the method self._clean_fields [ self . _clean_fields ] .
0
example# 7814
call the method self._clean_form [ self . _clean_form ] .
0
example# 7815
call the method self._post_clean [ self . _post_clean ] .
0
example# 7816
define the method _clean_fields with an argument self .
0
example# 7817
call the method self.fields.items [ self . fields . items ] , for every name and field in result ,
0
example# 7818
call the method field.widget.value_from_datadict [ field . widget . value_from_datadict ] with 3 arguments : self.data [ self . data ] , self.files [ self . files ] and return value of the method ,
0
example# 7819
self.add_prefix [ self . add_prefix ] called with an argument name , substitute the result for value . try ,
0
example# 7820
if field is an instance of FileField ,
0
example# 7821
get the value under the name key of the self.initial [ self . initial ] dictionary , if it exists substitute it for initial ,
0
example# 7822
if not substitute field.initial [ field . initial ] for initial . call the method filed.clean [ filed . clean ] with arguments value and initial , substitute the result for value .
0
example# 7823
if not ,
0
example# 7824
call the method field.clean [ field . clean ] with an argument value , substitute the result for value .
0
example# 7825
substitute value for the value under the name key of the self.cleaned_data [ self . cleaned_data ] dictionary .
0
example# 7826
if self has an attribute _STR:0_ , where ' % s ' is replaced with name ,
1
'clean_%s' ||| _STR:0_
example# 7827
get _STR:0_ , where ' % s ' is replaced with name ' attribute of the self object , call the result as an function ,
1
'clean_%s' ||| _STR:0_
example# 7828
substitute the result for value . substitute value for the value under the name key of the self.cleaned_data [ self . cleaned_data ] dictionary .
0
example# 7829
if ValidationError renamed to e , exception is caught ,
0
example# 7830
call the method self.add_error [ self . add_error ] with 2 arguments name and e .
0
example# 7831
define the method _clean_form with an argument self .
0
example# 7832
try ,
0
example# 7833
call the method self.clean [ self . clean ] , substitute the result for cleaned_data .
0
example# 7834
if ValidationError renamed to e , exception is caught ,
0
example# 7835
call the method self.add_error [ self . add_error ] with 2 arguments None and e .
0
example# 7836
if not ,
0
example# 7837
if cleaned_data is not None ,
0
example# 7838
substitute cleaned_data for self.cleaned_data [ self . cleaned_data ] .
0
example# 7839
define the method _post_clean with an argument self .
0
example# 7840
do nothing .
0
example# 7841
define the method clean with an argument self .
0
example# 7842
return self.cleaned_data [ self . cleaned_data ] .
0
example# 7843
define the method has_changed with an argument self .
0
example# 7844
convert self.changed_data [ self . changed_data ] into boolean , return it .
0
example# 7845
property decorator ,
0
example# 7846
define the method changed_data with an argument self .
0
example# 7847
if self._changed_data [ self . _changed_data ] is None ,
0
example# 7848
self._changed_data [ self . _changed_data ] is an empty list .
0
example# 7849
call the method self.fields.items [ self . fields . items ] , for every name and field in the result ,
0
example# 7850
call the method self.add_prefix [ self . add_prefix ] with an argument name , substitute the result for prefixed_name .
0
example# 7851
call the method field.widget.value_from_datadict [ field . widget . value_from_datadict ] with 3 arguments : self.data [ self . data ] , self.files [ self . files ] , prefixed_name , substitute the result for data_value .
0
example# 7852
if field.show_hidden_initial [ field . show_hidden_initial ] is false ,
0
example# 7853
get the value under the name key of the self.initial [ self . initial ] dictionary , if it exists substitute it for initial_value ,
0
example# 7854
if not substitute field.initial [ field . initial ] for initial_value . if initial_value is an callable object ,
0
example# 7855
call the function initial_value , substitute the result for initial_value .
0
example# 7856
if not ,
0
example# 7857
call the method self.add_initial_prefix [ self . add_initial_prefix ] with an argument name , substitute the result for initial_prefixed_name .
0
example# 7858
call the method field.hidden_widget [ field . hidden_widget ] , substitute the result for field.hidden_widget [ field . hidden_widget ] .
0
example# 7859
try ,
0
example# 7860
call the method ( hidden_widget.value_from_datadict [ hidden_widget . value_from_datadict ] with 3 arguments : self.data [ self . data ] , self.files [ self . files ] and initial_prefixed_name ,
0
example# 7861
use the result as an argument for the call to the field.to_python [ field . to_python ] method , substitute the result for initial_value . if ValidationError exception is caught ,
0
example# 7862
append name to self._changed_data [ self . _changed_data ] .
0
example# 7863
skip this loop iteration .
0
example# 7864
call the method field._has_changed [ field . _has_changed ] with 2 arguments : initial_value and data_value , if it evaluates to true ,
0
example# 7865
append name to self._changed_data [ self . _changed_data ] list .
0
example# 7866
return self._changed_data [ self . _changed_data ] .
0
example# 7867
property decorator ,
0
example# 7868
define the method media with an argument self .
0
example# 7869
media is an instance of Media class .
0
example# 7870
call the method self.fields.values [ self . fields . values ] , for every field in result ,
0
example# 7871
append field.widget.media [ field . widget . media ] to media , substitute the result for media .
0
example# 7872
return media .
0
example# 7873
define the method is_multipart with an argument self .
0
example# 7874
call the method self.fields.values [ self . fields . values ] , for every field in result ,
0
example# 7875
if field.widget.needs_multipart_form [ field . widget . needs_multipart_form ] is true ,
0
example# 7876
return boolean True .
0
example# 7877
return boolean False .
0
example# 7878
define the method hidden_fields with an argument self .
0
example# 7879
for field in self if field.is_hidden [ field . is_hidden ] is true , append field to a list , return the resulting list .
0
example# 7880
define the method visible_fields with an argument self .
0
example# 7881
for field in self if field.is_hidden [ field . is_hidden ] is false , append field to a list , return the resulting list .
0
example# 7882
derive the class Form from the base classes DeclarativeFieldsMetaclass and BaseForm .
0
example# 7883
decorator python_2_unicode_compatible ,
0
example# 7884
derive the class BoundField from the base class object .
0
example# 7885
define the method __init__ with 4 arguments : self , form , field and name .
0
example# 7886
substitute form for self.form [ self . form ] .
0
example# 7887
substitute field for self.field [ self . field ] .
0
example# 7888
substitute name for self.name [ self . name ] .
0
example# 7889
call the method form.add_prefix [ form . add_prefix ] with an argument self , substitute the result for self.html_name [ self . html_name ] .
0
example# 7890
call the method form.add_initial_prefix [ form . add_initial_prefix ] with an argument name , substitute the result for self.html_initial_name [ self . html_initial_name ] .
0
example# 7891
call the method form.add_initial_prefix [ form . add_initial_prefix ] with an argument self.auto_id [ self . auto_id ] , substitute the result for self.html_initial_id [ self . html_initial_id ] .
0
example# 7892
if self.field.label [ self . field . label ] is None ,
0
example# 7893
call the method pretty_name with an argument name , substitute the result for self.label [ self . label ] .
0
example# 7894
if not ,
0
example# 7895
substitute self.field.label [ self . field . label ] for self.label [ self . label ] .
0
example# 7896
if field.help_text [ field . help_text ] is true , substitute field.help_text [ field . help_text ] for self.help_text [ self . help_text ] , if not self.help_text [ self . help_text ] is an empty string .
0
example# 7897
define the method __str__ with an argument self .
0
example# 7898
if self.field.show_hidden_initial [ self . field . show_hidden_initial ] is true ,
0
example# 7899
call the method self.as_hidden [ self . as_hidden ] with an argument only_initial set to boolean True ,
0
example# 7900
append the result to the result of the method , self.as_widget [ self . as_widget ] , return the resulting string . call the method self.as_widget [ self . as_widget ] , return the result .
0
example# 7901
define the method __iter__ with an argument self .
0
example# 7902
get the value under the _STR:0_ key of the self.field.widget.attrs [ self . field . widget . attrs ] dictionary , if the key exists substitute it for id_ ,
1
'id' ||| _STR:0_
example# 7903
if not , substitute self.auto_id [ self . auto_id ] for id_ . if if_is true attrs is an dictionary with initial entry : id_ for _STR:0_ , if not , attrs is an empty dictionary .
1
'id' ||| _STR:0_
example# 7904
call the method self.field.widget.subwidgets [ self . field . widget . subwidgets ] with 3 arguments : self.html_name [ self . html_name ] , return value of the method self.value [ self . value ] and attrs ,
0
example# 7905
for every subwidget in the result , yield subwidget , as the result of the generator .
0
example# 7906
define the method __len__ with an argument self .
0
example# 7907
convert result of the method self.__iter__ [ self . __iter__ ] into a list , return its length .
0
example# 7908
define the method __getitem__ with 2 arguments : self and idx .
0
example# 7909
convert result of the method self.__iter__ [ self . __iter__ ] into a list , return element at the idx index .
0
example# 7910
property decorator ,
0
example# 7911
define the method errors with an argument self .
0
example# 7912
get the value under the self.name [ self . name ] key of the self.form.errors [ self . form . errors ] dictionary , if the key exists , return it ,
0
example# 7913
if not evaluate the method self.form.error_class [ self . form . error_class ] and return the result . define the method as_widget with 4 arguments : self , widget set to None , attrs set to None , only_initial set to boolean False .
0
example# 7914
if widget is false ,
0
example# 7915
substitute self.field.widget [ self . field . widget ] for widget .
0
example# 7916
if self.field.localize [ self . field . localize ] is true ,
0
example# 7917
widget.is_localized [ widget . is_localized ] is boolean True .
0
example# 7918
if attrs is false , make it an empty dictionary .
0
example# 7919
substitute self.auto_id [ self . auto_id ] for auto_id .
0
example# 7920
if auto_id is true and _STR:0_ is not contained in attrs and _STR:0_ is not contained in widget.attrs [ widget . attrs ] ,
1
'id' ||| _STR:0_
example# 7921
if only_initial is false ,
0
example# 7922
substitute auto_id for value under the _STR:0_ key of the attrs dictionary .
1
'id' ||| _STR:0_
example# 7923
if not ,
0
example# 7924
substitute self.html_initial_id [ self . html_initial_id ] for value under the _STR:0_ key of the attrs dictionary .
1
'id' ||| _STR:0_
example# 7925
if only_initial is false ,
0
example# 7926
substitute self.html_name [ self . html_name ] for name .
0
example# 7927
if not ,
0
example# 7928
substitute self.html_initial_name [ self . html_initial_name ] for name .
0
example# 7929
call the method widget.render [ widget . render ] with 3 arguments : name , return value of the method self.value [ self . value ] , attrs set to attrs ,
0
example# 7930
use it as an argument for the call to the function force_text , return the result . define the method as_text with 3 arguments : self , attrs set to None and unpacked dictionary kwargs .
0
example# 7931
call the method self.as_widget [ self . as_widget ] with 3 arguments : instance of a class TextInput , attrs and unpacked dictionary kwargs , return the result .
0
example# 7932
define the method as_textarea with 3 arguments : self , attrs set to None and unpacked dictionary kwargs .
0
example# 7933
call the method self.as_widget [ self . as_widget ] with 3 arguments : instance of a class Textarea , attrs and unpacked dictionary kwargs , return the result .
0
example# 7934
define the method as_hidden with 3 arguments : self , attrs set to None and unpacked dictionary kwargs .
0
example# 7935
call the method self.as_widget [ self . as_widget ] with 3 arguments : return value of the method self.field.hidden_widget [ self . field . hidden_widget ] , attrs ,
0
example# 7936
and unpacked dictionary kwargs , return the result . property decorator ,
0
example# 7937
define the method data with an argument self .
0
example# 7938
call the method self.field.widget.value_from_datadict [ self . field . widget . value_from_datadict ] with 3 arguments : self.form.data [ self . form . data ] , self.form.files [ self . form . files ] , self.html_name [ self . html_name ] , return the result .
0
example# 7939
define the method value with an argument self .
0
example# 7940
if self.form.is_bound [ self . form . is_bound ] is false ,
0
example# 7941
get the value under the self.name [ self . name ] key of the self.form.initial [ self . form . initial ] dictionary , if it exists , substitute it for data ,
0
example# 7942
if not , substitute self.field.initial [ self . field . initial ] for data . if data is an callable object ,
0
example# 7943
call the method data , substitute the result for data .
0
example# 7944
if data is an instance of datetime.datetime [ datetime . datetime ] or datetime.time [ datetime . time ] classes , and supports_microseconds field of self.field.widget [ self . field . widget ] is false ,
0
example# 7945
call the method data.replace [ data . replace ] with an argument microsecond set to integer 0 , substitute the result for data .
0
example# 7946
if not ,
0
example# 7947
call the method self.field.bound_data [ self . field . bound_data ] with 2 arguments : self.data [ self . data ] and value under the self.name [ self . name ] key of the dictionary ,
0
example# 7948
self.form.initial [ self . form . initial ] , if it exists , or self.field.initial [ self . field . initial ] if not , substitute the result for data . call the method self.field.prepare_value [ self . field . prepare_value ] with an argument data , return the result .
0
example# 7949
define the method label_tag with 4 arguments : self , contents set to None , attrs set to None and label_suffix set to None .
0
example# 7950
if contents is false , substitute self.label [ self . label ] for contents .
0
example# 7951
if label_suffix is None ,
0
example# 7952
if self.field.label_suffix [ self . field . label_suffix ] is not None , substitute self.field.label_suffix [ self . field . label_suffix ] for label_suffix ,
0
example# 7953
otherwise substitute self.form.label_suffix [ self . form . label_suffix ] for label_suffix . if label_suffix and contents are both true and last element of contents is not contained in the result of the function _ ,
0
example# 7954
called with an argument string _STR:0_ . call the method format_html with 3 arguments : string _STR:1_ , contents and label_suffix , substitute the result for contents .
2
':?.!' ||| _STR:0_
'{0}{1}' ||| _STR:1_
example# 7955
substitute self.field.widget [ self . field . widget ] for widget .
0
example# 7956
get the value under the _STR:0_ key of the widget.attrs [ widget . attrs ] dictionary , if the key exists substitute it for id_ ,
1
'id' ||| _STR:0_
example# 7957
if not , substitute self.auto_id [ self . auto_id ] for id_ . if id_ is true ,
0
example# 7958
call the method widget.id_for_label [ widget . id_for_label ] with an argument id_ , substitute the result for id_for_label .
0
example# 7959
if id_for_label is true ,
0
example# 7960
unpack a dictionary with an entry id_for_label for _STR:0_ , map it through attrs mapping if attrs is true ,
1
'for' ||| _STR:0_
example# 7961
and convert it again to the dictionary , if attrs is false , leave it alone , substitute the result for attrs . if self.field.required [ self . field . required ] is true and self.form [ self . form ] has an attribute _STR:0_ ,
1
'required_css_class' ||| _STR:0_
example# 7962
if attrs is false , make attrs an empty dictionary .
0
example# 7963
if _STR:0_ is contained in attrs ,
1
'class' ||| _STR:0_
example# 7964
append self.form.required_css_class [ self . form . required_css_class ] to a whitespace character , append it to the value under the _STR:0_ key of the attrs dictionary .
1
'class' ||| _STR:0_
example# 7965
if not ,
0
example# 7966
substitute self.form.required_css_class [ self . form . required_css_class ] for the value under the _STR:0_ key of the attrs dictionary .
1
'class' ||| _STR:0_
example# 7967
if attrs is true , call the function flatatt with an argument attrs , substitute the result for attrs , if not attrs is an empty string .
0
example# 7968
call the function format_html with 3 arguments string _STR:0_ , attrs and contents , substitute the result for contents .
1
'<label{0}>{1}</label>' ||| _STR:0_
example# 7969
if not ,
0
example# 7970
call the function conditional_escape with an argument contents , substitute the result for contents .
0
example# 7971
call the function mark_safe with an argument contents , return the result .
0
example# 7972
define the method css_classes with 2 arguments : self and extra_classes set to None .
0
example# 7973
if extra_classes has an attribute _STR:0_ ,
1
'split' ||| _STR:0_
example# 7974
split extra_classes into words , by whitespaces , substitute the result for extra_classes .
0
example# 7975
if extra_classes is not empty put its elements into a set , substitute it for extra_classes , if not extra_classes is an empty set .
0
example# 7976
if self.errors [ self . errors ] is true and self.form [ self . form ] has an attribute _STR:0_ ,
1
'error_css_class' ||| _STR:0_
example# 7977
add self.form.error_css_class [ self . form . error_css_class ] to extra_classes set .
0
example# 7978
if self.field.required [ self . field . required ] is true and self.form [ self . form ] has an attribute _STR:0_ ,
1
'required_css_class' ||| _STR:0_
example# 7979
add self.form.required_css_class [ self . form . required_css_class ] to extra_classes set .
0
example# 7980
join elements of extra_classes into a string separated by whitespaces , return it .
0
example# 7981
property decorator ,
0
example# 7982
define the method is_hidden with an argument self .
0
example# 7983
return self.field.widget.is_hidden [ self . field . widget . is_hidden ] ,
0
example# 7984
property decorator ,
0
example# 7985
define the method auto_id with an argument self .
0
example# 7986
substitute self.form.auto_id [ self . form . auto_id ] for auto_id .
0
example# 7987
if auto_id is true and ' % s ' is contained in result of the call to the function smart_text with an argument auto_id ,
0
example# 7988
call the function smart_text with an argument auto_id , format the result with self.html_name [ self . html_name ] , return it .
0
example# 7989
otherwise if auto_id is true ,
0
example# 7990
return self.html_name [ self . html_name ] .
0
example# 7991
return an empty string .
0
example# 7992
property decorator ,
0
example# 7993
define the method id_for_label with an argument self .
0
example# 7994
substitute self.field.widget [ self . field . widget ] for widget .
0
example# 7995
get the value under the _STR:0_ key of the widget.attrs [ widget . attrs ] dictionary , if the key exists substitute it for id_ ,
1
'id' ||| _STR:0_
example# 7996
if not , substitute self.auto_id [ self . auto_id ] for id_ . call the method widget.id_for_label [ widget . id_for_label ] with an argument id_ , return the result .
0
example# 7997
from __future__ import unicode_literals into default name space .
0
example# 7998
from django.core.exceptions [ django . core . exceptions ] import ValidationError into default name space .
0
example# 7999
from django.forms [ django . forms ] import Form into default name space .
0
example# 8000
from django.forms.fields [ django . forms . fields ] import IntegerField and BooleanField into default name space .
0
example# 8001
from django.forms.utils [ django . forms . utils ] import ErrorList into default name space .
0
example# 8002
from django.forms.widgets [ django . forms . widgets ] import HiddenInput into default name space .
0
example# 8003
from django.utils.encoding [ django . utils . encoding ] import python_2_unicode_compatible into default name space .
0
example# 8004
from django.utils.functional [ django . utils . functional ] import cached_property into default name space .
0
example# 8005
from django.utils.safestring [ django . utils . safestring ] import mark_safe into default name space .
0
example# 8006
from django.utils [ django . utils ] import six into default name space .
0
example# 8007
from django.utils.six.moves [ django . utils . six . moves ] import xrange into default name space .
0
example# 8008
from django.utils.translation [ django . utils . translation ] import ungettext and ugettext as _ into default name space .
0
example# 8009
__all__ is a tuple containing strings _STR:0_ , _STR:1_ and _STR:2_ .
3
'all_valid' ||| _STR:2_
'BaseFormSet' ||| _STR:0_
'formset_factory' ||| _STR:1_
example# 8010
TOTAL_FORM_COUNT is a string _STR:0_ .
1
'TOTAL_FORMS' ||| _STR:0_
example# 8011
INITIAL_FORM_COUNT is a string _STR:0_ .
1
'INITIAL_FORMS' ||| _STR:0_
example# 8012
MIN_NUM_FORM_COUNT is a string _STR:0_ .
1
'MIN_NUM_FORMS' ||| _STR:0_
example# 8013
MAX_NUM_FORM_COUNT is a string _STR:0_ .
1
'MAX_NUM_FORMS' ||| _STR:0_
example# 8014
ORDERING_FIELD_NAME is a string _STR:0_ .
1
'ORDER' ||| _STR:0_
example# 8015
DELETION_FIELD_NAME is a string _STR:0_ .
1
'DELETE' ||| _STR:0_
example# 8016
DEFAULT_MIN_NUM is an integer 0 .
0
example# 8017
DEFAULT_MAX_NUM is an integer 1000 .
0
example# 8018
derive the class ManagementForm from the Form base class .
0
example# 8019
define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
0
example# 8020
value under the TOTAL_FORM_COUNT of the self.base_fields [ self . base_fields ] dictionary is an instance of IntegerField class ,
0
example# 8021
created with an argument widget set to HiddenInput . value under the INITIAL_FORM_COUNT of the self.base_fields [ self . base_fields ] dictionary is an instance of IntegerField class ,
0
example# 8022
created with an argument widget set to HiddenInput . value under the MIN_NUM_FORM_COUNT of the self.base_fields [ self . base_fields ] dictionary is an instance of IntegerField class ,
0
example# 8023
created with 2 arguments : required as boolean False and widget set to HiddenInput . value under the MAX_NUM_FORM_COUNT of the self.base_fields [ self . base_fields ] dictionary is an instance of IntegerField class ,
0
example# 8024
created with 2 arguments : required as boolean False and widget set to HiddenInput . call the method __init__ from the base class of the class ManagementForm , called with 2 arguments : unpacked list args ,
0
example# 8025
and unpacked dictionary kwargs . python_2_unicode_compatible decorator ,
0
example# 8026
derive the class BaseFormSet from the object base class .
0
example# 8027
define the method __init__ with 7 arguments : self , data set to None , files set to None , auto_id set to an string _STR:0_ ,
1
'id_%s' ||| _STR:0_
example# 8028
if data is not None or files is not None , self.is_bound [ self . is_bound ] is boolean True , otherwise it is boolean False .
0
example# 8029
if prefix is true , substitute it for self.prefix [ self . prefix ] , otherwise call the method self.get_default_prefix [ self . get_default_prefix ] ,
0
example# 8030
and substitute the result for self.prefix [ self . prefix ] . substitute auto_id for self.auto_id [ self . auto_id ] .
0
example# 8031
if data is true , substitute it for self.data [ self . data ] , otherwise self.data [ self . data ] is an empty dictionary .
0
example# 8032
if data is true , substitute it for self.files [ self . files ] , otherwise self.files [ self . files ] is an empty dictionary .
0
example# 8033
substitute initial_id for self.auto_id [ self . auto_id ] .
0
example# 8034
substitute error_class for self.error_class [ self . error_class ] .
0
example# 8035
self._errors [ self . _errors ] is None .
0
example# 8036
self._non_form_errors [ self . _non_form_errors ] is None .
0
example# 8037
define the method __str__ with an argument self .
0
example# 8038
call the method self.as_table [ self . as_table ] , return the result .
0
example# 8039
define the method __iter__ with an argument self .
0
example# 8040
convert self.forms [ self . forms ] into an iterable , return it .
0
example# 8041
define the method __getitem__ with an argument self .
0
example# 8042
return self.forms [ self . forms ] element at the index index .
0
example# 8043
define the method __len__ with an argument self .
0
example# 8044
return the length of self.forms [ self . forms ] .
0
example# 8045
define the method __bool__ with an argument self .
0
example# 8046
return boolean True .
0
example# 8047
define the method __nonzero__ with an argument self .
0
example# 8048
get the type of self object , call the __bool__ method on the result with an argument self , return the result .
0
example# 8049
property decorator ,
0
example# 8050
define the method management_form with an argument self .
0
example# 8051
if self.is_bound [ self . is_bound ] is true ,
0
example# 8052
form is an instance of ManagementForm class , created with 3 arguments : self.data [ self . data ] , auto_id as self.auto_id [ self . auto_id ] and prefix as self.prefix [ self . prefix ] .
0
example# 8053
call the form.is_valid [ form . is_valid ] method , if it evaluates to false ,
0
example# 8054
raise ValidationError with 2 arguments : return value of the function _ called with an argument string ,
0
example# 8055
_STR:0_ and code as a string _STR:1_ . if not ,
2
'missing_management_form' ||| _STR:1_
'ManagementForm data is missing or has been tampered with' ||| _STR:0_
example# 8056
form is an instance of ManagementForm class , created with 3 arguments : auto_id as self.auto_id [ self . auto_id ] , prefix as self.prefix [ self . prefix ] ,
0
example# 8057
and initial as a dictionary with 4 entries : result of self.total_form_count [ self . total_form_count ] method for TOTAL_FORM_COUNT , result of self.initial_form_count [ self . initial_form_count ] method for INITIAL_FORM_COUNT , self.min_num [ self . min_num ] for MIN_NUM_FORM_COUNT and self.max_num [ self . max_num ] for MAX_NUM_FORM_COUNT . return form .
0
example# 8058
define the method total_form_count with an argument self .
0
example# 8059
if self.is_bound [ self . is_bound ] is true ,
0
example# 8060
get the element with minimal value between the value under the TOTAL_FORM_COUNT key of self.management_form.cleaned_data [ self . management_form . cleaned_data ] dictionary ,
0
example# 8061
and self.absolute_max [ self . absolute_max ] , return the result . if not ,
0
example# 8062
call the method self.initial_form_count [ self . initial_form_count ] , return the result initial_forms .
0
example# 8063
get the element with maximal value between initial_forms and self.min_num [ self . min_num ] , add self.extra [ self . extra ] to it , substitute the result for total_forms .
0
example# 8064
if initial_forms is grater than self.max_num [ self . max_num ] is grater or equal to integer 0 ,
0
example# 8065
substitute initial_forms for total_forms .
0
example# 8066
otherwise if total_forms is grater than self.max_num [ self . max_num ] is grater or equal to integer 0 ,
0
example# 8067
substitute self.max_num [ self . max_num ] for total_forms .
0
example# 8068
return total_forms .
0
example# 8069
define the method initial_form_count with an argument self .
0
example# 8070
if self.is_bound [ self . is_bound ] is true ,
0
example# 8071
return the value under the INITIAL_FORM_COUNT key of the self.management_form.cleaned_data [ self . management_form . cleaned_data ] dictionary .
0
example# 8072
if not ,
0
example# 8073
if self.initial [ self . initial ] is true , substitute the length of self.initial [ self . initial ] for initial_forms , if not , initial_forms is integer 0 .
0
example# 8074
return initial_forms .
0
example# 8075
cached_property decorator ,
0
example# 8076
define the method forms with an argument self .
0
example# 8077
for every i in sequence of integers from 0 to result of the method self.total_form_count [ self . total_form_count ] , call the method self._construct_form [ self . _construct_form ] ,
0
example# 8078
with an argument i , append the result to a list , substitute the resulting list for forms . return forms .
0
example# 8079
define the method _construct_form with 3 arguments : self , i and unpacked dictionary kwargs .
0
example# 8080
defaults is an dictionary with 3 initial entries : self.auto_id [ self . auto_id ] for _STR:0_ , result of the call to the method self.add_prefix [ self . add_prefix ] ,
1
'auto_id' ||| _STR:0_
example# 8081
with an argument i , for _STR:0_ and self.error_class [ self . error_class ] for _STR:1_ . if self.is_bound [ self . is_bound ] is true ,
2
'error_class' ||| _STR:1_
'prefix' ||| _STR:0_
example# 8082
substitute self.data [ self . data ] for value under the _STR:0_ key of the defaults dictionary .
1
'data' ||| _STR:0_
example# 8083
substitute self.files [ self . files ] for value under the _STR:0_ key of the defaults dictionary .
1
'files' ||| _STR:0_
example# 8084
if self.initial [ self . initial ] is true and _STR:0_ key is not contained in kwargs ,
1
'initial' ||| _STR:0_
example# 8085
try ,
0
example# 8086
substitute i-th element of self.initial [ self . initial ] for value under the _STR:0_ key of the defaults dictionary .
1
'initial' ||| _STR:0_
example# 8087
if IndexError exception is caught ,
0
example# 8088
do nothing .
0
example# 8089
if i is greater than , or equal to the result of the call to the method self.initial_form_count [ self . initial_form_count ] ,
0
example# 8090
and i is greater than or equal to self.min_num [ self . min_num ] , value under the _STR:0_ key of the defaults dictionary is boolean True .
1
'empty_permitted' ||| _STR:0_
example# 8091
update defaults dictionary with kwargs .
0
example# 8092
call the method self.form [ self . form ] with unpacked dictionary defaults as an argument , substitute it for form .
0
example# 8093
call the method self.add_fields [ self . add_fields ] with arguments form and i ) .
0
example# 8094
return form .
0
example# 8095
property decorator ,
0
example# 8096
define the method initial_forms with an argument self .
0
example# 8097
call the self.initial_form_count [ self . initial_form_count ] method , return the sublist of self.forms [ self . forms ] from the beginning to the previous result as the end index .
0
example# 8098
property decorator ,
0
example# 8099
define the method extra_forms with an argument self .
0
example# 8100
call the self.initial_form_count [ self . initial_form_count ] method , return the sublist of self.forms [ self . forms ] , using previous result as start index to the end .
0
example# 8101
property decorator ,
0
example# 8102
define the method empty_form with an argument self .
0
example# 8103
call the function empty_form with 3 arguments : auto_id as self.auto_id [ self . auto_id ] , prefix set to the return value of the self.add_prefix [ self . add_prefix ] method ,
0
example# 8104
called with string _STR:0_ as an argument and empty_permitted as boolean True , substitute the result for form . call the method self.add_fields [ self . add_fields ] with arguments form and None .
1
'__prefix__' ||| _STR:0_
example# 8105
return form .
0
example# 8106
property decorator ,
0
example# 8107
define the method cleaned_data with an argument self .
0
example# 8108
call the method self.is_valid [ self . is_valid ] , if it evaluates to false ,
0
example# 8109
raise an AttributeError exception with an argument string : _STR:0_ ,
1
"'%s' object has no attribute 'cleaned_data'" ||| _STR:0_
example# 8110
where ' % s ' is replaced with self.__class__.__name__ [ self . __class__ . __name__ ] . for form in self.forms [ self . forms ] append form.cleaned_data [ form . cleaned_data ] to a list , return the resulting list .
0
example# 8111
property decorator ,
0
example# 8112
define the method deleted_forms with an argument self .
0
example# 8113
if call to the method self.is_valid [ self . is_valid ] , evaluates to false or self.can_delete [ self . can_delete ] is boolean false ,
0
example# 8114
return an empty list .
0
example# 8115
if self doesnt have an _STR:0_ attribute ,
1
'_deleted_form_indexes' ||| _STR:0_
example# 8116
self._deleted_form_indexes [ self . _deleted_form_indexes ] is an empty list .
0
example# 8117
call the method self.total_form_count [ self . total_form_count ] , for every i in sequence of integers , from 0 to the previous result ,
0
example# 8118
substitute i-th element of self.forms [ self . forms ] for form .
0
example# 8119
if i is greater than or equal to the result of the method self.initial_form_count [ self . initial_form_count ] ,
0
example# 8120
and call to the method form.has_changed [ form . has_changed ] evaluates to false , skip this loop iteration ,
0
example# 8121
call the method self._should_delete_form [ self . _should_delete_form ] with an argument form , if it evaluates to true ,
0
example# 8122
call the method self._deleted_form_indexes.append [ self . _deleted_form_indexes . append ] with an argument i .
0
example# 8123
for i in self._deleted_form_indexes [ self . _deleted_form_indexes ] append i-th element of self.forms [ self . forms ] into a list , return the resulting list .
0
example# 8124
property decorator ,
0
example# 8125
define the method ordered_forms with an argument self .
0
example# 8126
if call to the self.is_valid [ self . is_valid ] method evaluates to false or self.can_order [ self . can_order ] is false ,
0
example# 8127
raise an AttributeError exception with an argument string : _STR:0_ ,
1
"'%s' object has no attribute 'ordered_forms'" ||| _STR:0_
example# 8128
where ' % s ' is replaced with self.__class__.__name__ [ self . __class__ . __name__ ] . if self doesnt have an _STR:0_ attribute ,
1
'_ordering' ||| _STR:0_
example# 8129
self._ordering [ self . _ordering ] is an empty list .
0
example# 8130
for every i in sequence of integers , from 0 to the result of the method self.total_form_count [ self . total_form_count ] ,
0
example# 8131
substitute i-th element of self.forms [ self . forms ] for form .
0
example# 8132
if i is greater than or equal to the result of the method self.initial_form_count [ self . initial_form_count ] ,
0
example# 8133
and call to the method form.has_changed [ form . has_changed ] evaluates to false , skip this loop iteration ,
0
example# 8134
if self.can_delete [ self . can_delete ] is true and call to the method self._should_delete_form [ self . _should_delete_form ] with an argument form , evaluates to true ,
0
example# 8135
skip this loop iteration ,
0
example# 8136
append tuple with 2 elements : i and value under the ORDERING_FIELD_NAME key of form.cleaned_data [ form . cleaned_data ] dictionary to self._ordering [ self . _ordering ] .
0
example# 8137
define the function compare_ordering_key with an argument k .
0
example# 8138
if second element of k is None ,
0
example# 8139
return a tuple with 2 elements : integers 1 and 0 .
0
example# 8140
return a tuple with 2 elements : integer 0 and second element of k .
0
example# 8141
call the method self._ordering.sort [ self . _ordering . sort ] with an argument key as compare_ordering_key .
0
example# 8142
for i in self._ordering [ self . _ordering ] append to a list value under the first element of i key of the self.forms [ self . forms ] dictionary , return resulting list .
0
example# 8143
classmethod decorator ,
0
example# 8144
define the method get_default_prefix with an argument cls .
0
example# 8145
return string _STR:0_ .
1
'form' ||| _STR:0_
example# 8146
define the method non_form_errors with an argument self .
0
example# 8147
if self._non_form_errors [ self . _non_form_errors ] is None ,
0
example# 8148
call the method self.full_clean [ self . full_clean ] .
0
example# 8149
return self._non_form_errors [ self . _non_form_errors ] .
0
example# 8150
property decorator ,
0
example# 8151
define the method errors with an argument self .
0
example# 8152
if self._errors [ self . _errors ] is None ,
0
example# 8153
call the method self.full_clean [ self . full_clean ] .
0
example# 8154
return self._errors [ self . _errors ] .
0
example# 8155
define the method total_error_count with an argument self .
0
example# 8156
for every form_errors in self.errors [ self . errors ] sum length of return value of the method self.non_form_errors [ self . non_form_errors ] and length of form_errors , return the result .
0
example# 8157
define the method _should_delete_form with an argument self .
0
example# 8158
get the value under the DELETION_FIELD_NAME key of the form.cleaned_data [ form . cleaned_data ] dictionary , if it exists return it , if not , return boolean False .
0
example# 8159
define the method is_valid with an argument self .
0
example# 8160
if self.is_bound [ self . is_bound ] is false ,
0
example# 8161
return boolean False .
0
example# 8162
forms_valid is True .
0
example# 8163
call self.errors [ self . errors ] .
0
example# 8164
for every i in sequence of integers , from 0 to the result of the method self.total_form_count [ self . total_form_count ] ,
0
example# 8165
substitute i-th element of self.forms [ self . forms ] for form .
0
example# 8166
if self.can_delete [ self . can_delete ] is true ,
0
example# 8167
call the method self._should_delete_form [ self . _should_delete_form ] with an argument , if it evaluates to true ,
0
example# 8168
skip this loop iteration ,
0
example# 8169
call the method form.is_valid [ form . is_valid ] , perform bitwise and with the result and forms_valid as operands , substitute the result for forms_valid .
0
example# 8170
if forms_valid is true and call to the method self.non_form_errors [ self . non_form_errors ] , evaluates to false , return boolean True , otherwise return False .
0
example# 8171
define the method full_clean with an argument self .
0
example# 8172
self._errors [ self . _errors ] is an empty list .
0
example# 8173
call the method self.error_class [ self . error_class ] , substitute the result for self._non_form_errors [ self . _non_form_errors ] .
0
example# 8174
if self.is_bound [ self . is_bound ] is false ,
0
example# 8175
return nothing .
0
example# 8176
for every i in sequence of integers , from 0 to the result of the method self.total_form_count [ self . total_form_count ] ,
0
example# 8177
substitute i-th element of self.forms [ self . forms ] for form .
0
example# 8178
append form.errors [ form . errors ] to self._errors [ self . _errors ] .
0
example# 8179
try ,
0
example# 8180
if self.validate_max [ self . validate_max ] is true , and length of self.deleted_forms [ self . deleted_forms ] subtracted from the return value of the method self.total_form_count [ self . total_form_count ] ,
0
example# 8181
is greater than self.max_num [ self . max_num ] , or if value under the TOTAL_FORM_COUNT key of the self.management_form.cleaned_data [ self . management_form . cleaned_data ] dictionary , is grater than self.absolute_max [ self . absolute_max ] , raise an ValidationError with 2 arguments : return value of the function ungettext with 3 arguments :
0
example# 8182
strings _STR:0_ , _STR:0_ and self.max_num [ self . max_num ] , where _STR:1_ is replaced with self.max_num [ self . max_num ] , and code as a string _STR:2_ . if self.validate_min [ self . validate_min ] is true , and length of self.deleted_forms [ self . deleted_forms ] subtracted from the return value of the method self.total_form_count [ self . total_form_count ] ,
3
'too_many_forms' ||| _STR:2_
"Please submit %d or fewer forms." ||| _STR:0_
'%d' ||| _STR:1_
example# 8183
is smaller than self.min_num [ self . min_num ] , raise an ValidationError with 2 arguments : return value of the function ungettext with 3 arguments :
0
example# 8184
strings _STR:0_ , _STR:0_ and self.min_num [ self . min_num ] , where _STR:1_ is replaced with self.min_num [ self . min_num ] , and code as a string _STR:2_ . call the method self.clean [ self . clean ] .
3
'too_few_forms' ||| _STR:2_
"Please submit %d or more forms." ||| _STR:0_
'%d' ||| _STR:1_
example# 8185
if ValidationError , renamed to e , exception is caught ,
0
example# 8186
call the method self.error_class [ self . error_class ] with an argument e.error_list [ e . error_list ] , substitute the result for self._non_form_errors [ self . _non_form_errors ] .
0
example# 8187
define the method clean with an argument self .
0
example# 8188
do nothing .
0
example# 8189
define the method has_changed with an argument self .
0
example# 8190
for every form in self call the method form.has_changed [ form . has_changed ] if any of the results evaluates to true , return boolean True ,
0
example# 8191
if not return boolean False . define the method add_fields with 3 arguments : self , form and index .
0
example# 8192
if self.can_order [ self . can_order ] is true ,
0
example# 8193
if index is not None and index is smaller than return value of the method self.initial_form_count [ self . initial_form_count ] ,
0
example# 8194
value under the ORDERING_FIELD_NAME key of the form.fields [ form . fields ] is an instance of IntegerField class , created with 3 arguments :
0
example# 8195
label set to return value of the function _ called with an string _STR:0_ , initial set to index incremented by 1 , and required as boolean False . if not ,
1
'Order' ||| _STR:0_
example# 8196
value under the ORDERING_FIELD_NAME key of the form.fields [ form . fields ] is an instance of IntegerField class , created with 2 arguments :
0
example# 8197
label set to return value of the function _ called with an string _STR:0_ and required as boolean False . if self.can_delete [ self . can_delete ] is true ,
1
'Order' ||| _STR:0_
example# 8198
value under the DELETION_FIELD_NAME key of the form.fields [ form . fields ] is an instance of BooleanField class , created with 2 arguments :
0
example# 8199
label set to return value of the function _ called with an string _STR:0_ and required as boolean False . define the method add_prefix with an argument self .
1
'Delete' ||| _STR:0_
example# 8200
replace ' % s ' in sting _STR:0_ with self.prefix [ self . prefix ] and index , return the result .
1
'%s-%s' ||| _STR:0_
example# 8201
define the method is_multipart with an argument self .
0
example# 8202
if self.forms [ self . forms ] is true ,
0
example# 8203
call the method is_multipart on the first element of self.forms [ self . forms ] , return it .
0
example# 8204
if not ,
0
example# 8205
call the method self.empty_form.is_multipart [ self . empty_form . is_multipart ] , return the result
0
example# 8206
property decorator ,
0
example# 8207
define the method media with an argument self .
0
example# 8208
if self.forms [ self . forms ] is true ,
0
example# 8209
return the media field of the first element of self.forms [ self . forms ] .
0
example# 8210
if not ,
0
example# 8211
return self.empty_form.media [ self . empty_form . media ] .
0
example# 8212
define the method as_table with an argument self .
0
example# 8213
for every form in self call the form.as_table [ form . as_table ] method , join the results in a string , separated by an empty string .
0
example# 8214
join return value of the function six.text_type [ six . text_type ] called with an argument self.management_form [ self . management_form ] and forms into a string ,
0
example# 8215
separated by newline , use it as an argument for the call to the function mark_safe , return the result . define the method as_p with an argument self .
0
example# 8216
for every form in self call the form.as_p [ form . as_p ] method , join the results in a string , separated by an empty string .
0
example# 8217
join return value of the function six.text_type [ six . text_type ] called with an argument self.management_form [ self . management_form ] and forms into a string ,
0
example# 8218
separated by newline , use it as an argument for the call to the function mark_safe , return the result . define the method as_ul with an argument self .
0
example# 8219
for every form in self call the form.as_ul [ form . as_ul ] method , join the results in a string , separated by an empty string .
0
example# 8220
join return value of the function six.text_type [ six . text_type ] called with an argument self.management_form [ self . management_form ] and forms into a string ,
0
example# 8221
separated by newline , use it as an argument for the call to the function mark_safe , return the result . define the function formset_factory with 9 arguments : form , formset set to BaseFormSet , extra set to integer 1 ,
0
example# 8222
if min_num is None ,
0
example# 8223
substitute DEFAULT_MIN_NUM for min_num ,
0
example# 8224
if max_num is None ,
0
example# 8225
substitute DEFAULT_MAX_NUM for max_num ,
0
example# 8226
sum max_num and DEFAULT_MAX_NUM , substitute the result for absolute_max .
0
example# 8227
attrs is an dictionary with 9 initial entries : form for _STR:0_ , extra for _STR:1_ , can_order for _STR:2_ ,
3
'extra' ||| _STR:1_
'can_order' ||| _STR:2_
'form' ||| _STR:0_
example# 8228
can_delete for _STR:0_ , min_num for _STR:1_ , max_num for _STR:2_ , absolute_max for _STR:3_ , validate_min for _STR:4_ for validate_max for _STR:5_ . create a class class which name is generated by converting _STR:6_ into a string and appending it to form.__name__ [ form . __name__ ] ,
7
'FormSet' ||| _STR:6_
'min_num' ||| _STR:1_
'can_delete' ||| _STR:0_
'validate_max' ||| _STR:5_
'absolute_max' ||| _STR:3_
'validate_min' ||| _STR:4_
'max_num' ||| _STR:2_
example# 8229
is derived from the formset base class and with fields contained in attrs , return an instance of the obtained class . define the function all_valid with an argument formsets .
0
example# 8230
valid is boolean True .
0
example# 8231
for every formset in formsets ,
0
example# 8232
call the function formset.is_valid [ formset . is_valid ] , if it evaluates to false ,
0
example# 8233
valid is boolean False .
0
example# 8234
return valid .
0
example# 8235
from __future__ import unicode_literals into default name space .
0
example# 8236
from collections import OrderedDict into default name space .
0
example# 8237
import module warnings .
0
example# 8238
django.core.exceptions [ django . core . exceptions ] import ImproperlyConfigured , ValidationError , NON_FIELD_ERRORS and FieldError into default namespace .
0
example# 8239
from django.forms.fields [ django . forms . fields ] import Field and ChoiceField into default name space .
0
example# 8240
from django.forms.forms [ django . forms . forms ] import DeclarativeFieldsMetaclass and BaseForm into default name space .
0
example# 8241
from django.forms.formsets [ django . forms . formsets ] import BaseFormSet and formset_factory into default name space .
0
example# 8242
from django.forms.utils [ django . forms . utils ] import ErrorList into default name space .
0
example# 8243
from django.forms.widgets [ django . forms . widgets ] import SelectMultiple , HiddenInput , MultipleHiddenInput into default namespace .
0
example# 8244
from django.utils [ django . utils ] import six into default name space .
0
example# 8245
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
0
example# 8246
from django.utils.encoding [ django . utils . encoding ] import smart_text and force_text into default name space .
0
example# 8247
from django.utils.text [ django . utils . text ] import get_text_list and capfirst into default name space .
0
example# 8248
from django.utils.translation [ django . utils . translation ] import ugettext_lazy as _ and ugettext into default name space .
0
example# 8249
__all__ is a tuple containing strings : _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ ,
5
'ModelForm' ||| _STR:0_
'fields_for_model' ||| _STR:3_
'save_instance' ||| _STR:4_
'model_to_dict' ||| _STR:2_
'BaseModelForm' ||| _STR:1_
example# 8250
_STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ , _STR:5_ , and _STR:6_ . ALL_FIELDS is a string _STR:7_ .
8
'__all__' ||| _STR:7_
'ALL_FIELDS' ||| _STR:2_
'BaseModelFormSet' ||| _STR:3_
'inlineformset_factory' ||| _STR:6_
'ModelChoiceField' ||| _STR:0_
'modelformset_factory' ||| _STR:4_
'BaseInlineFormSet' ||| _STR:5_
'ModelMultipleChoiceField' ||| _STR:1_
example# 8251
define the function construct_instance with 4 arguments : form , instance , fields set to None and exclude set to None .
0
example# 8252
from django.db [ django . db ] import models into default namespace .
0
example# 8253
substitute instance._meta [ instance . _meta ] for opts .
0
example# 8254
substitute form.cleaned_data [ form . cleaned_data ] for cleaned_data .
0
example# 8255
file_field_list is an empty list .
0
example# 8256
for every f in opts.fields [ opts . fields ] ,
0
example# 8257
if f.editable [ f . editable ] is true and f is an instance of models.AutoField [ models . AutoField ] , or f.name [ f . name ] is not contained in cleaned_data ,
0
example# 8258
skip this loop iteration .
0
example# 8259
if fields is not None and f.name [ f . name ] is not contained in fields ,
0
example# 8260
skip this loop iteration .
0
example# 8261
if exclude is true and f.name [ f . name ] is contained in exclude ,
0
example# 8262
skip this loop iteration .
0
example# 8263
if f is an instance of models.FileField [ models . FileField ] ,
0
example# 8264
append f to file_field_list .
0
example# 8265
if not ,
0
example# 8266
call the method f.save_form_data [ f . save_form_data ] with 2 arguments : instance and value under the f.name [ f . name ] key of cleaned_data dictionary .
0
example# 8267
for every f in file_field_list ,
0
example# 8268
call the method f.save_form_data [ f . save_form_data ] with 2 arguments : instance and value under the f.name [ f . name ] key of cleaned_data dictionary .
0
example# 8269
return instance .
0
example# 8270
define the function save_instance with 7 arguments : form , instance , fields set to None , fail_message as string _STR:0_ ,
1
'saved' ||| _STR:0_
example# 8271
if construct is true ,
0
example# 8272
call the function construct_instance with 4 arguments form , instance , fields , exclude and substitute the result for instance .
0
example# 8273
substitute instance._meta [ instance . _meta ] for opts .
0
example# 8274
if form.errors [ form . errors ] is true ,
0
example# 8275
raise an ValueError with an argument string _STR:0_ ,
1
"The %s could not be %s because the data didn't validate." ||| _STR:0_
example# 8276
where ' % s ' is replaced with opts.object_name [ opts . object_name ] and fail_message , respectively . define the function save_m2m .
0
example# 8277
substitute form.cleaned_data [ form . cleaned_data ] for cleaned_data .
0
example# 8278
append opts.virtual_fields [ opts . virtual_fields ] to opts.many_to_many [ opts . many_to_many ] , for every f in the result ,
0
example# 8279
if f doesnt has an _STR:0_ attribute ,
1
'save_form_data' ||| _STR:0_
example# 8280
skip this loop iteration .
0
example# 8281
if fields is true and f.name [ f . name ] is not contained in fields ,
0
example# 8282
skip this loop iteration .
0
example# 8283
if exclude is true and f.name [ f . name ] is contained in exclude ,
0
example# 8284
skip this loop iteration .
0
example# 8285
if f.name [ f . name ] is contained in cleaned_data ,
0
example# 8286
call the method f.save_form_data [ f . save_form_data ] with 2 arguments : instance and value under the f.name [ f . name ] key of cleaned_data dictionary .
0
example# 8287
if commit is true ,
0
example# 8288
call the method instance.save [ instance . save ] .
0
example# 8289
call the function save_m2m .
0
example# 8290
if not ,
0
example# 8291
substitute save_m2m for form.save_m2m [ form . save_m2m ] .
0
example# 8292
return instance .
0
example# 8293
define the function model_to_dict with 3 arguments : instance , fields set to None and exclude set None .
0
example# 8294
from django.db.models.fields.related [ django . db . models . fields . related ] import ManyToManyField .
0
example# 8295
substitute instance._meta [ instance . _meta ] for opts .
0
example# 8296
data is an empty dictionary .
0
example# 8297
concatenate opts.concrete_fields [ opts . concrete_fields ] , opts.virtual_fields [ opts . virtual_fields ] and opts.many_to_many [ opts . many_to_many ] , for every f in the result ,
0
example# 8298
get _STR:0_ attribute from object f , if it doesnt exists or its true ,
1
'editable' ||| _STR:0_
example# 8299
skip this loop iteration .
0
example# 8300
if fields is true and f.name [ f . name ] is not contained in fields ,
0
example# 8301
skip this loop iteration .
0
example# 8302
if exclude is true and f.name [ f . name ] is contained in exclude ,
0
example# 8303
skip this loop iteration .
0
example# 8304
if f is an instance of ManyToManyField ,
0
example# 8305
if instance.pk [ instance . pk ] is None ,
0
example# 8306
value under f.name [ f . name ] key of the dta dictionary is an empty list .
0
example# 8307
if not ,
0
example# 8308
call the method f.value_from_object [ f . value_from_object ] with an argument instance , substitute the result for qs .
0
example# 8309
if qs._result_cache [ qs . _result_cache ] is not None ,
0
example# 8310
for every item in qu append item.pk [ item . pk ] to a list , substitute resulting list for value under f.name [ f . name ] key of the data dictionary .
0
example# 8311
if not ,
0
example# 8312
call the method qs.values_list [ qs . values_list ] with 2 arguments : string _STR:0_ and flat set to boolean True , put the results in a list ,
1
'pk' ||| _STR:0_
example# 8313
substitute the result for value under the f.name [ f . name ] key of data dictionary . if not ,
0
example# 8314
call the method f.value_from_object [ f . value_from_object ] with an argument instance , substitute the result for value under the f.name [ f . name ] key of the data dictionary .
0
example# 8315
return data .
0
example# 8316
define the function fields_for_model with 9 arguments : model , fields set to None , exclude set to None , widgets set to None ,
0
example# 8317
field_list is an empty list .
0
example# 8318
ignored is an empty list .
0
example# 8319
substitute model._meta [ model . _meta ] for opts .
0
example# 8320
from django.db.models.fields [ django . db . models . fields ] import Field as ModelField .
0
example# 8321
if f is an instance of ModelFiled , for every f in opts.virtual_fields [ opts . virtual_fields ] , append f to a list , substitute the resulting list for sortable_virtual_fields .
0
example# 8322
concatenate opts.concrete_fields [ opts . concrete_fields ] , sortable_virtual_fields and opts.many_to_many [ opts . many_to_many ] , for every f in sorted result ,
0
example# 8323
get _STR:0_ attribute from object f , if it doesnt exists or its true ,
1
'editable' ||| _STR:0_
example# 8324
skip this loop iteration .
0
example# 8325
if fields is not None and f.name [ f . name ] is not contained in fields ,
0
example# 8326
skip this loop iteration .
0
example# 8327
if exclude is true and f.name [ f . name ] is contained in exclude ,
0
example# 8328
skip this loop iteration .
0
example# 8329
kwargs is an empty dictionary ,
0
example# 8330
if widgets is true and f.name [ f . name ] is contained in widgets ,
0
example# 8331
substitute value under the f.name [ f . name ] key of the widgets dictionary for value under the _STR:0_ key of kwargs dictionary .
1
'widget' ||| _STR:0_
example# 8332
if localized_fields equals ALL_FIELDS , or if localized_fields is true and f.name [ f . name ] is contained in localized_fields ,
0
example# 8333
value under _STR:0_ key of kwargs dictionary is boolean True .
1
'localize' ||| _STR:0_
example# 8334
if labels is true and f.name [ f . name ] is contained in labels ,
0
example# 8335
substitute value under the f.name [ f . name ] key of the labels dictionary for value under the _STR:0_ key of kwargs dictionary .
1
'label' ||| _STR:0_
example# 8336
if help_texts is true and f.name [ f . name ] is contained in help_texts ,
0
example# 8337
substitute value under the f.name [ f . name ] key of the help_texts dictionary for value under the _STR:0_ key of kwargs dictionary .
1
'help_text' ||| _STR:0_
example# 8338
if error_messages is true and f.name [ f . name ] is contained in error_messages ,
0
example# 8339
substitute value under the f.name [ f . name ] key of the error_messages dictionary for value under the _STR:0_ key of kwargs dictionary .
1
'error_messages' ||| _STR:0_
example# 8340
if formfield_callback is None ,
0
example# 8341
call the method f.formfield [ f . formfield ] with an argument , unpacked dictionary kwargs , substitute the result for formfield .
0
example# 8342
otherwise if formfield_callback is not callable object ,
0
example# 8343
raise an TypeError with an string _STR:0_ .
1
'formfield_callback must be a function or callable' ||| _STR:0_
example# 8344
if not ,
0
example# 8345
call the method formfield_callback with 2 arguments : f and unpacked dictionary kwargs , substitute the result for formfield .
0
example# 8346
if formfield is true ,
0
example# 8347
append a tuple with 2 elements : f.name [ f . name ] and formfield to field_list .
0
example# 8348
if not ,
0
example# 8349
append f.name [ f . name ] to ignored list .
0
example# 8350
field_dict is an instance of OrderedDict class , created with an argument field_list .
0
example# 8351
if fields is true ,
0
example# 8352
for every f in fields , if exclude is false , or if exclude is true and f is not contained in exclude , and only if f is not in ignored ,
0
example# 8353
append to list , a tuple with 2 elements : f and value under the f key of field_dict dictionary , use the resulting list as an argument , for the creation of the instance of OrderedDict class , substitute it for field_dict . return field_dict .
0
example# 8354
derive the class ModelFormOptions from object base class .
0
example# 8355
define the method __init__ with arguments : self and options set to None .
0
example# 8356
get _STR:0_ attribute from the options object , if it exists substitute it for self.model [ self . model ] , if not self.model [ self . model ] is None .
1
'model' ||| _STR:0_
example# 8357
get _STR:0_ attribute from the options object , if it exists substitute it for self.fields [ self . fields ] , if not self.fields [ self . fields ] is None .
1
'fields' ||| _STR:0_
example# 8358
get _STR:0_ attribute from the options object , if it exists substitute it for self.exclude [ self . exclude ] , if not self.exclude [ self . exclude ] is None .
1
'exclude' ||| _STR:0_
example# 8359
get _STR:0_ attribute from the options object , if it exists substitute it for self.widgets [ self . widgets ] , if not self.widgets [ self . widgets ] is None .
1
'widgets' ||| _STR:0_
example# 8360
get _STR:0_ attribute from the options object , if it exists substitute it for self.localized_fields [ self . localized_fields ] ,
1
'localized_fields' ||| _STR:0_
example# 8361
if not self.localized_fields [ self . localized_fields ] is None . get _STR:0_ attribute from the options object , if it exists substitute it for self.labels [ self . labels ] , if not self.labels [ self . labels ] is None .
1
'labels' ||| _STR:0_
example# 8362
get _STR:0_ attribute from the options object , if it exists substitute it for self.help_texts [ self . help_texts ] , if not self.help_texts [ self . help_texts ] is None .
1
'help_texts' ||| _STR:0_
example# 8363
get _STR:0_ attribute from the options object , if it exists substitute it for self.error_messages [ self . error_messages ] ,
1
'error_messages' ||| _STR:0_
example# 8364
if not self.error_messages [ self . error_messages ] is None . derive the class ModelFormMetaclass from the DeclarativeFieldsMetaclass base class .
0
example# 8365
define the method __new__ with 4 arguments : mcs , name , bases and attrs .
0
example# 8366
remove entry under the _STR:0_ key of the attrs dictionary , if it exists substitute if for formfield_callback ,
1
'formfield_callback' ||| _STR:0_
example# 8367
if not formfield_callback is None . call the method __new__ from the base class of the class ModelFormMetaclass , with 4 arguments : mcs , name , bases and attrs ,
0
example# 8368
substitute the result for new_class . if bases equals a tuple with an element : class BaseModelForm .
0
example# 8369
return new_class .
0
example# 8370
instantiate class ModelFormOptions with argument : attribute _STR:0_ of the new_class object . if it exists or None , if not ,
1
'Meta' ||| _STR:0_
example# 8371
assign the result to opts and new_class._meta [ new_class . _meta ] . for every opt in list containing 3 elements : strings _STR:0_ , _STR:1_ and _STR:2_ ,
3
'fields' ||| _STR:0_
'localized_fields' ||| _STR:2_
'exclude' ||| _STR:1_
example# 8372
get opt attribute of the opts object , substitute it for value .
0
example# 8373
if value is an instance of six.string_types [ six . string_types ] and value is not equal to ALL_FIELDS ,
0
example# 8374
msg is a string _STR:0_ , where _STR:1_ is replaced ,
2
'%(model)s' ||| _STR:1_
"%(model)s.Meta.%(opt)s cannot be a string. Did you mean to type: ('%(value)s',)?" ||| _STR:0_
example# 8375
with new_class.__name__ [ new_class . __name__ ] , _STR:0_ is replaced with opt and _STR:1_ is replaced with value . raise an TypeError exception with an argument msg .
2
'%(value)s' ||| _STR:1_
'%(opt)s' ||| _STR:0_
example# 8376
if opts.model [ opts . model ] is true ,
0
example# 8377
if opts.fields [ opts . fields ] is None and opts.exclude [ opts . exclude ] is None ,
0
example# 8378
raise an ImproperlyConfigured exception with an argument string `` Creating a ModelForm without either the _STR:0_ attribute ,
1
'fields' ||| _STR:0_
example# 8379
_STR:0_ , where ' % s ' is replaced with name . if opts.fields [ opts . fields ] equals ALL_FIELDS ,
1
"or the 'exclude' attribute is prohibited; form %s needs updating." ||| _STR:0_
example# 8380
opts.fields [ opts . fields ] is None .
0
example# 8381
call the function fields_for_model with 9 arguments : opts.model [ opts . model ] , opts.fields [ opts . fields ] , opts.exclude [ opts . exclude ] , opts.widgets [ opts . widgets ] , formfield_callback ,
0
example# 8382
opts.localized_fields [ opts . localized_fields ] , opts.labels [ opts . labels ] , opts.help_texts [ opts . help_texts ] and opts.error_messages [ opts . error_messages ] , substitute the result for fields . for every k and v in return value of the function six.iteritems [ six . iteritems ] called with an argument fields , if n is false , append it to a list ,
0
example# 8383
substitute the resulting list for none_model_fields . missing_fields is difference between set containing none_model_fields and set containing result of the method ,
0
example# 8384
new_class.declared_fields.keys [ new_class . declared_fields . keys ] . if missing_fields is true ,
0
example# 8385
message is an string _STR:0_ .
1
'Unknown field(s) (%s) specified for %s' ||| _STR:0_
example# 8386
join missing_fields into a string separated by string _STR:0_ , use it and opts.model.__name__ [ opts . model . __name__ ] to format message , substitute the result for message .
1
', ' ||| _STR:0_
example# 8387
raise an FieldError exception with an argument message .
0
example# 8388
update fields dictionary with new_class.declared_fields [ new_class . declared_fields ] .
0
example# 8389
if not ,
0
example# 8390
substitute new_class.declared_fields [ new_class . declared_fields ] for fields .
0
example# 8391
substitute fields for new_class.base_fields [ new_class . base_fields ] .
0
example# 8392
return new_class .
0
example# 8393
derive the class BaseModelForm from the BaseForm base class .
0
example# 8394
define the method __init__ with 10 arguments : self , data set to None , files set to None , auto_id set to string _STR:0_ ,
1
'id_%s' ||| _STR:0_
example# 8395
prefix set to None , initial set to None , error_class set to ErrorList , label_suffix set to None , empty_permitted set to boolean False , instance set to None . substitute self._meta [ self . _meta ] for opts .
0
example# 8396
if opts.model [ opts . model ] is None .
0
example# 8397
raise an ValueError with an argument string _STR:0_ .
1
'ModelForm has no model class specified.' ||| _STR:0_
example# 8398
if instance is None ,
0
example# 8399
call the method opts.model [ opts . model ] , substitute the result for self.instance [ self . instance ] .
0
example# 8400
object_data is an empty dictionary .
0
example# 8401
if not ,
0
example# 8402
substitute instance for self.instance [ self . instance ] .
0
example# 8403
call the method model_to_dict with 3 arguments : instance , opts.fields [ opts . fields ] , opts.exclude [ opts . exclude ] and substitute the result for object_data .
0
example# 8404
if initial is not None ,
0
example# 8405
update object_data dictionary with initial .
0
example# 8406
self._validate_unique [ self . _validate_unique ] is boolean False .
0
example# 8407
call the method __init__ from the base class of the class BaseModelForm , with 8 arguments : data , files , auto_id , prefix , object_data ,
0
example# 8408
error_class , label_suffix and empty_permitted . for every field_name in self.fields [ self . fields ] ,
0
example# 8409
substitute value under the field_name key of the self.fields [ self . fields ] dictionary for formfield .
0
example# 8410
if formfield has an attribute _STR:0_ ,
1
'queryset' ||| _STR:0_
example# 8411
substitute formfield.limit_choices_to [ formfield . limit_choices_to ] for limit_choices_to .
0
example# 8412
if limit_choices_to is not None ,
0
example# 8413
if limit_choices_to is callable object ,
0
example# 8414
call the function limit_choices_to , substitute the result for limit_choices_to .
0
example# 8415
call the method formfield.queryset.complex_filter [ formfield . queryset . complex_filter ] with an argument limit_choices_to , substitute the result for formfield.queryset [ formfield . queryset ] .
0
example# 8416
define the method _get_validation_exclusions with an argument self .
0
example# 8417
exclude is an empty list .
0
example# 8418
for every f in self.instance._meta.fields [ self . instance . _meta . fields ] ,
0
example# 8419
substitute f.name [ f . name ] for field .
0
example# 8420
if field is not contained in self.fields [ self . fields ] ,
0
example# 8421
append f.name [ f . name ] to exclude .
0
example# 8422
otherwise if self._meta.fields [ self . _meta . fields ] is true and field is not contained in self._meta.fields [ self . _meta . fields ] ,
0
example# 8423
append f.name [ f . name ] to exclude .
0
example# 8424
otherwise if self._meta.exclude [ self . _meta . exclude ] is true and field is not contained in self._meta.exclude [ self . _meta . exclude ] ,
0
example# 8425
append f.name [ f . name ] to exclude .
0
example# 8426
otherwise if field is contained in the result of the call to the method self._errors.keys [ self . _errors . keys ] ,
0
example# 8427
append f.name [ f . name ] to exclude .
0
example# 8428
if not ,
0
example# 8429
substitute value under the field key of the self.fields [ self . fields ] dictionary for form_field .
0
example# 8430
get the value under the field key of the self.cleaned_data [ self . cleaned_data ] dictionary , if it exists substitute it for field_value ,
0
example# 8431
if not field_value is None . if f.blank [ f . blank ] is false and form_field.required [ form_field . required ] is false and field_value is contained in form_field.empty_values [ form_field . empty_values ] ,
0
example# 8432
append f.name [ f . name ] to exclude .
0
example# 8433
return exclude .
0
example# 8434
define the method clean with an argument self .
0
example# 8435
self._validate_unique [ self . _validate_unique ] is boolean True .
0
example# 8436
return self.cleaned_data [ self . cleaned_data ] .
0
example# 8437
define the method _update_errors with 2 arguments : self and errors .
0
example# 8438
substitute self._meta [ self . _meta ] for opts .
0
example# 8439
call the function errors.error_dict.items [ errors . error_dict . items ] , for every field and messages in the result ,
0
example# 8440
if field equals NON_FIELD_ERRORS and opts.error_messages [ opts . error_messages ] is true and NON_FIELD_ERRORS is contained in opts.error_messages [ opts . error_messages ] ,
0
example# 8441
substitute value under the NON_FIELD_ERRORS key of opts.error_messages [ opts . error_messages ] dictionary for error_messages .
0
example# 8442
otherwise if field is contained in self.fields [ self . fields ] ,
0
example# 8443
get the value under the field key of self.fields [ self . fields ] dictionary , substitute error_messages field of the result for error_messages .
0
example# 8444
if not ,
0
example# 8445
skip this loop iteration .
0
example# 8446
for every message in messages ,
0
example# 8447
if message is an instance of ValidationError class and message.code [ message . code ] is contained in error_messages ,
0
example# 8448
substitute error_messages under the message.code [ message . code ] key of error_messages dictionary for message.message [ message . message ] .
0
example# 8449
call the method self.add_error [ self . add_error ] with 2 arguments : None and errors .
0
example# 8450
define the method _post_clean with an argument self .
0
example# 8451
substitute self._meta [ self . _meta ] for opts .
0
example# 8452
call the method self._get_validation_exclusions [ self . _get_validation_exclusions ] , substitute the result for exclude .
0
example# 8453
convert exclude elements to list , substitute it for construct_instance_exclude .
0
example# 8454
call the method self.fields.items [ self . fields . items ] , for every name and field in result ,
0
example# 8455
if field is an instance of InlineForeignKeyField class ,
0
example# 8456
if value under the name key of self.cleaned_data [ self . cleaned_data ] dictionary is not None ,
0
example# 8457
and field _state.adding [ _state . adding ] of value under the name key of self.cleaned_data [ self . cleaned_data ] dictionary is true , append name to construct_instance_exclude list .
0
example# 8458
append name to exclude .
0
example# 8459
call the function construct_instance with 4 arguments : self , self.instance [ self . instance ] , opts.fields [ opts . fields ] and construct_instance_exclude ,
0
example# 8460
substitute the result for self.instance [ self . instance ] . try ,
0
example# 8461
call the method self.instance.full_clean [ self . instance . full_clean ] with 2 arguments : exclude set to exclude and validate_unique set to boolean False .
0
example# 8462
if ValidationError , renamed to e , exception is caught ,
0
example# 8463
call the method self._update_errors [ self . _update_errors ] with an argument e .
0
example# 8464
if self._validate_unique [ self . _validate_unique ] is true ,
0
example# 8465
call the method self.validate_unique [ self . validate_unique ] .
0
example# 8466
define the method validate_unique with an argument self .
0
example# 8467
call the method self._get_validation_exclusions [ self . _get_validation_exclusions ] , substitute the result for exclude .
0
example# 8468
try ,
0
example# 8469
call the method self.instance.validate_unique [ self . instance . validate_unique ] with an argument exclude set to exclude .
0
example# 8470
if ValidationError , renamed to e , exception is caught ,
0
example# 8471
call the method self._update_errors [ self . _update_errors ] with an argument e .
0
example# 8472
define the method save with 2 arguments : self and commit set to boolean True .
0
example# 8473
if self.instance.pk [ self . instance . pk ] is None ,
0
example# 8474
fail_message is a string _STR:0_ .
1
'created' ||| _STR:0_
example# 8475
if not ,
0
example# 8476
fail_message is a string changed ' .
0
example# 8477
call the function with 7 arguments : self , self.instance [ self . instance ] , self._meta.fields [ self . _meta . fields ] , fail_message , commit , self._meta.exclude [ self . _meta . exclude ] ,
0
example# 8478
and construct as boolean False , return the result . save.alters_data [ save . alters_data ] is boolean True .
0
example# 8479
derive the class ModelForm from the base class in the return value of the method six.with_metaclass [ six . with_metaclass ] , called with 2 arguments :
0
example# 8480
ModelFormMetaclass and BaseModelForm . do nothing .
0
example# 8481
define the function modelform_factory with 10 arguments : model , form set to ModelForm , fields set to None , exclude set to None ,
0
example# 8482
attrs is a dictionary with model for _STR:0_ .
1
'model' ||| _STR:0_
example# 8483
if fields is not None ,
0
example# 8484
substitute fields for value under the _STR:0_ key of attrs dictionary .
1
'fields' ||| _STR:0_
example# 8485
if exclude is not None ,
0
example# 8486
substitute exclude for value under the _STR:0_ key of attrs dictionary .
1
'exclude' ||| _STR:0_
example# 8487
if widgets is not None ,
0
example# 8488
substitute widgets for value under the _STR:0_ key of attrs dictionary .
1
'widgets' ||| _STR:0_
example# 8489
if localized_fields is not None ,
0
example# 8490
substitute localized_fields for value under the _STR:0_ key of attrs dictionary .
1
'localized_fields' ||| _STR:0_
example# 8491
if labels is not None ,
0
example# 8492
substitute labels for value under the _STR:0_ key of attrs dictionary .
1
'labels' ||| _STR:0_
example# 8493
if help_texts is not None ,
0
example# 8494
substitute help_texts for value under the _STR:0_ key of attrs dictionary .
1
'help_texts' ||| _STR:0_
example# 8495
if error_messages is not None ,
0
example# 8496
substitute error_messages for value under the _STR:0_ key of attrs dictionary .
1
'error_messages' ||| _STR:0_
example# 8497
parent is a tuple with 1 element , object .
0
example# 8498
if form has an attribute _STR:0_ ,
1
'Meta' ||| _STR:0_
example# 8499
parent is a tuple with 2 arguments : form.Meta [ form . Meta ] and object .
0
example# 8500
Meta is an instance of class with name _STR:0_ , parent base class and fields attrs .
1
'Meta' ||| _STR:0_
example# 8501
append string _STR:0_ to model.__name__ [ model . __name__ ] , substitute the result for class_name .
1
'Form' ||| _STR:0_
example# 8502
form_class_attrs is a dictionary with 2 entries : Meta for _STR:0_ and formfield_callback for _STR:1_ .
2
'Meta' ||| _STR:0_
'formfield_callback' ||| _STR:1_
example# 8503
if _STR:0_ attribute of Meta object is None and _STR:1_ attribute of Meta object is None ,
2
'fields' ||| _STR:0_
'exclude' ||| _STR:1_
example# 8504
raise an ImproperlyConfigured with an argument string _STR:0_
1
"Calling modelform_factory without defining 'fields' or 'exclude' explicitly is prohibited." ||| _STR:0_
example# 8505
get the type of form object , return an instance of resulting class created with 3 arguments : class_name , tuple with an element form ,
0
example# 8506
and form_class_attrs . derive the class BaseModelFormSet from the BaseFormSet base class .
0
example# 8507
model is None .
0
example# 8508
define the method __init__ with 7 arguments : self , data set to None , files set to None , auto_id set to string _STR:0_ ,
1
'id_%s' ||| _STR:0_
example# 8509
prefix set to None , queryset set to None and unpacked dictionary kwargs . substitute queryset for self.queryset [ self . queryset ] .
0
example# 8510
remove entry under _STR:0_ key of the kwargs dictionary , substitute it for self.initial_extra [ self . initial_extra ] if it exists ,
1
'initial' ||| _STR:0_
example# 8511
if not self.initial_extra [ self . initial_extra ] is None . defaults is a dictionary with 4 entries : data for _STR:0_ , files for _STR:1_ , auto_id for _STR:2_ and prefix for _STR:3_ .
4
'files' ||| _STR:1_
'auto_id' ||| _STR:2_
'data' ||| _STR:0_
'prefix' ||| _STR:3_
example# 8512
update defaults dictionary with kwargs .
0
example# 8513
call the method __init__ from the base class of the class BaseModelFormSet , with an argument unpacked dictionary defaults .
0
example# 8514
define the method initial_form_count with an argument self .
0
example# 8515
if self.data [ self . data ] and self.files [ self . files ] are both False ,
0
example# 8516
call the method self.get_queryset [ self . get_queryset ] , return the length of the result .
0
example# 8517
call the method initial_form_count from the base class of the class BaseModelFormSet , return the result .
0
example# 8518
define the method _existing_object with 2 arguments : self and pk .
0
example# 8519
if self has an attribute _STR:0_ ,
1
'_object_dict' ||| _STR:0_
example# 8520
call the function dict with an argument tuple with 2 elements : o.pk [ o . pk ] and o , for every o in result of the method self.get_queryset [ self . get_queryset ] ,
0
example# 8521
substitute the result for self._object_dict [ self . _object_dict ] . return the value under the pk key of self._object_dict [ self . _object_dict ] dictionary .
0
example# 8522
define the method _get_to_python with 2 arguments : self and field .
0
example# 8523
while field.rel [ field . rel ] is not None ,
0
example# 8524
call the method field.rel.get_related_field [ field . rel . get_related_field ] , substitute the result for field .
0
example# 8525
return field.to_python [ field . to_python ] .
0
example# 8526
define the method _construct_form with 3 arguments : self , i and unpacked dictionary kwargs .
0
example# 8527
if self.is_bound [ self . is_bound ] is true and i is smaller than self.initial_form_count [ self . initial_form_count ] ,
0
example# 8528
pk_key is a string _STR:0_ , where ' % s ' is replaced with : result of the method self.add_prefix [ self . add_prefix ] called with an argument i ,
1
"%s-%s" ||| _STR:0_
example# 8529
and self.model._meta.pk.name [ self . model . _meta . pk . name ] . substitute the value under the pk_key key of the self.data [ self . data ] dictionary for pk .
0
example# 8530
substitute self.model._meta.pk [ self . model . _meta . pk ] for pk_field .
0
example# 8531
call the method self._get_to_python [ self . _get_to_python ] with an argument pk_field , substitute the result for to_python .
0
example# 8532
call the function to_python with an argument pk , substitute the result for pk .
0
example# 8533
call the method self._existing_object [ self . _existing_object ] with an argument pk , substitute the result for value under the _STR:0_ key of kwargs .
1
'instance' ||| _STR:0_
example# 8534
if i is smaller than result of the method self.initial_form_count [ self . initial_form_count ] and key _STR:0_ is not contained in kwargs ,
1
'instance' ||| _STR:0_
example# 8535
call the method self.get_queryset [ self . get_queryset ] , substitute i-th element of the result for value under the _STR:0_ key of kwargs dictionary .
1
'instance' ||| _STR:0_
example# 8536
if i is greater or equal to the result of the method self.initial_form_count [ self . initial_form_count ] and self.initial_extra [ self . initial_extra ] is true ,
0
example# 8537
try ,
0
example# 8538
subtract result of the method self.initial_form_count [ self . initial_form_count ] from i , use the result as an index to get the element from self.initial_extra [ self . initial_extra ] ,
0
example# 8539
substitute it for value under the _STR:0_ key of kwargs dictionary . if IndexError exception is caught ,
1
'initial' ||| _STR:0_
example# 8540
do nothing .
0
example# 8541
call the method _construct_form from the base class of the class BaseModelFormSet , with 2 arguments : i and unpacked dictionary kwargs .
0
example# 8542
define the method get_queryset with an argument self .
0
example# 8543
if self doesnt have _STR:0_ attribute ,
1
'_queryset' ||| _STR:0_
example# 8544
if self.queryset [ self . queryset ] is not None ,
0
example# 8545
substitute self.queryset [ self . queryset ] for qs .
0
example# 8546
if not ,
0
example# 8547
call the method self.model._default_manager.get_queryset [ self . model . _default_manager . get_queryset ] with an argument qs .
0
example# 8548
if qs.ordered [ qs . ordered ] is false ,
0
example# 8549
call the method qs.order_by [ qs . order_by ] with argument self.model._meta.pk.name [ self . model . _meta . pk . name ] , substitute the result for qs .
0
example# 8550
substitute qs for self._queryset [ self . _queryset ] .
0
example# 8551
return self._queryset [ self . _queryset ] .
0
example# 8552
define the method save_new with 3 arguments : self , form and commit set to boolean True .
0
example# 8553
call the method form.save [ form . save ] with an argument commit as commit , return the result .
0
example# 8554
define the method save_existing with 4 arguments : self , form , instance and commit set to boolean True .
0
example# 8555
call the method form.save [ form . save ] with an argument commit as commit , return the result .
0
example# 8556
define the method save with 2 arguments : self and commit set to boolean True .
0
example# 8557
if commit is true ,
0
example# 8558
self.saved_forms [ self . saved_forms ] is an empty list .
0
example# 8559
define the function save_m2m .
0
example# 8560
for every form in self.saved_forms [ self . saved_forms ] ,
0
example# 8561
call the function form.save_m2m [ form . save_m2m ] .
0
example# 8562
substitute save_m2m for self.save_m2m [ self . save_m2m ] .
0
example# 8563
sum results of method self.save_existing_objects [ self . save_existing_objects ] called with an argument commit and of method self.save_new_objects [ self . save_new_objects ] ,
0
example# 8564
called with an argument commit , return the result . save.alters_data [ save . alters_data ] is boolean True .
0
example# 8565
define the method clean with an argument self .
0
example# 8566
call the method self.validate_unique [ self . validate_unique ] .
0
example# 8567
define the method validate_unique with an argument self .
0
example# 8568
all_unique_checks is an empty set .
0
example# 8569
all_date_checks is an empty set .
0
example# 8570
substitute self.deleted_forms [ self . deleted_forms ] for forms_to_delete .
0
example# 8571
for every form in self.forms [ self . forms ] append form to a list , if function form.is_valid [ form . is_valid ] evaluates to true ,
0
example# 8572
and form is not contained in forms_to_delete , substitute the resulting list for valid_forms . for every form in valid_forms ,
0
example# 8573
call the method form._get_validation_exclusions [ form . _get_validation_exclusions ] , substitute the result for exclude .
0
example# 8574
call the method form.instance._get_unique_checks [ form . instance . _get_unique_checks ] with an argument exclude as exclude , substitute the result for unique_checks , and date_checks , respectively .
0
example# 8575
all_unique_checks is union of all_unique_checks set and unique_checks set .
0
example# 8576
all_date_checks is union of all_date_checks set and date_checks set .
0
example# 8577
errors is an empty list .
0
example# 8578
for every uclass , unique_check in all_unique_checks ,
0
example# 8579
seen_data is an empty set .
0
example# 8580
for every form in valid_forms ,
0
example# 8581
row_data is an generator object that returns value under the field key of form.cleaned_data [ form . cleaned_data ] dictionary ,
0
example# 8582
for every field in unique_check , if field is contained in form.cleaned_data [ form . cleaned_data ] . create a generator that for every d in row_data , if d has an _STR:0_ attribute ,
1
'_get_pk_val' ||| _STR:0_
example# 8583
returns the result of the call the method d._get_pk_val [ d . _get_pk_val ] , if not return d , put all the generator items into a tuple row_data . if row_data is true and None is not contained in row_data ,
0
example# 8584
if row_data is contained in seen_data ,
0
example# 8585
call the method self.get_unique_error_message [ self . get_unique_error_message ] with an argument unique_check , append the result to errors .
0
example# 8586
call the method self.error_class [ self . error_class ] with an argument list with a element : result of the method self.get_form_error [ self . get_form_error ] ,
0
example# 8587
substitute the result for value under the NON_FIELD_ERRORS key of the form._errors [ form . _errors ] dictionary . for every field in unique_check ,
0
example# 8588
if field is contained in form.cleaned_data [ form . cleaned_data ] ,
0
example# 8589
delete the form.cleaned_data [ form . cleaned_data ] dictionary entry under the field key .
0
example# 8590
add row_data to seen_data set .
0
example# 8591
for every date_check in all_date_checks ,
0
example# 8592
seen_data is an empty set .
0
example# 8593
substitute date_check elements to uclass , lookup , field and unique_for , respectively .
0
example# 8594
for every form in valid_forms ,
0
example# 8595
if form.cleaned_data [ form . cleaned_data ] is true and value under the field key of form.cleaned_data [ form . cleaned_data ] dictionary is not None ,
0
example# 8596
and value under the unique_for key of form.cleaned_data [ form . cleaned_data ] dictionary is not None , if lookup equals a string _STR:0_ ,
1
'date' ||| _STR:0_
example# 8597
substitute value under the unique_for key of form.cleaned_data [ form . cleaned_data ] dictionary for date .
0
example# 8598
date_data is a tuple with 3 elements : date.year [ date . year ] , date.month [ date . month ] and date.day [ date . day ] .
0
example# 8599
if not ,
0
example# 8600
date_data is a tuple with an entry : attribute lookup from the value under the unique_for key of the form.cleaned_data [ form . cleaned_data ] dictionary .
0
example# 8601
create a tuple out of elements under the key field of the form.cleaned_data [ form . cleaned_data ] dictionary , add elements of date_data to it ,
0
example# 8602
substitute it for data . if data is contained in seen_data ,
0
example# 8603
call the method self.get_date_error_message [ self . get_date_error_message ] with an argument date_check , append the result to errors .
0
example# 8604
call the method self.error_class [ self . error_class ] with an argument list with one element , return value of the method self.get_form_error [ self . get_form_error ] ,
0
example# 8605
substitute the result for the value under the NON_FIELD_ERRORS key of form._errors [ form . _errors ] dictionary . delete entry from form.cleaned_data [ form . cleaned_data ] dictionary under the field key .
0
example# 8606
add data to seen_data set .
0
example# 8607
if errors is true ,
0
example# 8608
raise an ValidationError exception with an argument errors .
0
example# 8609
define the method get_unique_error_message with 2 arguments : self and unique_check .
0
example# 8610
if length of unique_check equals integer 1 ,
0
example# 8611
call the function ugettext with an argument string _STR:0_ ,
1
"Please correct the duplicate data for %(field)s." ||| _STR:0_
example# 8612
where _STR:0_ is replaced with first element of unique_check , return the result . if not ,
1
'%(field)s' ||| _STR:0_
example# 8613
call the function ugettext with an argument string _STR:0_ ,
1
"Please correct the duplicate data for %(field)s, which must be unique." ||| _STR:0_
example# 8614
where _STR:0_ is replaced with return value of the get_text_list function called with 2 arguments : unique_check and return value of the function six.text_type [ six . text_type ] called with return value of the function _ with an argument string _STR:1_ , return the result . define the method get_date_error_message with 2 arguments : self and date_check .
2
'%(field)s' ||| _STR:0_
'and' ||| _STR:1_
example# 8615
call the function ugettext with an argument string `` Please correct the duplicate data for % ( field_name ) s which must be unique for ,
0
example# 8616
the % ( lookup ) s in % ( date_field ) s. '' , where _STR:0_ is replaced with third element of data_check , _STR:1_ is replaced with fourth element of date_check and _STR:2_ is replaced with result of the function , six.text_type [ six . text_type ] called with second element of date_check as an argument , return the result . define the method get_form_error with an argument self .
3
'%(date_field)s' ||| _STR:1_
'%(field_name)s' ||| _STR:0_
'%(lookup)s' ||| _STR:2_
example# 8617
call the function ugettext with an argument string _STR:0_ , return the result .
1
"Please correct the duplicate values below." ||| _STR:0_
example# 8618
define the method save_existing_objects with 2 arguments : self and commit set to boolean True .
0
example# 8619
self.changed_objects [ self . changed_objects ] is an empty list .
0
example# 8620
self.deleted_objects [ self . deleted_objects ] is an empty list .
0
example# 8621
if self.initial_forms [ self . initial_forms ] is false ,
0
example# 8622
return an empty list .
0
example# 8623
saved_instances is an empty list .
0
example# 8624
substitute self.deleted_forms [ self . deleted_forms ] for forms_to_delete .
0
example# 8625
for every form in self.initial_forms [ self . initial_forms ] ,
0
example# 8626
substitute form.instance [ form . instance ] for obj .
0
example# 8627
if form is contained in forms_to_delete ,
0
example# 8628
if obj.pk [ obj . pk ] is None ,
0
example# 8629
skip this loop iteration .
0
example# 8630
append obj to self.deleted_objects [ self . deleted_objects ] list .
0
example# 8631
if commit is true ,
0
example# 8632
call the method obj.delete [ obj . delete ] .
0
example# 8633
otherwise if form.has_changed [ form . has_changed ] method evaluates to true ,
0
example# 8634
append a tuple with 2 elements : obj and form.changed_data [ form . changed_data ] to self.changed_objects [ self . changed_objects ] .
0
example# 8635
call the method self.save_existing [ self . save_existing ] with 3 arguments : form , obj and commit as commit , append the result to saved_instances .
0
example# 8636
if commit is false ,
0
example# 8637
append form to self.saved_forms [ self . saved_forms ] .
0
example# 8638
return saved_instances .
0
example# 8639
define the method save_new_objects with 2 arguments : self and commit set to boolean True .
0
example# 8640
self.new_objects [ self . new_objects ] is an empty list .
0
example# 8641
for every form in self.extra_forms [ self . extra_forms ] ,
0
example# 8642
if function form.has_changed [ form . has_changed ] evaluates to false ,
0
example# 8643
skip this loop iteration .
0
example# 8644
if self.can_delete [ self . can_delete ] is true and call to the function self._should_delete_form [ self . _should_delete_form ] with an argument form evaluates to true ,
0
example# 8645
skip this loop iteration .
0
example# 8646
call the method self.save_new [ self . save_new ] with 2 arguments : form and commit as commit , append the result to self.new_objects [ self . new_objects ] .
0
example# 8647
if commit is false ,
0
example# 8648
append form to self.saved_forms [ self . saved_forms ] .
0
example# 8649
return self.new_objects [ self . new_objects ] .
0
example# 8650
define the method add_fields with 2 arguments : self , form and index .
0
example# 8651
from django.db.models [ django . db . models ] import AutoField , OneToOneField and ForeignKey .
0
example# 8652
assign self.model._meta.pk [ self . model . _meta . pk ] to self._pk_field [ self . _pk_field ] and pk .
0
example# 8653
define the method pk_is_not_editable with an argument pk .
0
example# 8654
if pk.editable [ pk . editable ] is true , or pk.auto_created [ pk . auto_created ] is true or pk is an instance of AutoField class , or if pk.rel [ pk . rel ] is true ,
0
example# 8655
and pk.rel.parent_link [ pk . rel . parent_link ] is true and function pk_is_not_editable called with an argument pk.rel.to._meta.pk [ pk . rel . to . _meta . pk ] evaluates to true , if function pk_is_not_editable called with an argument pk evaluates to true , or pk.name [ pk . name ] is not contained in form.fields [ form . fields ] ,
0
example# 8656
if form.is_bound [ form . is_bound ] is true ,
0
example# 8657
substitute form.instance.pk [ form . instance . pk ] for pk_value .
0
example# 8658
if not ,
0
example# 8659
try ,
0
example# 8660
if index is not None ,
0
example# 8661
call the method self.get_queryset [ self . get_queryset ] , substitute field pk under the result at the index index for pk_value .
0
example# 8662
if not ,
0
example# 8663
pk_value is None .
0
example# 8664
if IndexError exception is caught ,
0
example# 8665
pk_value is None .
0
example# 8666
if pk is an instance of OneToOneField or ForeignKey classes ,
0
example# 8667
call the method pk.rel.to._default_manager.get_queryset [ pk . rel . to . _default_manager . get_queryset ] , substitute the result for qs .
0
example# 8668
if not ,
0
example# 8669
call the method self.model._default_manager.get_queryset [ self . model . _default_manager . get_queryset ] with an argument qs .
0
example# 8670
call the method qs.using [ qs . using ] with an argument form.instance._state.db [ form . instance . _state . db ] , substitute the result for qs .
0
example# 8671
if form._meta.widgets [ form . _meta . widgets ] is true ,
0
example# 8672
get the value under self._pk_field.name [ self . _pk_field . name ] key of form._meta.widgets [ form . _meta . widgets ] dictionary , if it exists substitute it for widget , if not ,
0
example# 8673
widget is an instance of HiddenInput class . if not ,
0
example# 8674
widget is an instance of HiddenInput class
0
example# 8675
value under the self._pk_field.name [ self . _pk_field . name ] key of form.fields [ form . fields ] dictionary is an instance of ModelChoiceField class ,
0
example# 8676
created with 4 arguments : qs , initial as pk_value , required as boolean False and widget as widget . call the method add_fields from the base class of the class BaseModelFormSet , with 2 arguments : form and index .
0
example# 8677
define the function modelformset_factory with 18 arguments : model , form set to ModelForm , formfield_callback set to None ,
0
example# 8678
get _STR:0_ attribute from form object , if it exists substitute it for meta , if not meta is None .
1
'Meta' ||| _STR:0_
example# 8679
if meta is None ,
0
example# 8680
meta is an instance of a class named _STR:0_ , derived from the object base class , without any fields .
1
'Meta' ||| _STR:0_
example# 8681
if _STR:0_ attribute of meta is None , or if it doesnt exists if fields is None and if _STR:1_ attribute of meta is None ,
2
'fields' ||| _STR:0_
'exclude' ||| _STR:1_
example# 8682
or if it doesnt exists if exclude is None . raise an ImproperlyConfigured with an argument string `` Calling modelformset_factory without defining _STR:0_ or _STR:1_ ,
2
'fields' ||| _STR:0_
'exclude' ||| _STR:1_
example# 8683
explicitly is prohibited . '' call the function modelform_factory with 10 arguments : model , form as form , fields as fields , exclude as exclude ,
0
example# 8684
formfield_callback as formfield_callback , widgets as widgets , localized_fields as localized_fields , labels as labels , help_texts as help_texts and error_messages as error_messages , substitute the result for form . call the function formset_factory with 10 arguments : form , formset , extra as extra , min_num as min_num , max_num as max_num ,
0
example# 8685
can_order as can_order , can_delete as can_delete , validate_min as validate_min , validate_max as validate_max , substitute the result for form . substitute model for FormSet.model [ FormSet . model ] .
0
example# 8686
return FormSet .
0
example# 8687
derive the class BaseInlineFormSet from the BaseModelFormSet base class .
0
example# 8688
define the method __init__ with 8 arguments : self , data set to None , files set to None , instance set to None ,
0
example# 8689
save_as_new set to boolean False , prefix set to None , queryset set to None and unpacked dictionary kwargs . if instance is None ,
0
example# 8690
call the method self.fk.rel.to [ self . fk . rel . to ] , substitute the result for self.instance [ self . instance ] .
0
example# 8691
if not ,
0
example# 8692
substitute instance for self.instance [ self . instance ] .
0
example# 8693
substitute save_as_new for self.save_as_new [ self . save_as_new ] .
0
example# 8694
if queryset is None ,
0
example# 8695
substitute self.model._default_manager [ self . model . _default_manager ] for queryset .
0
example# 8696
if self.instance.pk [ self . instance . pk ] is not None ,
0
example# 8697
call the method queryset.filter [ queryset . filter ] with an argument unpacked dictionary containing self.instance [ self . instance ] for self.fk.name [ self . fk . name ] , substitute the result for qs .
0
example# 8698
if not ,
0
example# 8699
call the method queryset.none [ queryset . none ] , substitute it for qs .
0
example# 8700
call the method __init__ from the base class of the class BaseInlineFormSet , with 5 arguments : data , files , prefix set to prefix ,
0
example# 8701
queryset set to qs and unpacked dictionary kwargs . define the method initial_form_count with an argument self .
0
example# 8702
if self.save_as_new [ self . save_as_new ] is true ,
0
example# 8703
return integer 0 .
0
example# 8704
call the method initial_form_count from the base class of the class BaseInlineFormSet , return the result .
0
example# 8705
define the method _construct_form with 3 arguments : self , i and unpacked dictionary kwargs .
0
example# 8706
call the method _construct_form from the base class of the class BaseInlineFormSet , with 2 arguments : i ,
0
example# 8707
and unpacked dictionary kwargs , substitute the result for form . if self.save_as_new [ self . save_as_new ] is true ,
0
example# 8708
call the method form.add_prefix [ form . add_prefix ] with an argument self._pk_field.name [ self . _pk_field . name ] ,
0
example# 8709
use the result as an key to get the value of the form.data [ form . data ] dictionary , assign it value None . call the method form.add_prefix [ form . add_prefix ] with an argument self.fk.name [ self . fk . name ] ,
0
example# 8710
use the result as an key to get the value of the form.data [ form . data ] dictionary , assign it value None . use return value of the self.fk.get_attname [ self . fk . get_attname ] as the name of the attribute of form.instance [ form . instance ] object to set , set it to self.instance.pk [ self . instance . pk ] .
0
example# 8711
return form .
0
example# 8712
classmethod decorator ,
0
example# 8713
define the method get_default_prefix with an argument cls .
0
example# 8714
from django.db.models.fields.related [ django . db . models . fields . related ] import RelatedObject into default namespace .
0
example# 8715
instantiate RelatedObject class with 3 arguments : cls.fk.rel.to [ cls . fk . rel . to ] , cls.model [ cls . model ] and cls.fk [ cls . fk ] ,
0
example# 8716
call the method get_accessor_name on the result , substitute all occurrences of _STR:0_ in the result with an empty string , return it . define the method save_new with 3 arguments : self , form and commit set to boolean True .
1
'+' ||| _STR:0_
example# 8717
call the method form.save [ form . save ] , with an argument commit set to boolean False , substitute the result for obj .
0
example# 8718
get self.instance [ self . instance ]
0
example# 8719
get attribute _STR:0_ of the pk_value object , if it doesnt exists use pk_value , set to it self.fk.get_attname [ self . fk . get_attname ] return value attribute ,
1
'pk' ||| _STR:0_
example# 8720
of the obj object . if commit is true ,
0
example# 8721
call the method obj.save [ obj . save ] .
0
example# 8722
if commit is true and form has an attribute _STR:0_ ,
1
'save_m2m' ||| _STR:0_
example# 8723
call the method form.save_m2m [ form . save_m2m ] .
0
example# 8724
return obj .
0
example# 8725
define the method add_fields with 3 arguments : self , form and index .
0
example# 8726
call the method add_fields from the base class of the class BaseInlineFormSet , with 2 arguments : form and index .
0
example# 8727
if self._pk_field [ self . _pk_field ] equals self.fk [ self . fk ] ,
0
example# 8728
substitute self._pk_field.name [ self . _pk_field . name ] for name .
0
example# 8729
kwargs is a dictionary with boolean True for _STR:0_ .
1
'pk_field' ||| _STR:0_
example# 8730
if not ,
0
example# 8731
substitute self.fk.name [ self . fk . name ] for name .
0
example# 8732
kwargs is a dictionary with an entry : attribute _STR:0_ of the object under the name key of the form.fields [ form . fields ] dictionary for _STR:0_ ,
1
'label' ||| _STR:0_
example# 8733
if it doesnt exists return value of the function capfirst with an argument self.fk.verbose_name [ self . fk . verbose_name ] for _STR:0_ . if self.fk.rel.field_name [ self . fk . rel . field_name ] is not equal to self.fk.rel.to._meta.pk.name [ self . fk . rel . to . _meta . pk . name ] ,
1
'label' ||| _STR:0_
example# 8734
substitute self.fk.rel.field_name [ self . fk . rel . field_name ] for value under the _STR:0_ key of the kwargs dictionary .
1
'to_field' ||| _STR:0_
example# 8735
value under the name key of the form.fields [ form . fields ] dictionary is an instance of InlineForeignKeyField created with 2 arguments :
0
example# 8736
self.instance [ self . instance ] and unpacked dictionary kwargs . if form._meta.fields [ form . _meta . fields ] is true ,
0
example# 8737
if form._meta.fields [ form . _meta . fields ] is an instance of tuple type ,
0
example# 8738
form._meta.fields [ form . _meta . fields ] is a list created out of form._meta.fields [ form . _meta . fields ] elements .
0
example# 8739
append self.fk.name [ self . fk . name ] to form._meta.fields [ form . _meta . fields ] .
0
example# 8740
define the method get_unique_error_message with 2 arguments : self and unique_check .
0
example# 8741
unique_check is a list with elements field , for every field in unique_check if field is not equal to self.fk.name [ self . fk . name ] .
0
example# 8742
call the method get_unique_error_message from the base class of the class BaseInlineFormSet , with an argument unique_check , return the result .
0
example# 8743
define the function _get_foreign_key with 4 arguments : parent_model , model , fk_name set to None and can_fail set to boolean False .
0
example# 8744
from django.db.models [ django . db . models ] import ForeignKey .
0
example# 8745
substitute model._meta [ model . _meta ] for opts .
0
example# 8746
if fk_name is true ,
0
example# 8747
fks_to_parent is a list containing f , for every f in opts.fields [ opts . fields ] if f.name [ f . name ] equals fk_name .
0
example# 8748
if length of fks_to_parent equals integer 1 .
0
example# 8749
substitute first element of fks_to_parent for fk .
0
example# 8750
if fk is not an instance of ForeignKey class , or fk.rel.to [ fk . rel . to ] is not equal to parent_model ,
0
example# 8751
and fk.rel.to [ fk . rel . to ] is not contained in result of the call to the method parent_model._meta.get_parent_list [ parent_model . _meta . get_parent_list ] . raise an ValueError with an argument string _STR:0_ , where ' % s ' is replaced with ,
1
"fk_name '%s' is not a ForeignKey to '%s.%'." ||| _STR:0_
example# 8752
fk_name , parent_model._meta.app_label [ parent_model . _meta . app_label ] and parent_model._meta.object_name [ parent_model . _meta . object_name ] , respectively . otherwise if length of fks_to_parent is zero ,
0
example# 8753
raise an ValueError with an argument string _STR:0_ , where ' % s ' is replaced with ,
1
"'%s.%s' has no field named '%s'." ||| _STR:0_
example# 8754
model._meta.app_label [ model . _meta . app_label ] , model._meta.object_name [ model . _meta . object_name ] , fk_name , respectively . if not ,
0
example# 8755
fks_to_parent is a list containing f for every f in opts.fields [ opts . fields ] , only if f is an instance of ForeignKey ,
0
example# 8756
and , if f.rel.toequals [ f . rel . toequals ] parent_model or f.rel.to [ f . rel . to ] is contained in result of the call to the method parent_model._meta.get_parent_list [ parent_model . _meta . get_parent_list ] . if length of fks_to_parent is integer 1 ,
0
example# 8757
substitute first element of fks_to_parent for fk .
0
example# 8758
otherwise if length of fks_to_parent is zero ,
0
example# 8759
if can_fail is true ,
0
example# 8760
return nothing .
0
example# 8761
raise an ValueError with an argument string _STR:0_ , where ' % s ' is replaced with ,
1
"'%s.%s' has no ForeignKey to '%s.%s'." ||| _STR:0_
example# 8762
model._meta.app_label [ model . _meta . app_label ] , model._meta.object_name [ model . _meta . object_name ] , parent_model._meta.app_label [ parent_model . _meta . app_label ] , parent_model._meta.object_name [ parent_model . _meta . object_name ] , respectively . if not ,
0
example# 8763
raise an ValueError with an argument string _STR:0_ , where ' % s ' is replaced with ,
1
"'%s.%s' has more than one ForeignKey to '%s.%s'." ||| _STR:0_
example# 8764
model._meta.app_label [ model . _meta . app_label ] , model._meta.object_name [ model . _meta . object_name ] , parent_model._meta.app_label [ parent_model . _meta . app_label ] , parent_model._meta.object_name [ parent_model . _meta . object_name ] , respectively . return fk .
0
example# 8765
define the function inlineformset_factory with 20 arguments : parent_model , model , form set to ModelForm ,
0
example# 8766
call the function _get_foreign_key with 3 arguments : parent_model , model and fk_name=fk_name , substitute the result for fk .
0
example# 8767
if fk.unique [ fk . unique ] is boolean true ,
0
example# 8768
max_num is integer 1 .
0
example# 8769
kwargs is a dictionary with 17 entries : form for _STR:0_ , formfield_callback for _STR:1_ , formset for _STR:2_ ,
3
'formset' ||| _STR:2_
'formfield_callback' ||| _STR:1_
'form' ||| _STR:0_
example# 8770
extra for _STR:0_ , can_delete for _STR:1_ , can_order for _STR:2_ , fields for _STR:3_ , exclude for _STR:4_ , min_num for _STR:5_ , max_num for _STR:6_ , widgets for _STR:7_ , validate_min for _STR:8_ , validate_max for _STR:9_ , localized_fields for _STR:10_ , labels for _STR:11_ , help_texts for _STR:12_ , and error_messages for _STR:13_ . call the function modelformset_factory with 2 arguments : model and unpacked dictionary kwargs , substitute the result for FormSet .
14
'error_messages' ||| _STR:13_
'fields' ||| _STR:3_
'localized_fields' ||| _STR:10_
'min_num' ||| _STR:5_
'exclude' ||| _STR:4_
'extra' ||| _STR:0_
'can_order' ||| _STR:2_
'can_delete' ||| _STR:1_
'validate_max' ||| _STR:9_
'max_num' ||| _STR:6_
'validate_min' ||| _STR:8_
'help_texts' ||| _STR:12_
'widgets' ||| _STR:7_
'labels' ||| _STR:11_
example# 8771
substitute fk for FormSet.fk [ FormSet . fk ] .
0
example# 8772
return FormSet .
0
example# 8773
derive the class InlineForeignKeyField from the Field base class .
0
example# 8774
substitute HiddenInput for widget .
0
example# 8775
default_error_messages is an dictionary with an entry : return value of the function _ called with an argument ,
0
example# 8776
string _STR:0_ for _STR:1_ . define the method __init__ with 4 arguments : self , parent_instance , unpacked list args and unpacked dictionary kwargs .
2
'The inline foreign key did not match the parent instance primary key.' ||| _STR:0_
'invalid_choice' ||| _STR:1_
example# 8777
substitute parent_instance for self.parent_instance [ self . parent_instance ] .
0
example# 8778
remove element from kwargs dictionary under the key _STR:0_ , substitute it for self.pk_field [ self . pk_field ] if it exists ,
1
'pk_field' ||| _STR:0_
example# 8779
if not self.pk_field [ self . pk_field ] is boolean False . remove element from kwargs dictionary under the key _STR:0_ , substitute it for self.to_field [ self . to_field ] if it exists ,
1
'to_field' ||| _STR:0_
example# 8780
if not self.to_field [ self . to_field ] is None . if self.parent_instance [ self . parent_instance ] is not None ,
0
example# 8781
if self.to_field [ self . to_field ] is true ,
0
example# 8782
get self.to_field [ self . to_field ] attribute of self.parent_instance [ self . parent_instance ] object , substitute it for value under the _STR:0_ key of the kwargs dictionary .
1
'initial' ||| _STR:0_
example# 8783
if not ,
0
example# 8784
substitute self.parent_instance.pk [ self . parent_instance . pk ] for value under the _STR:0_ key of the kwargs dictionary .
1
'initial' ||| _STR:0_
example# 8785
value under the _STR:0_ key of the kwargs dictionary is boolean False .
1
'required' ||| _STR:0_
example# 8786
call the method __init__ from the base class of the class InlineForeignKeyField , with 2 arguments unpacked list args ,
0
example# 8787
and unpacked dictionary kwargs . define the method clean with 2 arguments : self and value .
0
example# 8788
if value is contained in self.empty_values [ self . empty_values ] ,
0
example# 8789
if self.pk_field [ self . pk_field ] ,
0
example# 8790
return None .
0
example# 8791
return self.parent_instance [ self . parent_instance ] .
0
example# 8792
if self.to_field [ self . to_field ] is true ,
0
example# 8793
get self.to_field [ self . to_field ] attribute of self.parent_instance [ self . parent_instance ] , substitute it for orig .
0
example# 8794
if not ,
0
example# 8795
substitute self.parent_instance.pk [ self . parent_instance . pk ] for orig .
0
example# 8796
if return values of the function force_text called two times with 1 argument , with value , and with orig , are equal ,
0
example# 8797
raise an ValidationError with 2 arguments : self.error_messages [ self . error_messages ] dictionary value under the _STR:0_ key ,
1
'invalid_choice' ||| _STR:0_
example# 8798
and code set to a string _STR:0_ . return self.parent_instance [ self . parent_instance ] .
1
'invalid_choice' ||| _STR:0_
example# 8799
define the method _has_changed with 3 arguments : self , initial and data .
0
example# 8800
return boolean False .
0
example# 8801
derive the class ModelChoiceIterator from object base class .
0
example# 8802
define the method __init__ with 2 arguments : self and field .
0
example# 8803
substitute field for self.field [ self . field ] .
0
example# 8804
substitute field.queryset [ field . queryset ] for self.queryset [ self . queryset ] .
0
example# 8805
define the method __iter__ with an argument self .
0
example# 8806
if self.field.empty_label [ self . field . empty_label ] is not None ,
0
example# 8807
yield a tuple with 2 elements : an empty string and self.field.empty_label [ self . field . empty_label ] .
0
example# 8808
if self.field.cache_choices [ self . field . cache_choices ] is true ,
0
example# 8809
if self.field.choice_cache [ self . field . choice_cache ] is None ,
0
example# 8810
self.field.choice_cache [ self . field . choice_cache ] is a list containing results of the method self.choice [ self . choice ] called with an argument obj ,
0
example# 8811
for every obj in result of the method self.queryset.all [ self . queryset . all ] . for every choice in self.field.choice_cache [ self . field . choice_cache ] ,
0
example# 8812
yield choice .
0
example# 8813
if not ,
0
example# 8814
for every obj in result of the call to the method self.queryset.all [ self . queryset . all ] ,
0
example# 8815
call the method self.choice [ self . choice ] with an argument obj , yield the result .
0
example# 8816
define the method __len__ with an argument self .
0
example# 8817
sum length of self.quertset [ self . quertset ] and integer 1 if self.field.empty_label [ self . field . empty_label ] is not None , or integer 0 if not , return the result .
0
example# 8818
define the method choice with 2 arguments : self and obj .
0
example# 8819
return a tuple with 2 elements : result of the method self.field.prepare_value [ self . field . prepare_value ] called with an argument obj ,
0
example# 8820
and result of the method self.field.label_from_instance [ self . field . label_from_instance ] , called with an argument obj . derive the class ModelChoiceField from the ChoiceField base class .
0
example# 8821
default_error_messages is a dictionary with an entry , result of the call to the function _ with an argument ,
0
example# 8822
string _STR:0_ for _STR:1_ . define the method __init__ with 13 arguments : self , queryset , empty_label set to a string _STR:2_ , cache_choices set to None ,
3
"---------" ||| _STR:2_
'invalid_choice' ||| _STR:1_
'Select a valid choice. That choice is not one of the available choices.' ||| _STR:0_
example# 8823
required set to boolean True , widget set to None , label set to None , initial set to None , help_text set to an empty string , to_field_name set to None , limit_choices_to set to None , unpacked list args and unpacked dictionary kwargs . if required is true and initial is not None ,
0
example# 8824
self.empty_label [ self . empty_label ] is None .
0
example# 8825
if not ,
0
example# 8826
substitute empty_label for self.empty_label [ self . empty_label ] .
0
example# 8827
if cache_choices is not None ,
0
example# 8828
call the function warnings.warn [ warnings . warn ] with 3 arguments : string _STR:0_ ,
1
"cache_choices has been deprecated and will be removed in Django 1.9." ||| _STR:0_
example# 8829
RemovedInDjango19Warning and stacklevel set to integer 2. if not ,
0
example# 8830
substitute boolean False for cache_choices .
0
example# 8831
substitute cache_choices for self.cache_choices [ self . cache_choices ] .
0
example# 8832
call the method Field.__init__ [ Field . __init__ ] with 8 arguments : self , required , widget , label , initial , help_text , unpacked list args ,
0
example# 8833
and unpacked dictionary kwargs . substitute queryset for self.queryset [ self . queryset ] .
0
example# 8834
substitute limit_choices_to for self.limit_choices_to [ self . limit_choices_to ] .
0
example# 8835
self.choice_cache [ self . choice_cache ] is None .
0
example# 8836
substitute to_field_name for self.to_field_name [ self . to_field_name ]
0
example# 8837
define the method __deepcopy__ with 2 arguments : self and memo .
0
example# 8838
call the method __deepcopy__ from the base class of the class ChoiceField , with an argument memo , substitute the result for result .
0
example# 8839
substitute result.queryset [ result . queryset ] for result.queryset [ result . queryset ] .
0
example# 8840
return result .
0
example# 8841
define the method _get_queryset with an argument self .
0
example# 8842
return self._queryset [ self . _queryset ] .
0
example# 8843
define the method _set_queryset with 2 arguments : self and queryset .
0
example# 8844
substitute queryset for self._queryset [ self . _queryset ] .
0
example# 8845
substitute self.choices [ self . choices ] for self.widget.choices [ self . widget . choices ] .
0
example# 8846
queryset is an property object of this class , with _get_queryset getter and _set_queryset setter functions .
0
example# 8847
define the method label_from_instance with 2 arguments : self and obj .
0
example# 8848
call the function smart_text with an argument obj , return the result .
0
example# 8849
define the method _get_choices with an argument self .
0
example# 8850
if self has an attribute _STR:0_ ,
1
'_choices' ||| _STR:0_
example# 8851
return self._choices [ self . _choices ] .
0
example# 8852
return an instance of ModelChoiceIterator class , created with an argument self .
0
example# 8853
choices is an property property object of this class , with _get_choices getter and ChoiceField._set_choices [ ChoiceField . _set_choices ] setter functions .
0
example# 8854
define the method prepare_value with 2 arguments : self and value .
0
example# 8855
if value has an attribute _STR:0_ ,
1
'_meta' ||| _STR:0_
example# 8856
if self.to_field_name [ self . to_field_name ] is true ,
0
example# 8857
call the method value.serializable_value [ value . serializable_value ] with an argument self.to_field_name [ self . to_field_name ] , return the result .
0
example# 8858
if not ,
0
example# 8859
return value.pk [ value . pk ] .
0
example# 8860
call the method prepare_value from the base class of the class ModelChoiceField , with an argument value , return the result .
0
example# 8861
define the method to_python with 2 arguments : self and value .
0
example# 8862
if value is contained in self.empty_values [ self . empty_values ] ,
0
example# 8863
return None .
0
example# 8864
try ,
0
example# 8865
substitute self.to_field_name [ self . to_field_name ] , if exists , for key , if not substitute string _STR:0_ for key .
1
'pk' ||| _STR:0_
example# 8866
call the method self.queryset.get [ self . queryset . get ] with an argument , unpacked dictionary with an element : value for key , substitute the result for value .
0
example# 8867
if ValueError or self.queryset.model.DoesNotExist [ self . queryset . model . DoesNotExist ] exception is caught ,
0
example# 8868
raise an ValidationError exception with 2 arguments : value under the _STR:0_ key of the self.error_messages [ self . error_messages ] dictionary ,
1
'invalid_choice' ||| _STR:0_
example# 8869
code set to a string _STR:0_ . return value .
1
'invalid_choice' ||| _STR:0_
example# 8870
define the method validate with 2 arguments : self and value .
0
example# 8871
call the method Field.validate [ Field . validate ] with 2 arguments : self and value , return the result .
0
example# 8872
define the method _has_changed with 3 arguments : self , initial and data .
0
example# 8873
if initial is not None , substitute initial for initial_value , otherwise initial_value is an empty string .
0
example# 8874
if data is not None , substitute data for initial_value , otherwise data_value is an empty string .
0
example# 8875
call the method self.prepare_value [ self . prepare_value ] with an argument initial_value , use it as the argument for the call to the function force_text ,
0
example# 8876
if the result is equal to the result of the call to the function force_text with data_value as an argument , return boolean True , otherwise return boolean False . derive the class ModelMultipleChoiceField from the ModelChoiceField base class .
0
example# 8877
substitute SelectMultiple for widget .
0
example# 8878
substitute MultipleHiddenInput for hidden_widget .
0
example# 8879
default_error_messages is an dictionary with 3 entries : return value of the function _ called with an argument ,
0
example# 8880
string _STR:0_ for _STR:1_ , return value of the function _ called with an argument , string _STR:2_ for _STR:3_ , and return value of the function _ called with an argument string _STR:4_ for _STR:5_ . define the method __init__ with 10 arguments : self , queryset , cache_choices set to None , required set to boolean True ,
6
'list' ||| _STR:1_
'invalid_choice' ||| _STR:3_
'"%(pk)s" is not a valid value for a primary key.' ||| _STR:4_
'invalid_pk_value' ||| _STR:5_
'Enter a list of values.' ||| _STR:0_
'Select a valid choice. %(value)s is not one of the available choices.' ||| _STR:2_
example# 8881
widget set to None , label set to None , initial set to None , help_text set to an empty strign , unpacked list args and unpacked dictionary kwargs . call the method __init__ from the base class of the class ModelMultipleChoiceField , with 10 arguments : queryset , None ,
0
example# 8882
cache_choices , required , widget , label , initial , help_text , unpacked list args and unpacked dictionary kwargs . define the method to_python with 2 arguments : self and value .
0
example# 8883
if value is false ,
0
example# 8884
return an empty list .
0
example# 8885
instantiate base class of the class ModelMultipleChoiceField , substitute filed to_python of the result for to_py .
0
example# 8886
return a list containing return values of the function to_py called with an argument val , for every val in value .
0
example# 8887
define the method clean with 2 arguments : self and value .
0
example# 8888
if self.required [ self . required ] is true and value is false ,
0
example# 8889
raise an ValidationError with 2 arguments : dictionary self.error_messages [ self . error_messages ] value under the key _STR:0_ ,
1
'required' ||| _STR:0_
example# 8890
and code set to string 'required . otherwise if self.required [ self . required ] is false and value is false ,
0
example# 8891
call the method self.queryset.none [ self . queryset . none ] , return the result .
0
example# 8892
if value is not an instance of list or tuple types ,
0
example# 8893
raise an ValidationError with 2 arguments : dictionary self.error_messages [ self . error_messages ] value under the key _STR:0_ ,
1
'list' ||| _STR:0_
example# 8894
and code set to string _STR:0_pk ' for key .
1
'list.   substitute self.to_field_name, if true, for key, or if not, substitute string ' ||| _STR:0_
example# 8895
for every pk in value ,
0
example# 8896
try ,
0
example# 8897
call the method self.queryset.filter [ self . queryset . filter ] with an argument , unpacked dictionary with an entry : pk for key .
0
example# 8898
if ValueError exception is caught ,
0
example# 8899
raise an ValidationError with 3 arguments : dictionary self.error_messages [ self . error_messages ] value under the key _STR:0_ ,
1
'invalid_pk_value' ||| _STR:0_
example# 8900
code set to string _STR:0_pk_STR:1___in ' appended to key ,
2
'.   call the method self.queryset.filter with an argument, unpacked dictionary with an entry: value for string ' ||| _STR:1_
'invalid_pk_value and params with an entry: pk for ' ||| _STR:0_
example# 8901
substitute the result for qs . pks is a set containing results of the call to the function force_text with an argument , key attribute of the o object ,
0
example# 8902
for every o in opts . for every val in value ,
0
example# 8903
call the function force_text with an argument val , if the result is not contained in pks ,
0
example# 8904
raise an ValidationError with 3 arguments : dictionary self.error_messages [ self . error_messages ] value under the key _STR:0_ ,
1
'invalid_choice' ||| _STR:0_
example# 8905
code set to string _STR:0_ and params as a dictionary with an entry , val for _STR:1_ . call the method self.run_validators [ self . run_validators ] with an argument value .
2
'invalid_choice' ||| _STR:0_
'value' ||| _STR:1_
example# 8906
return qs .
0
example# 8907
define the method prepare_value with 2 arguments : self and value .
0
example# 8908
if value has an attribute _STR:0_ and value is not an instance of six.text_type [ six . text_type ] and value doesnt have an attribute _STR:1_ ,
2
'__iter__' ||| _STR:0_
'_meta' ||| _STR:1_
example# 8909
call the method prepare_value from the base class of the class ModelMultipleChoiceField , with an argument v ,
0
example# 8910
for every v in value , return the list of results . call the method prepare_value the base class of the class ModelMultipleChoiceField , with an argument value , return the result .
0
example# 8911
define the method _has_changed with 3 arguments : self , initial and data .
0
example# 8912
if initial is None ,
0
example# 8913
initial is an empty list .
0
example# 8914
if data is None ,
0
example# 8915
data is an empty list .
0
example# 8916
if lengths of initial and data are equal ,
0
example# 8917
return boolean True .
0
example# 8918
initial_set is set created out of return values of the function force_text called with an argument value ,
0
example# 8919
for every value in result of the method self.prepare_value [ self . prepare_value ] called with an argument initial . data_set is set created out of return values of the function force_text called with an argument value ,
0
example# 8920
for every value in data . if data_set is not equal to initial_set return boolean True , otherwise return boolean False .
0
example# 8921
define the function modelform_defines_fields with an argument form_class .
0
example# 8922
only if form_class is not None , and if form_class has an attribute _STR:0_ and form_class._meta.fields [ form_class . _meta . fields ] is not None ,
1
'_meta' ||| _STR:0_
example# 8923
import module warnings .
0
example# 8924
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
0
example# 8925
call the function warnings.warn [ warnings . warn ] with 3 arguments : string _STR:0_
1
"The django.forms.util module has been renamed. " ||| _STR:0_
example# 8926
_STR:0_ , RemovedInDjango19Warning and stacklevel set to an integer 2. from django.forms.utils [ django . forms . utils ] import everything into default name space .
1
"Use django.forms.utils instead." ||| _STR:0_
example# 8927
from __future__ import unicode_literals into default name space .
0
example# 8928
import module json .
0
example# 8929
import module sys .
0
example# 8930
try ,
0
example# 8931
from collections import UserList into default namespace .
0
example# 8932
if ImportError exception is caught .
0
example# 8933
from UserList import UserList into default namespace .
0
example# 8934
from django.conf [ django . conf ] import settings into default name space .
0
example# 8935
from django.utils.encoding [ django . utils . encoding ] import force_text and python_2_unicode_compatible into default name space .
0
example# 8936
from django.utils.html [ django . utils . html ] import format_html , format_html_join and escape into default name space .
0
example# 8937
from django.utils [ django . utils ] import timezone into default name space .
0
example# 8938
from django.utils.translation [ django . utils . translation ] import ugettext_lazy as _ into default name space .
0
example# 8939
from django.utils [ django . utils ] import six into default name space .
0
example# 8940
from django.core.exceptions [ django . core . exceptions ] import ValidationError into default name space .
0
example# 8941
define the function flatatt with an argument attrs .
0
example# 8942
boolean_attrs is an empty list .
0
example# 8943
convert items of attrs dictionary to list of tuples , for every attr and value in it ,
0
example# 8944
if value is boolean True ,
0
example# 8945
append tuple containing element attr to boolean_attrs .
0
example# 8946
delete entry under the attr key of the attrs dictionary .
0
example# 8947
otherwise if value is boolean False ,
0
example# 8948
delete entry under the attr key of the attrs dictionary .
0
example# 8949
call the function format_html_join twice , first time with 3 elements : an empty string , string _STR:0_
1
' {0}="{1}"' ||| _STR:0_
example# 8950
and sorted return value of the items of the attrs dictionary , and second time with 3 arguments : an empty string , string _STR:0_ , and sorted list of boolean_attrs elements , concatenate the results and return the resulting list . python_2_unicode_compatible decorator ,
1
' {0}' ||| _STR:0_
example# 8951
derive the class ErrorDict from the dict base class .
0
example# 8952
define the method as_data with an argument self .
0
example# 8953
return a dictionary generated with an expression , return value of the method e.as_data [ e . as_data ] for f ,
0
example# 8954
for every f and e in list of tuples of self dictionary key , pair entries . define the method as_json with 2 argumens self and escape_html set to boolean False .
0
example# 8955
call the method json.dumps [ json . dumps ] with a dictionary generate with an expression as an argument , return value of the function e.get_json_data [ e . get_json_data ] ,
0
example# 8956
with an argument escape_html for f , for every f and e in list of tuples of self dictionary key , pair entries , return the result . define the method as_ul with an argument self .
0
example# 8957
if self is false ,
0
example# 8958
return an empty string .
0
example# 8959
call the function format_html with 2 arguments : string _STR:0_ , and return value of the function ,
1
'<ul class="errorlist">{0}</ul>' ||| _STR:0_
example# 8960
format_html_join , called with 3 arguments : empty string , string _STR:0_ , tuple containing tuples with 2 elements : k and result of the function force_text with an argument v , for every k and v in items of the dictionary self , return the result . define the method as_text with an argument self .
1
'<li>{0}{1}</li>' ||| _STR:0_
example# 8961
output is an empty list .
0
example# 8962
call the method self.items [ self . items ] , for every field and errors in the result .
0
example# 8963
convert field into a string and concatenate it to a string _STR:0_ , append the result to output .
1
'* ' ||| _STR:0_
example# 8964
for every e in errors convert e into a string and append it to a string _STR:0_ ,
1
'  * ' ||| _STR:0_
example# 8965
join all the results into a string separated by newlines , append the result to output . join elements of output into a string , separated by newline characters , return the result .
0
example# 8966
define the method __str__ with an argument self .
0
example# 8967
call the method self.as_ul [ self . as_ul ] , return the result .
0
example# 8968
python_2_unicode_compatible decorator ,
0
example# 8969
derive the class ErrorList from the UserList and list base classes .
0
example# 8970
define the method __init__ with 3 arguments : self , initlist set to None and error_class set to None .
0
example# 8971
call the method __init__ with an argument initlist from the base class of the class ErrorList .
0
example# 8972
if error_class is None ,
0
example# 8973
self.error_class [ self . error_class ] is a string _STR:0_ .
1
'errorlist' ||| _STR:0_
example# 8974
if not ,
0
example# 8975
append error_class converted into a string to string _STR:0_ , substitute the result for self.error_class [ self . error_class ] .
1
'errorlist ' ||| _STR:0_
example# 8976
define the method as_text with an argument self .
0
example# 8977
instantiate ValidationError class with an argument self.data [ self . data ] , return its field error_list .
0
example# 8978
define the method get_json_data with 2 arguments self and escape_html set to boolean False .
0
example# 8979
errors is an empty list .
0
example# 8980
call the method self.as_data [ self . as_data ] , for every error in the result .
0
example# 8981
convert elements of error into a list , substitute the first element for message .
0
example# 8982
append to errors list a dictionary created with 2 etries , if escape_html is true , return value of the function escape
0
example# 8983
with an argument message for _STR:0_ , or if not message for _STR:0_ and error.code [ error . code ] for _STR:1_ in error.code [ error . code ] is true , if not , an empty string for _STR:1_ . return errors .
2
'message' ||| _STR:0_
'code' ||| _STR:1_
example# 8984
define the method as_json with 2 arguments self and escape_html set to boolean False .
0
example# 8985
call the method self.get_json_data [ self . get_json_data ] with an argument escape_html ,
0
example# 8986
use the result as an argument for the call to the json.dumps [ json . dumps ] function , return the result . define the method as_text with an argument self .
0
example# 8987
if self.data [ self . data ] is false ,
0
example# 8988
return an empty string .
0
example# 8989
call the function format_html with 3 arguments : string _STR:0_ , self.error_class [ self . error_class ] and return value of the function ,
1
'<ul class="{0}">{1}</ul>' ||| _STR:0_
example# 8990
format_html_join , called with 3 arguments : empty string , string _STR:0_ , tuple containing results of the function , force_text with an argument e , for every e in self , return the result . define the method as_text with an argument self .
1
'<li>{0}</li>' ||| _STR:0_
example# 8991
for every e in self , append convert e to an string and append it to string _STR:0_ ,
1
'* ' ||| _STR:0_
example# 8992
join all of the results into a string separated by newline character , return the result . define the method __str__ with an argument self .
0
example# 8993
call the method self.as_ul [ self . as_ul ] , return the result .
0
example# 8994
define the method __repr__ with an argument self .
0
example# 8995
convert elements of self into a list , return the its printable representation .
0
example# 8996
define the method __contains__ with an argument self .
0
example# 8997
if item is contained in the list of the elements of self , return boolean True , otherwise return boolean False .
0
example# 8998
define the method __eq__ with an argument self .
0
example# 8999
if other equals list containing elements of self , return boolean True , otherwise return boolean False .
0
example# 9000
define the method __ne__ with an argument self .
0
example# 9001
if other is not equal to list containing elements of self , return boolean True , otherwise return boolean False .
0
example# 9002
define the method __getitem__ with an argument self .
0
example# 9003
substitute i-th element of self.data [ self . data ] for error .
0
example# 9004
if error is an instance of ValidationError ,
0
example# 9005
return first element of the list containing elements of error .
0
example# 9006
call the function force_text with an argument error , return the result .
0
example# 9007
define the function from_current_timezone with an argument value .
0
example# 9008
if settings.USE_TZ [ settings . USE_TZ ] is true and value is not None and call to the function timezone.is_naive [ timezone . is_naive ] with an argument value , evaluates to true ,
0
example# 9009
call the method timezone.get_current_timezone [ timezone . get_current_timezone ] , substitute the result for current_timezone .
0
example# 9010
try ,
0
example# 9011
call the function timezone.make_aware [ timezone . make_aware ] with arguments value and current_timezone , return the result .
0
example# 9012
if Exception exception is caught ,
0
example# 9013
call the function _ with an argument string _STR:0_
1
'%(datetime)s couldn\'t be interpreted in time zone %(current_timezone)s; it ' ||| _STR:0_
example# 9014
_STR:0_ , substitute the result for message . params is an dictionary containing 2 initial entries : value for _STR:1_ and current_timezone for _STR:2_ .
3
'may be ambiguous or it may not exist.' ||| _STR:0_
'datetime' ||| _STR:1_
'current_timezone' ||| _STR:2_
example# 9015
call the function six.reraise [ six . reraise ] with 3 arguments : class ValidationError , class ValidationError , created with 3 arguments :
0
example# 9016
message , code as a string _STR:0_ and params as params , and third element of the return value of the function sys.exc_info [ sys . exc_info ] . return value .
1
'ambiguous_timezone' ||| _STR:0_
example# 9017
define the function to_current_timezone with an argument value .
0
example# 9018
if settings.USE_TZ [ settings . USE_TZ ] is true and value is not None and call to the function timezone.is_aware [ timezone . is_aware ] with an argument value , evaluates to true ,
0
example# 9019
call the function timezone.get_current_timezone [ timezone . get_current_timezone ] , substitute the result for current_timezone .
0
example# 9020
call the function timezone.make_naive [ timezone . make_naive ] with 2 arguments value , current_timezone , return the result .
0
example# 9021
return value .
0
example# 9022
from __future__ import unicode_literals into default name space .
0
example# 9023
import module copy .
0
example# 9024
from itertools import chain into default name space .
0
example# 9025
from django.conf [ django . conf ] import settings into default name space .
0
example# 9026
from django.forms.utils [ django . forms . utils ] import flatatt and to_current_timezone into default name space .
0
example# 9027
from django.utils.datastructures [ django . utils . datastructures ] import MultiValueDict and MergeDict into default name space .
0
example# 9028
from django.utils.encoding [ django . utils . encoding ] import force_text and python_2_unicode_compatible into default name space .
0
example# 9029
from django.utils.html [ django . utils . html ] import conditional_escape and format_html into default name space .
0
example# 9030
from django.utils.translation [ django . utils . translation ] import ugettext_lazy into default name space .
0
example# 9031
from django.utils.safestring [ django . utils . safestring ] import mark_safe into default name space .
0
example# 9032
from django.utils [ django . utils ] import formats and six into default name space .
0
example# 9033
from django.utils.six.moves.urllib.parse [ django . utils . six . moves . urllib . parse ] import urljoin into default name space .
0
example# 9034
__all__ is a tuple of strings : _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ , _STR:5_ , _STR:6_ ,
7
'Media' ||| _STR:0_
'MediaDefiningClass' ||| _STR:1_
'EmailInput' ||| _STR:4_
'URLInput' ||| _STR:5_
'NumberInput' ||| _STR:6_
'Widget' ||| _STR:2_
'TextInput' ||| _STR:3_
example# 9035
_STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ , _STR:5_ , _STR:6_ , _STR:7_ , _STR:8_ , _STR:9_ , _STR:10_ , _STR:11_ , _STR:12_ , _STR:13_ , _STR:14_ , _STR:15_ , _STR:16_ and _STR:17_ . MEDIA_TYPES is a tuple with 2 strings : _STR:18_ and _STR:19_ .
20
'css' ||| _STR:18_
'DateInput' ||| _STR:5_
'TimeInput' ||| _STR:7_
'RadioSelect' ||| _STR:13_
'Textarea' ||| _STR:8_
'ClearableFileInput' ||| _STR:3_
'NullBooleanSelect' ||| _STR:11_
'CheckboxSelectMultiple' ||| _STR:14_
'SelectMultiple' ||| _STR:12_
'MultiWidget' ||| _STR:15_
'Select' ||| _STR:10_
'PasswordInput' ||| _STR:0_
'HiddenInput' ||| _STR:1_
'CheckboxInput' ||| _STR:9_
'js' ||| _STR:19_
'SplitDateTimeWidget' ||| _STR:16_
'MultipleHiddenInput' ||| _STR:2_
'SplitHiddenDateTimeWidget' ||| _STR:17_
'DateTimeInput' ||| _STR:6_
'FileInput' ||| _STR:4_
example# 9036
python_2_unicode_compatible decorator ,
0
example# 9037
derive the class Media from the object base class .
0
example# 9038
define the method __init__ with 3 arguments : self , media set to None and unpacked dictionary kwargs .
0
example# 9039
if media is true ,
0
example# 9040
substitute media.__dict__ [ media . __dict__ ] for media_attrs .
0
example# 9041
if not ,
0
example# 9042
substitute kwargs for media_attrs .
0
example# 9043
self._css [ self . _css ] is an empty dictionary .
0
example# 9044
self._js [ self . _js ] is an empty list .
0
example# 9045
for every name in MEDIA_TYPES ,
0
example# 9046
append name to string _STR:0_ use it as the name of the attribute to get from object self , call the result as an function ,
1
'add_' ||| _STR:0_
example# 9047
with an argument : value under the name key of the media_attrs dictionary , if it exists , if not use None as an argument . define the method __str__ with an argument self .
0
example# 9048
call the method self.render [ self . render ] , return the result .
0
example# 9049
define the method render with an argument self .
0
example# 9050
call the function chain with an argument unpacked list , append name to string _STR:0_ ,
1
'render_' ||| _STR:0_
example# 9051
and use it as the name of the attribute to get from the self object , call the result and append it to a list for every name in MEDIA_TYPES , join all the results into a string with newline separator , use the result as an argument for the call to the function mark_safe , return the result . define the method render_js with an argument self .
0
example# 9052
return a list containing results of the function format_html called with 2 arguments :
0
example# 9053
string _STR:0_ and absolute file path of the path , for every path is self._js [ self . _js ] . define the method render_css with an argument self .
1
'<script type="text/javascript" src="{0}"></script>' ||| _STR:0_
example# 9054
call the method self._css.keys [ self . _css . keys ] , sort the result and substitute it for media .
0
example# 9055
return the result of the call to the function chain , with an argument unpacked list , containing the result of the function ,
0
example# 9056
format_html called with 3 arguments : string _STR:0_ , return value of the function self.absolute_path [ self . absolute_path ] called with an argument path and medium , for every medium in media and for every path in value under the medium key of the self._css [ self . _css ] dictionary . define the method absolute_path with 3 arguments self , path and prefix set to None .
1
'<link href="{0}" type="text/css" media="{1}" rel="stylesheet" />' ||| _STR:0_
example# 9057
if path starts with string _STR:0_ or string _STR:1_ or with string _STR:2_ ,
3
'/' ||| _STR:2_
'https://' ||| _STR:1_
'http://' ||| _STR:0_
example# 9058
return path ,
0
example# 9059
if prefix is None ,
0
example# 9060
if settings.STATIC_URL [ settings . STATIC_URL ] is None ,
0
example# 9061
substitute settings.MEDIA_URL [ settings . MEDIA_URL ] for prefix .
0
example# 9062
if not ,
0
example# 9063
substitute settings.STATIC_URL [ settings . STATIC_URL ] for prefix .
0
example# 9064
join prefix and path into an url , return it .
0
example# 9065
define the method __getitem__ with arguments self and name .
0
example# 9066
if name is contained in MEDIA_TYPES ,
0
example# 9067
return an instance of the class Media , called with an unpacked dictionary with an entry : name appended to string _STR:0_ ,
1
'_' ||| _STR:0_
example# 9068
attribute of the self object for name converted into a string . raise an KeyError with an argument string _STR:0_ , where ' % s ' is replaced with name .
1
'Unknown media type "%s"' ||| _STR:0_
example# 9069
define the method __getitem__ with arguments self and name .
0
example# 9070
if data is true ,
0
example# 9071
for every path in data ,
0
example# 9072
if path is not contained in self._js [ self . _js ] ,
0
example# 9073
append path to self._js [ self . _js ] .
0
example# 9074
define the method add_css with arguments self and data .
0
example# 9075
if data is true ,
0
example# 9076
call the method data.items [ data . items ] , for every medium and paths in the result .
0
example# 9077
for every path in paths ,
0
example# 9078
if call to the method self._css.get [ self . _css . get ] with an argument medium evaluates to false ,
0
example# 9079
or path is not contained in the value under the medium key of self._css [ self . _css ] dictionary . call the method self._css.setdefault [ self . _css . setdefault ] with 2 arguments medium and an empty string , append path to the result .
0
example# 9080
define the method __add__ with arguments self and other .
0
example# 9081
combined is an instance of Media class .
0
example# 9082
for every name in MEDIA_TYPES ,
0
example# 9083
append name to _STR:0_ use it as the name of the attribute to get from combined object , call the result with an argument :
1
'add_' ||| _STR:0_
example# 9084
name appended to string _STR:0_ , as the name of the attribute to get from self object , or if the previous doesnt exist , None . append name to _STR:1_ use it as the name of the attribute to get from combined object , call the result with an argument :
2
'add_' ||| _STR:1_
'_' ||| _STR:0_
example# 9085
name appended to string _STR:0_ , as the name of the attribute to get from other object , or if the previous doesnt exist , None . return combined .
1
'_' ||| _STR:0_
example# 9086
define the function media_property with an argument cls .
0
example# 9087
define the method _media with an argument self .
0
example# 9088
sup_cls is base class of the class cls .
0
example# 9089
try ,
0
example# 9090
substitute sup_cls.media [ sup_cls . media ] for base .
0
example# 9091
if AttributeError exception is caught ,
0
example# 9092
base is an instance of Media class .
0
example# 9093
get the attribute _STR:0_ of the cls object , if it exists substitute it for definition , if not definition is None .
1
'Media' ||| _STR:0_
example# 9094
if definition is true ,
0
example# 9095
get the attribute _STR:0_ of the cls object , if it exists substitute it for extend , if not extend is boolean True .
1
'extend' ||| _STR:0_
example# 9096
if extend is true ,
0
example# 9097
if extend is boolean True ,
0
example# 9098
substitute base for m .
0
example# 9099
if not ,
0
example# 9100
m is an instance of Media class .
0
example# 9101
for every medium in extend ,
0
example# 9102
sum m and value under the medium key of the base dictionary , substitute it for m .
0
example# 9103
sum m and class Media created with definition , return the result .
0
example# 9104
if not ,
0
example# 9105
return an instance of Media class , created with definition as an argument .
0
example# 9106
if not ,
0
example# 9107
return base .
0
example# 9108
return property object with _media as getter function .
0
example# 9109
derive the class MediaDefiningClass from the type base class .
0
example# 9110
define the method __new__ with 4 arguments mcs , name , bases and attrs .
0
example# 9111
call the method __new__ from the base class of the class MediaDefiningClass , called with 4 arguments : mcs , name , bases and attrs .
0
example# 9112
if _STR:0_ is not contained in attrs ,
1
'media' ||| _STR:0_
example# 9113
call the method media_property with an argument new_class , substitute the result for new_class.media [ new_class . media ] .
0
example# 9114
return new_class .
0
example# 9115
python_2_unicode_compatible decorator
0
example# 9116
derive the class SubWidget from the object base class .
0
example# 9117
define the method __init__ with 6 arguments self , parent_widget , name , value , attrs and choices .
0
example# 9118
substitute parent_widget for self.parent_widget [ self . parent_widget ] .
0
example# 9119
substitute name and value for self.name [ self . name ] and self.value [ self . value ] .
0
example# 9120
substitute attrs and choices for self.attrs [ self . attrs ] and self.choices [ self . choices ]
0
example# 9121
define the method __str__ with an argument self .
0
example# 9122
args is an list with 3 initial elements self.name [ self . name ] , self.value [ self . value ] and self.attrs [ self . attrs ] .
0
example# 9123
if self.choices [ self . choices ] is true ,
0
example# 9124
append self.choices [ self . choices ] to args .
0
example# 9125
call the method self.parent_widget.render [ self . parent_widget . render ] with unpacked list args as an argument , return the result .
0
example# 9126
derive the class Widget from the base class in the return value of the six.with_metaclass [ six . with_metaclass ] called with an argument MediaDefiningClass .
0
example# 9127
needs_multipart_form is boolean False .
0
example# 9128
is_localized is boolean False .
0
example# 9129
is_required is boolean False .
0
example# 9130
define the method __init__ with arguments self and attrs set to None .
0
example# 9131
if attrs is not None ,
0
example# 9132
call the method attrs.copy [ attrs . copy ] , substitute the result for self.attrs [ self . attrs ] .
0
example# 9133
if not ,
0
example# 9134
self.attrs [ self . attrs ] is an empty dictionary .
0
example# 9135
define the method __deepcopy__ with arguments self and memo .
0
example# 9136
call the method copy.copy [ copy . copy ] , substitute the result for obj .
0
example# 9137
call the method self.attrs.copy [ self . attrs . copy ] , substitute the result for obj.attrs [ obj . attrs ] .
0
example# 9138
substitute obj for the value of the memo dictionary at the identity of the self object key .
0
example# 9139
return obj .
0
example# 9140
property decorator ,
0
example# 9141
define the method is_hidden with an argument self .
0
example# 9142
if self.input_type [ self . input_type ] equals string _STR:0_ and self has an attribute _STR:1_ , return boolean True , otherwise return boolean False .
2
'hidden' ||| _STR:0_
'input_type' ||| _STR:1_
example# 9143
define the method subwidgets with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple .
0
example# 9144
yield an instance of SubWidget class created with 5 arguments : self , name , value , attrs and choices .
0
example# 9145
define the method render with 4 arguments : self , name , value and attrs set to None .
0
example# 9146
raise an NotImplementedError with an argument string _STR:0_ .
1
'subclasses of Widget must provide a render() method' ||| _STR:0_
example# 9147
define the method build_attrs with 3 arguments : self , extra_attrs set to None and unpacked dictionary kwargs .
0
example# 9148
unpack dictionary kwargs , map it through self.attrs [ self . attrs ] and convert to dictionary , substitute the result for attrs .
0
example# 9149
if extra_attrs is true ,
0
example# 9150
update attrs dictionary with extra_attrs entry .
0
example# 9151
return attrs .
0
example# 9152
define the method render with 4 arguments : self , name , value and attrs set to None .
0
example# 9153
get the value under the name key of the data dictionary , return it , if the previous doesnt exists , return None .
0
example# 9154
define the method id_for_label with 2 arguments : self and id .
0
example# 9155
return id_ .
0
example# 9156
derive the class Input from the Widget base class .
0
example# 9157
input_type is None .
0
example# 9158
define the method _format_value with 2 arguments : self and value .
0
example# 9159
if self.is_localized [ self . is_localized ] is true ,
0
example# 9160
call the method formats.localize_input [ formats . localize_input ] with an argument value , return the result .
0
example# 9161
return value .
0
example# 9162
define the method render with 4 arguments : self , name , value and attrs set to None .
0
example# 9163
if value is None ,
0
example# 9164
value is an empty string .
0
example# 9165
call the method self.build_attrs [ self . build_attrs ] with 3 arguments : attrs , type as self.input_type [ self . input_type ] , name as name , substitute the result for final_attrs .
0
example# 9166
if value is not equal to an empty string ,
0
example# 9167
call the method self._format_value [ self . _format_value ] with an argument value , use the result as an argument for the call to the function force_text ,
0
example# 9168
substitute the result for final_attrs dictionary value under the _STR:0_ key . call the function format_html with 2 arguments : string _STR:1_ ,
2
'value' ||| _STR:0_
'<input{0} />' ||| _STR:1_
example# 9169
result of the function flatatt called with an argument final_attrs , return the result . derive the class TextInput from the Input base class .
0
example# 9170
input_type is a string _STR:0_ .
1
'text' ||| _STR:0_
example# 9171
define the method __init__ with 2 arguments : self and attrs set to None .
0
example# 9172
if attrs is not None ,
0
example# 9173
remover the entry under the _STR:0_ key of the attrs dictionary , substitute it for self.input_type [ self . input_type ] , if the key doesnt exists ,
1
'type' ||| _STR:0_
example# 9174
substitute self.input_type [ self . input_type ] for self.input_type [ self . input_type ] . call the method __init__ from the base class of the class TextInput , called with an argument attrs .
0
example# 9175
derive the class NumberInput from the TextInput base class .
0
example# 9176
input_type is a string _STR:0_ .
1
'number' ||| _STR:0_
example# 9177
derive the class EmailInput from the TextInput base class .
0
example# 9178
input_type is a string _STR:0_ .
1
'email' ||| _STR:0_
example# 9179
derive the class URLInput from the TextInput base class .
0
example# 9180
input_type is a string _STR:0_ .
1
'url' ||| _STR:0_
example# 9181
derive the class PasswordInput from the TextInput base class .
0
example# 9182
input_type is a string _STR:0_ .
1
'password' ||| _STR:0_
example# 9183
define the method __init__ with 3 arguments : self , attrs set to None and render_value set to boolean False .
0
example# 9184
call the method __init__ from the base class of the class PasswordInput , called with an argument attrs .
0
example# 9185
substitute render_value for self.render_value [ self . render_value ] .
0
example# 9186
define the method render with 4 arguments : self , name , value and attrs set to None .
0
example# 9187
if self.render_value [ self . render_value ] is false ,
0
example# 9188
value is None .
0
example# 9189
call the method render from the base class of the class PasswordInput , called with 3 arguments : name , value and attrs ,
0
example# 9190
return the result . derive the class HiddenInput from the Input base class .
0
example# 9191
input_type is a string _STR:0_ .
1
'hidden' ||| _STR:0_
example# 9192
derive the class MultipleHiddenInput from the HiddenInput base class .
0
example# 9193
define the method __init__ with 3 arguments : self , attrs set to None and choices set to an empty tuple .
0
example# 9194
call the method __init__ from the base class of the class MultipleHiddenInput , called with an argument attrs .
0
example# 9195
substitute choices for self.choices [ self . choices ] .
0
example# 9196
define the method render with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple .
0
example# 9197
if value is None ,
0
example# 9198
value is an empty list .
0
example# 9199
call the method self.build_attrs [ self . build_attrs ] with 3 arguments : attrs , type set to self.input_type [ self . input_type ] , name set to name ,
0
example# 9200
substitute the result for final_attrs . get the value under the _STR:0_ key of final_attrs dictionary , substitute if for id_ if the key doesnt exists , id_ is None .
1
'id' ||| _STR:0_
example# 9201
inputs is an empty list .
0
example# 9202
for every i and v in enumerated iterable value ,
0
example# 9203
unpack dictionary final_attrs , map the values through force_text function with an argument v and convert it to a dictionary , again ,
0
example# 9204
substitute the result input_attrs . if id_ ,
0
example# 9205
replace ' % s ' in string _STR:0_ with id_ and i , substitute the result for input_attrs dictionary value under the _STR:1_ key .
2
'%s_%s' ||| _STR:0_
'id' ||| _STR:1_
example# 9206
call the function format_html with 2 arguments : string _STR:0_ , return value of the function flatatt , called with an argument ,
1
'<input{0} />' ||| _STR:0_
example# 9207
input_attrs , append the result to inputs list . join inputs elements into a string , separated with newline character , use it as an argument for the call to the function mark_safe ,
0
example# 9208
return the result . define the method value_from_datadict with 4 arguments : self , data , files and name .
0
example# 9209
if data is an instance of MultiValueDict or MergeDict class ,
0
example# 9210
call the method data.getlist [ data . getlist ] with an argument name , return the result .
0
example# 9211
return value under the name key of the data dictionary , if it doesnt exists , return None .
0
example# 9212
derive the class FileInput from the Input base class .
0
example# 9213
input_type is a string _STR:0_ .
1
'file' ||| _STR:0_
example# 9214
needs_multipart_form is boolean True .
0
example# 9215
define the method render with 4 arguments : self , name , value and attrs set to None .
0
example# 9216
call the method render from the base class of the class FileInput , called with 3 arguments : name , None and attrs as attrs .
0
example# 9217
define the method value_from_datadict with 4 arguments : self , data , files and name .
0
example# 9218
return value under the name key of the files dictionary , if it doesnt exists , return None .
0
example# 9219
FILE_INPUT_CONTRADICTION is an instance of object class .
0
example# 9220
derive the class ClearableFileInput from the FileInput base class .
0
example# 9221
call the function ugettext_lazy with an argument string _STR:0_ , substitute the result for initial_text .
1
'Currently' ||| _STR:0_
example# 9222
call the function ugettext_lazy with an argument string _STR:0_ , substitute the result for input_text .
1
'Change' ||| _STR:0_
example# 9223
call the function ugettext_lazy with an argument string _STR:0_ , substitute the result for clear_checkbox_label .
1
'Clear' ||| _STR:0_
example# 9224
template_with_initial is a string _STR:0_ .
1
'%(initial_text)s: %(initial)s %(clear_template)s<br />%(input_text)s: %(input)s' ||| _STR:0_
example# 9225
template_with_clear is a string _STR:0_ .
1
'%(clear)s <label for="%(clear_checkbox_id)s">%(clear_checkbox_label)s</label>' ||| _STR:0_
example# 9226
url_markup_template is a string _STR:0_ .
1
'<a href="{0}">{1}</a>' ||| _STR:0_
example# 9227
define the method clear_checkbox_name with 2 arguments : self and name .
0
example# 9228
concatenate name and string _STR:0_ , return it .
1
'-clear' ||| _STR:0_
example# 9229
define the method clear_checkbox_id with 2 arguments : self and name .
0
example# 9230
concatenate name and string _STR:0_ , return it .
1
'_id' ||| _STR:0_
example# 9231
define the method render with 4 arguments : self , name , value and attrs set to None .
0
example# 9232
substitutions is a dictionary with 4 initial entries : self.initial_text [ self . initial_text ] for _STR:0_ , self.input_text [ self . input_text ] for _STR:1_ ,
2
'input_text' ||| _STR:1_
'initial_text' ||| _STR:0_
example# 9233
an empty string for _STR:0_ and self.clear_checkbox_label [ self . clear_checkbox_label ] for _STR:1_ . template is a string _STR:2_ .
3
'%(input)s' ||| _STR:2_
'clear_template' ||| _STR:0_
'clear_checkbox_label' ||| _STR:1_
example# 9234
call the method render from the base class of the class ClearableFileInput , called with 3 arguments : name , value and attrs ,
0
example# 9235
substitute the result for value under the _STR:0_ key of the substitutions dictionary . if value is true and value has an attribute _STR:1_ ,
2
'input' ||| _STR:0_
'url' ||| _STR:1_
example# 9236
substitute self.template_with_initial [ self . template_with_initial ] for template .
0
example# 9237
call the function format_html with 3 arguments : self.url_markup_template [ self . url_markup_template ] , value.url [ value . url ] and return value of the function force_text ,
0
example# 9238
called with an argument value , substitute the result for value under the _STR:0_ key of the substitutions dictionary . if self.is_required [ self . is_required ] is false ,
1
'initial' ||| _STR:0_
example# 9239
call the method self.clear_checkbox_name [ self . clear_checkbox_name ] with an argument name , substitute the result for checkbox_name .
0
example# 9240
call the method self.clear_checkbox_id [ self . clear_checkbox_id ] with an argument checkbox_name , substitute the result for checkbox_id .
0
example# 9241
call the function conditional_escape with an argument checkbox_name ,
0
example# 9242
substitute the result for value under the _STR:0_ key of the substitutions dictionary . call the function conditional_escape with an argument checkbox_id ,
1
'clear_checkbox_name' ||| _STR:0_
example# 9243
substitute the result for value under the _STR:0_ key of the substitutions dictionary . call the method render from the instance of CheckboxInput class , with 3 arguments : checkbox_name , boolean False ,
1
'clear_checkbox_id' ||| _STR:0_
example# 9244
attrs as a dictionary with an entry : checkbox_id for _STR:0_ , substitute the result for value under the _STR:1_ key of the substitutions dictionary . format self.template_with_clear [ self . template_with_clear ] with substitutions , substitute the result for value under the _STR:2_ key of ,
3
'clear' ||| _STR:1_
'id' ||| _STR:0_
'clear_template' ||| _STR:2_
example# 9245
substitutions dictionary . call the function mark_safe with an argument template , formated with substitutions , return the result .
0
example# 9246
define the method value_from_datadict with 4 arguments : self , data , files and name .
0
example# 9247
call the method value_from_datadict from the base class of the class ClearableFileInput ,
0
example# 9248
called with 3 arguments : data , files and name , substitute the result for upload . if self.is_required [ self . is_required ] is boolean false and call to the method value_from_datadict from the instance of CheckboxInput class ,
0
example# 9249
with 3 arguments : data , files and return value of the function self.clear_checkbox_name [ self . clear_checkbox_name ] called with an argument name , evaluates to true , if upload is true ,
0
example# 9250
return FILE_INPUT_CONTRADICTION .
0
example# 9251
return boolean False .
0
example# 9252
return boolean upload .
0
example# 9253
derive the class Textarea from the Widget base class .
0
example# 9254
define the method __init__ with 2 arguments : self and attrs set to None .
0
example# 9255
default_attrs is an dictionary with 2 initial entries : string _STR:0_ for _STR:1_ and string _STR:2_ for _STR:3_ .
4
'rows' ||| _STR:3_
'40' ||| _STR:0_
'10' ||| _STR:2_
'cols' ||| _STR:1_
example# 9256
if attrs is true ,
0
example# 9257
update default_attrs dictionary with attrs entry .
0
example# 9258
call the method __init__ from the base class of the class Textarea , with an argument default_attrs .
0
example# 9259
define the method render with 4 arguments : self , name , value and attrs set to None .
0
example# 9260
if value is None ,
0
example# 9261
value is an empty string .
0
example# 9262
call the method self.build_attrs [ self . build_attrs ] with 2 arguments : attrs and name set to name , substitute the result for final_attrs .
0
example# 9263
call the function format_html with 3 arguments : string ( _STR:0_ , return value of the function flatatt ,
1
'<textarea{0}>\r\n{1}</textarea>' ||| _STR:0_
example# 9264
called with an argument final_attrs and return value of the function force_text called with an argument value , return the result . derive the class DateTimeBaseInput from the TextInput base class .
0
example# 9265
format key is an empty string .
0
example# 9266
supports_microseconds is boolean False .
0
example# 9267
define the method __init__ with 3 arguments : self , attrs set to None and format is None .
0
example# 9268
call the method __init__ from the base class of the class DateTimeBaseInput , with an argument attrs .
0
example# 9269
substitute format for self.format [ self . format ] if format is true , if not self.format [ self . format ] is None .
0
example# 9270
define the method _format_value with 2 arguments : self and value .
0
example# 9271
call the function formats.localize_input [ formats . localize_input ] with 2 arguments : value and self.format [ self . format ] if true , if not ,
0
example# 9272
then the first element of the result of the function formats.get_format [ formats . get_format ] called with an argument self.format_key [ self . format_key ] , return the result . derive the class DateInput from the DateTimeBaseInput base class .
0
example# 9273
format_key is a string _STR:0_ .
1
'DATE_INPUT_FORMATS' ||| _STR:0_
example# 9274
derive the class DateTimeInput from the DateTimeBaseInput base class .
0
example# 9275
format_key is a string _STR:0_ .
1
'DATETIME_INPUT_FORMATS' ||| _STR:0_
example# 9276
derive the class TimeInput from the DateTimeBaseInput base class .
0
example# 9277
format_key is a string _STR:0_ .
1
'TIME_INPUT_FORMATS' ||| _STR:0_
example# 9278
define the function boolean_check with an argument v .
0
example# 9279
if v is boolean False or v is None or v is an empty string , return boolean False , otherwise return boolean True .
0
example# 9280
derive the class CheckboxInput from the Widget base class .
0
example# 9281
define the method __init__ with 3 arguments : self , attrs set to None and check_test set to None .
0
example# 9282
call the method __init__ from the base class of the class CheckboxInput , with an argument attrs .
0
example# 9283
substitute boolean_check for self.check_test [ self . check_test ] if check_test is None , otherwise substitute check_test for self.check_test [ self . check_test ] .
0
example# 9284
define the method render with 4 arguments : self , name , value and attrs set to None .
0
example# 9285
call the method self.build_attrs [ self . build_attrs ] with 3 arguments : attrs , type as a string _STR:0_ , name as name , substitute the result for final_attrs .
1
'checkbox' ||| _STR:0_
example# 9286
call the method self.check_test [ self . check_test ] with an argument value , if it evaluates to true ,
0
example# 9287
substitute string _STR:0_ for value under the _STR:0_ key of final_attrs dictionary .
1
'checked' ||| _STR:0_
example# 9288
if value is boolean False or boolean True or value is None or value is an empty string , do not perform the following ,
0
example# 9289
call the function force_text with an argument value , substitute the result for value under the _STR:0_ key of the final_attrs .
1
'value' ||| _STR:0_
example# 9290
return the result of the function format_html called with 2 arguments : string _STR:0_ ,
1
'<input{0} />' ||| _STR:0_
example# 9291
and result of the function flatatt , called with an argument final_attrs . define the method value_from_datadict with 4 arguments : self , data , files and name .
0
example# 9292
if name is not contained in data ,
0
example# 9293
return boolean False .
0
example# 9294
get the name key of the data dictionary , substitute it for value .
0
example# 9295
values is an dictionary with 2 arguments : boolean False for _STR:0_ and boolean True for _STR:1_ .
2
'false' ||| _STR:0_
'true' ||| _STR:1_
example# 9296
if value is an instance of six.string_types [ six . string_types ] class ,
0
example# 9297
get the value of the values dictionary under the value converted to lowercase key , substitute it for value , if the key doesnt exists ,
0
example# 9298
substitute value for value . return value converted into a boolean .
0
example# 9299
derive the class Select from the Widget base class .
0
example# 9300
allow_multiple_selected is boolean False .
0
example# 9301
define the method __init__ with 3 arguments : self , attrs set to None and choices set to an empty tuple .
0
example# 9302
call the method __init__ from the base class of the class Select , with an argument attrs .
0
example# 9303
convert elements of choices into a list , substitute it for self.choices [ self . choices ] .
0
example# 9304
define the method render with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple .
0
example# 9305
if value is None ,
0
example# 9306
value is an empty string .
0
example# 9307
call the method self.build_attrs [ self . build_attrs ] with arguments attrs , name as name , substitute the result for final_attrs .
0
example# 9308
output is a list containing an element : result of the function format_html called with 2 arguments : string _STR:0_ ,
1
'<select{0}>' ||| _STR:0_
example# 9309
and return value of the function flatatt called with an argument final_attrs , substitute the result for output . call the method self.render_options [ self . render_options ] with 2 arguments : choices and list with an entry , value , substitute the result for options .
0
example# 9310
if options is true ,
0
example# 9311
append options to output .
0
example# 9312
append string _STR:0_ to output .
1
'</select>' ||| _STR:0_
example# 9313
join elements of output into a string , separated by newline characters , use it as the argument for the call the function mark_safe ,
0
example# 9314
return the result . define the method render_option with 4 arguments : self , selected_choices , option_value and option_label .
0
example# 9315
if option_value is None ,
0
example# 9316
option_value is an empty string .
0
example# 9317
call the function force_text with an argument option_value , substitute the result for option_value .
0
example# 9318
if option_value is contained in selected_choices ,
0
example# 9319
call the function mark_safe with an argument string _STR:0_ , substitute the result for selected_html .
1
' selected="selected"' ||| _STR:0_
example# 9320
if self.allow_multiple_selected [ self . allow_multiple_selected ] is false ,
0
example# 9321
call the method selected_choices.remove [ selected_choices . remove ] with an argument option_value .
0
example# 9322
if not ,
0
example# 9323
selected_html is an empty string .
0
example# 9324
call the function format_html with 4 arguments : string _STR:0_ , option_value , selected_html ,
1
'<option value="{0}"{1}>{2}</option>' ||| _STR:0_
example# 9325
result of the function force_text with an argument option_label , return the result . define the method render_options with 3 arguments : self , choices and selected_choices .
0
example# 9326
call the function force_text with an argument v , for every v in selected_choices , add results to a set ,
0
example# 9327
substitute the resulting set for selected_choices . output is an empty list .
0
example# 9328
call the function chain with arguments self.choices [ self . choices ] and choices , for every option_value and option_label in the result ,
0
example# 9329
if option_label is an instance of list or tuple ,
0
example# 9330
call the function format_html with 2 arguments : string _STR:0_ and return value of the function force_text ,
1
'<optgroup label="{0}">' ||| _STR:0_
example# 9331
called with an argument option_value , append the result to output . for every option in option_label ,
0
example# 9332
call the method self.render_option [ self . render_option ] with 2 arguments : selected_choices and unpacked list option , append the result to output .
0
example# 9333
append string _STR:0_ to output .
1
'</optgroup>' ||| _STR:0_
example# 9334
if not ,
0
example# 9335
call the method self.render_option [ self . render_option ] with 3 arguments : selected_choices , option_value and option_label , append the result to output .
0
example# 9336
join elements of output in a string , separated by newlines , return it .
0
example# 9337
derive the class NullBooleanSelect from the Select base class .
0
example# 9338
define the method __init__ with 2 arguments : self and attrs set to None .
0
example# 9339
choices is a tuple with 3 elements : tuple with 2 elements : string _STR:0_ and return value of the function ugettext_lazy ,
1
'1' ||| _STR:0_
example# 9340
called with an argument string _STR:0_ , tuple with 2 elements : string _STR:1_ and return value of the function ugettext_lazy , called with an argument string _STR:2_ and tuple with 2 elements : string _STR:3_ and return value of the function ugettext_lazy , called with an argument string _STR:4_ . call the method __init__ from the base class of the class NullBooleanSelect , with arguments attrs and choices .
5
'2' ||| _STR:1_
'Yes' ||| _STR:2_
'No' ||| _STR:4_
'3' ||| _STR:3_
'Unknown' ||| _STR:0_
example# 9341
define the method render with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple .
0
example# 9342
try ,
0
example# 9343
get the value under value key of a dictionary with 4 entries : _STR:0_ for boolean True , _STR:1_ for boolean False , _STR:0_ for _STR:0_ ,
2
'2' ||| _STR:0_
'3' ||| _STR:1_
example# 9344
and _STR:0_ for _STR:0_ , substitute it for value . if KeyError exception is caught ,
1
'3' ||| _STR:0_
example# 9345
value is an string _STR:0_ .
1
'1' ||| _STR:0_
example# 9346
call the method render from the base class of the class NullBooleanSelect , with 4 arguments : name , value , attrs and choices ,
0
example# 9347
return the result . define the method value_from_datadict with 4 arguments : self , data , files and name .
0
example# 9348
get the value under the name key of the data dictionary , if it exists substitute it for value , if not , value is None .
0
example# 9349
get the value under the value key of a dictionary with 6 entries : boolean True for _STR:0_ , boolean True for boolean True ,
1
'2' ||| _STR:0_
example# 9350
boolean True for _STR:0_ , boolean False for _STR:1_ , boolean False for _STR:2_ and boolean False for boolean False , return it if the key exists , if not return None . derive the class SelectMultiple from the Select base class .
3
'False' ||| _STR:2_
'True' ||| _STR:0_
'3' ||| _STR:1_
example# 9351
allow_multiple_selected is boolean True .
0
example# 9352
define the method render with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple .
0
example# 9353
if value is None ,
0
example# 9354
value is an empty list .
0
example# 9355
call the method self.build_attrs [ self . build_attrs ] with 2 arguments : attrs and name set to name , substitute the result for final_attrs .
0
example# 9356
output is a list containing an entry : result of the function format_html called with 2 arguments :
0
example# 9357
string _STR:0_ and result of the function flatatt called with an argument final_attrs . call the method self.render_options [ self . render_options ] with 2 arguments : choices and value , substitute the result for options .
1
'<select multiple="multiple"{0}>' ||| _STR:0_
example# 9358
if options is true ,
0
example# 9359
append options to output .
0
example# 9360
append string _STR:0_ to output .
1
'</select>' ||| _STR:0_
example# 9361
join elements of output into a string , separated with newline character ,
0
example# 9362
use it as an argument for the call to the mark_safe function , return the result . define the method value_from_datadict with 4 arguments : self , data , files and name .
0
example# 9363
if data is an instance of MultiValueDict or MergeDict ,
0
example# 9364
call the method data.getlist [ data . getlist ] with an argument name , return the result .
0
example# 9365
get the value under the name key of the data dictionary , if it exists return it , if not return None .
0
example# 9366
python_2_unicode_compatible decorator ,
0
example# 9367
derive the class ChoiceInput from the SubWidget base class .
0
example# 9368
input_type is None .
0
example# 9369
define the method __init__ with 6 arguments : self , name , value , attrs , choice and index .
0
example# 9370
substitute name for self.name [ self . name ] .
0
example# 9371
substitute value for self.value [ self . value ] .
0
example# 9372
substitute attrs for self.attrs [ self . attrs ] .
0
example# 9373
call the function force_text with first element of choice as an argument , substitute the result for self.choice_value [ self . choice_value ] .
0
example# 9374
call the function force_text with second element of choice as an argument , substitute the result for self.choice_label [ self . choice_label ] .
0
example# 9375
substitute index for self.index [ self . index ] .
0
example# 9376
if string _STR:0_ is contained in self.attrs [ self . attrs ] ,
1
'id' ||| _STR:0_
example# 9377
convert self.index [ self . index ] into a string and append it to _STR:0_ string , substitute it for value under the _STR:1_ key of self.attrs [ self . attrs ] dictionary .
2
'_' ||| _STR:0_
'id' ||| _STR:1_
example# 9378
define the method __str__ with an argument self .
0
example# 9379
call the method self.render [ self . render ] , return the result .
0
example# 9380
define the method render with 5 arguments : self , name set to None , value set to None , attrs set to None and choices set to an empty tuple .
0
example# 9381
self.id_for_label [ self . id_for_label ] is true ,
0
example# 9382
call the function format_html with 2 arguments : string _STR:0_ and self.id_for_label [ self . id_for_label ] , substitute the result for label_for .
1
' for="{0}"' ||| _STR:0_
example# 9383
if not ,
0
example# 9384
label_for is an empty string .
0
example# 9385
call the function format_html with 4 arguments : string _STR:0_ , label_for , result of the method self.tag [ self . tag ] ,
1
'<label{0}>{1} {2}</label>' ||| _STR:0_
example# 9386
and self.choice_label [ self . choice_label ] , return the result . define the method is_checked with an argument self .
0
example# 9387
if self.value [ self . value ] equals self.choice_value [ self . choice_value ] , return boolean True , if not , return boolean False .
0
example# 9388
define the method tag with an argument self .
0
example# 9389
call the method dict with 4 : self.attrs [ self . attrs ] , type as self.input_type [ self . input_type ] , name as self.name [ self . name ] , value as self.choice_value [ self . choice_value ] ,
0
example# 9390
substitute the result for final_attrs . call the method self.is_checked [ self . is_checked ] , if it evaluates to true ,
0
example# 9391
substitute string _STR:0_ for value under the _STR:0_ key of final_attrs dictionary .
1
'checked' ||| _STR:0_
example# 9392
call the function format_html with 2 arguments : string _STR:0_ and result of the function flatatt ,
1
'<input{0} />' ||| _STR:0_
example# 9393
called with an argument final_attrs , return the result . property decorator ,
0
example# 9394
define the method id_for_label with an argument self .
0
example# 9395
get the value under the _STR:0_ key of the self.attrs [ self . attrs ] dictionary , return it , if the key doesnt exists return an empty string .
1
'id' ||| _STR:0_
example# 9396
derive the class RadioChoiceInput from the ChoiceInput base class .
0
example# 9397
input_type is a string _STR:0_ .
1
'radio' ||| _STR:0_
example# 9398
define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
0
example# 9399
call the method __init__ from the base class of the class RadioChoiceInput , with 2 arguments : unpacked list args ,
0
example# 9400
and unpacked dictionary kwargs . call the function force_text with an argument self.value [ self . value ] , substitute the result for self.value [ self . value ] .
0
example# 9401
derive the class CheckboxChoiceInput from the ChoiceInput base class .
0
example# 9402
input_type is a string _STR:0_ .
1
'checkbox' ||| _STR:0_
example# 9403
define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
0
example# 9404
call the method __init__ from the base class of the class CheckboxChoiceInput , with 2 arguments : unpacked list args ,
0
example# 9405
and unpacked dictionary kwargs . for every v in self.value [ self . value ] call the function force_text with an argument v , add the result to a set ,
0
example# 9406
substitute set of the results for self.value [ self . value ] . define the method is_checked with an argument self .
0
example# 9407
if self.choice_value [ self . choice_value ] is contained in self.value [ self . value ] return boolean True , otherwise return boolean False .
0
example# 9408
python_2_unicode_compatible decorator ,
0
example# 9409
derive the class ChoiceFieldRenderer from the object base class .
0
example# 9410
choice_input_class is None .
0
example# 9411
outer_html is a string _STR:0_ .
1
'<ul{id_attr}>{content}</ul>' ||| _STR:0_
example# 9412
inner_html is a string _STR:0_ .
1
'<li>{choice_value}{sub_widgets}</li>' ||| _STR:0_
example# 9413
define the method __init__ with 5 arguments : self , name , value , attrs and choices .
0
example# 9414
substitute name for self.name [ self . name ] .
0
example# 9415
substitute value for self.value [ self . value ] .
0
example# 9416
substitute attrs for self.attrs [ self . attrs ] .
0
example# 9417
substitute choices for self.choices [ self . choices ] .
0
example# 9418
define the method __getitem__ with 2 arguments : self and idx .
0
example# 9419
substitute idx-th element of self.choices [ self . choices ] for choice .
0
example# 9420
call the method self.choice_input_class [ self . choice_input_class ] with 5 arguments : self.name [ self . name ] , self.value [ self . value ] , result of the method self.attrs.copy [ self . attrs . copy ] ,
0
example# 9421
choice and idx , return the result . define the method __str__ with an argument self .
0
example# 9422
call the method self.render [ self . render ] , return the result .
0
example# 9423
define the method render with an argument self .
0
example# 9424
get the value under the _STR:0_ key of the self.attrs [ self . attrs ] dictionary , substitute it for id_ if the key exists , if not id_ is None .
1
'id' ||| _STR:0_
example# 9425
output is an empty list .
0
example# 9426
for every i and choice in enumerated iterable self.choices [ self . choices ] ,
0
example# 9427
substitute choice for choice_value and choice_label , respectively .
0
example# 9428
if choice_label is an instance of tuple or list ,
0
example# 9429
call the method self.attrs.copy [ self . attrs . copy ] , substitute the result for attrs_plus .
0
example# 9430
if id_ is true ,
0
example# 9431
prepend string _STR:0_ to i converted to an string , append the result to the value under the _STR:1_ key of the attrs_plus .
2
'_' ||| _STR:0_
'id' ||| _STR:1_
example# 9432
sub_ul_renderer is an instance of ChoiceFieldRenderer class , created with 4 arguments : name as self.name [ self . name ] , value as self.value [ self . value ] ,
0
example# 9433
attrs as attrs_plus and choices as choice_label . substitute self.choice_input_class [ self . choice_input_class ] for sub_ul_renderer.choice_input_class [ sub_ul_renderer . choice_input_class ] .
0
example# 9434
call the function format_html with 3 arguments : self.inner_html [ self . inner_html ] , choice_value set to choice_value ,
0
example# 9435
and sub_widgets set to return value of the function sub_ul_renderer.render [ sub_ul_renderer . render ] , append the result to output . if not ,
0
example# 9436
call the method self.choice_input_class [ self . choice_input_class ] with 5 arguments : self.name [ self . name ] , self.value [ self . value ] , return value of the method self.attrs.copy [ self . attrs . copy ] ,
0
example# 9437
choice and i , substitute the result for w. call the function format_html with 3 arguments : self.inner_html [ self . inner_html ] , choice_value set to result of the function force_text ,
0
example# 9438
called with an argument w , and sub_widgets as an empty string , append the result to output . call the function format_html with 3 arguments : self.outer_html [ self . outer_html ] ,
0
example# 9439
if id_ is true id_attr set to return value of the function format_html , if not id_attr set to an empty string , content set to result of the function mark_safe with an argument : string created by joining elements of outputs , with _STR:0_ separator , return the result . derive the class RadioFieldRenderer from the ChoiceFieldRenderer base class .
1
'\n' ||| _STR:0_
example# 9440
substitute RadioChoiceInput for choice_input_class .
0
example# 9441
derive the class CheckboxFieldRenderer from the ChoiceFieldRenderer base class .
0
example# 9442
substitute CheckboxChoiceInput for choice_input_class .
0
example# 9443
derive the class RendererMixin from the object base class .
0
example# 9444
renderer is None .
0
example# 9445
_empty_value is None .
0
example# 9446
define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
0
example# 9447
remove entry under _STR:0_ key of the kwargs dictionary and substitute it for renderer , if the key doesnt exists , renderer is None .
1
'render' ||| _STR:0_
example# 9448
if renderer is true ,
0
example# 9449
substitute renderer for self.renderer [ self . renderer ] .
0
example# 9450
call the method __init__ from the base class of the class RendererMixin , with 2 arguments : unpacked list args ,
0
example# 9451
and unpacked dictionary kwargs . define the method subwidgets with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple .
0
example# 9452
call the method self.get_renderer [ self . get_renderer ] with 4 arguments : name , value , attrs and choices , for every widget in result ,
0
example# 9453
yield widget .
0
example# 9454
define the method get_renderer with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple .
0
example# 9455
if value is None ,
0
example# 9456
substitute self._empty_value [ self . _empty_value ] for value .
0
example# 9457
call the method self.build_attrs [ self . build_attrs ] with an argument attrs , substitute the result for final_attrs .
0
example# 9458
call the function chain with 2 arguments : self.choices [ self . choices ] and choices , convert the result into a list and substitute it for choices .
0
example# 9459
call the method self.renderer [ self . renderer ] with 4 arguments : name , value , final_attrs and choices , return the result .
0
example# 9460
define the method render with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple .
0
example# 9461
call the method self.get_renderer [ self . get_renderer ] with 4 arguments : name , value , attrs and choices , call the render method on the result , return the result .
0
example# 9462
define the method id_for_label with 2 arguments : self and id_ .
0
example# 9463
if id_ is true ,
0
example# 9464
append string _STR:0_ to id_ .
1
'_0' ||| _STR:0_
example# 9465
return id_ .
0
example# 9466
derive the class RadioSelect from the RendererMixin and Select base classes .
0
example# 9467
substitute RadioFieldRenderer for renderer .
0
example# 9468
_empty_value is an empty string .
0
example# 9469
derive the class CheckboxSelectMultiple from the RendererMixin and SelectMultiple base classes .
0
example# 9470
substitute CheckboxFieldRenderer for renderer .
0
example# 9471
_empty_value is an empty list .
0
example# 9472
derive the class MultiWidget from the Widget base class .
0
example# 9473
define the method __init__ with 3 arguments : self , widgets and attrs set to None .
0
example# 9474
for every w in widgets , call the function w and append the result to a list , if w is an instance of type class ,
0
example# 9475
if not append w to the list , substitute the resulting list for self.widgets [ self . widgets ] . call the method __init__ from the base class of the class MultiWidget , with an argument attrs .
0
example# 9476
property decorator ,
0
example# 9477
define the method is_hidden with an argument self .
0
example# 9478
for every w in self.widgets [ self . widgets ] , if all elements w.is_hidden [ w . is_hidden ] are true , return boolean True , otherwise return boolean False .
0
example# 9479
define the method render with 4 arguments : self , name , value and attrs set to None .
0
example# 9480
if self.is_localized [ self . is_localized ] is true ,
0
example# 9481
for every bwidget in self.widgets [ self . widgets ] ,
0
example# 9482
substitute self.is_localized [ self . is_localized ] for widget.is_localized [ widget . is_localized ] .
0
example# 9483
if value is not an instance of list type ,
0
example# 9484
call the method self.decompress [ self . decompress ] with an argument value , substitute the result for value .
0
example# 9485
output is an empty list .
0
example# 9486
call the method self.build_attrs [ self . build_attrs ] with an argument attrs , substitute the result for final_attrs .
0
example# 9487
get the value under the _STR:0_ key of the final_attrs dictionary , substitute it for id_ , if it doesnt exists , id_ is None .
1
'id' ||| _STR:0_
example# 9488
for every i and widget in enumerated iterable self.widgets [ self . widgets ] ,
0
example# 9489
try ,
0
example# 9490
substitute i-th element of value for widget_value .
0
example# 9491
if IndexError exception is caught ,
0
example# 9492
widget_value is None .
0
example# 9493
if id_ is true ,
0
example# 9494
call the dict function with 2 arguments : final_attrs and id set to string _STR:0_ , where ' % s ' is replaced with id_ and i ,
1
'%s_%s' ||| _STR:0_
example# 9495
substitute the result for final_attrs . call the method widget.render [ widget . render ] with 3 arguments : string created by concatenation from : name , string _STR:0_ and i , widget_value ,
1
'_' ||| _STR:0_
example# 9496
and final_attrs , append the result to output . call the method self.format_output [ self . format_output ] with an argument output , use the result as an argument for the call to the function mark_safe ,
0
example# 9497
return the result . define the method id_for_label with 2 arguments : self and id_ .
0
example# 9498
if id_ is true ,
0
example# 9499
append string _STR:0_ to id_ .
1
'_0' ||| _STR:0_
example# 9500
return id_ .
0
example# 9501
define the method value_from_datadict with 2 arguments : self , data , files and name .
0
example# 9502
for every i and widget in enumerated iterable self.widgets [ self . widgets ] , call the function widget.value_from_datadict [ widget . value_from_datadict ] with 3 arguments : data ,
0
example# 9503
files and string created with concatenation of : name , string _STR:0_ and i converted into a string , return the results in a list . define the method format_output with 2 arguments : self and rendered_widgets .
1
'_' ||| _STR:0_
example# 9504
join rendered_widgets into a string , return it .
0
example# 9505
define the method decompress with 2 arguments : self and value .
0
example# 9506
raise NotImplementedError exception with an argument string _STR:0_ .
1
'Subclasses must implement this method.' ||| _STR:0_
example# 9507
define the method _get_media with an argument self .
0
example# 9508
media is an instance of Media class .
0
example# 9509
for every w in self.widgets [ self . widgets ] ,
0
example# 9510
sum media and w.media [ w . media ] , substitute the result for media .
0
example# 9511
return media .
0
example# 9512
media is a property object of the current class , with _get_media as getter function .
0
example# 9513
define the method __deepcopy__ with 2 arguments : self and memo .
0
example# 9514
call the method __deepcopy__ from the base class of the class MultiWidget , with an argument memo , substitute the result for obj .
0
example# 9515
call the method copy.deepcopy [ copy . deepcopy ] with an argument self.widgets [ self . widgets ] , substitute the result for obj.widgets [ obj . widgets ] .
0
example# 9516
return obj .
0
example# 9517
property decorator ,
0
example# 9518
define the method needs_multipart_form with an argument self .
0
example# 9519
if any w.needs_multipart_form [ w . needs_multipart_form ] for every w in self.widgets [ self . widgets ] is true , return boolean True , if not return boolean False .
0
example# 9520
derive the class SplitDateTimeWidget from the MultiWidget base class .
0
example# 9521
supports_microseconds is boolean False .
0
example# 9522
define the method __init__ with 4 arguments : self , attrs set to None , date_format set to None and time_format set to None .
0
example# 9523
widgets is a tuple with 2 elements : instance of DateInput class , created with 2 arguments : attrs as attrs and format as date_format ,
0
example# 9524
and instance of TimeInput class , created with 2 arguments : attrs set to attrs and format set to date_format . call the method __init__ from the base class of the class SplitDateTimeWidget , with 2 arguments : widgets and attrs .
0
example# 9525
define the method decompress with 2 arguments : self and value .
0
example# 9526
if value is true ,
0
example# 9527
call the function to_current_timezone with an argument , substitute the result for value .
0
example# 9528
return a list containing 2 elements : return value of the value.date [ value . date ] method and return value of the replace method ,
0
example# 9529
called with the argument microseconds set to integer 0 , on the result of the method value.time [ value . time ] . return list containing 2 elements : None and None .
0
example# 9530
derive the class SplitHiddenDateTimeWidget from the SplitDateTimeWidget base class .
0
example# 9531
define the method render with 4 arguments : self , attrs set to None , date_format set to None and time_format set to None .
0
example# 9532
call the method __init__ from the base class of the class SplitHiddenDateTimeWidget , with 3 arguments : attrs , date_format , and time_format .
0
example# 9533
for every widget in self.widgets [ self . widgets ] : ,
0
example# 9534
widget.input_type [ widget . input_type ] is a string _STR:0_ .
1
'hidden' ||| _STR:0_
example# 9535
from django.http.cookie [ django . http . cookie ] import SimpleCookie and parse_cookie into default name space .
0
example# 9536
from django.http.request [ django . http . request ] import HttpRequest , QueryDict , RawPostDataException , UnreadablePostError and build_request_repr into default name space .
0
example# 9537
from django.http.response [ django . http . response ] import HttpResponse , StreamingHttpResponse , HttpResponseRedirect , HttpResponsePermanentRedirect ,
0
example# 9538
HttpResponseNotModified , HttpResponseBadRequest , HttpResponseForbidden , HttpResponseNotFound , HttpResponseNotAllowed , HttpResponseGone , HttpResponseServerError , Http404 , BadHeaderError , JsonResponse into default name space . from django.http.utils [ django . http . utils ] import fix_location_header and conditional_content_removal into default name space .
0
example# 9539
__all__ is a list of strings , _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ ,
5
'SimpleCookie' ||| _STR:0_
'HttpRequest' ||| _STR:2_
'parse_cookie' ||| _STR:1_
'RawPostDataException' ||| _STR:4_
'QueryDict' ||| _STR:3_
example# 9540
from __future__ import unicode_literals into default name space .
0
example# 9541
from django.utils.encoding [ django . utils . encoding ] import force_st into default name space .
0
example# 9542
from django.utils [ django . utils ] import six into default name space .
0
example# 9543
from django.utils.six.moves [ django . utils . six . moves ] import http_cookies into default name space .
0
example# 9544
call the function http_cookies.SimpleCookie [ http_cookies . SimpleCookie ] , on the return value call the value_encode method , with the argument character _STR:0_ ,
1
';' ||| _STR:0_
example# 9545
if the tuple result equals to tuple containing character _STR:0_ and string _STR:1_ , respectively , assign _cookie_encodes_correctly the boolean True value , otherwise assign it False . assign return value of the call to the http_cookies.SimpleCookie [ http_cookies . SimpleCookie ] function to _tc .
2
';' ||| _STR:0_
'"\\073"' ||| _STR:1_
example# 9546
try ,
0
example# 9547
call the _tc.load [ _tc . load ] method with the _STR:0_ converted to string as an argument .
1
'foo:bar=1' ||| _STR:0_
example# 9548
_cookie_allows_colon_in_names is a boolean True .
0
example# 9549
if http_cookies.CookieError [ http_cookies . CookieError ] exception is caught ,
0
example# 9550
_cookie_allows_colon_in_names is boolean False .
0
example# 9551
if _cookie_encodes_correctly and _cookie_allows_colon_in_names are boolean True ,
0
example# 9552
substitute http_cookies.SimpleCookie [ http_cookies . SimpleCookie ] for SimpleCookie .
0
example# 9553
if not ,
0
example# 9554
substitute http_cookies.Morsel [ http_cookies . Morsel ] for Morsel .
0
example# 9555
derive class SimpleCookie from the base class http_cookies.SimpleCookie [ http_cookies . SimpleCookie ] .
0
example# 9556
if _cookie_encodes_correctly is boolean False ,
0
example# 9557
define method value_encode with self class instance and val as arguments .
0
example# 9558
from the base class of the class SimpleCookie call the value_encode method with val as the argument , store the result in the val and encoded , respectively .
0
example# 9559
in encoded , replace all the occurrences of unicode character _STR:0_ with _STR:1_ character and _STR:2_ with _STR:3_ characters .
4
"\\073" ||| _STR:2_
';' ||| _STR:3_
"\\054" ||| _STR:0_
',' ||| _STR:1_
example# 9560
if encoded contains string `` \\ '' and if encoded doesnt start with the double quote symbol ,
0
example# 9561
put the double qoutes around encoded .
0
example# 9562
return val and encoded as a tuple .
0
example# 9563
if _cookie_allows_colon_in_names is False ,
0
example# 9564
define the method load with self class instance and rawdata as arguments .
0
example# 9565
self.bad_cookies [ self . bad_cookies ] is an empty set .
0
example# 9566
if six.PY2 [ six . PY2 ] is true and rawdata is an instance of the type six.text_type [ six . text_type ] .
0
example# 9567
call the function force_str with raw data as an argument and substitute it for rawdata .
0
example# 9568
from the base class of the SimpleCookie class call the method load with rawdata as argument .
0
example# 9569
for every key is self.bad_cookies [ self . bad_cookies ] ,
0
example# 9570
delete self entry under the key key .
0
example# 9571
define protected method _BaseCookie__set with self class instance , key , real_value and coded_value as arguments .
0
example# 9572
evaluate the function force_str with key as the argument , substitute it for key .
0
example# 9573
try ,
0
example# 9574
get the value under the key of the dictionary self , if key does not exists return evaluated result of the function Morsel , substitute it for M .
0
example# 9575
call the M.set [ M . set ] method with the key , real_value , coded_value as the arguments .
0
example# 9576
call the private dict.__setitem__ [ dict . __setitem__ ] method with self class instance , key and M as arguments .
0
example# 9577
if http_cookies.CookieError [ http_cookies . CookieError ] exception is raised .
0
example# 9578
if self does not have _STR:0_ attribute ,
1
'bad_cookies' ||| _STR:0_
example# 9579
self.bad_cookies [ self . bad_cookies ] is an empty set .
0
example# 9580
add key to the self.bad_cookies [ self . bad_cookies ] set .
0
example# 9581
call the private dict.__setitem__ [ dict . __setitem__ ] method with self class instance , key and result of the function http_cookies.Morsel [ http_cookies . Morsel ] ( ) as arguments .
0
example# 9582
define the function parse_cookie with cookie as the argument .
0
example# 9583
if cookie is an empty string ,
0
example# 9584
return an empty dictionary .
0
example# 9585
if cookie is not an instance of http_cookies.BaseCookie [ http_cookies . BaseCookie ] ,
0
example# 9586
try ,
0
example# 9587
c is an instance of the class SimpleCookie .
0
example# 9588
call the load method on the c class instance , with the cookie argument .
0
example# 9589
if http_cookies.CookieError [ http_cookies . CookieError ] exception is raised ,
0
example# 9590
return an empty dictionary .
0
example# 9591
if not ,
0
example# 9592
substitute cookie for c .
0
example# 9593
cookiedict is an empty dictionary .
0
example# 9594
for every key in return value of the method c.keys [ c . keys ] call ,
0
example# 9595
get the value filed from the return value of the call to the c.key [ c . key ] with the argument key , add the value to the cookiedict under the key key .
0
example# 9596
return cookiedict .
0
example# 9597
from __future__ import unicode_literals into default name space .
0
example# 9598
import module base64 .
0
example# 9599
import module binascii .
0
example# 9600
import module cgi .
0
example# 9601
import module sys .
0
example# 9602
from django.conf [ django . conf ] import settings into default name space .
0
example# 9603
from django.core.exceptions [ django . core . exceptions ] import SuspiciousMultipartF into default name space .
0
example# 9604
from django.utils.datastructures [ django . utils . datastructures ] import MultiValueDict into default name space .
0
example# 9605
from django.utils.encoding [ django . utils . encoding ] import force_text into default name space .
0
example# 9606
from django.utils [ django . utils ] import six into default name space .
0
example# 9607
from django.utils.text [ django . utils . text ] import unescape_entities into default name space .
0
example# 9608
from django.core.files.uploadhandler [ django . core . files . uploadhandler ] import StopUpload , SkipFile and StopFutureHandlers into default name space .
0
example# 9609
__all__ is an tuple with 3 elements : strings _STR:0_ , _STR:1_ and _STR:2_ .
3
'InputStreamExhausted' ||| _STR:2_
'MultiPartParser' ||| _STR:0_
'MultiPartParserError' ||| _STR:1_
example# 9610
derive the class MultiPartParserError from the Exception base class .
0
example# 9611
do nothing .
0
example# 9612
derive the class InputStreamExhausted from the Exception base class .
0
example# 9613
do nothing .
0
example# 9614
RAW is a string _STR:0_ .
1
"raw" ||| _STR:0_
example# 9615
FILE is a file '' .
0
example# 9616
FIELD is a field '' .
0
example# 9617
if six.PY2 [ six . PY2 ] is true , _BASE64_DECODE_ERROR is TypeError , if not , _BASE64_DECODE_ERROR is binascii.Error [ binascii . Error ] .
0
example# 9618
derive the class MultiPartParser from the object base class .
0
example# 9619
define the method __init__ wiht 5 arguments : self , META , input_data , upload_handlers and encoding set to None .
0
example# 9620
get the value from META dictionary , under the _STR:0_ key , if the key doesnt exist ,
1
'HTTP_CONTENT_TYPE' ||| _STR:0_
example# 9621
return the value under the _STR:0_ of the META dictionary , if it doesnt exist return an empty string , substitute the result for content_type . if content_type doesnt start with string _STR:1_ ,
2
'CONTENT_TYPE' ||| _STR:0_
'multipart/' ||| _STR:1_
example# 9622
raise an MultiPartParserError with an argument string _STR:0_ , where ' % s ' is replaced with content_type .
1
'Invalid Content-Type: %s' ||| _STR:0_
example# 9623
call the method boundary with an argument string _STR:0_ , use the result to call to the parse_header function ,
1
'ascii' ||| _STR:0_
example# 9624
assign the result to ctypes and opts . get the value under the _STR:0_ key of the opts dictionary , substitute it for boundary .
1
'boundary' ||| _STR:0_
example# 9625
if boundary is false or return value of the method cgi.valid_boundary [ cgi . valid_boundary ] called with an argument boundary evaluates to false ,
0
example# 9626
raise an MultiPartParserError with an argument string _STR:0_ is replaced with boundary .
1
'Invalid boundary in multipart: %s' ||| _STR:0_
example# 9627
try ,
0
example# 9628
convert value under the _STR:0_ key of the META dictionary to an integer of base of value under the _STR:1_ key of META dictionary , if the key doesnt exists use 0 as the base , substitute the result for content_length .
2
'CONTENT_LENGTH' ||| _STR:1_
'HTTP_CONTENT_LENGTH' ||| _STR:0_
example# 9629
if ValueError or TypeError are caught ,
0
example# 9630
content_length is integer 0 .
0
example# 9631
if content_length is lesser than integer 0 ,
0
example# 9632
raise an MultiPartParserError with an argument string _STR:0_ , where _STR:1_ is replaced with content_length .
2
'%r' ||| _STR:1_
"Invalid content length: %r" ||| _STR:0_
example# 9633
if boundary is an instance of six.text_type [ six . text_type ] class ,
0
example# 9634
call the method boundary.encode [ boundary . encode ] with an argument string _STR:0_ , substitute the result for boundary .
1
'ascii' ||| _STR:0_
example# 9635
substitute boundary for self._boundary [ self . _boundary ] .
0
example# 9636
substitute input_data for self._input_data [ self . _input_data ] .
0
example# 9637
for every x in upload_handlers if x.chunk_size [ x . chunk_size ] is true , append x.chunk_size [ x . chunk_size ] to a list , substitute the result for possible_sizes .
0
example# 9638
bring integer 2 to the power of 31 , subtract the result by 4 , put the result into a list , append possible_sizes to it ,
0
example# 9639
substitute minimal element of the resulting list for self._chunk_size [ self . _chunk_size ] . substitute META for self._meta [ self . _meta ] .
0
example# 9640
if encoding is true , substitute it for self._encoding [ self . _encoding ] , if not substitute settings.DEFAULT_CHARSET [ settings . DEFAULT_CHARSET ] for self._encoding [ self . _encoding ] .
0
example# 9641
substitute content_length for self._content_length [ self . _content_length ] .
0
example# 9642
substitute _upload_handlers for self.__upload_handlers [ self . __upload_handlers ] .
0
example# 9643
define the method parse with an argument self .
0
example# 9644
from django.http [ django . http ] import QueryDict into default namespace .
0
example# 9645
substitute self._encoding [ self . _encoding ] for encoding .
0
example# 9646
substitute self._upload_handlers [ self . _upload_handlers ] for handlers .
0
example# 9647
if self._content_length [ self . _content_length ] equals integer 0 ,
0
example# 9648
instantiate QueryDict class with 2 arguments : an empty string and encoding set to self._encoding [ self . _encoding ] , instantiate a class MultiValueDict , return them .
0
example# 9649
for every handler in handlers ,
0
example# 9650
call the method handler.handle_raw_input [ handler . handle_raw_input ] with 5 arguments : self._input_data [ self . _input_data ] , self._meta [ self . _meta ] , self._content_length [ self . _content_length ] , self._boundary [ self . _boundary ] ,
0
example# 9651
and encoding , substitute the result for result . if result is not None ,
0
example# 9652
return first and second element of result .
0
example# 9653
self._post [ self . _post ] is an instance of QueryDict class , created with an empty string and mutable set to boolean True .
0
example# 9654
self._files [ self . _files ] is an instance of MultiValueDict class .
0
example# 9655
instantiate class ChunkIter with 2 arguments : self._input_data [ self . _input_data ] and self._chunk_size [ self . _chunk_size ] , use it to instantiate LazyStream class ,
0
example# 9656
assign the handle to stream . old_field_name is None .
0
example# 9657
counters is a list containing length of handlers number of zeros .
0
example# 9658
try ,
0
example# 9659
call the Parser object with stream and self._boundary [ self . _boundary ] , for every item_type , meta_data and field_stream in return value ,
0
example# 9660
if old_field_name is true ,
0
example# 9661
call the method self.handle_file_complete [ self . handle_file_complete ] with arguments old_field_name , counters .
0
example# 9662
old_field_name is None .
0
example# 9663
try ,
0
example# 9664
get the value under the _STR:0_ key of the meta_data dictionary , substitute second element of it for disposition .
1
'content-disposition' ||| _STR:0_
example# 9665
get the value under the _STR:0_ key of the disposition dictionary , strip it of whitespaces , substitute the result for field_name .
1
'name' ||| _STR:0_
example# 9666
if KeyError , IndexError and AttributeError exception is caught ,
0
example# 9667
skip this loop iteration ,
0
example# 9668
get the value under the _STR:0_ key of the disposition meta_data , substitute it for transfer_encoding .
1
'content-transfer-encoding' ||| _STR:0_
example# 9669
if transfer_encoding is not None ,
0
example# 9670
strip of the whitespaces first element of transfer_encoding , substitute the result for transfer_encoding .
0
example# 9671
call the function force_text with 3 arguments : field_name , encoding and errors as a string _STR:0_ , substitute the result for field_name .
1
'replace' ||| _STR:0_
example# 9672
if item_type equals FIELD ,
0
example# 9673
if transfer_encoding equals a string _STR:0_ ,
1
'base64' ||| _STR:0_
example# 9674
call the method field_stream.read [ field_stream . read ] , substitute the result for raw_data .
0
example# 9675
try ,
0
example# 9676
call the function base64.b64decode [ base64 . b64decode ] with an argument raw_data , substitute the result for data .
0
example# 9677
if _BASE64_DECODE_ERROR exception is caught ,
0
example# 9678
substitute raw_data for data .
0
example# 9679
if not ,
0
example# 9680
call the method field_stream.read [ field_stream . read ] , substitute the result for data .
0
example# 9681
call the method self._post.appendlist [ self . _post . appendlist ] with 2 arguments : field_name and result of the function force_text called with 3 arguments :
0
example# 9682
data , encoding and errors as a string _STR:0_ . otherwise if item_type equals FILE ,
1
'replace' ||| _STR:0_
example# 9683
get the value under the _STR:0_ key of the disposition dictionary , substitute it for file_name .
1
'filename' ||| _STR:0_
example# 9684
if file_name is false ,
0
example# 9685
skip this loop execution .
0
example# 9686
call the function force_text with 3 arguments : file_name , encoding and errors set to string _STR:0_ ,
1
'replace' ||| _STR:0_
example# 9687
substitute the result for file_name . call the function unescape_entities with an argument file_name , use the result as an argument for the call to the self.IE_sanitize [ self . IE_sanitize ] ,
0
example# 9688
method , substitute the result for file_name . get the value under the _STR:0_ of the meta_data dictionary , if it exists assign it to content_type , content_type_extra ,
1
'content-type' ||| _STR:0_
example# 9689
if not , content_type is an empty string and content_type_extra is an empty dictionary . strip the content_type of the whitespaces , substitute it for content_type .
0
example# 9690
get the value under the _STR:0_ key of the content_type_extra dictionary , substitute it for charset .
1
'charset' ||| _STR:0_
example# 9691
try ,
0
example# 9692
convert to an integer first element of the value under the _STR:0_ key of the meta_data dictionary , substitute it for content_length .
1
'content-length' ||| _STR:0_
example# 9693
if IndexError , TypeError or ValueError exception is caught ,
0
example# 9694
content_length is None .
0
example# 9695
counters is a list containing length of handlers number of zeros .
0
example# 9696
try ,
0
example# 9697
for every handler in handlers ,
0
example# 9698
try ,
0
example# 9699
call the method handler.new_file [ handler . new_file ] with 6 arguments : field_name , file_name , content_type , content_length , charset and content_type_extra .
0
example# 9700
if StopFutureHandlers exception is caught .
0
example# 9701
break the loop execution .
0
example# 9702
for every chunk in field_stream ,
0
example# 9703
if transfer_encoding equals string _STR:0_ ,
1
'base64' ||| _STR:0_
example# 9704
calculate length of chunk modulo integer 4 , substitute the result for over_bytes .
0
example# 9705
if over_bytes is true ,
0
example# 9706
call the method field_stream.read [ field_stream . read ] with an argument : over_bytes subtracted from integer 4 , substitute the result for over_chunk .
0
example# 9707
increment chunk by over_chunk .
0
example# 9708
try ,
0
example# 9709
call the method base64.b64decode [ base64 . b64decode ] with an argument chunk , substitute the result for chunk .
0
example# 9710
if Exception , renamed to e , exception is caught ,
0
example# 9711
msg is a string _STR:0_ , where _STR:1_ is replace with e .
2
"Could not decode base64 data: %r" ||| _STR:0_
'%r' ||| _STR:1_
example# 9712
call the method six.reraise [ six . reraise ] with 3 arguments : MultiPartParserError , MultiPartParserError created with msg ,
0
example# 9713
and third element of the result of the function sys.exc_info [ sys . exc_info ] . for every i and handler in enumerated iterable handlers ,
0
example# 9714
substitute length of chunk for chunk_length .
0
example# 9715
call the method handler.receive_data_chunk [ handler . receive_data_chunk ] with 2 arguments : chunk and i-th element of counters , substitute the result for chunk .
0
example# 9716
increment i-th element of counters by chunk_length .
0
example# 9717
if chunk is None ,
0
example# 9718
break the loop execution .
0
example# 9719
if SkipFile exception is caught ,
0
example# 9720
call the method self._close_files [ self . _close_files ] .
0
example# 9721
call the function exhaust with an argument field_stream .
0
example# 9722
if not ,
0
example# 9723
substitute field_name for old_field_name .
0
example# 9724
if not ,
0
example# 9725
call the function exhaust with an argument stream .
0
example# 9726
if StopUpload , renamed to e , exception is caught ,
0
example# 9727
call the method self._close_files [ self . _close_files ] .
0
example# 9728
if e.connection_reset [ e . connection_reset ] is false ,
0
example# 9729
call the function exhaust with an argument self._input_data [ self . _input_data ] .
0
example# 9730
if not ,
0
example# 9731
call the function exhaust with an argument self._input_data [ self . _input_data ] .
0
example# 9732
for every handler in handlers ,
0
example# 9733
call the method handler.upload_complete [ handler . upload_complete ] , substitute the result for retval .
0
example# 9734
if retval is true ,
0
example# 9735
break the loop execution .
0
example# 9736
return self._post [ self . _post ] and self._files [ self . _files ] .
0
example# 9737
define the method handle_file_complete with 3 arguments : self , old_field_name and counters .
0
example# 9738
for every i and handler in enumerated iterator self._upload_handlers [ self . _upload_handlers ] ,
0
example# 9739
call the method handler.file_complete [ handler . file_complete ] with i-th element of counters as an argument , substitute the result for file_obj .
0
example# 9740
if file_obj is true ,
0
example# 9741
call the function force_text with 3 arguments : old_field_name , self._encoding [ self . _encoding ] and errors as a string _STR:0_ ,
1
'replace' ||| _STR:0_
example# 9742
use the result and file_obj as arguments for the call to the method self._files.appendlist [ self . _files . appendlist ] . break the loop execution .
0
example# 9743
define the method IE_sanitize with arguments self and filename .
0
example# 9744
call the method filename.rfind [ filename . rfind ] with an argument string `` \\ '' , increment the result by one ,
0
example# 9745
slice the filename from the previous result as start index to the end , strip it of white spaces from both ends , if the result is not an empty string and filename is not an empty string , return boolean True , otherwise return boolean False . define the method _close_files with an argument self .
0
example# 9746
for every handler in self._upload_handlers [ self . _upload_handlers ] ,
0
example# 9747
if handler has an attribute _STR:0_ ,
1
'file' ||| _STR:0_
example# 9748
call the method handler.file.close [ handler . file . close ] .
0
example# 9749
derive the class LazyStream from the six.Iterator [ six . Iterator ] base class .
0
example# 9750
define the method __init__ with 3 arguments : self , producer and length set to None .
0
example# 9751
substitute producer for self._producer [ self . _producer ] .
0
example# 9752
self._empty [ self . _empty ] is boolean False .
0
example# 9753
self._leftover [ self . _leftover ] is an empty string .
0
example# 9754
substitute length for self._length [ self . _length ] .
0
example# 9755
self.position [ self . position ] is an integer 0 .
0
example# 9756
substitute length for self._remaining [ self . _remaining ] .
0
example# 9757
self._unget_history [ self . _unget_history ] is an empty list .
0
example# 9758
define the method tell with an argument self .
0
example# 9759
return self.position [ self . position ] .
0
example# 9760
define the method read with arguments self and size set to None .
0
example# 9761
define the function parts .
0
example# 9762
if size is None substitute self._remaining [ self . _remaining ] for remaining , if not , substitute size for remaining .
0
example# 9763
if remaining is None ,
0
example# 9764
join self into a bytes string , yield the result as the return value of the generator .
0
example# 9765
return nothing .
0
example# 9766
while remaining is not equal to integer 0 ,
0
example# 9767
if remaining is not greater than 0 , assert an error with the message string _STR:0_ .
1
'remaining bytes to read should never go negative' ||| _STR:0_
example# 9768
get the next element of iterable self , substitute it for chunk .
0
example# 9769
create list of first remaining elements of chunk , substitute it for emitting .
0
example# 9770
call the method self.unget [ self . unget ] with list containing first remaining elements of chunk as an argument .
0
example# 9771
decrement remaining by length of emitting .
0
example# 9772
yield emitting as result of the generator .
0
example# 9773
join result of the parts function into a bytes string , substitute it for out .
0
example# 9774
return out .
0
example# 9775
define the method __next__ with an argument self .
0
example# 9776
if self._leftover [ self . _leftover ] is true ,
0
example# 9777
substitute self._leftover [ self . _leftover ] for output .
0
example# 9778
self._leftover [ self . _leftover ] is an empty string .
0
example# 9779
if not ,
0
example# 9780
get the next element of the self._producer [ self . _producer ] iterable , substitute it for output .
0
example# 9781
self._unget_history [ self . _unget_history ] is an empty list .
0
example# 9782
increment self.position [ self . position ] by length of output .
0
example# 9783
return output .
0
example# 9784
define the method close with an argument self .
0
example# 9785
self._producer [ self . _producer ] is an empty list .
0
example# 9786
define the method _iter with an argument self .
0
example# 9787
return self .
0
example# 9788
define the method unget with arguments self and bytes .
0
example# 9789
if bytes is false ,
0
example# 9790
return nothing .
0
example# 9791
call the method self._update_unget_history [ self . _update_unget_history ] with length of bytes as an argument .
0
example# 9792
decrement self.position [ self . position ] by length of bytes .
0
example# 9793
join bytes and self._leftover [ self . _leftover ] into a bytes string , substitute it for self._leftover [ self . _leftover ] .
0
example# 9794
define the method _update_unget_history with arguments self and num_bytes .
0
example# 9795
append first 49 elements of self._unget_history [ self . _unget_history ] to list containing num_bytes , substitute the result for self._unget_history [ self . _unget_history ] .
0
example# 9796
append current_number to a list for current_number in self._unget_history [ self . _unget_history ] , if current_number is equal to num_bytes ,
0
example# 9797
substitute the length of the resulting list for number_equal . if number_equal is greater than integer 40 ,
0
example# 9798
raise SuspiciousMultipartForm exception with an argument string , _STR:0_
1
"The multipart parser got stuck, which shouldn't happen with" ||| _STR:0_
example# 9799
_STR:0_ . derive the class ChunkIter from the six.Iterator [ six . Iterator ] base class .
1
" normal uploaded files. Check for malicious upload activity; if there is none, report this to the Django developers." ||| _STR:0_
example# 9800
define the method __init__ with arguments self , flo and chunk_size set to integer 64 multiplied by integer 1024 .
0
example# 9801
substitute flo for self.flo [ self . flo ] .
0
example# 9802
substitute chunk_size for self.chunk_size [ self . chunk_size ] .
0
example# 9803
define the method __next__ with an argument self .
0
example# 9804
try ,
0
example# 9805
call the method self.flo.read [ self . flo . read ] with an argument self.chunk_size [ self . chunk_size ] , substitute the result for data .
0
example# 9806
if InputStreamExhausted exception is caught ,
0
example# 9807
raise an StopIteration exception .
0
example# 9808
if data is true ,
0
example# 9809
return data .
0
example# 9810
if not ,
0
example# 9811
raise an StopIteration exception .
0
example# 9812
define the method __iter__ with an argument self .
0
example# 9813
return self .
0
example# 9814
derive the class InterBoundaryIter from the six.Iterator [ six . Iterator ] base class .
0
example# 9815
define the method __init__ with arguments self , stream and boundary .
0
example# 9816
substitute stream for self._stream [ self . _stream ] .
0
example# 9817
substitute boundary for self.boundary [ self . boundary ] .
0
example# 9818
define the method __iter__ with an argument self .
0
example# 9819
return self .
0
example# 9820
define the method __next__ with an argument self .
0
example# 9821
try ,
0
example# 9822
instantiate class BoundaryIter with 2 arguments : self._stream [ self . _stream ] and self._boundary [ self . _boundary ] , use it to instantiate LazyStream class , return it .
0
example# 9823
if InputStreamExhausted exception is caught ,
0
example# 9824
raise an StopIteration .
0
example# 9825
derive the class BoundaryIter from the six.Iterator [ six . Iterator ] base class .
0
example# 9826
define the method __init__ with arguments self , stream and boundary .
0
example# 9827
substitute stream for self._stream [ self . _stream ] .
0
example# 9828
substitute boundary for self._boundary [ self . _boundary ] .
0
example# 9829
self._done [ self . _done ] is boolean False .
0
example# 9830
increment length of boundary by integer 6 , substitute the result for self._rollback [ self . _rollback ] .
0
example# 9831
call the method self._stream.read [ self . _stream . read ] with an argument integer 1 , substitute the result for unused_char .
0
example# 9832
if unused_char is false ,
0
example# 9833
raise an InputStreamExhausted exception ,
0
example# 9834
call the method self._stream.unget [ self . _stream . unget ] with an argument unused_char .
0
example# 9835
define the method __iter__ with an argument self .
0
example# 9836
return self .
0
example# 9837
define the method __next__ with an argument self .
0
example# 9838
if self._done [ self . _done ] is true ,
0
example# 9839
raise an StopIteration exception ,
0
example# 9840
substitute self._stream [ self . _stream ] for stream .
0
example# 9841
substitute self._rollback [ self . _rollback ] for rollback .
0
example# 9842
bytes_read is integer 0 .
0
example# 9843
chunks is an empty list .
0
example# 9844
for every bytes in stream ,
0
example# 9845
increment bytes_read by length of bytes .
0
example# 9846
append bytes to chunks .
0
example# 9847
if bytes_read is greater than rollback ,
0
example# 9848
break the loop execution .
0
example# 9849
if bytes is false ,
0
example# 9850
break the loop execution .
0
example# 9851
if not ,
0
example# 9852
self._done [ self . _done ] is boolean True .
0
example# 9853
if chunks is false ,
0
example# 9854
raise an StopIteration exception .
0
example# 9855
join chunks into bytes string , substitute it for chunk .
0
example# 9856
call the method self._find_boundary [ self . _find_boundary ] with 2 arguments : chunk and boolean if length of chunks is lesser than self._rollback [ self . _rollback ] ,
0
example# 9857
or boolean False if not , substitute the result for boundary . if boundary is true ,
0
example# 9858
substitute elements of tuple boundary to end and next , respectively .
0
example# 9859
call the method stream.unget [ stream . unget ] with elements of list chunk from the index next to the end .
0
example# 9860
self._done [ self . _done ] is boolean True .
0
example# 9861
return first end elements of list chunk .
0
example# 9862
if not ,
0
example# 9863
slice chunk list to get the last rollback elements , if the new list is not empty ,
0
example# 9864
self._done [ self . _done ] is boolean True .
0
example# 9865
return chunk .
0
example# 9866
if not ,
0
example# 9867
call the method stream.unget [ stream . unget ] with last rollback elements of chunk as an argument .
0
example# 9868
return last rollback elements of chunk .
0
example# 9869
define the method _find_boundary with an arguments self , data and eof set to boolean False .
0
example# 9870
call the method data.find [ data . find ] with an argument self._boundary [ self . _boundary ] , substitute the result for index .
0
example# 9871
if index is lesser than integer 0 ,
0
example# 9872
return None .
0
example# 9873
if not ,
0
example# 9874
substitute index for end .
0
example# 9875
sum index and length of self._boundary [ self . _boundary ] , substitute the result for next .
0
example# 9876
substitute greater element between integer 0 and end decremented by one for last .
0
example# 9877
element of data at the index last equals to newline bytes character .
0
example# 9878
decrement end by one .
0
example# 9879
substitute greater element between integer 0 and end decremented by one for last .
0
example# 9880
element of data at the index last equals to carriage return bytes character .
0
example# 9881
decrement end by one .
0
example# 9882
return end ans next .
0
example# 9883
define the function exhaust with an argument stream_or_iterable .
0
example# 9884
iterator is None .
0
example# 9885
try ,
0
example# 9886
iterator is iterator created out of stream_or_iterable .
0
example# 9887
if TypeError exception is caught ,
0
example# 9888
iterator is an instance of ChunkIter class , created with arguments : stream_or_iterable and integer 16384 .
0
example# 9889
if iterator is None ,
0
example# 9890
raise an MultiPartParserError with an argument string _STR:0_ .
1
'multipartparser.exhaust() was passed a non-iterable or stream parameter' ||| _STR:0_
example# 9891
for every __ in iterator ,
0
example# 9892
do nothing .
0
example# 9893
define the function parse_boundary_stream with arguments stream and max_header_size .
0
example# 9894
call the method stream.read [ stream . read ] with an argument max_header_size , substitute the result for chunk .
0
example# 9895
call the method chunk.find [ chunk . find ] with an argument bytes string _STR:0_ , substitute the result for header_end .
1
'\r\n\r\n' ||| _STR:0_
example# 9896
define the method _parse_header with an argument line .
0
example# 9897
call the function parse_header with an argument line , substitute the result for main_value_pair and params , respectively .
0
example# 9898
try ,
0
example# 9899
split into two parts string main_value_pair at character _STR:0_ , substitute the parts for name and value , respectively .
1
':' ||| _STR:0_
example# 9900
if ValueError exception is caught ,
0
example# 9901
raise an ValueError with an argument string _STR:0_ , where ' % s ' is replaced with line .
1
"Invalid header: %r" ||| _STR:0_
example# 9902
return name and tuple containing 2 elements value and params .
0
example# 9903
if header_end equals integer negative 1 ,
0
example# 9904
call the method stream.unget [ stream . unget ] with an argument chunk .
0
example# 9905
return tuple containing 3 elements : RAW , an empty dictionary and stream .
0
example# 9906
substitute first header_end elements of chunk list for header .
0
example# 9907
call the method stream.unget [ stream . unget ] with list containing elements of chunk list from the header_end incremented by integer 4 as a start index to the end as argument .
0
example# 9908
substitute RAW for TYPE .
0
example# 9909
outdict is an empty dictionary .
0
example# 9910
split header string at string _STR:0_ , for every line in result ,
1
'\r\n' ||| _STR:0_
example# 9911
try ,
0
example# 9912
call the method _parse_header with an argument line , assign the result to name and tuple with 2 elements : value and params , respectively .
0
example# 9913
if ValueError exception is caught ,
0
example# 9914
skip this loop iteration .
0
example# 9915
if name equals a string _STR:0_ ,
1
'content-disposition' ||| _STR:0_
example# 9916
substitute FIELD for TYPE ,
0
example# 9917
get the value under the _STR:0_ key of the params dictionary , if it is true ,
1
'filename' ||| _STR:0_
example# 9918
substitute FILE for TYPE .
0
example# 9919
assign value and params to the value under the name key of the outdict dictionary .
0
example# 9920
if TYPE equals to RAW ,
0
example# 9921
call the method stream.unget [ stream . unget ] with an argument chunk .
0
example# 9922
return a tuple with 3 elements : TYPE , outdict and stream .
0
example# 9923
derive the class Parser from the base class object .
0
example# 9924
define the method __init__ with arguments self , stream and boundary .
0
example# 9925
substitute stream for self._stream [ self . _stream ] .
0
example# 9926
append boundary to bytes string _STR:0_ , substitute the result for self._separator [ self . _separator ] .
1
'--' ||| _STR:0_
example# 9927
define the method __iter__ with an argument self .
0
example# 9928
boundarystream is an instance of InterBoundaryIter class , created with self._stream [ self . _stream ] and self._separator [ self . _separator ] as arguments .
0
example# 9929
for every sub_stream in boundarystream ,
0
example# 9930
call the function parse_boundary_stream with 2 arguments : sub_stream and integer 1024 , yield the result as the return value of the generator .
0
example# 9931
define the function parse_header with an argument line .
0
example# 9932
append line to bytes string _STR:0_ , use it as an argument for the call to the function _parse_header_params , substitute the result for plist .
1
';' ||| _STR:0_
example# 9933
pop the first element from plist , convert it to lowercase , call the method decode on it , with string _STR:0_ as an argument ,
1
'ascii' ||| _STR:0_
example# 9934
substitute the result for key . pdict is an empty dictionary .
0
example# 9935
for every p in plist ,
0
example# 9936
call the method p.find [ p . find ] with bytes string _STR:0_ as an argument , substitute the result for i .
1
'=' ||| _STR:0_
example# 9937
if i is greater or equal to integer 0 ,
0
example# 9938
take the first i elements of string p , strip the whitespaces from the both sides , convert it to lowercase and apply on it the method ,
0
example# 9939
decode with an argument string _STR:0_ , substitute the result for name . take elements of p from index i incremented by 1 to the end , strip the result of the whitespaces , substitute it for value .
1
'ascii' ||| _STR:0_
example# 9940
if length of value is greater or equal to integer 2 and first and last elements of value are an empty string ,
0
example# 9941
strip value of the first and last element .
0
example# 9942
replace all the occurrences of _STR:0_\\_STR:1_\\_STR:2_ ' , substitute the result for value .
3
'\\\\' in string value with ' ||| _STR:0_
"' for '" ||| _STR:2_
' and all occurrences of ' ||| _STR:1_
example# 9943
substitute value for the vale under the name key of the pdict dictionary .
0
example# 9944
return key and pdict .
0
example# 9945
define the function _parse_header_params with an argument s .
0
example# 9946
plist is an empty list .
0
example# 9947
while first element of s is equal to bytes string _STR:0_ ,
1
';' ||| _STR:0_
example# 9948
substitute s without the first element for s .
0
example# 9949
call the method s.find [ s . find ] with an argument bytes string _STR:0_ , substitute the result for end .
1
';' ||| _STR:0_
example# 9950
while end is greater than integer 0 and return value of the s.count [ s . count ] called with 3 arguments : an empty string , integer 0 and end ,
0
example# 9951
is an even number , call the method s.find [ s . find ] with 2 arguments : bytes string _STR:0_ and end incremented by one , substitute the result for end .
1
';' ||| _STR:0_
example# 9952
if end is lesser than integer 0 ,
0
example# 9953
substitute length of s for end .
0
example# 9954
substitute first end elements of s for f .
0
example# 9955
strip f of whitespaces and append it to plist .
0
example# 9956
substitute elements of s from the end index to end for s .
0
example# 9957
return plist .
0
example# 9958
from __future__ import unicode_literals into default name space .
0
example# 9959
import module copy .
0
example# 9960
import module os .
0
example# 9961
import module re .
0
example# 9962
import module sys .
0
example# 9963
from io import BytesIO into default name space .
0
example# 9964
from itertools import chain into default name space .
0
example# 9965
from pprint import pformat into default name space .
0
example# 9966
from django.conf [ django . conf ] import settings into default name space .
0
example# 9967
from django.core [ django . core ] import signing into default name space .
0
example# 9968
from django.core.exceptions [ django . core . exceptions ] import DisallowedHost and ImproperlyConfigured into default name space .
0
example# 9969
from django.core.files [ django . core . files ] import uploadhandler into default name space .
0
example# 9970
from django.http.multipartparser [ django . http . multipartparser ] import MultiPartParser and MultiPartParserError into default name space .
0
example# 9971
from django.utils [ django . utils ] import six into default name space .
0
example# 9972
from django.utils.datastructures [ django . utils . datastructures ] import MultiValueDict and ImmutableList into default name space .
0
example# 9973
from django.utils.encoding [ django . utils . encoding ] import force_bytes , force_text , force_str and iri_to_uri into default name space .
0
example# 9974
from django.utils.six.moves.urllib.parse [ django . utils . six . moves . urllib . parse ] import parse_qsl , urlencode , quote , urljoin and urlsplit into default name space .
0
example# 9975
RAISE_ERROR is an instance of object class .
0
example# 9976
compile the regex _STR:0_ with an argument re.I [ re . I ] , substitute it for absolute_http_url_re .
1
"^https?://" ||| _STR:0_
example# 9977
compile the regex _STR:0_ , substitute it for host_validation_re .
1
"^([a-z0-9.-]+|\[[a-f0-9]*:[a-f0-9:]+\])(:\d+)?$" ||| _STR:0_
example# 9978
derive the class UnreadablePostError from the base class IOError .
0
example# 9979
do nothing .
0
example# 9980
derive the class RawPostDataException from the base class Exception .
0
example# 9981
do nothing .
0
example# 9982
derive the class HttpRequest from the object base class .
0
example# 9983
_encoding is None .
0
example# 9984
_upload_handlers is an empty list .
0
example# 9985
define the method __init__ with an argument self .
0
example# 9986
self.GET [ self . GET ] is an instance of QueryDict class created with an argument mutable set to boolean True .
0
example# 9987
self.POST [ self . POST ] is an instance of QueryDict class created with an argument mutable set to boolean True .
0
example# 9988
self.COOKIES [ self . COOKIES ] is an empty dictionary .
0
example# 9989
self.META [ self . META ] is an empty dictionary .
0
example# 9990
self.FILES [ self . FILES ] is an instance of MultiValueDict class .
0
example# 9991
self.path [ self . path ] is an empty string .
0
example# 9992
self.path_info [ self . path_info ] is an empty string .
0
example# 9993
self.method [ self . method ] is None .
0
example# 9994
self.resolver_match [ self . resolver_match ] is None .
0
example# 9995
self._post_parse_error [ self . _post_parse_error ] is boolen False .
0
example# 9996
define the method __repr__ with an argument self .
0
example# 9997
call the method build_request_repr with an argument self , return the result .
0
example# 9998
define the method get_host with an argument self .
0
example# 9999
if settings.USE_X_FORWARDED_HOST [ settings . USE_X_FORWARDED_HOST ] is true and _STR:0_ is contained in self.META [ self . META ] .
1
'HTTP_X_FORWARDED_HOST' ||| _STR:0_
example# 10000
get the value under the _STR:0_ key of the self.META [ self . META ] dictionary , substitute the result for host .
1
'HTTP_X_FORWARDED_HOST' ||| _STR:0_
example# 10001
if _STR:0_ is contained in self.META [ self . META ] ,
1
'HTTP_HOST' ||| _STR:0_
example# 10002
substitute the value under the _STR:0_ key of the self.META [ self . META ] dictionary , substitute it for host .
1
'HTTP_HOST' ||| _STR:0_
example# 10003
if not ,
0
example# 10004
substitute the value under the _STR:0_ key of the self.META [ self . META ] dictionary , substitute it for host .
1
'SERVER_NAME' ||| _STR:0_
example# 10005
convert the value under the _STR:0_ key of the self.META [ self . META ] dictionary to a string , substitute result for server_port .
1
'SERVER_NAME' ||| _STR:0_
example# 10006
if return value of the self.is_secure [ self . is_secure ] method is true and server_port is not equal to string _STR:0_ ,
1
'443' ||| _STR:0_
example# 10007
if return value of the self.is_secure [ self . is_secure ] is false and server port is not equal to string _STR:0_ , join host and server_port into a string , separated with _STR:1_ , substitute the result for host .
2
':' ||| _STR:1_
'80' ||| _STR:0_
example# 10008
if settings.DEBUG [ settings . DEBUG ] is true ,
0
example# 10009
return host .
0
example# 10010
call the function split_domain_port with an argument host , assign the result to domain and port , respectively .
0
example# 10011
if domain is true and return value of the function validate_host called with 2 arguments : domain and settings.ALLOWED_HOSTS [ settings . ALLOWED_HOSTS ] , evaluates to true ,
0
example# 10012
return host .
0
example# 10013
if not ,
0
example# 10014
msg is a string _STR:0_ , replace _STR:1_ with host .
2
"Invalid HTTP_HOST header: %r." ||| _STR:0_
'%r' ||| _STR:1_
example# 10015
if domain is true ,
0
example# 10016
append string _STR:0_ to msg , where ' % s ' is replaced with domain .
1
" You may need to add %r to ALLOWED_HOSTS." ||| _STR:0_
example# 10017
if not ,
0
example# 10018
append string _STR:0_ to msg .
1
" The domain name provided is not valid according to RFC 1034/1035." ||| _STR:0_
example# 10019
raise an DisallowedHost exception with an argument msg .
0
example# 10020
define the method get_full_path with an argument self .
0
example# 10021
if the value under the _STR:0_ key of the self.META [ self . META ] dictionary is true , call the function iri_to_uri ,
1
'QUERY_STRING' ||| _STR:0_
example# 10022
called with value under the _STR:0_ key of the self.META [ self . META ] dictionary and append it to string _STR:1_ , append the result th the self.path [ self . path ] converted into a string and return it , if the value under the _STR:0_ key of the self.META [ self . META ] dictionary is false , return self.path [ self . path ] converted into a string . def the method get_signed_cookie with 5 arguments : self , key , default set to RAISE_ERROR , salt as an empty string ,
2
'?' ||| _STR:1_
'QUERY_STRING' ||| _STR:0_
example# 10023
try ,
0
example# 10024
substitute value under the key key of the self.COOKIES [ self . COOKIES ] dictionary , substitute it for cookie_value .
0
example# 10025
if KeyError exception is caught ,
0
example# 10026
if default is true and RAISE_ERROR is false ,
0
example# 10027
return default .
0
example# 10028
if not ,
0
example# 10029
raise an exception .
0
example# 10030
try ,
0
example# 10031
call the method signing.get_cookie_signer [ signing . get_cookie_signer ] with an argument salt set to sum of key and salt , call the method unsign on the result ,
0
example# 10032
with arguments cookie_value and max_age set to max_age . if signing.BadSignature [ signing . BadSignature ] exception is caught ,
0
example# 10033
if default is true and RAISE_ERROR is false ,
0
example# 10034
return default .
0
example# 10035
if not ,
0
example# 10036
raise an exception .
0
example# 10037
return value .
0
example# 10038
define the method build_absolute_uri with an arguments self and location set to None .
0
example# 10039
if location is None ,
0
example# 10040
call the method self.get_full_path [ self . get_full_path ] , append the result to string _STR:0_ , substitute it for location .
1
'//' ||| _STR:0_
example# 10041
call the function urlsplit with an argument location , substitute the result for bits .
0
example# 10042
do not perform the following only if bits.scheme [ bits . scheme ] and bits.netloc [ bits . netloc ] are both true ,
0
example# 10043
format the string _STR:0_ by replacing scheme with self.scheme [ self . scheme ] , host with return value of the self.get_host [ self . get_host ] method ,
1
'{scheme}://{host}{path}' ||| _STR:0_
example# 10044
and path with self.path [ self . path ] , substitute the result for current_uri . call the function urljoin with arguments current_uri and location , substitute the result for location .
0
example# 10045
call the function iri_to_uri with an argument location , return the result .
0
example# 10046
define the method _get_scheme with an argument self .
0
example# 10047
return string _STR:0_ if value under the _STR:1_ key of the os.environ [ os . environ ] dictionary equals string _STR:2_ , if not return _STR:3_ .
4
'https' ||| _STR:0_
'on' ||| _STR:2_
'http' ||| _STR:3_
"HTTPS" ||| _STR:1_
example# 10048
property decorator .
0
example# 10049
define the method scheme with an argument self .
0
example# 10050
if settings.SECURE_PROXY_SSL_HEADER [ settings . SECURE_PROXY_SSL_HEADER ] is true ,
0
example# 10051
try ,
0
example# 10052
assign the settings.SECURE_PROXY_SSL_HEADER [ settings . SECURE_PROXY_SSL_HEADER ] to header and value , respectively .
0
example# 10053
if ValueError exception is caught ,
0
example# 10054
raise an ImproperlyConfigured exception with an argument string _STR:0_ .
1
'The SECURE_PROXY_SSL_HEADER setting must be a tuple containing two values.' ||| _STR:0_
example# 10055
if value under the header key of the self.META [ self . META ] dictionary is equal to value ,
0
example# 10056
return string _STR:0_ .
1
'https' ||| _STR:0_
example# 10057
call the method self._get_scheme [ self . _get_scheme ] , return the result .
0
example# 10058
define the method is_secure with an argument self .
0
example# 10059
if self.scheme [ self . scheme ] equals to string _STR:0_ , return boolean True , otherwise return boolean False .
1
'https' ||| _STR:0_
example# 10060
define the method is_ajax with an argument self .
0
example# 10061
get the value under the _STR:0_ key of the self.META [ self . META ] dictionary , if it equals string _STR:1_ ,
2
'XMLHttpRequest' ||| _STR:1_
'HTTP_X_REQUESTED_WITH' ||| _STR:0_
example# 10062
return boolean True , otherwise return boolean False . property decorator .
0
example# 10063
define the method encoding with an argument self .
0
example# 10064
return self._encoding [ self . _encoding ] .
0
example# 10065
encoding.setter [ encoding . setter ] decorator ,
0
example# 10066
define the method encoding with arguments self and val .
0
example# 10067
substitute val for self._encoding [ self . _encoding ] .
0
example# 10068
if self has an _STR:0_ attribute ,
1
'_get' ||| _STR:0_
example# 10069
delete self._get [ self . _get ] .
0
example# 10070
if self has an _STR:0_ attribute ,
1
'_post' ||| _STR:0_
example# 10071
del self._post [ self . _post ]
0
example# 10072
define the method _initialize_handlers with an argument self .
0
example# 10073
for every handler in settings.FILE_UPLOAD_HANDLERS [ settings . FILE_UPLOAD_HANDLERS ] ,
0
example# 10074
add to a list result of the method uploadhandler.load_handler [ uploadhandler . load_handler ] called with arguments handler and self , substitute resulting list for self._upload_handlers [ self . _upload_handlers ] . property decorator ,
0
example# 10075
define the method upload_handlers with an argument self .
0
example# 10076
if self._upload_handlers [ self . _upload_handlers ] is false ,
0
example# 10077
call the method self._initialize_handlers [ self . _initialize_handlers ] ,
0
example# 10078
return self._upload_handlers [ self . _upload_handlers ] .
0
example# 10079
upload_handlers.setter [ upload_handlers . setter ] decorator .
0
example# 10080
define the method upload_handlers with arguments : self and upload_handlers .
0
example# 10081
if self has an _STR:0_ attribute .
1
'_files' ||| _STR:0_
example# 10082
raise an AttributeError exception with an argument string _STR:0_ .
1
"You cannot set the upload handlers after the upload has been processed." ||| _STR:0_
example# 10083
substitute upload_handlers for self._upload_handlers [ self . _upload_handlers ] .
0
example# 10084
define the method parse_file_upload with 3 arguments : self , META and post_data .
0
example# 10085
self.upload_handlers [ self . upload_handlers ] is an instance of ImmutableList , created with 2 arguments : self.upload_handlers [ self . upload_handlers ] ,
0
example# 10086
and warning as a string _STR:0_ . parser is an instance of MultiPartParser class , created with 4 arguments : META , post_data , self.upload_handlers [ self . upload_handlers ] and self.encoding [ self . encoding ] .
1
"You cannot alter upload handlers after the upload has been processed." ||| _STR:0_
example# 10087
call the method parser.parse [ parser . parse ] , return the result .
0
example# 10088
property decorator ,
0
example# 10089
define the method body with an argument self .
0
example# 10090
if self doesnt have an _STR:0_ attribute ,
1
'_body' ||| _STR:0_
example# 10091
if self._read_started [ self . _read_started ] is true ,
0
example# 10092
raise an RawPostDataException exception with an argument string _STR:0_ .
1
"You cannot access body after reading from request's data stream" ||| _STR:0_
example# 10093
try ,
0
example# 10094
call the method self.read [ self . read ] , substitute the result or self._body [ self . _body ] .
0
example# 10095
if IOError , renamed to e , exception is caught ,
0
example# 10096
call the function six.reraise [ six . reraise ] with 3 arguments : UnreadablePostError , UnreadablePostError instantiated with unpacked list e.args [ e . args ] ,
0
example# 10097
third element of the result of the function sys.exc_info [ sys . exc_info ] . self._stream [ self . _stream ] is an instance of BytesIO class created with an argument self._body [ self . _body ] .
0
example# 10098
return self._body [ self . _body ] .
0
example# 10099
define the method_mark_post_parse_error with an argument self .
0
example# 10100
self._post [ self . _post ] is an instance of QueryDict class created with an empty string as argument .
0
example# 10101
self._files [ self . _files ] is an instance of MultiValueDict class .
0
example# 10102
self._post_parse_error [ self . _post_parse_error ] is boolean True .
0
example# 10103
define the method _load_post_and_files with an argument self .
0
example# 10104
if self.method [ self . method ] is not equal to string _STR:0_ ,
1
'POST' ||| _STR:0_
example# 10105
self._post [ self . _post ] is an instance of QueryDict created with arguments : an empty string and encoding set to self._encoding [ self . _encoding ] ,
0
example# 10106
self._files [ self . _files ] is an instance of class MultiValueDict . return nothing .
0
example# 10107
if self._read_started [ self . _read_started ] is true and self doesnt have an _STR:0_ attribute .
1
'_body' ||| _STR:0_
example# 10108
call the method self._mark_post_parse_error [ self . _mark_post_parse_error ] .
0
example# 10109
return nothing .
0
example# 10110
get the value under the _STR:0_ key of the self.META [ self . META ] dictionary , if it starts with a string _STR:1_ ,
2
'CONTENT_TYPE' ||| _STR:0_
'multipart/form-data' ||| _STR:1_
example# 10111
if self has an attribute _STR:0_ ,
1
'_body' ||| _STR:0_
example# 10112
data is an instance of BytesIO class , created with an argument : self._body [ self . _body ] .
0
example# 10113
if not ,
0
example# 10114
substitute self for data .
0
example# 10115
try ,
0
example# 10116
call the method self.parse_file_upload [ self . parse_file_upload ] with arguments self.META [ self . META ] and data , assign the result to self._post [ self . _post ] and self._files [ self . _files ] .
0
example# 10117
if MultiPartParserError exception is caught ,
0
example# 10118
call the method self._mark_post_parse_error [ self . _mark_post_parse_error ] .
0
example# 10119
raise an exception .
0
example# 10120
otherwise if value under the _STR:0_ key of hte self.META [ self . META ] dictionary starts with _STR:1_ ,
2
'application/x-www-form-urlencoded' ||| _STR:1_
'CONTENT_TYPE' ||| _STR:0_
example# 10121
self._post [ self . _post ] is an instance of QueryDict created with arguments : self.body [ self . body ] and encoding set to self._encoding [ self . _encoding ] ,
0
example# 10122
self._files [ self . _files ] is an instance of class MultiValueDict . if not ,
0
example# 10123
self._post [ self . _post ] is an instance of QueryDict created with arguments : an empty string and encoding set to self._encoding [ self . _encoding ] ,
0
example# 10124
self._files [ self . _files ] is an instance of class MultiValueDict . define the method close with an argument self .
0
example# 10125
if self has an attribute _STR:0_ ,
1
'_files' ||| _STR:0_
example# 10126
for every f in return value of the return value of the method chain.from_iterable [ chain . from_iterable ] called with argument :
0
example# 10127
second element of l for every l in return value of the self._files.lists [ self . _files . lists ] call the method f.close [ f . close ] .
0
example# 10128
define the method read with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
0
example# 10129
self._read_started [ self . _read_started ] is True .
0
example# 10130
try ,
0
example# 10131
call the method self._stream.read [ self . _stream . read ] with 2 arguments : unpacked list args and unpacked dictionary kwargs .
0
example# 10132
if IOError , renamed to e , exception is caught ,
0
example# 10133
call the function six.reraise [ six . reraise ] with 3 arguments : UnreadablePostError , UnreadablePostError instantiated with unpacked list e.args [ e . args ] ,
0
example# 10134
third element of the result of the function sys.exc_info [ sys . exc_info ] . define the method readline with 3 arguments : self , unpacked list args and unpacked list kwargs .
0
example# 10135
self._read_started [ self . _read_started ] is boolean True .
0
example# 10136
try ,
0
example# 10137
call the method self._stream.readline [ self . _stream . readline ] with 2 arguments : unpacked list args , unpacked dictionary kwargs .
0
example# 10138
if IOError , substituted to e , exception is caught ,
0
example# 10139
call the function six.reraise [ six . reraise ] with 3 arguments : UnreadablePostError , UnreadablePostError instantiated with unpacked list e.args [ e . args ] ,
0
example# 10140
third element of the result of the function sys.exc_info [ sys . exc_info ] . define the method __init__ with an argument self .
0
example# 10141
endless loop ,
0
example# 10142
read one line from self file stream , substitute the result for buf .
0
example# 10143
if buf is false ,
0
example# 10144
break the loop execution .
0
example# 10145
yield buf as return value of the generator .
0
example# 10146
substitute xreadlines for __iter__ .
0
example# 10147
define the method __init__ with an argument self .
0
example# 10148
append to a list elements of the iterator self , return the resulting list .
0
example# 10149
derive the class QueryDict from the base class MultiValueDict .
0
example# 10150
_mutable is boolean True .
0
example# 10151
_encoding is None .
0
example# 10152
define the method __init__ with 4 arguments : self , query_string is None , mutable is boolean False and encoding set to None .
0
example# 10153
call the __init__ method of the base class of the QueryDict class .
0
example# 10154
if encoding is false .
0
example# 10155
substitute settings.DEFAULT_CHARSET [ settings . DEFAULT_CHARSET ] for encoding .
0
example# 10156
substitute encoding for self.encoding [ self . encoding ] .
0
example# 10157
if six.PY3 [ six . PY3 ] is true ,
0
example# 10158
if query_string is an instance of bytes ,
0
example# 10159
call the method query_string.decode [ query_string . decode ] , substitute the result for query_string .
0
example# 10160
for every key and value in return value of the parse_qsl with 3 arguments : query_string is it exists or an empty string if not ,
0
example# 10161
keep_blank_values set to boolean True , encoding set to encoding . call the method appendlist with 2 arguments : key and value .
0
example# 10162
if not ,
0
example# 10163
for every key and value in parse_gsl with query_string is it exists or an empty string if not and keep_blank_values set to boolean True .
0
example# 10164
call the method self.appendlist [ self . appendlist ] with 2 arguments : return value of the function force_text with 3 arguments :
0
example# 10165
key , encoding and errors set to string _STR:0_ , and return value of the function force_text with 3 arguments : value , encoding and errors set to string _STR:0_ . call the method mutable substitute for self._mutable [ self . _mutable ] .
1
'replace' ||| _STR:0_
example# 10166
property decorator ,
0
example# 10167
define the method encoding with an argument self .
0
example# 10168
if self._encoding [ self . _encoding ] is None ,
0
example# 10169
substitute settings.DEFAULT_CHARSET [ settings . DEFAULT_CHARSET ] for self._encoding [ self . _encoding ] .
0
example# 10170
return self._encoding [ self . _encoding ] .
0
example# 10171
encoding.setter [ encoding . setter ] decorator ,
0
example# 10172
define the method encoding with arguments self and value .
0
example# 10173
substitute value for self._encoding [ self . _encoding ] .
0
example# 10174
define the method _assert_mutable with an argument self .
0
example# 10175
if not self._mutable [ self . _mutable ] ,
0
example# 10176
raise an AttributeError with an argument string _STR:0_ .
1
"This QueryDict instance is immutable" ||| _STR:0_
example# 10177
define the method __setitem__ with 3 arguments : self , key and value .
0
example# 10178
call the method self._assert_mutable [ self . _assert_mutable ] .
0
example# 10179
call the method bytes_to_text with 2 arguments : key and self.encoding [ self . encoding ] , substitute the result for key .
0
example# 10180
call the method bytes_to_text with 2 arguments : key and self.encoding [ self . encoding ] , substitute the result for value .
0
example# 10181
call the method __setitem__ from the base class of the QueryDict class , with arguments key and value .
0
example# 10182
define the method __delitem__ with 3 arguments : self and key .
0
example# 10183
call the method self._assert_mutable [ self . _assert_mutable ] .
0
example# 10184
call the method __delitem__ from the base class of the QueryDict class , with an argument key .
0
example# 10185
define the method __copy__ with an argument self .
0
example# 10186
call the method self.__class__ [ self . __class__ ] with 3 arguments : an empty string , mutable is boolean True , encoding is self.encoding [ self . encoding ] , substitute the result for result .
0
example# 10187
for key and value in return value of the six.iterlists [ six . iterlists ] function called with an argument self ,
0
example# 10188
call the method result.setlist [ result . setlist ] with the arguments : key and value .
0
example# 10189
return result .
0
example# 10190
define the method __deepcopy__ with 3 arguments : self and memo .
0
example# 10191
call the method self.__class__ [ self . __class__ ] with 3 arguments : an empty string , mutable is boolean True , encoding is self.encoding [ self . encoding ] , substitute the result for result .
0
example# 10192
get the identity of the self object , use it as a key to get the value of the memo dictionary , substitute result for it .
0
example# 10193
for key and value in result of the function six.iterlists [ six . iterlists ] called with an argument ,
0
example# 10194
call the method result.setlist [ result . setlist ] with 2 arguments : return value of the function copy.deepcopy [ copy . deepcopy ] called with 2 arguments : key and memo ,
0
example# 10195
and return value of the function copy.deepcopy [ copy . deepcopy ] called with 2 arguments : value and memo . return result .
0
example# 10196
define the method setlist with 3 arguments : self , key and list_ .
0
example# 10197
call the method self._assert_mutable [ self . _assert_mutable ] .
0
example# 10198
call the method bytes_to_text with an arguments key and self.encoding [ self . encoding ] , substitute the result for key .
0
example# 10199
for every elt in list_ call the method bytes_to_text with 2 argument : elt and self.encoding [ self . encoding ] , append the result into a list ,
0
example# 10200
substitute the resulting list for list_ . call the method setlist from the base class of the QueryDict class , with arguments key and list_ .
0
example# 10201
define the method setlistdefault with 3 arguments : self , key and default_list set to None .
0
example# 10202
call the method self._assert_mutable [ self . _assert_mutable ] .
0
example# 10203
call the method setlistdefault from the base class of the class QueryDict , with arguments key and default_list , return the result .
0
example# 10204
define the method appendlist with 3 arguments : self , key and value .
0
example# 10205
call the method self._assert_mutable [ self . _assert_mutable ] .
0
example# 10206
call the method bytes_to_text with 2 arguments : key and self.encoding [ self . encoding ] , substitute the result for key .
0
example# 10207
call the method bytes_to_text with 2 arguments : value and self.encoding [ self . encoding ] , substitute the result for value .
0
example# 10208
call the method appendlist from the base class of the QueryDict class , with arguments key and value .
0
example# 10209
define the method pop with 3 arguments : self , key and unpacked list args .
0
example# 10210
call the method self._assert_mutable [ self . _assert_mutable ] .
0
example# 10211
call the method pop from the base class of the class QueryDict , with arguments key and unpacked list args , return the result .
0
example# 10212
define the method popitem with an argument self .
0
example# 10213
call the method self._assert_mutable [ self . _assert_mutable ] .
0
example# 10214
call the method popitem from the base class of the class QueryDict , return the result .
0
example# 10215
define the method clear with an argument self .
0
example# 10216
call the method self._assert_mutable [ self . _assert_mutable ] .
0
example# 10217
call the method clear from the base class of the class QueryDict , return the result .
0
example# 10218
define the method setdefault with 3 arguments : self , key and default set to None .
0
example# 10219
call the method self._assert_mutable [ self . _assert_mutable ] .
0
example# 10220
call the method bytes_to_text with 2 arguments : key and self.encoding [ self . encoding ] , substitute the result for key .
0
example# 10221
call the method bytes_to_text with 2 arguments : default and self.encoding [ self . encoding ] , substitute the result for default .
0
example# 10222
call the method setlistdefault from the base class of the class QueryDict , with arguments key and default_list , return the result .
0
example# 10223
define the method copy with an argument self .
0
example# 10224
call the method self.__deepcopy__ [ self . __deepcopy__ ] with an empty dictionary as an argument .
0
example# 10225
define the method urlencode with 3 arguments : self and safe set to None .
0
example# 10226
output is an empty list .
0
example# 10227
if safe is true ,
0
example# 10228
call the function force_bytes with 2 arguments : safe and self.encoding [ self . encoding ] , substitute it for safe .
0
example# 10229
encode is an lambda function with arguments k and v , return value is string _STR:0_ , where ' % s ' is replaced with :
1
'%s=%s' ||| _STR:0_
example# 10230
return value of the function quote called with arguments k and safe , and with return value of the function quote called with arguments v and safe . if not ,
0
example# 10231
encode is an lambda function with 2 arguments k and v , return value is the result of the function urlencode , called with an argument :
0
example# 10232
dictionary containing element v for k. for every k and list_ in return value of the method self.lists [ self . lists ] ,
0
example# 10233
call the function force_bytes with arguments k and self.encoding [ self . encoding ] , substitute the result for k .
0
example# 10234
for every v in list_ append to a list result of the function encode , called with arguments : k and result of the function force_bytes ,
0
example# 10235
called with arguments v and self.encoding [ self . encoding ] , extend the output with the result . join elements of the output into a string , separated with _STR:0_ , return the result .
1
'&' ||| _STR:0_
example# 10236
define the function build_request_repr with arguments : request , path_override set to None , GET_override set to None ,
0
example# 10237
try ,
0
example# 10238
get is a tuple containing elements generated by the call to the function pformat with an argument GET_override ,
0
example# 10239
if GET_override is not None , or otherwise generated with the call to the function pformat with an argument request.GET [ request . GET ] . if Exception exception is caught ,
0
example# 10240
get is a string _STR:0_ .
1
'<could not parse>' ||| _STR:0_
example# 10241
if request._post_parse_error [ request . _post_parse_error ] is true ,
0
example# 10242
post is a string _STR:0_ .
1
'<could not parse>' ||| _STR:0_
example# 10243
if not ,
0
example# 10244
try ,
0
example# 10245
get is a tuple containing elements generated by the call to the function pformat with an argument POST_override ,
0
example# 10246
if POST_override is not None , or otherwise generated with the call to the function pformat with an argument request.POST [ request . POST ] . if Exception exception is caught ,
0
example# 10247
post is a string _STR:0_ .
1
'<could not parse>' ||| _STR:0_
example# 10248
try ,
0
example# 10249
get is a tuple containing elements generated by the call to the function pformat with an argument COOKIES_override ,
0
example# 10250
if COOKIES_override is not None , or otherwise generated with the call to the function pformat with an argument request.COOKIES [ request . COOKIES ] . if Exception exception is caught ,
0
example# 10251
cookies is a string _STR:0_ .
1
'<could not parse>' ||| _STR:0_
example# 10252
try ,
0
example# 10253
get is a tuple containing elements generated by the call to the function pformat with an argument META_override ,
0
example# 10254
if META_override is not None , or otherwise generated with the call to the function pformat with an argument request.META [ request . META ] . if Exception exception is caught ,
0
example# 10255
meta is a string _STR:0_ .
1
'<could not parse>' ||| _STR:0_
example# 10256
substitute path_override for path if path_override is not None , otherwise substitute request.path [ request . path ] for path
0
example# 10257
call the function force_str with an argument string _STR:0_ ,
1
'<%s\npath:%s,\nGET:%s,\nPOST:%s,\nCOOKIES:%s,\nMETA:%s>' ||| _STR:0_
example# 10258
where ' % s ' is replaced with request.__class__.__name__ [ request . __class__ . __name__ ] , path , return value of the function six.text_type [ six . text_type ] called with an argument get , return value of the function six.text_type [ six . text_type ] called with an argument post , return value of the function six.text_type [ six . text_type ] , called with an argument cookies and return value of the function six.text_type [ six . text_type ] called with an argument meta . define the function bytes_to_text with 2 arguments s and encoding .
0
example# 10259
if s is an instance of bytes class ,
0
example# 10260
call the method six.text_type [ six . text_type ] with 3 arguments : s , encoding and string _STR:0_ .
1
'replace' ||| _STR:0_
example# 10261
if not ,
0
example# 10262
return s .
0
example# 10263
define the function split_domain_port with an argument host .
0
example# 10264
convert host to lowercase .
0
example# 10265
call the method host_validation_re.match [ host_validation_re . match ] with an argument host .
0
example# 10266
return an empty string and an empty string .
0
example# 10267
if last element of host equals character _STR:0_ ,
1
']' ||| _STR:0_
example# 10268
return host and an empty string .
0
example# 10269
split host from the right side into 2 parts at the _STR:0_ , substitute the result for bits .
1
':' ||| _STR:0_
example# 10270
if length of bits equals integer 2 ,
0
example# 10271
add bits to a tuple , return it .
0
example# 10272
return the first element of bits and an empty string .
0
example# 10273
define the method validate_host with 2 arguments : host and allowed_hosts .
0
example# 10274
if host ends with _STR:0_ , remove the last element from host .
1
'.' ||| _STR:0_
example# 10275
for every pattern in allowed_hosts :
0
example# 10276
convert pattern to lowercase , substitute it for pattern .
0
example# 10277
if pattern equals _STR:0_ or pattern starts with _STR:1_ or pattern equals host , and only if :
2
'*' ||| _STR:0_
'.' ||| _STR:1_
example# 10278
host ends with _STR:0_ and host ends with pattern or host is equal to all but first elements of pattern , substitute boolean true for match , otherwise substitute boolean False for match . if match is true ,
1
'.' ||| _STR:0_
example# 10279
return boolean True .
0
example# 10280
return boolean False .
0
example# 10281
from __future__ import unicode_literals into default name space .
0
example# 10282
import module datetime .
0
example# 10283
import module json .
0
example# 10284
import module sys .
0
example# 10285
import module time .
0
example# 10286
from email.header [ email . header ] import Header into default name space .
0
example# 10287
from django.conf [ django . conf ] import settings into default name space .
0
example# 10288
from django.core [ django . core ] import signals into default name space .
0
example# 10289
from django.core [ django . core ] import signing into default name space .
0
example# 10290
from django.core.exceptions [ django . core . exceptions ] import DisallowedRedirect into default name space .
0
example# 10291
from django.core.serializers.json [ django . core . serializers . json ] import DjangoJSONEncode into default name space .
0
example# 10292
from django.http.cookie [ django . http . cookie ] import SimpleCookie into default name space .
0
example# 10293
from django.utils [ django . utils ] import six and timezone into default name space .
0
example# 10294
from django.utils.encoding [ django . utils . encoding ] import force_bytes , force_text and iri_to_uri into default name space .
0
example# 10295
from django.utils.http [ django . utils . http ] import cookie_date into default name space .
0
example# 10296
from django.utils.six.moves [ django . utils . six . moves ] import map into default name space .
0
example# 10297
from django.utils.six.moves.urllib.parse [ django . utils . six . moves . urllib . parse ] import urlparse into default name space .
0
example# 10298
REASON_PHRASES is a dictionary containing 59 initial entries : _STR:0_ for 100 , _STR:1_ for 101 ,
2
'SWITCHING PROTOCOLS' ||| _STR:1_
'CONTINUE' ||| _STR:0_
example# 10299
_STR:0_ for 102 , _STR:1_ for 200 , _STR:2_ for 201 , _STR:3_ for 202 , _STR:4_ for 203 , _STR:5_ for 204 , _STR:6_ for 205 , _STR:7_ for 206 , _STR:8_ for 207 , _STR:9_ for 208 , _STR:10_ for 226 , _STR:11_ for 300 , _STR:12_ for 301 , _STR:13_ for 302 , _STR:14_ for 303 , _STR:15_ for 304 , _STR:16_ for 305 , _STR:17_ for 306 , _STR:18_ for 307 , _STR:19_ for 308 , _STR:20_ for 400 , _STR:21_ for 401 , _STR:22_ for 402 , _STR:23_ for 403 , _STR:24_ for 404 , _STR:25_ for 405 , _STR:26_ for 406 , _STR:27_ for 407 , _STR:28_ for 408 , _STR:29_ for 409 , _STR:30_ for 410 , _STR:31_ for 411 , _STR:32_ for 412 , _STR:33_ for 413 , _STR:34_ for 414 , _STR:35_ for 415 , _STR:36_ for 416 , _STR:37_ for 417 , _STR:38_M A TEAPOT_STR:39_UNPROCESSABLE ENTITY_STR:40_LOCKED_STR:41_FAILED DEPENDENCY_STR:42_UPGRADE REQUIRED_STR:43_PRECONDITION REQUIRED_STR:44_TOO MANY REQUESTS_STR:45_REQUEST HEADER FIELDS TOO LARGE_STR:46_INTERNAL SERVER ERROR_STR:47_NOT IMPLEMENTED_STR:48_BAD GATEWAY_STR:49_SERVICE UNAVAILABLE_STR:50_GATEWAY TIMEOUT_STR:51_HTTP VERSION NOT SUPPORTED_STR:52_VARIANT ALSO NEGOTIATES_STR:53_INSUFFICIENT STORAGE_STR:54_LOOP DETECTED_STR:55_NOT EXTENDED_STR:56_NETWORK AUTHENTICATION REQUIRED ' for 511. derive the class BadHeaderError from the ValueError base class .
57
'RESERVED' ||| _STR:17_
'NO CONTENT' ||| _STR:5_
'NON-AUTHORITATIVE INFORMATION' ||| _STR:4_
'MOVED PERMANENTLY' ||| _STR:12_
'REQUEST-URI TOO LONG' ||| _STR:34_
' for 431,   ' ||| _STR:46_
'MULTIPLE CHOICES' ||| _STR:11_
'FOUND' ||| _STR:13_
' for 510 and ' ||| _STR:56_
' for 505, ' ||| _STR:52_
'REQUEST TIMEOUT' ||| _STR:28_
' for 507,   ' ||| _STR:54_
'IM USED' ||| _STR:10_
' for 424,   ' ||| _STR:42_
'RESET CONTENT' ||| _STR:6_
'MULTI-STATUS' ||| _STR:8_
'USE PROXY' ||| _STR:16_
'UNSUPPORTED MEDIA TYPE' ||| _STR:35_
'NOT ACCEPTABLE' ||| _STR:26_
' for 426, ' ||| _STR:43_
' for 429, ' ||| _STR:45_
'PARTIAL CONTENT' ||| _STR:7_
'PRECONDITION FAILED' ||| _STR:32_
'SEE OTHER' ||| _STR:14_
'ACCEPTED' ||| _STR:3_
' for 418, ' ||| _STR:39_
' for 500, ' ||| _STR:47_
'EXPECTATION FAILED' ||| _STR:37_
' for 504, ' ||| _STR:51_
'PERMANENT REDIRECT' ||| _STR:19_
'PROCESSING' ||| _STR:0_
'REQUESTED RANGE NOT SATISFIABLE' ||| _STR:36_
' for 428, ' ||| _STR:44_
'NOT FOUND' ||| _STR:24_
'OK' ||| _STR:1_
'FORBIDDEN' ||| _STR:23_
'TEMPORARY REDIRECT' ||| _STR:18_
'I' ||| _STR:38_
'CREATED' ||| _STR:2_
'UNAUTHORIZED' ||| _STR:21_
'ALREADY REPORTED' ||| _STR:9_
'NOT MODIFIED' ||| _STR:15_
' for 422, ' ||| _STR:40_
' for 506, ' ||| _STR:53_
' for 501, ' ||| _STR:48_
' for 503,   ' ||| _STR:50_
'LENGTH REQUIRED' ||| _STR:31_
' for 508, ' ||| _STR:55_
'REQUEST ENTITY TOO LARGE' ||| _STR:33_
'CONFLICT' ||| _STR:29_
'BAD REQUEST' ||| _STR:20_
'METHOD NOT ALLOWED' ||| _STR:25_
' for 502, ' ||| _STR:49_
' for 423, ' ||| _STR:41_
'PROXY AUTHENTICATION REQUIRED' ||| _STR:27_
'PAYMENT REQUIRED' ||| _STR:22_
'GONE' ||| _STR:30_
example# 10300
do nothing .
0
example# 10301
derive the class HttpResponseBase from the six.Iterator [ six . Iterator ] base class .
0
example# 10302
status_code is an integer 200 .
0
example# 10303
reason_phrase is None .
0
example# 10304
define the method __init__ with 4 arguments : self , content_type set to None , status set to None , reason set to None .
0
example# 10305
self._headers [ self . _headers ] is an empty dictionary .
0
example# 10306
substitute settings.DEFAULT_CHARSET [ settings . DEFAULT_CHARSET ] for self._charset [ self . _charset ] .
0
example# 10307
self._closable_objects [ self . _closable_objects ] is an empty list .
0
example# 10308
self._handler_class [ self . _handler_class ] is None .
0
example# 10309
if content_type is false ,
0
example# 10310
replace ' % s ' in string _STR:0_ with settings.DEFAULT_CONTENT_TYPE [ settings . DEFAULT_CONTENT_TYPE ] and self._charset [ self . _charset ] , substitute it for content_type .
1
"%s; charset=%s" ||| _STR:0_
example# 10311
self.cookies [ self . cookies ] is an instance of a class SimpleCookie .
0
example# 10312
if status is not None .
0
example# 10313
substitute status for self.status_code [ self . status_code ] .
0
example# 10314
if reason is not None ,
0
example# 10315
substitute reason for self.reason_phrase [ self . reason_phrase ] .
0
example# 10316
otherwise if self.reason_phrase [ self . reason_phrase ] is None ,
0
example# 10317
get the value under the self.status_code [ self . status_code ] key of the REASON_PHRASES dictionary , if it exists substitute it for the self.reason_phrase [ self . reason_phrase ] ,
0
example# 10318
if not , self.reason_phrase [ self . reason_phrase ] is a string _STR:0_ . substitute content_type for value under the _STR:1_ key of the self dictionary .
2
'Content-Type' ||| _STR:1_
'UNKNOWN STATUS CODE' ||| _STR:0_
example# 10319
define the method serialize_headers with an argument self .
0
example# 10320
define the function to_bytes with arguments val and encoding .
0
example# 10321
if val is an instance of bytes , return val , otherwise return result of the method val.encode [ val . encode ] called with an argument encoding .
0
example# 10322
for every key and value in return value of the self._headers.values [ self . _headers . values ] method , call the function to_bytes with 2 arguments : key ,
0
example# 10323
and string _STR:0_ and call the function to_bytes with 2 arguments : value and string _STR:1_ , join the previous 2 results into a string , separated by _STR:2_ , append it to a list , substitute the resulting list for headers . join headers into a string , separated by string _STR:3_ .
4
'ascii' ||| _STR:0_
'latin-1' ||| _STR:1_
'\r\n' ||| _STR:3_
': ' ||| _STR:2_
example# 10324
if six.PY3 [ six . PY3 ] is true ,
0
example# 10325
substitute serialize_headers for __bytes__ .
0
example# 10326
if not ,
0
example# 10327
substitute serialize_headers for __str__ .
0
example# 10328
define the method _convert_to_charset with 4 arguments : self , value , charset and mime_encode set to boolean False .
0
example# 10329
if value is not an instance of bytes or six.text_type [ six . text_type ] classes ,
0
example# 10330
convert value to an string and substitute it for value .
0
example# 10331
try ,
0
example# 10332
if six.PY3 [ six . PY3 ] is true ,
0
example# 10333
if value is an instance of str type ,
0
example# 10334
call the method value.encode [ value . encode ] with an argument charset .
0
example# 10335
if not ,
0
example# 10336
call the method value.decode [ value . decode ] with an argument charset , substitute the result for value .
0
example# 10337
if not ,
0
example# 10338
if value is an instance of str type ,
0
example# 10339
call the method value.decode [ value . decode ] with an argument charset .
0
example# 10340
if not ,
0
example# 10341
call the method value.encode [ value . encode ] with an argument charset , substitute the result for value .
0
example# 10342
if UnicodeError , renamed to e , exception is caught ,
0
example# 10343
if mime_encode is true ,
0
example# 10344
instantiate class Header with 3 arguments : value , string _STR:0_ , maxlinelen set to sys.maxsize [ sys . maxsize ] , call the encode method on it ,
1
'utf-8' ||| _STR:0_
example# 10345
convert the result into a string and substitute it for value . if not ,
0
example# 10346
replace ' % s ' in string _STR:0_ for charset , append it to e.reason [ e . reason ] .
1
', HTTP response headers must be in %s format' ||| _STR:0_
example# 10347
raise an exception .
0
example# 10348
convert _STR:0_ to a string , if it is contained in value or _STR:1_ converted to an string is contained in value ,
2
'\r' ||| _STR:1_
'\n' ||| _STR:0_
example# 10349
raise an BadHeaderError exception with an argument string _STR:0_ , where _STR:1_ is replaced with value .
2
"Header values can't contain newlines (got %r)" ||| _STR:0_
'%r' ||| _STR:1_
example# 10350
return value .
0
example# 10351
define the method __setitem__ with 3 arguments : self , header and value .
0
example# 10352
call the method self._convert_to_charset [ self . _convert_to_charset ] with arguments : header and string _STR:0_ , substitute the result for header .
1
'ascii' ||| _STR:0_
example# 10353
call the method self._convert_to_charset [ self . _convert_to_charset ] with arguments : header , string _STR:0_ and mime_encode set to boolean True ,
1
'latin-1' ||| _STR:0_
example# 10354
substitute the result for value . substitute tuple containing 2 elements : header and value for the value under the header converted to lowercase key of the self._headers [ self . _headers ] dictionary .
0
example# 10355
define the method __delitem__ with 2 arguments : self and header .
0
example# 10356
try ,
0
example# 10357
delete the value under the header converted to lowercase key of the self._headers [ self . _headers ] dictionary .
0
example# 10358
if KeyError exception is caught ,
0
example# 10359
do nothing .
0
example# 10360
define the method __getitem__ with 2 arguments : self and header .
0
example# 10361
convert header to lowercase , use it as the key to get the value from the self._headers [ self . _headers ] dictionary , return the second element of the result .
0
example# 10362
define the method __getstate__ with an argument self .
0
example# 10363
call the method self.__dict__.copy [ self . __dict__ . copy ] , substitute the result for state .
0
example# 10364
get the value under the _STR:0_ key of the state dictionary ,
1
'cookies' ||| _STR:0_
example# 10365
convert it to a string and substitute it for value under the _STR:0_ key of the state dictionary . return state .
1
'cookies' ||| _STR:0_
example# 10366
define the method __setstate__ with 2 arguments : self and state .
0
example# 10367
add state element to self.__dict__ [ self . __dict__ ] dictionary .
0
example# 10368
self.cookies [ self . cookies ] is an instance of SimpleCookie class created with self.cookies [ self . cookies ] as an argument .
0
example# 10369
define the method has_header with 2 arguments : self and header .
0
example# 10370
convert deader to lowercase , if it is contained in self._headers [ self . _headers ] return boolean True , if not , return boolean False .
0
example# 10371
substitute has_header for __contains__ .
0
example# 10372
define the method items with an argument self .
0
example# 10373
call the method self._headers.values [ self . _headers . values ] , return the result ,
0
example# 10374
define the method get with 3 arguments : self , header and alternate set to None .
0
example# 10375
convert header to lowercase , use it to as a key to get the value of the self._headers [ self . _headers ] dictionary ,
0
example# 10376
if it exists return the second element of the result , if not , return alternate . define the method set_cookie with 9 arguments : self , key , value set to an empty string , max_age set to None , expires set to None ,
0
example# 10377
substitute value for self.cookies [ self . cookies ] dictionary value under the key key .
0
example# 10378
if expires is not None ,
0
example# 10379
if expires is an instance of datetime.datetime [ datetime . datetime ] class ,
0
example# 10380
call the method timezone.is_aware [ timezone . is_aware ] with an argument expires , if it evaluates to true ,
0
example# 10381
call the method timezone.make_naive [ timezone . make_naive ] with arguments : expires , timezone.utc [ timezone . utc ] , substitute the result for expires .
0
example# 10382
call the method expires.utcnow [ expires . utcnow ] , subtract the result from expires , substitute the result for delta .
0
example# 10383
call the method datetime.timedelta [ datetime . timedelta ] with an argument seconds set to integer 1 , increment delta by it .
0
example# 10384
expires is None .
0
example# 10385
multiply delta.days [ delta . days ] with an integer 86400 add to the result delta.seconds [ delta . seconds ] , if the result is greater than integer 0 ,
0
example# 10386
substitute it for max_age , if not , max_age is integer 0. if not ,
0
example# 10387
get the value under the key key of the self.cookies [ self . cookies ] dictionary , substitute expires for _STR:0_ key of the returned dictionary .
1
'expires' ||| _STR:0_
example# 10388
if max_age is not None ,
0
example# 10389
get the value under the key key of the self.cookies [ self . cookies ] dictionary , substitute max-age for _STR:0_ key of the returned dictionary .
1
'max-age' ||| _STR:0_
example# 10390
if expires is false ,
0
example# 10391
get the value under the key key of the self.cookies [ self . cookies ] dictionary , call the cookie_date function with an argument :
0
example# 10392
sum of the result of the function time.time [ time . time ] and max_age , substitute it for _STR:0_ key of the previously returned dictionary . if path is not None ,
1
'expires' ||| _STR:0_
example# 10393
get the value under the key key of the self.cookies [ self . cookies ] dictionary , substitute path for _STR:0_ key of the returned dictionary .
1
'path' ||| _STR:0_
example# 10394
if domain is not None ,
0
example# 10395
get the value under the key key of the self.cookies [ self . cookies ] dictionary , domain expires for _STR:0_ key of the returned dictionary .
1
'domain' ||| _STR:0_
example# 10396
if secure is true ,
0
example# 10397
get the value under the key key of the self.cookies [ self . cookies ] dictionary , substitute boolean True for _STR:0_ key of the returned dictionary .
1
'secure' ||| _STR:0_
example# 10398
if httponly is true ,
0
example# 10399
get the value under the key key of the self.cookies [ self . cookies ] dictionary , substitute boolean True for _STR:0_ key of the returned dictionary .
1
'httponly' ||| _STR:0_
example# 10400
define the method set_signed_cookie with 5 arguments : self , key , value , salt as an empty string and unpacked dictionary kwarg .
0
example# 10401
call the method signing.get_cookie_signer [ signing . get_cookie_signer ] with an argument salt set to sum of key and salt ,
0
example# 10402
call the method sign on the result with an argument value , substitute the result for value . call the method self.set_cookie [ self . set_cookie ] with 3 arguments : key , value and unpacked dictionary kwargs , return the result .
0
example# 10403
define the method delete_cookie with 4 arguments : self , key , path set to character _STR:0_ and domain set to None .
1
'/' ||| _STR:0_
example# 10404
call the method self.set_cookie [ self . set_cookie ] with 5 arguments : key , max_age as integer 0 , path as path , domain as domain ,
0
example# 10405
expires as a string _STR:0_ , return the result . define the method make_bytes with 2 arguments : self and value .
1
'Thu, 01-Jan-1970 00:00:00 GMT' ||| _STR:0_
example# 10406
call the method self.has_header [ self . has_header ] with string _STR:0_ as an argument , if it evaluates to true ,
1
'Content-Encoding' ||| _STR:0_
example# 10407
call the function bytes with an argument value , return the result .
0
example# 10408
if value is an instance of bytes class ,
0
example# 10409
call the function bytes with an argument value , return the result .
0
example# 10410
if value is an instance of six.text_type [ six . text_type ] class ,
0
example# 10411
call the method value.encode [ value . encode ] with an argument self._charset [ self . _charset ] , use the result as an argument for the call to the bytes function ,
0
example# 10412
return the result . call the function force_bytes with arguments value and self._charset [ self . _charset ] , return the result .
0
example# 10413
define the method close with an argument self .
0
example# 10414
for every closable in self._closable_objects [ self . _closable_objects ] ,
0
example# 10415
try ,
0
example# 10416
call the method closable.close [ closable . close ] .
0
example# 10417
if Exception exception is caught ,
0
example# 10418
do nothing .
0
example# 10419
call the method signals.request_finished.send [ signals . request_finished . send ] with an argument sender set to self._handler_class [ self . _handler_class ] .
0
example# 10420
define the method write with 2 arguments : self and value .
0
example# 10421
raise an Exception exception with an argument string _STR:0_ ,
1
"This %s instance is not writable" ||| _STR:0_
example# 10422
where ' % s ' is replaced with self.__class__.__name__ [ self . __class__ . __name__ ] . define the method flush with an argument self .
0
example# 10423
do nothing .
0
example# 10424
define the method tell with an argument self .
0
example# 10425
raise an Exception exception with an argument string _STR:0_ ,
1
"This %s instance cannot tell its position" ||| _STR:0_
example# 10426
where ' % s ' is replaced with self.__class__.__name__ [ self . __class__ . __name__ ] . derive the class HttpResponse from the HttpResponseBase base class .
0
example# 10427
streaming is boolean False .
0
example# 10428
define the method __init__ with 4 arguments : self , content set to an empty list , unpacked list args and unpacked dictionary kwargs .
0
example# 10429
call the __init__ method from the base class of the HttpResponse class , with the arguments : unpacked list args and unpacked dictionary kwargs .
0
example# 10430
substitute content for self.content [ self . content ] .
0
example# 10431
define the serialize content with an argument self .
0
example# 10432
call method self.serialize_headers [ self . serialize_headers ] , append bytes string _STR:0_ to the result , append self.content [ self . content ] to the result , return it .
1
'\r\n\r\n' ||| _STR:0_
example# 10433
if six.PY3 [ six . PY3 ] is true ,
0
example# 10434
substitute serialize for __bytes__ .
0
example# 10435
if not ,
0
example# 10436
substitute serialize for __str__ .
0
example# 10437
property decorator ,
0
example# 10438
define the method content with an argument self .
0
example# 10439
join self._container [ self . _container ] elements into a string , return it .
0
example# 10440
content.setter [ content . setter ] decorator ,
0
example# 10441
define the method content with 2 arguments : self and value .
0
example# 10442
if value has an _STR:0_ attribute and value is not an instance of bytes or six.string_types [ six . string_types ] class .
1
'__iter__' ||| _STR:0_
example# 10443
if value has an _STR:0_ attribute ,
1
'close' ||| _STR:0_
example# 10444
append value to the self._closable_objects [ self . _closable_objects ] list .
0
example# 10445
call the self.make_bytes [ self . make_bytes ] method with an argument chunk , for every chunk in value join the result to a bytes string ,
0
example# 10446
substitute the result for value . if not ,
0
example# 10447
call the method self.make_bytes [ self . make_bytes ] with an argument value , substitute the result for value .
0
example# 10448
self._container [ self . _container ] is a list containing element value .
0
example# 10449
define the method __iter__ with an argument self .
0
example# 10450
return self._container [ self . _container ] converted into a iterable .
0
example# 10451
define the method write with 2 arguments : self and content .
0
example# 10452
call the method self.make_bytes [ self . make_bytes ] with an argument content , append it to self._container [ self . _container ] .
0
example# 10453
define the method tell with an argument self .
0
example# 10454
return the length of self.content [ self . content ] .
0
example# 10455
derive the class StreamingHttpResponse from the HttpResponseBase base class .
0
example# 10456
streaming is boolean True .
0
example# 10457
define the method __init__ with 4 arguments : self , result of the function streaming_content= ( ) , unpacked list args ,
0
example# 10458
and unpacked dictionary kwargs . call the __init__ method from the base class of the StreamingHttpResponse class , called with arguments : unpacked list args ,
0
example# 10459
and unpacked dictionary kwargs . substitute streaming_content for self.streaming_content [ self . streaming_content ] .
0
example# 10460
property decorator ,
0
example# 10461
define the method content with an argument self .
0
example# 10462
raise an AttributeError with an argument string _STR:0_Use `streaming_content` instead . `` ,
1
"This %s instance has no `content` attribute. " ||| _STR:0_
example# 10463
where ' % s ' is replaced with self.__class__.__name__ [ self . __class__ . __name__ ] . property decorator ,
0
example# 10464
define the method serialize_headers with an argument self .
0
example# 10465
map elements of self._iterator [ self . _iterator ] through self.make_bytes [ self . make_bytes ] function , return the result .
0
example# 10466
streaming_content.setter [ streaming_content . setter ] decorator ,
0
example# 10467
define the method streaming_content with 2 arguments : self and value .
0
example# 10468
convert value into a iterator , substitute the result for self._iterator [ self . _iterator ] .
0
example# 10469
if value has an attribute _STR:0_ ,
1
'close' ||| _STR:0_
example# 10470
append value to self._closable_objects [ self . _closable_objects ] list .
0
example# 10471
define the method __iter__ with an argument self .
0
example# 10472
return self.streaming_content [ self . streaming_content ]
0
example# 10473
derive the class HttpResponseRedirectBase from the HttpResponse base class .
0
example# 10474
allowed_schemes is an list containing 3 elements : strings _STR:0_ , _STR:1_ and _STR:2_ .
3
'https' ||| _STR:1_
'http' ||| _STR:0_
'ftp' ||| _STR:2_
example# 10475
define the method __init__ with 4 arguments : self , redirect_to , unpacked list args and unpacked dictionary kwargs .
0
example# 10476
call the function force_text with an argument redirect_to , use the result as an argument for the call to the function urlparse ,
0
example# 10477
substitute the result for parsed . if parsed.scheme [ parsed . scheme ] is true and parsed.scheme [ parsed . scheme ] is not contained in self.allowed_schemes [ self . allowed_schemes ] ,
0
example# 10478
raise an DisallowedRedirect exception with an argument string _STR:0_ ,
1
"Unsafe redirect to URL with protocol '%s'" ||| _STR:0_
example# 10479
where ' % s ' is replaced with parsed.scheme [ parsed . scheme ] . call the __init__ method from the base class of the HttpResponseRedirectBase class , called with arguments : unpacked list args ,
0
example# 10480
and unpacked dictionary kwargs . call the function iri_to_uri with an argument redirect_to , substitute the result for the value under the _STR:0_ key of the self dictionary .
1
'Location' ||| _STR:0_
example# 10481
url is a property of the class , lambda function is getter attribute with an argument self and return value is the value under the _STR:0_ key of the self dictionary .
1
'Location' ||| _STR:0_
example# 10482
derive the class HttpResponseRedirect from the HttpResponseRedirectBase base class .
0
example# 10483
status_code is an integer 302 .
0
example# 10484
derive the class HttpResponsePermanentRedirect from the HttpResponseRedirectBase base class .
0
example# 10485
status_code is an integer 301 .
0
example# 10486
derive the class HttpResponseNotModified from the HttpResponse base class .
0
example# 10487
status_code is an integer 304 .
0
example# 10488
define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
0
example# 10489
call the __init__ method from the base class of the HttpResponseNotModified class , called with arguments : unpacked list args ,
0
example# 10490
and unpacked dictionary kwargs . delete the value under the _STR:0_ key of the self dictionary .
1
'content-type' ||| _STR:0_
example# 10491
HttpResponse.content.setter [ HttpResponse . content . setter ] property ,
0
example# 10492
define the method content with self and value .
0
example# 10493
if value ,
0
example# 10494
raise an AttributeError exception with an argument string _STR:0_ .
1
"You cannot set content to a 304 (Not Modified) response" ||| _STR:0_
example# 10495
self._container [ self . _container ] is an list .
0
example# 10496
derive the class HttpResponseBadRequest from the HttpResponse base class .
0
example# 10497
status_code is an integer 400 .
0
example# 10498
derive the class HttpResponseNotFound from the HttpResponse base class .
0
example# 10499
status_code is an integer 404 .
0
example# 10500
derive the class HttpResponseForbidden from the HttpResponse base class .
0
example# 10501
status_code is an integer 403 .
0
example# 10502
derive the class HttpResponseNotAllowed from the HttpResponse base class .
0
example# 10503
status_code is an integer 405 .
0
example# 10504
define the method __init__ with 4 arguments : self , permitted_methods , unpacked list args and unpacked dictionary kwargs .
0
example# 10505
call the __init__ method from the base class of the HttpResponseNotAllowed class , called with arguments : unpacked list args ,
0
example# 10506
and unpacked dictionary kwargs . join into a string permitted_methods , separated by string _STR:0_ , substitute it for value under the _STR:1_ key of the self dictionary .
2
', ' ||| _STR:0_
'Allow' ||| _STR:1_
example# 10507
derive the class HttpResponseGone from the HttpResponse base class .
0
example# 10508
status_code is an integer 410 .
0
example# 10509
derive the class HttpResponseServerError from the HttpResponse base class .
0
example# 10510
status_code is an integer 500 .
0
example# 10511
derive the class Http404 from the Exception base class .
0
example# 10512
do nothing .
0
example# 10513
derive the class JsonResponse from the HttpResponse base class .
0
example# 10514
define the method __init__ with 5 arguments : self , data , encoder set to DjangoJSONEncoder , safe set to boolean True ,
0
example# 10515
and unpacked dictionary kwargs . if safe is true and data is not an instance of dict type .
0
example# 10516
raise an TypeError exception with an argument string _STR:0_ .
1
'In order to allow non-dict objects to be serialized set the safe parameter to False' ||| _STR:0_
example# 10517
if _STR:0_ key doesnt exist in kwargs , set its value to _STR:1_ .
2
'application/json' ||| _STR:1_
'content_type' ||| _STR:0_
example# 10518
serialize data to JSON format with cls set to encoder , substitute it for data .
0
example# 10519
call the __init__ method from the base class of the JsonResponse class , called with arguments : content set to data ,
0
example# 10520
define function fix_location_header with request and response as arguments .
0
example# 10521
if _STR:0_ is contained in response and function request.get_host [ request . get_host ] evaluates to True ,
1
'Location' ||| _STR:0_
example# 10522
modify value at the key _STR:0_ of the dictionary response by applying function request.build_absolute_uri [ request . build_absolute_uri ] on it .
1
'Location' ||| _STR:0_
example# 10523
return response .
0
example# 10524
define the function conditional_content_removal with request and response as the arguments .
0
example# 10525
if response.status_code [ response . status_code ] is lesser than integer 200 and grater or equal than 100 , or response.status_code [ response . status_code ] equals to integer 204 or 304 ,
0
example# 10526
if response.streaming [ response . streaming ] is True ,
0
example# 10527
response.streaming_content [ response . streaming_content ] is an empty list .
0
example# 10528
if not ,
0
example# 10529
response.content [ response . content ] is bytes empty string .
0
example# 10530
substitute char _STR:0_ for the value under the _STR:1_ key of the response dictionary .
2
'Content-Length' ||| _STR:1_
'0' ||| _STR:0_
example# 10531
if request.method [ request . method ] equals to string _STR:0_ ,
1
'HEAD' ||| _STR:0_
example# 10532
if response.streaming [ response . streaming ] is true ,
0
example# 10533
response.streaming_content [ response . streaming_content ] is an empty list .
0
example# 10534
if not ,
0
example# 10535
response.content [ response . content ] is bytes empty string .
0
example# 10536
return response .
0
example# 10537
from django.template.base [ django . template . base ] import ALLOWED_VARIABLE_CHARS , BLOCK_TAG_END , BLOCK_TAG_START , COMMENT_TAG_END , COMMENT_TAG_START ,
0
example# 10538
FILTER_ARGUMENT_SEPARATOR , FILTER_SEPARATOR , SINGLE_BRACE_END , SINGLE_BRACE_START , TOKEN_BLOCK , TOKEN_COMMENT , TOKEN_TEXT , TOKEN_VAR , TRANSLATOR_COMMENT_MARK , UNKNOWN_SOURCE , VARIABLE_ATTRIBUTE_SEPARATOR , VARIABLE_TAG_END , VARIABLE_TAG_START , filter_re and tag_re . from django.template.base [ django . template . base ] import ContextPopException , InvalidTemplateLibrary , TemplateDoesNotExist , TemplateEncodingError ,
0
example# 10539
TemplateSyntaxError and VariableDoesNotExist . from django.template.base [ django . template . base ] import Context , FilterExpression , Lexer , Node , NodeList , Parser , RequestContext , Origin , StringOrigin ,
0
example# 10540
Template , TextNode , Token , TokenParser , Variable , VariableNode , constant_string and filter_raw_string . from django.template.base [ django . template . base ] import compile_string , resolve_variable , unescape_string_literal and generic_tag_compiler .
0
example# 10541
from django.template.base [ django . template . base ] import Library , add_to_builtins , builtins , get_library , get_templatetags_modules , get_text_list ,
0
example# 10542
import_library and libraries . __all__ is a tuple containing 4 strings : _STR:0_ , _STR:1_ , _STR:2_ and _STR:3_ .
4
'compile_string' ||| _STR:3_
'Context' ||| _STR:1_
'RequestContext' ||| _STR:2_
'Template' ||| _STR:0_
example# 10543
from __future__ import unicode_literals into default name space .
0
example# 10544
import module re .
0
example# 10545
from functools import partial into default name space .
0
example# 10546
from importlib import import_module into default name space .
0
example# 10547
from inspect import getargspec and getcallargs into default name space .
0
example# 10548
import module warnings .
0
example# 10549
from django.apps [ django . apps ] import apps into default name space .
0
example# 10550
from django.conf [ django . conf ] import settings into default name space .
0
example# 10551
from django.template.context [ django . template . context ] import BaseContext , Context , RequestContext and ContextPopException into default namespace .
0
example# 10552
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango20Warning into default name space .
0
example# 10553
from django.utils.itercompat [ django . utils . itercompat ] import is_iterable into default name space .
0
example# 10554
from django.utils.text [ django . utils . text ] import smart_split , unescape_string_literal and get_text_list into default namespace .
0
example# 10555
from django.utils.encoding [ django . utils . encoding ] import force_str and force_text into default name space .
0
example# 10556
from django.utils.translation [ django . utils . translation ] import ugettext_lazy and pgettext_lazy into default name space .
0
example# 10557
from django.utils.safestring [ django . utils . safestring ] import SafeData , EscapeData , mark_safe and mark_for_escaping into default namespace .
0
example# 10558
from django.utils.formats [ django . utils . formats ] import localize into default name space .
0
example# 10559
from django.utils.html [ django . utils . html ] import escape into default name space .
0
example# 10560
from django.utils.module_loading [ django . utils . module_loading ] import module_has_submodule into default name space .
0
example# 10561
from django.utils [ django . utils ] import six into default name space .
0
example# 10562
from django.utils.timezone [ django . utils . timezone ] import template_localtime into default name space .
0
example# 10563
from django.utils.encoding [ django . utils . encoding ] import python_2_unicode_compatible into default name space .
0
example# 10564
TOKEN_TEXT is integer 0
0
example# 10565
TOKEN_VAR is integer 1
0
example# 10566
TOKEN_BLOCK is integer 2
0
example# 10567
TOKEN_COMMENT is integer 3 .
0
example# 10568
TOKEN_MAPPING is a dictionary with 4 initial entries : _STR:0_ for TOKEN_TEXT , _STR:1_ for TOKEN_VAR , _STR:2_ for TOKEN_BLOCK ,
3
'Block' ||| _STR:2_
'Var' ||| _STR:1_
'Text' ||| _STR:0_
example# 10569
and _STR:0_ for TOKEN_COMMENT . FILTER_SEPARATOR is a string _STR:1_ .
2
'Comment' ||| _STR:0_
'|' ||| _STR:1_
example# 10570
FILTER_ARGUMENT_SEPARATOR is a string _STR:0_ .
1
':' ||| _STR:0_
example# 10571
VARIABLE_ATTRIBUTE_SEPARATOR is a string _STR:0_ .
1
'.' ||| _STR:0_
example# 10572
BLOCK_TAG_START is a string _STR:0_ .
1
'{%' ||| _STR:0_
example# 10573
BLOCK_TAG_END is a string _STR:0_ .
1
'%}' ||| _STR:0_
example# 10574
VARIABLE_TAG_START is a string _STR:0_ .
1
'{{' ||| _STR:0_
example# 10575
VARIABLE_TAG_END is a string _STR:0_ .
1
'}}' ||| _STR:0_
example# 10576
COMMENT_TAG_START is a string _STR:0_ .
1
'{#' ||| _STR:0_
example# 10577
COMMENT_TAG_END is a string _STR:0_ .
1
'#}' ||| _STR:0_
example# 10578
TRANSLATOR_COMMENT_MARK is a string _STR:0_ .
1
'Translators' ||| _STR:0_
example# 10579
SINGLE_BRACE_START is a string _STR:0_ .
1
'{' ||| _STR:0_
example# 10580
SINGLE_BRACE_END is a string _STR:0_ .
1
'}' ||| _STR:0_
example# 10581
ALLOWED_VARIABLE_CHARS is a string _STR:0_ .
1
'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.' ||| _STR:0_
example# 10582
UNKNOWN_SOURCE is a string _STR:0_ .
1
'<unknown source>' ||| _STR:0_
example# 10583
call the function re.compile [ re . compile ] with an argument string _STR:0_ , substitute all occurrences of ' % s ' with ,
1
'(%s.*?%s|%s.*?%s|%s.*?%s)' ||| _STR:0_
example# 10584
return value of the function re.escape [ re . escape ] called with an argument BLOCK_TAG_START , return value of the function re.escape [ re . escape ] called with an argument BLOCK_TAG_END , return value of the function re.escape [ re . escape ] called with an argument VARIABLE_TAG_START , return value of the function re.escape [ re . escape ] called with an argument VARIABLE_TAG_END , return value of the function re.escape [ re . escape ] called with an argument COMMENT_TAG_START , and return value of the function re.escape [ re . escape ] called with an argument COMMENT_TAG_END , substitute the result for tag_re . libraries is an empty dictionary .
0
example# 10585
builtins is an empty list .
0
example# 10586
invalid_var_format_string is None .
0
example# 10587
derive the class TemplateSyntaxError form the base class Exception .
0
example# 10588
do nothing .
0
example# 10589
derive the class TemplateDoesNotExist form the base class Exception .
0
example# 10590
do nothing .
0
example# 10591
derive the class TemplateEncodingError form the base class Exception .
0
example# 10592
do nothing .
0
example# 10593
python_2_unicode_compatible decorator ,
0
example# 10594
derive the class VariableDoesNotExist form the base class Exception .
0
example# 10595
define the method __init__ with 3 arguments : self , msg and params set to an empty tuple .
0
example# 10596
substitute msg for self.msg [ self . msg ] .
0
example# 10597
substitute params for self.params [ self . params ] .
0
example# 10598
define the method __str__ with an argument self .
0
example# 10599
return self.msg [ self . msg ] formatted with a tuple , with elements generated from return value of the function force_text with 2 arguments :
0
example# 10600
p and errors set to string _STR:0_ , for p in self.params [ self . params ] . derive the class InvalidTemplateLibrary form the base class Exception .
1
'replace' ||| _STR:0_
example# 10601
do nothing .
0
example# 10602
derive the class Origin form the base class object .
0
example# 10603
define the method __init__ with 2 arguments : self and name .
0
example# 10604
substitute name for self.name [ self . name ] .
0
example# 10605
define the method reload with an argument self .
0
example# 10606
raise an NotImplementedError exception with an argument string _STR:0_ .
1
'subclasses of Origin must provide a reload() method' ||| _STR:0_
example# 10607
define the method with reload with an argument self .
0
example# 10608
return self.name [ self . name ] .
0
example# 10609
derive the class StringOrigin form the base class Origin .
0
example# 10610
define the method __init__ with 2 arguments : self and source .
0
example# 10611
call the method __init__ with an argument UNKNOWN_SOURCE , from the base class of the class StringOrigin .
0
example# 10612
substitute source for self.source [ self . source ] .
0
example# 10613
define the method with reload with an argument self .
0
example# 10614
return self.source [ self . source ] .
0
example# 10615
derive the class Template form the base class object .
0
example# 10616
define the method __init__ with 4 arguments : self , template_string , origin set to None and name set to None .
0
example# 10617
try ,
0
example# 10618
call the function force_text with an argument template_string .
0
example# 10619
if UnicodeDecodeError exception is caught ,
0
example# 10620
raise an TemplateEncodingError exception with an argument _STR:0_ .
1
"Templates can only be constructed from unicode or UTF-8 strings." ||| _STR:0_
example# 10621
if settings.TEMPLATE_DEBUG [ settings . TEMPLATE_DEBUG ] is true and origin is None ,
0
example# 10622
origin is an instance of StringOrigin class created with an argument template_string .
0
example# 10623
call the function compile_string with 2 arguments : template_string and origin , substitute the result for self.nodelist [ self . nodelist ] .
0
example# 10624
substitute name for self.name [ self . name ] .
0
example# 10625
substitute origin for self.origin [ self . origin ] .
0
example# 10626
define the method __iter__ with an argument self .
0
example# 10627
for every node in self.nodelist [ self . nodelist ] ,
0
example# 10628
for every subnode in node ,
0
example# 10629
yield subnode .
0
example# 10630
define the method _render with 2 arguments self and context .
0
example# 10631
call the method self.nodelist.render [ self . nodelist . render ] with an argument context , return the result .
0
example# 10632
define the method render with 2 arguments self and context .
0
example# 10633
call the method context.render_context.push [ context . render_context . push ] .
0
example# 10634
try ,
0
example# 10635
call the method self._render [ self . _render ] with an argument context , return the result ,
0
example# 10636
finally perform ,
0
example# 10637
remove the first element from context.render_context [ context . render_context ] .
0
example# 10638
define the method compile_string with 2 arguments : template_string and origin .
0
example# 10639
if settings.TEMPLATE_DEBUG [ settings . TEMPLATE_DEBUG ] is true ,
0
example# 10640
from django.template.debug [ django . template . debug ] import DebugLexer and DebugParser .
0
example# 10641
substitute DebugLexer and DebugParser for lexer_class and parser_class .
0
example# 10642
if not ,
0
example# 10643
substitute Lexer and Parser for lexer_class and parser_class .
0
example# 10644
call the method lexer_class with an arguments template_string and origin , substitute the result for lexer .
0
example# 10645
call the method lexer.tokenize [ lexer . tokenize ] , use it as an argument for the call to the parser_class function , substitute the result for parser .
0
example# 10646
call the method parser.parse [ parser . parse ] , return the result .
0
example# 10647
derive the class Token form the base class object .
0
example# 10648
define the method __init__ with 3 arguments : self , token_type and contents .
0
example# 10649
substitute token_type and contents for self.token_type [ self . token_type ] and self.contents [ self . contents ] .
0
example# 10650
self.lineno [ self . lineno ] is None .
0
example# 10651
define the method __str__ with an argument self .
0
example# 10652
substitute value under the self.token_type [ self . token_type ] key of the TOKEN_MAPPING dictionary for token_name .
0
example# 10653
return a string _STR:0_ with ' % s ' , replace ' % s ' with token_name and 20 self.contents [ self . contents ] elements with every newline deleted .
1
'<%s token: "%s...">' ||| _STR:0_
example# 10654
define the method split_contents with an argument self .
0
example# 10655
split is an empty list .
0
example# 10656
call the function smart_split with an argument self.contents [ self . contents ] , substitute the result converted to an iterable for bits .
0
example# 10657
for every bit in bits ,
0
example# 10658
if bit starts with _STR:0_ ot bit starts with _STR:1_ ,
2
'_("' ||| _STR:0_
"_('" ||| _STR:1_
example# 10659
append _STR:0_ to third element of bit , substitute it for sentinal .
1
')' ||| _STR:0_
example# 10660
trans_bit is a list with an element bit .
0
example# 10661
while bit doesnt end with sential ,
0
example# 10662
call the method next with an argument bits , substitute the result for bit .
0
example# 10663
append bit to trans_bit .
0
example# 10664
join trans_bit into a string separated with whitespaces , substitute the result for bit .
0
example# 10665
append bit to split .
0
example# 10666
return split .
0
example# 10667
derive the class Lexer form the base class object .
0
example# 10668
define the method __init__ with 3 arguments : self , template_string and origin .
0
example# 10669
substitute template_string for self.template_string [ self . template_string ] .
0
example# 10670
substitute origin for self.origin [ self . origin ] .
0
example# 10671
self.lineno [ self . lineno ] is integer 1 .
0
example# 10672
self.verbatim [ self . verbatim ] is boolean False .
0
example# 10673
define the method tokenize with an argument self .
0
example# 10674
in_tag is boolean False .
0
example# 10675
result is an empty list .
0
example# 10676
split tag_re by self.template_string [ self . template_string ] separator , for every bit in result ,
0
example# 10677
if bit is true ,
0
example# 10678
call the method self.create_token [ self . create_token ] with 2 arguments bit and in_tag , append the result to result .
0
example# 10679
in_tag is boolean True if in_tag is False , otherwise is boolean False .
0
example# 10680
return result .
0
example# 10681
define the method create_token with 3 arguments : self , token_string and in_tag .
0
example# 10682
if in_tag is true and token_string starts with BLOCK_TAG_START .
0
example# 10683
take elements of token_string from second to second last element and strip the whitespaces surrounding the result ,
0
example# 10684
substitute the result for block_content . if self.verbatim [ self . verbatim ] is true and block_content equals self.verbatim [ self . verbatim ] ,
0
example# 10685
self.verbatim [ self . verbatim ] is boolean False .
0
example# 10686
if in_tag and is not contained in self.verbatim [ self . verbatim ] ,
0
example# 10687
if token_string starts with VARIABLE_TAG_START ,
0
example# 10688
token is an instance of Token class , created with 2 arguments : TOKEN_VAR ,
0
example# 10689
and elements of token_string from second to second last element wiht the whitespaces striped from the both sides . otherwise if token_string starts with BLOCK_TAG_START ,
0
example# 10690
if first nine elements of block_content is string _STR:0_ or _STR:1_ ,
2
'verbatim ' ||| _STR:1_
'verbatim' ||| _STR:0_
example# 10691
append block_content to a string _STR:0_ , substitute the result for self.verbatim [ self . verbatim ] .
1
'end' ||| _STR:0_
example# 10692
token is an instance of Token class , created with 2 arguments : TOKEN_BLOCK and block_content .
0
example# 10693
otherwise if token_string starts with COMMENT_TAG_START ,
0
example# 10694
content is an empty string .
0
example# 10695
call the method token_string.find [ token_string . find ] with an argument TRANSLATOR_COMMENT_MARK , if it evaluates to true ,
0
example# 10696
take elements of token_string from second to second last element and strip the whitespaces surrounding the result ,
0
example# 10697
substitute the result for content . token is an instance of Token class , created with 2 arguments : TOKEN_COMMENT and content .
0
example# 10698
if not ,
0
example# 10699
token is an instance of Token class , created with 2 arguments : TOKEN_TEXT and token_string .
0
example# 10700
substitute self.lineno [ self . lineno ] for token.lineno [ token . lineno ] .
0
example# 10701
call the method token_string.count [ token_string . count ] with an argument _STR:0_ , append the result to self.lineno [ self . lineno ] .
1
'\n' ||| _STR:0_
example# 10702
return token .
0
example# 10703
derive the class Parser form the base class object .
0
example# 10704
define the method __init__ with 2 arguments : self and token .
0
example# 10705
substitute tokens for self.tokens [ self . tokens ] .
0
example# 10706
self.tags [ self . tags ] is an empty dictionary .
0
example# 10707
self.filters [ self . filters ] is an empty dictionary .
0
example# 10708
for every lib in builtins ,
0
example# 10709
call the method self.add_library [ self . add_library ] with an argument lib .
0
example# 10710
define the emethod parse with 2 arguments : self and parse_until set to None .
0
example# 10711
if parse_until is None ,
0
example# 10712
parse_until is an empty list ,
0
example# 10713
call the method self.create_nodelist [ self . create_nodelist ] , substitute the result for nodelist .
0
example# 10714
while self.tokens [ self . tokens ] is true ,
0
example# 10715
call the method self.next_token [ self . next_token ] , substitute the result for token .
0
example# 10716
if token.token_type [ token . token_type ] equals integer 0 ,
0
example# 10717
call the method self.extend_nodelist [ self . extend_nodelist ] with 3 arguments : nodelist , instance of TextNode class , created with an argument token.contents [ token . contents ] ,
0
example# 10718
and token . otherwise if token.token_type [ token . token_type ] equals integer 1 ,
0
example# 10719
if token.contents [ token . contents ] is false ,
0
example# 10720
call the method self.empty_variable [ self . empty_variable ] with an argument token ,
0
example# 10721
try ,
0
example# 10722
call the method self.compile_filter [ self . compile_filter ] with an argument token.contents [ token . contents ] , substitute the result for filter_expression .
0
example# 10723
if TemplateSyntaxError , replaced with e , exception is caught ,
0
example# 10724
call the method self.compile_filter_error [ self . compile_filter_error ] with 2 arguments : token and e , if it evaluates to false ,
0
example# 10725
raise an exception ,
0
example# 10726
call the method self.create_variable_node [ self . create_variable_node ] with an argument filter_expression , substitute the result for var_node .
0
example# 10727
call the method self.extend_nodelist [ self . extend_nodelist ] with 3 arguments : nodelist , var_node and token .
0
example# 10728
otherwise if token.token_type [ token . token_type ] equals integer 2 ,
0
example# 10729
try ,
0
example# 10730
split token.contents [ token . contents ] into separate words , substitute the first element of the result for command .
0
example# 10731
if IndexError exception is caught ,
0
example# 10732
call the method self.empty_block_tag [ self . empty_block_tag ] with an argument token .
0
example# 10733
if command is contained in parse_until ,
0
example# 10734
call the method self.prepend_token [ self . prepend_token ] with an argument token ,
0
example# 10735
return nodelist .
0
example# 10736
call the method self.enter_command [ self . enter_command ] with 2 arguments command and token .
0
example# 10737
try ,
0
example# 10738
substitute the value under the command key of self.tags [ self . tags ] dictionary for compile_func .
0
example# 10739
if KeyError exception is caught ,
0
example# 10740
call the method self.invalid_block_tag [ self . invalid_block_tag ] with 3 arguments : token , command and parse_until .
0
example# 10741
try ,
0
example# 10742
call the method compile_func with 2 arguments self and token , substitute the result for compiled_result .
0
example# 10743
if TemplateSyntaxError , renamed to e , exception is caught ,
0
example# 10744
call the method self.compile_function_error [ self . compile_function_error ] with 2 arguments token and e , if it evaluates to false ,
0
example# 10745
raise an exception ,
0
example# 10746
call the method self.extend_nodelist [ self . extend_nodelist ] with 3 arguments : nodelist , compiled_result and token .
0
example# 10747
call the method self.exit_command [ self . exit_command ] .
0
example# 10748
if parse_until is true ,
0
example# 10749
call the method self.unclosed_block_tag [ self . unclosed_block_tag ] with an argument parse_until .
0
example# 10750
return nodelist .
0
example# 10751
define the method skip_past with 2 arguments : self and endtag .
0
example# 10752
while self.tokens [ self . tokens ] is true ,
0
example# 10753
call the method self.next_token [ self . next_token ] , substitute the result for token .
0
example# 10754
if token.token_type [ token . token_type ] equals TOKEN_BLOCK and token.contents [ token . contents ] equals endtag ,
0
example# 10755
return nothing .
0
example# 10756
call the method self.unclosed_block_tag [ self . unclosed_block_tag ] with an argument list with an element endtag .
0
example# 10757
define the method create_variable_node with 2 arguments self and filter_expression .
0
example# 10758
return an instance of VariableNode class with an argument filter_expression .
0
example# 10759
define the method create_nodelist with an argument self .
0
example# 10760
return an instance of NodeList class .
0
example# 10761
define the method extend_nodelist with 4 arguments : self , nodelist , node and token .
0
example# 10762
if node.must_be_first [ node . must_be_first ] is true and nodelist is true ,
0
example# 10763
try ,
0
example# 10764
if nodelist.contains_nontext [ nodelist . contains_nontext ] is true ,
0
example# 10765
raise AttributeError exception ,
0
example# 10766
if AttributeError exception is raised ,
0
example# 10767
raise TemplateSyntaxError ( _STR:0_ , where ' % s ' is replaced with node .
1
"%r must be the first tag in the template." ||| _STR:0_
example# 10768
if nodelist is an instance of NodeList and node is not an instance of TextNode class .
0
example# 10769
nodelist.contains_nontext [ nodelist . contains_nontext ] is boolean True .
0
example# 10770
append node to nodelist .
0
example# 10771
define the method enter_command with 3 arguments : self , command and token .
0
example# 10772
do nothing .
0
example# 10773
define the method exit_command with an argument self .
0
example# 10774
do nothing .
0
example# 10775
define the method enter_command with 3 arguments : self , token and msg .
0
example# 10776
return an instance of TemplateSyntaxError class with an argument msg .
0
example# 10777
define the method empty_variable with 2 arguments : self and token .
0
example# 10778
call the method self.error [ self . error ] with 2 arguments : token and string _STR:0_ , return the result .
1
"Empty variable tag" ||| _STR:0_
example# 10779
define the method empty_block_tag with 2 arguments : self and token .
0
example# 10780
call the method self.error [ self . error ] with 2 arguments : token and string _STR:0_ , return the result .
1
"Empty block tag" ||| _STR:0_
example# 10781
define the method invalid_block_tag with 4 arguments : self , token , command and parse_until as None .
0
example# 10782
if parse_until is true ,
0
example# 10783
raise an self.error [ self . error ] exception with 2 arguments : token and string _STR:0_ ,
1
"Invalid block tag: '%s', expected %s" ||| _STR:0_
example# 10784
where ' % s ' is replaced with command and result of the function get_text_list called with an argument list , with p converted into a string and surrounded with single quotes for every p in parse_until . call the method self.error [ self . error ] with 2 arguments : token and string _STR:0_ , where ' % s ' is replaced with command ,
1
"Invalid block tag: '%s'" ||| _STR:0_
example# 10785
return the result . define the method unclosed_block_tag with 2 arguments : self and parse_until .
0
example# 10786
raise an self.error [ self . error ] with 2 arguments : None and string _STR:0_ ,
1
"Unclosed tags: %s " ||| _STR:0_
example# 10787
where ' % s ' is replaced with parse_until elements joined into a string , separated with _STR:0_ . define the method compile_filter_error with 3 arguments : self , token and e .
1
', ' ||| _STR:0_
example# 10788
do nothing .
0
example# 10789
define the method compile_function_error with 3 arguments : self , token and e .
0
example# 10790
do nothing .
0
example# 10791
define the method next_token with an argument self .
0
example# 10792
remove first element from self.tokens [ self . tokens ] , return removed element .
0
example# 10793
define the function prepend_token with 2 arguments : self and token .
0
example# 10794
insert token at the beginning of self.tokens [ self . tokens ] .
0
example# 10795
define the method delete_first_token with an argument self .
0
example# 10796
delete the first element of self.tokens [ self . tokens ] .
0
example# 10797
define the function add_library with 2 arguments : self and lib .
0
example# 10798
update self.tags [ self . tags ] dictionary with lib.tags [ lib . tags ] .
0
example# 10799
update self.filters [ self . filters ] dictionary with lib.filters [ lib . filters ] .
0
example# 10800
define the function compile_filter with 2 arguments : self and token .
0
example# 10801
return an instance of FilterExpression class , created with 2 arguments : token and self .
0
example# 10802
define the function find_filter with 2 arguments : self and filter_name .
0
example# 10803
if filter_name is contained in self.filters [ self . filters ] ,
0
example# 10804
return the value under the filter_name key of the self.filters [ self . filters ] dictionary .
0
example# 10805
if not ,
0
example# 10806
raise an TemplateSyntaxError with an argument string _STR:0_ , substitute ' % s ' with filter_name .
1
"Invalid filter: '%s'" ||| _STR:0_
example# 10807
derive the class TokenParser form the base class object .
0
example# 10808
define the function next_space_index with 2 arguments : self and subject .
0
example# 10809
substitute subject for self.subject [ self . subject ] .
0
example# 10810
self.pointer [ self . pointer ] is integer 0 .
0
example# 10811
self.backout [ self . backout ] is an empty list .
0
example# 10812
call the method self.tag [ self . tag ] , substitute the result for self.tagname [ self . tagname ] .
0
example# 10813
define the method top with an argument self .
0
example# 10814
raise an NotImplementedError with an argument string _STR:0_ .
1
'subclasses of Tokenparser must provide a top() method' ||| _STR:0_
example# 10815
define the method more with an argument self .
0
example# 10816
if self.pointer [ self . pointer ] is smaller than length of self.subject [ self . subject ] , return boolean True , otherwise return False .
0
example# 10817
define the method back with an argument self .
0
example# 10818
if length of self.backout [ self . backout ] is greater than zero ,
0
example# 10819
raise an TemplateSyntaxError exception with an argument string _STR:0_ .
1
"back called without some previous parsing" ||| _STR:0_
example# 10820
remove the first element from self.backout [ self . backout ] , substitute the result for self.pointer [ self . pointer ] .
0
example# 10821
define the method tag with an argument self .
0
example# 10822
substitute self.subject [ self . subject ] for subject .
0
example# 10823
substitute self.pointer [ self . pointer ] for i .
0
example# 10824
if i is greater than or equal to length of subject .
0
example# 10825
raise an TemplateSyntaxError exception with an argument string _STR:0_ ,
1
"expected another tag, found end of string: %s" ||| _STR:0_
example# 10826
where ' % s ' is replaced with subject . substitute i for p .
0
example# 10827
while i is lesser than length of subject and i-th element of subject is not an empty space or tab character ,
0
example# 10828
increment i by integer 1 .
0
example# 10829
take subject elements from p-th to i-th index , substitute it for s .
0
example# 10830
while i is lesser than length of subject and i-th element of subject is an empty space or tab character ,
0
example# 10831
increment i by integer 1 .
0
example# 10832
append self.pointer [ self . pointer ] to self.backout [ self . backout ] .
0
example# 10833
substitute i for self.pointer [ self . pointer ] .
0
example# 10834
return s .
0
example# 10835
define the method value with an argument self .
0
example# 10836
substitute self.subject [ self . subject ] for subject .
0
example# 10837
substitute self.pointer [ self . pointer ] for i .
0
example# 10838
define the next_space_index with 2 arguments : subject and i .
0
example# 10839
while i is lesser than length of subject and i-th element of subject is not an empty space or tab character ,
0
example# 10840
if i-th element of subject is _STR:0_ character or _STR:1_ character ,
2
'"' ||| _STR:0_
"'" ||| _STR:1_
example# 10841
substitute i-th element of subject for c .
0
example# 10842
increment i by integer 1 .
0
example# 10843
while i is lesser than length of subject and i-th element of subject is not equal to c ,
0
example# 10844
increment i by one .
0
example# 10845
if i is greater than , or equal to subject ,
0
example# 10846
raise an TemplateSyntaxError exception with an argument string _STR:0_ ,
1
"Searching for value. Unexpected end of string in column %d: %s" ||| _STR:0_
example# 10847
where _STR:0_ is replaced with i and ' % s ' is replaced with subject . increment i by one .
1
'%d' ||| _STR:0_
example# 10848
return i .
0
example# 10849
if i is greater than or equal to length of subject ,
0
example# 10850
raise an TemplateSyntaxError exception with an argument _STR:0_ ,
1
"Searching for value. Expected another value but found end of string: %s" ||| _STR:0_
example# 10851
where ' % s ' is replaced with subject . if i-th element of subject is _STR:0_ character or _STR:1_ character ,
2
'"' ||| _STR:0_
"'" ||| _STR:1_
example# 10852
substitute i for p .
0
example# 10853
increment i by integer 1 ,
0
example# 10854
while i is lesser than length of subject and i-th element of subject is not equal to p-th element of subject ,
0
example# 10855
increment i by integer 1 ,
0
example# 10856
if i is greater than length of subject ,
0
example# 10857
raise an TemplateSyntaxError exception with an argument string _STR:0_ ,
1
"Searching for value. Unexpected end of string in column %d: %s" ||| _STR:0_
example# 10858
where _STR:0_ is replaced with i and ' % s ' is replaced with subject . increment i by integer 1 ,
1
'%d' ||| _STR:0_
example# 10859
call the function next_space_index with 2 arguments : subject and i , substitute the result for i .
0
example# 10860
substitute subject elements from p-th to i-th index for res .
0
example# 10861
while i is lesser than length of subject and i-th element of subject is an empty space or tab character .
0
example# 10862
increment i by integer 1 ,
0
example# 10863
append self.pointer [ self . pointer ] to self.backout [ self . backout ] .
0
example# 10864
substitute i for self.pointer [ self . pointer ] .
0
example# 10865
return res .
0
example# 10866
if not ,
0
example# 10867
substitute i for p .
0
example# 10868
call the function next_space_index with 2 arguments subject and i , substitute the result for i .
0
example# 10869
take subject elements from p-th to i-th index , substitute it for s .
0
example# 10870
while i is lesser than length of subject and i-th element of subject is an empty space or tab character .
0
example# 10871
increment i by integer 1 , .
0
example# 10872
append self.pointer [ self . pointer ] to self.backout [ self . backout ] .
0
example# 10873
substitute i for self.pointer [ self . pointer ] .
0
example# 10874
return s .
0
example# 10875
constant_string is a raw string _STR:0_ ,
1
"(?:%(i18n_open)s%(strdq)s%(i18n_close)s|%(i18n_open)s%(strsq)s%(i18n_close)s|%(strdq)s|%(strsq)s)" ||| _STR:0_
example# 10876
where _STR:0_ is replaced with _STR:1_ , _STR:2_ is replaced with _STR:3_ , _STR:4_ is replaced with return value of function re.escape [ re . escape ] called with an argument string _STR:5_ , _STR:6_ is replaced with return value of function re.escape [ re . escape ] called with an argument string _STR:7_ . remove all occurrences of newline character from constant_string .
8
'_(' ||| _STR:5_
"'[^'\\]*(?:\\.[^'\\]*)*'" ||| _STR:3_
'i18n_open' ||| _STR:4_
'"[^"\\]*(?:\\.[^"\\]*)*"' ||| _STR:1_
')' ||| _STR:7_
'strdq' ||| _STR:0_
'strsq' ||| _STR:2_
'i18n_close' ||| _STR:6_
example# 10877
filter_raw_string is a raw string `` ^ ( ? P < constant > % ( constant ) s ) |^ ( ? P < var > [ % ( var_chars ) s ] +| % ( num ) s ) | ( ? : \s* % ( filter_sep ) s\s*
0
example# 10878
( ? P < filter_name > \w+ ) ( ? : % ( arg_sep ) s ( ? : ( ? P < constant_arg > % ( constant ) s ) | ( ? P < var_arg > [ % ( var_chars ) s ] +| % ( num ) s ) ) ) ? ) _STR:0_\w\ . `` , _STR:1_ with result of the function re.escape [ re . escape ] called with an argument FILTER_SEPARATOR , anbd _STR:2_ with result of the function re.escape [ re . escape ] called with an argument FILTER_ARGUMENT_SEPARATOR . call the function re.compile [ re . compile ] with 2 arguments : filter_raw_string and result for bitwise OR on 2 operands re.UNICODE [ re . UNICODE ] and re.VERBOSE [ re . VERBOSE ] ,
3
'arg_sep' ||| _STR:2_
",   where 'constant' is replaced with constant_string, 'num' with raw string '[-+\.]?\d[\d\.e]*', 'var_chars' with string " ||| _STR:0_
'filter_sep' ||| _STR:1_
example# 10879
substitute the result for filter_re . derive the class FilterExpression form the base class object .
0
example# 10880
define the function __init__ with 3 arguments : self , token and parser .
0
example# 10881
substitute token for self.token [ self . token ] .
0
example# 10882
call the method filter_re.finditer [ filter_re . finditer ] with an argument token , substitute the result for matches .
0
example# 10883
var_obj is None .
0
example# 10884
filters is an empty list .
0
example# 10885
upto is integer 0 .
0
example# 10886
for every match in matches ,
0
example# 10887
call the method match.start [ match . start ] , substitute the result for start .
0
example# 10888
if upto is not equal to start .
0
example# 10889
raise an TemplateSyntaxError exception with an argument string _STR:0_ ,
1
"Could not parse some characters: %s|%s|%s" ||| _STR:0_
example# 10890
where ' % s ' is replaced with first upto elements of token string , token string elements from upto to start index , and token string elements from start index to the end . if var_obj is None ,
0
example# 10891
call the method match.group [ match . group ] with 2 arguments : strings _STR:0_ and _STR:1_ , substitute the result for var and constant , respectively .
2
"var" ||| _STR:0_
"constant" ||| _STR:1_
example# 10892
if constant is true ,
0
example# 10893
try ,
0
example# 10894
instantiate Variable class , with an argument constant , call the resolve method with an empty dictionary as an argument , substitute the result for var_obj .
0
example# 10895
if VariableDoesNotExist exception is not caught ,
0
example# 10896
var_obj is None .
0
example# 10897
otherwise if var is None ,
0
example# 10898
raise an TemplateSyntaxError exception with an argument _STR:0_ , replace ' % s ' with token .
1
"Could not find variable at start of %s." ||| _STR:0_
example# 10899
if not ,
0
example# 10900
var_obj is an instance of Variable class , created with an argument var .
0
example# 10901
if not ,
0
example# 10902
call the methof match.group [ match . group ] with an argument _STR:0_ , substitute the result for filter_name .
1
"filter_name" ||| _STR:0_
example# 10903
args is an empty list .
0
example# 10904
call the method match.group [ match . group ] with 2 arguments : strings _STR:0_ and _STR:1_ , substitute the result for constant_arg ,
2
"var_arg" ||| _STR:1_
"constant_arg" ||| _STR:0_
example# 10905
and var_arg , respectively . if constant_arg is true ,
0
example# 10906
take a tuple with 2 elements : boolean False and method resolve called with an empty dictionary on the instance of Variable class ,
0
example# 10907
created with an argument constant_arg , append it to args . otherwise if var_arg is true ,
0
example# 10908
take a tuple with 2 elements : boolean False and instance of Variable class , created with an argument constant_arg , append it to args .
0
example# 10909
call the method parser.find_filter [ parser . find_filter ] with an argument filter_name , substitute the result for filter_func .
0
example# 10910
call the method self.args_check [ self . args_check ] with 3 arguments : filter_name , filter_func and args .
0
example# 10911
append a tuple with 2 arguments : filter_func and args to filters .
0
example# 10912
call the method match.end [ match . end ] , substitute the result for upto .
0
example# 10913
if upto is not equal to length of token ,
0
example# 10914
raise an TemplateSyntaxError exception with an argument string _STR:0_ ,
1
"Could not parse the remainder: '%s' from '%s'" ||| _STR:0_
example# 10915
where ' % s ' is replaced with elemnts of token from upto index till the end , and token . substitute filters for self.filters [ self . filters ] .
0
example# 10916
substitute var_obj for self.var [ self . var ] .
0
example# 10917
define the method resolve with 3 arguments : self , context and ignore_failures set to boolean False .
0
example# 10918
if self.var [ self . var ] is an instance of Variable class ,
0
example# 10919
try ,
0
example# 10920
call the method self.var.resolve [ self . var . resolve ] with an argument context , substitute it for obj .
0
example# 10921
if VariableDoesNotExist exception is caught ,
0
example# 10922
if ignore_failures is true ,
0
example# 10923
obj is None ,
0
example# 10924
if not ,
0
example# 10925
if settings.TEMPLATE_STRING_IF_INVALID [ settings . TEMPLATE_STRING_IF_INVALID ] is true ,
0
example# 10926
use global variable invalid_var_format_string .
0
example# 10927
if invalid_var_format_string is None ,
0
example# 10928
if ' % s ' is contained in settings.TEMPLATE_STRING_IF_INVALID [ settings . TEMPLATE_STRING_IF_INVALID ] , invalid_var_format_string is boolean True , otherwise it is False .
0
example# 10929
if invalid_var_format_string is true ,
0
example# 10930
format settings.TEMPLATE_STRING_IF_INVALID [ settings . TEMPLATE_STRING_IF_INVALID ] with self.var [ self . var ] , return the result .
0
example# 10931
return settings.TEMPLATE_STRING_IF_INVALID [ settings . TEMPLATE_STRING_IF_INVALID ] .
0
example# 10932
if not ,
0
example# 10933
substitute settings.TEMPLATE_STRING_IF_INVALID [ settings . TEMPLATE_STRING_IF_INVALID ] with obj .
0
example# 10934
if not ,
0
example# 10935
substitute self.var [ self . var ] for obj .
0
example# 10936
for every func and args in self.filters [ self . filters ] ,
0
example# 10937
arg_vals is an empty list ,
0
example# 10938
for every lookup and arg in args ,
0
example# 10939
if lookup is false ,
0
example# 10940
call the function mark_safe with an argument arg , append it to arg_vals .
0
example# 10941
if not ,
0
example# 10942
call the method arg.resolve [ arg . resolve ] with an argument context , append the result to arg_vals .
0
example# 10943
if _STR:0_ attribute of func object exists and is true ,
1
'expects_localtime' ||| _STR:0_
example# 10944
call the function template_localtime with 2 arguments : obj and context.use_tz [ context . use_tz ] , substitute the result for obj .
0
example# 10945
if _STR:0_ attribute of func object exists and is true ,
1
'needs_autoescape' ||| _STR:0_
example# 10946
call the function func with 3 arguments : obj , autoescape set to context.autoescape [ context . autoescape ] and unpacked list arg_vals ,
0
example# 10947
substitute the result for new_obj . if not ,
0
example# 10948
call the function func with 2 arguments : obj and unpacked list arg_vals , substitute the result for new_obj .
0
example# 10949
if _STR:0_ attribute of func object exists and is true and obj is an instance of SafeData ,
1
'is_safe' ||| _STR:0_
example# 10950
call the function mark_safe with an argument new_obj , substitute the result for obj .
0
example# 10951
otherwise if obj is an instance of EscapeData ,
0
example# 10952
call the function mark_for_escaping with an argument new_obj , substitute the result for obj .
0
example# 10953
if not ,
0
example# 10954
substitute new_obj for obj .
0
example# 10955
return obj .
0
example# 10956
define the method args_check with 3 arguments : name , func and provided .
0
example# 10957
convert provided into a list and substitute it for provided .
0
example# 10958
calculate length of provided and increment it by one , substitute the result for plen .
0
example# 10959
get the _STR:0_ attribute from func object , if it exists substitute it for func .
1
'_decorated_function' ||| _STR:0_
example# 10960
call the function getargspec with an argument func , substitute the result for args , varargs , varkw and defaults , respectively .
0
example# 10961
calculate the length of args , substitute it for alen .
0
example# 10962
substitute the length of defaults for dlen .
0
example# 10963
if plen is lesser than difference of alen and dlen , or if plen is greater than alen ,
0
example# 10964
raise an TemplateSyntaxError exception with an argument string _STR:0_ ,
1
"%s requires %d arguments, %d provided" ||| _STR:0_
example# 10965
where _STR:0_ is replaced with name , dlen subtracted from alen , and plen . return boolean True .
1
'%d' ||| _STR:0_
example# 10966
args_check is a static method .
0
example# 10967
define the method __str__ with an argument self .
0
example# 10968
return self.token [ self . token ] .
0
example# 10969
define the method resolve_variable with 2 arguments : path and context .
0
example# 10970
call the function warnings.warn [ warnings . warn ] with 3 arguments :
0
example# 10971
string _STR:0_ , RemovedInDjango20Warning , and stacklevel set to integer 2. call the method resolve with an argument context , from the instance of Variable class , created with an argument path .
1
"resolve_variable() is deprecated. Use django.template. Variable(path).resolve(context) instead" ||| _STR:0_
example# 10972
derive the class Variable form the base class object .
0
example# 10973
define the method __init__ with 2 arguments self and var .
0
example# 10974
substitute var for self.var [ self . var ] .
0
example# 10975
self.literal [ self . literal ] is None ,
0
example# 10976
self.lookups [ self . lookups ] is None .
0
example# 10977
self.translate [ self . translate ] is boolean False .
0
example# 10978
self.message_context [ self . message_context ] is None .
0
example# 10979
if var is not an instance of six.string_types [ six . string_types ] ,
0
example# 10980
raise an TypeError exception with an argument string _STR:0_ , replace ' % s ' with type of var .
1
"Variable must be a string or number, got %s" ||| _STR:0_
example# 10981
try ,
0
example# 10982
convert var into an floating point number , substitute it for self.literal [ self . literal ] .
0
example# 10983
if _STR:0_ is not contained in var and _STR:1_ is not contained in var converted into lowercase ,
2
'e' ||| _STR:1_
'.' ||| _STR:0_
example# 10984
convert self.literal [ self . literal ] into an integer , substitute it for self.literal [ self . literal ] .
0
example# 10985
if var ends with _STR:0_ ,
1
'.' ||| _STR:0_
example# 10986
raise an ValueError exception .
0
example# 10987
if ValueError exception is caught ,
0
example# 10988
if var starts with _STR:0_ and var ends with _STR:1_ ,
2
')' ||| _STR:1_
'_(' ||| _STR:0_
example# 10989
self.translate [ self . translate ] is boolean True .
0
example# 10990
remove first 2 and last 2 elements from var .
0
example# 10991
try ,
0
example# 10992
call the function unescape_string_literal with an argument var , use it as an argument for the call to the function mark_safe ,
0
example# 10993
substitute the result for self.literal [ self . literal ] . if ValueError exception is caught ,
0
example# 10994
call the function var.find [ var . find ] with an argument : _STR:0_ appended to VARIABLE_ATTRIBUTE_SEPARATOR , if the result is greater than integer -1 ,
1
'_' ||| _STR:0_
example# 10995
or first element of var equals _STR:0_ , raise an TemplateSyntaxError exception with an argument string _STR:1_ ,
2
'_' ||| _STR:0_
"Variables and attributes may not begin with underscores: '%s'" ||| _STR:1_
example# 10996
where ' % s ' is replaced with var . call the method var.split [ var . split ] with an argument VARIABLE_ATTRIBUTE_SEPARATOR , convert the result to a tuple and substitute it for self.lookups [ self . lookups ] .
0
example# 10997
define the method resolve with 2 arguments : self and context .
0
example# 10998
if self.lookups [ self . lookups ] is not None ,
0
example# 10999
call the function self._resolve_lookup [ self . _resolve_lookup ] with an argument context , substitute the result for value .
0
example# 11000
if else ,
0
example# 11001
substitute self.literal [ self . literal ] for value .
0
example# 11002
if self.translate [ self . translate ] is true ,
0
example# 11003
if self.message_context [ self . message_context ] is true ,
0
example# 11004
call the function pgettext_lazy with an argument self.message_context [ self . message_context ] and value , return the result .
0
example# 11005
if not ,
0
example# 11006
call the function ugettext_lazy with an argument value , return the result .
0
example# 11007
return value .
0
example# 11008
define the method __repr__ with an argument self .
0
example# 11009
return an string _STR:0_ , where ' % s ' is replaced with self.__class__.__name__ [ self . __class__ . __name__ ] and self.var [ self . var ] , respectively .
1
"<%s: %r>" ||| _STR:0_
example# 11010
define the method __str__ with an argument self .
0
example# 11011
return self.var [ self . var ] .
0
example# 11012
define the method _resolve_lookup with 2 arguments : self and context .
0
example# 11013
substitute context for current .
0
example# 11014
try ,
0
example# 11015
for bit in self.lookups [ self . lookups ] ,
0
example# 11016
try ,
0
example# 11017
substitute element at the bit index of current for current .
0
example# 11018
if TypeError , AttributeError , KeyError or ValueError exceptions are caught ,
0
example# 11019
try ,
0
example# 11020
if current is an instance of BaseContext and bit attribute of type of current is true ,
0
example# 11021
raise an AttributeError exception .
0
example# 11022
get the bit attribute of current object , substitute it for current .
0
example# 11023
if TypeError and AttributeError exceptions are caught ,
0
example# 11024
try ,
0
example# 11025
convert bit to an integer and use it as index to obtain an element for list current , substitute it for current .
0
example# 11026
if IndexError , ValueError , KeyError or TypeError exceptions are caught ,
0
example# 11027
raise an VariableDoesNotExist exception with an argument string _STR:0_ ,
1
"Failed lookup for key [%s] in %r" ||| _STR:0_
example# 11028
where ' % s ' is replaced with bit and _STR:0_ is replaced with current . if current is callable object ,
1
'%r' ||| _STR:0_
example# 11029
get the _STR:0_ attribute of current object , if it exists and is true ,
1
'do_not_call_in_templates' ||| _STR:0_
example# 11030
do nothing .
0
example# 11031
otherwise , get the _STR:0_ attribute of current object , if it exists and is true ,
1
'alters_data' ||| _STR:0_
example# 11032
substitute settings.TEMPLATE_STRING_IF_INVALID [ settings . TEMPLATE_STRING_IF_INVALID ] for current .
0
example# 11033
if not ,
0
example# 11034
try ,
0
example# 11035
call the function current , substitute the result for current .
0
example# 11036
if TypeError exception is caught ,
0
example# 11037
try ,
0
example# 11038
call the function getcallargs with an argument current ,
0
example# 11039
if TypeError exception is caught ,
0
example# 11040
substitute settings.TEMPLATE_STRING_IF_INVALID [ settings . TEMPLATE_STRING_IF_INVALID ] for current ,
0
example# 11041
if not ,
0
example# 11042
raise an exception ,
0
example# 11043
if Exception , renamed to e , exception is caught ,
0
example# 11044
get the _STR:0_ attribute of e object , if it exists and is true ,
1
'silent_variable_failure' ||| _STR:0_
example# 11045
substitute settings.TEMPLATE_STRING_IF_INVALID [ settings . TEMPLATE_STRING_IF_INVALID ] for current .
0
example# 11046
if not ,
0
example# 11047
raise an exception .
0
example# 11048
return current .
0
example# 11049
derive the class Node form the base class object .
0
example# 11050
must_be_first is boolean False .
0
example# 11051
child_nodelists is an tuple with an element _STR:0_ .
1
'nodelist' ||| _STR:0_
example# 11052
define the method render with 2 arguments : self and context .
0
example# 11053
do nothing .
0
example# 11054
define the method __iter__ with an argument self .
0
example# 11055
yield self .
0
example# 11056
define the method get_nodes_by_type with 2 arguments : self and nodetype .
0
example# 11057
nodes is an empty list .
0
example# 11058
if self is an instance of nodetype ,
0
example# 11059
append self to nodes .
0
example# 11060
for every attr in self.child_nodelists [ self . child_nodelists ] ,
0
example# 11061
get attr attribute of self object , if it exists substitute it for nodelist , if not nodelist is None .
0
example# 11062
if nodelist is true ,
0
example# 11063
call the method nodelist.get_nodes_by_type [ nodelist . get_nodes_by_type ] with an argument nodetype , extend nodes with the result .
0
example# 11064
return nodes .
0
example# 11065
derive the class NodeList form the base class list .
0
example# 11066
contains_nontext is boolean False .
0
example# 11067
define the method render with 2 arguments : self and context .
0
example# 11068
bits is an empty list .
0
example# 11069
for every node in self ,
0
example# 11070
if node is an instance of Node ,
0
example# 11071
call the method self.render_node [ self . render_node ] with 2 arguments : node and context , substitute the result for bit .
0
example# 11072
if not ,
0
example# 11073
substitute node for bit .
0
example# 11074
call the function force_text with an argument bit , append the result to bits .
0
example# 11075
call the function mark_safe with an argument , elements of bits joined into a string , return the result .
0
example# 11076
define the method get_nodes_by_type with 2 arguments : self and nodetype .
0
example# 11077
modes is an empty list .
0
example# 11078
for every node in self ,
0
example# 11079
call the method node.get_nodes_by_type [ node . get_nodes_by_type ] with an argument nodetype , extend nodes with it .
0
example# 11080
return nodes .
0
example# 11081
define the method render_node with 3 arguments : self , node and context .
0
example# 11082
call the method node.render [ node . render ] with an argument context , return the result .
0
example# 11083
derive the class TextNode form the base class Node .
0
example# 11084
define the method __init__ with 2 arguments : self and s .
0
example# 11085
substitute s for self.s [ self . s ] .
0
example# 11086
define the method __repr__ with an argument self .
0
example# 11087
call the function force_str with 3 arguments : string _STR:0_ , with ' % s ' replaced with first 25 elements of self.s [ self . s ] string ,
1
"<Text Node: '%s'>" ||| _STR:0_
example# 11088
string _STR:0_ and errors set to a string _STR:1_ , return the result . define the method render with 2 arguments : self and context .
2
'ascii' ||| _STR:0_
'replace' ||| _STR:1_
example# 11089
return self.s [ self . s ] .
0
example# 11090
define the function render_value_in_context with 2 arguments : value and context .
0
example# 11091
call the method template_localtime with 2 arguments : value and use_tz=context.use_tz [ use_tz=context . use_tz ] , substitute the result for value .
0
example# 11092
call the function localize with 2 arguments : value and use_l10n=context.use_l10n [ use_l10n=context . use_l10n ] , substitute the result for value .
0
example# 11093
call the function force_text with an argument value , substitute the result for value .
0
example# 11094
if context.autoescape [ context . autoescape ] is true and value is not an instance of SafeData , or value is an instance of EscapeData ,
0
example# 11095
call the function escape with an argument value , return the result .
0
example# 11096
if not ,
0
example# 11097
return value .
0
example# 11098
derive the class VariableNode form the base class Node .
0
example# 11099
define the method __init__ with 2 arguments : self and filter_expression .
0
example# 11100
substitute filter_expression for self.filter_expression [ self . filter_expression ] .
0
example# 11101
define the method __repr__ with an argument self .
0
example# 11102
return a string _STR:0_ , substitute ' % s ' with self.filter_expression [ self . filter_expression ] .
1
"<Variable Node: %s>" ||| _STR:0_
example# 11103
define the method render with 2 arguments self and context .
0
example# 11104
try ,
0
example# 11105
call the method self.filter_expression.resolve [ self . filter_expression . resolve ] with an argument context , substitute the result for output .
0
example# 11106
if UnicodeDecodeError exception is caught ,
0
example# 11107
return an empty string .
0
example# 11108
call the function render_value_in_context with 2 arguments output and context , return the result .
0
example# 11109
call the function re.compile [ re . compile ] with an argument raw string _STR:0_ , substitute the result for kwarg_re .
1
"(?:(\w+)=)?(.+)" ||| _STR:0_
example# 11110
define the method token_kwargs : bits , parser and support_legacy set to boolean False .
0
example# 11111
if bits is false ,
0
example# 11112
return an empty dictionary .
0
example# 11113
call the method kwarg_re.match [ kwarg_re . match ] with an argument first element of bits , substitute the result for match .
0
example# 11114
if match is true and call to the method match.group [ match . group ] with an argument integer 1 evaluates to true , kwarg_format is boolean True ,
0
example# 11115
otherwise it is boolean False . if kwarg_format is false ,
0
example# 11116
if support_legacy is false ,
0
example# 11117
return an empty dictionary .
0
example# 11118
if length of bits is lesser than integer 3 or second element of bits is not equal to string _STR:0_ ,
1
'as' ||| _STR:0_
example# 11119
return an empty dictionary .
0
example# 11120
kwargs is an empty dictionary ,
0
example# 11121
while bits is true ,
0
example# 11122
if kwarg_format is true ,
0
example# 11123
call the method kwarg_re.match [ kwarg_re . match ] with an argument first element of bits , substitute the result for match .
0
example# 11124
if match is false or call to the method match.group [ match . group ] with an argument integer 1 evaluates to boolean false ,
0
example# 11125
return kwargs .
0
example# 11126
call the method match.groups [ match . groups ] with 2 arguments : key and value .
0
example# 11127
delete first element of bits .
0
example# 11128
if not ,
0
example# 11129
if length of bits is lesser than integer 3 or second element of bits is not equal to string _STR:0_ ,
1
'as' ||| _STR:0_
example# 11130
return kwargs .
0
example# 11131
substitute third and first element of bits for key and value , respectively .
0
example# 11132
delete first 3 elements of bits .
0
example# 11133
call the method parser.compile_filter [ parser . compile_filter ] with an argument value , substitute the result for value under the key key of kwargs dictionary .
0
example# 11134
if bits is true and kwarg_format is false ,
0
example# 11135
if first element of bits is not equal to string _STR:0_ ,
1
'and' ||| _STR:0_
example# 11136
return kwargs .
0
example# 11137
delete first element of bits .
0
example# 11138
return kwargs .
0
example# 11139
define the function parse_bits with 8 arguments : parser , bits , params , varargs , varkw , defaults , takes_context and name .
0
example# 11140
if takes_context is true ,
0
example# 11141
if first element of params equals a string _STR:0_ ,
1
'context' ||| _STR:0_
example# 11142
substitute params without the first element for params .
0
example# 11143
if not ,
0
example# 11144
raise an TemplateSyntaxError exception _STR:0_ ,
1
"'%s' is decorated with takes_context=True so it must have a first argument of 'context'" ||| _STR:0_
example# 11145
where ' % s ' is replaced with name . args is an empty list .
0
example# 11146
kwargs is an empty dictionary .
0
example# 11147
convert params into a list , substitute it for unhandled_params .
0
example# 11148
for every bit in bits ,
0
example# 11149
call the function
0
example# 11150
if kwarg is true ,
0
example# 11151
call the method six.iteritems [ six . iteritems ] with an argument kwarg , convert the result into a list ,
0
example# 11152
substitute first element of the result for param and value . if param is not in params and varkw is None ,
0
example# 11153
raise an TemplateSyntaxError exception with an argument _STR:0_ ,
1
"'%s' received unexpected keyword argument '%s'" ||| _STR:0_
example# 11154
where ' % s ' are replaced with name and param . otherwise if param is contained in kwargs ,
0
example# 11155
raise an TemplateSyntaxError exception with an argument string _STR:0_ ,
1
"'%s' received multiple values for keyword argument '%s'" ||| _STR:0_
example# 11156
where ' % s ' are replaced with name and param . if not ,
0
example# 11157
convert param to a string , use it as a key to get the value from kwargs dictionary , assign it value .
0
example# 11158
if param is contained in unhandled_params ,
0
example# 11159
call the method unhandled_params.remove [ unhandled_params . remove ] with an argument param .
0
example# 11160
if not ,
0
example# 11161
if kwargs is true ,
0
example# 11162
raise an TemplateSyntaxError exception with an argument string _STR:0_ , where ' % s ' is replaced with name .
1
"'%s' received some positional argument(s) after some keyword argument(s)" ||| _STR:0_
example# 11163
if not ,
0
example# 11164
call the method parser.compile_filter [ parser . compile_filter ] with an argument bit , append the result to args .
0
example# 11165
try ,
0
example# 11166
remove first element of unhandled_params .
0
example# 11167
if IndexError exception is caught ,
0
example# 11168
if varargs is None ,
0
example# 11169
raise an TemplateSyntaxError exception with an argument string _STR:0_ ,
1
"'%s' received too many positional arguments" ||| _STR:0_
example# 11170
where ' % s ' is replaced with name . if defaults is not None ,
0
example# 11171
slice list unhandled_params from the beginning to the length of defaults last element ,
0
example# 11172
if unhandled_params is true ,
0
example# 11173
raise TemplateSyntaxError (
0
example# 11174
return args and kwargs .
0
example# 11175
define the method generic_tag_compiler with 9 arguments : parser , token , params , varargs , varkw , defaults , name , takes_context ,
0
example# 11176
call the function token.split_contents [ token . split_contents ] , substitute the result without the first element for bits .
0
example# 11177
call the method parse_bits with 8 arguments : parser , bits , params , varargs , varkw , defaults , takes_context and name ,
0
example# 11178
substitute the result for args and kwargs , respectively . call the function node_class with 3 arguments : takes_context , args and kwargs .
0
example# 11179
derive the class TagHelperNode form the base class Node .
0
example# 11180
define the method __init__ with 4 arguments : self , takes_context , args and kwargs .
0
example# 11181
substitute takes_context for self.takes_context [ self . takes_context ] .
0
example# 11182
substitute args for self.args [ self . args ] .
0
example# 11183
substitute kwargs for self.kwargs [ self . kwargs ] .
0
example# 11184
define the method get_resolved_arguments with 2 arguments : self and context .
0
example# 11185
resolved_args is an list with elements , return value of the method var.resolve [ var . resolve ] with an argument context , for every var in self.args [ self . args ] .
0
example# 11186
if self.takes_context [ self . takes_context ] is true ,
0
example# 11187
append resolved_args to a list containing context element , substitute it for resolved_args .
0
example# 11188
resolved_kwargs is dictionary with elements : return value of the method v.resolve [ v . resolve ] called with an argument context , for k ,
0
example# 11189
for every k and v in return value of the method self.kwargs.items [ self . kwargs . items ] . return resolved_args and resolved_kwargs .
0
example# 11190
derive the class Library form the base class object .
0
example# 11191
define the method with reload with an argument self .
0
example# 11192
self.filters [ self . filters ] is an empty dictionary .
0
example# 11193
self.tags [ self . tags ] is an empty dictionary .
0
example# 11194
define the method tag with 3 arguments : self , name set to None and compile_function set to None .
0
example# 11195
if name is None and compile_function is None ,
0
example# 11196
return self.tag_function [ self . tag_function ] .
0
example# 11197
otherwise if name is not None and compile_function is None ,
0
example# 11198
if name is callable object ,
0
example# 11199
call the method self.tag_function [ self . tag_function ] with an argument name , return the result .
0
example# 11200
if not ,
0
example# 11201
define the function dec with an argument func ,
0
example# 11202
call the method self.tag [ self . tag ] with 2 arguments name and func , return the result .
0
example# 11203
return dec .
0
example# 11204
otherwise if name is not None and compile_function is not None ,
0
example# 11205
substitute compile_function for self.tags [ self . tags ] dictionary value under the name key .
0
example# 11206
return compile_function .
0
example# 11207
if not ,
0
example# 11208
raise an InvalidTemplateLibrary exception with an argument string _STR:0_ ,
1
"Unsupported arguments to Library.tag: (%r, %r)" ||| _STR:0_
example# 11209
substitute _STR:0_ with name and compile_function . define the method tag_function with 2 argument : self and func .
1
'%r' ||| _STR:0_
example# 11210
get _STR:0_ attribute from func , return func if the attribute doesnt exists ,
1
"_decorated_function" ||| _STR:0_
example# 11211
use its __name__ field as a key to get the value from self.tags [ self . tags ] , assign func to it . return func .
0
example# 11212
define the method filter with 4 arguments : self , name set to None , filter_func set to None and unpacked dictionary flags .
0
example# 11213
if name is None and filter_func is None ,
0
example# 11214
define the function dec with an argument func ,
0
example# 11215
call the method self.filter_function [ self . filter_function ] with 2 arguments func and unpacked dictionary flags , return the result .
0
example# 11216
return dec .
0
example# 11217
otherwise if name is not None and filter_func is None ,
0
example# 11218
if name is callable object ,
0
example# 11219
call the method self.filter_function [ self . filter_function ] with arguments name and unpacked dictionary flags , return the result .
0
example# 11220
if not ,
0
example# 11221
define the function dec with an argument func ,
0
example# 11222
call the method self.filter [ self . filter ] with 3 arguments : name , func and unpacked dictionary flags , return the result .
0
example# 11223
return dec .
0
example# 11224
otherwise if name is not None and filter_func is not None ,
0
example# 11225
substitute filter_func for value under the name key of self.filters [ self . filters ] dictionary .
0
example# 11226
for every attr in tuple with 3 arguments : strings _STR:0_ , _STR:1_ and _STR:2_ ,
3
'needs_autoescape' ||| _STR:2_
'expects_localtime' ||| _STR:0_
'is_safe' ||| _STR:1_
example# 11227
if attr is contained in flags ,
0
example# 11228
substitute value under the attr key of flags dictionary for value .
0
example# 11229
set filter_func objec attr attribute to value .
0
example# 11230
if filter_func has an attribute _STR:0_ ,
1
"_decorated_function" ||| _STR:0_
example# 11231
set filter_func._decorated_function [ filter_func . _decorated_function ] objects attr attribute to value .
0
example# 11232
substitute name for filter_func._filter_name [ filter_func . _filter_name ] .
0
example# 11233
return filter_func .
0
example# 11234
if not ,
0
example# 11235
raise an InvalidTemplateLibrary exception with an argument string ( _STR:0_ ,
1
"Unsupported arguments to Library.filter: (%r, %r)" ||| _STR:0_
example# 11236
where _STR:0_ is replaced with name and filter_func , respectively . define the method filter_function with 3 arguments : self , func and unpacked dictionary flags .
1
'%r' ||| _STR:0_
example# 11237
get _STR:0_ attribute from func object , if it exists substitute __name__ field of the result for name ,
1
"_decorated_function" ||| _STR:0_
example# 11238
if not , substitute func.__name__ [ func . __name__ ] for name . call the method self.filter [ self . filter ] with 3 arguments : name , func and unpacked dictionary flags .
0
example# 11239
define the method simple_tag with 4 arguments : self , func and None , takes_context and None and name set to None .
0
example# 11240
define the function dec with an argument func .
0
example# 11241
call the function getargspec with an argument func , substitute the result for params , varargs , varkw and defaults , respectively .
0
example# 11242
derive the class SimpleNode form the base class TagHelperNode .
0
example# 11243
define the method render with 2 arguments self and context .
0
example# 11244
call the method self.get_resolved_arguments [ self . get_resolved_arguments ] with an argument context , substitute the result for resolved_args and resolved_kwargs .
0
example# 11245
call the function func with 2 arguments : unpacked list resolved_args and unpacked dictionary resolved_kwargs , return it .
0
example# 11246
if name is true , substitute it for function_name , if not get attribute _STR:0_ from func object ,
1
'_decorated_function' ||| _STR:0_
example# 11247
substitute its __name__ field for function name , if it doesnt exists substitute func.__name__ [ func . __name__ ] for function_name . call the function generic_tag_compiler , params set to params , varargs set to varargs , varkw set to varkw , defaults set to defaults ,
0
example# 11248
name set to function_name , and takes_context set to takes_context and node_class set to SimpleNode . substitute func.__doc__ [ func . __doc__ ] for compile_func.__doc__ [ compile_func . __doc__ ] .
0
example# 11249
call the method self.tag [ self . tag ] with 2 arguments : function_name and compile_func .
0
example# 11250
return func .
0
example# 11251
if func is None ,
0
example# 11252
return dec .
0
example# 11253
otherwise if func is callable object ,
0
example# 11254
call the function dec with an argument func , return the result .
0
example# 11255
if not ,
0
example# 11256
raise an TemplateSyntaxError exception with an argument string _STR:0_ .
1
"Invalid arguments provided to simple_tag" ||| _STR:0_
example# 11257
define the method assignment_tag with 4 arguments : self , func set to None , takes_context set to None and name set to None .
0
example# 11258
define the function dec with an argument func .
0
example# 11259
call the function getargspec with an argument func , substitute the result for params , varargs , varkw and defaults .
0
example# 11260
derive the class AssignmentNode form the base class TagHelperNode .
0
example# 11261
define the function __init__ with 5 arguments : self , takes_context , args , kwargs and target_var .
0
example# 11262
call the method __init__ from the base class of the class AssignmentNode , with 3 arguments : takes_context , args and kwargs .
0
example# 11263
substitute target_var for self.target_var [ self . target_var ] .
0
example# 11264
define the method render with 2 arguments self and context .
0
example# 11265
call the method self.get_resolved_arguments [ self . get_resolved_arguments ] with an argument context , substitute the result for resolved_args and resolved_kwargs .
0
example# 11266
call the function func with 2 arguments : unpacked list resolved_args and unpacked dictionary resolved_kwargs ,
0
example# 11267
substitute the result for value under the self.target_var [ self . target_var ] key of the context dictionary . return an empty string .
0
example# 11268
if name is true , substitute it for function_name , if not get _STR:0_ attribute from func object , if it exists ,
1
'_decorated_function' ||| _STR:0_
example# 11269
substitute __name__ field of the result for function_name , in not , substitute func.__name__ [ func . __name__ ] for function_name . define the function compile_func with 2 arguments : parser and token .
0
example# 11270
call the function token.split_contents [ token . split_contents ] , substitute the result without the first element for bits .
0
example# 11271
if length of bits is smaller than integer 2 or second last element of bits is not equal to _STR:0_ ,
1
'as' ||| _STR:0_
example# 11272
raise an TemplateSyntaxError exception with an argument string , `` ' % s ' tag takes at least 2 arguments and the second last argument
0
example# 11273
must be _STR:0_ '' , where ' % s ' is replaced with function_name . substitute last element of bits for target_var .
1
'as' ||| _STR:0_
example# 11274
substitute bits without last two elements for bits .
0
example# 11275
call the function parse_bits with 8 arguments : parser , bits , params , varargs , varkw , defaults , takes_context and function_name ,
0
example# 11276
substitute the result for args and kwargs . return an instance of AssignmentNode class created with 4 arguments : takes_context , args , kwargs and target_var .
0
example# 11277
substitute func.__doc__ [ func . __doc__ ] for compile_func.__doc__ [ compile_func . __doc__ ] .
0
example# 11278
call the method self.tag [ self . tag ] with 2 arguments : function_name and compile_func .
0
example# 11279
return func .
0
example# 11280
if func is None ,
0
example# 11281
return dec .
0
example# 11282
otherwise if func is callable ,
0
example# 11283
call the function dec with an argument func , return the result .
0
example# 11284
if not ,
0
example# 11285
raise an TemplateSyntaxError exception with an argument string _STR:0_ .
1
"Invalid arguments provided to assignment_tag" ||| _STR:0_
example# 11286
define the method inclusion_tag with 5 arguments : self , file_name , context_class set to Context , takes_context set to boolean False ,
0
example# 11287
and name set to None . define the function dec with an argument func .
0
example# 11288
call the function getargspec with an argument func , substitute the result for params , varargs , varkw and defaults .
0
example# 11289
derive the class InclusionNode form the base class TagHelperNode .
0
example# 11290
define the method render with 2 arguments : self and context .
0
example# 11291
call the method self.get_resolved_arguments [ self . get_resolved_arguments ] with context as an argument , substitute the result for resolved_args and resolved_kwargs .
0
example# 11292
call the function func with 2 arguments : unpacked list resolved_args and unpacked dictionary resolved_kwargs , substitute the result for _dict .
0
example# 11293
get _STR:0_ attribute from self object . if it doesnt exists return boolean False , if the result evaluates to false ,
1
'nodelist' ||| _STR:0_
example# 11294
from django.template.loader [ django . template . loader ] import get_template , select_template .
0
example# 11295
if file_name is an instance of Template class .
0
example# 11296
substitute file_name for t .
0
example# 11297
otherwise if file_name is not an instance of six.string_types [ six . string_types ] and call to the function is_iterable with an argument file_name ,
0
example# 11298
evaluates to true , call the function select_template with an argument file_name , substitute the result for t .
0
example# 11299
if not ,
0
example# 11300
call the function get_template with an argument file_name , substitute the result for t .
0
example# 11301
substitute t.nodelist [ t . nodelist ] for self.nodelist [ self . nodelist ] .
0
example# 11302
call the function context_class with 2 arguments : _dict and unpacked dictionary containing 4 entries :
0
example# 11303
context.autoescape [ context . autoescape ] for _STR:0_ , context.autoescape [ context . autoescape ] for _STR:1_ , context.use_l10n [ context . use_l10n ] for _STR:2_ , and context.use_tz [ context . use_tz ] for _STR:3_ , substitute the result for new_context . call the function context.get [ context . get ] with 2 argument _STR:4_ and None , substitute the result for csrf_token .
5
'current_app' ||| _STR:1_
'use_tz' ||| _STR:3_
'autoescape' ||| _STR:0_
'use_l10n' ||| _STR:2_
'csrf_token' ||| _STR:4_
example# 11304
if csrf_token is not None ,
0
example# 11305
substitute csrf_token for value under the _STR:0_ key of new_context dictionary .
1
'csrf_token' ||| _STR:0_
example# 11306
call the method self.nodelist.render [ self . nodelist . render ] with an argument new_context , return the result .
0
example# 11307
if name is true , substitute it for function_name , if not get _STR:0_ attribute from func object , if it exists ,
1
'_decorated_function' ||| _STR:0_
example# 11308
substitute __name__ field of the result for function_name , in not , substitute func.__name__ [ func . __name__ ] for function_name . call the function partial with 8 arguments : generic_tag_compiler , params set to params , varargs set to varargs , varkw set to varkw ,
0
example# 11309
defaults set to defaults , name set to function_name , takes_context set to takes_context and node_class set to InclusionNode , substitute the result for compile_func . substitute func.__doc__ [ func . __doc__ ] for compile_func.__doc__ [ compile_func . __doc__ ] .
0
example# 11310
call the function self.tag [ self . tag ] with 2 arguments : function_name and compile_func .
0
example# 11311
return func .
0
example# 11312
return dec .
0
example# 11313
define the function is_library_missing with an argument name .
0
example# 11314
split string name into two parts from the right side by the separator _STR:0_ , substitute parts for path and module , respectively .
1
'.' ||| _STR:0_
example# 11315
try ,
0
example# 11316
call the function import_module with an argument path , substitute it for package .
0
example# 11317
call the function module_has_submodule with 2 arguments : package and module , return inverted boolean result .
0
example# 11318
if ImportError exception is caught ,
0
example# 11319
call the function is_library_missing with an argument path , return the result .
0
example# 11320
define the function import_library with an argument taglib_module .
0
example# 11321
try ,
0
example# 11322
call the function import_module with an argument taglib_module , substitute the result for mod .
0
example# 11323
if ImportError , renamed to e , exception is caught ,
0
example# 11324
call the function is_library_missing with an argument taglib_module , if it evaluates to true ,
0
example# 11325
return None .
0
example# 11326
if not ,
0
example# 11327
raise an InvalidTemplateLibrary exception with an argument string _STR:0_ ,
1
"ImportError raised loading %s: %s" ||| _STR:0_
example# 11328
where ' % s ' is replaced with taglib_module and e. try ,
0
example# 11329
return mod.register [ mod . register ] .
0
example# 11330
if AttributeError exception is caught ,
0
example# 11331
raise an InvalidTemplateLibrary exception with an argument string _STR:0_ ,
1
"Template library %s does not have a variable named 'register'" ||| _STR:0_
example# 11332
where ' % s ' is replaced with taglib_module . templatetags_modules is an empty list .
0
example# 11333
define the function get_templatetags_modules .
0
example# 11334
use global variable templatetags_modules .
0
example# 11335
if templatetags_modules is false ,
0
example# 11336
_templatetags_modules is an empty list .
0
example# 11337
templatetags_modules_candidates is an list with an argument string _STR:0_ .
1
'django.templatetags' ||| _STR:0_
example# 11338
add string _STR:0_ to a list , where ' % s ' is replaced with app_config.name [ app_config . name ] ,
1
'%s.templatetags' ||| _STR:0_
example# 11339
for every app_config in result of the method apps.get_app_configs [ apps . get_app_configs ] , append the resulting list to templatetags_modules_candidates . for every templatetag_module in templatetags_modules_candidates ,
0
example# 11340
try ,
0
example# 11341
call the function import_module with an argument templatetag_module .
0
example# 11342
append templatetag_module to _templatetags_modules .
0
example# 11343
if ImportError exception is caught ,
0
example# 11344
skip this loop iteration .
0
example# 11345
substitute _templatetags_modules for templatetags_modules .
0
example# 11346
return templatetags_modules .
0
example# 11347
define the function get_library with an argument library_name .
0
example# 11348
get the value under the library_name key of the libraries dictionary , if it exists , substitute it for lib , if not , lib is None .
0
example# 11349
if lib is false ,
0
example# 11350
call the function get_templatetags_modules , substitute the result for templatetags_modules .
0
example# 11351
tried_modules is an empty list .
0
example# 11352
for every module in templatetags_modules ,
0
example# 11353
taglib_module is an string _STR:0_ , where ' % s ' is replaced to module and library_name .
1
'%s.%s' ||| _STR:0_
example# 11354
append taglib_module to tried_modules .
0
example# 11355
call the function import_library with an argument taglib_module , substitute the result for lib .
0
example# 11356
if lib is true ,
0
example# 11357
substitute lib for value under the library_name key of libraries dictionary .
0
example# 11358
break loop execution .
0
example# 11359
if lib is false ,
0
example# 11360
raise an InvalidTemplateLibrary exception with an argument string _STR:0_ ,
1
"Template library %s not found, tried %s" ||| _STR:0_
example# 11361
where ' % s ' is replaced with library_name and elements of tried_modules joined into a string , separated by _STR:0_ . return lib .
1
',' ||| _STR:0_
example# 11362
define the function add_to_builtins with an argument module .
0
example# 11363
call the function import_library with an argument module , append the result to builtins .
0
example# 11364
call the function add_to_builtins with an argument string _STR:0_ .
1
'django.template.defaulttags' ||| _STR:0_
example# 11365
call the function add_to_builtins with an argument string _STR:0_ .
1
'django.template.defaultfilters' ||| _STR:0_
example# 11366
call the function add_to_builtins with an argument string _STR:0_ .
1
'django.template.loader_tags' ||| _STR:0_
example# 11367
from copy import copy into default name space .
0
example# 11368
from django.utils.module_loading [ django . utils . module_loading ] import import_string into default name space .
0
example# 11369
_standard_context_processors is None .
0
example# 11370
_builtin_context_processors is a tuple containing a string _STR:0_ .
1
'django.core.context_processors.csrf' ||| _STR:0_
example# 11371
derive the class ContextPopException from the Exception base class .
0
example# 11372
do nothing .
0
example# 11373
derive the class ContextDict from the dict base class .
0
example# 11374
define the method __init__ with 4 arguments : self , context , unpacked list args and unpacked dictionary kwargs .
0
example# 11375
call the method __init__ from the base class of the class ContextDict , with 2 arguments : unpacked list args and unpacked dictionary kwargs .
0
example# 11376
append self to context.dicts [ context . dicts ] .
0
example# 11377
substitute context for self.context [ self . context ] .
0
example# 11378
define the method __enter__ with an argument self .
0
example# 11379
return self .
0
example# 11380
define the method __exit__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
0
example# 11381
remove the first element from the self.context [ self . context ] .
0
example# 11382
derive the class BaseContext from the object base class .
0
example# 11383
define the method __init__ with 2 arguments : self and dict_ set to None .
0
example# 11384
call the method self._reset_dicts [ self . _reset_dicts ] with an argument dict_ .
0
example# 11385
define the method _reset_dicts with 2 arguments : self and value set to None .
0
example# 11386
builtins is an dictionary with 3 initial entries : boolean True for _STR:0_ , boolean False for _STR:1_ and None for _STR:2_ .
3
'False' ||| _STR:1_
'None' ||| _STR:2_
'True' ||| _STR:0_
example# 11387
self.dicts [ self . dicts ] is an list with element builtins .
0
example# 11388
if value is not None ,
0
example# 11389
append value to self.dicts [ self . dicts ] list .
0
example# 11390
define the method __copy__ with an argument self .
0
example# 11391
call the function copy with an argument base class of the class BaseContext , substitute the result for duplicate .
0
example# 11392
hard copy list self.dicts [ self . dicts ] to duplicate.dicts [ duplicate . dicts ] .
0
example# 11393
return duplicate .
0
example# 11394
define the method __repr__ with an argument self .
0
example# 11395
return printable representation of self.dicts [ self . dicts ] .
0
example# 11396
define the method __iter__ with an argument self .
0
example# 11397
for every d in reversed list self.dicts [ self . dicts ] ,
0
example# 11398
yield d .
0
example# 11399
define the method push with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
0
example# 11400
instantiate class ContextDict with 3 arguments : self , unpacked list args and unpacked dictionary kwargs , return it .
0
example# 11401
define the method pop with an argument self .
0
example# 11402
if length of self.dicts [ self . dicts ] is equal to an integer 1 ,
0
example# 11403
raise an ContextPopException .
0
example# 11404
call the method self.dicts.pop [ self . dicts . pop ] , return the result .
0
example# 11405
define the method __setitem__ with 3 arguments : self , key and value .
0
example# 11406
substitute value for value under the key key of dictionary at last element of self.dicts [ self . dicts ] .
0
example# 11407
define the method __getitem__ with 2 arguments : self and key .
0
example# 11408
for every d in reversed list self.dicts [ self . dicts ] ,
0
example# 11409
if key is contained in d ,
0
example# 11410
return value under the key key of d dictionary .
0
example# 11411
raise KeyError exception with an argument key .
0
example# 11412
define the method __delitem__ with 2 arguments : self and key .
0
example# 11413
delete value under the key key of dictionary at last element of self.dicts [ self . dicts ] .
0
example# 11414
define the method has_key with 2 arguments : self and key .
0
example# 11415
for every d in self.dicts [ self . dicts ] ,
0
example# 11416
if key is contained in d ,
0
example# 11417
return boolean True .
0
example# 11418
return boolean False .
0
example# 11419
define the method __contains__ with 2 arguments : self and key .
0
example# 11420
call the method self.has_key [ self . has_key ] with an argument key , return the result .
0
example# 11421
define the method got with 3 arguments : self , key and otherwise set to None .
0
example# 11422
for every d in reversed list self.dicts [ self . dicts ] ,
0
example# 11423
if key is contained in d ,
0
example# 11424
return value under the key key of d dictionary .
0
example# 11425
return otherwise .
0
example# 11426
define the method new with 2 arguments : self and values set to None .
0
example# 11427
call the function copy with an argument self , substitute the result for new_context .
0
example# 11428
call the method new_context._reset_dicts [ new_context . _reset_dicts ] values .
0
example# 11429
return new_context .
0
example# 11430
define the method flatten with an argument self .
0
example# 11431
flat is an empty dictionary ,
0
example# 11432
for every d in self.dicts [ self . dicts ] ,
0
example# 11433
update flat dictionary with d .
0
example# 11434
return flat .
0
example# 11435
define the method __eq__ with 2 arguments : self and other .
0
example# 11436
if other is an instance of BaseContext class ,
0
example# 11437
call the flatten method of the self and other objects , if they are equal , return boolean True , if not return boolean False .
0
example# 11438
return boolean False .
0
example# 11439
derive the class Context from the BaseContext base class .
0
example# 11440
define the method __init__ with 6 arguments : self , dict_ set to None , autoescape set to True , current_app set to None ,
0
example# 11441
use_l10n set to None and use_tz set to None . substitute autoescape for self.autoescape [ self . autoescape ] .
0
example# 11442
substitute current_app for self.current_app [ self . current_app ] .
0
example# 11443
substitute use_l10n for self.use_l10n [ self . use_l10n ] .
0
example# 11444
substitute use_tz for self.use_tz [ self . use_tz ] .
0
example# 11445
self.render_context [ self . render_context ] is a instance of RenderContext class .
0
example# 11446
call the the method __init__ from the base class of the class Context .
0
example# 11447
define the method __copy__ with an argument self .
0
example# 11448
call the the method __copy__ from the base class of the class Context , substitute the result for duplicate .
0
example# 11449
call the function copy with an argument self.render_context [ self . render_context ] , substitute the result for duplicate.render_context [ duplicate . render_context ] .
0
example# 11450
return duplicate
0
example# 11451
define the method update with 2 arguments : self and other_dict .
0
example# 11452
if other_dict doesnt have an _STR:0_ attribute ,
1
'__getitem__' ||| _STR:0_
example# 11453
raise an TypeError exception with an argument string _STR:0_ .
1
'other_dict must be a mapping (dictionary-like) object.' ||| _STR:0_
example# 11454
append other_dict to self.dicts [ self . dicts ] .
0
example# 11455
return other_dict .
0
example# 11456
derive the class RenderContext from the BaseContext base class .
0
example# 11457
define the method __iter__ with an argument self .
0
example# 11458
for every d in last element of self.dicts [ self . dicts ] ,
0
example# 11459
yield d .
0
example# 11460
define the method has_key with 2 arguments : self and key .
0
example# 11461
if key is contained in last element of self.dicts [ self . dicts ] , return boolean True , otherwise return boolean False .
0
example# 11462
define the method get with 3 arguments : self , key and otherwise set to None .
0
example# 11463
return value under the key key of dictionary in last element of self.dicts [ self . dicts ] ,
0
example# 11464
if it doesnt exists return otherwise . define the method __getitem__ with 2 arguments : self and key .
0
example# 11465
return value under the key key of dictionary in last element of self.dicts [ self . dicts ] .
0
example# 11466
define the function get_standard_processors .
0
example# 11467
from django.conf [ django . conf ] import settings into default namespace .
0
example# 11468
use global variable _standard_context_processors .
0
example# 11469
if _standard_context_processors is None ,
0
example# 11470
processors is an empty list .
0
example# 11471
collect is an empty list .
0
example# 11472
extend collect list with _builtin_context_processors .
0
example# 11473
extend collect list with settings.TEMPLATE_CONTEXT_PROCESSORS [ settings . TEMPLATE_CONTEXT_PROCESSORS ] .
0
example# 11474
for every path in collect ,
0
example# 11475
call the function import_string with an argument path , substitute the result for func .
0
example# 11476
append func to processors .
0
example# 11477
convert processors elements into a tuple , substitute it for _standard_context_processors .
0
example# 11478
return _standard_context_processors .
0
example# 11479
derive the class RequestContext from the Context base class .
0
example# 11480
define the method __init__ with 7 arguments : self , request , dict_ set to None , processors set to None , current_app set to None ,
0
example# 11481
use_l10n set to None and use_tz set to None . call the method Context.__init__ [ Context . __init__ ] with 5 arguments : self , dict_ , current_app as current_app , use_l10n as use_l10n , use_tz as use_tz .
0
example# 11482
if processors is None ,
0
example# 11483
processors is an empty tuple .
0
example# 11484
if not ,
0
example# 11485
convert processors into a tuple and substitute it for processors .
0
example# 11486
updates is an empty dictionary .
0
example# 11487
call the function get_standard_processors , append processors to the result , for every processor is the result ,
0
example# 11488
call the function processor with an argument request , update updates dictionary with the result .
0
example# 11489
update self dictionary with updates .
0
example# 11490
from django.template.base [ django . template . base ] import Lexer , Parser , tag_re , NodeList , VariableNode and TemplateSyntaxError into default name space .
0
example# 11491
from django.utils.encoding [ django . utils . encoding ] import force_text into default name space .
0
example# 11492
from django.utils.html [ django . utils . html ] import escape into default name space .
0
example# 11493
from django.utils.safestring [ django . utils . safestring ] import SafeData and EscapeData into default name space .
0
example# 11494
from django.utils.formats [ django . utils . formats ] import localize into default name space .
0
example# 11495
from django.utils.timezone [ django . utils . timezone ] import template_localtime into default name space .
0
example# 11496
derive the class DebugLexer from the Lexer base class .
0
example# 11497
define the method __init__ with 3 arguments : self , template_string and origin .
0
example# 11498
call the method __init__ from the base class of the class DebugLexer , with 2 arguments : template_string and origin .
0
example# 11499
define the method tokenize with an argument self .
0
example# 11500
result is an empty list , upto is integer 0 .
0
example# 11501
call the method tag_re.finditer [ tag_re . finditer ] with an argument self.template_string [ self . template_string ] , for every match in result ,
0
example# 11502
call the method match.span [ match . span ] , substitute the result for start an end , respectively .
0
example# 11503
if start is greater than upto ,
0
example# 11504
call the method self.create_token [ self . create_token ] with 3 arguments : self.template_string [ self . template_string ] list elements from upto index to start index ,
0
example# 11505
tuple with 2 elements : upto and start and boolean False , append the result to result . substitute start for upto .
0
example# 11506
call the method self.create_token [ self . create_token ] with 3 arguments : self.template_string [ self . template_string ] list elements from start index to end index ,
0
example# 11507
tuple with 2 elements : start and end and boolean False , append the result to result . substitute end for upto .
0
example# 11508
substitute elements of self.template_string [ self . template_string ] list from upto index to the end for last_lit .
0
example# 11509
if last_bit is true ,
0
example# 11510
call the method self.create_token [ self . create_token ] with 3 arguments : last_bit , tuple with 2 elements : upto and sum of upto and length of last_bit ,
0
example# 11511
and boolean False , append the result to result . return result .
0
example# 11512
define the method create_token with 4 arguments : self , token_string , source and in_tag .
0
example# 11513
call the method create_token from the base class of the class DebugLexer , with 2 arguments : template_string and in_tag ,
0
example# 11514
substitute the result for token . assign self.origin [ self . origin ] , source to token.source [ token . source ] .
0
example# 11515
return token .
0
example# 11516
derive the class DebugParser from the Parser base class .
0
example# 11517
define the method __init__ with 2 arguments : self and lexer .
0
example# 11518
call the method __init__ with an argument lexer , from the base class of the class DebugParser .
0
example# 11519
self.command_stack [ self . command_stack ] is an empty list .
0
example# 11520
define the method enter_command with 3 arguments : self , command and token .
0
example# 11521
append tuple with 2 elements : command and token.source [ token . source ] , append the result to self.command_stack [ self . command_stack ] .
0
example# 11522
define the method exit_command with an argument self .
0
example# 11523
remove first element from self.command_stack [ self . command_stack ] .
0
example# 11524
define the method error with 3 arguments : self , token and msg .
0
example# 11525
call the method self.source_error [ self . source_error ] with 2 arguments : token.source [ token . source ] and msg , return the result .
0
example# 11526
define the method source_error with 3 arguments : self , source and msg .
0
example# 11527
e is an instance of TemplateSyntaxError class , created with an argument msg .
0
example# 11528
substitute source for e.django_template_source [ e . django_template_source ] .
0
example# 11529
return e .
0
example# 11530
define the method create_nodelist with an argument self .
0
example# 11531
return an instance of DebugNodeList class .
0
example# 11532
define the method create_variable_node with 2 arguments : self and contents .
0
example# 11533
return an instance of DebugVariableNode , created with an argument contents .
0
example# 11534
define the method extend_nodelist with 4 arguments : self , nodelist , node and token .
0
example# 11535
substitute token.source [ token . source ] for node.source [ node . source ] .
0
example# 11536
call the method extend_nodelist with 3 arguments : nodelist , node and token , from the base class of the class DebugParser .
0
example# 11537
define the method unclosed_block_tag with 2 arguments : self and parse_until .
0
example# 11538
remove the first element from self.command_stack [ self . command_stack ] , assign the result to command and source , respectively .
0
example# 11539
msg is an string _STR:0_ , where ' % s ' is replaced with command ,
1
"Unclosed tag '%s'. Looking for one of: %s " ||| _STR:0_
example# 11540
and elements of parse_until joined into a string , separated by string _STR:0_ . raise an self.source_error [ self . source_error ] exception with 2 arguments : source and msg .
1
', ' ||| _STR:0_
example# 11541
define the method compile_filter_error with 3 arguments : self , token and e .
0
example# 11542
if e doesnt have an _STR:0_ attribute ,
1
'django_template_source' ||| _STR:0_
example# 11543
substitute token.source [ token . source ] for e.django_template_source [ e . django_template_source ] .
0
example# 11544
define the method compile_function_error with 3 arguments : self , token and e .
0
example# 11545
if e doesnt have an _STR:0_ attribute ,
1
'django_template_source' ||| _STR:0_
example# 11546
substitute token.source [ token . source ] for e.django_template_source [ e . django_template_source ] .
0
example# 11547
derive the class DebugNodeList from the NodeList base class .
0
example# 11548
define the method render_node with 3 arguments : self , node and context .
0
example# 11549
try ,
0
example# 11550
call the method node.render [ node . render ] with an argument context , return the result .
0
example# 11551
if Exception , renamed to e , exception is caught ,
0
example# 11552
if e doesnt have an _STR:0_ attribute ,
1
'django_template_source' ||| _STR:0_
example# 11553
substitute node.source [ node . source ] for e.django_template_source [ e . django_template_source ] .
0
example# 11554
raise an exception .
0
example# 11555
derive the class DebugVariableNode from the VariableNode base class .
0
example# 11556
define the method render with 2 arguments : self and context .
0
example# 11557
try ,
0
example# 11558
call the method self.filter_expression.resolve [ self . filter_expression . resolve ] with an argument context , substitute the result for output .
0
example# 11559
call the function template_localtime with 2 arguments : output and use_tz set to context.use_tz [ context . use_tz ] , substitute the result for output .
0
example# 11560
call the function localize with 2 arguments : output and use_l10n set to context.use_l10n [ context . use_l10n ] , substitute the result for output .
0
example# 11561
call the function force_text with an argument output , substitute the result for output .
0
example# 11562
if UnicodeDecodeError exception is caught ,
0
example# 11563
return an empty string .
0
example# 11564
if Exception , renamed to e , exception is caught ,
0
example# 11565
if e doesnt have an _STR:0_ attribute ,
1
'django_template_source' ||| _STR:0_
example# 11566
substitute self.source [ self . source ] for e.django_template_source [ e . django_template_source ] .
0
example# 11567
raise an exception .
0
example# 11568
if context.autoescape [ context . autoescape ] is true and output is not an instance of SafeData class or output is an instance of EscapeData class ,
0
example# 11569
call the function escape with an argument output .
0
example# 11570
if not ,
0
example# 11571
return output .
0
example# 11572
from __future__ import unicode_literals into default name space .
0
example# 11573
import module re .
0
example# 11574
import module random as random_module .
0
example# 11575
from decimal import Decimal , InvalidOperation , Context and ROUND_HALF_UP into default name space .
0
example# 11576
from functools import wraps into default name space .
0
example# 11577
from pprint import pformat into default name space .
0
example# 11578
from django.template.base [ django . template . base ] import Variable , Library and VariableDoesNotExist into default name space .
0
example# 11579
from django.conf [ django . conf ] import settings into default name space .
0
example# 11580
from django.utils [ django . utils ] import formats into default name space .
0
example# 11581
from django.utils.dateformat [ django . utils . dateformat ] import format and time_format into default name space .
0
example# 11582
from django.utils.encoding [ django . utils . encoding ] import force_text and iri_to_uri into default name space .
0
example# 11583
from django.utils.html [ django . utils . html ] import conditional_escape , escapejs , escape , urlize as _urlize , linebreaks , strip_tags , avoid_wrapping ,
0
example# 11584
and remove_tags . from django.utils.http [ django . utils . http ] import urlquote into default name space .
0
example# 11585
from django.utils.text [ django . utils . text ] import Truncator , wrap and phone2numeric into default name space .
0
example# 11586
from django.utils.safestring [ django . utils . safestring ] import mark_safe , SafeData and mark_for_escaping into default name space .
0
example# 11587
from django.utils [ django . utils ] import six into default name space .
0
example# 11588
from django.utils.timesince [ django . utils . timesince ] import timesince and timeuntil into default name space .
0
example# 11589
from django.utils.translation [ django . utils . translation ] import ugettext and ungettext into default name space .
0
example# 11590
from django.utils.text [ django . utils . text ] import normalize_newlines and slugify as _slugify into default name space .
0
example# 11591
register is an instance of Library class .
0
example# 11592
define the method stringfilter with an argument func .
0
example# 11593
define the method _dec with 2 arguments : unpacked list args and unpacked dictionary kwargs .
0
example# 11594
if args in true ,
0
example# 11595
convert args into a list , substitute it for args .
0
example# 11596
call the function force_text with an argument first element of args , substitute the result for first element of args .
0
example# 11597
if first element of args is an instance of SafeData , and _STR:0_ attribute of dec._decorated_function [ dec . _decorated_function ] object is true ,
1
'is_safe' ||| _STR:0_
example# 11598
call the function func with 2 arguments : unpacked list args and unpacked dictionary kwargs ,
0
example# 11599
use the result as an argument for the call to the mark_safe function , return the result . call the function func with 2 arguments : unpacked list args and unpacked dictionary kwargs , return the result .
0
example# 11600
get _STR:0_ attribute from the func object , substitute it for _dec._decorated_function [ _dec . _decorated_function ] , if it doesnt exist ,
1
'_decorated_function' ||| _STR:0_
example# 11601
substitute func for _dec._decorated_function [ _dec . _decorated_function ] . call the function wraps with an argument func , call the result with an argument _dec , return the result .
0
example# 11602
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean True .
0
example# 11603
decorator stringfilter ,
0
example# 11604
define the function addslashes with an argument value .
0
example# 11605
replace all occurrences of _STR:0_\\\\_STR:1_ '' _STR:2_\\ '' ' in the previous result ,
3
' with ' ||| _STR:2_
' in value, replace all occurrences of ' ||| _STR:1_
'\\' with ' ||| _STR:0_
example# 11606
replace all occurrences of _STR:0_ with _STR:1_ in the previous result , return the result . decorator function register.filter [ register . filter ] with an argument is_safe set to boolean True .
2
"'" ||| _STR:0_
"\\'" ||| _STR:1_
example# 11607
decorator stringfilter ,
0
example# 11608
define the function capfirst with an argument value .
0
example# 11609
if value is false , return it , if it is true convert first element of value to uppercase letter , return the value .
0
example# 11610
decorator function register.filter [ register . filter ] with an argument string _STR:0_ .
1
"escapejs" ||| _STR:0_
example# 11611
decorator stringfilter ,
0
example# 11612
define the function escapejs_filter with an argument value .
0
example# 11613
call the function escapejs with an argument value , return the result .
0
example# 11614
multiply 10 to the power of 200 , with itself , substitute the result for pos_inf .
0
example# 11615
multiply 10 to the power of 200 , with 10 to the power of 200 , negative , substitute the result for neg_inf .
0
example# 11616
divide 10 to the power of 400 by 10 to the power of 400 , substitute the result for nan .
0
example# 11617
special_floats is an list with 3 elements , pos_inf , neg_inf and nan , all converted to strings .
0
example# 11618
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean True .
0
example# 11619
define the function floatformat with 2 arguments text and arg set to integer -1 .
0
example# 11620
try ,
0
example# 11621
call the function force_text with an argument text , substitute the result for input_val .
0
example# 11622
d is an instance of Decimal class created with an argument input_val .
0
example# 11623
if UnicodeEncodeError exception is caught ,
0
example# 11624
return an empty string .
0
example# 11625
if InvalidOperation exception is caught ,
0
example# 11626
if every input_val in special_floats ,
0
example# 11627
return input_val .
0
example# 11628
try ,
0
example# 11629
d is an instance of class Decimal , created with result of the function force_text ,
0
example# 11630
called with an argument text converted into a floating point number . if ValueError , InvalidOperation , TypeError or UnicodeEncodeError exceptions are caught ,
0
example# 11631
return an empty string .
0
example# 11632
try ,
0
example# 11633
convert arg to an integer , substitute it for p .
0
example# 11634
if ValueError exception is caught ,
0
example# 11635
return input_val .
0
example# 11636
try ,
0
example# 11637
convert d into a integer , subtract d from it , substitute the result for m .
0
example# 11638
if ValueError , OverflowError or InvalidOperation exceptions are caught ,
0
example# 11639
return input_val .
0
example# 11640
if m is false and p is lesser than integer 0 ,
0
example# 11641
call the method formats.number_format [ formats . number_format ] with 2 arguments , d converted to a integer and then to string , and integer 0 ,
0
example# 11642
use the result as an argument for the call to the function mark_safe , return the result . if p equals integer 0 ,
0
example# 11643
exp is an instance of Decimal , created with an argument integer 1 .
0
example# 11644
if not ,
0
example# 11645
instantiate class Decimal with string _STR:0_ as argument , divide it by product of instance of Decimal class created with integer 10 ,
1
'1.0' ||| _STR:0_
example# 11646
and absolute value of p , substitute the result for exp . try ,
0
example# 11647
call the method d.as_tuple [ d . as_tuple ] , substitute the result for tupl .
0
example# 11648
subtract third element of tupl from length of second element of tupl , substitute the result for units .
0
example# 11649
sum absolute p with units an integer 1 , substitute the result for prec .
0
example# 11650
call the method d.quantize [ d . quantize ] with 3 arguments : exp , ROUND_HALF_UP and instance of Context class created with prec as prec ,
0
example# 11651
call the method as_tuple on the result , substitute the result for sign , digits and exponent , respectively . append result of method six.text_type [ six . text_type ] called with an argument digit to an list , for every digit in reversed order of digits ,
0
example# 11652
substitute the resulting list for digits . while length of digits is smaller than or equal to absolute value of exponent ,
0
example# 11653
append _STR:0_ to digits .
1
'0' ||| _STR:0_
example# 11654
insert _STR:0_ to digits at negative exponent index .
1
'.' ||| _STR:0_
example# 11655
if sign is true ,
0
example# 11656
append _STR:0_ to digits .
1
'-' ||| _STR:0_
example# 11657
reverse element order of dicts , join them in a string , substitute the result for number .
0
example# 11658
call the method formats.number_format [ formats . number_format ] with 2 arguments : number and absolute value of p ,
0
example# 11659
use the result as an argument for the call to the mark_safe function , return the result . if InvalidOperation exception is caught ,
0
example# 11660
return input_val .
0
example# 11661
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean True .
0
example# 11662
decorator stringfilter ,
0
example# 11663
define the function iriencode with an argument value .
0
example# 11664
call the function iri_to_uri with an argument value , use the result as an argument for the call to the force_text function ,
0
example# 11665
return the result . decorator function register.filter [ register . filter ] with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True .
0
example# 11666
decorator stringfilter ,
0
example# 11667
define the function linenumbers with 2 arguments value and autoescape set to None .
0
example# 11668
split value by newline characters , substitute the result for lines .
0
example# 11669
call the function six.text_type [ six . text_type ] with length of lines as an argument ,
0
example# 11670
use length of result as an argument for the call to the function six.text_type [ six . text_type ] , substitute the result for width . if autoescape is false , if value is an instance of SafeData ,
0
example# 11671
for every i and line in enumerated iterable lines ,
0
example# 11672
concatenate string _STR:0_ , width and string _STR:1_ , format the previous string with i incremented by 1 and line ,
2
"d. %s" ||| _STR:1_
'%0' ||| _STR:0_
example# 11673
substitute the result for i-th element of lines . if not ,
0
example# 11674
for every i and line in enumerated iterable lines ,
0
example# 11675
concatenate string _STR:0_ , width and string _STR:1_ , format the previous string with i incremented by 1 ,
2
"d. %s" ||| _STR:1_
'%0' ||| _STR:0_
example# 11676
and result of the function escape called with an argument line , substitute the result for i-th element of lines . call the method mark_safe with lines joined into a string , separated by newlines as argument , return the result .
0
example# 11677
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean True .
0
example# 11678
decorator stringfilter ,
0
example# 11679
define the function lower with an argument value .
0
example# 11680
convert value to lowercase and return the result .
0
example# 11681
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean False .
0
example# 11682
decorator stringfilter ,
0
example# 11683
define the function make_list with an argument value .
0
example# 11684
return value converted into a list .
0
example# 11685
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean True .
0
example# 11686
decorator stringfilter ,
0
example# 11687
define the function slugify with an argument value .
0
example# 11688
call the function _slugify with an argument value , return the result .
0
example# 11689
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean True .
0
example# 11690
define the function stringformat with 2 arguments value and arg .
0
example# 11691
try ,
0
example# 11692
call the function six.text_type [ six . text_type ] with an argument arg , append the result to _STR:0_ , format the previous with value , return the result .
1
'%' ||| _STR:0_
example# 11693
if TypeError or ValueError exceptions are caught ,
0
example# 11694
return an empty string .
0
example# 11695
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean True .
0
example# 11696
decorator stringfilter ,
0
example# 11697
define the function title with an argument value .
0
example# 11698
call the function re.sub [ re . sub ] with 3 arguments : string _STR:0_ , lambda function with an argument m and return value ,
1
"([a-z])'([A-Z])" ||| _STR:0_
example# 11699
result of the m.group [ m . group ] method called with an argument integer 0 converted into lowercase and result of the method value.title [ value . title ] , substitute the result for t. call the function re.sub [ re . sub ] with 3 arguments : string _STR:0_ , lambda function with an argument m and return value ,
1
"\d([A-Z])" ||| _STR:0_
example# 11700
result of the m.group [ m . group ] method called with an argument integer 0 converted into lowercase and t , return the result . decorator function register.filter [ register . filter ] with an argument is_safe set to boolean True .
0
example# 11701
decorator stringfilter ,
0
example# 11702
define the function truncatechars with 2 arguments value and arg .
0
example# 11703
try ,
0
example# 11704
substitute arg converted into a integer for length .
0
example# 11705
if ValueError exception is caught ,
0
example# 11706
return value .
0
example# 11707
instantiate class Truncator , with an argument value , call the method chars on the result with an argument length , return the result .
0
example# 11708
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean True .
0
example# 11709
decorator stringfilter ,
0
example# 11710
define the function truncatechars_html with 2 arguments value and arg .
0
example# 11711
try ,
0
example# 11712
substitute arg converted into an integer for length .
0
example# 11713
if ValueError exception is caught ,
0
example# 11714
return value .
0
example# 11715
instantiate class Truncator , with an argument value , call the method chars on the result with 2 arguments length ,
0
example# 11716
and html set to boolean True , return the result . decorator function register.filter [ register . filter ] with an argument is_safe set to boolean True .
0
example# 11717
decorator stringfilter ,
0
example# 11718
define the function truncatewords with 2 arguments value and arg .
0
example# 11719
try ,
0
example# 11720
substitute arg converted into an integer for length .
0
example# 11721
if ValueError exception is caught ,
0
example# 11722
return value .
0
example# 11723
instantiate class Truncator , with an argument value , call the method words on the result with 2 arguments length ,
0
example# 11724
and truncate set to string _STR:0_ , return the result . decorator function register.filter [ register . filter ] with an argument is_safe set to boolean True .
1
' ...' ||| _STR:0_
example# 11725
decorator stringfilter ,
0
example# 11726
define the function truncatewords_html with 2 arguments value and arg .
0
example# 11727
try ,
0
example# 11728
substitute arg converted into an integer for length .
0
example# 11729
if ValueError exception is caught ,
0
example# 11730
return value .
0
example# 11731
instantiate class Truncator , with an argument value , call the method words on the result with 3 arguments length ,
0
example# 11732
html set to boolean True and truncate set to string _STR:0_ , return the result . decorator function register.filter [ register . filter ] with an argument is_safe set to boolean False .
1
' ...' ||| _STR:0_
example# 11733
decorator stringfilter ,
0
example# 11734
define the function upper with an argument value .
0
example# 11735
convert value to uppercase , return the result .
0
example# 11736
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean False .
0
example# 11737
decorator stringfilter ,
0
example# 11738
define the function urlencode with 2 arguments value and safe set to None .
0
example# 11739
kwargs is an empty dictionary .
0
example# 11740
if safe is not None ,
0
example# 11741
substitute safe for value under the _STR:0_ key of kwargs dictionary .
1
'safe' ||| _STR:0_
example# 11742
call the function urlquote with 2 arguments value and unpacked dictionary kwargs , return the result .
0
example# 11743
decorator function register.filter [ register . filter ] with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True .
0
example# 11744
decorator stringfilter ,
0
example# 11745
define the function urlize with 2 arguments value and autoescape set to None .
0
example# 11746
call the function _urlize with 3 arguments : value , nofollow set to boolean True , autoescape set to autoescape ,
0
example# 11747
use the result as an argument for the call to the function mark_safe , return the result . decorator function register.filter [ register . filter ] with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True .
0
example# 11748
decorator stringfilter ,
0
example# 11749
define the function urlizetrunc with 3 arguments value , limit and autoescape set to None .
0
example# 11750
call the function _urlize with 4 arguments : value , trim_url_limit as limit converted into an integer , nofollow as boolean True ,
0
example# 11751
and autoescape as autoescape , use the result as an argument for the call to the function mark_safe , return the result . decorator function register.filter [ register . filter ] with an argument is_safe set to boolean False .
0
example# 11752
decorator stringfilter ,
0
example# 11753
define the function wordcount with an argument value .
0
example# 11754
split value into words , return the length of the result .
0
example# 11755
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean True .
0
example# 11756
decorator stringfilter ,
0
example# 11757
define the function wordwrap with 2 arguments value and arg .
0
example# 11758
call the method wrap with 2 arguments , value and arg converted into a integer , return the result .
0
example# 11759
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean True .
0
example# 11760
decorator stringfilter ,
0
example# 11761
define the function ljust with 2 arguments value and arg .
0
example# 11762
call the method value.ljust [ value . ljust ] with an argument , arg converted into a integer , return the result .
0
example# 11763
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean True .
0
example# 11764
decorator stringfilter ,
0
example# 11765
define the function rjust with 2 arguments value and arg .
0
example# 11766
call the method value.rjust [ value . rjust ] with an argument , arg converted into a integer , return the result .
0
example# 11767
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean True .
0
example# 11768
decorator stringfilter ,
0
example# 11769
define the function center with 2 arguments value and arg .
0
example# 11770
call the method value.center [ value . center ] with an argument , arg converted into a integer , return the result .
0
example# 11771
decorator register.filter [ register . filter ] .
0
example# 11772
decorator stringfilter ,
0
example# 11773
define the function cut with 2 arguments value and arg .
0
example# 11774
if value is an instance of SafeData , safe is boolean True , otherwise it is boolean False .
0
example# 11775
replace every occurrence of arg is value for an empty string , substitute the result for value .
0
example# 11776
if safe is true and arg is not equal to string _STR:0_ ,
1
';' ||| _STR:0_
example# 11777
call the function mark_safe with an argument value , return the result .
0
example# 11778
return value .
0
example# 11779
decorator function register.filter [ register . filter ] with 2 arguments string _STR:0_ and is_safe set to boolean True .
1
"escape" ||| _STR:0_
example# 11780
decorator stringfilter ,
0
example# 11781
define the function escape_filter with an argument value .
0
example# 11782
call the function mark_for_escaping with an argument value , return the result .
0
example# 11783
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean True .
0
example# 11784
decorator stringfilter ,
0
example# 11785
define the function force_escape with an argument value .
0
example# 11786
call the function escape with an argument value , return the result .
0
example# 11787
decorator function register.filter [ register . filter ] with 3 arguments string _STR:0_ , is_safe set to boolean True and needs_autoescape set to True .
1
"slice" ||| _STR:0_
example# 11788
decorator stringfilter ,
0
example# 11789
define the function linebreaks_filter with 2 arguments value and autoescape set to None .
0
example# 11790
if autoescape is true and value is not an instance of SafeData , autoescape is boolean True , otherwise it is boolean False .
0
example# 11791
call the function linebreaks with 2 arguments value and autoescape , use the result as an argument for the call to the mark_safe ,
0
example# 11792
return the result . decorator function register.filter [ register . filter ] with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True .
0
example# 11793
decorator stringfilter ,
0
example# 11794
define the function linebreaksbr with 2 arguments value and autoescape set to None .
0
example# 11795
if autoescape is true and value is not an instance of SafeData , autoescape is boolean True , otherwise it is boolean False .
0
example# 11796
call the function normalize_newlines with an argument value , substitute the result for value .
0
example# 11797
if autoescape is true ,
0
example# 11798
call the function escape with an argument value , substitute it for value .
0
example# 11799
replace every occurrence of newline character in value with string _STR:0_ , use it as an argument for the call to the mark_safe ,
1
'<br />' ||| _STR:0_
example# 11800
return the result . decorator function register.filter [ register . filter ] with an argument is_safe set to boolean True .
0
example# 11801
decorator stringfilter ,
0
example# 11802
define the function safe with an argument value .
0
example# 11803
call the function mark_safe with an argument value , return the result .
0
example# 11804
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean True .
0
example# 11805
define the function safeseq with an argument value .
0
example# 11806
for every obj in value call the function mark_safe with an argument result of the function force_text called with an argument obj ,
0
example# 11807
return all the results in a list . decorator function register.filter [ register . filter ] with an argument is_safe set to boolean True .
0
example# 11808
decorator stringfilter ,
0
example# 11809
define the function removetags with 2 arguments value and arg .
0
example# 11810
call the function remove_tags with 2 arguments value and tags , return the result .
0
example# 11811
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean True .
0
example# 11812
decorator stringfilter ,
0
example# 11813
define the function striptags with an argument value .
0
example# 11814
call the function strip_tags with an argument value , return the result .
0
example# 11815
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean False .
0
example# 11816
define the function dictsort with 2 arguments value and arg .
0
example# 11817
try ,
0
example# 11818
sort value with key set to filed resolve of instance of a class Variable , created with an argument arg , return the result .
0
example# 11819
if TypeError or VariableDoesNotExist exceptions are caught ,
0
example# 11820
return an empty string .
0
example# 11821
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean False .
0
example# 11822
define the function dictsortreversed with 2 arguments value and arg .
0
example# 11823
try ,
0
example# 11824
sort value with key set to filed resolve of instance of a class Variable , created with an argument arg , reverse the sort and return the result .
0
example# 11825
if TypeError or VariableDoesNotExist exceptions are caught ,
0
example# 11826
return an empty string .
0
example# 11827
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean False .
0
example# 11828
define the function first with an argument value .
0
example# 11829
try ,
0
example# 11830
return first element of value .
0
example# 11831
if IndexError exception is caught ,
0
example# 11832
return an empty string .
0
example# 11833
decorator function register.filter [ register . filter ] with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True .
0
example# 11834
define the function join with 3 arguments : value , arg and autoescape set to None .
0
example# 11835
map elements of value through mapping function force_text , substitute the result for value .
0
example# 11836
if autoescape is true ,
0
example# 11837
for every v in value call the function conditional_escape with an argument v , append the result in a list , substitute the resulting list for value .
0
example# 11838
try ,
0
example# 11839
call the function conditional_escape with an argument arg , call the method join on the result with an argument value ,
0
example# 11840
substitute the result for data . if AttributeError exception is caught ,
0
example# 11841
return value .
0
example# 11842
call the function mark_safe with an argument data , return the result .
0
example# 11843
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean True .
0
example# 11844
define the function last with an argument value .
0
example# 11845
try ,
0
example# 11846
return last element of value .
0
example# 11847
if IndexError exception is caught ,
0
example# 11848
return an empty string .
0
example# 11849
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean False .
0
example# 11850
define the function length with an argument value .
0
example# 11851
try ,
0
example# 11852
return length of value ,
0
example# 11853
if TypeError or ValueError exceptions are caught ,
0
example# 11854
return integer 0 .
0
example# 11855
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean False .
0
example# 11856
define the function length_is with 2 arguments value and arg .
0
example# 11857
try ,
0
example# 11858
if lengths of value and arg are equal , return boolean True , otherwise return boolean False .
0
example# 11859
if TypeError or ValueError exceptions are caught ,
0
example# 11860
return an empty string .
0
example# 11861
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean True .
0
example# 11862
define the function random with an argument value .
0
example# 11863
call the function random_module.choice [ random_module . choice ] with an argument value , return the result .
0
example# 11864
decorator function register.filter [ register . filter ] with 2 arguments string _STR:0_ and is_safe set to boolean True .
1
"slice" ||| _STR:0_
example# 11865
define the function slice_filter with 2 arguments value and arg .
0
example# 11866
try ,
0
example# 11867
bits is an empty list .
0
example# 11868
split arg by _STR:0_ , for every x in result ,
1
':' ||| _STR:0_
example# 11869
if length of x is equal to integer 0 ,
0
example# 11870
append None to bits .
0
example# 11871
if not ,
0
example# 11872
append x converted to an integer to bits .
0
example# 11873
slice the list value with unpacked list bits as an argument , return the result .
0
example# 11874
if TypeError or ValueError exceptions are caught ,
0
example# 11875
return value .
0
example# 11876
decorator function register.filter [ register . filter ] with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True .
0
example# 11877
define the function unordered_list with 2 arguments value and autoescape set to None .
0
example# 11878
if autoescape is true ,
0
example# 11879
substitute conditional_escape for escaper .
0
example# 11880
if not ,
0
example# 11881
escaper is an identity lambda function .
0
example# 11882
define the function convert_old_style_list with an argument list_ .
0
example# 11883
if list_ is not an instance of tuple or list types and length of list_ is not equal to integer 2 ,
0
example# 11884
return list_ and boolean False .
0
example# 11885
substitute list_ for first_item and second_item , respectively .
0
example# 11886
if second_item is an empty list ,
0
example# 11887
return list with an element first_item , and boolean True .
0
example# 11888
try ,
0
example# 11889
convert second item to an iterable ,
0
example# 11890
if TypeError exception is caught ,
0
example# 11891
return list_ and boolean False .
0
example# 11892
old_style_list is boolean True .
0
example# 11893
new_second_item is an empty list .
0
example# 11894
for every sublist in second_item ,
0
example# 11895
call the function convert_old_style_list with an argument sublist , substitute the result for item and old_style_list .
0
example# 11896
if old_style_list is false ,
0
example# 11897
break from the loop execution ,
0
example# 11898
extend new_second_item with item .
0
example# 11899
if old_style_list is true ,
0
example# 11900
substitute new_second_item with second_item .
0
example# 11901
return list with 2 elements : first_item and second_item , and old_style_list .
0
example# 11902
define the function _helper with 2 arguments list and tabs set to integer 1 .
0
example# 11903
indent contain tabs number of tab character .
0
example# 11904
output is an empty list .
0
example# 11905
substitute length of list_ for list_length .
0
example# 11906
i is integer 0 .
0
example# 11907
while i is smaller than list_length ,
0
example# 11908
substitute i-th element of list for title .
0
example# 11909
sublist is an empty string .
0
example# 11910
sublist_item is None .
0
example# 11911
if title is an instance of list or tuple ,
0
example# 11912
substitute title for sublist_item .
0
example# 11913
title is an empty string .
0
example# 11914
otherwise if i is smaller than list_length decremented by one ,
0
example# 11915
substitute ( i+1 ) -th element of list_ for next_item .
0
example# 11916
if next_item is true and next_item is an instance of list or tuple type ,
0
example# 11917
substitute next_item for sublist_item .
0
example# 11918
increment i by integer 1 .
0
example# 11919
if sublist_item is true ,
0
example# 11920
call the function _helper with 2 arguments : sublist_item and tabs incremented by 1 , substitute the result for sublist .
0
example# 11921
sublist is an string _STR:0_ , where every ' % s ' is replaced with indent , sublist , indent and indent , respectively .
1
'\n%s<ul>\n%s\n%s</ul>\n%s' ||| _STR:0_
example# 11922
substitute every ' % s ' in string _STR:0_ with indent , with result of the function escaper called with an argument :
1
'%s<li>%s%s</li>' ||| _STR:0_
example# 11923
result of the function force_text called with an argument title , and with sublist , append the string to output . increment i by 1 .
0
example# 11924
join elements of output into a string , separated with newlines , return the result .
0
example# 11925
call the function convert_old_style_list with an argument value , substitute the result for value and converted , respectively .
0
example# 11926
call the function _helper with an argument value , use it as an argument for the call to the function mark_safe , return the result .
0
example# 11927
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean False .
0
example# 11928
define the function add with 2 arguments value and arg .
0
example# 11929
try ,
0
example# 11930
convert value and arg into a integers , return their sum .
0
example# 11931
if TypeError or ValueError exceptions are caught ,
0
example# 11932
try ,
0
example# 11933
sum value and arg , return the result .
0
example# 11934
if Exception exception is caught ,
0
example# 11935
return an empty string .
0
example# 11936
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean False .
0
example# 11937
define the function get_digit with 2 arguments value and arg .
0
example# 11938
try ,
0
example# 11939
convert arg to an integer .
0
example# 11940
convert value to an integer .
0
example# 11941
if ValueError exception is caught ,
0
example# 11942
return value .
0
example# 11943
if arg is smaller than integer 1 ,
0
example# 11944
return value .
0
example# 11945
try ,
0
example# 11946
convert value into a string , take character at the negative arg index , convert it into an integer , return it .
0
example# 11947
if IndexError exception is caught ,
0
example# 11948
return integer 0 .
0
example# 11949
decorator function register.filter [ register . filter ] with 2 arguments expects_localtime set to boolean True and is_safe set to boolean False .
0
example# 11950
define the function date with 2 arguments value and arg set to None .
0
example# 11951
if vale is None or an empty string ,
0
example# 11952
return an empty string .
0
example# 11953
if arg is None ,
0
example# 11954
substitute settings.DATE_FORMAT [ settings . DATE_FORMAT ] for arg .
0
example# 11955
try ,
0
example# 11956
call the method formats.time_format [ formats . time_format ] with 2 arguments : value and arg , return the result .
0
example# 11957
if AttributeError exception is caught ,
0
example# 11958
try ,
0
example# 11959
format value into printable data representation with formating rules arg , return the result .
0
example# 11960
if AttributeError exception is caught ,
0
example# 11961
return an empty string .
0
example# 11962
decorator function register.filter [ register . filter ] with 2 arguments expects_localtime set to boolean True and is_safe set to boolean False .
0
example# 11963
define the function time with 2 arguments value and arg set to None .
0
example# 11964
if vale is None or an empty string ,
0
example# 11965
return an empty string .
0
example# 11966
if arg is None
0
example# 11967
substitute settings.TIME_FORMAT [ settings . TIME_FORMAT ] for arg .
0
example# 11968
try ,
0
example# 11969
call the method formats.time_format [ formats . time_format ] with 2 arguments : value and arg , return the result .
0
example# 11970
if AttributeError exception is caught ,
0
example# 11971
try ,
0
example# 11972
call the function time_format with 2 arguments : value and arg , return the result .
0
example# 11973
if AttributeError exception is caught ,
0
example# 11974
return an empty string .
0
example# 11975
decorator function register.filter [ register . filter ] with 2 arguments string _STR:0_ and is_safe set to boolean False .
1
"timesince" ||| _STR:0_
example# 11976
define the function timesince_filter with 2 arguments value and arg set to None .
0
example# 11977
if value is false ,
0
example# 11978
return an empty string .
0
example# 11979
try ,
0
example# 11980
if arg is true ,
0
example# 11981
call the function timesince with 2 arguments : value and arg , return the result .
0
example# 11982
call the function timesince with an argument value , return the result .
0
example# 11983
if TypeError or ValueError exceptions are caught ,
0
example# 11984
return an empty string .
0
example# 11985
decorator function register.filter [ register . filter ] with 2 arguments string _STR:0_ and is_safe set to boolean False .
1
"timeuntil" ||| _STR:0_
example# 11986
define the function timeuntil_filter with 2 arguments value and arg set to None .
0
example# 11987
if value is false ,
0
example# 11988
return an empty string .
0
example# 11989
try ,
0
example# 11990
call the function timeuntil with 2 arguments value and arg , return the result .
0
example# 11991
if TypeError or ValueError exceptions are caught ,
0
example# 11992
return an empty string .
0
example# 11993
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean False .
0
example# 11994
define the function default with 2 arguments value and arg .
0
example# 11995
return value , if it is None return arg .
0
example# 11996
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean False .
0
example# 11997
define the function default_if_none with 2 arguments value and arg .
0
example# 11998
if value is None ,
0
example# 11999
return arg .
0
example# 12000
return value .
0
example# 12001
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean False .
0
example# 12002
define the function divisibleby with 2 arguments value and arg .
0
example# 12003
convert value and arg to integers , if value is divisible by arg , return True , otherwise return boolean False .
0
example# 12004
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean False .
0
example# 12005
define the function yesno with 2 arguments value and arg set to None .
0
example# 12006
if arg is None
0
example# 12007
call the function ugettext with string _STR:0_ as an argument , substitute the result for arg .
1
'yes,no,maybe' ||| _STR:0_
example# 12008
split arg by _STR:0_ , substitute the result for bits .
1
',' ||| _STR:0_
example# 12009
if length of bits is lesser than integer 2 ,
0
example# 12010
return value .
0
example# 12011
try ,
0
example# 12012
assign bits elements to yes , no and maybe , respectively .
0
example# 12013
if ValueError exception is caught ,
0
example# 12014
substitute first , second and second elements of bits for yes , no , maybe , respectively .
0
example# 12015
if value is None ,
0
example# 12016
return maybe .
0
example# 12017
if value is true ,
0
example# 12018
return yes .
0
example# 12019
return no .
0
example# 12020
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean True .
0
example# 12021
define the function filesizeformat with an argument bytes .
0
example# 12022
try ,
0
example# 12023
convert bytes to floating point number , substitute it for bytes .
0
example# 12024
if TypeError , ValueError or UnicodeDecodeError exceptions are caught ,
0
example# 12025
call the function ungettext with 3 arguments : string _STR:0_ , string _STR:1_ and 0 , _STR:2_ is replaced with 0 ,
3
'%(size)d' ||| _STR:2_
"%(size)d byte" ||| _STR:0_
"%(size)d bytes" ||| _STR:1_
example# 12026
substitute the result for value . call the function avoid_wrapping with an argument value , return the result .
0
example# 12027
filesize_number_format is an lambda function with an argument value , return value is the result of the method formats.number_format [ formats . number_format ] ,
0
example# 12028
called with 2 arguments : value rounded to 1 decimal point and integer 1. move integer 1 left for 10 bits , substitute the result for KB .
0
example# 12029
move integer 1 left for 20 bits , substitute the result for MB .
0
example# 12030
move integer 1 left for 30 bits , substitute the result for GB .
0
example# 12031
move integer 1 left for 40 bits , substitute the result for TB .
0
example# 12032
move integer 1 left for 50 bits , substitute the result for PB .
0
example# 12033
if bytes is smaller than KB ,
0
example# 12034
call the function ugettext with 3 arguments , string _STR:0_ , string _STR:1_ and bytes ,
2
"%(size)d byte" ||| _STR:0_
"%(size)d bytes" ||| _STR:1_
example# 12035
replace ' % ( size ) d with bytes , substitute the result for value . otherwise if bytes is smaller than MB ,
0
example# 12036
call the function ugettext with an argument string _STR:0_ , substitute ' % s ' with the result of the call to the function ,
1
"%s KB" ||| _STR:0_
example# 12037
filesize_number_format with result of division of bytes by KB as an argument , substitute the result for value . otherwise if bytes is smaller than GB ,
0
example# 12038
call the function ugettext with an argument string _STR:0_ , substitute ' % s ' with the result of the call to the function ,
1
"%s MB" ||| _STR:0_
example# 12039
filesize_number_format with result of division of bytes by MB as an argument , substitute the result for value . otherwise if bytes is smaller than TB ,
0
example# 12040
call the function ugettext with an argument string _STR:0_ , substitute ' % s ' with the result of the call to the function ,
1
"%s GB" ||| _STR:0_
example# 12041
filesize_number_format with result of division of bytes by GB as an argument , substitute the result for value . otherwise if bytes is smaller than PB ,
0
example# 12042
call the function ugettext with an argument string _STR:0_ , substitute ' % s ' with the result of the call to the function ,
1
"%s TB" ||| _STR:0_
example# 12043
filesize_number_format with result of division of bytes by TB as an argument , substitute the result for value . if not ,
0
example# 12044
call the function ugettext with an argument string _STR:0_ , substitute ' % s ' with the result of the call to the function ,
1
"%s PB" ||| _STR:0_
example# 12045
filesize_number_format with result of division of bytes by PB as an argument , substitute the result for value . call the function avoid_wrapping with an argument value , return the result .
0
example# 12046
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean False .
0
example# 12047
define the function pluralize with 2 arguments value and arg set to character _STR:0_ .
1
's' ||| _STR:0_
example# 12048
if _STR:0_ is not contained in arg ,
1
',' ||| _STR:0_
example# 12049
append arg to _STR:0_ , substitute the result for arg .
1
',' ||| _STR:0_
example# 12050
split arg by _STR:0_ , substitute the result for bits.s [ bits . s ]
1
',' ||| _STR:0_
example# 12051
if length of bits is greater than integer 2 ,
0
example# 12052
return an empty string .
0
example# 12053
substitute first 2 elements of bits for singular_suffix and plural_suffix , respectively .
0
example# 12054
try ,
0
example# 12055
convert value to an floating point number if it is not equal to integer 1 ,
0
example# 12056
return plural_suffix .
0
example# 12057
if ValueError exception is caught ,
0
example# 12058
do nothing ,
0
example# 12059
if TypeError exception is caught ,
0
example# 12060
try ,
0
example# 12061
if length of value is not equal to integer 1 ,
0
example# 12062
return plural_suffix .
0
example# 12063
if TypeError exception is caught ,
0
example# 12064
do nothing ,
0
example# 12065
return singular_suffix .
0
example# 12066
decorator function register.filter [ register . filter ] with 2 arguments string _STR:0_ and is_safe set to boolean True .
1
"phone2numeric" ||| _STR:0_
example# 12067
define the function phone2numeric_filter with an argument value .
0
example# 12068
call the function phone2numeric with an argument value , return the result .
0
example# 12069
decorator function register.filter [ register . filter ] with an argument is_safe set to boolean True .
0
example# 12070
define the function pprint with an argument value .
0
example# 12071
try ,
0
example# 12072
call the function pformat with an argument value , return the result .
0
example# 12073
if Exception , renamed to e , exception is caught ,
0
example# 12074
return an string _STR:0_ , replace ' % s ' with result of the function force_text ,
1
"Error in formatting: %s" ||| _STR:0_
example# 12075
from __future__ import unicode_literals into default name space .
0
example# 12076
import module os .
0
example# 12077
import module sys .
0
example# 12078
import module re .
0
example# 12079
from datetime import datetime into default name space .
0
example# 12080
from itertools import groupby and cycle as itertools_cycle into default name space .
0
example# 12081
import module warnings .
0
example# 12082
from django.conf [ django . conf ] import settings into default name space .
0
example# 12083
from django.template.base [ django . template . base ] import Node , NodeList , Template , Context , Library , TemplateSyntaxError , VariableDoesNotExist ,
0
example# 12084
validTemplateLibrary , BLOCK_TAG_START , BLOCK_TAG_END , VARIABLE_TAG_START , VARIABLE_TAG_END , SINGLE_BRACE_START , SINGLE_BRACE_END , COMMENT_TAG_START , COMMENT_TAG_END , VARIABLE_ATTRIBUTE_SEPARATOR , get_library , token_kwargs , kwarg_re and render_value_in_context . from django.template.smartif [ django . template . smartif ] import IfParser and Literal into default name space .
0
example# 12085
from django.template.defaultfilters [ django . template . defaultfilters ] import date into default name space .
0
example# 12086
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango20Warning into default name space .
0
example# 12087
from django.utils.encoding [ django . utils . encoding ] import force_text and smart_text into default name space .
0
example# 12088
from django.utils.safestring [ django . utils . safestring ] import mark_safe into default name space .
0
example# 12089
from django.utils.html [ django . utils . html ] import format_html into default name space .
0
example# 12090
from django.utils [ django . utils ] import six into default name space .
0
example# 12091
from django.utils [ django . utils ] import timezone into default name space .
0
example# 12092
register is an instance of Library class .
0
example# 12093
derive the class AutoEscapeControlNode from Node base class .
0
example# 12094
define the method __init__ with 3 arguments : self , setting and nodelist .
0
example# 12095
substitute setting and nodelist for self.setting [ self . setting ] and self.nodelist [ self . nodelist ] , respectively .
0
example# 12096
define the method render with 2 arguments : self and context .
0
example# 12097
substitute context.autoescape [ context . autoescape ] for old_setting .
0
example# 12098
substitute self.setting [ self . setting ] for context.autoescape [ context . autoescape ] .
0
example# 12099
call the method self.nodelist.render [ self . nodelist . render ] with an argument context , substitute the result for output .
0
example# 12100
substitute old_setting for context.autoescape [ context . autoescape ] .
0
example# 12101
if self.setting [ self . setting ] is true ,
0
example# 12102
call the function mark_safe with an argument output .
0
example# 12103
if not ,
0
example# 12104
return output .
0
example# 12105
derive the class CommentNode from Node base class .
0
example# 12106
define the method render with 2 arguments : self and context .
0
example# 12107
return an empty string ,
0
example# 12108
derive the class CsrfTokenNode from Node base class .
0
example# 12109
define the method render with 2 arguments : self and context .
0
example# 12110
get the value under the _STR:0_ key of the context dictionary , if it exists substitute the result for csrf_token ,
1
'csrf_token' ||| _STR:0_
example# 12111
if not csrf_token is None . if csrf_token is true ,
0
example# 12112
if csrf_token equals string _STR:0_ ,
1
'NOTPROVIDED' ||| _STR:0_
example# 12113
call the function format_html with an argument empty string , return the result .
0
example# 12114
if not ,
0
example# 12115
call the function format_html with 2 arguments : string _STR:0_ ,
1
"<input type='hidden' name='csrfmiddlewaretoken' value='{0}' />" ||| _STR:0_
example# 12116
and csrf_token , return the result . if not ,
0
example# 12117
if settings.DEBUG [ settings . DEBUG ] is true ,
0
example# 12118
call the function warnings.warn [ warnings . warn ] with an argument string _STR:0_ .
1
"A {% csrf_token %} was used in a template, but the context did not provide the value.  This is usually caused by not using RequestContext." ||| _STR:0_
example# 12119
return an empty string ,
0
example# 12120
derive the class CycleNode from Node base class .
0
example# 12121
define the method __init__ with 4 arguments : self , cyclevars , variable_name set to None and silent set to boolean False .
0
example# 12122
substitute cyclevars for self.cyclevars [ self . cyclevars ] .
0
example# 12123
substitute variable_name for self.variable_name [ self . variable_name ] .
0
example# 12124
substitute silent for self.silent [ self . silent ] .
0
example# 12125
define the method render with 2 arguments : self and context .
0
example# 12126
if self is not contained in context.render_context [ context . render_context ] ,
0
example# 12127
call the function itertools_cycle with an argument self.cyclevars [ self . cyclevars ] , substitute the result for value under the self dictionary context.render_context [ context . render_context ] .
0
example# 12128
get the value under the self key of the context.render_context [ context . render_context ] dictionary , substitute it for cycle_iter .
0
example# 12129
call the function next with an argument cycle_iter , call the method resolve on the result with an argument context , substitute the result for value .
0
example# 12130
if self.variable_name [ self . variable_name ] is true .
0
example# 12131
substitute value for value under the self.variable_name [ self . variable_name ] key of the context dictionary .
0
example# 12132
if self.silent [ self . silent ] is true ,
0
example# 12133
return an empty string ,
0
example# 12134
call the function render_value_in_context with 2 arguments : value and context , return the result .
0
example# 12135
derive the class DebugNode from Node base class .
0
example# 12136
define the method render with 2 arguments : self and context .
0
example# 12137
from pprint import pformat .
0
example# 12138
output is an list with initial elements generated with call to the function pformat with an argument val , for every val in context .
0
example# 12139
append 2 consecutive newlines to output .
0
example# 12140
call the function pformat with an argument sys.modules [ sys . modules ] , append the result for output .
0
example# 12141
join elements of output into a string , return the result .
0
example# 12142
derive the class FilterNode from Node base class .
0
example# 12143
define the method __init__ with 3 arguments : self , filter_expr and nodelist ) .
0
example# 12144
substitute filter_expr and nodelist for self.filter_expr [ self . filter_expr ] and self.nodelist [ self . nodelist ] , respectively .
0
example# 12145
define the method render with 2 arguments : self and context .
0
example# 12146
call the method self.nodelist.render [ self . nodelist . render ] with an argument context , substitute the result output .
0
example# 12147
call the method context.push [ context . push ] with an argument var set to output , with the result perform ,
0
example# 12148
call the function self.filter_expr.resolve [ self . filter_expr . resolve ] with an argument context , return the result .
0
example# 12149
derive the class FirstOfNode from Node base class .
0
example# 12150
define the method __init__ with 2 arguments : self and variables .
0
example# 12151
substitute variables for self.vars [ self . vars ] .
0
example# 12152
define the method render with 2 arguments : self and context .
0
example# 12153
for every var in self.vars [ self . vars ] ,
0
example# 12154
call the method var.resolve [ var . resolve ] with 2 arguments : context and True , substitute the result for value .
0
example# 12155
if value is true ,
0
example# 12156
call the function render_value_in_context with 2 arguments : value and context , return the result .
0
example# 12157
return an empty string ,
0
example# 12158
derive the class ForNode from Node base class .
0
example# 12159
child_nodelists is an tuple with 2 elements : strings _STR:0_ and _STR:1_ .
2
'nodelist_loop' ||| _STR:0_
'nodelist_empty' ||| _STR:1_
example# 12160
define the method __init__ with 6 arguments : self , loopvars , sequence , is_reversed , nodelist_loop and nodelist_empty set to None .
0
example# 12161
substitute loopvars and sequence for self.loopvars [ self . loopvars ] and self.sequence [ self . sequence ] , respectively .
0
example# 12162
substitute is_reversed for self.is_reversed [ self . is_reversed ] .
0
example# 12163
substitute nodelist_loop for self.nodelist_loop [ self . nodelist_loop ] .
0
example# 12164
if nodelist_empty is None ,
0
example# 12165
self.nodelist_empty [ self . nodelist_empty ] is an instance of NodeList class .
0
example# 12166
if not ,
0
example# 12167
substitute nodelist_empty for self.nodelist_empty [ self . nodelist_empty ] .
0
example# 12168
define the method __repr__ with an argument self .
0
example# 12169
if self.is_reversed [ self . is_reversed ] is true , substitute reversed_text is an string _STR:0_ , if not , reversed_text is an empty string .
1
' reversed' ||| _STR:0_
example# 12170
return an string _STR:0_ , substitute ' % s ' with elements of self.loopvars [ self . loopvars ] joined into a string ,
1
"<For Node: for %s in %s, tail_len: %d%s>" ||| _STR:0_
example# 12171
separated with string _STR:0_ , substitute ' % s ' with self.sequence [ self . sequence ] , substitute _STR:1_ with length of self.nodelist_loop [ self . nodelist_loop ] , substitute ' % s ' with reversed_text . define the method __iter__ with an argument self .
2
', ' ||| _STR:0_
'%d' ||| _STR:1_
example# 12172
for every node in self.nodelist_loop [ self . nodelist_loop ] ,
0
example# 12173
yield node .
0
example# 12174
for every node in self.nodelist_empty [ self . nodelist_empty ] ,
0
example# 12175
yield node .
0
example# 12176
define the method render with 2 arguments : self and context .
0
example# 12177
if string _STR:0_ is contained in context ,
1
'forloop' ||| _STR:0_
example# 12178
substitute value under the the _STR:0_ key of the context dictionary for parentloop .
1
'forloop' ||| _STR:0_
example# 12179
if not ,
0
example# 12180
parentloop is an empty dictionary .
0
example# 12181
call the method context.push [ context . push ] , with the result perform ,
0
example# 12182
try ,
0
example# 12183
call the method self.sequence.resolve [ self . sequence . resolve ] with 2 arguments : context and boolean True , substitute the result for values .
0
example# 12184
if VariableDoesNotExist exception is caught ,
0
example# 12185
values is an empty list .
0
example# 12186
if values is None ,
0
example# 12187
if values is None ,
0
example# 12188
if values has an attribute _STR:0_ ,
1
'__len__' ||| _STR:0_
example# 12189
convert values into a list , substitute it for value .
0
example# 12190
substitute length of values for len_values .
0
example# 12191
if len_values is smaller than integer 1 ,
0
example# 12192
call the method self.nodelist_empty.render [ self . nodelist_empty . render ] with an argument context , return the result .
0
example# 12193
nodelist is an empty list .
0
example# 12194
if self.is_reversed [ self . is_reversed ] is true ,
0
example# 12195
reverse elements order of values .
0
example# 12196
substitute length of self.loopvars [ self . loopvars ] for num_loopvars .
0
example# 12197
if num_loopvars is greater than integer 1 , unpack is an boolean True , otherwise is an boolean False .
0
example# 12198
loop_dict and value under the _STR:0_ key of the context dictionary are dictionaries with an entry : parentloop for _STR:1_ .
2
'forloop' ||| _STR:0_
'parentloop' ||| _STR:1_
example# 12199
for every i and item in enumerated iterable values ,
0
example# 12200
substitute i for value under the _STR:0_ key of the loop_dict dictionary .
1
'counter0' ||| _STR:0_
example# 12201
substitute i incremented by 1 for value under the _STR:0_ key of the loop_dict dictionary .
1
'counter' ||| _STR:0_
example# 12202
subtract i from len_values , substitute the result for value under the _STR:0_ key of the loop_dict dictionary .
1
'revcounter' ||| _STR:0_
example# 12203
subtract i from len_values , decrement the result by integer 1 , substitute it for value under the _STR:0_ key of the loop_dict dictionary .
1
'revcounter' ||| _STR:0_
example# 12204
if i is equal to integer 0 , value under the _STR:0_ key of the loop_dict dictionary is boolean True , otherwise it is False .
1
'first' ||| _STR:0_
example# 12205
if i is equal to len_values decremented by 1 , value under the _STR:0_ key of the loop_dict dictionary is boolean True , otherwise it is False .
1
'last' ||| _STR:0_
example# 12206
pop_context is boolean False .
0
example# 12207
if unpack is true ,
0
example# 12208
if item is not an instance of list or tuple class ,
0
example# 12209
len_item is integer 1 .
0
example# 12210
if not ,
0
example# 12211
substitute length of item for len_item .
0
example# 12212
if num_loopvars is not equal to len_item ,
0
example# 12213
call the function warnings.warn [ warnings . warn ] with 2 arguments : string `` Need { 0 } values to unpack in for loop ; got { 1 } . This will raise an
0
example# 12214
exception in Django 2.0 [ 2 . 0 ] . '' formated with num_loopvars and len_item , respectively , and RemovedInDjango20Warning . try ,
0
example# 12215
zip self.loopvars [ self . loopvars ] and item is a list to tuples , convert the result to an dictionary , substitute it for unpacked_vars .
0
example# 12216
if TypeError exception is caught ,
0
example# 12217
do nothing .
0
example# 12218
if not ,
0
example# 12219
pop_context is boolean True .
0
example# 12220
call the method context.update [ context . update ] with an argument unpacked_vars .
0
example# 12221
if not ,
0
example# 12222
substitute item for value under the first element of self.loopvars [ self . loopvars ] key of the context dictionary .
0
example# 12223
if settings.TEMPLATE_DEBUG [ settings . TEMPLATE_DEBUG ] is true ,
0
example# 12224
for every node in self.nodelist_loop [ self . nodelist_loop ] ,
0
example# 12225
try ,
0
example# 12226
call the method node.render [ node . render ] with an argument context , append the result to the nodelist .
0
example# 12227
if Exception , renamed to e , exception is caught ,
0
example# 12228
if e doesnt have an _STR:0_ attribute ,
1
'django_template_source' ||| _STR:0_
example# 12229
substitute node.source [ node . source ] for e.django_template_source [ e . django_template_source ] .
0
example# 12230
raise an exception .
0
example# 12231
if not ,
0
example# 12232
for every node in self.nodelist_loop [ self . nodelist_loop ] ,
0
example# 12233
call the method node.render [ node . render ] with an argument context , append the result to the nodelist .
0
example# 12234
if pop_context is true ,
0
example# 12235
remove the first element of context .
0
example# 12236
call the function mark_safe with an arguments : for every n in nodelist results of the function force_text called with an argument n , joined in a string , return the result .
0
example# 12237
derive the class IfChangedNode from Node base class .
0
example# 12238
child_nodelists is a tuple with 2 initial elements : strings _STR:0_ and _STR:1_ .
2
'nodelist_false' ||| _STR:1_
'nodelist_true' ||| _STR:0_
example# 12239
define the method __init__ with 4 arguments : self , nodelist_true , nodelist_false and unpacked list varlist .
0
example# 12240
substitute nodelist_true and nodelist_false for self.nodelist_true [ self . nodelist_true ] and self.nodelist_false [ self . nodelist_false ] , respectively .
0
example# 12241
substitute varlist for self.varlist [ self . varlist ] .
0
example# 12242
define the method render with 2 arguments : self and context .
0
example# 12243
call the method self._get_context_stack_frame [ self . _get_context_stack_frame ] with an argument context , substitute the result for state_frame .
0
example# 12244
if self is not contained in state_frame ,
0
example# 12245
value under the self key of state_frame dictionary is None .
0
example# 12246
nodelist_true_output is None .
0
example# 12247
try ,
0
example# 12248
if self._varlist [ self . _varlist ] is true ,
0
example# 12249
compare_to is an list with elements generated by calling the var.resolve [ var . resolve ] method with 2 arguments : context and boolean True ,
0
example# 12250
for every var in self._varlist [ self . _varlist ] . if not ,
0
example# 12251
call the method self.nodelist_true.render [ self . nodelist_true . render ] with an argument context , assign the result to compare_to and nodelist_true_output .
0
example# 12252
if VariableDoesNotExist exception is caught ,
0
example# 12253
compare_to is None .
0
example# 12254
if compare_to is not equal to value under the self key of state_frame .
0
example# 12255
substitute compare_to for value under the state_frame dictionary under the self key .
0
example# 12256
return nodelist_true_output , if true , if not call the method self.nodelist_true.render [ self . nodelist_true . render ] with an argument context and return the result .
0
example# 12257
otherwise if self.nodelist_false [ self . nodelist_false ] is true ,
0
example# 12258
call the method self.nodelist_false.render [ self . nodelist_false . render ] with an argument context , return the result .
0
example# 12259
return an empty string ,
0
example# 12260
define the method _get_context_stack_frame with 2 arguments : self and context .
0
example# 12261
if string _STR:0_ is contained in context ,
1
'forloop' ||| _STR:0_
example# 12262
return value under the _STR:0_ key of the context dictionary .
1
'forloop' ||| _STR:0_
example# 12263
if not ,
0
example# 12264
return context.render_context [ context . render_context ] .
0
example# 12265
derive the class IfEqualNode from Node base class .
0
example# 12266
child_nodelists is a tuple with 2 elements strings _STR:0_ and _STR:1_ .
2
'nodelist_false' ||| _STR:1_
'nodelist_true' ||| _STR:0_
example# 12267
define the method __init__ with 6 arguments : ( self , var1 , var2 , nodelist_true , nodelist_false and negate .
0
example# 12268
substitute var1 and var2 for self.var1 [ self . var1 ] and self.var2 [ self . var2 ] , respectively .
0
example# 12269
substitute nodelist_true and nodelist_false for self.nodelist_true [ self . nodelist_true ] and self.nodelist_false [ self . nodelist_false ] , respectively .
0
example# 12270
substitute negate for self.negate [ self . negate ] .
0
example# 12271
define the method __repr__ with an argument self .
0
example# 12272
return an string _STR:0_ .
1
"<IfEqualNode>" ||| _STR:0_
example# 12273
define the method render with 2 arguments : self and context .
0
example# 12274
call the method self.var1.resolve [ self . var1 . resolve ] with 2 arguments : context and boolean True , substitute the result for val2 .
0
example# 12275
call the method self.var2.resolve [ self . var2 . resolve ] with 2 arguments : context and boolean True , substitute the result for val2 .
0
example# 12276
if self.negate [ self . negate ] is true and val1 is not equal to val2 , or if , self.negate [ self . negate ] is false and val1 equals val2 ,
0
example# 12277
call the method self.nodelist_true.render [ self . nodelist_true . render ] with an argument context , return the result .
0
example# 12278
call the method self.nodelist_false.render [ self . nodelist_false . render ] with an arguments context , return the result .
0
example# 12279
derive the class IfNode from Node base class .
0
example# 12280
define the method __init__ with 2 arguments : self and conditions_nodelists .
0
example# 12281
substitute conditions_nodelists for self.conditions_nodelists [ self . conditions_nodelists ] .
0
example# 12282
define the method __repr__ with an argument self .
0
example# 12283
return an string _STR:0_ .
1
"<IfNode>" ||| _STR:0_
example# 12284
define the method __iter__ with an argument self .
0
example# 12285
for every _ and nodelist in self.conditions_nodelists [ self . conditions_nodelists ] ,
0
example# 12286
for every node in nodelist ,
0
example# 12287
yield node as an return value of a generator .
0
example# 12288
property decorator ,
0
example# 12289
define the method nodelist with an argument self .
0
example# 12290
return an instance of a NodeList class , created with arguments node , for every node in nodelist ,
0
example# 12291
and for every _ , nodelist in self.conditions_nodelists [ self . conditions_nodelists ] . define the method render with 2 arguments : self and context .
0
example# 12292
for every condition and nodelist in self.conditions_nodelists [ self . conditions_nodelists ] ,
0
example# 12293
if condition is not None ,
0
example# 12294
try ,
0
example# 12295
call the method condition.eval [ condition . eval ] with an argument context , substitute the result for match .
0
example# 12296
if VariableDoesNotExist exception is caught ,
0
example# 12297
match is None .
0
example# 12298
if not ,
0
example# 12299
match is boolean True .
0
example# 12300
if match is true ,
0
example# 12301
call the method nodelist.render [ nodelist . render ] with an argument context , return the result .
0
example# 12302
return an empty string ,
0
example# 12303
derive the class RegroupNode from Node base class .
0
example# 12304
define the method __init__ with 4 arguments : self , target , expression and var_name .
0
example# 12305
substitute target and expression for self.target [ self . target ] and self.expression [ self . expression ] , respectively .
0
example# 12306
substitute var_name for self.var_name [ self . var_name ] .
0
example# 12307
define the method resolve_expression with 3 arguments : self , obj and context .
0
example# 12308
substitute obj for value under the self.var_name [ self . var_name ] key of the context dictionary .
0
example# 12309
call the method self.expression.resolve [ self . expression . resolve ] with 2 arguments : context and boolean True , return the result .
0
example# 12310
define the method render with 2 arguments : self and context .
0
example# 12311
call the method self.target.resolve [ self . target . resolve ] with 2 arguments : context and boolean True , substitute it for obj_list .
0
example# 12312
if obj_list is None ,
0
example# 12313
value under the self.var_name [ self . var_name ] key of the context dictionary is an empty list .
0
example# 12314
return an empty string ,
0
example# 12315
value under the self.var_name [ self . var_name ] key of the context dictionary is an list with dictionary elements with 2 entries :
0
example# 12316
key for _STR:0_ and val converted into a list for _STR:1_ , for every key and val in result of the function groupby , called with 2 arguments : obj_list and lambda function with an argument obj and return value as a result of the function , self.resolve_expression [ self . resolve_expression ] called with 2 arguments obj and context . return an empty string ,
2
'list' ||| _STR:1_
'grouper' ||| _STR:0_
example# 12317
define the function include_is_allowed with an argument filepath .
0
example# 12318
return the absolute path of file path filepath , substitute it for filepath .
0
example# 12319
for every root in settings.ALLOWED_INCLUDE_ROOTS [ settings . ALLOWED_INCLUDE_ROOTS ] ,
0
example# 12320
if filepath starts with root ,
0
example# 12321
return boolean True .
0
example# 12322
return boolean False .
0
example# 12323
derive the class SsiNode from Node base class .
0
example# 12324
define the method __init__ with 3 arguments : self , filepath and parsed .
0
example# 12325
substitute filepath for self.filepath [ self . filepath ] .
0
example# 12326
substitute parsed for self.parsed [ self . parsed ] .
0
example# 12327
define the method render with 2 arguments : self and context .
0
example# 12328
call the function self.filepath.resolve [ self . filepath . resolve ] with an argument context , substitute the result for filepath .
0
example# 12329
call the function include_is_allowed with an argument filepath , if it evaluates to false ,
0
example# 12330
if settings.DEBUG [ settings . DEBUG ] is true ,
0
example# 12331
return string _STR:0_ .
1
"[Didn't have permission to include file]" ||| _STR:0_
example# 12332
if not ,
0
example# 12333
return an empty string ,
0
example# 12334
try ,
0
example# 12335
open filepath file in read mode , with file descriptor as fp , perform ,
0
example# 12336
read file fp , substitute the read data for output .
0
example# 12337
if IOError exception is caught ,
0
example# 12338
output is an empty string .
0
example# 12339
if self.parsed [ self . parsed ] is true ,
0
example# 12340
try ,
0
example# 12341
t is an instance of Template class , created with 2 arguments output and name set to filepath .
0
example# 12342
call the function t.render [ t . render ] with an argument context , return the result .
0
example# 12343
if TemplateSyntaxError , renamed to e , exception is caught ,
0
example# 12344
if settings.DEBUG [ settings . DEBUG ] is true ,
0
example# 12345
return an string _STR:0_ , where ' % s ' is replaced with e .
1
"[Included template had syntax error: %s]" ||| _STR:0_
example# 12346
if not ,
0
example# 12347
return an empty string ,
0
example# 12348
return output .
0
example# 12349
derive the class LoadNode from Node base class .
0
example# 12350
define the method render with 2 arguments : self and context .
0
example# 12351
return an empty string ,
0
example# 12352
derive the class NowNode from Node base class .
0
example# 12353
define the method __init__ with 2 arguments : self and format_string .
0
example# 12354
substitute format_string for self.format_string [ self . format_string ] .
0
example# 12355
define the method render with 2 arguments : self and context .
0
example# 12356
if settings.USE_TZ [ settings . USE_TZ ] is true substitute result of the function timezone.get_current_timezone [ timezone . get_current_timezone ] for tzinfo , if not tzinfo is None .
0
example# 12357
call the function date with 2 arguments : result of the call to the function datetime.now [ datetime . now ] with an argument tz set to tzinfo ,
0
example# 12358
and self.format_string [ self . format_string ] , return the result . derive the class SpacelessNode from Node base class .
0
example# 12359
define the method __init__ with 2 arguments : self and nodelist .
0
example# 12360
substitute nodelist for self.nodelist [ self . nodelist ] .
0
example# 12361
define the method render with 2 arguments : self and context .
0
example# 12362
from django.utils.html [ django . utils . html ] import strip_spaces_between_tags .
0
example# 12363
call the method self.nodelist.render [ self . nodelist . render ] with an argument context , strip the result of the surrounding whitespaces ,
0
example# 12364
use the result as an argument for the call to the function strip_spaces_between_tags , return the result . derive the class TemplateTagNode from Node base class .
0
example# 12365
mapping is an dictionary with 8 initial entries : BLOCK_TAG_START for _STR:0_ , BLOCK_TAG_END for _STR:1_ ,
2
'openblock' ||| _STR:0_
'closeblock' ||| _STR:1_
example# 12366
VARIABLE_TAG_START for _STR:0_ , VARIABLE_TAG_END for _STR:1_ , SINGLE_BRACE_START for _STR:2_ , SINGLE_BRACE_END _STR:3_ , COMMENT_TAG_START _STR:4_ and COMMENT_TAG_END for _STR:5_ . define the method __init__ with 2 arguments : self and tagtype .
6
'opencomment' ||| _STR:4_
'closevariable' ||| _STR:1_
'openbrace' ||| _STR:2_
'closebrace' ||| _STR:3_
'openvariable' ||| _STR:0_
'closecomment' ||| _STR:5_
example# 12367
substitute tagtype for self.tagtype [ self . tagtype ] .
0
example# 12368
define the method render with 2 arguments : self and context .
0
example# 12369
call the method self.mapping.get [ self . mapping . get ] with 2 arguments : self.tagtype [ self . tagtype ] and an empty list , return the result .
0
example# 12370
derive the class URLNode from Node base class .
0
example# 12371
define the method __init__ with 5 arguments : self , view_name , args , kwargs and asvar .
0
example# 12372
substitute view_name for self.view_name [ self . view_name ] .
0
example# 12373
substitute args for self.args [ self . args ] .
0
example# 12374
substitute kwargs for self.kwargs [ self . kwargs ] .
0
example# 12375
substitute asvar for self.asvar [ self . asvar ] .
0
example# 12376
define the method render with 2 arguments : self and context .
0
example# 12377
from django.core.urlresolvers [ django . core . urlresolvers ] import reverse , NoReverseMatch .
0
example# 12378
for every arg in self.args [ self . args ] call the method arg.resolve [ arg . resolve ] with an argument context , substitute the results in a list for args .
0
example# 12379
kwargs is an dictionary , populated for every k and v in result of the method self.kwargs.items [ self . kwargs . items ] with :
0
example# 12380
result of the call to the method v.resolve [ v . resolve ] with an argument context , for result of the function smart_text called with 2 arguments k and string _STR:0_ . call the method self.view_name.resolve [ self . view_name . resolve ] with an argument context , substitute the result for view_name .
1
'ascii' ||| _STR:0_
example# 12381
url is an empty string .
0
example# 12382
try ,
0
example# 12383
call the function reverse with 4 arguments : view_name , args as args , kwargs as kwargs and current_app as context.current_app [ context . current_app ] ,
0
example# 12384
substitute the result for url . if NoReverseMatch exception is caught ,
0
example# 12385
call the function sys.exc_info [ sys . exc_info ] with an argument exc_info .
0
example# 12386
if settings.SETTINGS_MODULE [ settings . SETTINGS_MODULE ] is true ,
0
example# 12387
split settings.SETTINGS_MODULE [ settings . SETTINGS_MODULE ] by _STR:0_ character , substitute the first element of the result for project_name .
1
'.' ||| _STR:0_
example# 12388
try ,
0
example# 12389
call the function reverse with 4 arguments : concatenated project_name , character _STR:0_ and view_name , args as args , kwargs as kwargs ,
1
'.' ||| _STR:0_
example# 12390
current_app as context.current_app [ context . current_app ] , substitute the result for url . if NoReverseMatch exception is caught ,
0
example# 12391
if self.asvar [ self . asvar ] is None ,
0
example# 12392
call the function six.reraise [ six . reraise ] with unpacked list exc_info as an argument .
0
example# 12393
if not ,
0
example# 12394
if self.asvar [ self . asvar ] is None ,
0
example# 12395
raise an exception .
0
example# 12396
if self.asvar [ self . asvar ] is true ,
0
example# 12397
substitute url for value under the self.asvar [ self . asvar ] key of context dictionary .
0
example# 12398
return an empty string .
0
example# 12399
if not ,
0
example# 12400
return url .
0
example# 12401
derive the class VerbatimNode from Node base class .
0
example# 12402
define the method __init__ with 2 arguments : self and content .
0
example# 12403
substitute content for self.content [ self . content ] .
0
example# 12404
define the method render with 2 arguments : self and context .
0
example# 12405
return self.content [ self . content ]
0
example# 12406
derive the class WidthRatioNode from Node base class .
0
example# 12407
define the method __init__ with 5 arguments : self , val_expr , max_expr , max_width and asvar set to None .
0
example# 12408
substitute val_expr for self.val_expr [ self . val_expr ] .
0
example# 12409
substitute max_expr for self.max_expr [ self . max_expr ] .
0
example# 12410
substitute max_width for self.max_width [ self . max_width ] .
0
example# 12411
substitute asvar for self.asvar [ self . asvar ] .
0
example# 12412
define the method render with 2 arguments : self and context .
0
example# 12413
try ,
0
example# 12414
call the method self.val_expr.resolve [ self . val_expr . resolve ] with an argument context , substitute the result for value .
0
example# 12415
call the method self.max_expr.resolve [ self . max_expr . resolve ] with an argument context , substitute the result for max_value .
0
example# 12416
call the method self.max_width.resolve [ self . max_width . resolve ] with an argument context , convert the result to an integer and substitute it for max_width .
0
example# 12417
if VariableDoesNotExist exception is caught ,
0
example# 12418
return an empty string .
0
example# 12419
if ValueError or TypeError exceptions are caught ,
0
example# 12420
raise an TemplateSyntaxError exception with an argument string _STR:0_ .
1
"widthratio final argument must be a number" ||| _STR:0_
example# 12421
try ,
0
example# 12422
convert value into an floating point number , substitute it for value .
0
example# 12423
convert max_value into an floating point number , substitute it for max_value .
0
example# 12424
divide value by max_value , multiply the result with max_width , substitute it for ratio .
0
example# 12425
round up radio , convert it to an integer and the convert it to a string and substitute the result for result .
0
example# 12426
if ZeroDivisionError exception is caught ,
0
example# 12427
return an string _STR:0_ .
1
'0' ||| _STR:0_
example# 12428
if ValueError , TypeError or OverflowError exceptions are caught ,
0
example# 12429
return an empty string ,
0
example# 12430
if self.asvar [ self . asvar ] is true ,
0
example# 12431
substitute result for value under the self.asvar [ self . asvar ] key of context dictionary .
0
example# 12432
return an empty string ,
0
example# 12433
if not ,
0
example# 12434
return result .
0
example# 12435
derive the class WithNode from Node base class .
0
example# 12436
define the method __init__ with 5 arguments : self , var , name , nodelist and extra_context set to None .
0
example# 12437
substitute nodelist for self.nodelist [ self . nodelist ] .
0
example# 12438
if extra_context is true , substitute it for self.extra_context [ self . extra_context ] , if not self.extra_context [ self . extra_context ] is an empty dictionary .
0
example# 12439
if name is true ,
0
example# 12440
substitute var for value under the name key of the self.extra_context [ self . extra_context ] dictionary .
0
example# 12441
define the method __repr__ with an argument self .
0
example# 12442
return a string _STR:0_
1
"<WithNode>" ||| _STR:0_
example# 12443
define the method render with 2 arguments : self and context .
0
example# 12444
values is an dictionary created with result of the method val.resolve [ val . resolve ] called with an argument context , for key ,
0
example# 12445
for every key and val in return value of the function six.iteritems [ six . iteritems ] called with an arguments self.extra_context [ self . extra_context ] . call the method context.push [ context . push ] with an argument unpacked dictionary values , with the result as an argument ,
0
example# 12446
call the method self.nodelist.render [ self . nodelist . render ] with an argument context , return the result .
0
example# 12447
register.tag [ register . tag ] decorator ,
0
example# 12448
define the function autoescape with 2 arguments : parser and token .
0
example# 12449
call the method token.contents.split [ token . contents . split ] , substitute the result for args .
0
example# 12450
if length of args is not equal to integer 2 ,
0
example# 12451
raise an TemplateSyntaxError with an argument string _STR:0_ .
1
"'autoescape' tag requires exactly one argument." ||| _STR:0_
example# 12452
substitute first element of args for arg .
0
example# 12453
if arg is not string _STR:0_ or _STR:1_ ,
2
'off' ||| _STR:1_
'on' ||| _STR:0_
example# 12454
raise an TemplateSyntaxError exception with an argument string _STR:0_ .
1
"'autoescape' argument should be 'on' or 'off'" ||| _STR:0_
example# 12455
call the method parser.parse [ parser . parse ] with an argument tuple with an element string _STR:0_ , substitute the result for nodelist .
1
'endautoescape' ||| _STR:0_
example# 12456
call the method parser.delete_first_token [ parser . delete_first_token ] .
0
example# 12457
return an instance of AutoEscapeControlNode with 2 arguments : boolean exception arg equals to string _STR:0_ , and nodelist .
1
'on' ||| _STR:0_
example# 12458
register.tag [ register . tag ] decorator ,
0
example# 12459
define the function comment with 2 arguments : parser and token .
0
example# 12460
call the method parser.skip_past [ parser . skip_past ] with an argument string _STR:0_ .
1
'endcomment' ||| _STR:0_
example# 12461
return an instance of CommentNode class .
0
example# 12462
register.tag [ register . tag ] decorator ,
0
example# 12463
define the function cycle with 2 arguments : parser and token .
0
example# 12464
call the method token.split_contents [ token . split_contents ] , substitute the result for args .
0
example# 12465
if length of args is smaller than integer 2 ,
0
example# 12466
raise an TemplateSyntaxError exception with an argument string _STR:0_ .
1
"'cycle' tag requires at least two arguments" ||| _STR:0_
example# 12467
if _STR:0_ is contained in second element of args ,
1
',' ||| _STR:0_
example# 12468
split first element of args by _STR:0_ , convert separated elements to strings , substitute the first 2 elements of the result ,
1
',' ||| _STR:0_
example# 12469
for second and third element of args , respectively . if length of args equals integer 2 ,
0
example# 12470
substitute second element of args for name .
0
example# 12471
if parser doesnt have an _STR:0_ attribute ,
1
'_namedCycleNodes' ||| _STR:0_
example# 12472
raise an TemplateSyntaxError exception with an argument string _STR:0_ ,
1
"No named cycles in template. '%s' is not defined" ||| _STR:0_
example# 12473
where ' % s ' is replaced with name . if name is not contained in parser._namedCycleNodes [ parser . _namedCycleNodes ] ,
0
example# 12474
raise an TemplateSyntaxError exception with an argument string _STR:0_ , where ' % s ' is replaced with name .
1
"Named cycle '%s' does not exist" ||| _STR:0_
example# 12475
get the index name , of the parser._namedCycleNodes [ parser . _namedCycleNodes ] , return the result .
0
example# 12476
as_form is boolean False .
0
example# 12477
if length of args is greater than 4 .
0
example# 12478
if third element from the end of the args equals string _STR:0_ ,
1
'as' ||| _STR:0_
example# 12479
if last element of args is not equal to a string _STR:0_ ,
1
"silent" ||| _STR:0_
example# 12480
raise an TemplateSyntaxError exception with an argument string _STR:0_ ,
1
"Only 'silent' flag is allowed after cycle's name, not '%s'." ||| _STR:0_
example# 12481
where ' % s ' is replaced with last element of args . as_form is boolean True
0
example# 12482
silent is boolean True .
0
example# 12483
substitute args , without the last element for args .
0
example# 12484
if second from the end element of args equals a string _STR:0_ ,
1
'as' ||| _STR:0_
example# 12485
as_form is boolean True .
0
example# 12486
silent is boolean False .
0
example# 12487
if as_form is true ,
0
example# 12488
substitute the last element of args for name .
0
example# 12489
call the function parser.compile_filter [ parser . compile_filter ] with an argument arg for every arg in args from the index 1 to the index -2 ,
0
example# 12490
append the results into a list , substitute it for value . node is an instance CycleNode class , created with values , name and silent set to silent .
0
example# 12491
if parser doesnt have an _STR:0_ attribute ,
1
'_namedCycleNodes' ||| _STR:0_
example# 12492
parser._namedCycleNodes [ parser . _namedCycleNodes ] is an empty dictionary .
0
example# 12493
substituet node for value under the name key of the parser._namedCycleNodes [ parser . _namedCycleNodes ] dictionary .
0
example# 12494
if not ,
0
example# 12495
call the function parser.compile_filter [ parser . compile_filter ] with an argument arg for every arg in args from first element to the end ,
0
example# 12496
append the results into a list , substitute it for value . node is an instance of CycleNode class , created wiht an argument values .
0
example# 12497
return node .
0
example# 12498
register.tag [ register . tag ] decorator ,
0
example# 12499
define the function csrf_token with 2 arguments : parser and token .
0
example# 12500
return an instance of CsrfTokenNode class .
0
example# 12501
register.tag [ register . tag ] decorator ,
0
example# 12502
define the function debug with 2 arguments : parser and token .
0
example# 12503
return an instance of DebugNode class .
0
example# 12504
register.tag [ register . tag ] decorator function with an argument _STR:0_ ,
1
'filter' ||| _STR:0_
example# 12505
define the function do_filter with 2 arguments : parser and token .
0
example# 12506
split into two parts token.contents [ token . contents ] by None , substitute the parts for _ and rest , respectively .
0
example# 12507
call the method parser.compile_filter [ parser . compile_filter ] with an argument string _STR:0_ , where ' % s ' is replaced with rest , substitute the result for filter_expr .
1
"var|%s" ||| _STR:0_
example# 12508
for every func and unused in filter_expr.filters [ filter_expr . filters ] ,
0
example# 12509
get _STR:0_ attribute of the func object , if it exists , substitute it for filter_name , if not , filter_name is None .
1
'_filter_name' ||| _STR:0_
example# 12510
if every filter_name in strings _STR:0_ or _STR:1_ ,
2
'escape' ||| _STR:0_
'safe' ||| _STR:1_
example# 12511
raise an TemplateSyntaxError exception with an argument string _STR:0_ ,
1
'"filter %s" is not permitted.  Use the "autoescape" tag instead.' ||| _STR:0_
example# 12512
where ' % s ' is replaced with filter_name . call the method parser.parse [ parser . parse ] with an argument tuple with an element string _STR:0_ , substitute the result for nodelist .
1
'endfilter' ||| _STR:0_
example# 12513
call the method parser.delete_first_token [ parser . delete_first_token ] .
0
example# 12514
return a class instance FilterNode , called with an arguments filter_expr and nodelist .
0
example# 12515
register.tag [ register . tag ] decorator ,
0
example# 12516
define the function firstof with 2 arguments : parser and token .
0
example# 12517
call the method token.split_contents [ token . split_contents ] , substitute the result without the first element for bits .
0
example# 12518
if length of bits is smaller than integer 1 ,
0
example# 12519
raise an TemplateSyntaxError exception with an argument string _STR:0_ .
1
"'firstof' statement requires at least one argument" ||| _STR:0_
example# 12520
return an instance of FirstOfNode class , created with an argument , result of the method parser.compile_filter [ parser . compile_filter ] called with bit ,
0
example# 12521
for every bit in bits . register.tag [ register . tag ] decorator function with an argument _STR:0_ ,
1
'for' ||| _STR:0_
example# 12522
define the function do_for with 2 arguments : parser and token .
0
example# 12523
call the method token.split_contents [ token . split_contents ] , substitute the result .
0
example# 12524
if length bits is smaller than intger 4 ,
0
example# 12525
raise an TemplateSyntaxError exception with an argument string _STR:0_ ,
1
"'for' statements should have at least four words: %s" ||| _STR:0_
example# 12526
where ' % s ' is replaced with token.contents [ token . contents ] . assign the string _STR:0_ to is_reversed and bits last elements .
1
'reversed' ||| _STR:0_
example# 12527
if index is negative inter 3 , if is_reversed , substitute it for in_index , if not , in_index is negative integer 2 .
0
example# 12528
if in_index-th element of bits equals to string _STR:0_ ,
1
'in' ||| _STR:0_
example# 12529
raise an TemplateSyntaxError exception with an argument string _STR:0_ ,
1
"'for' statements should use the format 'for x in y': %s" ||| _STR:0_
example# 12530
where ' % s ' is replaced with token.contents [ token . contents ] . call the method re.split [ re . split ] with 2 arguments : raw string _STR:0_ and elements of bits from 1 index to in_index index ,
1
' *, *' ||| _STR:0_
example# 12531
joined into a string , separated by whitespaces , substitute the result for loopvars . for every var in loopvars ,
0
example# 12532
if var is false or whitespaces are contained in var ,
0
example# 12533
raise an TemplateSyntaxError exception with an argument string _STR:0_ ,
1
"'for' tag received an invalid argument: %s" ||| _STR:0_
example# 12534
where ' % s ' is replaced with token.contents [ token . contents ] . call the method parser.compile_filter [ parser . compile_filter ] with an argument , in_index incremented by one , and used to index parser.compile_filter [ parser . compile_filter ] ,
0
example# 12535
substitute the result for sequence . call the method parser.parse [ parser . parse ] with an argument tuple with 2 elements strings _STR:0_ and _STR:1_ , substitute the result for nodelist_loop .
2
'endfor' ||| _STR:1_
'empty' ||| _STR:0_
example# 12536
call the method parser.next_token [ parser . next_token ] , substitute the result for token .
0
example# 12537
if token.contents [ token . contents ] equals string _STR:0_ ,
1
'empty' ||| _STR:0_
example# 12538
call the method parser.parse [ parser . parse ] with an argument tuple with an element string _STR:0_ , substitute the result for nodelist_empty .
1
'endfor' ||| _STR:0_
example# 12539
call the method parser.delete_first_token [ parser . delete_first_token ] .
0
example# 12540
if not ,
0
example# 12541
nodelist_empty is None .
0
example# 12542
return an instance of ForNode class , created with 5 arguments : loopvars , sequence , is_reversed , nodelist_loop and nodelist_empty .
0
example# 12543
define the function do_ifequal with 2 arguments : parser , token and negate .
0
example# 12544
call the method token.split_contents [ token . split_contents ] , convert the result into a list and substitute it for bits .
0
example# 12545
if length of bits is not equal to integer 3 ,
0
example# 12546
raise an TemplateSyntaxError exception with an argument string _STR:0_ ,
1
"%r takes two arguments" ||| _STR:0_
example# 12547
where _STR:0_ is replaced with first element of bits . append first element of bits to _STR:1_ . substitute the result for end_tag .
2
'end' ||| _STR:1_
'%r' ||| _STR:0_
example# 12548
call the method parser.parse [ parser . parse ] with an argument tuple with an element string _STR:0_ and end_tag , substitute the result for nodelist_true .
1
'else' ||| _STR:0_
example# 12549
call the method parser.next_token [ parser . next_token ] , substitute the result for token .
0
example# 12550
if token.contents [ token . contents ] equals a string _STR:0_ ,
1
'else' ||| _STR:0_
example# 12551
call the method parser.parse [ parser . parse ] with an argument tuple with an element end_tag , substitute the result for nodelist_false .
0
example# 12552
call the method parser.delete_first_token [ parser . delete_first_token ] .
0
example# 12553
if not ,
0
example# 12554
nodelist_false is an instance of NodeList class .
0
example# 12555
call the method parser.compile_filter [ parser . compile_filter ] with an argument , second element of bits , substitute the result for val1 .
0
example# 12556
call the method parser.compile_filter [ parser . compile_filter ] with an argument , third element of bits , substitute the result for val2 .
0
example# 12557
return an instance of IfEqualNode class , created with 5 arguments : val1 , val2 , nodelist_true , nodelist_false and negate .
0
example# 12558
register.tag [ register . tag ] decorator ,
0
example# 12559
define the function ifequal with 2 arguments : parser and token .
0
example# 12560
call the function do_ifequal with 3 arguments : parser , token and boolean False , return the result .
0
example# 12561
register.tag [ register . tag ] decorator ,
0
example# 12562
define the function ifnotequal with 2 arguments : parser and token .
0
example# 12563
call the function do_ifequal with 3 arguments : parser , token and boolean False , return the result .
0
example# 12564
derive the class TemplateLiteral from Literal base class .
0
example# 12565
define the method __init__ with 3 arguments : self , value and text .
0
example# 12566
substitute value for self.value [ self . value ] .
0
example# 12567
substitute text for self.text [ self . text ] .
0
example# 12568
define the method display with an argument self .
0
example# 12569
return self.text [ self . text ] .
0
example# 12570
define the method eval with 2 arguments : self and context .
0
example# 12571
call the method self.value.resolve [ self . value . resolve ] with 2 arguments context and ignore_failures set to boolean True , return the result .
0
example# 12572
derive the class TemplateIfParser from IfParser base class .
0
example# 12573
substitute TemplateSyntaxError for error_class .
0
example# 12574
define the method __init__ with 4 arguments : self , parser , unpacked list args and unpacked dictionary kwargs .
0
example# 12575
substitute parser for self.template_parser [ self . template_parser ] .
0
example# 12576
call the method __init__ from the base class of the class TemplateIfParser , with 2 arguments : unpacked list args and unpacked dictionary .
0
example# 12577
define the method create_var with 2 arguments : self and value .
0
example# 12578
return an instance of TemplateLiteral with 2 arguments : result of the function self.template_parser.compile_filter [ self . template_parser . compile_filter ] ,
0
example# 12579
called with an argument value and value . register.tag [ register . tag ] decorator function with an argument _STR:0_ ,
1
'if' ||| _STR:0_
example# 12580
define the function do_if with 2 arguments : parser and token .
0
example# 12581
call the method token.split_contents [ token . split_contents ] , substitute results without the first element for bits .
0
example# 12582
call the method parse from the instance of TemplateIfParser class , created with 2 arguments parser and bits , substitute the result for condition .
0
example# 12583
call the method parser.parse [ parser . parse ] with an argument tuple with 3 elements : strings _STR:0_ , _STR:1_ and _STR:2_ , substitute the result for nodelist .
3
'else' ||| _STR:1_
'elif' ||| _STR:0_
'endif' ||| _STR:2_
example# 12584
conditions_nodelists is a list containing tuple with 2 elements condition and nodelist .
0
example# 12585
call the method parser.next_token [ parser . next_token ] , substitute the result for token .
0
example# 12586
while token.contents [ token . contents ] starts with a string _STR:0_ ,
1
'elif' ||| _STR:0_
example# 12587
call the method token.split_contents [ token . split_contents ] , substitute results without the first element for bits .
0
example# 12588
call the method parse from the instance of TemplateIfParser class , created with 2 arguments parser and bits , substitute the result for condition .
0
example# 12589
call the method parser.parse [ parser . parse ] with an argument tuple with 3 elements strings _STR:0_ , _STR:1_ and _STR:2_ , substitute the result for nodelist .
3
'else' ||| _STR:1_
'elif' ||| _STR:0_
'endif' ||| _STR:2_
example# 12590
append a tuple with 2 elements : condition and nodelist to conditions_nodelists .
0
example# 12591
call the method parser.next_token [ parser . next_token ] , substitute the result for token .
0
example# 12592
if token.contents [ token . contents ] equals string _STR:0_ ,
1
'else' ||| _STR:0_
example# 12593
call the method parser.parse [ parser . parse ] with an argument tuple with an element string _STR:0_ , substitute the result for nodelist .
1
'endif' ||| _STR:0_
example# 12594
append a tuple with 2 elements : None and nodelist to conditions_nodelists .
0
example# 12595
call the method parser.next_token [ parser . next_token ] , substitute the result for token .
0
example# 12596
if token.contents [ token . contents ] doesn not equals a string _STR:0_ , raise an AssertionError exception ,
1
'endif' ||| _STR:0_
example# 12597
return an instance of IfNode class , created with an argument conditions_nodelists .
0
example# 12598
register.tag [ register . tag ] decorator ,
0
example# 12599
define the function ifchanged with 2 arguments : parser and token .
0
example# 12600
call the method token.split_contents [ token . split_contents ] , substitute the result for bits .
0
example# 12601
call the method parser.parse [ parser . parse ] with an argument tuple with 2 elements strings : _STR:0_ and _STR:1_ , substitute the result for nodelistelse .
2
'endfilter' ||| _STR:1_
'else' ||| _STR:0_
example# 12602
call the method parser.next_token [ parser . next_token ] , substitute the result for token .
0
example# 12603
if token.contents [ token . contents ] equals string _STR:0_ ,
1
'else' ||| _STR:0_
example# 12604
call the method parser.parse [ parser . parse ] with an argument tuple with an element string _STR:0_ , substitute the result for nodelist_false .
1
'endifchanged' ||| _STR:0_
example# 12605
call the method parser.delete_first_token [ parser . delete_first_token ] .
0
example# 12606
if not ,
0
example# 12607
nodelist_false is an instance of NodeList .
0
example# 12608
for every bit in elements of bits without the first element , call the method parser.compile_filter [ parser . compile_filter ] , with an argument bit ,
0
example# 12609
substitute the list of results for values . return an instance of a class IfChangedNode , created with 3 arguments : nodelist_true , nodelist_false and unpacked list values .
0
example# 12610
register.tag [ register . tag ] decorator ,
0
example# 12611
define the function ssi with 2 arguments : parser and token .
0
example# 12612
call the method token.split_contents [ token . split_contents ] , substitute the result for bits .
0
example# 12613
parsed is boolean False .
0
example# 12614
if length of bits is not integer 2 or 3 ,
0
example# 12615
raise an TemplateSyntaxError exception with an argument string _STR:0_ .
1
"'ssi' tag takes one argument: the path to the file to be included" ||| _STR:0_
example# 12616
if length of bits equals integer 3 ,
0
example# 12617
if third element of bits equals a string _STR:0_ ,
1
'parsed' ||| _STR:0_
example# 12618
parsed is boolean True .
0
example# 12619
if not ,
0
example# 12620
raise an TemplateSyntaxError exception with an argument string _STR:0_ ,
1
"Second (optional) argument to %s tag must be 'parsed'" ||| _STR:0_
example# 12621
where ' % s ' is replaced with first element of bits . call the method parser.compile_filter [ parser . compile_filter ] with second element of bits as an argument , substitute the result for filepath .
0
example# 12622
return an instance of a SsiNode class , created with 2 arguments : filepath and parsed .
0
example# 12623
register.tag [ register . tag ] decorator ,
0
example# 12624
define the function load with 2 arguments : parser and token .
0
example# 12625
call the method token.split_contents [ token . split_contents ] , substitute the result for bits .
0
example# 12626
if length of bits is greater or equal to integer 4 and second last element of bits equals sting _STR:0_ ,
1
'from' ||| _STR:0_
example# 12627
try ,
0
example# 12628
substitute last element of bits for taglib .
0
example# 12629
call the function get_library with an argument taglib , substitute the result for lib .
0
example# 12630
if InvalidTemplateLibrary , renamed to e , exception is caught ,
0
example# 12631
raise an TemplateSyntaxError exception with an argument string _STR:0_ ,
1
"'%s' is not a valid tag library: %s" ||| _STR:0_
example# 12632
where ' % s ' is replaced with taglib and e. if not ,
0
example# 12633
temp_lib is an instance of Library class .
0
example# 12634
for every name in bits from the start index 1 to the end index negative 2 ,
0
example# 12635
if name is contained in lib.tags [ lib . tags ] ,
0
example# 12636
substitute value under the name key of the lib.tags [ lib . tags ] dictionary for value under the name key of the temp_lib.tags [ temp_lib . tags ] dictionary .
0
example# 12637
if name is contained in lib.filters [ lib . filters ] .
0
example# 12638
substitute value under the name key of the lib.filters [ lib . filters ] dictionary for value under the name key of the temp_lib.filters [ temp_lib . filters ] dictionary .
0
example# 12639
otherwise if name is contained in lib.filters [ lib . filters ] ,
0
example# 12640
substitute value under the name key of the lib.filters [ lib . filters ] dictionary for value under the name key of the temp_lib.filters [ temp_lib . filters ] dictionary .
0
example# 12641
if not ,
0
example# 12642
raise an TemplateSyntaxError exception with an argument string _STR:0_ ,
1
"'%s' is not a valid tag or filter in tag library '%s'" ||| _STR:0_
example# 12643
where ' % s ' is replaced with name and taglib . call the method parser.add_library [ parser . add_library ] with an argument temp_lib .
0
example# 12644
if not ,
0
example# 12645
for every taglib in bits without the first element ,
0
example# 12646
try ,
0
example# 12647
call the function get_library with an argument taglib , substitute the result for lib .
0
example# 12648
call the method parser.add_library [ parser . add_library ] with an argument lib .
0
example# 12649
if InvalidTemplateLibrary , renamed to e , exception is caught ,
0
example# 12650
raise an TemplateSyntaxError exception with an argument string _STR:0_ ,
1
"'%s' is not a valid tag library: %s" ||| _STR:0_
example# 12651
where ' % s ' is replaced with taglib and e. return an instance of a LoadNode class .
0
example# 12652
register.tag [ register . tag ] decorator ,
0
example# 12653
define the function now with 2 arguments : parser and token .
0
example# 12654
call the method token.split_contents [ token . split_contents ] , substitute the result for bits .
0
example# 12655
if length of bits is not equal to integer 2 ,
0
example# 12656
raise an TemplateSyntaxError exception with an argument string _STR:0_ .
1
"'now' statement takes one argument" ||| _STR:0_
example# 12657
substitute second element of bits without the first and last element for format_string .
0
example# 12658
return an instance of a NowNode class , created with an argument format_string .
0
example# 12659
register.tag [ register . tag ] decorator ,
0
example# 12660
define the function regroup with 2 arguments : parser and token .
0
example# 12661
call the method token.split_contents [ token . split_contents ] , substitute the result for bits .
0
example# 12662
if length of bits is not equal to integer 6 ,
0
example# 12663
raise an TemplateSyntaxError exception with an argument string _STR:0_ .
1
"'regroup' tag takes five arguments" ||| _STR:0_
example# 12664
call the method parser.compile_filter [ parser . compile_filter ] with an argument first element of bits , substitute the result for target .
0
example# 12665
if third element of bits is not equal to a string _STR:0_ ,
1
'by' ||| _STR:0_
example# 12666
raise an TemplateSyntaxError exception with an argument string _STR:0_ .
1
"second argument to 'regroup' tag must be 'by'" ||| _STR:0_
example# 12667
if fift element of bits is not equal to a string _STR:0_ ,
1
'as' ||| _STR:0_
example# 12668
raise an TemplateSyntaxError exception with an argument string _STR:0_ .
1
"next-to-last argument to 'regroup' tag must be 'as'" ||| _STR:0_
example# 12669
substitute sixth element of bits for var_name .
0
example# 12670
concatenate var_name , VARIABLE_ATTRIBUTE_SEPARATOR and fourth element of bits , use the result as an argument for the call the method ,
0
example# 12671
parser.compile_filter [ parser . compile_filter ] , substitute the result for expression . return an instance of a RegroupNode class , created with 3 arguments target , expression and var_name .
0
example# 12672
register.tag [ register . tag ] decorator ,
0
example# 12673
define the function spaceless with 2 arguments : parser and token .
0
example# 12674
call the method parser.parse [ parser . parse ] with an argument tuple with an element string _STR:0_ , substitute the result for nodelist .
1
'endspaceless' ||| _STR:0_
example# 12675
call the method parser.delete_first_token [ parser . delete_first_token ] .
0
example# 12676
return an instance of a SpacelessNode class , created with an argument nodelist .
0
example# 12677
register.tag [ register . tag ] decorator ,
0
example# 12678
define the function templatetag with 2 arguments : parser and token .
0
example# 12679
call the method token.split_contents [ token . split_contents ] , substitute the result for bits .
0
example# 12680
if length of bits is not equal to integer 2 ,
0
example# 12681
raise an TemplateSyntaxError exception with an argument string _STR:0_ .
1
"'templatetag' statement takes one argument" ||| _STR:0_
example# 12682
substitute second element of bits for tag .
0
example# 12683
if tag is not contained in TemplateTagNode.mapping [ TemplateTagNode . mapping ] ,
0
example# 12684
raise an TemplateSyntaxError exception with an argument string _STR:0_ ,
1
"Invalid templatetag argument: '%s'. Must be one of: %s" ||| _STR:0_
example# 12685
where ' % s ' is replaced with tag and TemplateTagNode.mapping [ TemplateTagNode . mapping ] converted into a list . return an instance of a TemplateTagNode class , created with an argument tag .
0
example# 12686
register.tag [ register . tag ] decorator ,
0
example# 12687
define the function url with 2 arguments : parser and token .
0
example# 12688
call the method token.split_contents [ token . split_contents ] , substitute the result for bits .
0
example# 12689
if length of bits is lesser than integer 2 ,
0
example# 12690
raise an TemplateSyntaxError exception with an argument string _STR:0_ ,
1
"'%s' takes at least one argument (path to a view)" ||| _STR:0_
example# 12691
where ' % s ' is replaced with first element of bits . call the method parser.compile_filter [ parser . compile_filter ] with second element of bits as an argument , substitute the result for viewname .
0
example# 12692
args is an empty list .
0
example# 12693
kwargs is an empty dictionary .
0
example# 12694
asvar is None .
0
example# 12695
remove first two elements from bits .
0
example# 12696
if length of bits is greater or equal to intger 2 and second last element of bits is equal to string _STR:0_ ,
1
'as' ||| _STR:0_
example# 12697
substitute last element of bits for asvar .
0
example# 12698
remove last 2 elements from bits .
0
example# 12699
if length of bits is not zero ,
0
example# 12700
for every bit in bits ,
0
example# 12701
call the method kwarg_re.match [ kwarg_re . match ] with an argument bit , substitute it for match .
0
example# 12702
if match is true ,
0
example# 12703
raise an TemplateSyntaxError exception with an argument string _STR:0_ .
1
"Malformed arguments to url tag" ||| _STR:0_
example# 12704
call the method match.groups [ match . groups ] , assign the result to name and value , respectively .
0
example# 12705
if name is true ,
0
example# 12706
call the method parser.compile_filter [ parser . compile_filter ] with an argument value , substitute the result for value under the name key of kwargs dictionary .
0
example# 12707
if not ,
0
example# 12708
call the method parser.compile_filter [ parser . compile_filter ] with an argument value , append the result to args .
0
example# 12709
return an instance of a URLNode class , created with 4 arguments viewname , args , kwargs and asvar .
0
example# 12710
register.tag [ register . tag ] decorator ,
0
example# 12711
define the function verbatim with 2 arguments : parser and token .
0
example# 12712
call the method parser.parse [ parser . parse ] with an argument tuple with an element string _STR:0_ , substitute the result for nodelist .
1
'endverbatim' ||| _STR:0_
example# 12713
call the method parser.delete_first_token [ parser . delete_first_token ] .
0
example# 12714
call the method nodelist.render [ nodelist . render ] with an argument , an instance of Context class , use the result as an argument for the creation of ,
0
example# 12715
an instance of VerbatimNode class , return it . register.tag [ register . tag ] decorator ,
0
example# 12716
define the function widthratio with 2 arguments : parser and token .
0
example# 12717
call the method token.split_contents [ token . split_contents ] , substitute the result for bits .
0
example# 12718
if length of bits equals integer 4 ,
0
example# 12719
assign the bits elements to tag , this_value_expr , max_value_expr and max_width , respectively .
0
example# 12720
asvar is None .
0
example# 12721
otherwise if length of bits equals integer 6 ,
0
example# 12722
assign the bits elements to tag , this_value_expr , max_value_expr , max_width , as_ and asvar .
0
example# 12723
if as_ is not equal to string _STR:0_ ,
1
'as' ||| _STR:0_
example# 12724
raise an TemplateSyntaxError exception with an argument string _STR:0_ .
1
"Invalid syntax in widthratio tag. Expecting 'as' keyword" ||| _STR:0_
example# 12725
if not ,
0
example# 12726
raise an TemplateSyntaxError exception with an argument string _STR:0_ .
1
"widthratio takes at least three arguments" ||| _STR:0_
example# 12727
return an instance of a class WidthRatioNode , created with 4 arguments : result of the method parser.compile_filter [ parser . compile_filter ] ,
0
example# 12728
called with an argument this_value_expr , result of the method parser.compile_filter [ parser . compile_filter ] called with an argument max_value_expr , return value of the method parser.compile_filter [ parser . compile_filter ] called with an argument max_width and asvar as asvar . register.tag [ register . tag ] decorator function with an argument _STR:0_ ,
1
'with' ||| _STR:0_
example# 12729
define the function do_with with 2 arguments : parser and token .
0
example# 12730
call the method token.split_contents [ token . split_contents ] , substitute the result for bits .
0
example# 12731
substitute bits without the first element for remaining_bits .
0
example# 12732
call the function token_kwargs with 3 arguments : remaining_bits , parser and support_legacy set to boolean True , substitute the result for extra_context .
0
example# 12733
if extra_context is false ,
0
example# 12734
raise an TemplateSyntaxError exception with an argument string _STR:0_ ,
1
"%r expected at least one variable assignment" ||| _STR:0_
example# 12735
where _STR:0_ is replaced with first element of bits . if remaining_bits is true ,
1
'%r' ||| _STR:0_
example# 12736
raise an TemplateSyntaxError exception with an argument string _STR:0_ , where _STR:1_ is replaced with ,
2
"%r received an invalid token: %r" ||| _STR:0_
'%r' ||| _STR:1_
example# 12737
first element of bits and first element of remaining_bits . call the method parser.parse [ parser . parse ] with an argument tuple , with an element string _STR:0_ , substitute the result for nodelist .
1
'endwith' ||| _STR:0_
example# 12738
call the method parser.delete_first_token [ parser . delete_first_token ] .
0
example# 12739
return an instance of a class WithNode , created with 4 arguments : None , None , nodelist and extra_context as extra_context .
0
example# 12740
from django.core.exceptions [ django . core . exceptions ] import ImproperlyConfigured into default name space .
0
example# 12741
from django.template.base [ django . template . base ] import Origin , Template , Context and TemplateDoesNotExist into default name space .
0
example# 12742
from django.conf [ django . conf ] import settings into default name space .
0
example# 12743
from django.utils.module_loading [ django . utils . module_loading ] import import_string into default name space .
0
example# 12744
from django.utils [ django . utils ] import six into default name space .
0
example# 12745
template_source_loaders is None .
0
example# 12746
derive the class BaseLoader from the object base class .
0
example# 12747
is_usable is boolean False .
0
example# 12748
define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
0
example# 12749
do nothing .
0
example# 12750
define the method __call__ with 3 arguments : self , template_name and template_dirs set to None .
0
example# 12751
call the method self.load_template [ self . load_template ] with 2 arguments : template_name and template_dirs , return the result .
0
example# 12752
define the method load_template with 3 arguments : self , template_name and template_dirs set to None .
0
example# 12753
call the method self.load_template_source [ self . load_template_source ] with arguments template_name and template_dirs , assign the result to source and display_name .
0
example# 12754
call the function make_origin with 4 arguments : display_name , self.load_template_source [ self . load_template_source ] , template_name and template_dirs ,
0
example# 12755
substitute the result for origin . try ,
0
example# 12756
call the function get_template_from_string with 3 arguments : source , origin and template_name , substitute the result for template .
0
example# 12757
return template and None .
0
example# 12758
if TemplateDoesNotExist exception is caught ,
0
example# 12759
return source and display_name .
0
example# 12760
define the method load_template_source with 3 arguments : self , template_name and template_dirs set to None .
0
example# 12761
raise an NotImplementedError with an argument string _STR:0_ .
1
'subclasses of BaseLoader must provide a load_template_source() method' ||| _STR:0_
example# 12762
define the method reset with an argument self .
0
example# 12763
do nothing .
0
example# 12764
derive the class LoaderOrigin from the Origin base class .
0
example# 12765
define the method __init__ with 5 arguments : self , display_name , loader , name and dirs .
0
example# 12766
call the method __init__ with an argument display_name , from the base class of the LoaderOrigin class .
0
example# 12767
substitute loader , name and dirs for self.loader [ self . loader ] , self.loadname [ self . loadname ] and self.dirs [ self . dirs ] , respectively .
0
example# 12768
define the method reload with an argument self .
0
example# 12769
call the method self.loader [ self . loader ] with 2 arguments : self.loadname [ self . loadname ] and self.dirs [ self . dirs ] , return the first element of the result .
0
example# 12770
define the function make_origin with 4 arguments : display_name , loader , name and dirs .
0
example# 12771
if settings.TEMPLATE_DEBUG [ settings . TEMPLATE_DEBUG ] and display_name are both true ,
0
example# 12772
return an instance of LoaderOrigin class , created with 4 arguments : display_name , loader , name and dirs .
0
example# 12773
if not ,
0
example# 12774
return None .
0
example# 12775
define the function find_template_loader with an argument loader .
0
example# 12776
if loader is an instance of tuple or list ,
0
example# 12777
substitute first element of loader for loader and loader without the first element for args .
0
example# 12778
if not ,
0
example# 12779
args is an empty list .
0
example# 12780
if loader is an instance of six.string_types [ six . string_types ] ,
0
example# 12781
call the function import_string with an argument loader , substitute the result for TemplateLoader .
0
example# 12782
if TemplateLoader has an attribute _STR:0_ ,
1
'load_template_source' ||| _STR:0_
example# 12783
func is an instance of TemplateLoader class , created with unpacked list args .
0
example# 12784
if not ,
0
example# 12785
if args is true ,
0
example# 12786
raise an ImproperlyConfigured exception with an argument string `` Error importing template source loader % s - ca n't pass arguments to
0
example# 12787
function-based loader . `` , where ' % s ' is replaced with loader . substitute TemplateLoader for func .
0
example# 12788
func.is_usable [ func . is_usable ] in false ,
0
example# 12789
import module warnings .
0
example# 12790
call the function warnings.warn [ warnings . warn ] with an argument string `` Your TEMPLATE_LOADERS setting includes % r , but your Python installation
0
example# 12791
doesn_STR:0_ % r ' is replaced with loader . return None .
1
't support that type of template loading. Consider removing that line from TEMPLATE_LOADERS.",   where ' ||| _STR:0_
example# 12792
if not ,
0
example# 12793
return func .
0
example# 12794
if not ,
0
example# 12795
raise an ImproperlyConfigured with an argument string _STR:0_ .
1
'Loader does not define a "load_template" callable template source loader' ||| _STR:0_
example# 12796
define the function find_template with 2 : template_name and dirs set to None .
0
example# 12797
use global variable template_source_loaders .
0
example# 12798
if template_source_loaders is None ,
0
example# 12799
loaders is an empty list .
0
example# 12800
for every loader_name in settings.TEMPLATE_LOADERS [ settings . TEMPLATE_LOADERS ] ,
0
example# 12801
call the function find_template_loader with an argument loader_name , substitute the result for loader .
0
example# 12802
if loader is not None ,
0
example# 12803
append loader to loaders .
0
example# 12804
put loaders elements in a tuple , substitute it for template_source_loaders .
0
example# 12805
for every loader in template_source_loaders ,
0
example# 12806
try ,
0
example# 12807
call the function loader with 2 arguments name and dirs , substitute the result for source and display_name , respectively .
0
example# 12808
call the function make_origin with 4 arguments : display_name , loader , name and dirs , return a tuple containing 2 elements :
0
example# 12809
source and previous result . if TemplateDoesNotExist exception is caught ,
0
example# 12810
do nothing ,
0
example# 12811
raise an TemplateDoesNotExist exception with an argument name .
0
example# 12812
define the function get_template with 2 : template_name and dirs set to None .
0
example# 12813
call the function find_template with 2 arguments : template_name and dirs , substitute the result for template and origin .
0
example# 12814
if template has an attribute _STR:0_ ,
1
'render' ||| _STR:0_
example# 12815
call the function get_template_from_string with 3 arguments : template , origin and template_name , substitute the result for template .
0
example# 12816
return template .
0
example# 12817
define the function get_template_from_string with 3 : source , origin set to None and name set to None .
0
example# 12818
return an instance of Template class , created with 2 arguments : source , origin and name , return the result .
0
example# 12819
define the function render_to_string with 4 arguments : template_name , dictionary set to None , context_instance set to None and dirs set to None .
0
example# 12820
if template_name is an instance of list or tuple types ,
0
example# 12821
call the function select_template with 2 arguments : template_name , dirs , substitute the result for t .
0
example# 12822
if not ,
0
example# 12823
call the function get_template with 2 arguments : template_name and dirs , substitute the result for t .
0
example# 12824
if context_instance is false ,
0
example# 12825
call the method t.render [ t . render ] with an argument , instance of Context class , created with an argument dictionary , return the result .
0
example# 12826
if dictionary is false ,
0
example# 12827
call the function t.render [ t . render ] with an argument context_instance , return the result .
0
example# 12828
call the method context_instance.push [ context_instance . push ] with an argument dictionary , with the result perform ,
0
example# 12829
call the function t.render [ t . render ] with an argument context_instance , return the result .
0
example# 12830
define the function select_template with 2 arguments : template_name_list and dirs set to None .
0
example# 12831
if template_name_list is false ,
0
example# 12832
raise an TemplateDoesNotExist exception with an argument string _STR:0_ .
1
"No template names provided" ||| _STR:0_
example# 12833
not_found is an empty list .
0
example# 12834
for every template_name in template_name_list ,
0
example# 12835
try ,
0
example# 12836
call the function get_template with 2 arguments template_name and dirs , return the result .
0
example# 12837
if TemplateDoesNotExist , renamed to e , exception is caught ,
0
example# 12838
if first element of e.args [ e . args ] is not contained in not_found ,
0
example# 12839
append first element of e.args [ e . args ] to not_found list .
0
example# 12840
skip this loop iteration .
0
example# 12841
raise an TemplateDoesNotExist exception with an argument , elements of not_found joined into a string , separated with _STR:0_
1
', ' ||| _STR:0_
example# 12842
from collections import defaultdict into default name space .
0
example# 12843
from django.conf [ django . conf ] import settings into default name space .
0
example# 12844
from django.template.base [ django . template . base ] import TemplateSyntaxError , Library , Node , TextNode , token_kwargs and Variable into default namespace .
0
example# 12845
from django.template.loader [ django . template . loader ] import get_template into default name space .
0
example# 12846
from django.utils.safestring [ django . utils . safestring ] import mark_safe into default name space .
0
example# 12847
from django.utils [ django . utils ] import six into default name space .
0
example# 12848
register is an instance of Library class .
0
example# 12849
BLOCK_CONTEXT_KEY is a strign _STR:0_ .
1
'block_context' ||| _STR:0_
example# 12850
derive the class ExtendsError from the Exception base class .
0
example# 12851
do nothing .
0
example# 12852
derive the class BlockContext from the Exception base class .
0
example# 12853
define the method __init__ with an argument self .
0
example# 12854
convert elements of defaultdict to list , substitute it for self.blocks [ self . blocks ] .
0
example# 12855
define the method self and blocks .
0
example# 12856
call the function six.iteritems [ six . iteritems ] with an argument blocks , for every name and block in result ,
0
example# 12857
get the value under the name key of self.blocks [ self . blocks ] dictionary , insert to it block at the beginning .
0
example# 12858
define the method self and name .
0
example# 12859
try ,
0
example# 12860
remove the first element of value under the name key of self.blocks [ self . blocks ] dictionary , return it .
0
example# 12861
if IndexError exception is caught ,
0
example# 12862
return None .
0
example# 12863
define the method push with 3 arguments : self , name and block .
0
example# 12864
append block to the value under the name key of self.blocks [ self . blocks ] dictionary .
0
example# 12865
define the method get_block with 2 arguments self and name .
0
example# 12866
try ,
0
example# 12867
get value under the self.blocks [ self . blocks ] dictionary under the name key , return the last element .
0
example# 12868
if IndexError exception is caught ,
0
example# 12869
return None .
0
example# 12870
derive the class BlockNode from the Node base class .
0
example# 12871
define the method __init__ with 4 arguments : self , name , nodelist , parent set to None .
0
example# 12872
substitute name , nodelist and parent for self.name [ self . name ] , self.nodelist [ self . nodelist ] and self.parent [ self . parent ] .
0
example# 12873
define the method __repr__ with an argument self .
0
example# 12874
return string _STR:0_ , where ' % s ' is replaced with self.name [ self . name ] and _STR:1_ with self.nodelist [ self . nodelist ] .
2
'%r' ||| _STR:1_
"<Block Node: %s. Contents: %r>" ||| _STR:0_
example# 12875
define the method render with 2 arguments self and context .
0
example# 12876
get value under the BLOCK_CONTEXT_KEY key of context.render_context [ context . render_context ] dictionary , substitute it for block_context .
0
example# 12877
call the context.push [ context . push ] method , with the result , perform ,
0
example# 12878
if block_context is None ,
0
example# 12879
substitute self for value under the _STR:0_ key of context dictionary .
1
'block' ||| _STR:0_
example# 12880
call the method self.nodelist.render [ self . nodelist . render ] with an argument context , substitute the result for result .
0
example# 12881
if not ,
0
example# 12882
call the method block_context.pop [ block_context . pop ] with an argument self.name [ self . name ] , assign the result to push and block .
0
example# 12883
if block is None ,
0
example# 12884
substitute self for block .
0
example# 12885
convert self to a tuple , call the result with 2 arguments : block.name [ block . name ] and block.nodelist [ block . nodelist ] , substitute the result for block .
0
example# 12886
substitute context for block.context [ block . context ] .
0
example# 12887
substitute block for value under the _STR:0_ key of context dictionary .
1
'block' ||| _STR:0_
example# 12888
call the method block.nodelist.render [ block . nodelist . render ] with an argument context , substitute the result for result .
0
example# 12889
if push is not None ,
0
example# 12890
call the method block_context.push [ block_context . push ] with 2 arguments : self.name [ self . name ] and push .
0
example# 12891
return result .
0
example# 12892
define the method super with an argument self .
0
example# 12893
substitute self.context.render_context [ self . context . render_context ] for render_context .
0
example# 12894
if BLOCK_CONTEXT_KEY is contained in render_context and call to the method get_block with an argument self.name [ self . name ] from the object ,
0
example# 12895
under the BLOCK_CONTEXT_KEY key of render_context dictionary dictionary evaluates to be not equal to None , call the method self.render [ self . render ] with an argument self.context [ self . context ] , use it as an argument for the call to the mark_safe function , return the result .
0
example# 12896
return an empty string .
0
example# 12897
derive the class ExtendsNode from the Node base class .
0
example# 12898
must_be_first is boolean True .
0
example# 12899
define the method __init__ with 4 arguments : self , nodelist , parent_name and template_dirs set to None .
0
example# 12900
substitute nodelist for self.nodelist [ self . nodelist ] .
0
example# 12901
substitute parent_name for self.parent_name [ self . parent_name ] .
0
example# 12902
substitute template_dirs for self.template_dirs [ self . template_dirs ] .
0
example# 12903
self.blocks [ self . blocks ] is a dictionary with elements : n for n.name [ n . name ] , for every n in return value of the method nodelist.get_nodes_by_type [ nodelist . get_nodes_by_type ] ,
0
example# 12904
called with an argument BlockNode . define the method __repr__ with an argument self .
0
example# 12905
return an string _STR:0_ , where ' % s ' is replaced with self.parent_name.token [ self . parent_name . token ] .
1
'<ExtendsNode: extends %s>' ||| _STR:0_
example# 12906
define the method get_parent with 2 arguments self and context .
0
example# 12907
call the method self.parent_name.resolve [ self . parent_name . resolve ] with an argument context .
0
example# 12908
if parent is false ,
0
example# 12909
error_msg is a string _STR:0_ , where ' % s ' is replaced with parent .
1
"Invalid template name in 'extends' tag: %r." ||| _STR:0_
example# 12910
if self.parent_name.filters [ self . parent_name . filters ] is true or self.parent_name.var [ self . parent_name . var ] is an instance of Variable .
0
example# 12911
append string _STR:0_ to error_msg , where ' % s is replaced with self.parent_name.token [ self . parent_name . token ] .
1
" Got this from the '%s' variable." ||| _STR:0_
example# 12912
raise an TemplateSyntaxError exception with an argument error_msg .
0
example# 12913
if parent has an attribute _STR:0_ ,
1
'render' ||| _STR:0_
example# 12914
return parent .
0
example# 12915
call the function get_template with an argument parent , return the result .
0
example# 12916
define the method render with 2 arguments self and context .
0
example# 12917
call the method self.get_parent [ self . get_parent ] with an argument context , substitute the result for compiled_parent .
0
example# 12918
if BLOCK_CONTEXT_KEY is not contained in context.render_context [ context . render_context ] ,
0
example# 12919
value under the BLOCK_CONTEXT_KEY key of context.render_context [ context . render_context ] dictionary is BlockContext class instance .
0
example# 12920
get the value under the BLOCK_CONTEXT_KEY key of the context.render_context [ context . render_context ] dictionary , substitute it for block_context .
0
example# 12921
call the method block_context.add_blocks [ block_context . add_blocks ] with an argument self.block [ self . block ] .
0
example# 12922
for every node in compiled_parent.nodelist [ compiled_parent . nodelist ] ,
0
example# 12923
if node is not an instance of TextNode ,
0
example# 12924
if node is not an instance of ExtendsNode ,
0
example# 12925
blocks is a dictionary with elements : n for n.name [ n . name ] , for every n in return value of the method ,
0
example# 12926
compiled_parent.nodelist.get_nodes_by_type [ compiled_parent . nodelist . get_nodes_by_type ] , called with an argument BlockNode . call the method block_context.add_blocks [ block_context . add_blocks ] with an argument blocks .
0
example# 12927
break from the loop execution .
0
example# 12928
call the method compiled_parent._render [ compiled_parent . _render ] with an argument context , return the result .
0
example# 12929
derive the class IncludeNode from the Node base class .
0
example# 12930
define the method __init__ with 4 arguments : self , template , unpacked list args and unpacked dictionary kwargs .
0
example# 12931
substitute template for self.template [ self . template ] .
0
example# 12932
remove kwargs dictionary entry under the _STR:0_ key , if it exists substitute it for self.extra_context [ self . extra_context ] ,
1
'extra_context' ||| _STR:0_
example# 12933
if not self.extra_context [ self . extra_context ] is an empty dictionary . remove kwargs dictionary entry under the _STR:0_ key , if it exists substitute it for self.isolated_context [ self . isolated_context ] ,
1
'isolated_context' ||| _STR:0_
example# 12934
if not self.isolated_context [ self . isolated_context ] is boolean False . call the method __init__ from the base class of the class IncludeNode , called with 2 arguments : unpacked dictionary args ,
0
example# 12935
and unpacked dictionary kwargs . define the method render with 2 arguments self and context .
0
example# 12936
try ,
0
example# 12937
call the method self.template.resolve [ self . template . resolve ] with an argument context , substitute the result for template .
0
example# 12938
get _STR:0_ attribute of template object , if it is callable ,
1
'render' ||| _STR:0_
example# 12939
call the method get_template with an argument template , substitute the result for template .
0
example# 12940
values is an dictionary with entries : return value of the method var.resolve [ var . resolve ] with an argument context for name ,
0
example# 12941
for every name and var in return value of the function six.iteritems [ six . iteritems ] called with an argument self.extra_context [ self . extra_context ] . if self.isolated_context [ self . isolated_context ] is true ,
0
example# 12942
call the method context.new [ context . new ] with an argument values , use it as an argument for the call to the method template.render [ template . render ] , return the result .
0
example# 12943
call the method context.push [ context . push ] with unpacked dictionary values as an argument , with the result perform ,
0
example# 12944
call the method template.render [ template . render ] with an argument context , return the result .
0
example# 12945
if Exception exception is caught ,
0
example# 12946
if settings.TEMPLATE_DEBUG [ settings . TEMPLATE_DEBUG ] is true ,
0
example# 12947
raise an exception ,
0
example# 12948
return an empty string .
0
example# 12949
decorator method register.tag [ register . tag ] with an argument _STR:0_ ,
1
'block' ||| _STR:0_
example# 12950
define the function do_block with 2 arguments parser and token .
0
example# 12951
call the method token.contents.split [ token . contents . split ] , substitute the result for bits .
0
example# 12952
if length of bits is not equal to integer 2 ,
0
example# 12953
raise an TemplateSyntaxError exception with an argument string _STR:0_ ,
1
"'%s' tag takes only one argument" ||| _STR:0_
example# 12954
where ' % s ' is replaced with first element of bits . substitute second element for bits for block_name .
0
example# 12955
try ,
0
example# 12956
if block_name is contained in parser.__loaded_blocks [ parser . __loaded_blocks ] ,
0
example# 12957
raise an TemplateSyntaxError exception with an argument string _STR:0_ ,
1
"'%s' tag with name '%s' appears more than once" ||| _STR:0_
example# 12958
substitute ' % s ' with first element of bits and block_name , respectively . append block_name to parser.__loaded_blocks [ parser . __loaded_blocks ] .
0
example# 12959
if AttributeError exception is caught ,
0
example# 12960
substitute list with an element block_name for parser.__loaded_blocks [ parser . __loaded_blocks ] .
0
example# 12961
call the method parser.parse [ parser . parse ] with an argument tuple with one element string _STR:0_ , substitute the result for nodelist .
1
'endblock' ||| _STR:0_
example# 12962
call the method parser.next_token [ parser . next_token ] , substitute the result for endblock .
0
example# 12963
acceptable_endblocks is a tuple with 2 elements : string _STR:0_ and _STR:1_ , where ' % s ' replaced with block_name .
2
'endblock' ||| _STR:0_
'endblock %s' ||| _STR:1_
example# 12964
if endblock.contents [ endblock . contents ] is not contained in acceptable_endblocks ,
0
example# 12965
call the method parser.invalid_block_tag [ parser . invalid_block_tag ] with 3 arguments : endblock , _STR:0_ and acceptable_endblocks .
1
'endblock' ||| _STR:0_
example# 12966
return an instance of a BlockNode class , created with 2 arguments : block_name and nodelist .
0
example# 12967
decorator method register.tag [ register . tag ] with an argument _STR:0_ ,
1
'extends' ||| _STR:0_
example# 12968
define the function do_extends with 2 arguments parser and token .
0
example# 12969
call the method token.split_contents [ token . split_contents ] , substitute the result for bits .
0
example# 12970
if length of bits is not equalt to integer 2 ,
0
example# 12971
raise an TemplateSyntaxError exception with an argument string _STR:0_ , where ' % s ' is replaced with first element of bits .
1
"'%s' takes one argument" ||| _STR:0_
example# 12972
call the method parser.compile_filter [ parser . compile_filter ] with an argument second element for bits , substitute the result for parent_name .
0
example# 12973
call the method parser.parse [ parser . parse ] , substitute the result for nodelist .
0
example# 12974
call the method nodelist.get_nodes_by_type [ nodelist . get_nodes_by_type ] with an argument ExtendsNode , if it evaluates to true ,
0
example# 12975
raise an TemplateSyntaxError exception with an argument string _STR:0_ ,
1
"'%s' cannot appear more than once in the same template" ||| _STR:0_
example# 12976
where ' % s ' is replaced with first element of bits . return an instance of ExtendsNode with 2 arguments nodelist and parent_name .
0
example# 12977
decorator method register.tag [ register . tag ] with an argument _STR:0_ ,
1
'include' ||| _STR:0_
example# 12978
define the function do_include with 2 arguments parser and token .
0
example# 12979
call the method token.split_contents [ token . split_contents ] , substitute the result for bits .
0
example# 12980
if length of bits is lesser than integer 2 ,
0
example# 12981
raise an TemplateSyntaxError with an argument string _STR:0_ ,
1
"%r tag takes at least one argument: the name of the template to be included." ||| _STR:0_
example# 12982
where _STR:0_ is replaced with first element of bits . options is an empty dictionary .
1
'%r' ||| _STR:0_
example# 12983
substitute bits , without the first two elements , substitute the result for remaining_bits .
0
example# 12984
while remaining_bits is true ,
0
example# 12985
remove first element from remaining_bits , substitute the result for option .
0
example# 12986
if option is contained in options ,
0
example# 12987
raise an TemplateSyntaxError exception with an argument string _STR:0_ ,
1
'The %r option was specified more than once.' ||| _STR:0_
example# 12988
where _STR:0_ is replaced with options . if option equals a string _STR:1_ ,
2
'with' ||| _STR:1_
'%r' ||| _STR:0_
example# 12989
call the function token_kwargs with 3 arguments : remaining_bits , parser , support_legacy set to boolean False , substitute the result for value .
0
example# 12990
if value is true ,
0
example# 12991
raise an TemplateSyntaxError exception with an argument string _STR:0_ ,
1
'"with" in %r tag needs at least one keyword argument.' ||| _STR:0_
example# 12992
where ' % s ' is replaced with first element of bits . otherwise if options equals _STR:0_ ,
1
'only' ||| _STR:0_
example# 12993
value is boolean True .
0
example# 12994
if not ,
0
example# 12995
raise an TemplateSyntaxError with an argument string _STR:0_ , where _STR:1_ is replaced with first element of bits and options .
2
'%r' ||| _STR:1_
'Unknown argument for %r tag: %r.' ||| _STR:0_
example# 12996
substitute value for value under the options key of options dictionary .
0
example# 12997
get the value under the key _STR:0_ of the options dictionary , if it exists substitute the result for isolated_context ,
1
'only' ||| _STR:0_
example# 12998
if not , isolated_context is boolean False . get the value under the _STR:0_ key of the options dictionary , if it exists , substitute it for namemap , if not namemap is an empty dictionary .
1
'width' ||| _STR:0_
example# 12999
return an instance of IncludeNode class , created with 3 arguments : return value of the method parser.compile_filter [ parser . compile_filter ] ,
0
example# 13000
import module os .
0
example# 13001
import module sys .
0
example# 13002
from django.apps [ django . apps ] import apps into default name space .
0
example# 13003
from django.conf [ django . conf ] import settings into default name space .
0
example# 13004
from django.template.base [ django . template . base ] import TemplateDoesNotExist into default name space .
0
example# 13005
from django.template.loader [ django . template . loader ] import BaseLoader into default name space .
0
example# 13006
from django.utils._os [ django . utils . _os ] import safe_join into default name space .
0
example# 13007
from django.utils [ django . utils ] import six into default name space .
0
example# 13008
define the function calculate_app_template_dirs .
0
example# 13009
if six.PY2 [ six . PY2 ] is true ,
0
example# 13010
call the function sys.getfilesystemencoding [ sys . getfilesystemencoding ] , if it evaluates to true , substitute the result for fs_encoding ,
0
example# 13011
if not , call the function sys.getdefaultencoding [ sys . getdefaultencoding ] and substitute the result for fs_encoding . app_template_dirs is an empty list .
0
example# 13012
call the function apps.get_app_configs [ apps . get_app_configs ] , for every app_config in result ,
0
example# 13013
if app_config.path [ app_config . path ] is true ,
0
example# 13014
skip this loop iteration .
0
example# 13015
join app_config.path [ app_config . path ] and string _STR:0_ into file path , substitute it for template_dir .
1
'templates' ||| _STR:0_
example# 13016
if template_dir is directory ,
0
example# 13017
if six.PY2 [ six . PY2 ] is true ,
0
example# 13018
call the function template_dir.decode [ template_dir . decode ] with an argument fs_encoding , substitute the result for template_dir .
0
example# 13019
append template_dir to app_template_dirs .
0
example# 13020
convert app_template_dirs to a tuple , return it .
0
example# 13021
call the function calculate_app_template_dirs , substitute the result for app_template_dirs .
0
example# 13022
derive the class Loader from the BaseLoader base class .
0
example# 13023
is_usable is boolean True .
0
example# 13024
define the method get_template_sources with 3 arguments : self , template_name , template_dirs set to None .
0
example# 13025
if template_dirs is false ,
0
example# 13026
substitute app_template_dirs for template_dirs .
0
example# 13027
for every template_dir in template_dirs ,
0
example# 13028
try ,
0
example# 13029
call the function safe_join with 2 arguments template_dir and template_name , yield the result .
0
example# 13030
if UnicodeDecodeError exception is caught ,
0
example# 13031
raise an exception .
0
example# 13032
if ValueError exception is caught ,
0
example# 13033
do nothing .
0
example# 13034
define the method load_template_source with 3 arguments : self , template_name , template_dirs set to None .
0
example# 13035
call the method self.get_template_sources [ self . get_template_sources ] with 2 arguments template_name and template_dirs , for every filepath in the result ,
0
example# 13036
try ,
0
example# 13037
open the file named filepath in read mode , with file descriptor renamed to fp perform ,
0
example# 13038
read file fp , call the method decode on the result with an argument settings.FILE_CHARSET [ settings . FILE_CHARSET ] , return tuple containing 2 elements ,
0
example# 13039
previous result and filepath . if IOError exception is caught ,
0
example# 13040
do nothing .
0
example# 13041
raise an TemplateDoesNotExist exception with an argument template_name .
0
example# 13042
import module hashlib .
0
example# 13043
from django.template.base [ django . template . base ] import TemplateDoesNotExist into default name space .
0
example# 13044
from django.template.loader [ django . template . loader ] import BaseLoader , get_template_from_string , find_template_loader and make_origin into default name space .
0
example# 13045
from django.utils.encoding [ django . utils . encoding ] import force_bytes into default name space .
0
example# 13046
derive the class Loader from the BaseLoader base class .
0
example# 13047
is_usable is boolean True .
0
example# 13048
define the method __init__ with 2 arguments : self and loaders .
0
example# 13049
self.template_cache [ self . template_cache ] is an empty dictionary .
0
example# 13050
self.find_template_cache [ self . find_template_cache ] is an empty dictionary .
0
example# 13051
substitute loaders for self._loaders [ self . _loaders ] .
0
example# 13052
self._cached_loaders [ self . _cached_loaders ] is an empty list .
0
example# 13053
property decorator .
0
example# 13054
define the method loaders with an argument self .
0
example# 13055
if self._cached_loaders [ self . _cached_loaders ] is false ,
0
example# 13056
cached_loaders is an empty list .
0
example# 13057
for every loader in self._loaders [ self . _loaders ] ,
0
example# 13058
call the function find_template_loader with an argument loader , append the result to cached_loaders .
0
example# 13059
substitute cached_loaders for self._cached_loaders [ self . _cached_loaders ] .
0
example# 13060
return self._cached_loaders [ self . _cached_loaders ] .
0
example# 13061
define the method cache_key with 3 arguments : self , template_name and template_dirs .
0
example# 13062
if template_dirs is true ,
0
example# 13063
join template_dirs elements into a string , separated by _STR:0_ , use it as an argument for the call to the function force_bytes ,
1
'|' ||| _STR:0_
example# 13064
use the result as the argument for the call to the function hashlib.sha1 [ hashlib . sha1 ] , call the hexdigest method on the result , join template_name and previous final result into a string , separated with _STR:0_ , return it . if not ,
1
'-' ||| _STR:0_
example# 13065
return template_name .
0
example# 13066
define the method find_template with 3 arguments : self , name , dirs set to None .
0
example# 13067
call the method self.cache_key [ self . cache_key ] with 2 arguments name and dirs , substitute the result for key .
0
example# 13068
try ,
0
example# 13069
get the value under the key key of the self.find_template_cache [ self . find_template_cache ] dictionary , substitute it for result .
0
example# 13070
if KeyError exception is caught ,
0
example# 13071
result is None .
0
example# 13072
for every loader in self.loaders [ self . loaders ] ,
0
example# 13073
try ,
0
example# 13074
call the function loader with arguments name and dirs , assign the result to template and display_name , respectively .
0
example# 13075
if TemplateDoesNotExist exception is caught ,
0
example# 13076
do nothing .
0
example# 13077
if not ,
0
example# 13078
result is an tuple with 2 elements : template and return value of the function make_origin called with 4 arguments : display_name , loader , name and dirs .
0
example# 13079
break from the loop execution .
0
example# 13080
substitute result for self.find_template_cache [ self . find_template_cache ] dictionary value under the key key .
0
example# 13081
if result is true ,
0
example# 13082
return result
0
example# 13083
if not ,
0
example# 13084
substitute TemplateDoesNotExist for self.find_template_cache [ self . find_template_cache ] dictionary value under the key key .
0
example# 13085
raise an TemplateDoesNotExist exception with an argument name .
0
example# 13086
define the method load_template with 3 arguments : self , template_name , template_dirs set to None .
0
example# 13087
get the value under the template_name key of the self.cache_key [ self . cache_key ] dictionary , if it exists , substitute it for key ,
0
example# 13088
if not , substitute template_dirs for key . get the value under the key key of the self.template_cache [ self . template_cache ] dictionary , substitute it for template_tuple .
0
example# 13089
if template_tuple is contained in TemplateDoesNotExist ,
0
example# 13090
raise an TemplateDoesNotExist exception .
0
example# 13091
otherwise if template_tuple is None ,
0
example# 13092
call the method self.find_template [ self . find_template ] with 2 argumetns : template_name and template_dirs , assign the result to template , origin , respectively .
0
example# 13093
if template doesnt have a _STR:0_ attribute ,
1
'render' ||| _STR:0_
example# 13094
try ,
0
example# 13095
call the function get_template_from_string with 3 arguments : template , origin and template_name , substitute the result for template .
0
example# 13096
if TemplateDoesNotExist exception is caught ,
0
example# 13097
substitute a tuple with 2 elements : template and origin , for self.find_template_cache [ self . find_template_cache ] dictionary value under the key key .
0
example# 13098
substitute a tuple with 2 elements : template and None , for self.find_template_cache [ self . find_template_cache ] dictionary value under the key key .
0
example# 13099
return self.find_template_cache [ self . find_template_cache ] dictionary value under the key key .
0
example# 13100
define the method reset with an argument self .
0
example# 13101
call the method self.template_cache.clear [ self . template_cache . clear ] .
0
example# 13102
call the method self.find_template_cache.clear [ self . find_template_cache . clear ] .
0
example# 13103
from __future__ import unicode_literals into default name space .
0
example# 13104
try ,
0
example# 13105
from pkg_resources import resource_string into default name space .
0
example# 13106
if ImportError exception is caught ,
0
example# 13107
resource_string is None .
0
example# 13108
from django.apps [ django . apps ] import apps into default name space .
0
example# 13109
from django.conf [ django . conf ] import settings into default name space .
0
example# 13110
from django.template.base [ django . template . base ] import TemplateDoesNotExist into default name space .
0
example# 13111
from django.template.loader [ django . template . loader ] import BaseLoader into default name space .
0
example# 13112
from django.utils [ django . utils ] import six into default name space .
0
example# 13113
derive the class Loader from the BaseLoader base class .
0
example# 13114
if resource_string is not None , is_usable is boolean True , otherwise is_usable is boolean False .
0
example# 13115
define the method load_template_source with 3 arguments : self , template_name , template_dirs set to None .
0
example# 13116
if resource_string is not None ,
0
example# 13117
concatenate string _STR:0_ and template_name , substitute the result for pkg_name .
1
'templates/' ||| _STR:0_
example# 13118
call the method apps.get_app_configs [ apps . get_app_configs ] , for app_config in the result ,
0
example# 13119
try ,
0
example# 13120
call the function resource_string with 2 arguments app_config.name [ app_config . name ] and pkg_name , substitute the result for resource .
0
example# 13121
if Exception exception is caught ,
0
example# 13122
skip this loop iteration .
0
example# 13123
if six.PY2 [ six . PY2 ] is true ,
0
example# 13124
call the method resource.decode [ resource . decode ] with an argument settings.FILE_CHARSET [ settings . FILE_CHARSET ] , substitute the result for resource .
0
example# 13125
return a tuple with 2 elements : resource and string _STR:0_ , where ' % s ' is replaced with app_config.name [ app_config . name ] and pkg_name , respective .
1
'egg:%s:%s' ||| _STR:0_
example# 13126
raise an TemplateDoesNotExist exception with an argument template_name .
0
example# 13127
from django.conf [ django . conf ] import settings into default name space .
0
example# 13128
from django.template.base [ django . template . base ] import TemplateDoesNotExist into default name space .
0
example# 13129
from django.template.loader [ django . template . loader ] import BaseLoader into default name space .
0
example# 13130
from django.utils._os [ django . utils . _os ] import safe_join into default name space .
0
example# 13131
derive the class Loader from the BaseLoader base class .
0
example# 13132
is_usable is boolean True .
0
example# 13133
define the method get_template_source with 3 arguments : self , template_name , template_dirs set to None .
0
example# 13134
if template_dirs is false ,
0
example# 13135
substitute settings.TEMPLATE_DIRS [ settings . TEMPLATE_DIRS ] for template_dirs .
0
example# 13136
for every template_dir in template_dirs ,
0
example# 13137
try ,
0
example# 13138
call the function safe_join with 2 arguments template_dir and template_name , yield the result .
0
example# 13139
if UnicodeDecodeError exception is caught ,
0
example# 13140
raise an exception .
0
example# 13141
if ValueError exception is caught ,
0
example# 13142
do nothing .
0
example# 13143
define the method load_template_source with 3 arguments : self , template_name , template_dirs set to None .
0
example# 13144
tried is an empty list .
0
example# 13145
call the method self.get_template_sources [ self . get_template_sources ] with 2 arguments template_name and template_dirs , for every filepath in the result ,
0
example# 13146
try ,
0
example# 13147
open the file named filepath in read mode , with file descriptor renamed to fp perform ,
0
example# 13148
read file fp , call the method decode on the result with an argument settings.FILE_CHARSET [ settings . FILE_CHARSET ] , return tuple containing 2 elements ,
0
example# 13149
previous result and filepath . if IOError exception is caught ,
0
example# 13150
append filepath to tried .
0
example# 13151
if tried is true ,
0
example# 13152
err_msg is a string _STR:0_ , where ' % s ' is replaced with tried .
1
"Tried %s" ||| _STR:0_
example# 13153
if not ,
0
example# 13154
error_msg is a string _STR:0_ .
1
"Your TEMPLATE_DIRS setting is empty. Change it to point to at least one template directory." ||| _STR:0_
example# 13155
raise an TemplateDoesNotExist exception with an argument error_msg .
0
example# 13156
load_template_source.is_usable [ load_template_source . is_usable ] is boolean True .
0
example# 13157
from django.http [ django . http ] import HttpResponse into default name space .
0
example# 13158
from django.template [ django . template ] import loader , Context and RequestContext into default name space .
0
example# 13159
from django.utils [ django . utils ] import six into default name space .
0
example# 13160
derive the class ContentNotRenderedError from the Exception base class .
0
example# 13161
do nothing .
0
example# 13162
derive the class SimpleTemplateResponse from the HttpResponse base class .
0
example# 13163
rendering_attrs is a list containing 3 strings : _STR:0_ , _STR:1_ and _STR:2_ .
3
'context_data' ||| _STR:1_
'_post_render_callbacks' ||| _STR:2_
'template_name' ||| _STR:0_
example# 13164
define the method __init__ with 5 arguments : self , template , context set to None , content_type set to None and status set to None .
0
example# 13165
substitute template for self.template_name [ self . template_name ] .
0
example# 13166
substitute context for self.context_data [ self . context_data ] .
0
example# 13167
self._post_render_callbacks [ self . _post_render_callbacks ] is an empty list .
0
example# 13168
call the __init__ method from the base class of the class SimpleTemplateResponse , with 3 arguments : an empty string , content_type and status .
0
example# 13169
self._is_rendered [ self . _is_rendered ] is boolean False .
0
example# 13170
define the method __getstate__ with an argument self .
0
example# 13171
call the __getstate__ method from the base class of the class SimpleTemplateResponse , substitute the result for obj_dict .
0
example# 13172
if self._is_rendered [ self . _is_rendered ] is false ,
0
example# 13173
raise an ContentNotRenderedError exception with an argument string _STR:0_ .
1
'The response content must be rendered before it can be pickled.' ||| _STR:0_
example# 13174
for every attr in self.rendering_attrs [ self . rendering_attrs ] ,
0
example# 13175
if attr is contained in obj_dict ,
0
example# 13176
delete entry under the attr key of obj_dict dictionary .
0
example# 13177
return obj_dict .
0
example# 13178
define the method resolve_template with 2 arguments : self and template .
0
example# 13179
if template is an instance of list or tuple types ,
0
example# 13180
call the method loader.select_template [ loader . select_template ] with an argument template , return the result .
0
example# 13181
otherwise is template is six.string_types [ six . string_types ] instance ,
0
example# 13182
call the method loader.get_template [ loader . get_template ] with an argument template , return the result .
0
example# 13183
if not ,
0
example# 13184
return template .
0
example# 13185
define the method resolve_context with 2 arguments : self and context .
0
example# 13186
if context is an instance of Context ,
0
example# 13187
return context .
0
example# 13188
if not ,
0
example# 13189
return an instance of Context class , created with an argument context .
0
example# 13190
property decorator ,
0
example# 13191
define the method rendered_content with an argument self .
0
example# 13192
call the method self.resolve_template [ self . resolve_template ] with an argument self.template_name [ self . template_name ] , substitute the result for template .
0
example# 13193
call the method self.resolve_context [ self . resolve_context ] with an argument self.context_data [ self . context_data ] , substitute the result for context .
0
example# 13194
call the method template.render [ template . render ] with an argument context , substitute the result for content .
0
example# 13195
return content .
0
example# 13196
define the method add_post_render_callback with 2 arguments : self and callback .
0
example# 13197
if self._is_rendered [ self . _is_rendered ] is true ,
0
example# 13198
call the functoin callback with an argument self .
0
example# 13199
if not ,
0
example# 13200
append callback to self._post_render_callbacks [ self . _post_render_callbacks ] list .
0
example# 13201
define the method render with an argument self .
0
example# 13202
substitute self for retval .
0
example# 13203
if self._is_rendered [ self . _is_rendered ] is false ,
0
example# 13204
substitute self.rendered_content [ self . rendered_content ] for self.content [ self . content ] .
0
example# 13205
for every post_callback in self._post_render_callbacks [ self . _post_render_callbacks ] ,
0
example# 13206
call the function post_callback with an argument retval , substitute the result for newretval .
0
example# 13207
if newretval is not None ,
0
example# 13208
substitute newretval for retval .
0
example# 13209
return retval .
0
example# 13210
property decorator ,
0
example# 13211
define the method is_rendered with an argument self .
0
example# 13212
return self._is_rendered [ self . _is_rendered ] .
0
example# 13213
define the method __iter__ with an argument self .
0
example# 13214
if self._is_rendered [ self . _is_rendered ] is false ,
0
example# 13215
raise an ContentNotRenderedError exception with an string _STR:0_ .
1
'The response content must be rendered before it can be iterated over.' ||| _STR:0_
example# 13216
call the method __init__ from the base class of the class SimpleTemplateResponse , return the result .
0
example# 13217
property decorator ,
0
example# 13218
define the method content with an argument self .
0
example# 13219
if self._is_rendered [ self . _is_rendered ] is false .
0
example# 13220
raise an ContentNotRenderedError exception with an sring _STR:0_ .
1
'The response content must be rendered before it can be accessed.' ||| _STR:0_
example# 13221
return the content field of the base class of the class SimpleTemplateResponse .
0
example# 13222
content.setter [ content . setter ] decorator ,
0
example# 13223
define the method content with 2 arguments : self and value .
0
example# 13224
call the method HttpResponse.content.fset [ HttpResponse . content . fset ] with 2 arguments : self and value .
0
example# 13225
self._is_rendered [ self . _is_rendered ] is boolean True .
0
example# 13226
derive the class TemplateResponse from the SimpleTemplateResponse base class .
0
example# 13227
append list with 2 strings : _STR:0_ and _STR:1_ to SimpleTemplateResponse.rendering_attrs [ SimpleTemplateResponse . rendering_attrs ] , substitute the result for rendering_attrs .
2
'_current_app' ||| _STR:1_
'_request' ||| _STR:0_
example# 13228
define the method __init__ with 7 arguments : self , request , template , context set to None , content_type set to None ,
0
example# 13229
status set to None and current_app set to None . substitute request for self._request [ self . _request ] .
0
example# 13230
substitute current_app for self._current_app [ self . _current_app ] .
0
example# 13231
call the __init__ method from the base class of the class TemplateResponse , with 4 arguments : template , context , content_type , status .
0
example# 13232
define the method resolve_context with 2 arguments : self and context .
0
example# 13233
if context is an instance of Context class .
0
example# 13234
return context .
0
example# 13235
return an instance of RequestContext class , created with 3 arguments : self._request [ self . _request ] , context and current_app set to self._current_app [ self . _current_app ] .
0
example# 13236
derive the class TokenBase from the object base class .
0
example# 13237
id is None .
0
example# 13238
value is None .
0
example# 13239
first and second are None .
0
example# 13240
define the method nud with 2 arguments : self and parser .
0
example# 13241
raise an exception parser.error_class [ parser . error_class ] with an argument string _STR:0_ ,
1
"Not expecting '%s' in this position in if tag." ||| _STR:0_
example# 13242
where ' % s ' is replaced with self.id [ self . id ] . define the method led with 3 arguments : self , left and parser .
0
example# 13243
raise an exception parser.error_class [ parser . error_class ] with an argument string _STR:0_ ,
1
"Not expecting '%s' as infix operator in if tag." ||| _STR:0_
example# 13244
where ' % s ' is replaced with self.id [ self . id ] . define the method display with an argument self .
0
example# 13245
return self.id [ self . id ] .
0
example# 13246
define the method __repr__ with an argument self .
0
example# 13247
for x in a list containing 3 elements : self.id [ self . id ] , self.first [ self . first ] and self.second [ self . second ] , if x is not None ,
0
example# 13248
convert x into a string and append it to a list , substitute the resulting list for out . join elements of out into a string , separated with whitespaces , append _STR:0_ to it , append the result to _STR:1_ , return it .
2
')' ||| _STR:0_
'(' ||| _STR:1_
example# 13249
define the function infix with 2 arguments bp and func .
0
example# 13250
derive the class Operator from the base class TokenBase .
0
example# 13251
substitute bp for lbp .
0
example# 13252
define the method led with 3 arguments self , left and parser .
0
example# 13253
substitute left for self.first [ self . first ] .
0
example# 13254
call the method parser.expression [ parser . expression ] with an argument bp , substitute it for self.seconds [ self . seconds ] .
0
example# 13255
return self .
0
example# 13256
define the method eval with 2 arguments self and context .
0
example# 13257
try ,
0
example# 13258
call the function func with 3 arguments : context , self.first [ self . first ] and self.second [ self . second ] , return the result .
0
example# 13259
if Exception exception is caught ,
0
example# 13260
return boolean False .
0
example# 13261
return Operator .
0
example# 13262
define the function prefix with 2 arguments bp and func .
0
example# 13263
derive the class Operator from the base class TokenBase .
0
example# 13264
substitute bp for lbp .
0
example# 13265
define the method nud with 2 arguments self and parser .
0
example# 13266
call the method parser.expression [ parser . expression ] with an argument bp , substitute the result for self.first [ self . first ] .
0
example# 13267
self.second [ self . second ] is None .
0
example# 13268
return self .
0
example# 13269
define the method evalu with 2 arguments self and context .
0
example# 13270
try ,
0
example# 13271
call the function func with 2 arguments : context and self.first [ self . first ] , return the result .
0
example# 13272
if Exception exception is caught ,
0
example# 13273
return boolean False .
0
example# 13274
return Operator .
0
example# 13275
OPERATORS is an dictionary with 12 initial entries : result of the function inflix called with 2 arguments , integer 6 ,
0
example# 13276
and lambda function with 3 arguments context , x and y , returns boolean True if x.eval [ x . eval ] ( context ) or y.eval [ y . eval ] ( context ) is True , for _STR:0_ , result of the function inflix called with 2 arguments , integer 7 , and lambda function with 3 arguments context , x and y , returns boolean True if x.eval [ x . eval ] ( context ) and y.eval [ y . eval ] ( context ) is True for _STR:1_ , result of the function prefix called with 2 arguments , integer 8 , and lambda function with 2 arguments context and x , returns boolean True if x.eval [ x . eval ] ( context ) is True for _STR:2_ , result of the function inflix called with 2 arguments , integer 9 , and lambda function with 2 arguments context and x , returns boolean True if x.eval [ x . eval ] ( context ) is contained in y.eval [ y . eval ] ( context ) for _STR:3_ , result of the function inflix called with 2 arguments , integer 9 , and lambda function with 2 arguments context and x , returns boolean True if x.eval [ x . eval ] ( context ) is not contained in y.eval [ y . eval ] ( context ) , for _STR:4_ , result of the function inflix called with 2 arguments , integer 10 , and lambda function with 3 arguments context , x and y , returns boolean True if x.eval [ x . eval ] ( context ) equals y.eval [ y . eval ] ( context ) for _STR:5_ , result of the function inflix called with 2 arguments , integer 10 , and lambda function with 3 arguments context , x and y , returns boolean True if x.eval [ x . eval ] ( context ) equals y.eval [ y . eval ] ( context ) for _STR:6_ , result of the function inflix called with 2 arguments , integer 10 , and lambda function with 3 arguments context , x and y , returns boolean True if x.eval [ x . eval ] ( context ) doesnt equals y.eval [ y . eval ] ( context ) for _STR:7_ , result of the function inflix called with 2 arguments , integer 10 and , lambda function with 3 arguments context , x and y , returns boolean True if x.eval [ x . eval ] ( context ) is greater than y.eval [ y . eval ] ( context ) for _STR:8_ , result of the function inflix called with 2 arguments , integer 10 and and lambda function with 3 arguments context , x and y , returns boolean True if x.eval [ x . eval ] ( context ) is greater than or equal to y.eval [ y . eval ] ( context ) for _STR:9_ , result of the function inflix called with 2 arguments , integer 10 and and lambda function with 3 arguments context , x and y , returns boolean True if x.eval [ x . eval ] ( context ) is smaller than y.eval [ y . eval ] ( context ) for _STR:10_ , result of the function inflix called with 2 arguments , integer 10 and and lambda function with 3 arguments context , x and y , returns boolean True if x.eval [ x . eval ] ( context ) is smaller than or equal to y.eval [ y . eval ] ( context ) for _STR:11_ , call the function OPERATORS.items [ OPERATORS . items ] , for every key and op in result ,
12
'!=' ||| _STR:7_
'>' ||| _STR:8_
'not' ||| _STR:2_
'>=' ||| _STR:9_
'==' ||| _STR:6_
'in' ||| _STR:3_
'not in' ||| _STR:4_
'<=' ||| _STR:11_
'and' ||| _STR:1_
'or' ||| _STR:0_
'=' ||| _STR:5_
'<' ||| _STR:10_
example# 13277
substitute key for op.id [ op . id ] .
0
example# 13278
derive the class Literal from the TokenBase base class .
0
example# 13279
id is a string _STR:0_ .
1
"literal" ||| _STR:0_
example# 13280
lbp is integer 0 .
0
example# 13281
define the method __init__ with 2 arguments : self and value .
0
example# 13282
substitute value for self.value [ self . value ] .
0
example# 13283
define the method display with an argument self .
0
example# 13284
return printable representation of self.value [ self . value ] .
0
example# 13285
define the method nud with 2 arguments : self and parser .
0
example# 13286
return self .
0
example# 13287
define the method eval with 2 arguments : self and context .
0
example# 13288
return self.value [ self . value ] .
0
example# 13289
define the method __repr__ with an argument self .
0
example# 13290
return string _STR:0_ , replace ' % s ' with self.if [ self . if ] and _STR:1_ with self.value [ self . value ] .
2
"(%s %r)" ||| _STR:0_
'%r' ||| _STR:1_
example# 13291
derive the class EndToken from the TokenBase base class .
0
example# 13292
lbp is an integer 0 .
0
example# 13293
define the method nud with 2 arguments : self and parser .
0
example# 13294
raise an exception parser.error_class [ parser . error_class ] with an argument string _STR:0_ .
1
"Unexpected end of expression in if tag." ||| _STR:0_
example# 13295
EndToken is an instance of EndToken class .
0
example# 13296
derive the class IfParser from the object base class .
0
example# 13297
substitute ValueError for error_class .
0
example# 13298
define the method __init__ with 2 arguments : self and tokens .
0
example# 13299
substitute length of tokens for l .
0
example# 13300
mapped_tokens is an empty list .
0
example# 13301
i is integer 0 .
0
example# 13302
while i is smaller than l ,
0
example# 13303
substitute i-th element of tokens for token .
0
example# 13304
if token equals a string _STR:0_ and i incremented by 1 is lesser than l ,
1
"not" ||| _STR:0_
example# 13305
and element of tokens at i incremented by 1 index equals a string _STR:0_ , token is a string _STR:1_ .
2
"not in" ||| _STR:1_
"in" ||| _STR:0_
example# 13306
increment i by integer 1 .
0
example# 13307
call the method self.translate_token [ self . translate_token ] with an argument token , append the result to mapped_tokens .
0
example# 13308
increment i by integer 1 .
0
example# 13309
substitute mapped_tokens for self.tokens [ self . tokens ] .
0
example# 13310
self.pos [ self . pos ] is integer 0 .
0
example# 13311
call the method self.next_token [ self . next_token ] , substitute the result for self.current_token [ self . current_token ] .
0
example# 13312
define the method translate_token with 2 arguments : self and token .
0
example# 13313
try ,
0
example# 13314
substitute OPERATORS dictionary element under token key for op .
0
example# 13315
if KeyError and TypeError exceptions are caught ,
0
example# 13316
call the function self.create_var [ self . create_var ] with an argument token , return the result .
0
example# 13317
if not ,
0
example# 13318
call the function op , return the result .
0
example# 13319
define the method next_token with an argument self .
0
example# 13320
if self.pos [ self . pos ] is greater than or equal to self.tokens [ self . tokens ] ,
0
example# 13321
return EndToken .
0
example# 13322
if not ,
0
example# 13323
substitute element at self.pos [ self . pos ] index of self.tokens [ self . tokens ] for retval .
0
example# 13324
increment self.pos [ self . pos ] by integer 1 .
0
example# 13325
return retval .
0
example# 13326
define the method parse with an argument self .
0
example# 13327
call the method self.expression [ self . expression ] , substitute the result for retval .
0
example# 13328
if self.current_token [ self . current_token ] is not EndToken ,
0
example# 13329
raise an exception self.error_class [ self . error_class ] with an argument string _STR:0_Unused ' % s ' at end of if expression '' ,
1
"" ||| _STR:0_
example# 13330
where ' % s ' is replaced with result of the method self.current_token.display [ self . current_token . display ] . return retval .
0
example# 13331
define the method expression with 2 arguments : self and rbp set to integer 0 .
0
example# 13332
substitute self.current_token [ self . current_token ] for t .
0
example# 13333
call the method self.next_token [ self . next_token ] , substitute the result for self.current_token [ self . current_token ] .
0
example# 13334
call the method t.nud [ t . nud ] with an argument self , substitute the result for left .
0
example# 13335
while rbp is smaller than self.current_token.lbp [ self . current_token . lbp ] ,
0
example# 13336
substitute self.current_token [ self . current_token ] for t .
0
example# 13337
call the method self.next_token [ self . next_token ] , substitute the result for self.current_token [ self . current_token ] .
0
example# 13338
call the method t.led [ t . led ] with 2 arguments left and self .
0
example# 13339
return left .
0
example# 13340
define the method create_var with 2 arguments : self and value .
0
example# 13341
return an instance of Literal class , created with an argumen value .
0
example# 13342
from __future__ import unicode_literals into default name space .
0
example# 13343
from lib2to3 import fixer_base into default name space .
0
example# 13344
from lib2to3.fixer_util [ lib2to3 . fixer_util ] import find_indentation , Name , syms and touch_import into default name space .
0
example# 13345
from lib2to3.pgen2 [ lib2to3 . pgen2 ] import token into default name space .
0
example# 13346
from lib2to3.pytree [ lib2to3 . pytree ] import Leaf and Node into default name space .
0
example# 13347
derive the class FixUnicode from the base class fixer_base.BaseFix [ fixer_base . BaseFix ] .
0
example# 13348
BM_compatible is boolean True .
0
example# 13349
PATTERN is a string _STR:0_ .
1
"classdef< 'class' any+ ':'suite< any*funcdef< 'def' unifunc='__unicode__'parameters< '(' NAME ')' > any+ >any* > >" ||| _STR:0_
example# 13350
define the method transform with 3 arguments : self , node and results .
0
example# 13351
substitute value under the _STR:0_ key of the results dictionary for unifunc .
1
"unifunc" ||| _STR:0_
example# 13352
strfunc is an instance of a class Name , created with 2 arguments : string _STR:0_ and prefix as unifunc.prefix [ unifunc . prefix ] .
1
"__str__" ||| _STR:0_
example# 13353
call the method unifunc.replace [ unifunc . replace ] with an argument strfunc .
0
example# 13354
call the method node.clone [ node . clone ] , substitute the result for klass .
0
example# 13355
call the method find_indentation with an argument node , append the result to newline , substitute the result for klass.prefix [ klass . prefix ] .
0
example# 13356
decorator is an instance of class Node , created with 2 arguments : instance of Leaf class created with 2 arguments : token.AT [ token . AT ] and `` @ ' ,
0
example# 13357
and instance of Name class created with an argument string _STR:0_ . decorated is an instance of class Node , created with 3 arguments : syms.decorated [ syms . decorated ] , list with 2 arguments : decorator and klass ,
1
'python_2_unicode_compatible' ||| _STR:0_
example# 13358
and prefix as node.prefix [ node . prefix ] . call the method node.replace [ node . replace ] with an argument decorated .
0
example# 13359
call the function touch_import with 3 arguments : string _STR:0_ , string _STR:1_ and decorated .
2
'django.utils.encoding' ||| _STR:0_
'python_2_unicode_compatible' ||| _STR:1_
example# 13360
import module os .
0
example# 13361
import module sta .
0
example# 13362
import module sys .
0
example# 13363
import module tempfile .
0
example# 13364
from os.path [ os . path ] import join , normcase , normpath , abspath , isabs , sep and dirname into default name space .
0
example# 13365
from django.utils.encoding [ django . utils . encoding ] import force_text into default name space .
0
example# 13366
from django.utils [ django . utils ] import six into default name space .
0
example# 13367
try ,
0
example# 13368
substitute WindowsError for WindowsError .
0
example# 13369
if NameError exception is caught ,
0
example# 13370
derive class WindowsError from Exception base class .
0
example# 13371
do nothing .
0
example# 13372
if six.PY2 [ six . PY2 ] is true ,
0
example# 13373
call the function sys.getfilesystemencoding [ sys . getfilesystemencoding ] if it evaluates to true , substitute its result for fs_encoding ,
0
example# 13374
otherwise call the function sys.getdefaultencoding [ sys . getdefaultencoding ] and substitute its result for fs_encoding . if six.PY3 [ six . PY3 ] is true or os.name [ os . name ] equals a string _STR:0_ ,
1
'nt' ||| _STR:0_
example# 13375
substitute abspath for abspathu .
0
example# 13376
if not ,
0
example# 13377
define the function abspathu with an argument path .
0
example# 13378
call the function isabs with an argument path , if it evaluates to false ,
0
example# 13379
get the unicode representation of current working directory , join it and path into a string , substitute the result for path .
0
example# 13380
call the function normpath with an argument path , return the result .
0
example# 13381
define the function upath with an argument path .
0
example# 13382
if six.PY2 [ six . PY2 ] is true and path is not an instance of six.text_type [ six . text_type ] type ,
0
example# 13383
call the method path.decode [ path . decode ] with an argument fs_encoding , return the result .
0
example# 13384
return path .
0
example# 13385
define the function npath with an argument path .
0
example# 13386
if six.PY2 [ six . PY2 ] is true and path is not an instance of byes type ,
0
example# 13387
call the method path.encode [ path . encode ] with an argument fs_encoding , return the result .
0
example# 13388
return path .
0
example# 13389
define the function safe_join with 2 arguments base and unpacked dictionary paths .
0
example# 13390
call the function force_text with an argument base , substitute the result for base .
0
example# 13391
paths is a list containing results of the function force_text called with an argument p , for every p in paths .
0
example# 13392
join base an unpacked list paths into a string , get the absolute path in unicode representation of the result , substitute the result for final_path .
0
example# 13393
get the unicode representation of the absolute path of base , substitute it for base_path .
0
example# 13394
if return value of the function normcase called with an argument final_path doesnt starts with result of the function normcase ,
0
example# 13395
called with sep appended to base_path as an argument and results of the function normcase called twice with final_path , and base_pah are not equal and directory name of the result of the function normcase called with an argument base_path , if not equal to the result of the function normcase called with an argument base_path . raise an ValueError with an argument string _STR:0_ ,
1
'The joined path (%s) is located outside of the base path component (%s)' ||| _STR:0_
example# 13396
where ' % s ' is replaced with final_path and base_path . return final_path .
0
example# 13397
define the function rmtree_errorhandler with 3 arguments func , path and exc_info .
0
example# 13398
substitute fist and second element of exc_info for exctype and value , respectively .
0
example# 13399
if exctype is not WindowsError or string _STR:0_ is not contained in value converted into a string ,
1
'Access is denied' ||| _STR:0_
example# 13400
raise an exception .
0
example# 13401
call the function os.stat [ os . stat ] with an argument path , perform bitwise and on 2 operands st_mode field of the result and stat.S_IREAD [ stat . S_IREAD ] ,
0
example# 13402
if it is not equal to stat.S_IREAD [ stat . S_IREAD ] , raise an exception .
0
example# 13403
change access mode of path to stat.S_IWRITE [ stat . S_IWRITE ] mode .
0
example# 13404
call the function func with an argument path .
0
example# 13405
define the method symlinks_supported .
0
example# 13406
call the function tempfile.mkdtemp [ tempfile . mkdtemp ] , substitute the result for tmpdir .
0
example# 13407
join tmpdir and sting _STR:0_ into a file path name , substitute it for original_path .
1
'original' ||| _STR:0_
example# 13408
join tmpdir and sting _STR:0_ into a file path name , substitute it for symlink_path .
1
'symlink' ||| _STR:0_
example# 13409
make a directory named original_path .
0
example# 13410
try ,
0
example# 13411
make a system symbolic link between original_path and symlink_path .
0
example# 13412
supported is boolean True .
0
example# 13413
if OSError , NotImplementedError or AttributeError exceptions are caught ,
0
example# 13414
supported is boolean False .
0
example# 13415
if not ,
0
example# 13416
remove symlink_path file .
0
example# 13417
finally perform ,
0
example# 13418
remove original_path directory .
0
example# 13419
remove tmpdir directory .
0
example# 13420
return supported .
0
example# 13421
import module os .
0
example# 13422
import module shutil .
0
example# 13423
import module tarfile .
0
example# 13424
import module zipfile .
0
example# 13425
from django.utils [ django . utils ] import six into default name space .
0
example# 13426
derive the class ArchiveException from the Exception base class .
0
example# 13427
derive the class UnrecognizedArchiveFormat from the ArchiveException base class .
0
example# 13428
define the function extract with 2 arguments path and to_path set to empty string .
0
example# 13429
instantiate Archive class with an argument path , with it renamed to archive , perform ,
0
example# 13430
call the method archive.extract [ archive . extract ] with an argument to_path .
0
example# 13431
derive the class Archive from the object base class .
0
example# 13432
define the method __init__ with 2 arguments self and file .
0
example# 13433
call the method self._archive_cls [ self . _archive_cls ] with an argument file , call the result with an argument file , substitute the result for self._archive [ self . _archive ] .
0
example# 13434
static method ,
0
example# 13435
define the method _archive_cls with an argument file .
0
example# 13436
cls is None .
0
example# 13437
if file is an instance of six.string_types [ six . string_types ] .
0
example# 13438
substitute file for filename .
0
example# 13439
if not ,
0
example# 13440
try ,
0
example# 13441
substitute file.name [ file . name ] for filename .
0
example# 13442
if AttributeError exception is caught .
0
example# 13443
raise an UnrecognizedArchiveFormat exception with an argument string _STR:0_ .
1
"File object not a recognized archive format." ||| _STR:0_
example# 13444
convert filename to lowercase , use the result as an argument for the call to the function os.path.splitext [ os . path . splitext ] ,
0
example# 13445
substitute the result for base and tail_ext . get the value under the tail_ext key of the extension_map dictionary , substitute it for cls .
0
example# 13446
if cls is false ,
0
example# 13447
call the method os.path.splitext [ os . path . splitext ] with an argument base , substitute the result for base and ext , respectively .
0
example# 13448
get the value under the ext key of the extension_map dictionary , substitute it for cls .
0
example# 13449
if cls is false ,
0
example# 13450
raise an UnrecognizedArchiveFormat exception with an argument string _STR:0_ ,
1
"Path not a recognized archive format: %s" ||| _STR:0_
example# 13451
where ' % s ' is replaced with filename . return cls .
0
example# 13452
define the method __enter__ with an argument self .
0
example# 13453
return self .
0
example# 13454
define the method __exit__ with 4 arguments : self , exc_type , exc_value and traceback .
0
example# 13455
call the method self.close [ self . close ] .
0
example# 13456
define the method extract with 2 arguments : self and to_path set to an empty string .
0
example# 13457
call the method self._archive.extract [ self . _archive . extract ] with an argument to_path .
0
example# 13458
define the method list with an argument self .
0
example# 13459
call the method self._archive.list [ self . _archive . list ] .
0
example# 13460
define the method close with an argument self .
0
example# 13461
call the method self._archive.close [ self . _archive . close ] .
0
example# 13462
derive the class BaseArchive from the object base class .
0
example# 13463
define the method split_leading_dir with 2 arguments self and path .
0
example# 13464
convert path to a string , substitute the result for path .
0
example# 13465
strip path of all leading _STR:0_ and '\\ ' characters , substitute the result for path .
1
'/' ||| _STR:0_
example# 13466
if _STR:0_ is contained in path , and only if '\\ ' is contained in path and index of the first occurrence of _STR:0_ in path is lesser than ,
2
'\\' is contained in path and index of the first occurrence of ' ||| _STR:1_
'/' ||| _STR:0_
example# 13467
index of the first occurrence of _STR:0_\\_STR:1_/ ' character , return the result .
2
'\\' in path, or alternatively if ' ||| _STR:0_
' is not contained in path,   split path in two parts by ' ||| _STR:1_
example# 13468
otherwise if '\\ ' is contained in path ,
0
example# 13469
split path in two parts by '\\ ' string , return the result .
0
example# 13470
if not ,
0
example# 13471
return path an an empty string .
0
example# 13472
define the method has_leading_dir with 2 arguments self and paths .
0
example# 13473
common_prefix is None .
0
example# 13474
for every path in paths ,
0
example# 13475
call the method self.split_leading_dir [ self . split_leading_dir ] with an argument path , assign the result to prefix and rest , respectively .
0
example# 13476
if prefix is false ,
0
example# 13477
return boolean False .
0
example# 13478
otherwise if common_prefix is None ,
0
example# 13479
substitute prefix for common_prefix .
0
example# 13480
otherwise if prefix is not equal to common_prefix ,
0
example# 13481
return boolean False .
0
example# 13482
return boolean True .
0
example# 13483
define the method list with an argument self .
0
example# 13484
raise an NotImplementedError exception with an argument string _STR:0_ .
1
'subclasses of BaseArchive must provide an extract() method' ||| _STR:0_
example# 13485
define the method list with an argument self .
0
example# 13486
raise an NotImplementedError exception with an argument string _STR:0_ .
1
'subclasses of BaseArchive must provide a list() method' ||| _STR:0_
example# 13487
derive the class TarArchive from the BaseArchive base class .
0
example# 13488
define the method __init__ with 2 arguments self and file .
0
example# 13489
call the method tarfile.open [ tarfile . open ] with an argument file , substitute the result for self._archive [ self . _archive ] .
0
example# 13490
define the method __init__ with 3 arguments self and unpacked list args and unpacked dictionary kwargs .
0
example# 13491
define the method list with 3 arguments : self and unpacked list args and unpacked dictionary kwargs .
0
example# 13492
define the method extract with 2 arguments self and to_path .
0
example# 13493
members is a list with elements member for every member in the result of the function self._archive.getmembers [ self . _archive . getmembers ] ,
0
example# 13494
only if member.name [ member . name ] is not equal to string _STR:0_ . call the method self.has_leading_dir [ self . has_leading_dir ] with an argument list , with elements x.name [ x . name ] for every x in members , substitute the result for leading .
1
'pax_global_header' ||| _STR:0_
example# 13495
for every member in members ,
0
example# 13496
substitute member.name [ member . name ] for name .
0
example# 13497
if leading is true ,
0
example# 13498
call the method self.split_leading_dir [ self . split_leading_dir ] with an argument name , substitute the first element of result for name .
0
example# 13499
join to_path and name into a valid system path , substitute the result for filename .
0
example# 13500
if member is a directory ,
0
example# 13501
if filename is true and filename path doesnt exist ,
0
example# 13502
create directories from the elements in filename .
0
example# 13503
if not ,
0
example# 13504
try ,
0
example# 13505
call the method self._archive.extractfile [ self . _archive . extractfile ] with an argument member , substitute the result for extracted .
0
example# 13506
if KeyError or AttributeError , renamed to exc , exceptions are caught ,
0
example# 13507
print a string _STR:0_ , where ' % s ' is substituted with : name , member.name [ member . name ] and exc , respectively .
1
"In the tar file %s the member %s is invalid: %s" ||| _STR:0_
example# 13508
if not ,
0
example# 13509
get the directory name of filename , substitute it for dirname .
0
example# 13510
if dirname is true and dirname directory doesnt exists ,
0
example# 13511
create directories from the elements in filename .
0
example# 13512
open filename file in write mode , with the file descriptor renamed to outfile , perform ,
0
example# 13513
call the method shutil.copyfileobj [ shutil . copyfileobj ] with 2 arguments : extracted and outfile .
0
example# 13514
finally ,
0
example# 13515
if extracted is true ,
0
example# 13516
call the method extracted.close [ extracted . close ] .
0
example# 13517
define the method close with an argument self .
0
example# 13518
call the method self._archive.close [ self . _archive . close ] .
0
example# 13519
derive the class ZipArchive from the BaseArchive base class .
0
example# 13520
define the method __init__ with 2 arguments self and file .
0
example# 13521
call the method zipfile.ZipFile [ zipfile . ZipFile ] with an argument self , substitute the result for self._archive [ self . _archive ] .
0
example# 13522
define the method list with 3 arguments : self and unpacked list args and unpacked dictionary kwargs .
0
example# 13523
call the method self._archive.printdir [ self . _archive . printdir ] with 2 arguments : unpacked list args and unpacked dictionary kwargs .
0
example# 13524
define the method extract with 2 arguments self and to_path .
0
example# 13525
call the method self._archive.namelist [ self . _archive . namelist ] , substitute the result for namelist .
0
example# 13526
call the method self.has_leading_dir [ self . has_leading_dir ] with an argument namelist , substitute the result for leading .
0
example# 13527
for every name in namelist ,
0
example# 13528
call the method self._archive.read [ self . _archive . read ] with an argument name , substitute the result for data .
0
example# 13529
if leading is true ,
0
example# 13530
call the method self.split_leading_dir [ self . split_leading_dir ] with an argument name , substitute the second element of the result for name .
0
example# 13531
join to_path and name into a file path , substitute the result for filename .
0
example# 13532
get the directory name of filename , substitute the result for dirname .
0
example# 13533
if dirname is true and dirname path doesnt exists ,
0
example# 13534
create directories from the elements in filename .
0
example# 13535
if filename ends with _STR:0_ or with '\\ ' ,
1
'/' ||| _STR:0_
example# 13536
if filename path doesnt exists ,
0
example# 13537
create directories from the elements in filename .
0
example# 13538
if not ,
0
example# 13539
open filename file in write mode , with the file descriptor renamed to outfile , perform ,
0
example# 13540
write data bytes to outfile .
0
example# 13541
define the method close with an argument self .
0
example# 13542
call the method self._archive.close [ self . _archive . close ] .
0
example# 13543
extension_map is a dictioanry with 6 initial elntries : TarArchive for _STR:0_ , TarArchive for _STR:1_ , TarArchive for _STR:2_ ,
3
'.tar' ||| _STR:0_
'.tar.gz' ||| _STR:2_
'.tar.bz2' ||| _STR:1_
example# 13544
from __future__ import absolute_import into default name space .
0
example# 13545
import module os .
0
example# 13546
import module signal .
0
example# 13547
import module sys .
0
example# 13548
import module time .
0
example# 13549
import module traceback .
0
example# 13550
from django.apps [ django . apps ] import apps into default name space .
0
example# 13551
from django.conf [ django . conf ] import settings into default name space .
0
example# 13552
from django.core.signals [ django . core . signals ] import request_finished into default name space .
0
example# 13553
try ,
0
example# 13554
from django.utils.six.moves [ django . utils . six . moves ] import _thread as thread into default name space .
0
example# 13555
if imoportError exception is caught ,
0
example# 13556
from django.utils.six.moves [ django . utils . six . moves ] import _dummy_thread as thread into default name space .
0
example# 13557
try ,
0
example# 13558
import threading module .
0
example# 13559
if ImportError exception is caught ,
0
example# 13560
do nothing .
0
example# 13561
try ,
0
example# 13562
import termios module .
0
example# 13563
if ImportError exception is caught ,
0
example# 13564
termios is None .
0
example# 13565
USE_INOTIFY is boolean False .
0
example# 13566
try ,
0
example# 13567
import pyinotify module .
0
example# 13568
call the method pyinotify.INotifyWrapper.create [ pyinotify . INotifyWrapper . create ] , on the return value call the inotify_init method , substitute the result for fd .
0
example# 13569
if fd is greater or equal to integer 0 .
0
example# 13570
USE_INOTIFY is boolean True .
0
example# 13571
close fd file descriptor .
0
example# 13572
if ImportError exception is caught ,
0
example# 13573
do nothing .
0
example# 13574
RUN_RELOADER is boolean True .
0
example# 13575
FILE_MODIFIED is integer 1 .
0
example# 13576
I18N_MODIFIED is integer 2
0
example# 13577
_mtimes is an empty dictionary .
0
example# 13578
_win is a tuple containing 1 initial boolean : True is sys.platform [ sys . platform ] equals to string _STR:0_ , False otherwise .
1
"win32" ||| _STR:0_
example# 13579
_error_files is an empty list .
0
example# 13580
_cached_modules is an empty set .
0
example# 13581
_cached_filenames is an empty list .
0
example# 13582
define the function gen_filenames with an argument only_new defaulting to boolean False .
0
example# 13583
declare that we use global variables cached_modules and _cached_filenames in this function .
0
example# 13584
module_values is a set created from the elements of sys.modules.values [ sys . modules . values ] method return value .
0
example# 13585
if _cached_modules equals to module_values ,
0
example# 13586
if only_new is true ,
0
example# 13587
return an empty list .
0
example# 13588
if not ,
0
example# 13589
return _cached_filenames .
0
example# 13590
subtract _cached_modules from module_values , assign the result to new_modules .
0
example# 13591
create the list of paths from which filename module was included for every filename in new_modules , only is filename has _STR:0_ attribute , substitute the resulting list for new_filenames .
1
'__file__' ||| _STR:0_
example# 13592
if _cached_filenames is empty and settings.USE_I18N [ settings . USE_I18N ] is True ,
0
example# 13593
return the directory name two directories up from the __file__ path , join it with _STR:0_ and _STR:1_ into valid path , separated by _STR:2_ , basedirs is a list containing 2 elements : previous result and string _STR:1_ .
3
'locale' ||| _STR:1_
'/' ||| _STR:2_
'conf' ||| _STR:0_
example# 13594
for app_config in reversed list of apps.get_app_configs [ apps . get_app_configs ] ( ) elements ,
0
example# 13595
join app_config.path [ app_config . path ] and _STR:0_ into a valid directory path , separated by _STR:1_ , append it to basedirs .
2
'locale' ||| _STR:0_
'/' ||| _STR:1_
example# 13596
extend basedirs list with settings.LOCALE_PATHS [ settings . LOCALE_PATHS ] .
0
example# 13597
replace all the elements of the basedir list by its corresponding absolute directory path , only is that directory exists .
0
example# 13598
for every basedir in basedirs ,
0
example# 13599
for every dirpath , dirnames and locale_filenames in directory tree starting at the basedir directory .
0
example# 13600
for every filenam in locale_filenames ,
0
example# 13601
if filename ends with string _STR:0_ ,
1
'.mo' ||| _STR:0_
example# 13602
join dirpath and filename into a path separated by _STR:0_ , append it to new_filenames .
1
'/' ||| _STR:0_
example# 13603
if only_new is True ,
0
example# 13604
substitute new_filenames for filelist .
0
example# 13605
if not ,
0
example# 13606
sum _cached_filenames , new_filenames and _error_files , store the result in filelist .
0
example# 13607
filenames is an empty list .
0
example# 13608
for every filename is filelist ,
0
example# 13609
if filename is empty ,
0
example# 13610
skip this loop iteration ,
0
example# 13611
if filename ends with string _STR:0_ or it ends with _STR:1_ ,
2
".pyo" ||| _STR:1_
".pyc" ||| _STR:0_
example# 13612
truncate the last element of filename .
0
example# 13613
if filename ends with string _STR:0_ ,
1
"$py.class" ||| _STR:0_
example# 13614
truncate last 9 elements of filename and append it string _STR:0_ .
1
".py" ||| _STR:0_
example# 13615
if file filename exists ,
0
example# 13616
append filename to filenames .
0
example# 13617
add elements from new_modules set to _cached_modules set .
0
example# 13618
append new_filenames to _cached_filenames .
0
example# 13619
return filenames .
0
example# 13620
define the function reset_translation .
0
example# 13621
import gettext module .
0
example# 13622
from django.utils.translation [ django . utils . translation ] import trans_real into default namespace .
0
example# 13623
gettext._translations [ gettext . _translations ] is an empty dictionary .
0
example# 13624
trans_real._translations [ trans_real . _translations ] is an empty dictionary .
0
example# 13625
trans_real._default [ trans_real . _default ] is None .
0
example# 13626
call the threading.local [ threading . local ] method , assign the result to trans_real._active [ trans_real . _active ] .
0
example# 13627
define the function inotify_code_changed .
0
example# 13628
derive the EventHandler class from the base class pyinotify.ProcessEvent [ pyinotify . ProcessEvent ] .
0
example# 13629
modified_code is None .
0
example# 13630
define the method process_default with self class instance and event as arguments .
0
example# 13631
if event.path [ event . path ] ends with string _STR:0_ ,
1
'.mo' ||| _STR:0_
example# 13632
EventHandler.modified_code [ EventHandler . modified_code ] is I18N_MODIFIED .
0
example# 13633
if not ,
0
example# 13634
EventHandler.modified_code [ EventHandler . modified_code ] is FILE_MODIFIED .
0
example# 13635
call the pyinotify.WatchManager [ pyinotify . WatchManager ] method , assign the result to wm .
0
example# 13636
call the method pyinotify.Notifier [ pyinotify . Notifier ] with wm and EventHandler ( ) as arguments , assign the result to notifier .
0
example# 13637
define the method update_watch with sender defaulting to None and dictionary pair of elements kwargs .
0
example# 13638
if sender is true and sender attribute _STR:0_ is also True ,
1
'handles_files' ||| _STR:0_
example# 13639
return nothing .
0
example# 13640
perform the bitwise or operation on the next 6 operands pyinotify.IN_MODIFY [ pyinotify . IN_MODIFY ] pyinotify.IN_DELETE [ pyinotify . IN_DELETE ] , pyinotify.IN_ATTRIB [ pyinotify . IN_ATTRIB ] ,
0
example# 13641
pyinotify.IN_MOVED_FROM [ pyinotify . IN_MOVED_FROM ] , pyinotify.IN_MOVED_TO [ pyinotify . IN_MOVED_TO ] and pyinotify.IN_CREATE [ pyinotify . IN_CREATE ] , store the result in mask . for every path in return value of the call to the function gen_filenames with argument only_new set to boolean True ,
0
example# 13642
call the method wm.add_watch [ wm . add_watch ] with path and mask as arguments .
0
example# 13643
call the method request_finished.connect [ request_finished . connect ] with argument update_watch .
0
example# 13644
call the method update_watch .
0
example# 13645
call the method notifier.check_events [ notifier . check_events ] with argument timeout set to None .
0
example# 13646
call the method notifier.read_events [ notifier . read_events ] .
0
example# 13647
call the method notifier.process_events [ notifier . process_events ] .
0
example# 13648
call the method notifier.stop [ notifier . stop ] .
0
example# 13649
return EventHandler.modified_code [ EventHandler . modified_code ] .
0
example# 13650
define the function code_changed .
0
example# 13651
use the global variables _mtimes and _win in this function .
0
example# 13652
for every filename in gen_filenames ( ) ,
0
example# 13653
call the os.stat [ os . stat ] function with argument filename , store the return value in stat .
0
example# 13654
substitute stat.st_mtime [ stat . st_mtime ] for mtime .
0
example# 13655
if _win is true ,
0
example# 13656
decrement mtime by stat.st_ctime [ stat . st_ctime ] .
0
example# 13657
if filename is not contained in _mtimes ,
0
example# 13658
substitute mtime for the value under the filename key of _mtimes dictionary .
0
example# 13659
skip this loop iteration .
0
example# 13660
if mtime is different than the value of dictionary _mtimes under the key filename ,
0
example# 13661
_mtimes is an empty dictionary .
0
example# 13662
try ,
0
example# 13663
remove the first occurrence of the filename value in the _error_files list .
0
example# 13664
if ValueError exception is caught ,
0
example# 13665
do nothing .
0
example# 13666
if filename ends with string _STR:0_ return I18N_MODIFIED , otherwise return FILE_MODIFIED .
1
'.mo' ||| _STR:0_
example# 13667
return boolean False .
0
example# 13668
define the function check_errors with argument fn .
0
example# 13669
define the function wrapper with list args , and dictionary pair of values kwargs as arguments .
0
example# 13670
try ,
0
example# 13671
call the function fn with list of arguments args and dictionary of argument values kwargs .
0
example# 13672
if ImportError , IndentationError , NameError , SyntaxError , TypeError or AttributeErrorexception is caught ,
0
example# 13673
call the sys.exc_info [ sys . exc_info ] function , assign the result to et , ev and tb , respectively .
0
example# 13674
if _STR:0_ attribute of ev is None ,
1
'filename' ||| _STR:0_
example# 13675
call the traceback.extract_tb [ traceback . extract_tb ] method with argument tb , substitute the first element of last row of the result to filename .
0
example# 13676
if not ,
0
example# 13677
substitute ev.filename [ ev . filename ] for filename .
0
example# 13678
if filename is not contained in _error_files ,
0
example# 13679
append filename to _error_files .
0
example# 13680
raise an exception .
0
example# 13681
return wrapper .
0
example# 13682
define ensure_echo_on function .
0
example# 13683
if termios is true ,
0
example# 13684
substitute sys.stdin [ sys . stdin ] for fd .
0
example# 13685
evaluate the fd.isatty [ fd . isatty ] method , if the result is true ,
0
example# 13686
call the method termios.tcgetattr [ termios . tcgetattr ] with argument fd , substitute the result for attr_list .
0
example# 13687
if fourth element of attr_list and termios.ECHO [ termios . ECHO ] are both true ,
0
example# 13688
perform binary or for operands : fourth element of_attr_list and termios.ECHO [ termios . ECHO ] , store the result in fourth element of attr_list .
0
example# 13689
if signal has an attribute _STR:0_ ,
1
'SIGTTOU' ||| _STR:0_
example# 13690
call the signal.signal [ signal . signal ] method with signal.SIGTTOU [ signal . SIGTTOU ] and signal.SIG_IGN [ signal . SIG_IGN ] as arguments , store the result in old_handler .
0
example# 13691
if not ,
0
example# 13692
old_handler is None .
0
example# 13693
call the method termios.tcsetattr [ termios . tcsetattr ] with fd , termios.TCSANOW [ termios . TCSANOW ] and attr_list , as arguments .
0
example# 13694
if old_handler is not None ,
0
example# 13695
call the method signal.signal [ signal . signal ] with signal.SIGTTOU [ signal . SIGTTOU ] and old_handler , as arguments .
0
example# 13696
define the function reloader_thread .
0
example# 13697
call the function ensure_echo_on .
0
example# 13698
if USE_INOTIFY is true ,
0
example# 13699
substitute inotify_code_changed for fn .
0
example# 13700
if not ,
0
example# 13701
substitute code_changed for fn .
0
example# 13702
while RUN_RELOADER is true .
0
example# 13703
assign the return value of the function fn to change .
0
example# 13704
if change equals to FILE_MODIFIED ,
0
example# 13705
call the function sys.exit [ sys . exit ] with argument integer 3 .
0
example# 13706
otherwise id change equals to I18N_MODIFIED ,
0
example# 13707
call the function reset_translations .
0
example# 13708
call the function time.sleep [ time . sleep ] with an argument integer 1 .
0
example# 13709
define the function restart_with_reloader .
0
example# 13710
endless loop ,
0
example# 13711
in string _STR:0_ replace ' % s ' with o for every o in sys.warnoptions [ sys . warnoptions ] , put the result into a list , append the list to a list containing sys.executable [ sys . executable ] , append sys.argv [ sys . argv ] to the end of the resulting list , substitute the result for args .
1
'-W%s' ||| _STR:0_
example# 13712
if sys.platform [ sys . platform ] equals to string _STR:0_ ,
1
"win32" ||| _STR:0_
example# 13713
args is a list containing arg surrounded by double quotes for every arg in args .
0
example# 13714
call the method os.environ.copy [ os . environ . copy ] , substitute the result for new_environ .
0
example# 13715
value under the _STR:0_ key of new_environ dictionary is a string _STR:1_ .
2
'true' ||| _STR:1_
"RUN_MAIN" ||| _STR:0_
example# 13716
call the function os.spawnve [ os . spawnve ] with os.P_WAIT [ os . P_WAIT ] , sys.executable [ sys . executable ] , args and new_environ as arguments , substitute the result for exit_code .
0
example# 13717
if exit_code is not equal to integer 3 .
0
example# 13718
return exit_code .
0
example# 13719
define the function python_reloader with main_func and kwargs as arguments .
0
example# 13720
if value under the _STR:0_ key of the os.environ [ os . environ ] dictionary equals to string _STR:1_ ,
2
"RUN_MAIN" ||| _STR:0_
"true" ||| _STR:1_
example# 13721
call the function thread.start_new_thread [ thread . start_new_thread ] with main_func , args and kwargs as arguments .
0
example# 13722
try ,
0
example# 13723
call the function reloader_thread .
0
example# 13724
if KeyboardInterrupt exception is caught ,
0
example# 13725
do nothing .
0
example# 13726
if not ,
0
example# 13727
try ,
0
example# 13728
call the function restart_with_reloader , substitute the return value for exit_code .
0
example# 13729
if exit_code is lesser than integer 0 ,
0
example# 13730
call the function os.kill [ os . kill ] with os.getpid [ os . getpid ] ( ) and negative exit_code as arguments .
0
example# 13731
if not ,
0
example# 13732
call the function sys.exit [ sys . exit ] with argument exit_code .
0
example# 13733
if KeyboardInterrupt exception is caught ,
0
example# 13734
do nothing ,
0
example# 13735
define the function jython_reloader with main_func , args and kwargs as arguments .
0
example# 13736
from _systemrestart import SystemRestart into default name space .
0
example# 13737
call the function thread.start_new_thread [ thread . start_new_thread ] with main_func and args as arguments .
0
example# 13738
endless loop ,
0
example# 13739
if return value of the code_changed function is true ,
0
example# 13740
raise an SystemRestart exception ,
0
example# 13741
call the function time.sleep [ time . sleep ] with argument integer 1 .
0
example# 13742
define the function main , with main_func , args defaulting to None and kwargs defaulting to None as arguments .
0
example# 13743
if args is None ,
0
example# 13744
args is a empty tuple .
0
example# 13745
if kwargs is None ,
0
example# 13746
kwargs is a empty dictionary .
0
example# 13747
if sys.platform [ sys . platform ] starts with string _STR:0_ ,
1
'java' ||| _STR:0_
example# 13748
substitute jython_reloader for reloader .
0
example# 13749
if not ,
0
example# 13750
substitute python_reloader for reloader .
0
example# 13751
call the function check_errors with argument main_func , substitute the result for wrapped_main_func .
0
example# 13752
call the function reloader with wrapped_main_func , args and kwargs as arguments .
0
example# 13753
BASE2_ALPHABET is a string _STR:0_ .
1
'01' ||| _STR:0_
example# 13754
BASE16_ALPHABET is a string _STR:0_ .
1
'0123456789ABCDEF' ||| _STR:0_
example# 13755
BASE56_ALPHABET is a string _STR:0_ .
1
'23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz' ||| _STR:0_
example# 13756
BASE36_ALPHABET is a string _STR:0_ .
1
'0123456789abcdefghijklmnopqrstuvwxyz' ||| _STR:0_
example# 13757
BASE62_ALPHABET is string _STR:0_ .
1
'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz' ||| _STR:0_
example# 13758
append string _STR:0_ to the BASE62_ALPHABET , substitute it for BASE64_ALPHABET .
1
'-_' ||| _STR:0_
example# 13759
derive class BaseCOnverter from object base class .
0
example# 13760
decimal_digits is a string _STR:0_ .
1
'0123456789' ||| _STR:0_
example# 13761
define the initialization function with self class instance , digits and sign defaulting to _STR:0_ as arguments .
1
'-' ||| _STR:0_
example# 13762
substitute sign for self.sign [ self . sign ] .
0
example# 13763
substitute digits for self.digits [ self . digits ] .
0
example# 13764
if sign is contained in self.digits [ self . digits ] ,
0
example# 13765
raise ValueError exception with string _STR:0_ as an argument .
1
'Sign character found in converter base digits.' ||| _STR:0_
example# 13766
define private method __repr__ with argument self .
0
example# 13767
replace ' % s ' in the string _STR:0_ with length of self.digits [ self . digits ] and self.digits [ self . digits ] , respectively , return the string .
1
"<BaseConverter: base%s (%s)>" ||| _STR:0_
example# 13768
define the method encode with self class instance and i as arguments .
0
example# 13769
call the self.convert [ self . convert ] method with i , self.decimal_digits [ self . decimal_digits ] , self.digits [ self . digits ] and _STR:0_ as arguments , assign the result to the neg and value , respectively .
1
'-' ||| _STR:0_
example# 13770
if neg is true ,
0
example# 13771
append value to the self.sign [ self . sign ] , return the result .
0
example# 13772
return value .
0
example# 13773
define the decode method with self class instance and s as arguments .
0
example# 13774
call the self.convert [ self . convert ] method with s , self.decimal [ self . decimal ] , self.decimal_digits [ self . decimal_digits ] and self.sign [ self . sign ] as arguments , assign the result to the neg and value , respectively .
0
example# 13775
if neg is true ,
0
example# 13776
append value to the _STR:0_ , substitute it for value .
1
'-' ||| _STR:0_
example# 13777
convert value to an integer , return it .
0
example# 13778
define convert method with self class instance , number , from_digits , to_digits and sign as arguments .
0
example# 13779
convert number to string , if first element equals to sign ,
0
example# 13780
convert number to a string , truncate first element .
0
example# 13781
neg is integer 1 .
0
example# 13782
if not ,
0
example# 13783
neg is integer 0 .
0
example# 13784
x is integer 0 .
0
example# 13785
for every digit in number coverted to a string ,
0
example# 13786
multiply x by length of from_digits add the return value of method from_digits.index [ from_digits . index ] with digit argument , substitute the result for x .
0
example# 13787
if x equals to integer 0 ,
0
example# 13788
substitute first element of to_digits for res .
0
example# 13789
if not ,
0
example# 13790
res is an empty string .
0
example# 13791
while x is greater than zero ,
0
example# 13792
calculate reminder of division of x by length to_digits , substitute it for digit .
0
example# 13793
increment res by element of to_digit at the digit index .
0
example# 13794
divide x by length of to_digits , convert floor value of the result to an integer , substitute it for x .
0
example# 13795
return neg and res .
0
example# 13796
call the BaseConverter function with BASE2_ALPHABET as argument , store the result in base2 .
0
example# 13797
call the BaseConverter function with BASE16_ALPHABET as argument , store the result in base16 .
0
example# 13798
call the BaseConverter function with BASE36_ALPHABET as argument , store the result in base36 .
0
example# 13799
call the BaseConverter function with BASE56_ALPHABET as argument , store the result in base56 .
0
example# 13800
call the BaseConverter function with BASE62_ALPHABET as argument , store the result in base62 .
0
example# 13801
call the BaseConverter function with BASE64_ALPHABET and sign set to _STR:0_ as arguments , store the result in base64 .
1
'$' ||| _STR:0_
example# 13802
from module __future__ import unicode_literals to default name space .
0
example# 13803
import hashlib module .
0
example# 13804
import re module .
0
example# 13805
import time module .
0
example# 13806
from django.conf [ django . conf ] import settings object to the default name space .
0
example# 13807
from django.core.cache [ django . core . cache ] import caches to the default name space .
0
example# 13808
from django.utils [ django . utils ] import iri_to_uri , force_bytes , force_text to the default name space .
0
example# 13809
from django.utils.http [ django . utils . http ] import http_date to the default name space .
0
example# 13810
from django.utils.timezone [ django . utils . timezone ] import get_current_timezone_name to the default name space .
0
example# 13811
from django.utils.translation [ django . utils . translation ] import get_language to the default name space .
0
example# 13812
compile regular expression based on the string _STR:0_ and assign the result to cc_delim_re .
1
'\s*,\s*' ||| _STR:0_
example# 13813
define function patch_cache_control , with response and dictionary set of arguments , kwargs , as arguments .
0
example# 13814
define function dictitem with s as an argument .
0
example# 13815
split string s once , with _STR:0_ sign as a delimiter , assign the resulting list to the t .
1
'=' ||| _STR:0_
example# 13816
if length of t is greater than integer 1 ,
0
example# 13817
return first element of t converted to lowercase and second element of t , as a tuple .
0
example# 13818
if not ,
0
example# 13819
return first element of t converted to lowercase and boolean True , as a tuple .
0
example# 13820
define function dictvale , with an argument t .
0
example# 13821
if second element of t is boolean True ,
0
example# 13822
return first element of t .
0
example# 13823
if not ,
0
example# 13824
return string first element of t , _STR:0_ , second element of t .
1
'=' ||| _STR:0_
example# 13825
if call to the method response.has_header [ response . has_header ] with string _STR:0_ as an argument returns boolean True ,
1
'Cache-Control' ||| _STR:0_
example# 13826
find the value of response under the key _STR:0_ , use it as a delimiter to split string ss_delim_re ,
1
'Cache-Control' ||| _STR:0_
example# 13827
assign the result to cc . cc is a dictionary populated with items by calling function dictitem with el as argument , for every el in cc .
0
example# 13828
if not ,
0
example# 13829
cc is an empty dictionary .
0
example# 13830
if cc contains item _STR:0_ and kwargs contains item _STR:1_ ,
2
'max-age' ||| _STR:0_
'max_age' ||| _STR:1_
example# 13831
convert to integer value of dictionary cc under the key _STR:0_ ,
1
'max-age' ||| _STR:0_
example# 13832
if it is smaller than the value of dictionary kwargs under the key _STR:0_ , substitute kwargs value under the key _STR:1_ by it . if cc contains item _STR:2_ and kwargs contains item _STR:3_ ,
4
'max-age' ||| _STR:1_
'private' ||| _STR:2_
'max_age' ||| _STR:0_
'public' ||| _STR:3_
example# 13833
delete dictionary item _STR:0_ from cc .
1
'private' ||| _STR:0_
example# 13834
if cc contains item _STR:0_ and kwargs contains item _STR:1_ ,
2
'private' ||| _STR:1_
'public' ||| _STR:0_
example# 13835
delete dictionary item _STR:0_ from cc .
1
'public' ||| _STR:0_
example# 13836
for every k and v in items of dictionary kwargs , respectively ,
0
example# 13837
replace all occurrences of symbol _STR:0_ in string k with symbol _STR:1_ , use new string as key to find a value in dictionary cc ,
2
'_' ||| _STR:0_
'-' ||| _STR:1_
example# 13838
replace this value with v. call the function dictvalue with el as argument for every el in values of dictionary cc ,
0
example# 13839
join the resulting sequence in a string with comma as separator , assign the string to cc . substitute response dictionary value under the key _STR:0_ for cc .
1
'Cache-Control' ||| _STR:0_
example# 13840
define function get_max_age with response as an argument .
0
example# 13841
if the result to the method call response.has_header [ response . has_header ] , with string _STR:0_ as an argument is boolean False ,
1
'Cache-Control' ||| _STR:0_
example# 13842
return from the function
0
example# 13843
cc is a dictionary populated with items by calling function _to_tuple with el as an argument ,
0
example# 13844
for every el in split string cc_delim_re , with delimiter being the value of dictionary response under the key _STR:0_ . if cc contains item _STR:1_ ,
2
'max-age' ||| _STR:1_
'Cache-Control' ||| _STR:0_
example# 13845
try ,
0
example# 13846
convert to integer the value of dictionary cc under the key _STR:0_ , and return it
1
'max-age' ||| _STR:0_
example# 13847
if exception ValueError or TypeError is raised ,
0
example# 13848
do nothing .
0
example# 13849
define the function _set_response_etag , with response as an argument .
0
example# 13850
if response.streaming [ response . streaming ] is boolean False ,
0
example# 13851
create md5 hash from string response.content [ response . content ] in hexadecimal format , surround the hash with double quotes ,
0
example# 13852
and store it in the value of the dictionary response under the key _STR:0_ . return response
1
'ETag' ||| _STR:0_
example# 13853
define the function patch_response_headers , with response and cache_timeout with None as default value , as arguments .
0
example# 13854
if cache_timeout equals to None ,
0
example# 13855
substitute settings.CACHE_MIDDLEWARE_SECONDS [ settings . CACHE_MIDDLEWARE_SECONDS ] for cache_timeout .
0
example# 13856
if cache_timeout is lesser than integer 0 ,
0
example# 13857
substitute integer 0 for cache_timeout .
0
example# 13858
if settings.USE_ETAGS [ settings . USE_ETAGS ] is True and function call response.has_header [ response . has_header ] with string _STR:0_ as argument returns boolean False ,
1
'ETag' ||| _STR:0_
example# 13859
if object response has an attribute _STR:0_ and if response.render [ response . render ] is callable object ,
1
'render' ||| _STR:0_
example# 13860
call the method response.add_post_render_callback [ response . add_post_render_callback ] with _set_response_etag as argument .
0
example# 13861
if not ,
0
example# 13862
substitute return value of call to the function _set_response_etag with response as an argument , for response .
0
example# 13863
if call to the function response.has_header [ response . has_header ] with string _STR:0_ as an argument returns boolean False ,
1
'Last-Modified' ||| _STR:0_
example# 13864
call the function http_date with no arguments , and substitute its return value
0
example# 13865
for value of dictionary response under the key _STR:0_ . if call to the function response.has_header [ response . has_header ] with _STR:1_ as argument returns boolean False ,
2
'Last-Modified' ||| _STR:0_
'Expires' ||| _STR:1_
example# 13866
sum return value of the function call time.time [ time . time ] ( ) and cache_timeout , use it as an argument for function call of http_date ,
0
example# 13867
and substitute the return value for value under the key _STR:0_ of dictionary response . call the function patch_cache_control , with response and max_age set to cache_timeout as arguments .
1
'Expires' ||| _STR:0_
example# 13868
define function add_never_cache_headers , with response as an argument .
0
example# 13869
call the function patch_response with response and cache_timeout decremented by integer 1 as arguments .
0
example# 13870
define function patch_vary_headers , with response and newheaders as arguments .
0
example# 13871
doctring
0
example# 13872
if call to the function response.has_header [ response . has_header ] with argument _STR:0_ returns boolean True ,
1
'Vary' ||| _STR:0_
example# 13873
split the string cc_delim_re with value under the key _STR:0_ of response dictionary as delimiter , substitute result for vary_headers .
1
'Vary' ||| _STR:0_
example# 13874
if not ,
0
example# 13875
vary_headers is an empty list .
0
example# 13876
existing_headers is a set of lowercase headers for every header in vary_headers .
0
example# 13877
put every header in newheaders in a list , only if newheader converted to lowercase does not exist in existing_headers ,
0
example# 13878
substitute this list for additional_headers . join all of the elements of vary_headers and additional_headers in a string delimited by a comma ,
0
example# 13879
substitute it for value of dictionary response under the key _STR:0_ . define function has_vary_header , with response and header_query as arguments .
1
'Vary' ||| _STR:0_
example# 13880
if return value of function response.has_header [ response . has_header ] with string _STR:0_ as argument is boolean False ,
1
'Vary' ||| _STR:0_
example# 13881
return boolean False .
0
example# 13882
split string cc_delim_re by value of dictionary response under the key _STR:0_ as a delimiter , substitute it for vary_headers .
1
'Vary' ||| _STR:0_
example# 13883
existing_headers is a set containing lowercase strings header for every header in vary_headers .
0
example# 13884
check if lowercase header_query exists is existing_headers , return the boolean result .
0
example# 13885
define function _i18n_cache_key_suffix , with request and cache_key as arguments .
0
example# 13886
if eather one of settings.USE_I18N [ settings . USE_I18N ] or settings.USE_L10N [ settings . USE_L10N ] is True ,
0
example# 13887
call the function getattr with request , string _STR:0_ and function get_language as arguments ,
1
'LANGUAGE_CODE' ||| _STR:0_
example# 13888
append the result at the end of string _STR:0_ , append it all at the end of string cache_key . if settings.USE_TZ [ settings . USE_TZ ] is True ,
1
'.' ||| _STR:0_
example# 13889
call the function force_text , with the function get_current_timezone_name and errors set to string _STR:0_ as arguments ,
1
'ignore' ||| _STR:0_
example# 13890
replace the result for tz_name . call the method tz_name.encode [ tz_name . encode ] with the arguments _STR:0_ and _STR:1_ , call the method decode on the result with _STR:0_ as argument ,
2
'ascii' ||| _STR:0_
'ignore' ||| _STR:1_
example# 13891
in the resulting string replace all occurrences of _STR:0_ with _STR:1_ and append it to the end of cache_key . return cache_key .
2
'_' ||| _STR:1_
' ' ||| _STR:0_
example# 13892
define function _generate_cache_key , with request , method , headerlist and key_prefix as arguments .
0
example# 13893
ctx is an hashlib object , for calculating hash function with md5 algorithm .
0
example# 13894
for every header in headerlist ,
0
example# 13895
call method request.META.get [ request . META . get ] with arguments header and None .
0
example# 13896
if value is not None ,
0
example# 13897
call function force_bytes with value as argument , use the result to as the result for the call to the methgod ctx.update [ ctx . update ] .
0
example# 13898
call iri_to_uri with return value of the request.build_absolute_uri [ request . build_absolute_uri ] method , us the result as the argument for the call to the
0
example# 13899
force_bytes function , use the result as the argument for the call to the hashlib.mdb [ hashlib . mdb ] function , store the result in url . substitute the ' % s ' in string _STR:0_ with key_prefix , method ,
1
'views.decorators.cache.cache_page.%s.%s.%s.%s' ||| _STR:0_
example# 13900
return value of method url.hexdigest [ url . hexdigest ] ( ) , return value of method ctx.hexdigest [ ctx . hexdigest ] , respectively , substitute it for cache_key . call the function _i18n_cache_key_suffix with request and cache_key as arguments , return the result .
0
example# 13901
define the funtion _generate_cache_header_key with key_prefix and request as arguments .
0
example# 13902
call method request.build_absolute_uri [ request . build_absolute_uri ] , use the result as an argument for function call of iri_to_uri ,
0
example# 13903
use the result as an argument for function call of force_bytes , use the result as an argument for calling the method hashlib.md5 [ hashlib . md5 ] , put the result in url . substitute the ' % s ' in string _STR:0_ with key_prefix and result of the function call ,
1
'views.decorators.cache.cache_header.%s.%s' ||| _STR:0_
example# 13904
to the function url.hexdigest [ url . hexdigest ] ( ) , respectively , substitute it for cache_key . call the function _i18n_cache_key_suffix with request and cache_key as arguments , return the result .
0
example# 13905
define the function get_cache_key , with request key_prefix set to None , method set to _STR:0_ and cache set to None as arguments .
1
'GET' ||| _STR:0_
example# 13906
if key_prefix is None ,
0
example# 13907
substitute settings.CACHE_MIDDLEWARE_KEY_PREFIX [ settings . CACHE_MIDDLEWARE_KEY_PREFIX ] for key_prefix .
0
example# 13908
call the function _generate_cache_header_key with key_prefix and request as arguments , substitute the result for cache_key .
0
example# 13909
if cache is None ,
0
example# 13910
set cache to the value of the dictionary caches under the key settings.CACHE_MIDDLEWARE_ALIAS [ settings . CACHE_MIDDLEWARE_ALIAS ] .
0
example# 13911
get the value of dictionary cache under the key cache_key , if key is not available return None , substitute it for headerlist .
0
example# 13912
if header list is not None ,
0
example# 13913
call the function _generate_cache_key with request , method , headerlist , key_prefix as arguments , return the result .
0
example# 13914
if not ,
0
example# 13915
return None .
0
example# 13916
define function learn_cache_key with request , response , cache_timeout set to None , key_prefix set to None , cache set to None as arguments .
0
example# 13917
if key_prefix is None ,
0
example# 13918
substitute settings.CACHE_MIDDLEWARE_KEY_PREFIX [ settings . CACHE_MIDDLEWARE_KEY_PREFIX ] for key_prefix .
0
example# 13919
if cache_timeout is None ,
0
example# 13920
substitute settings.CACHE_MIDDLEWARE_SECONDS [ settings . CACHE_MIDDLEWARE_SECONDS ] for cache_timeout .
0
example# 13921
call function _generate_cache_header_key with arguments key_prefix and request , substitute the result for cache_key .
0
example# 13922
if cache is None ,
0
example# 13923
get value under the key settings.CACHE_MIDDLEWARE_ALIAS [ settings . CACHE_MIDDLEWARE_ALIAS ] of caches dictionary , substitute with it the cache .
0
example# 13924
if call to the function response.has_header [ response . has_header ] with string _STR:0_ as an argument returns True ,
1
'Vary' ||| _STR:0_
example# 13925
if eather of settings.USE_I18N [ settings . USE_I18N ] or settings.USE_L10N [ settings . USE_L10N ] is True , set is_accept_language_redundant to True .
0
example# 13926
headerlist is an empty list .
0
example# 13927
for every header in list of strings compiled by splitting string cc_delim_re with value under the key _STR:0_ of response dictionary as a delimiter .
1
'Vary' ||| _STR:0_
example# 13928
convert string header to uppercase and replace all occurrences of _STR:0_ with _STR:1_ , substitute it for header .
2
'_' ||| _STR:1_
'-' ||| _STR:0_
example# 13929
if header equals a string _STR:0_ and is_accept_language_redundant is boolean True ,
1
'ACCEPT_LANGUAGE' ||| _STR:0_
example# 13930
continue with the next iteration of the for loop .
0
example# 13931
append header to the string _STR:0_ , append the result to the list headerlist .
1
'HTTP_' ||| _STR:0_
example# 13932
call method sort on the headerlist .
0
example# 13933
call the method cache.set [ cache . set ] , with cache_key , headerlist , cache_timeout as arguments .
0
example# 13934
call the function _generate_cache_key with request , request.method [ request . method ] , headerlist , key_prefix as arguments , return the result .
0
example# 13935
if not ,
0
example# 13936
call the method cache.set [ cache . set ] with cache_key , an empty list and cache_timeout as arguments .
0
example# 13937
call the function _generate_cache_key with request , request.method [ request . method ] , an empty list and key_prefix as arguments , return the result .
0
example# 13938
define function _to_tuple with s as an argument .
0
example# 13939
split string s once , with _STR:0_ as delimiter , substitute the result for t .
1
'=' ||| _STR:0_
example# 13940
if length of t equals to integer 2 ,
0
example# 13941
return tuple , consisting of first element of t converted to lowercase and second element of t .
0
example# 13942
return tuple , consisting of first element of t converted to lowercase and True .
0
example# 13943
__all__ is an list with an element _STR:0_ .
1
'luhn' ||| _STR:0_
example# 13944
from django.utils [ django . utils ] import six into default name space .
0
example# 13945
LUHN_ODD_LOOKUP is a tuple with 10 elements : integers 0 , 2 , 4 , 6 , 8 , 1 , 3 , 5 , 7 and 9 .
0
example# 13946
define the function luhn with an argument candidate .
0
example# 13947
if candidate is not an instance of six.string_types [ six . string_types ] ,
0
example# 13948
convert candidate to a string .
0
example# 13949
try ,
0
example# 13950
for every c in reversed order of candidate , convert c into an integer , sum all the results and substitute the result for evens .
0
example# 13951
for every c in candidate without the last element and in reversed order , convert c into an integer ,
0
example# 13952
use the result as an key to get the value from the LUHN_ODD_LOOKUP dictionary , sum all the results and substitute the result for odds . sum evens and odds , if the result is divisible by integer 10 , return boolean True , if not return boolean False .
0
example# 13953
if ValueError exception is caught ,
0
example# 13954
return boolean False .
0
example# 13955
from __future__ import unicode_literals into default name space .
0
example# 13956
import module hmac .
0
example# 13957
import module struc .
0
example# 13958
import module hashlib .
0
example# 13959
import module binascii .
0
example# 13960
import module time .
0
example# 13961
import module random .
0
example# 13962
try ,
0
example# 13963
random is an instance of random.SystemRandom [ random . SystemRandom ] class .
0
example# 13964
using_sysrandom is boolean True .
0
example# 13965
if NotImplementedError exception is caught ,
0
example# 13966
import warnings .
0
example# 13967
call the function warnings.warn [ warnings . warn ] with an argument ,
0
example# 13968
string _STR:0_ . using_sysrandom is boolean False .
1
'A secure pseudo-random number generator is not available on your system. Falling back to Mersenne Twister.' ||| _STR:0_
example# 13969
from django.conf [ django . conf ] import settings into default name space .
0
example# 13970
from django.utils.encoding [ django . utils . encoding ] import force_bytes into default name space .
0
example# 13971
from django.utils [ django . utils ] import six into default name space .
0
example# 13972
from django.utils.six.moves [ django . utils . six . moves ] import xrange into default name space .
0
example# 13973
define the function salted_hmac with 3 arguments : key_salt , value and secret set to None .
0
example# 13974
if secret is None ,
0
example# 13975
substitute settings.SECRET_KEY [ settings . SECRET_KEY ] for secret .
0
example# 13976
call the function force_bytes with an argument key_salt , substitute the result for key_salt .
0
example# 13977
call the function force_bytes with an argument secret , substitute the result for secret .
0
example# 13978
call the method hashlib.sha1 [ hashlib . sha1 ] with an argument secret appended to key_salt , call the method digest on the result , return the result .
0
example# 13979
call the method hmac.new [ hmac . new ] with 3 arguments : key , msg set to result of the function force_bytes with an argument value ,
0
example# 13980
and digestmod set to hashlib.sha1 [ hashlib . sha1 ] , return the result . define the function constant_time_compare with 2 arguments : length set to integer 12 ,
0
example# 13981
if using_sysrandom is false ,
0
example# 13982
format string _STR:0_ with 3 elements : result of the function random.getstate [ random . getstate ] , result of the call the the function time.time [ time . time ] ,
1
"%s%s%s" ||| _STR:0_
example# 13983
and settings.SECRET_KEY [ settings . SECRET_KEY ] , call on it method encode with an argument string _STR:0_ , use the result as an argument for the call to the method hashlib.sha256 [ hashlib . sha256 ] , call the method digest on the result , use the result as an argument for the call to the function random.seed [ random . seed ] . call the function random.choice [ random . choice ] with an argument allowed_chars , for every i in range of integers from 0 to lengths ,
1
'utf-8' ||| _STR:0_
example# 13984
join the results into a string , return it . if hmac has an attribute _STR:0_ ,
1
"compare_digest" ||| _STR:0_
example# 13985
define the function constant_time_compare with 2 arguments : val1 and val2 .
0
example# 13986
call the function hmac.compare_digest [ hmac . compare_digest ] with 2 arguments : result of the function force_bytes called with an argument val1 ,
0
example# 13987
and result of the function force_bytes called with an argument val2 , return the result . if not ,
0
example# 13988
call the function constant_time_compare with 2 arguments : val1 and val2 .
0
example# 13989
if lengths of val1 and val2 are not equal ,
0
example# 13990
return boolean False .
0
example# 13991
result is an integer 0 .
0
example# 13992
if six.PY3 [ six . PY3 ] is true and val1 and val2 are an instances of bytes ,
0
example# 13993
zip val1 and va2 into list of tuples , for every x and y in the result ,
0
example# 13994
perform bitwise exclusive OR on 2 operands x and y , perform bitwise OR with 2 operands : previous result and result , substitute the result for result .
0
example# 13995
if not ,
0
example# 13996
zip val1 and va2 into list of tuples , for every x and y in the result ,
0
example# 13997
perform bitwise exclusive OR on 2 operands integer representation of x and integer representation of y ,
0
example# 13998
perform bitwise OR with 2 operands : previous result and result , substitute the result for result . if result is equal to integer 0 , return boolean True , otherwise return boolean False .
0
example# 13999
define the function _bin_to_long with an argument x .
0
example# 14000
call the function binascii.hexlify [ binascii . hexlify ] with an argument x , convert the result to base 16 integer , return the result .
0
example# 14001
define the function _long_to_bin with 2 arguments : x and hex_format_string .
0
example# 14002
format string hex_format_string with x , call the method encode on the result with an argument string _STR:0_ ,
1
'ascii' ||| _STR:0_
example# 14003
use the result as an argument for the call to the function binascii.unhexlify [ binascii . unhexlify ] , return the result . if hashlib had an instance _STR:0_ ,
1
"pbkdf2_hmac" ||| _STR:0_
example# 14004
define the function pbkdf2 with 5 arguments : password , salt , iterations , dklen set to integer 0 and digest set to None .
0
example# 14005
if digest is None ,
0
example# 14006
substitute hashlib.sha256 [ hashlib . sha256 ] for digest .
0
example# 14007
if dklen is false ,
0
example# 14008
dklen is None .
0
example# 14009
call the function force_bytes with an argument password , substitute the result for password .
0
example# 14010
call the function force_bytes with an argument salt , substitute the result for salt .
0
example# 14011
call the function hashlib.pbkdf2_hmac [ hashlib . pbkdf2_hmac ] with 5 arguments : field name of the result of the function digest , password , salt ,
0
example# 14012
iterations and dklen , return the result . if not ,
0
example# 14013
define the function pbkdf2 with 5 arguments : password , salt , iterations , dklen set to integer 0 and digest set to None .
0
example# 14014
if iterations is lesser than integer 0 , raise an error .
0
example# 14015
if digest is false ,
0
example# 14016
substitute hashlib.sha256 [ hashlib . sha256 ] for digest .
0
example# 14017
call the function force_bytes with an argument password , substitute the result for password .
0
example# 14018
call the function force_bytes with an argument salt , substitute the result for salt .
0
example# 14019
call the function digest , substitute the filed digest_size of the result for hlen .
0
example# 14020
if dklen is false ,
0
example# 14021
substitute hlen for dklen .
0
example# 14022
bring intger 2 to integer 32 , decrement the result by 1 , multiply it with hlen , if dklen is greater than the previous result ,
0
example# 14023
raise an OverflowError exception with an argument string _STR:0_ .
1
'dklen too big' ||| _STR:0_
example# 14024
divide negative dklen with hlen , substitute floored result for l .
0
example# 14025
decrement l by integer 1 , multiply it with hlen , subtract the result from dklen , substitute the result for r .
0
example# 14026
hex_format_string is a string _STR:0_ formated with hlen multiplied with integer 2 .
1
"%%0%ix" ||| _STR:0_
example# 14027
call the function digest twice , substitute the results for inner , outer , respectively .
0
example# 14028
if length of password is greater than inner.block_size [ inner . block_size ] ,
0
example# 14029
call the function digest with an argument password , call the method digest on the result , substitute the result or password .
0
example# 14030
decrement by length of password , create bytes string with previous result number of characters _STR:0_ ,
1
'\x00' ||| _STR:0_
example# 14031
append the result to password . call the method password.translate [ password . translate ] with an argument hmac.trans_36 [ hmac . trans_36 ] , update inner dictionary with the result .
0
example# 14032
call the method password.translate [ password . translate ] with an argument hmac.trans_5C [ hmac . trans_5C ] , update outer dictionary with the result .
0
example# 14033
define the function F with an argument i .
0
example# 14034
call the method struct.pack [ struct . pack ] with 2 arguments : bytes string _STR:0_ and i , append the result to salt , substitute the result or u .
1
'>I' ||| _STR:0_
example# 14035
result is an integer 0 .
0
example# 14036
for every j in range of integers from 0 to iterations converted to an integer ,
0
example# 14037
call the function inner.copy [ inner . copy ] , substitute the result for dig1 , call the function outer.copy [ outer . copy ] , substitute the result for dig2 .
0
example# 14038
call the method dig1.update [ dig1 . update ] with an argument u .
0
example# 14039
call the method dig1.digest [ dig1 . digest ] , use the result as an argument for the call to the function dig2.update [ dig2 . update ] .
0
example# 14040
call the method dig2.digest [ dig2 . digest ] , substitute the result for u .
0
example# 14041
call the function _bin_to_long with an argument u perform bitwise exclusive OR with 2 operands , previous result an result ,
0
example# 14042
substitute the result for result . call the function _long_to_bin with 2 arguments : result and hex_format_string , return the result .
0
example# 14043
call the function F with an argument x , for every x in sequence of integers from 1 to l , not included ,
0
example# 14044
substitute the results in a list for T. join elements of T in a bytes string , append first r elements of result of the call to the function F with an argument l to it ,
0
example# 14045
import module os .
0
example# 14046
import module sys .
0
example# 14047
from . import six into default name space .
0
example# 14048
convert six.PY3 [ six . PY3 ] to an integer , substitute it for buffering .
0
example# 14049
if os.name [ os . name ] equals string _STR:0_ ,
1
'posix' ||| _STR:0_
example# 14050
define the function become_daemon with 4 arguments : our_home_dir set to _STR:0_ , out_log set to a string _STR:1_ ,
2
'/dev/null' ||| _STR:1_
'.' ||| _STR:0_
example# 14051
try ,
0
example# 14052
fork a child process , if the result equals integer 0 ,
0
example# 14053
close the process with an argument 0 .
0
example# 14054
if OSError , renamed to e , exception is caught ,
0
example# 14055
call the method sys.stderr.write [ sys . stderr . write ] with an argument string _STR:0_ , formated with e.errno [ e . errno ] and e.strerror [ e . strerror ] .
1
"fork #1 failed: (%d) %s\n" ||| _STR:0_
example# 14056
close the process with an argument 1 .
0
example# 14057
call the method os.setsid [ os . setsid ] .
0
example# 14058
call the method os.chdir [ os . chdir ] with an argument our_home_dir .
0
example# 14059
call the function os.umask [ os . umask ] with an argument umask .
0
example# 14060
try ,
0
example# 14061
fork a child process , if the result equals integer 0 ,
0
example# 14062
close the process with an argument 0 .
0
example# 14063
if OSError , renamed to e , exception is caught ,
0
example# 14064
call the method sys.stderr.write [ sys . stderr . write ] with an argument string _STR:0_ , formated with e.errno [ e . errno ] and e.strerror [ e . strerror ] .
1
"fork #2 failed: (%d) %s\n" ||| _STR:0_
example# 14065
call the method os._exit [ os . _exit ] with an argument integer 1 .
0
example# 14066
open _STR:0_ file in read mode , substitute the result for si .
1
'/dev/null' ||| _STR:0_
example# 14067
open out_log flie in append mode with buffering size of input buffer , substitute the result for so .
0
example# 14068
open err_log flie in append mode with buffering size of input buffer , substitute the result for se .
0
example# 14069
call the method os.dup2 [ os . dup2 ] with 2 arguments : result of the method si.fileno [ si . fileno ] and result of the method sys.stdin.fileno [ sys . stdin . fileno ] .
0
example# 14070
call the method os.dup2 [ os . dup2 ] with 2 arguments : result of the method so.fileno [ so . fileno ] and result of the method sys.stdout.fileno [ sys . stdout . fileno ] .
0
example# 14071
call the method os.dup2 [ os . dup2 ] with 2 arguments : result of the method se.fileno [ se . fileno ] and result of the method sys.stderr.fileno [ sys . stderr . fileno ] .
0
example# 14072
substitute so and se for sys.stdout [ sys . stdout ] and sys.stderr [ sys . stderr ] .
0
example# 14073
if not ,
0
example# 14074
define the function become_daemon with 4 argument : our_home_dir set to _STR:0_ , out_log set to None , err_log set to None ,
1
'.' ||| _STR:0_
example# 14075
call the method os.chdir [ os . chdir ] with an argument our_home_dir .
0
example# 14076
call the method os.umask [ os . umask ] with an argument umask .
0
example# 14077
call the method sys.stdin.close [ sys . stdin . close ] .
0
example# 14078
call the method sys.stdout.close [ sys . stdout . close ] .
0
example# 14079
call the method sys.stderr.close [ sys . stderr . close ] .
0
example# 14080
if err_log is true ,
0
example# 14081
open err_log file in append mode with buffering size of the input buffer , substitute the result for sys.stderr [ sys . stderr ] .
0
example# 14082
if not ,
0
example# 14083
sys.stderr [ sys . stderr ] is an instance of NullDevice class .
0
example# 14084
if out_log is true ,
0
example# 14085
open out_log file in append mode with buffering size of the input buffer , substitute the result for sys.stdout [ sys . stdout ] .
0
example# 14086
if not ,
0
example# 14087
sys.stdout [ sys . stdout ] is an instance of NullDevice class .
0
example# 14088
derive the class NullDevice .
0
example# 14089
define the method write with 2 arguments : self and s .
0
example# 14090
do nothing .
0
example# 14091
import module copy .
0
example# 14092
import module warnings .
0
example# 14093
from collections import OrderedDict into default name space .
0
example# 14094
from django.utils [ django . utils ] import six into default name space .
0
example# 14095
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
0
example# 14096
derive the class MergeDict from the object base class .
0
example# 14097
define the method __init__ with 2 arguments : self and unpacked list dicts .
0
example# 14098
call the function warnings.warn [ warnings . warn ] with 3 arguments : string _STR:0_ ,
1
'`MergeDict` is deprecated, use `dict.update()` instead.' ||| _STR:0_
example# 14099
RemovedInDjango19Warning and integer 2. substitute dicts for self.dicts [ self . dicts ] .
0
example# 14100
define the method __bool__ with an argument self .
0
example# 14101
if any element of self.dicts [ self . dicts ] is true , return boolean True , otherwise return boolean False .
0
example# 14102
define the method __nonzero__ with an argument self .
0
example# 14103
get the type of self object , call its method __bool__ with an argument self , return the result .
0
example# 14104
define the method __getitem__ with 2 arguments : self and key .
0
example# 14105
for every dict_ in self.dicts [ self . dicts ] ,
0
example# 14106
try ,
0
example# 14107
return value under key key of dict_ dictionary .
0
example# 14108
if KeyError exception is caught ,
0
example# 14109
do nothing .
0
example# 14110
rise an KeyError exception with an argument key .
0
example# 14111
define the method __copy__ with an argument self .
0
example# 14112
call the method __copy__ with an argument unpacked list self.dicts [ self . dicts ] , return the result .
0
example# 14113
define the method get with 3 arguments : self , key and default set to None .
0
example# 14114
try ,
0
example# 14115
return value under key key of self dictionary
0
example# 14116
if KeyError exception is caught ,
0
example# 14117
return default .
0
example# 14118
define the method getlist with 2 arguments : self and key .
0
example# 14119
for every dict_ in self.dicts [ self . dicts ] ,
0
example# 14120
if key is contained in dict_ ,
0
example# 14121
call the method dict_.getlist [ dict_ . getlist ] with an argument key , return the result .
0
example# 14122
return an empty list .
0
example# 14123
define the method _iteritems with an argument self .
0
example# 14124
seen is an empty set .
0
example# 14125
for every dict_ in self.dicts [ self . dicts ] ,
0
example# 14126
call the function six.iteritems [ six . iteritems ] with an argument dict_ , for every item in the result ,
0
example# 14127
substitute first element of item for k .
0
example# 14128
if k is contained in seen ,
0
example# 14129
skip this loop iteration .
0
example# 14130
add k to seen .
0
example# 14131
yield item .
0
example# 14132
define the method _iterkeys with an argument self .
0
example# 14133
call the method self._iteritems [ self . _iteritems ] , for every k and v in the result ,
0
example# 14134
yield k .
0
example# 14135
define the method _itervalues with an argument self .
0
example# 14136
call the method self._iteritems [ self . _iteritems ] , for every k and v in the result ,
0
example# 14137
yield v .
0
example# 14138
if six.PY3 [ six . PY3 ] is true ,
0
example# 14139
substitute _iteritems for items .
0
example# 14140
substitute _iterkeys for keys .
0
example# 14141
substitute _itervalues for values .
0
example# 14142
if not ,
0
example# 14143
substitute _iteritems for iteritems .
0
example# 14144
substitute _iterkeys for iterkeys .
0
example# 14145
substitute _itervalues for itervalues .
0
example# 14146
define the method items with an argument self .
0
example# 14147
call the method self.iteritems [ self . iteritems ] , return the list of results .
0
example# 14148
define the method keys with an argument self .
0
example# 14149
call the method self.iterkeys [ self . iterkeys ] , return the list of results .
0
example# 14150
define the method values with an argument self .
0
example# 14151
call the method self.itervalues [ self . itervalues ] , return the list of results .
0
example# 14152
define the method has_key with 2 arguments : self and key .
0
example# 14153
for every dict_ in self.dicts [ self . dicts ] ,
0
example# 14154
if key is contained in dict_ ,
0
example# 14155
return boolean True .
0
example# 14156
return boolean False .
0
example# 14157
substitute has_key for __contains__ .
0
example# 14158
substitute _iterkeys for __iter__ .
0
example# 14159
define the method copy with an argument self .
0
example# 14160
call the method self.__copy__ [ self . __copy__ ] , return the result .
0
example# 14161
define the method __str__ with an argument self .
0
example# 14162
get dictionary self items , convert the result into a dictionary , convert the result into a string and return it .
0
example# 14163
define the method __repr__ with an argument self .
0
example# 14164
join printable representation of d into a string separated with _STR:0_ , for every d in self.dicts [ self . dicts ] , substitute the result for dictreprs .
1
', ' ||| _STR:0_
example# 14165
return a string _STR:0_ formated with self.__class__.__name__ [ self . __class__ . __name__ ] and dictreprs .
1
'%s(%s)' ||| _STR:0_
example# 14166
derive the class SortedDict from the dict base class .
0
example# 14167
define the method __new__ with 3 arguments : cls , unpacked list args and unpacked dictionary kwargs .
0
example# 14168
call the method __new__ from the base class of the class SortedDict , with 3 arguments : cls , unpacked list args ,
0
example# 14169
and unpacked dictionary kwargs . instance.keyOrder [ instance . keyOrder ] is an empty list .
0
example# 14170
return instance .
0
example# 14171
define the method __init__ with 2 arguments : self and data set to None .
0
example# 14172
call the function warnings.warn [ warnings . warn ] with 3 arguments : string _STR:0_ ,
1
"SortedDict is deprecated and will be removed in Django 1.9." ||| _STR:0_
example# 14173
RemovedInDjango19Warning and stacklevel set to integer 2. if data is None or data is an instance of dict type ,
0
example# 14174
if data is true , substitute it for data , otherwise data is an empty list .
0
example# 14175
call the method __init__ from the base class of the class SortedDict , called with an argument data .
0
example# 14176
if data is true , substitute list created from elements of data , substitute it for self.keyOrder [ self . keyOrder ] , otherwise self.keyOrder [ self . keyOrder ] is an empty list .
0
example# 14177
if not ,
0
example# 14178
call the method __init__ from the base class of the class SortedDict .
0
example# 14179
substitute __setitem__ filed of the base class of the class SortedDict for super_set .
0
example# 14180
for every key and value in data ,
0
example# 14181
if key is not contained in self ,
0
example# 14182
append key to self.keyOrder [ self . keyOrder ] .
0
example# 14183
call the function super_set with 2 arguments : key and value .
0
example# 14184
define the method __deepcopy__ with 2 arguments : self and memo .
0
example# 14185
call the method self.__class__ [ self . __class__ ] with an argument list , with 2 elements : key and result of the function copy.deepcopy [ copy . deepcopy ] ,
0
example# 14186
called with 2 arguments : value and memo , for every key and value in result for the method self.items [ self . items ] , return the result . define the method __copy__ with an argument self .
0
example# 14187
call the method self.copy [ self . copy ] , return the result .
0
example# 14188
define the method __setitem__ with 3 arguments : self , kay and value .
0
example# 14189
if key is not contained in self ,
0
example# 14190
append key to self.keyOrder [ self . keyOrder ] .
0
example# 14191
call the method __setitem__ from the base class of the class SortedDict , with 2 arguments key and value .
0
example# 14192
define the method __delitem__ with 2 arguments : self and key .
0
example# 14193
call the method __delitem__ from the base class of the class SortedDict , with an argument key .
0
example# 14194
remove key element from self.keyOrder [ self . keyOrder ] dictionary .
0
example# 14195
define the method __iter__ with an argument self .
0
example# 14196
return iterable self.keyOrder [ self . keyOrder ] .
0
example# 14197
define the method __reversed__ with an argument self .
0
example# 14198
reverse order of elements of self.keyOrder [ self . keyOrder ] , return the result .
0
example# 14199
define the method pop with 3 arguments : self , k and unpacked list args .
0
example# 14200
call the method pop from the base class of the class SortedDict , with 2 arguments k and unpacked list args ,
0
example# 14201
substitute the result for result . try ,
0
example# 14202
remove k element from self.keyOrder [ self . keyOrder ] dictionary .
0
example# 14203
if ValueError exception is caught ,
0
example# 14204
do nothing .
0
example# 14205
return result .
0
example# 14206
define the method popitem with an argument self .
0
example# 14207
call the method popitem from the base class of the class SortedDict , substitute the result for result .
0
example# 14208
remove first element of result from self.keyOrder [ self . keyOrder ] dictionary .
0
example# 14209
return result .
0
example# 14210
define the method _iteritems with an argument self .
0
example# 14211
for every key in self.keyOrder [ self . keyOrder ] ,
0
example# 14212
yield key and value under key key of self dictionary .
0
example# 14213
define the method _iterkeys with an argument self .
0
example# 14214
for every key in self.keyOrder [ self . keyOrder ] ,
0
example# 14215
yield key .
0
example# 14216
define the method _itervalues with an argument self .
0
example# 14217
for every key in self.keyOrder [ self . keyOrder ] ,
0
example# 14218
yield value under key key of self dictionary .
0
example# 14219
if six.PY3 [ six . PY3 ] is true ,
0
example# 14220
substitute _iteritems for items .
0
example# 14221
substitute _iterkeys for keys .
0
example# 14222
substitute _itervalues for values .
0
example# 14223
if not ,
0
example# 14224
substitute _iteritems for iteritems .
0
example# 14225
substitute _iterkeys for iterkeys .
0
example# 14226
substitute _itervalues for itervalues .
0
example# 14227
define the method items with an argument self .
0
example# 14228
put a tuple with 2 elements : k and value under k key of self dictionary into a list , for every k in self.keyOrder [ self . keyOrder ] ,
0
example# 14229
return resulting list . define the method keys with an argument self .
0
example# 14230
return hard copy of self.keyOrder [ self . keyOrder ] elements .
0
example# 14231
define the method values with an argument self .
0
example# 14232
append value under k key of self dictionary to a list , for every k in self.keyOrder [ self . keyOrder ] , return the result .
0
example# 14233
define the method update with 2 arguments : self and dict_ .
0
example# 14234
call the method six.iteritems [ six . iteritems ] with an argument dict_ , for every k and v in the result ,
0
example# 14235
substitute v for value under the k key of self dictionary .
0
example# 14236
define the method setdefault with 3 arguments : self , key and default .
0
example# 14237
if key is not contained in self ,
0
example# 14238
append key to self.keyOrder [ self . keyOrder ] dictionary .
0
example# 14239
call the method setdefault from the base class of the class SortedDict , with 2 arguments key and default , return the result .
0
example# 14240
define the method copy with an argument self .
0
example# 14241
call the method self.__class__ [ self . __class__ ] with an argument self , return the result .
0
example# 14242
define the method __repr__ with an argument self .
0
example# 14243
for every k and v in result of the function six.iteritems [ six . iteritems ] , called with an argument self ,
0
example# 14244
joining string _STR:0_ formated with k and v into a string , separated with _STR:1_ , use it to format a string _STR:2_ , return it . define the method clear with an argument self .
3
'{%s}' ||| _STR:2_
', ' ||| _STR:1_
'%r: %r' ||| _STR:0_
example# 14245
call the method clear from the base class of the class SortedDict .
0
example# 14246
self.keyOrder [ self . keyOrder ] is an empty list .
0
example# 14247
derive the class OrderedSet from the object base class .
0
example# 14248
define the method __init__ with 2 arguments : self and iterable set to None .
0
example# 14249
self.dict [ self . dict ] is an instance of OrderedDict class , created with arguments : tuples with 2 argument x and None , for every x in iterables ,
0
example# 14250
if iterable is true , otherwise use an empty list as an argument . define the method add with 2 arguments : self and item .
0
example# 14251
value under the item key of self.dict [ self . dict ] dictionary is None .
0
example# 14252
define the method remove with 2 arguments : self and item .
0
example# 14253
delete entry under item key of self.dict [ self . dict ] dictionary .
0
example# 14254
define the method discard with 2 arguments : self and item .
0
example# 14255
try ,
0
example# 14256
remove item from self dictionary .
0
example# 14257
if KeyError exception is caught ,
0
example# 14258
do nothing .
0
example# 14259
define the method __iter__ with an argument self .
0
example# 14260
convert keys of dictionary self.dict [ self . dict ] into a iterable , return it .
0
example# 14261
define the method __contains__ with 2 arguments : self and item .
0
example# 14262
if item is contained in self.dict [ self . dict ] , return boolean True , otherwise return boolean False .
0
example# 14263
define the method __nonzero__ with an argument self .
0
example# 14264
convert self.dict [ self . dict ] into boolean , return the result .
0
example# 14265
derive the class MultiValueDictKeyError from the KeyError base class .
0
example# 14266
do nothing .
0
example# 14267
derive the class MultiValueDict from the dict base class .
0
example# 14268
define the method __init__ with 2 arguments : self and key_to_list_mapping set to an empty tuple .
0
example# 14269
call the method __init__ from the base class of the class MultiValueDict , with an argument key_to_list_mapping .
0
example# 14270
define the method __repr__ with an argument self .
0
example# 14271
return a string _STR:0_ formated with self.__class__.__name__ [ self . __class__ . __name__ ] ,
1
"<%s: %s>" ||| _STR:0_
example# 14272
and a result of the method __repr__ called from instance of base class of the MultiValueDict class . define the method __getitem__ with 2 arguments : self and key .
0
example# 14273
try ,
0
example# 14274
call the method __getitem__ from the base class of the class MultiValueDict , with an argument key , substitute the result for list_ .
0
example# 14275
if KeyError exception is caught ,
0
example# 14276
raise an MultiValueDictKeyError exception with printable representation of key .
0
example# 14277
try ,
0
example# 14278
return last element of list_ .
0
example# 14279
if IndexError exception is caught ,
0
example# 14280
return an empty list .
0
example# 14281
define the method __setitem__ with 3 arguments : self , key and value .
0
example# 14282
call the method __setitem__ from the base class of the class MultiValueDict , with 2 arguments key and list containing element value .
0
example# 14283
define the method __copy__ with an argument self .
0
example# 14284
call the method self.__class__ [ self . __class__ ] with an argument list , with elements : tuples with 2 elements : k and hard copy of list v ,
0
example# 14285
for every k and v in result of method the self.lists [ self . lists ] . define the method __deepcopy__ with 2 arguments : self and memo set to None .
0
example# 14286
if memo is None ,
0
example# 14287
memo is an empty dictionary .
0
example# 14288
call the method self.__class__ [ self . __class__ ] , substitute the result for result .
0
example# 14289
substitute result for value under the id of self key of memo dictionary .
0
example# 14290
for every key and value in items of dictionary self ,
0
example# 14291
call the method dict.__setitem__ [ dict . __setitem__ ] with 3 arguments : result , result of the function copy.deepcopy [ copy . deepcopy ] , called with 2 arguments : key ,
0
example# 14292
and memo , and result of the function copy.deepcopy [ copy . deepcopy ] called with 2 arguments : value and memo . return result .
0
example# 14293
define the method __getstate__ with an argument self .
0
example# 14294
call the method self.__dict__.copy [ self . __dict__ . copy ] , substitute the result for obj_dict .
0
example# 14295
value under _STR:0_ key of obj_dict is a dictionary created with tuples containing 2 elements : k and result of the function ,
1
'_data' ||| _STR:0_
example# 14296
self.getlist [ self . getlist ] with an argument k , for every k in self . return obj_dict .
0
example# 14297
define the method __setstate__ with 2 arguments : self and obj_dict .
0
example# 14298
remove element under _STR:0_ key of obj_dict dictionary , if it exists substitute it for data , if not data is an empty list .
1
'_data' ||| _STR:0_
example# 14299
call the method data.items [ data . items ] , for every k and v in the result ,
0
example# 14300
call the method self.setlist [ self . setlist ] with 2 arguments : k and v .
0
example# 14301
update self.__dict__ [ self . __dict__ ] dictionary with obj_dict .
0
example# 14302
define the method get with 3 arguments : self , key and default set to None .
0
example# 14303
try ,
0
example# 14304
substitute value under the key key of self dictionary for val .
0
example# 14305
if KeyError exception is caught ,
0
example# 14306
return default ,
0
example# 14307
if val equals an empty list .
0
example# 14308
return default .
0
example# 14309
return val .
0
example# 14310
define the method getlist with 3 arguments : self , key and default set to None .
0
example# 14311
try ,
0
example# 14312
call the method __getitem__ from the base class of the class MultiValueDict , with an argument key , return the result.. [ result .  .  ]
0
example# 14313
if KeyError exception is caught ,
0
example# 14314
if default is None ,
0
example# 14315
return an empty list .
0
example# 14316
return default .
0
example# 14317
define the method setlist with 3 arguments : self , key and list_ .
0
example# 14318
call the method __setitem__ from the base class of the class MultiValueDict , with 2 arguments key and list_ .
0
example# 14319
define the method setdefault with 3 arguments : self , key and default set to None .
0
example# 14320
if key is not contanied in self ,
0
example# 14321
substitute default for value under the key key of self dictionary .
0
example# 14322
return value under the key key of self dictionary .
0
example# 14323
define the method setlistdefault with 3 arguments : self , key and default_list set to None .
0
example# 14324
if key is not contained in self ,
0
example# 14325
if default_list is None ,
0
example# 14326
default_list is an empty list .
0
example# 14327
call the method self.setlist [ self . setlist ] with 2 arguments : key and default_list .
0
example# 14328
call the method self.getlist [ self . getlist ] with an argument key , return the result .
0
example# 14329
define the method appendlist with 3 arguments : self , key and value .
0
example# 14330
call the method self.setlistdefault [ self . setlistdefault ] with an argument key , append value to the result .
0
example# 14331
define the method _iteritems with an argument self .
0
example# 14332
for every key in self ,
0
example# 14333
yield key and value under the key key of self dictionary .
0
example# 14334
define the method _iterlists with an argument self .
0
example# 14335
call the function six.iteritems [ six . iteritems ] with an argument : instance of base class of the MultiValueDict class , return the result .
0
example# 14336
define the method _itervalues with an argument self .
0
example# 14337
for every key in self ,
0
example# 14338
yield value under key key of self dictionary .
0
example# 14339
if six.PY3 [ six . PY3 ] is true ,
0
example# 14340
substitute _iteritems for items .
0
example# 14341
substitute _iterlists for lists .
0
example# 14342
substitute _itervalues for values .
0
example# 14343
if not ,
0
example# 14344
substitute _iteritems for iteritems .
0
example# 14345
substitute _iterlists for iterlists .
0
example# 14346
substitute _itervalues for itervalues .
0
example# 14347
define the method items with an argument self .
0
example# 14348
call the method self.iteritems [ self . iteritems ] , return list of results .
0
example# 14349
define the method lists with an argument self .
0
example# 14350
call the method self.iterlists [ self . iterlists ] , return list of results .
0
example# 14351
define the method values with an argument self .
0
example# 14352
call the method self.itervalues [ self . itervalues ] , return list of results .
0
example# 14353
define the method copy with an argument self .
0
example# 14354
call the method copy.copy [ copy . copy ] with an argument self , return the result .
0
example# 14355
define the method update with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
0
example# 14356
if length of args is greater than integer 1 ,
0
example# 14357
raise an TypeError with an argument string _STR:0_ formated with length of args .
1
"update expected at most 1 arguments, got %d" ||| _STR:0_
example# 14358
if args is true ,
0
example# 14359
substitute first args for other_dict .
0
example# 14360
if other_dict is an instance of MultiValueDict .
0
example# 14361
call the method other_dict.lists [ other_dict . lists ] , for every key and value_list in result ,
0
example# 14362
call the method self.setlistdefault [ self . setlistdefault ] with an argument key , extend the result with value_list .
0
example# 14363
if not ,
0
example# 14364
trym
0
example# 14365
for every key and value in items of other_dict dictionary ,
0
example# 14366
call the method self.setlistdefault [ self . setlistdefault ] with an argument key , append value to the result .
0
example# 14367
if TypeError exception is caught ,
0
example# 14368
raise an ValueError with an argument string _STR:0_ .
1
"MultiValueDict.update() takes either a MultiValueDict or dictionary" ||| _STR:0_
example# 14369
call the function six.iteritems [ six . iteritems ] with an argument kwargs , for every key and value in the result ,
0
example# 14370
call the method self.setlistdefault [ self . setlistdefault ] with an argument key , append value to the result .
0
example# 14371
define the method dict with an argument self .
0
example# 14372
return dictionary created with tuples with 2 elements : key and value under the key key of self dictionary , for every key in self .
0
example# 14373
derive the class ImmutableList from the tuple base class .
0
example# 14374
define the method __new__ with 3 arguments : cls , unpacked list args and unpacked dictionary kwargs .
0
example# 14375
if _STR:0_ is contained in kwargs ,
1
'warning' ||| _STR:0_
example# 14376
substitute value under _STR:0_ key of kwargs dictionary for warning .
1
'warning' ||| _STR:0_
example# 14377
delete element under _STR:0_ key of kwargs dictionary .
1
'warning' ||| _STR:0_
example# 14378
if not ,
0
example# 14379
warning is a string _STR:0_ .
1
'ImmutableList object is immutable.' ||| _STR:0_
example# 14380
call the method tuple.__new__ [ tuple . __new__ ] with 3 arguments : cls , unpacked list args and unpacked dictionary kwargs , substitute the result for self .
0
example# 14381
substitute warning for self.warning [ self . warning ] .
0
example# 14382
return self .
0
example# 14383
define the method complain with 3 arguments : self , unpacked dictionary wargs and unpacked dictionary kwargs .
0
example# 14384
if self.warning [ self . warning ] is an instance of Exception class ,
0
example# 14385
raise self.warning [ self . warning ] .
0
example# 14386
if not ,
0
example# 14387
raise an raise self.warning [ self . warning ] with an argument self.warning [ self . warning ] .
0
example# 14388
substitute complain for __delitem__ .
0
example# 14389
substitute complain for __delslice__ .
0
example# 14390
substitute complain for __iadd__ .
0
example# 14391
substitute complain for __imul__ .
0
example# 14392
substitute complain for __setitem__ .
0
example# 14393
substitute complain for __setslice__ .
0
example# 14394
substitute complain for append .
0
example# 14395
substitute complain for extend .
0
example# 14396
substitute complain for insert .
0
example# 14397
substitute complain for pop .
0
example# 14398
substitute complain for remove .
0
example# 14399
substitute complain for sort .
0
example# 14400
substitute complain for reverse .
0
example# 14401
derive the class DictWrapper from the dict base class .
0
example# 14402
define the method __init__ with 4 arguments : self , data , func and prefix .
0
example# 14403
call the method __init__ with an argument data , from the base class of the class DictWrapper .
0
example# 14404
substitute func for self.func [ self . func ] .
0
example# 14405
substitute prefix for self.prefix [ self . prefix ] .
0
example# 14406
define the method __getitem__ with 2 arguments : self and key .
0
example# 14407
if key starts with self.prefix [ self . prefix ] .
0
example# 14408
use_func is boolean True .
0
example# 14409
key is a list with elements of list key from length of self.prefixes [ self . prefixes ] index to the end ,
0
example# 14410
if not ,
0
example# 14411
use_func is boolean False .
0
example# 14412
call the method __getitem__ with an argument key from the base class of the class DictWrapper , substitute the result for value .
0
example# 14413
if use_func is true ,
0
example# 14414
call the method self.func [ self . func ] with an argument value .
0
example# 14415
return value .
0
example# 14416
from __future__ import unicode_literals into default name space .
0
example# 14417
import module re .
0
example# 14418
import module time .
0
example# 14419
import module calendar .
0
example# 14420
import module datetime .
0
example# 14421
from django.utils.dates [ django . utils . dates ] import MONTHS , MONTHS_3 , MONTHS_ALT , MONTHS_AP , WEEKDAYS and WEEKDAYS_ABBR into default name space .
0
example# 14422
from django.utils.translation [ django . utils . translation ] import ugettext as _ into default name space .
0
example# 14423
from django.utils.encoding [ django . utils . encoding ] import force_text into default name space .
0
example# 14424
from django.utils [ django . utils ] import six into default name space .
0
example# 14425
from django.utils.timezone [ django . utils . timezone ] import get_default_timezone , is_aware and is_naive into default name space .
0
example# 14426
compile regex from a string _STR:0_ , substitute it for re_formatchars .
1
'(?<!\\)([aAbBcdDeEfFgGhHiIjlLmMnNoOPrsStTUuwWyYzZ])' ||| _STR:0_
example# 14427
compile regex from a string _STR:0_ , substitute it for re_escaped .
1
'\\(.)' ||| _STR:0_
example# 14428
derive the class Formatter from object base class .
0
example# 14429
define the function format with 2 arguments self and formatstr .
0
example# 14430
pieces is an empty list .
0
example# 14431
call the function force_text with an argument formatstr , use the result as an argument for the call to the method ,
0
example# 14432
re_formatchars.split [ re_formatchars . split ] , for every i and piece in enumerated result , if i is even number ,
0
example# 14433
get attribute piece of the self object , call it and use the result as an argument for the call to the function force_text ,
0
example# 14434
append the result to pieces . otherwise if piece is true ,
0
example# 14435
call the method re_escaped.sub [ re_escaped . sub ] with 2 arguments : raw string _STR:0_ and piece , append the result to pieces .
1
'\1' ||| _STR:0_
example# 14436
join elements of pieces into a string , return it .
0
example# 14437
derive the class TimeFormat from the base class Formatter .
0
example# 14438
define the method __init__ with 2 arguments : self and obj .
0
example# 14439
substitute obj for self.data [ self . data ] .
0
example# 14440
self.timezone [ self . timezone ] is None .
0
example# 14441
if obj is an instance of datetime.datetime [ datetime . datetime ] ,
0
example# 14442
call the function is_naive with an argument obj .
0
example# 14443
call the function get_default_timezone , substitute the result for self.timezone [ self . timezone ] .
0
example# 14444
if not ,
0
example# 14445
substitute obj.tzinfo [ obj . tzinfo ] for self.timezone [ self . timezone ] .
0
example# 14446
define the method a with an argument self .
0
example# 14447
if self.data.hour [ self . data . hour ] is greater than integer 11 ,
0
example# 14448
call the function _ with an argument string _STR:0_ , return the result .
1
'p.m.' ||| _STR:0_
example# 14449
call the function _ with an argument string _STR:0_ , return the result .
1
'a.m.' ||| _STR:0_
example# 14450
define the method A with an argument self .
0
example# 14451
if self.data.hour [ self . data . hour ] is greater than integer 11 ,
0
example# 14452
call the function _ with an argument string _STR:0_ , return the result .
1
'PM' ||| _STR:0_
example# 14453
call the function _ with an argument string _STR:0_ , return the result .
1
'AM' ||| _STR:0_
example# 14454
define the method B with an argument self .
0
example# 14455
raise an NotImplementedError exception with an argument string _STR:0_ .
1
'may be implemented in a future release' ||| _STR:0_
example# 14456
define the method e with an argument self .
0
example# 14457
if self.timezone [ self . timezone ] is false ,
0
example# 14458
return an empty string .
0
example# 14459
try ,
0
example# 14460
is self.data [ self . data ] has an attribute _STR:0_ and self.data.tzinfo [ self . data . tzinfo ] is true ,
1
'tzinfo' ||| _STR:0_
example# 14461
call the method self.data.tzinfo.tzname [ self . data . tzinfo . tzname ] with an argument self.data [ self . data ] , if it is true , return it , otherwise return an empty string .
0
example# 14462
if NotImplementedError exception is caught ,
0
example# 14463
do nothing .
0
example# 14464
return an empty string .
0
example# 14465
define the method f with an argument self .
0
example# 14466
if self.data.minute [ self . data . minute ] equals integer 0 ,
0
example# 14467
call the method self.g [ self . g ] , return the result .
0
example# 14468
return a string _STR:0_ formated with the results of the functions self.g [ self . g ] and self.i [ self . i ] , respectivley .
1
'%s:%s' ||| _STR:0_
example# 14469
define the method g with an argument self .
0
example# 14470
if self.data.hour [ self . data . hour ] equals integer 0 ,
0
example# 14471
return integer 12 .
0
example# 14472
if self.data.hour [ self . data . hour ] is greater than inreger 12 ,
0
example# 14473
subtract integer 12 from self.data.hour [ self . data . hour ] , return the result .
0
example# 14474
return self.data.hour [ self . data . hour ] .
0
example# 14475
define the method G with an argument self .
0
example# 14476
return self.data.hour [ self . data . hour ] .
0
example# 14477
define the method h with an argument self .
0
example# 14478
return a string _STR:0_ formated with the result of the function self.g [ self . g ] .
1
'%02d' ||| _STR:0_
example# 14479
define the method H with an argument self .
0
example# 14480
return a string _STR:0_ formated with the result of the function self.G [ self . G ] .
1
'%02d' ||| _STR:0_
example# 14481
define the method i with an argument self .
0
example# 14482
return a string _STR:0_ formated with self.data.minute [ self . data . minute ] .
1
'%02d' ||| _STR:0_
example# 14483
define the method O with an argument self .
0
example# 14484
if self.timezone [ self . timezone ] is false ,
0
example# 14485
return an empty string .
0
example# 14486
call the method self.Z [ self . Z ] , substitute the result for seconds .
0
example# 14487
if seconds smaller than integer 0 , sign is _STR:0_ , otherwise sign is _STR:1_ ,
2
'-' ||| _STR:0_
'+' ||| _STR:1_
example# 14488
substitute absolute seconds for seconds .
0
example# 14489
return a string _STR:0_ formated with sign , floored result of the division of seconds by integer 3000 ,
1
"%s%02d%02d" ||| _STR:0_
example# 14490
reminder of the division of floored result of division of seconds by 60 , by integer 60. define the method P with an argument self .
0
example# 14491
if self.data.minute [ self . data . minute ] equals integer 0 and self.data.hour [ self . data . hour ] equals integer 0 ,
0
example# 14492
call the function _ with an argument string _STR:0_ , return the result .
1
'midnight' ||| _STR:0_
example# 14493
if self.data.minute [ self . data . minute ] equals integer 0 and self.data.hour [ self . data . hour ] equals integer 12 ,
0
example# 14494
call the function _ with an argument string _STR:0_ , return the result .
1
'noon' ||| _STR:0_
example# 14495
return a string _STR:0_ formated with self.data.month [ self . data . month ] .
1
'%02d' ||| _STR:0_
example# 14496
define the method s with an argument self .
0
example# 14497
return a string _STR:0_ formated with self.data.second [ self . data . second ] .
1
'%02d' ||| _STR:0_
example# 14498
define the method T with an argument self .
0
example# 14499
if self.timezone [ self . timezone ] is false ,
0
example# 14500
return an empty string .
0
example# 14501
if self.timezone [ self . timezone ] is true , call the method self.timezone.tzname [ self . timezone . tzname ] with an argument self.data [ self . data ] , substitute the result for name ,
0
example# 14502
otherwise name is None . if name is None ,
0
example# 14503
call the method self.format [ self . format ] with an argument string _STR:0_ , substitute the result for name .
1
'0' ||| _STR:0_
example# 14504
call the function six.text_type [ six . text_type ] with an argument name , return the result .
0
example# 14505
define the method u with an argument self .
0
example# 14506
return a string _STR:0_ formated with self.data.microsecond [ self . data . microsecond ] .
1
'%06d' ||| _STR:0_
example# 14507
define the method Z with an argument self .
0
example# 14508
if self.timezone [ self . timezone ] is true ,
0
example# 14509
return an empty string .
0
example# 14510
call the method self.timezone.utcoffset [ self . timezone . utcoffset ] with an argument self.data [ self . data ] , substitute the result for offset .
0
example# 14511
multiply offset.days [ offset . days ] with 86400 , add offset.seconds [ offset . seconds ] to the result , return the result .
0
example# 14512
derive the class DateFormat from the base class TimeFormat .
0
example# 14513
year_days is a list with 13 elements : None , integer 0 , integer 31 , integer 59 , integer 90 , integer 120 , integer 151 , integer 181 ,
0
example# 14514
integer 212 , integer 243 , integer 273 , integer 304 and integer 334. define the method b with an argument self .
0
example# 14515
return the value under the self.data.month [ self . data . month ] key of the MONTHS_3 dictionary .
0
example# 14516
define the method c with an argument self .
0
example# 14517
call the method self.data.isoformat [ self . data . isoformat ] , return the result .
0
example# 14518
define the method d with an argument self .
0
example# 14519
return a string _STR:0_ formated with self.data.day [ self . data . day ] .
1
'%02d' ||| _STR:0_
example# 14520
define the method D with an argument self .
0
example# 14521
call the method self.data.weekday [ self . data . weekday ] , use the result as an key for obtaining WEEKDAYS_ABBR dictionary value , return it .
0
example# 14522
define the method E with an argument self .
0
example# 14523
return the value under the self.data.month [ self . data . month ] key of the MONTHS_ALT dictionary .
0
example# 14524
define the method F with an argument self .
0
example# 14525
return the value under the self.data.month [ self . data . month ] key of the MONTHS dictionary .
0
example# 14526
define the method I with an argument self .
0
example# 14527
if self.timezone [ self . timezone ] is true and call to the method self.timezone.dst [ self . timezone . dst ] with an argument self.data [ self . data ] , evaluates to true ,
0
example# 14528
return string _STR:0_ .
1
'1' ||| _STR:0_
example# 14529
if not ,
0
example# 14530
return string _STR:0_ .
1
'0' ||| _STR:0_
example# 14531
define the method j with an argument self .
0
example# 14532
return self.data.day [ self . data . day ] .
0
example# 14533
define the method l with an argument self .
0
example# 14534
call the method self.data.weekday [ self . data . weekday ] , use the result as an key for obtaining WEEKDAYS dictionary value , return it .
0
example# 14535
define the method L with an argument self .
0
example# 14536
call the method calendar.isleap [ calendar . isleap ] with an argument self.data.year [ self . data . year ] , return the result .
0
example# 14537
define the method m with an argument self .
0
example# 14538
return a string _STR:0_ formated with self.data.month [ self . data . month ] .
1
'%02d' ||| _STR:0_
example# 14539
define the method M with an argument self .
0
example# 14540
get the value under the self.data.month [ self . data . month ] key of the MONTHS_3 dictionary , call on it the method title , return the result .
0
example# 14541
define the method n with an argument self .
0
example# 14542
return self.data.month [ self . data . month ] .
0
example# 14543
define the method N with an argument self .
0
example# 14544
return the value under the self.data.month [ self . data . month ] key of the MONTHS_AP dictionary .
0
example# 14545
define the method o with an argument self .
0
example# 14546
call the method self.data.isocalendar [ self . data . isocalendar ] , return the first element of the result .
0
example# 14547
define the method r with an argument self .
0
example# 14548
call the method return self.format [ self . format ] with an argument string _STR:0_ , return the result .
1
'D, j M Y H:i:s O' ||| _STR:0_
example# 14549
define the method S with an argument self .
0
example# 14550
if self.data.day [ self . data . day ] equals integer 11 , 12 or 13 ,
0
example# 14551
return string _STR:0_ .
1
'th' ||| _STR:0_
example# 14552
divide self.data.day [ self . data . day ] by 10 , substitute reminder of the result for last .
0
example# 14553
if las equals integer 1 ,
0
example# 14554
return string _STR:0_ .
1
'st' ||| _STR:0_
example# 14555
if las equals integer 2 ,
0
example# 14556
return string _STR:0_ .
1
'nd' ||| _STR:0_
example# 14557
if las equals integer 3 ,
0
example# 14558
return string _STR:0_ .
1
'rd' ||| _STR:0_
example# 14559
return string _STR:0_ .
1
'th' ||| _STR:0_
example# 14560
define the method t with an argument self .
0
example# 14561
call the method calendar.monthrange [ calendar . monthrange ] with 2 arguments : self.data.year [ self . data . year ] and self.data.month [ self . data . month ] ,
0
example# 14562
format string _STR:0_ with the second element of the result , return it . define the method U with an argument self .
1
'%02d' ||| _STR:0_
example# 14563
if self.data [ self . data ] is an instance of datetime.datetime [ datetime . datetime ] and result of the function is_aware called with an argument self.data [ self . data ] evaluates to true ,
0
example# 14564
call the method self.data.utctimetuple [ self . data . utctimetuple ] , use the result as an argument for the call to the function calendar.timegm [ calendar . timegm ] ,
0
example# 14565
return result converted into an integer . if not ,
0
example# 14566
call the method self.data.timetuple [ self . data . timetuple ] , use the result as an argument for the call to the function time.mktime [ time . mktime ] ,
0
example# 14567
return result converted into an integer . define the method w with an argument self .
0
example# 14568
call the method self.data.weekday [ self . data . weekday ] , increment the result by an integer 1 , divide it with integer 7 , return the reminder of the division .
0
example# 14569
define the method W with an argument self .
0
example# 14570
week_number is None .
0
example# 14571
call the method self.data.replace [ self . data . replace ] with 2 arguments : month as integer 1 and day as integer 1 , on the result call the method ,
0
example# 14572
weekday , increment the result by integer 1 and substitute it for jan1_weekday . call the method self.data.weekday [ self . data . weekday ] , increment the result by integer 1 , substitute the result for weekday .
0
example# 14573
call the method self.z [ self . z ] , substitute the result for day_of_year .
0
example# 14574
if day_of_year is smaller than or equalt to jan1_weekday subtracted from integer 8 and jan1_weekday is greater than integer 4 ,
0
example# 14575
if jan1_weekday equals integer 5 , or if jan1_weekday equals integer 6 and call to the function calendar.isleap [ calendar . isleap ] ,
0
example# 14576
with an argument self.data.year [ self . data . year ] decremented by 1 , evaluates to true , week_number is integer 53 .
0
example# 14577
if not ,
0
example# 14578
week_number is integer 52 .
0
example# 14579
if not ,
0
example# 14580
call the function calendar.isleap [ calendar . isleap ] with an argument self.data.year [ self . data . year ] , if it evaluates to true ,
0
example# 14581
i is integer 366 .
0
example# 14582
if not ,
0
example# 14583
i is integer 365 .
0
example# 14584
subtract day_of_year from i , if the result is smaller than the result of subtraction of weekday from integer 4 ,
0
example# 14585
week_number is integer 1 .
0
example# 14586
if not ,
0
example# 14587
sum day_of_year , result of the subtraction of weekday from integer 7 and subtraction of integer 1 from jan1_weekday .
0
example# 14588
divide j by integer 7 , substitute the floored result for week_number .
0
example# 14589
if jan1_weekday is greater than integer 4 ,
0
example# 14590
decrement week_number by integer 1 .
0
example# 14591
return week_number .
0
example# 14592
define the method y with an argument self .
0
example# 14593
call the function six.text_type [ six . text_type ] with an argument self.data.year [ self . data . year ] , return the result without the first 2 elements .
0
example# 14594
define the method Y with an argument self .
0
example# 14595
return self.data.year [ self . data . year ] .
0
example# 14596
define the method z with an argument self .
0
example# 14597
append self.data.day [ self . data . day ] to the value under the self.data.month [ self . data . month ] key of the self.year_days [ self . year_days ] dictionary , substitute the result for doy .
0
example# 14598
if call to the method self.L [ self . L ] evaluates to true , and result of the call to the method self.data.month [ self . data . month ] is greater than integer 2 ,
0
example# 14599
increment doy by integer 1 .
0
example# 14600
return doy .
0
example# 14601
define the function format with 2 arguments : value and format_string .
0
example# 14602
df is an instance of DateFormat class , created with an argument value .
0
example# 14603
call the method df.format [ df . format ] with an argument format_string , return the result .
0
example# 14604
define the function time_format with 2 arguments : value and format_string .
0
example# 14605
tf is an instance of TimeFormat class , created with an argument value .
0
example# 14606
call the method tf.format [ tf . format ] with an argument format_string , return the result .
0
example# 14607
import module datetime .
0
example# 14608
import module re .
0
example# 14609
from django.utils [ django . utils ] import six into default name space .
0
example# 14610
from django.utils.timezone [ django . utils . timezone ] import utc and get_fixed_timezone into default name space .
0
example# 14611
compile regex from raw string _STR:0_ , substitute it for date_re .
1
'(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})$' ||| _STR:0_
example# 14612
compile regex from raw string _STR:0_ ,
1
'(?P<hour>\d{1,2}):(?P<minute>\d{1,2})(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?' ||| _STR:0_
example# 14613
substitute it for time_re . compile regex from raw string _STR:0_
1
'(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})[T ](?P<hour>\d{1,2}):(?P<minute>\d{1,2})' ||| _STR:0_
example# 14614
_STR:0_ , substitute it for datetime_re . define the function parse_date with an argument value .
1
'(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?(?P<tzinfo>Z|[+-]\d{2}(?::?\d{2})?)?$' ||| _STR:0_
example# 14615
match regex date_re with value , substitute the result for match .
0
example# 14616
if match is true ,
0
example# 14617
call the method match.groupdict [ match . groupdict ] , use the result as an argument for the call to the function six.iteritems [ six . iteritems ] ,
0
example# 14618
for every k and v in the previous result , add a key into a dictionary : v converted to an integer for k , substitute the resulting dictionary for kw . call the method datetime.date [ datetime . date ] with an argument unpacked dictionary kw , return the result .
0
example# 14619
define the function parse_time with an argument value .
0
example# 14620
match regex time_re with value , substitute the result for match .
0
example# 14621
if match is true ,
0
example# 14622
call the method match.groupdict [ match . groupdict ] , substitute the result for kw .
0
example# 14623
if value under the _STR:0_ key of the kw dictionary is true ,
1
'microsecond' ||| _STR:0_
example# 14624
left justify value under the _STR:0_ key of the kw dictionary , in the field of width 6 , fill the rest with _STR:1_ ,
2
'microsecond' ||| _STR:0_
'0' ||| _STR:1_
example# 14625
substitute the result for value under the _STR:0_ key of the kw dictionary . update a dictionary with an entry v converted to an integer for k , for every k and v in result of the function six.iteritems [ six . iteritems ] ,
1
'microsecond' ||| _STR:0_
example# 14626
called with an argument kw , only if v is not None , substitute the result for kw . call the method datetime.time [ datetime . time ] with an argument unpacked dictionary kw , return the result .
0
example# 14627
define the function parse_datetime with an argument value .
0
example# 14628
match regex datetime_re with value , substitute the result for match .
0
example# 14629
if match is true ,
0
example# 14630
call the method match.groupdict [ match . groupdict ] , substitute the result for kw .
0
example# 14631
if value under the _STR:0_ key of the kw dictionary is true ,
1
'microsecond' ||| _STR:0_
example# 14632
left justify value under the _STR:0_ key of the kw dictionary , in the field of width 6 , fill the rest with _STR:1_ ,
2
'microsecond' ||| _STR:0_
'0' ||| _STR:1_
example# 14633
substitute the result for value under the _STR:0_ key of the kw dictionary . remove entry under the _STR:1_ key of the kw dictionary , substitute it for tzinfo .
2
'tzinfo' ||| _STR:1_
'microsecond' ||| _STR:0_
example# 14634
if tzinfo equals a string _STR:0_ ,
1
'Z' ||| _STR:0_
example# 14635
substitute utc for tzinfo .
0
example# 14636
otherwise if tzinfo is not None ,
0
example# 14637
if length of tzinfo is greater than integer 3 , convert elements of tzinfo from indexes 1 to 3 to an integer ,
0
example# 14638
substitute the result for offset_mins , otherwise offset_mins is integer 0. convert elements of tzinfo from indexes 1 to 3 to an integer , multiply it by integer 60 and increment it by offset_mins ,
0
example# 14639
substitute the result for offset . if first element of tzinfo equals _STR:0_ ,
1
'-' ||| _STR:0_
example# 14640
multiply offset by integer -1 .
0
example# 14641
call the function get_fixed_timezone with an argument offset , substitute the result for tzinfo .
0
example# 14642
update a dictionary with an entry v converted to an integer for k , for every k and v in result of the function six.iteritems [ six . iteritems ] ,
0
example# 14643
called with an argument kw , only if v is not None , substitute the result for kw . substitute tzinfo for value under the _STR:0_ key of the kw dictionary .
1
'tzinfo' ||| _STR:0_
example# 14644
call the method datetime.datetime [ datetime . datetime ] with an argument unpacked dictionary kw , return the result .
0
example# 14645
from django.utils.translation [ django . utils . translation ] import ugettext_lazy as _ and pgettext_lazy into default name space .
0
example# 14646
WEEKDAYS is an dictionary with 7 entries : result of the call to the function _ with an argument string _STR:0_ for 0 ,
1
'Monday' ||| _STR:0_
example# 14647
result of the call to the function _ with an argument string _STR:0_ for 1 , result of the call to the function _ with an argument string _STR:1_ for 2 , result of the call to the function _ with an argument string _STR:2_ for 3 , result of the call to the function _ with an argument string _STR:3_ for 4 , result of the call to the function _ with an argument string _STR:4_ for 5 , and result of the call to the function _ with an argument string _STR:5_ for 6 . WEEKDAYS_ABBR is an dictionary with 7 entries : result of the call to the function _ with an argument string _STR:6_ for 0 ,
7
'Sunday' ||| _STR:5_
'Wednesday' ||| _STR:1_
'Mon' ||| _STR:6_
'Thursday' ||| _STR:2_
'Saturday' ||| _STR:4_
'Friday' ||| _STR:3_
'Tuesday' ||| _STR:0_
example# 14648
result of the call to the function _ with an argument string _STR:0_ for 1 , result of the call to the function _ with an argument string _STR:1_ for 2 , result of the call to the function _ with an argument string _STR:2_ for 3 , result of the call to the function _ with an argument string _STR:3_ for 4 , result of the call to the function _ with an argument string _STR:4_ for 5 , and result of the call to the function _ with an argument string _STR:5_ for 6 . WEEKDAYS_REV is an dictionary with 7 entries : 0 for _STR:6_ , 1 for _STR:7_ , 2 for _STR:8_ , 3 for _STR:9_ , 4 for _STR:10_ , 5 for _STR:11_ and 6 for _STR:12_ .
13
'sunday' ||| _STR:12_
'Sat' ||| _STR:4_
'monday' ||| _STR:6_
'wednesday' ||| _STR:8_
'friday' ||| _STR:10_
'Sun' ||| _STR:5_
'tuesday' ||| _STR:7_
'Tue' ||| _STR:0_
'Fri' ||| _STR:3_
'saturday' ||| _STR:11_
'thursday' ||| _STR:9_
'Thu' ||| _STR:2_
'Wed' ||| _STR:1_
example# 14649
MONTHS is an dictionary with 12 entries : result of the call to the function _ with an argument string _STR:0_ for 1 ,
1
'January' ||| _STR:0_
example# 14650
result of the call to the function _ with an argument string _STR:0_ for 2 , result of the call to the function _ with an argument string _STR:1_ for 3 , result of the call to the function _ with an argument string _STR:2_ for 4 , result of the call to the function _ with an argument string _STR:3_ for 5 , result of the call to the function _ with an argument string _STR:4_ for 6 , result of the call to the function _ with an argument string _STR:5_ for 7 , result of the call to the function _ with an argument string _STR:6_ for 8 , result of the call to the function _ with an argument string _STR:7_ for 9 , result of the call to the function _ with an argument string _STR:8_ for 10 , result of the call to the function _ with an argument string _STR:9_ for 11 , and result of the call to the function _ with an argument string _STR:10_ for 12 . MONTHS_3 is an dictionary with 12 entries : result of the call to the function _ with an argument string _STR:11_ for 1 ,
12
'March' ||| _STR:1_
'November' ||| _STR:9_
'August' ||| _STR:6_
'May' ||| _STR:3_
'April' ||| _STR:2_
'jan' ||| _STR:11_
'September' ||| _STR:7_
'July' ||| _STR:5_
'December' ||| _STR:10_
'June' ||| _STR:4_
'October' ||| _STR:8_
'February' ||| _STR:0_
example# 14651
result of the call to the function _ with an argument string _STR:0_ for 2 , result of the call to the function _ with an argument string _STR:1_ for 3 , result of the call to the function _ with an argument string _STR:2_ for 4 , result of the call to the function _ with an argument string _STR:3_ for 5 , result of the call to the function _ with an argument string _STR:4_ for 6 , result of the call to the function _ with an argument string _STR:5_ for 7 , result of the call to the function _ with an argument string _STR:6_ for 8 , result of the call to the function _ with an argument string _STR:7_ for 9 , result of the call to the function _ with an argument string _STR:8_ for 10 , result of the call to the function _ with an argument string _STR:9_ for 11 , result of the call to the function _ with an argument string _STR:10_ for 12 . MONTHS_3_REV is an dictionary with 12 entries : 1 for _STR:11_ , 2 for _STR:0_ , 3 for _STR:1_ , 4 for _STR:2_ , 5 for _STR:3_ , 6 for _STR:4_ ,
12
'feb' ||| _STR:0_
'apr' ||| _STR:2_
'may' ||| _STR:3_
'nov' ||| _STR:9_
'dec' ||| _STR:10_
'jan' ||| _STR:11_
'jun' ||| _STR:4_
'aug' ||| _STR:6_
'mar' ||| _STR:1_
'oct' ||| _STR:8_
'sep' ||| _STR:7_
'jul' ||| _STR:5_
example# 14652
7 for _STR:0_ , 8 for _STR:1_ , 9 for _STR:2_ , 10 for _STR:3_ , 11 for _STR:4_ and 12 for _STR:5_ . MONTHS_AP is an dictionary with 12 entries : result of the function pgettext_lazy with 2 arguments : _STR:6_ and _STR:7_ for 1 ,
8
'dec' ||| _STR:5_
'nov' ||| _STR:4_
'Jan.' ||| _STR:7_
'abbrev. month' ||| _STR:6_
'aug' ||| _STR:1_
'oct' ||| _STR:3_
'sep' ||| _STR:2_
'jul' ||| _STR:0_
example# 14653
result of the function pgettext_lazy with 2 arguments : strings _STR:0_ and _STR:1_ for 2 , result of the function pgettext_lazy with 2 arguments : strings _STR:0_ and _STR:2_ for 3 , result of the function pgettext_lazy with 2 arguments : strings _STR:0_ and _STR:3_ for 4 , result of the function pgettext_lazy with 2 arguments : strings _STR:0_ and _STR:4_ for 5 , result of the function pgettext_lazy with 2 arguments : strings _STR:0_ and _STR:5_ for 6 , result of the function pgettext_lazy with 2 arguments : strings _STR:0_ and _STR:6_ for 7 , result of the function pgettext_lazy with 2 arguments : strings _STR:0_ and _STR:7_ for 8 , result of the function pgettext_lazy with 2 arguments : strings _STR:0_ and _STR:8_ for 9 , result of the function pgettext_lazy with 2 arguments : strings _STR:0_ and _STR:9_ for 10 , result of the function pgettext_lazy with 2 arguments : strings _STR:0_ and _STR:10_ for 11 , result of the function pgettext_lazy with 2 arguments : strings _STR:0_ and _STR:11_ for 12 , MONTHS_ALT is an dictionary with 12 entries : result of the function pgettext_lazy with 2 arguments : _STR:12_ and _STR:13_ for 1 ,
14
'March' ||| _STR:2_
'May' ||| _STR:4_
'Feb.' ||| _STR:1_
'Dec.' ||| _STR:11_
'April' ||| _STR:3_
'Sept.' ||| _STR:8_
'July' ||| _STR:6_
'abbrev. month' ||| _STR:0_
'alt. month' ||| _STR:12_
'January' ||| _STR:13_
'June' ||| _STR:5_
'Oct.' ||| _STR:9_
'Aug.' ||| _STR:7_
'Nov.' ||| _STR:10_
example# 14654
from datetime import date as real_date and datetime as real_datetime into default name space .
0
example# 14655
import module re .
0
example# 14656
import module time .
0
example# 14657
derive the class date from the real_date base class .
0
example# 14658
define the method strftime with 2 arguments : self and fmt .
0
example# 14659
call the function strftime with 2 arguments : self and fmt , return the result .
0
example# 14660
derive the class datetime from the real_datetime base class .
0
example# 14661
define the method strftime with 2 arguments : self and fmt .
0
example# 14662
call the function strftime with 2 arguments : self and fmt , return the result .
0
example# 14663
decorator classmethod ,
0
example# 14664
define the method combine with 3 arguments : cls , date and time .
0
example# 14665
call the function cls with 8 arguments : date.year [ date . year ] , date.month [ date . month ] , date.day [ date . day ] , time.hour [ time . hour ] , time.minute [ time . minute ] , time.second [ time . second ] , time.microsecond [ time . microsecond ] ,
0
example# 14666
and time.tzinfo [ time . tzinfo ] , return the result . define the method date with an argument self .
0
example# 14667
call the function data with 3 arguments : self.year [ self . year ] , self.month [ self . month ] and self.day [ self . day ] , return the result .
0
example# 14668
define the function new_date with an argument d .
0
example# 14669
call the function data with 3 arguments : d.year [ d . year ] , d.month [ d . month ] and d.day [ d . day ] , return the result .
0
example# 14670
define the function new_datetime with an argument d .
0
example# 14671
kw is a list with 3 elements : d.year [ d . year ] , d.month [ d . month ] and d.day [ d . day ] .
0
example# 14672
if d is an instance of real_datetime class ,
0
example# 14673
extend list kw with a list with 5 elements : d.hour [ d . hour ] , d.minute [ d . minute ] , d.second [ d . second ] , d.microsecond [ d . microsecond ] and d.tzinfo [ d . tzinfo ] .
0
example# 14674
call the function datetime with an argument unpacked list kw , return the result .
0
example# 14675
compile the regex from the raw string _STR:0_ , substitute the result for _illegal_formatting .
1
"((^|[^%])(%%)*%[sy])" ||| _STR:0_
example# 14676
define the function _findall with 2 arguments text and substr .
0
example# 14677
sites is an empty list .
0
example# 14678
i is integer 0 .
0
example# 14679
endless loop ,
0
example# 14680
call the method text.find [ text . find ] with 2 arguments : substr and i , substitute the result for j .
0
example# 14681
if j equals to integer -1 ,
0
example# 14682
break from the loop execution .
0
example# 14683
append j to sites .
0
example# 14684
add j and integer 1 , substitute the result for i .
0
example# 14685
return sites .
0
example# 14686
define the function strftime with 2 arguments dt and fmt .
0
example# 14687
if dt.year [ dt . year ] is greater than or equal to integer 1900 ,
0
example# 14688
call the method strftime with an argument fmt , from the base class of the type of dt class .
0
example# 14689
call the method _illegal_formatting.search [ _illegal_formatting . search ] with an argument fmt , substitute the result for illegal_formatting .
0
example# 14690
if illegal_formatting is true ,
0
example# 14691
raise an TypeError exception with an argument : result of the method illegal_formatting.group [ illegal_formatting . group ] called with an argument ,
0
example# 14692
integer 0 , appended to a string _STR:0_ . substitute dt.year [ dt . year ] for year .
1
"strftime of dates before 1900 does not handle" ||| _STR:0_
example# 14693
subtract year from integer 2000 , substitute the result for delta .
0
example# 14694
floor the division of delta by integer 100 and delta by integer 400 , sum the two results , multiply integer 6 by it , substitute the result for off .
0
example# 14695
sum year and off , substitute the result for year .
0
example# 14696
subtract year from integer 2000 , divide the result by integer 28 , floor the result , multiply it with 28 and increment by year ,
0
example# 14697
substitute the result for year . call the method dt.timetuple [ dt . timetuple ] , substitute the result for timetuple .
0
example# 14698
call the function time.strftime [ time . strftime ] with 2 arguments : fmt and and timetuple without the first element ,
0
example# 14699
added to a tuple with an element year , substitute the result for s1 . call the function _findall with 2 arguments : s1 and year converted into a string , substitute the result for sites1 .
0
example# 14700
call the function time.strftime [ time . strftime ] with 2 arguments : fmt and and timetuple without the first element ,
0
example# 14701
added to a tuple with an element sum of year an integer 28 , substitute the result for s2 . call the function _findall with 2 arguments : s2 and sum of year and integer 28 , converted into a string , substitute the result for sites2 .
0
example# 14702
sites is an empty list .
0
example# 14703
if site is contained in sites1 ,
0
example# 14704
if site is contained in sites2 ,
0
example# 14705
append site to sites .
0
example# 14706
substitute s1 for s .
0
example# 14707
syear is a string _STR:0_ formated with dt.year [ dt . year ] .
1
"%04d" ||| _STR:0_
example# 14708
for every site in sites ,
0
example# 14709
concatenate first site elements of s , syear and elements of s from the site incremented by integer 4 index , substitute the result for s .
0
example# 14710
return s .
0
example# 14711
define the function deconstructible with 2 arguments : unpacked list args and unpacked dictionary kwargs .
0
example# 14712
remove elements under the _STR:0_ key of the kwargs dictionary , if it exists substitute it for path , if not path is None .
1
'path' ||| _STR:0_
example# 14713
define the function decorator with an argument klass .
0
example# 14714
define the method __new__ with 3 arguments : cls , unpacked list args and unpacked dictionary kwargs .
0
example# 14715
call the method __new__ with an argument cls from the base class of the klass function .
0
example# 14716
obj._constructor_args [ obj . _constructor_args ] is a tuple with 2 elements : args and kwargs .
0
example# 14717
return obj .
0
example# 14718
define the function deconstruct with an argument obj .
0
example# 14719
return a tuple with 3 elements : if path is true , path , in not , a string _STR:0_ formated with obj.__class__.__module__ [ obj . __class__ . __module__ ] ,
1
'%s.%s' ||| _STR:0_
example# 14720
and obj.__class__.__name__ [ obj . __class__ . __name__ ] , first element of obj._constructor_args [ obj . _constructor_args ] and second element of obj._constructor_args [ obj . _constructor_args ] . klass.__new__ [ klass . __new__ ] is a static method of the function __new__ .
0
example# 14721
substitute deconstruct for klass.deconstruct [ klass . deconstruct ] .
0
example# 14722
return klass .
0
example# 14723
if args is true ,
0
example# 14724
return decorator .
0
example# 14725
call the function decorator with 2 arugments : unpacked list args and unpacked dictionary kwargs , return the result .
0
example# 14726
from functools import wraps , update_wrapper and WRAPPER_ASSIGNMENTS into default name space .
0
example# 14727
from django.utils [ django . utils ] import six into default name space .
0
example# 14728
derive the class classonlymethod from the classmethod base class .
0
example# 14729
define the method __get__ with 3 arguments : self , instance and owner .
0
example# 14730
if instance is not None ,
0
example# 14731
raise an AttributeError exception with an argument string _STR:0_ .
1
"This method is available only on the view class." ||| _STR:0_
example# 14732
call the method __get__ with 2 arguments : instance and owner , from the base class of the classonlymethod class , return the result .
0
example# 14733
define the function method_decorator with an argument decorator .
0
example# 14734
define the function _dec with an argument func .
0
example# 14735
define the method _wrapper with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
0
example# 14736
decorator decorator .
0
example# 14737
define the function bound_func with 2 arguments : unpacked list args2 and unpacked dictionary kwargs2 .
0
example# 14738
call the method func.__get__ [ func . __get__ ] with 2 arguments : self and type of self object , call the result with 2 arguments :
0
example# 14739
unpacked list args2 and unpacked dictionary kwargs2 , return the result . call the function bound_func with 2 arguments : unpacked list args and unpacked dictionary kwargs , return the result .
0
example# 14740
decorator decorator .
0
example# 14741
define the function dummy with 2 arguments : unpacked list args and unpacked dictionary kwargs .
0
example# 14742
do nothing .
0
example# 14743
call the function update_wrapper with 2 arguments : _wrapper and dummy .
0
example# 14744
call the function update_wrapper with 2 arguments : _wrapper and func .
0
example# 14745
return _wrapper .
0
example# 14746
call the function update_wrapper with 3 arguments : _dec , decorator and assigned as result of the function available_attrs ,
0
example# 14747
called with an argument decorator . if decorator has an attribute _STR:0_ ,
1
'process_view' ||| _STR:0_
example# 14748
_dec.__name__ [ _dec . __name__ ] is a string _STR:0_ formated with decorator.__name__ [ decorator . __name__ ] .
1
'method_decorator(%s)' ||| _STR:0_
example# 14749
if not ,
0
example# 14750
_dec.__name__ [ _dec . __name__ ] is a string _STR:0_ formated with decorator.__class__.__name__ [ decorator . __class__ . __name__ ] .
1
'method_decorator(%s)' ||| _STR:0_
example# 14751
return _dec .
0
example# 14752
define the function decorator_from_middleware_with_args with an argument middleware_class .
0
example# 14753
call the function make_middleware_decorator with an argument middleware_class , return the result .
0
example# 14754
define the function decorator_from_middleware with an argument middleware_class .
0
example# 14755
call the function make_middleware_decorator with an argument middleware_class , call the result , return the new result .
0
example# 14756
define the function available_attrs with an argument fn .
0
example# 14757
if six.PY3 [ six . PY3 ] is true ,
0
example# 14758
return WRAPPER_ASSIGNMENTS .
0
example# 14759
if not ,
0
example# 14760
if fh has an attribute a , for every a in WRAPPER_ASSIGNMENTS , put a into a tuple , return the resulting tuple .
0
example# 14761
define the function make_middleware_decorator with an argument middleware_class .
0
example# 14762
define the function make_decorator with 2 arguments : unpacked list m_args and unpacked dictionary m_kwargs .
0
example# 14763
call the function middleware_class with 2 arguments : unpacked list m_args and unpacked dictionary m_kwargs ,
0
example# 14764
substitute the middleware . define the function _decorator with an argument view_func .
0
example# 14765
decorator function wraps with 2 arguments : view_func and assigned set to result of the function available_attrs ,
0
example# 14766
called with an argument view_func . define the function _wrapped_view with 3 arguments : request , unpacked list args and unpacked dictionary kwargs .
0
example# 14767
if middleware has an attribute _STR:0_ ,
1
'process_request' ||| _STR:0_
example# 14768
call the method middleware.process_request [ middleware . process_request ] with an argument request , substitute the result for result .
0
example# 14769
if result is not None ,
0
example# 14770
return result .
0
example# 14771
if middleware has an attribute _STR:0_ ,
1
'process_view' ||| _STR:0_
example# 14772
call the method middleware.process_view [ middleware . process_view ] with 4 arguments : request , view_func , args and kwargs , substitute the result for result .
0
example# 14773
if result is not None ,
0
example# 14774
return result .
0
example# 14775
try ,
0
example# 14776
call the function view_func with 3 arguments : request , unpacked list args , unpacked dictionary kwargs , substitute the result for response .
0
example# 14777
if Exception , renamed to e , exception is caught ,
0
example# 14778
if middleware has an attribute _STR:0_ ,
1
'process_exception' ||| _STR:0_
example# 14779
call the method middleware.process_exception [ middleware . process_exception ] with 2 arguments : request and e , substitute the result for result .
0
example# 14780
if result is not None ,
0
example# 14781
return result ,
0
example# 14782
raise an exception .
0
example# 14783
if response has an attribute _STR:0_ and response.render [ response . render ] is a callable object ,
1
'render' ||| _STR:0_
example# 14784
if middleware has an attribute _STR:0_ ,
1
'process_response' ||| _STR:0_
example# 14785
call the method middleware.process_template_response [ middleware . process_template_response ] with 2 arguments : request and response , substitute the result for response .
0
example# 14786
if middleware has an attribute _STR:0_ ,
1
'process_response' ||| _STR:0_
example# 14787
callback is an lambda function with an argument response and with return value result of the method middleware.process_response [ middleware . process_response ] ,
0
example# 14788
called with 2 arguments : request and response . call the method response.add_post_render_callback [ response . add_post_render_callback ] with an argument callback .
0
example# 14789
if not ,
0
example# 14790
if middleware has an attribute _STR:0_ ,
1
'process_response' ||| _STR:0_
example# 14791
call the method middleware.process_response [ middleware . process_response ] with 2 arguments : request and response , return the result .
0
example# 14792
return response .
0
example# 14793
return _wrapped_view .
0
example# 14794
return _decorator .
0
example# 14795
return _make_decorator .
0
example# 14796
import module inspect .
0
example# 14797
import module warnings .
0
example# 14798
derive the class RemovedInDjango20Warning from PendingDeprecationWarning base class .
0
example# 14799
do nothing .
0
example# 14800
derive the class RemovedInDjango19Warning from DeprecationWarning base class .
0
example# 14801
do nothing .
0
example# 14802
substitute RemovedInDjango19Warning for RemovedInNextVersionWarning .
0
example# 14803
derive the class warn_about_renamed_method from object base class .
0
example# 14804
deifne the method __init__ with 5 arguments : self , class_name , old_method_name , new_method_name and deprecation_warning .
0
example# 14805
substitute class_name for self.class_name [ self . class_name ] .
0
example# 14806
substitute old_method_name for self.old_method_name [ self . old_method_name ] .
0
example# 14807
substitute new_method_name for new_method_name .
0
example# 14808
substitute deprecation_warning for self.deprecation_warning [ self . deprecation_warning ] .
0
example# 14809
define the method __call__ with 2 arguments : self and f .
0
example# 14810
define the function wrapped with 2 arguments : unpacked list args and unpacked dictionary kwargs .
0
example# 14811
call the function warnings.warn [ warnings . warn ] with 3 arguments : string _STR:0_ ,
1
"`%s.%s` is deprecated, use `%s` instead." ||| _STR:0_
example# 14812
formated with 3 elements : self.class_name [ self . class_name ] , self.old_method_name [ self . old_method_name ] and self.new_method_name [ self . new_method_name ] , self.deprecation_warning [ self . deprecation_warning ] and integer 2. call the function f with a arguments : unpacked list args and unpacked dictionary kwargs , return the result .
0
example# 14813
return wrapped .
0
example# 14814
derive the class RenameMethodsBase from type base class .
0
example# 14815
renamed_methods is an tuple .
0
example# 14816
define the method __new__ with 4 arguments : cls , name , bases and attrs .
0
example# 14817
call the method __new__ with 4 arguments : cls , name , bases and attrs , from the base class of the class RenameMethodsBase .
0
example# 14818
call the method inspect.getmro [ inspect . getmro ] with an argument new_class , for every base in the result ,
0
example# 14819
substitute base.__name__ [ base . __name__ ] for class_name .
0
example# 14820
for every renamed_method in cls.renamed_methods [ cls . renamed_methods ] ,
0
example# 14821
substitute first element of renamed_method for old_method_name .
0
example# 14822
get the value under the old_method_name key of the base.__dict__ [ base . __dict__ ] dictionary , substitute it for old_method .
0
example# 14823
substitute second element of renamed_method for new_method_name .
0
example# 14824
get the value under the new_method_name key of the base.__dict__ [ base . __dict__ ] dictionary , substitute it for new_method .
0
example# 14825
substitute third element of renamed_method for deprecation_warning .
0
example# 14826
call the function warn_about_renamed_method with 2 arguments : class_name and unpacked list renamed_method , substitute the result for wrapper .
0
example# 14827
if new_method is false and old_method is true ,
0
example# 14828
call the function warnings.warn [ warnings . warn ] with 3 arguments : string _STR:0_ ,
1
"`%s.%s` method should be renamed `%s`." ||| _STR:0_
example# 14829
formated with 3 elements : class_name , old_method_name and new_method_name , deprecation_warning and integer 2. set new_method_name attribute of the base object to old_method .
0
example# 14830
set old_method_name attribute of the base object to the result of the function wrapper called with an argument old_method .
0
example# 14831
if old_method is false and new_method is true ,
0
example# 14832
set old_method_name attribute of the base object to the result of the function wrapper called with an argument new_method .
0
example# 14833
return new_class .
0
example# 14834
import module warnings .
0
example# 14835
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
0
example# 14836
call the function warnings.warn [ warnings . warn ] with 3 arguments : string _STR:0_ ,
1
"django.utils.dictconfig will be removed in Django 1.9." ||| _STR:0_
example# 14837
RemovedInDjango19Warning and stacklevel set to integer 2. import module logging.handlers [ logging . handlers ] .
0
example# 14838
import module re .
0
example# 14839
import module sys .
0
example# 14840
import module types .
0
example# 14841
from django.utils [ django . utils ] import six into default name space .
0
example# 14842
compile regex from string _STR:0_ in case insensitive mode , substitute it for IDENTIFIER .
1
'^[a-z_][a-z0-9_]*$' ||| _STR:0_
example# 14843
define the function valid_ident with an argument s .
0
example# 14844
match string s with regex IDENTIFIER , substitute the result for m .
0
example# 14845
if m is false ,
0
example# 14846
raise an ValueError exception with an argument string _STR:0_ formated with s .
1
'Not a valid Python identifier: %r' ||| _STR:0_
example# 14847
return boolean True .
0
example# 14848
try ,
0
example# 14849
from logging import _checkLevel .
0
example# 14850
if ImportError exception is caught ,
0
example# 14851
define the function _checkLevel with an argument level .
0
example# 14852
if level is an instance of int type ,
0
example# 14853
substitute level for rv .
0
example# 14854
otherwise if level converted into a string equals level ,
0
example# 14855
if level is not contained in logging._levelNames [ logging . _levelNames ] ,
0
example# 14856
raise an ValueError exception with an argument string _STR:0_ formated with level .
1
'Unknown level: %r' ||| _STR:0_
example# 14857
substitute value under level key of logging._levelNames [ logging . _levelNames ] dictionary for rv .
0
example# 14858
if not ,
0
example# 14859
raise an TypeError exception with an argument string _STR:0_ formated with level .
1
'Level not an integer or a valid string: %r' ||| _STR:0_
example# 14860
return rv .
0
example# 14861
derive the class ConvertingDict from dict base class .
0
example# 14862
define the method __getitem__ with 2 arguments : self and key .
0
example# 14863
call the method dict.__getitem__ [ dict . __getitem__ ] with 2 arguments self and key , substitute the result for value .
0
example# 14864
call the method self.configurator.convert [ self . configurator . convert ] with an argument value , substitute the result for result .
0
example# 14865
if value is not contained in result ,
0
example# 14866
substitute result for self dictionary under key key .
0
example# 14867
if type of result is ConvertingDict , ConvertingList or ConvertingTuple ,
0
example# 14868
substitute self for result.parent [ result . parent ] .
0
example# 14869
substitute key for result.key [ result . key ] .
0
example# 14870
return result .
0
example# 14871
define the method get with 3 arguments : self , key and default set to None .
0
example# 14872
get value under key key of self dictionary , if it doesnt exists return default , substitute the result for value .
0
example# 14873
call the method self.configurator.convert [ self . configurator . convert ] with an argument value , substitute the result for result .
0
example# 14874
if value is not contained in result ,
0
example# 14875
substitute result for value under key key of self dictionary .
0
example# 14876
if type of result is ConvertingDict , ConvertingList or ConvertingTuple ,
0
example# 14877
substitute self for result.parent [ result . parent ] .
0
example# 14878
substitute key for result.key [ result . key ] .
0
example# 14879
return result .
0
example# 14880
define the method pop with 3 arguments : self , key and default set to None .
0
example# 14881
remove value under key key of self dictionary , if it doesnt exists return default , substitute the result for value .
0
example# 14882
call the method self.configurator.convert [ self . configurator . convert ] with an argument value .
0
example# 14883
if value is not contained in result ,
0
example# 14884
if type of result is ConvertingDict , ConvertingList or ConvertingTuple ,
0
example# 14885
substitute self for result.parent [ result . parent ] .
0
example# 14886
substitute key for result.key [ result . key ] .
0
example# 14887
return result .
0
example# 14888
derive the class ConvertingList from list base class .
0
example# 14889
define the method __getitem__ with 2 arguments : self and key .
0
example# 14890
call the method list.__getitem__ [ list . __getitem__ ] with 2 arguments self and key , substitute the result for value .
0
example# 14891
call the method self.configurator.convert [ self . configurator . convert ] with an arugment value , substitute the result for result .
0
example# 14892
if value is not contained in result ,
0
example# 14893
substitute result for value under key key of self dictionary .
0
example# 14894
if type of result is ConvertingDict , ConvertingList or ConvertingTuple ,
0
example# 14895
substitute self for result.parent [ result . parent ] .
0
example# 14896
substitute key for result.key [ result . key ] .
0
example# 14897
return result .
0
example# 14898
define the method pop with 2 arguments : self and idx set to negative integer 1 .
0
example# 14899
remove idx-th element from self list .
0
example# 14900
call the method self.configurator.convert [ self . configurator . convert ] with an argument value , substitute the result for result .
0
example# 14901
if value is not contained in result ,
0
example# 14902
if type of result is ConvertingDict , ConvertingList or ConvertingTuple ,
0
example# 14903
substitute self for result.parent [ result . parent ] .
0
example# 14904
return result .
0
example# 14905
derive the class ConvertingTuple from tuple base class .
0
example# 14906
define the method __getitem__ with 2 arguments : self and key .
0
example# 14907
call the method tuple.__getitem__ [ tuple . __getitem__ ] with 2 arguments : self and key , substitute the result for value .
0
example# 14908
call the method self.configurator.convert [ self . configurator . convert ] with an argument value , substitute the result for result .
0
example# 14909
if value is not contained in result ,
0
example# 14910
if type of result is ConvertingDict , ConvertingList or ConvertingTuple ,
0
example# 14911
substitute self for result.parent [ result . parent ] .
0
example# 14912
substitute key for result.key [ result . key ] .
0
example# 14913
return result .
0
example# 14914
derive the class BaseConfigurator from object base class .
0
example# 14915
compile a regex from raw string _STR:0_ , substitute it for CONVERT_PATTERN .
1
'^(?P<prefix>[a-z]+)://(?P<suffix>.*)$' ||| _STR:0_
example# 14916
compile a regex from raw string _STR:0_ , substitute it for WORD_PATTERN .
1
'^\s*(\w+)\s*' ||| _STR:0_
example# 14917
compile a regex from raw string _STR:0_ , substitute it for DOT_PATTERN .
1
'^\.\s*(\w+)\s*' ||| _STR:0_
example# 14918
compile a regex from raw string _STR:0_ , substitute it for INDEX_PATTERN .
1
'^\[\s*(\w+)\s*\]\s*' ||| _STR:0_
example# 14919
compile a regex from raw string _STR:0_ , substitute it for DIGIT_PATTERN .
1
'^\d+$' ||| _STR:0_
example# 14920
value_converters is a dictionary with 2 entries : _STR:0_ for _STR:1_ and _STR:2_ for _STR:3_ .
4
'cfg_convert' ||| _STR:2_
'cfg' ||| _STR:3_
'ext' ||| _STR:1_
'ext_convert' ||| _STR:0_
example# 14921
substitute __import__ for importer .
0
example# 14922
define the method __init__ with 2 arguments : self and config .
0
example# 14923
self.config [ self . config ] is an instance of ConvertingDict , called with an argument config .
0
example# 14924
substitute self for self.config.configurator [ self . config . configurator ] .
0
example# 14925
define the method resolve with 2 arguments : self and s .
0
example# 14926
split s into parts by _STR:0_ , substitute the result for name .
1
'.' ||| _STR:0_
example# 14927
remove first element from name , substitute the result for used .
0
example# 14928
try ,
0
example# 14929
call the method self.importer [ self . importer ] with an argument used , substitute the result for found .
0
example# 14930
for every frag in name .
0
example# 14931
append _STR:0_ to frag , append the result to used .
1
'.' ||| _STR:0_
example# 14932
try ,
0
example# 14933
get frag attribute from found object , substitute it for found .
0
example# 14934
if AttributeError exception is caught ,
0
example# 14935
call the method self.importer [ self . importer ] with an argument used .
0
example# 14936
get frag attribute from found object , substitute it for found .
0
example# 14937
return found .
0
example# 14938
if ImportError exception is caught ,
0
example# 14939
call the method sys.exc_info [ sys . exc_info ] , substitute the result without the first element for e and tb .
0
example# 14940
raise an ValueError exception with an argument string _STR:0_ , formated with s and e .
1
'Cannot resolve %r: %s' ||| _STR:0_
example# 14941
substitute e and tb for v.__cause__ [ v . __cause__ ] and v.__traceback__ [ v . __traceback__ ] .
0
example# 14942
raise an v exception .
0
example# 14943
define the method ext_convert with 2 arguments : self and value .
0
example# 14944
call the method self.resolve [ self . resolve ] with an argument value , return the result .
0
example# 14945
define the method cfg_convert with 2 arguments : self and value .
0
example# 14946
substitute value for rest .
0
example# 14947
match rest string with self.WORD_PATTERN [ self . WORD_PATTERN ] regex , substitute the result for m .
0
example# 14948
if m is None ,
0
example# 14949
raise an ValueError exception with an argument string _STR:0_ formated with value .
1
"Unable to convert %r" ||| _STR:0_
example# 14950
if not ,
0
example# 14951
call the method m.end [ m . end ] , slice list rest from previous result as starting index to the end , substitute the result for rest .
0
example# 14952
call the method m.groups [ m . groups ] , use the first element of the result as key for obtaining value from self.config [ self . config ] dictionary ,
0
example# 14953
substitute it for d. while rest is true ,
0
example# 14954
match rest string with self.DOT_PATTERN [ self . DOT_PATTERN ] regex , substitute the result for m .
0
example# 14955
if m is true ,
0
example# 14956
call the method m.groups [ m . groups ] , use the first element of the result as key for obtaining value from d dictionary ,
0
example# 14957
if not ,
0
example# 14958
match rest string with self.INDEX_PATTERN [ self . INDEX_PATTERN ] regex , substitute the result for m .
0
example# 14959
if m is true ,
0
example# 14960
call the method m.groups [ m . groups ] , substitute the first element of the result for idx .
0
example# 14961
match rest string with self.DIGIT_PATTERN [ self . DIGIT_PATTERN ] regex , if it evaluates to false ,
0
example# 14962
substitute value under idx key of dictionary d for d .
0
example# 14963
if not ,
0
example# 14964
try ,
0
example# 14965
convert idx to an integer , substitute it or n .
0
example# 14966
substitute value under n key of dictionary d for d .
0
example# 14967
if TypeError exception is caught ,
0
example# 14968
substitute value under idx key of dictionary d for d .
0
example# 14969
if m is true ,
0
example# 14970
call the method m.end [ m . end ] , slice list rest from previous result as starting index to the end , substitute the result for rest .
0
example# 14971
if not ,
0
example# 14972
raise an ValueError exception with an argument string _STR:0_ formated with value and rest .
1
'Unable to convert %r at %r' ||| _STR:0_
example# 14973
return d .
0
example# 14974
define the method convert with 2 arguments : self and value .
0
example# 14975
if vale is not an instance of ConvertingDict and value is an instance of dict type ,
0
example# 14976
value is an instance of ConvertingDict class , created with an argument value .
0
example# 14977
substitute self for value.configurator [ value . configurator ] .
0
example# 14978
otherwise if vale is not an instance of ConvertingList and value is an instance of list type ,
0
example# 14979
value is an instance of ConvertingList class , created with an argument value .
0
example# 14980
substitute self for value.configurator [ value . configurator ] .
0
example# 14981
otherwise if vale is not an instance of ConvertingTuple and value is an instance of tuple type ,
0
example# 14982
value is an instance of ConvertingTuple class , created with an argument value .
0
example# 14983
substitute self for value.configurator [ value . configurator ] .
0
example# 14984
otherwise if vale is an instance of value ,
0
example# 14985
match value string with regex self.CONVERT_PATTERN [ self . CONVERT_PATTERN ] , substitute the result for m .
0
example# 14986
if m is true ,
0
example# 14987
call the method m.groupdict [ m . groupdict ] , substitute the result for d .
0
example# 14988
substitute value under the _STR:0_ key of dictionary d , substitute it for prefix .
1
'prefix' ||| _STR:0_
example# 14989
remove self.value_converters [ self . value_converters ] dictionary element under prefix key , if it exists substitute it for converter , if not , converter is None .
0
example# 14990
if converter is true ,
0
example# 14991
substitute value under the _STR:0_ key of dictionary d , substitute it for suffix .
1
'suffix' ||| _STR:0_
example# 14992
get converter attribute from self object , substitute it for converter .
0
example# 14993
call the function converter with an argument suffix , substitute the result for value .
0
example# 14994
return value .
0
example# 14995
define the method configure_custom with 2 arguments : self and config .
0
example# 14996
remove config dictionary element under _STR:0_ key , substitute it for c .
1
'()' ||| _STR:0_
example# 14997
if c doesnt have an attribute _STR:0_ and types has an _STR:1_ attribute and type of c is not equal to types.ClassType [ types . ClassType ] ,
2
'ClassType' ||| _STR:1_
'__call__' ||| _STR:0_
example# 14998
call the method self.resolve [ self . resolve ] with an argument c , substitute the result for c .
0
example# 14999
remove config dictionary element under _STR:0_ key , if it exists substitute it for props , if not , props is None .
1
'.' ||| _STR:0_
example# 15000
kwargs is a dictionary with elements : config dictionary element under k key for k , for every k in result of function valid_ident ,
0
example# 15001
called with an argument k. call the function c with an argument unpacked dictionary kwargs , substitute the result for result .
0
example# 15002
if props is true ,
0
example# 15003
for every name and value in items of props dictionary ,
0
example# 15004
set result attribute name to value value .
0
example# 15005
return result .
0
example# 15006
define the method as_tuple with 2 arguments : self and value .
0
example# 15007
if valu is an instance of list type ,
0
example# 15008
convery value into a tuple , substitute it for value .
0
example# 15009
return value .
0
example# 15010
derive the class DictConfigurator from the BaseConfigurator base class .
0
example# 15011
define the method configure with an argument self .
0
example# 15012
substitute self.config [ self . config ] for config .
0
example# 15013
if string _STR:0_ is not contained in config ,
1
'version' ||| _STR:0_
example# 15014
raise an ValueError exception with an argument string _STR:0_ .
1
"dictionary doesn't specify a version" ||| _STR:0_
example# 15015
if config dictionary value under _STR:0_ key is not equal to integer 1 ,
1
'version' ||| _STR:0_
example# 15016
raise an ValueError exception with an argument string _STR:0_ formated with value under _STR:1_ key of config dictionary .
2
'version' ||| _STR:1_
"Unsupported version: %s" ||| _STR:0_
example# 15017
get config dictionary element under _STR:0_ key , if it exists substitute it for incremental , if not ,
1
'incremental' ||| _STR:0_
example# 15018
incremental is boolean False . EMPTY_DICT is an empty dictionary .
0
example# 15019
call the method logging._acquireLock [ logging . _acquireLock ] .
0
example# 15020
try ,
0
example# 15021
if incremental is true ,
0
example# 15022
get config dictionary element under _STR:0_ key , if it exists substitute it for handlers , if not , handlers is EMPTY_DICT .
1
'handlers' ||| _STR:0_
example# 15023
if first two elements of sys.version_info [ sys . version_info ] equal to integers 2 ant 7 , respectively ,
0
example# 15024
for every name in handlers ,
0
example# 15025
if name is not contained in logging._handlers [ logging . _handlers ] ,
0
example# 15026
raise an ValueError exception with an argument string _STR:0_ formated with name .
1
'No handler found with name %r' ||| _STR:0_
example# 15027
if not ,
0
example# 15028
try ,
0
example# 15029
substitute value under name key of logging._handlers [ logging . _handlers ] dictionary for handler .
0
example# 15030
substitute value under name key of handlers dictionary for handler_config .
0
example# 15031
get handler_config dictionary element under _STR:0_ key , if it exists substitute it for level , if not , level is None .
1
'level' ||| _STR:0_
example# 15032
if level is true ,
0
example# 15033
call the function _checkLevel with an argument level , use the result as an argument for the call to the function handler.setLevel [ handler . setLevel ] .
0
example# 15034
if StandardError , renamed to e , exception is caught ,
0
example# 15035
raise an ValueError exception with an argument string _STR:0_ formated with name and e .
1
'Unable to configure handler %r: %s' ||| _STR:0_
example# 15036
get config dictionary element under _STR:0_ key , if it exists substitute it for loggers , if not , loggers is EMPTY_DICT .
1
'loggers' ||| _STR:0_
example# 15037
for every name in loggers ,
0
example# 15038
try ,
0
example# 15039
call the method self.configure_logger [ self . configure_logger ] with 3 arguments : name , value under name key of loggers dictionary and boolean True .
0
example# 15040
if StandardError , renamed to e , exception is caught ,
0
example# 15041
raise an ValueError exception with an argument string _STR:0_ formated with name and e .
1
'Unable to configure logger %r: %s' ||| _STR:0_
example# 15042
get config dictionary element under _STR:0_ key , if it exists substitute it for root , if not , root is None .
1
'root' ||| _STR:0_
example# 15043
if root is true ,
0
example# 15044
try ,
0
example# 15045
call the method self.configure_root [ self . configure_root ] with 2 arguments : root and boolean True .
0
example# 15046
if StandardError , renamed to e , exception is caught ,
0
example# 15047
raise an ValueError exception with an argument string _STR:0_ formated with e .
1
'Unable to configure root logger: %s' ||| _STR:0_
example# 15048
if not ,
0
example# 15049
remove config dictionary element under _STR:0_ key , if it exists substitute it for disable_existing , if not ,
1
'disable_existing_loggers' ||| _STR:0_
example# 15050
disable_existing is boolean True . call the method logging._handler.clear [ logging . _handler . clear ] .
0
example# 15051
delete logging._handlerList [ logging . _handlerList ] list .
0
example# 15052
get config dictionary element under _STR:0_ key , if it exists substitute it for formatters , if not , formatters is EMPTY_DICT .
1
'formatters' ||| _STR:0_
example# 15053
for every name in formatters ,
0
example# 15054
try ,
0
example# 15055
call the method self.configure_filter [ self . configure_filter ] with an argument value under name key of formatters dictionary ,
0
example# 15056
substitute the result for formatters dictionary value under name key . if StandardError , renamed to e , exception is caught ,
0
example# 15057
raise an ValueError exception with an argument string _STR:0_ formated with name and e .
1
'Unable to configure formatter %r: %s' ||| _STR:0_
example# 15058
get config dictionary element under _STR:0_ key , if it exists substitute it for filters , if not , filters is EMPTY_DICT .
1
'filters' ||| _STR:0_
example# 15059
for every name in filters ,
0
example# 15060
try ,
0
example# 15061
call the method self.configure_filter [ self . configure_filter ] with an argument value under name key of filters dictionary ,
0
example# 15062
substitute the result for filters dictionary value under name key . if StandardError , renamed to e , exception is caught ,
0
example# 15063
raise an ValueError exception with an argument string _STR:0_ formated with name and e .
1
'Unable to configure filter %r: %s' ||| _STR:0_
example# 15064
get config dictionary element under _STR:0_ key , if it exists substitute it for handlers , if not , handlers is EMPTY_DICT .
1
'handlers' ||| _STR:0_
example# 15065
sort elements of handlers , for every name in result ,
0
example# 15066
try ,
0
example# 15067
call the method self.configure_handler [ self . configure_handler ] with an argument value under name key of handlers dictionary , substitute the result for handler .
0
example# 15068
substitute name for handler.name [ handler . name ] .
0
example# 15069
substitute handler for value under name key of handlers dictionary .
0
example# 15070
if StandardError , renamed to e , exception is caught ,
0
example# 15071
raise an ValueError exception with an argument string _STR:0_ formated with name and e .
1
'Unable to configure handler %r: %s' ||| _STR:0_
example# 15072
substitute logging.root [ logging . root ] for root .
0
example# 15073
convert root.manager.loggerDict [ root . manager . loggerDict ] into a list , substitute it for existing .
0
example# 15074
sort elements of list existing .
0
example# 15075
child_loggers is an empty list .
0
example# 15076
get config dictionary element under _STR:0_ key , if it exists substitute it for loggers , if not , loggers is EMPTY_DICT .
1
'loggers' ||| _STR:0_
example# 15077
for every name in loggers ,
0
example# 15078
if name is contained in existing ,
0
example# 15079
get the index of first occurrence of name in existing , substitute it for i .
0
example# 15080
append _STR:0_ to name , substitute the result for prefixed .
1
'.' ||| _STR:0_
example# 15081
substitute length of prefixed for pflen .
0
example# 15082
substitute length of existing for num_existing .
0
example# 15083
increment i by integer 1 , substitute the result for i .
0
example# 15084
while i is lesser than num_existing and first pflen elements of i-th element of existing equals prefixed ,
0
example# 15085
append i-th element of existing to child_loggers .
0
example# 15086
increment i by integer 1 , substitute the result for i .
0
example# 15087
remove name from existing .
0
example# 15088
try ,
0
example# 15089
call the method self.configure_logger [ self . configure_logger ] with 2 arguments : name and value under loggers dictionary key name .
0
example# 15090
if StandardError , renamed to e , exception is caught ,
0
example# 15091
raise an ValueError exception with an argument string _STR:0_ formated with name and e .
1
'Unable to configure logger %r: %s' ||| _STR:0_
example# 15092
for every log in existing ,
0
example# 15093
get the value under log key of root.manager.loggerDict [ root . manager . loggerDict ] dictionary , substitute it for logger .
0
example# 15094
if log is contained in child_loggers ,
0
example# 15095
substitute logging.NOTSET [ logging . NOTSET ] for logger.level [ logger . level ] .
0
example# 15096
logger.handlers [ logger . handlers ] is an empty list .
0
example# 15097
logger.propagate [ logger . propagate ] is boolean True .
0
example# 15098
otherwise if disable_existing is true ,
0
example# 15099
logger.disabled [ logger . disabled ] is boolean True .
0
example# 15100
get config dictionary element under _STR:0_ key , if it exists substitute it for root , if not , root is None .
1
'root' ||| _STR:0_
example# 15101
if root is true ,
0
example# 15102
try ,
0
example# 15103
call the method self.configure_root [ self . configure_root ] with an argument root .
0
example# 15104
if StandardError , renamed to e , exception is caught ,
0
example# 15105
raise an ValueError exception with an argument string _STR:0_Unable to configure root logger : % s ' formated with e .
1
'' ||| _STR:0_
example# 15106
finally perform ,
0
example# 15107
call the method logging._releaseLock [ logging . _releaseLock ] .
0
example# 15108
define the method configure_formatter with 2 arguments : self and config .
0
example# 15109
if string _STR:0_ is contained in config ,
1
'()' ||| _STR:0_
example# 15110
substitute config dictionary value under _STR:0_ key for factory .
1
'()' ||| _STR:0_
example# 15111
try ,
0
example# 15112
call the method self.configure_custom [ self . configure_custom ] with an argument config , substitute the result for result .
0
example# 15113
if TypeError , renamed to te , exception is caught ,
0
example# 15114
if string _STR:0_ is not contained in e converted into a string ,
1
"'format'" ||| _STR:0_
example# 15115
raise an exception .
0
example# 15116
remove config dictionary entry under _STR:0_ key , substitute it for value under _STR:1_ key of config dictionary .
2
'fmt' ||| _STR:1_
'format' ||| _STR:0_
example# 15117
substitute factory for value under _STR:0_ key of config dictionary .
1
'()' ||| _STR:0_
example# 15118
call the method self.configure_custom [ self . configure_custom ] with an argument config , substitute the result for result .
0
example# 15119
if not ,
0
example# 15120
get config dictionary element under _STR:0_ key , if it exists substitute it for fmt , if not , fmt is None .
1
'format' ||| _STR:0_
example# 15121
get config dictionary element under _STR:0_ key , if it exists substitute it for dfmt , if not , dfmt is None .
1
'datefmt' ||| _STR:0_
example# 15122
call the method logging.Formatter [ logging . Formatter ] with 2 arguments : fmt and dfmt , substitute the result for result .
0
example# 15123
return result .
0
example# 15124
define the method configure_filter with 2 arguments : self and config .
0
example# 15125
if string _STR:0_ is contained in config ,
1
'()' ||| _STR:0_
example# 15126
call the method self.configure_custom [ self . configure_custom ] with an argument config , substitute the result for result .
0
example# 15127
if not ,
0
example# 15128
remove config dictionary element under _STR:0_ key , if it exists substitute it for name , if not , name is an empty string .
1
'name' ||| _STR:0_
example# 15129
call the method logging.Filter [ logging . Filter ] with an argument name , substitute the result for result .
0
example# 15130
return result .
0
example# 15131
define the method add_filters with 3 arguments : self , filterer and filters .
0
example# 15132
for every f in filters ,
0
example# 15133
try ,
0
example# 15134
get the value under f key of dictionary under _STR:0_ key of self.config [ self . config ] dictionary ,
1
'filters' ||| _STR:0_
example# 15135
use the result as an argument for the call to the method filterer.addFilter [ filterer . addFilter ] . if StandardError , renamed to e , exception is caught ,
0
example# 15136
raise an ValueError exception with an argument string _STR:0_ formated with f and e .
1
'Unable to add filter %r: %s' ||| _STR:0_
example# 15137
define the method configure_handler with 2 arguments : self and config .
0
example# 15138
remove config dictionary element under _STR:0_ key , if it exists substitute it for formatter , if not , formatter is None .
1
'formatter' ||| _STR:0_
example# 15139
if formatter is true ,
0
example# 15140
try ,
0
example# 15141
get the value under formatter key of dictionary under _STR:0_ key of self.config [ self . config ] dictionary , substitute the result for formatter .
1
'formatters' ||| _STR:0_
example# 15142
if StandardError , renamed to e , exception is caught ,
0
example# 15143
raise an ValueError exception with an argument string _STR:0_ formated with formatter and e .
1
'Unable to set formatter %r: %s' ||| _STR:0_
example# 15144
remove config dictionary element under _STR:0_ key , if it exists substitute it for level , if not , level is None .
1
'level' ||| _STR:0_
example# 15145
remove config dictionary element under _STR:0_ key , if it exists substitute it for filters , if not , filters is None .
1
'filter' ||| _STR:0_
example# 15146
if string _STR:0_ is contained in config ,
1
'()' ||| _STR:0_
example# 15147
remove config dictionary element under _STR:0_ key , substitute it for c .
1
'()' ||| _STR:0_
example# 15148
if c doesnt have an attribute _STR:0_ , and types has an attribute _STR:1_ , and type of c is not equal to types.ClassType [ types . ClassType ] ,
2
'ClassType' ||| _STR:1_
'__call__' ||| _STR:0_
example# 15149
call the method self.resolve [ self . resolve ] with an argument c , substitute the result for c .
0
example# 15150
substitute c for factory .
0
example# 15151
if not ,
0
example# 15152
remove config dictionary element under _STR:0_ key , use it as an argument for the call to the method self.resolve [ self . resolve ] ,
1
'class' ||| _STR:0_
example# 15153
substitute the result for klass . if klass is a subclass of logging.handlers.MemoryHandler [ logging . handlers . MemoryHandler ] base class and string _STR:0_ is contained in config ,
1
'target' ||| _STR:0_
example# 15154
try ,
0
example# 15155
get value under _STR:0_ key of config dictionary , use it as a key to get the value from the dictionary ,
1
'target' ||| _STR:0_
example# 15156
under the _STR:0_ key of self.config [ self . config ] dictionary , substitute the result for value under _STR:1_ key of config dictioanry . if StandardError , renamed to e , exception is caught ,
2
'handlers' ||| _STR:0_
'target' ||| _STR:1_
example# 15157
raise an ValueError exception with an argument string _STR:0_ ,
1
'Unable to set target handler %r: %s' ||| _STR:0_
example# 15158
formated with value under _STR:0_ key of config dictionary and e. otherwise if klass is a subclass of logging.handlers.SMTPHandler [ logging . handlers . SMTPHandler ] and string _STR:1_ is contained in config ,
2
'mailhost' ||| _STR:1_
'target' ||| _STR:0_
example# 15159
call the method self.as_tuple [ self . as_tuple ] with an argument value under _STR:0_ key of config dictionary ,
1
'mailhost' ||| _STR:0_
example# 15160
substitute the result for value under _STR:0_ key of config dictionary . otherwise if klass is subclass of logging.handlers.SysLogHandler [ logging . handlers . SysLogHandler ] class , and string _STR:1_ is contained in config ,
2
'mailhost' ||| _STR:0_
'address' ||| _STR:1_
example# 15161
call the method self.as_tuple [ self . as_tuple ] with an argument value under _STR:0_ key of config dictionary ,
1
'address' ||| _STR:0_
example# 15162
substitute the result for value under _STR:0_ key of config dictionary . substitute klass for factory .
1
'address' ||| _STR:0_
example# 15163
kwargs is a dictionary created with tuples with 2 elements : k and value under k key of config dictionary ,
0
example# 15164
for every k in config , only if result of the function valid_ident called with an argument k evaluates to true . try ,
0
example# 15165
call the function factory with an argument unpacked dictionary kwargs , substitute the result for result .
0
example# 15166
if TypeError , renamed to te , exception is caught ,
0
example# 15167
if _STR:0_ is not contained in te converted into a string ,
1
"'stream'" ||| _STR:0_
example# 15168
raise an exception .
0
example# 15169
remove element under _STR:0_ key of kwargs dictionary , substitute the result for value under _STR:1_ key of kwargs dictionary .
2
'stream' ||| _STR:0_
'strm' ||| _STR:1_
example# 15170
call the function factory with an argument unpacked dictionary kwargs , substitute the result for result .
0
example# 15171
if formatter is true ,
0
example# 15172
call the method result.setFormatter [ result . setFormatter ] with an argument formatter .
0
example# 15173
if level is not None ,
0
example# 15174
call function _checkLevel with an argument level , use the result as an argument for the method result.setLevel [ result . setLevel ] .
0
example# 15175
if filters is true ,
0
example# 15176
call the method self.add_filters [ self . add_filters ] with 2 arguments : result and filters .
0
example# 15177
return result .
0
example# 15178
define the method add_handlers with 3 arguments : self , logger and handlers .
0
example# 15179
for every h in handlers ,
0
example# 15180
try ,
0
example# 15181
call the method logger.addHandler [ logger . addHandler ] with an argument : h-th element of value under _STR:0_ key of self.config [ self . config ] dictionary .
1
'handlers' ||| _STR:0_
example# 15182
if StandardError , renamed to e , exception is caught ,
0
example# 15183
raise an ValueError exception with an argument string _STR:0_ formated with h and e .
1
'Unable to add handler %r: %s' ||| _STR:0_
example# 15184
define the method common_logger_config with 4 arguments : self , logger , config and incremental set to boolean False .
0
example# 15185
get value under the _STR:0_ key of the config dictioanry , if it exists substitute it for level , if not level is None .
1
'level' ||| _STR:0_
example# 15186
if level is not None ,
0
example# 15187
call the function _checkLevel with an argument level , use the result as an argument for the call to the method logger.setLevel [ logger . setLevel ] .
0
example# 15188
if incremental is true ,
0
example# 15189
for every h in elements of logger.handlers [ logger . handlers ] list ,
0
example# 15190
call the method logger.removeHandler [ logger . removeHandler ] with an argument h .
0
example# 15191
get value under the _STR:0_ key of the config dictioanry , if it exists substitute it for handlers , if not handlers is None .
1
'handlers' ||| _STR:0_
example# 15192
if handlers is true ,
0
example# 15193
call the method self.add_handlers [ self . add_handlers ] with 2 arguments : logger and handlers .
0
example# 15194
get value under the _STR:0_ key of the config dictioanry , if it exists substitute it for filters , if not filters is None .
1
'filters' ||| _STR:0_
example# 15195
if filters is true ,
0
example# 15196
call the method self.add_filters [ self . add_filters ] with 2 arguments : logger and filters .
0
example# 15197
define the method configure_logger with 4 arguments : self , name , config , incremental set to boolean False .
0
example# 15198
call the method logging.getLogger [ logging . getLogger ] with an argument name , substitute the result for logger .
0
example# 15199
call the method self.common_logger_config [ self . common_logger_config ] with 3 arguments : logger , config and incremental .
0
example# 15200
get value under the _STR:0_ key of the config dictioanry , if it exists substitute it for propagate , if not propagate is None .
1
'propagate' ||| _STR:0_
example# 15201
if propagate is not None ,
0
example# 15202
substitute propagate for logger.propagate [ logger . propagate ] .
0
example# 15203
define the method configure_root with 3 arguments : self , config and incremental set to boolean False .
0
example# 15204
call the method logging.getLogger [ logging . getLogger ] , substitute the result for root .
0
example# 15205
call the method self.common_logger_config [ self . common_logger_config ] with 3 arguments : root , config and incremental .
0
example# 15206
substitute DictConfigurator for dictConfigClass .
0
example# 15207
define the function dictConfig with an argument config .
0
example# 15208
call the method dictConfigClass with an argument config , call the method configure on the result .
0
example# 15209
from __future__ import unicode_literals into default name space .
0
example# 15210
import module codecs .
0
example# 15211
import module datetime .
0
example# 15212
from decimal import Decimal into default name space .
0
example# 15213
import module locale .
0
example# 15214
from django.utils.functional [ django . utils . functional ] import Promise into default name space .
0
example# 15215
from django.utils [ django . utils ] import six into default name space .
0
example# 15216
from django.utils.six.moves.urllib.parse [ django . utils . six . moves . urllib . parse ] import quote into default name space .
0
example# 15217
derive the class DjangoUnicodeDecodeError from the base class UnicodeDecodeError .
0
example# 15218
define the private method __init__ , with self instance of this class , obj and list of arbitrary length *args as arguments .
0
example# 15219
assign obj to the obj field of self instance of this class .
0
example# 15220
call the initialization method UnicodeDecodeError.__init__ [ UnicodeDecodeError . __init__ ] , with self instance of this class and *args as arguments .
0
example# 15221
define the private method __str__ , with self instance of this class as the only argument .
0
example# 15222
call the method UnicodeDecodeError.__str__ [ UnicodeDecodeError . __str__ ] , with self as the argument , substitute the result for original .
0
example# 15223
in the string _STR:0_ replace every % s with original and type of the object self.obj [ self . obj ] as strings , respectively ,
1
'%s. You passed in %r (%s)' ||| _STR:0_
example# 15224
and replace % r with self.obj [ self . obj ] , return the result . define function python_2_unicode_compatible , with klass as an argument .
0
example# 15225
if field PY2 of the module six is boolean True ,
0
example# 15226
if string _STR:0_ is not contained in __dict__ field of klass ,
1
'__str__' ||| _STR:0_
example# 15227
raise the exception ValueError , with string as argument , _STR:0_ ,
1
"@python_2_unicode_compatible cannot be applied" ||| _STR:0_
example# 15228
_STR:0_ , replace % s with string value of klass.__name__ [ klass . __name__ ] . substitute __str__ filed of klass for __unicode__ field of klass .
1
"to %s because it doesn't define __str__()." ||| _STR:0_
example# 15229
define lambda function with self class instance as the argument , lambda function body encapsulates the call to the method ,
0
example# 15230
str.__unicode__ [ str . __unicode__ ] ( ) .encode ( _STR:0_ ) , call the lambda function and put the result in the __str__ filed of klass . return klass .
1
'utf-8' ||| _STR:0_
example# 15231
define the function smart_text , with s , encoding set to string _STR:0_ , strings_only set to False , errors set to _STR:1_ as arguments .
2
'utf-8' ||| _STR:0_
'strict' ||| _STR:1_
example# 15232
if s is instance of a class Promise ,
0
example# 15233
return s .
0
example# 15234
return the result of the call to the function force_text , with s , encoding , string_only and errors as arguments .
0
example# 15235
_PROTECTED_TYPES is a tuple containing next elements , six.integer_types [ six . integer_types ] , type of None , type of float , Decimal , detetime.datetime [ detetime . datetime ] ,
0
example# 15236
datetime.date [ datetime . date ] and datetime.time [ datetime . time ] . define the function is_protected_type with obj as the only argument .
0
example# 15237
check if obj is instance of the object _PROTECTED_TYPES , return the boolean result .
0
example# 15238
define the function force_text , with s , encoding set to _STR:0_ , strings_only set to False , errors set to string _STR:1_ as arguments .
2
'utf-8' ||| _STR:0_
'strict' ||| _STR:1_
example# 15239
if s is the instance of the object six.text_type [ six . text_type ] ,
0
example# 15240
return s .
0
example# 15241
if the boolean return vale of the call to the function is_protected_type ( s ) and string_onlys are boolean True ,
0
example# 15242
return s .
0
example# 15243
try ,
0
example# 15244
if s is not an instance of the object six/string_types ,
0
example# 15245
if PY3 filed of six is boolean True ,
0
example# 15246
if s is an instance of object bytes ,
0
example# 15247
call the function six.text_type [ six . text_type ] with s , encoding and errors as the arguments , substitute the result for s .
0
example# 15248
if not ,
0
example# 15249
call the function six.text_type [ six . text_type ] with s as an argument , substitute the result for s .
0
example# 15250
otherwise , if s has an attribute _STR:0_ ,
1
'__unicode__' ||| _STR:0_
example# 15251
call the function six.text_type [ six . text_type ] with s as an argument , substitute result for s .
0
example# 15252
if not ,
0
example# 15253
call the function six.text_type [ six . text_type ] with return value of the function bytes ( s ) , encoding and errors as the arguments ,
0
example# 15254
substitute the result for s. if not ,
0
example# 15255
call the method s.decode [ s . decode ] with encoding and errors as the arguments , substitute the result for s .
0
example# 15256
if an exception of the type UnicodeDecodeError , renamed to e , is caught ,
0
example# 15257
if s is not an instance of the object Exception ,
0
example# 15258
raise an exception DjingoUnicodeDecodeError , with s and list of arguments *args from object e , as the arguments .
0
example# 15259
if not ,
0
example# 15260
for every arg in s , call the function force_text with arg , encoding , strings_only and errors as arguments ,
0
example# 15261
join the result in a string separated by whitespaces , substitute it for s. return s .
0
example# 15262
define function smart_bytes with s , encoding set to string _STR:0_ , strings_only set to False and errors set to string _STR:1_ , as arguments .
2
'utf-8' ||| _STR:0_
'strict' ||| _STR:1_
example# 15263
if s is an instance of an object Promise .
0
example# 15264
return s .
0
example# 15265
evaluate the function force_bytes , with the arguments s , encoding , strings_only and errors , return the result .
0
example# 15266
define function force_bytes with s , encoding set to _STR:0_ , strings_only set to False and errors set to _STR:1_ as arguments .
2
'utf-8' ||| _STR:0_
'strict' ||| _STR:1_
example# 15267
if s is an instance of an object bytes .
0
example# 15268
if encoding equals to string _STR:0_ .
1
'utf-8' ||| _STR:0_
example# 15269
return s .
0
example# 15270
if not ,
0
example# 15271
evaluate the method s.decode [ s . decode ] with string _STR:0_ and errors as the arguments ,
1
'utf-8' ||| _STR:0_
example# 15272
on the result call the method encode with the arguments encoding and errors , return the result . if strings_only and boolean return value of the call to the function is_protected_type for argument s are boolean True ,
0
example# 15273
return s .
0
example# 15274
if s is an instance of an object six.memoryview [ six . memoryview ] .
0
example# 15275
evaluate the function bytes with the argument s , and return the result .
0
example# 15276
if s is an instance of an object Promise .
0
example# 15277
return six.text_type [ six . text_type ] ( s ) .encode ( encoding , errors ) .
0
example# 15278
if s is not an instance of the object six.string_types [ six . string_types ] ,
0
example# 15279
try ,
0
example# 15280
if PY3 field of six is boolean True ,
0
example# 15281
evaluate the method six.text_type [ six . text_type ] ( s ) , on the result call the method encode with encoding as an argument , return the result .
0
example# 15282
if not ,
0
example# 15283
evaluate the function bytes with the argument s , and return the result .
0
example# 15284
if the UnicodeEncodeError exception is caught ,
0
example# 15285
if s is an instance of the subclass Exception ,
0
example# 15286
for every arg in s , evaluate the function force_bytes for the arguments arg , encoding , strings_only and errors ,
0
example# 15287
put the results in a list , join the list elements in a string separated by whitespace separator , return the string as the bytes string . evaluate the method six.text_type [ six . text_type ] ( s ) , on the result call the method encode with the arguments encoding and errors , return the result .
0
example# 15288
if not ,
0
example# 15289
evaluate the member method of s , encode with the encoding and errors as the arguments , return the result .
0
example# 15290
if PY3 field of module six is boolean True ,
0
example# 15291
substitute smart_text for smart_str .
0
example# 15292
substitute force_text for force_str .
0
example# 15293
if not ,
0
example# 15294
substitute smart_bytes for smart_str .
0
example# 15295
substitute force_bytes for force_str .
0
example# 15296
substitute smart_text for smart_unicode .
0
example# 15297
substitute force_text for force_unicode .
0
example# 15298
define the function iri_to_uri with iri as an argument .
0
example# 15299
if iri is not initialized ,
0
example# 15300
return iri .
0
example# 15301
call the function quote with return value of the evaluated function force_bytes ( iri ) ,
0
example# 15302
and with safe set to bytes string _STR:0_ , return the result . define function filepath_to_uri with path as the argument .
1
"/#%[]=:;$&()+,!?*@'~" ||| _STR:0_
example# 15303
if path is not initialized ,
0
example# 15304
return path .
0
example# 15305
evaluate function force_bytes with path as the argument , replace all of the occurancies of the _STR:0_/ '' in the resulting string ,
1
"\\" with " ||| _STR:0_
example# 15306
call the function quote with the result and with the safe set to bytes string _STR:0_ , return the function result . define the function get_system_encoding without the input arguments .
1
"/~!*()'" ||| _STR:0_
example# 15307
try ,
0
example# 15308
evaluate the function getdefaultlocale from the module locale , if second element of return value exists assign it to encoding ,
0
example# 15309
otherwise assign string _STR:0_ to encoding . call the method lookup with the encoding as the argument .
1
'ascii' ||| _STR:0_
example# 15310
if the Exception exception is caught ,
0
example# 15311
substitute string _STR:0_ for encoding .
1
'ascii' ||| _STR:0_
example# 15312
return encoding .
0
example# 15313
evaluate the function get_system_encoding ( ) , substitute the return vale for DEFAULT_LOCALE_ENCODING .
0
example# 15314
from __future__ import unicode_literals into default name space .
0
example# 15315
import module datetime .
0
example# 15316
from django.utils.xmlutils [ django . utils . xmlutils ] import SimplerXMLGenerator into default name space .
0
example# 15317
from django.utils.encoding [ django . utils . encoding ] import force_text and iri_to_uri into default name space .
0
example# 15318
from django.utils [ django . utils ] import datetime_safe into default name space .
0
example# 15319
from django.utils [ django . utils ] import six into default name space .
0
example# 15320
from django.utils.six [ django . utils . six ] import StringIO into default name space .
0
example# 15321
from django.utils.six.moves.urllib.parse [ django . utils . six . moves . urllib . parse ] import urlparse into default name space .
0
example# 15322
from django.utils.timezone [ django . utils . timezone ] import is_aware into default name space .
0
example# 15323
define the function rfc2822_date with an argument date .
0
example# 15324
months is a tuple with 12 elements : strings _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ , _STR:5_ , _STR:6_ , _STR:7_ , _STR:8_ , _STR:9_ , _STR:10_ and _STR:11_ .
12
'Feb' ||| _STR:1_
'Apr' ||| _STR:3_
'May' ||| _STR:4_
'Nov' ||| _STR:10_
'Dec' ||| _STR:11_
'Jan' ||| _STR:0_
'Jul' ||| _STR:6_
'Aug' ||| _STR:7_
'Mar' ||| _STR:2_
'Oct' ||| _STR:9_
'Sep' ||| _STR:8_
'Jun' ||| _STR:5_
example# 15325
days is a tuple with 7 elements : strings _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ , _STR:5_ and _STR:6_ .
7
'Sun' ||| _STR:6_
'Sat' ||| _STR:5_
'Mon' ||| _STR:0_
'Tue' ||| _STR:1_
'Fri' ||| _STR:4_
'Thu' ||| _STR:3_
'Wed' ||| _STR:2_
example# 15326
call the method datetime_safe.new_datetime [ datetime_safe . new_datetime ] with an argument date , substitute the result for date .
0
example# 15327
call the method date.weekday [ date . weekday ] , use the result as an key to obtain the value from the days dictionary , substitute it for dow .
0
example# 15328
decrement date.month [ date . month ] by integer 1 , use the result as an key to obtain the value from the months dictionary , substitute it for month .
0
example# 15329
call the function date.strftime [ date . strftime ] with an argument string _STR:0_ formated with dow and month ,
1
'%s, %%d %s %%Y %%H:%%M:%%S ' ||| _STR:0_
example# 15330
substitute the result for time_str . if six.PY2 [ six . PY2 ] is true ,
0
example# 15331
call the method time_str.decode [ time_str . decode ] with an argument string _STR:0_ , substitute the result for time_str .
1
'utf-8' ||| _STR:0_
example# 15332
call the function is_aware with an argument date , if it evaluates to true ,
0
example# 15333
call the method date.tzinfo.utcoffset [ date . tzinfo . utcoffset ] with an argument date , substitute the result for offset .
0
example# 15334
multiply offset.days [ offset . days ] , integer 24 and integer 60 , sum the result with floored result of dividing offset.seconds [ offset . seconds ] by integer 60 ,
0
example# 15335
substitute the result for timezone . divide timezone by integer 60 , substitute the quotient of the division for hour and reminder for minute .
0
example# 15336
format string _STR:0_ with hour and minute , append it to time_str , return the result .
1
'%+03d%02d' ||| _STR:0_
example# 15337
if not ,
0
example# 15338
append string _STR:0_ to time_str , return the result .
1
'-0000' ||| _STR:0_
example# 15339
define the function rfc3339_date with an argument date .
0
example# 15340
call the function datetime_safe.new_datetime [ datetime_safe . new_datetime ] with an argument date , substitute the result for date .
0
example# 15341
call the function date.strftime [ date . strftime ] with an argument string _STR:0_ , substitute the result for time_str .
1
'%Y-%m-%dT%H:%M:%S' ||| _STR:0_
example# 15342
if six.PY2 [ six . PY2 ] ,
0
example# 15343
call the method time_str.decode [ time_str . decode ] with an argument string _STR:0_ , substitute the result for time_str .
1
'utf-8' ||| _STR:0_
example# 15344
call the function is_aware with an argument date , if it evaluates to true ,
0
example# 15345
call the method date.tzinfo.utcoffset [ date . tzinfo . utcoffset ] with an argument date , substitute the result for offset .
0
example# 15346
multiply offset.days [ offset . days ] , integer 24 and integer 60 , sum the result with floored result of division of offset.seconds [ offset . seconds ] ,
0
example# 15347
and integer 60 , substitute the result for timezone . divide timezone by integer 60 , substitute the quotient of the division for hour and reminder for minute .
0
example# 15348
format string _STR:0_ with hour and minute , append it to time_str , return the result .
1
'%+03d:%02d' ||| _STR:0_
example# 15349
if not ,
0
example# 15350
append _STR:0_ to time_str , return the result .
1
'Z' ||| _STR:0_
example# 15351
define the function get_tag_uri with 2 arguments : url and date .
0
example# 15352
call the method urlparse with an argument url , substitute the result for bits .
0
example# 15353
d is an empty string .
0
example# 15354
if date is not None ,
0
example# 15355
call the function datetime_safe.new_datetime [ datetime_safe . new_datetime ] with an argument date , on the result call the method strftime with an argument ,
0
example# 15356
string _STR:0_ , convert the result into a string and append it to _STR:1_ , substitute the result for d. format string _STR:2_ with bits.hostname [ bits . hostname ] , d , bits.path [ bits . path ] and bits.fragment [ bits . fragment ] , return it .
3
'tag:%s%s:%s/%s' ||| _STR:2_
'%Y-%m-%d' ||| _STR:0_
',' ||| _STR:1_
example# 15357
derive the class SyndicationFeed from the object base class .
0
example# 15358
define the method __init__ with 15 elements : self , title , link , description , language set to None , author_email set to None ,
0
example# 15359
author_name set to None , author_link set to None , subtitle set to None , categories set to None , feed_url set to None , feed_copyright set to None , feed_guid set to None , ttl set to None and unpacked dictionary kwargs . to_unicode is an lambda function with an argument s , result is the result of the function force_text ,
0
example# 15360
called with 2 arguments : s and string_only as boolean True . if categories is true ,
0
example# 15361
categories is a list containing the results of the function force_text , called with an argument c , for every c in categories .
0
example# 15362
if ttl is not None ,
0
example# 15363
call the function force_text with an argument ttl , substitute the result for ttl .
0
example# 15364
self.feed [ self . feed ] is an dictionary with 13 initial entries , result of the function to_unicode called with an argument title for _STR:0_ ,
1
'title' ||| _STR:0_
example# 15365
result of the function iri_to_uri called with an argument link for _STR:0_ , result of the function to_unicode called with an argument description for _STR:1_ , result of the function to_unicode called with an argument language for _STR:2_ , result of the function to_unicode called with an author_email description for _STR:3_ , result of the function to_unicode called with an argument author_name for _STR:4_ , result of the function iri_to_uri called with an argument author_link for _STR:5_ , result of the function to_unicode called with an argument subtitle for _STR:6_ , if true , categories is value for _STR:7_ key , if not , empty tuple is value for _STR:7_ key , result of the function iri_to_uri called with an argument feed_url for _STR:8_ , result of the function to_unicode called with an argument feed_copyright for _STR:9_ , if true , feed_guid is value for _STR:10_ key , if not , lik is value for _STR:10_ key and ttl for _STR:11_ . update self.feed [ self . feed ] dictionary with kwargs .
12
'author_email' ||| _STR:3_
'feed_url' ||| _STR:8_
'description' ||| _STR:1_
'subtitle' ||| _STR:6_
'categories' ||| _STR:7_
'language' ||| _STR:2_
'author_name' ||| _STR:4_
'feed_copyright' ||| _STR:9_
'id' ||| _STR:10_
'author_link' ||| _STR:5_
'link' ||| _STR:0_
'ttl' ||| _STR:11_
example# 15366
self.items [ self . items ] is an empty list .
0
example# 15367
define the method add_item with 17 arguments : self , title , link , description , author_email set to None , author_name set to None ,
0
example# 15368
to_unicode is an lambda function with an argument s , result is the result of the function force_text ,
0
example# 15369
called with 2 arguments : s and string_only as boolean True . if categories is true ,
0
example# 15370
categories is a list containing the results of the function to_unicode , called with an argument c , for every c in categories .
0
example# 15371
if ttl is not None ,
0
example# 15372
call the function force_text with an argument ttl , substitute the result for ttl .
0
example# 15373
item is a dictionary with 15 initial entries : result of the function to_unicode called with an argument title for _STR:0_ ,
1
'title' ||| _STR:0_
example# 15374
result of the function iri_to_uri called with an argument link for _STR:0_ , result of the function to_unicode called with an argument description for _STR:1_ , result of the function to_unicode called with an argument author_email for _STR:2_ , result of the function to_unicode called with an argument author_name for _STR:3_ , result of the function iri_to_uri called with an author_link link for _STR:4_ , pubdate for _STR:5_ , updateddate for _STR:6_ , result of the function to_unicode called with an comments author_name for _STR:7_ , result of the function to_unicode called with an argument unique_id ) for _STR:8_ , unique_id_is_permalink for _STR:9_ , enclosure for _STR:10_ , if true , categories is value for _STR:11_ key , if not , empty tuple is value for _STR:11_ key , result of the function to_unicode called with an argument item_copyright for _STR:12_ , ttl for _STR:13_ . update dictionary item with an argument kwargs .
14
'author_email' ||| _STR:2_
'description' ||| _STR:1_
'unique_id_is_permalink' ||| _STR:9_
'categories' ||| _STR:11_
'enclosure' ||| _STR:10_
'author_name' ||| _STR:3_
'pubdate' ||| _STR:5_
'author_link' ||| _STR:4_
'unique_id)' ||| _STR:8_
'item_copyright' ||| _STR:12_
'link' ||| _STR:0_
'ttl' ||| _STR:13_
'comments' ||| _STR:7_
'updateddate' ||| _STR:6_
example# 15375
append item to self.items [ self . items ] .
0
example# 15376
define the method num_items with an argument self .
0
example# 15377
return length of self.items [ self . items ] .
0
example# 15378
define the method root_attributes with an argument self .
0
example# 15379
return an empty dictionary .
0
example# 15380
define the method add_root_elements with 2 arguments self and handler .
0
example# 15381
do nothing .
0
example# 15382
define the method item_attributes with 2 arguments self and item .
0
example# 15383
return an empty dictionary .
0
example# 15384
define the method add_item_elements with 2 arguments , handler self and item .
0
example# 15385
do nothing .
0
example# 15386
define the method write with 3 arguments self , outfile and encoding .
0
example# 15387
raise an NotImplementedError with an argument string _STR:0_ .
1
'subclasses of SyndicationFeed must provide a write() method' ||| _STR:0_
example# 15388
define the method writeString with 2 arguments self and encoding .
0
example# 15389
s is an instance of StringIO class .
0
example# 15390
call the method self.write [ self . write ] with 2 arguments : s and encoding .
0
example# 15391
call the method s.getvalue [ s . getvalue ] , return the result .
0
example# 15392
define the method latest_post_date with an argument self .
0
example# 15393
latest_date is None .
0
example# 15394
date_keys is a tuple with 2 arguments : strings _STR:0_ and _STR:1_ .
2
'pubdate' ||| _STR:1_
'updateddate' ||| _STR:0_
example# 15395
for every item in self.items [ self . items ] ,
0
example# 15396
for every date_key in date_keys ,
0
example# 15397
get the value under the date_key key of the item dictionary , substitute it for item_date .
0
example# 15398
if item_date is true ,
0
example# 15399
if latest_date is None or item_date is greater than latest_date ,
0
example# 15400
substitute item_date for latest_date .
0
example# 15401
if latest_date is true , return it , if not , call the method datetime.datetime.now [ datetime . datetime . now ] and return the result .
0
example# 15402
derive the class Enclosure from the object base class .
0
example# 15403
define the method __init__ with 4 arguments : self , url , length and mime_type .
0
example# 15404
substitute length and mime_type for self.length [ self . length ] and self.mime_type [ self . mime_type ] .
0
example# 15405
call the function iri_to_uri with an argument url , substitute the result for self.url [ self . url ] .
0
example# 15406
derive the class RssFeed from the SyndicationFeed base class .
0
example# 15407
mime_type is a string _STR:0_ .
1
'application/rss+xml; charset=utf-8' ||| _STR:0_
example# 15408
define the method write with 3 arguments : self , outfile and encoding .
0
example# 15409
handler is an instance of SimplerXMLGenerator class , created with 2 arguments : outfile and encoding .
0
example# 15410
call the method handler.startDocument [ handler . startDocument ] .
0
example# 15411
call the method handler.startElement [ handler . startElement ] with 2 arguments : string _STR:0_ and result of the method self.rss_attributes [ self . rss_attributes ] .
1
"rss" ||| _STR:0_
example# 15412
call the method handler.startElement [ handler . startElement ] with 2 arguments : string _STR:0_ and result of the method self.root_attributes [ self . root_attributes ] .
1
"channel" ||| _STR:0_
example# 15413
call the method self.add_root_elements [ self . add_root_elements ] with an argument handler .
0
example# 15414
call the method self.write_items [ self . write_items ] with an argument handler .
0
example# 15415
call the method self.endChannelElement [ self . endChannelElement ] with an argument handler .
0
example# 15416
call the method handler.endElement [ handler . endElement ] with an argument string _STR:0_ .
1
'rss' ||| _STR:0_
example# 15417
define the method rss_attributes with an argument self .
0
example# 15418
return a dictionary with 2 elements : self._version [ self . _version ] for _STR:0_ and _STR:1_ for _STR:2_ .
3
"version" ||| _STR:0_
"http://www.w3.org/2005/Atom" ||| _STR:1_
"xmlns:atom" ||| _STR:2_
example# 15419
define the method write_items with 2 arguments : self and handler .
0
example# 15420
for every item in self.items [ self . items ] ,
0
example# 15421
call the method handler.startElement [ handler . startElement ] with 2 arguments : string _STR:0_ and result of the method self.item_attributes [ self . item_attributes ] with an argument item .
1
"item" ||| _STR:0_
example# 15422
call the method self.add_item_elements [ self . add_item_elements ] with 2 arguments : handler and item .
0
example# 15423
call the method handler.endElement [ handler . endElement ] with an argument string _STR:0_ .
1
'item' ||| _STR:0_
example# 15424
define the method add_root_elements with 2 arguments : self and handler .
0
example# 15425
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and value under the _STR:0_ key of the self.feed [ self . feed ] dictionary .
1
'title' ||| _STR:0_
example# 15426
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and value under the _STR:0_ key of the self.feed [ self . feed ] dictionary .
1
'link' ||| _STR:0_
example# 15427
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and value under the _STR:0_ key of the self.feed [ self . feed ] dictionary .
1
'description' ||| _STR:0_
example# 15428
if value under the _STR:0_ key of the self.feed [ self . feed ] dictionary is not None ,
1
'feed_url' ||| _STR:0_
example# 15429
call the method handler.addQuickElement [ handler . addQuickElement ] with 3 arguments : string _STR:0_ , None and dictionary with 2 entries : _STR:1_ for _STR:2_ ,
3
'atom:link' ||| _STR:0_
'rel' ||| _STR:2_
'self' ||| _STR:1_
example# 15430
value under the _STR:0_ key of the self.feed [ self . feed ] dictionary for _STR:1_ . if value under the _STR:2_ key of the self.feed [ self . feed ] dictionary is not None ,
3
'href' ||| _STR:1_
'feed_url' ||| _STR:0_
'language' ||| _STR:2_
example# 15431
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and value under the _STR:0_ key of the self.feed [ self . feed ] dictionary .
1
'language' ||| _STR:0_
example# 15432
for every cat in value under the _STR:0_ key of the self.feed [ self . feed ] dictionary .
1
'categories' ||| _STR:0_
example# 15433
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and cat .
1
"category" ||| _STR:0_
example# 15434
if value under the _STR:0_ key of the self.feed [ self . feed ] dictionary is not None ,
1
'feed_copyright' ||| _STR:0_
example# 15435
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and value under the _STR:1_ key of the self.feed [ self . feed ] dictionary .
2
'feed_copyright' ||| _STR:1_
'copyright' ||| _STR:0_
example# 15436
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and result of the function rfc2822_date ,
1
'lastBuildDate' ||| _STR:0_
example# 15437
called with an argument result of the method self.latest_post_date [ self . latest_post_date ] . if value under the _STR:0_ key of the self.feed [ self . feed ] dictionary is not None ,
1
'ttl' ||| _STR:0_
example# 15438
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and value under the _STR:0_ key of the self.feed [ self . feed ] dictionary .
1
'ttl' ||| _STR:0_
example# 15439
define the method endChannelElement with 2 arguments : self and handler .
0
example# 15440
call the method handler.endElement [ handler . endElement ] with an argument string _STR:0_ .
1
'channel' ||| _STR:0_
example# 15441
derive the class RssUserland091Feed from the RssFeed base class .
0
example# 15442
_version is a string _STR:0_ .
1
"0.91" ||| _STR:0_
example# 15443
define the method add_item_elements with 3 arguments : self , handler and item .
0
example# 15444
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and value under the _STR:0_ key of the item dictionary .
1
'title' ||| _STR:0_
example# 15445
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and value under the _STR:0_ key of the item dictionary .
1
'link' ||| _STR:0_
example# 15446
if value under the _STR:0_ key of the item dictionary is not None ,
1
'description' ||| _STR:0_
example# 15447
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and value under the _STR:0_ key of item dictionary .
1
'description' ||| _STR:0_
example# 15448
derive the class Rss201rev2Feed from the RssFeed base class .
0
example# 15449
_version is a string _STR:0_ .
1
"2.0" ||| _STR:0_
example# 15450
define the method add_item_elements with 3 arguments : self , handler and item .
0
example# 15451
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and value under the _STR:0_ key of the item dictionary .
1
'title' ||| _STR:0_
example# 15452
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and value under the _STR:0_ key of the item dictionary .
1
'link' ||| _STR:0_
example# 15453
if value under the _STR:0_ key of the item dictionary is not None ,
1
'description' ||| _STR:0_
example# 15454
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and value under the _STR:0_ key of the item dictionary .
1
'description' ||| _STR:0_
example# 15455
if values under _STR:0_ and _STR:1_ keys of the item dictionary are both true ,
2
"author_email" ||| _STR:1_
"author_name" ||| _STR:0_
example# 15456
call the method handler.addQuickElement [ handler . addQuickElement ] with an argument string _STR:0_ , _STR:1_ ,
2
"author" ||| _STR:0_
"%s (%s)" ||| _STR:1_
example# 15457
formated with values under the _STR:0_ and _STR:1_ keys of item dictionary . otherwise if value under the _STR:2_ key of the item dictionary is true ,
3
'author_email' ||| _STR:0_
'author_name' ||| _STR:1_
"author_email" ||| _STR:2_
example# 15458
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and value under the _STR:1_ key of the item dictionary .
2
'author_email' ||| _STR:1_
'author' ||| _STR:0_
example# 15459
otherwise if value under the _STR:0_ key of the item dictionary is true ,
1
"author_name" ||| _STR:0_
example# 15460
call the method handler.addQuickElement [ handler . addQuickElement ] with 3 arguments : string _STR:0_ ,
1
'dc:creator' ||| _STR:0_
example# 15461
value under the _STR:0_ key of the item dictionary and dictionary with an entry : _STR:1_ for _STR:2_ . if value under the _STR:3_ key of the item dictionary is not None ,
4
'author_name' ||| _STR:0_
"xmlns:dc" ||| _STR:2_
'pubdate' ||| _STR:3_
"http://purl.org/dc/elements/1.1/" ||| _STR:1_
example# 15462
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and result of the function rfc2822_date ,
1
'pubDate' ||| _STR:0_
example# 15463
called with value under the _STR:0_ key of the item dictionary . if value under the _STR:1_ key of the item dictionary is not None ,
2
'comments' ||| _STR:1_
'pubdate' ||| _STR:0_
example# 15464
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and value under the _STR:0_ key of the item dictionary .
1
'comments' ||| _STR:0_
example# 15465
if value under the _STR:0_ key of the item dictionary is not None ,
1
'unique_id' ||| _STR:0_
example# 15466
guid_attrs is an empty dictionary .
0
example# 15467
if value object the _STR:0_ key of the item dictionary is an instance of bool type ,
1
'unique_id_is_permalink' ||| _STR:0_
example# 15468
covert to string value under the _STR:0_ key of the item dictionary , convert it to lowercase ,
1
'unique_id_is_permalink' ||| _STR:0_
example# 15469
substitute the result for value under the _STR:0_ key of the guid_attrs dictionary . call the method handler.addQuickElement [ handler . addQuickElement ] with 3 arguments : string _STR:1_ , value under the _STR:2_ key of the item dictionary ,
3
'unique_id' ||| _STR:2_
'isPermaLink' ||| _STR:0_
'guid' ||| _STR:1_
example# 15470
and guid_attrs . if value under the _STR:0_ key of the item dictionary is not None ,
1
'ttl' ||| _STR:0_
example# 15471
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and value under the _STR:0_ key of the item dictionary .
1
'ttl' ||| _STR:0_
example# 15472
if value under the _STR:0_ key of the item dictionary is not None ,
1
'enclosure' ||| _STR:0_
example# 15473
call the method handler.addQuickElement [ handler . addQuickElement ] with 3 arguments : string _STR:0_ , an empty string and a dictionary with 3 entries :
1
'title' ||| _STR:0_
example# 15474
field url of the value under the _STR:0_ key of the item dictionary for _STR:1_ , field length of the value under the _STR:0_ key of the item dictionary for _STR:2_ , and field mime_type of the value under the _STR:0_ key of the item dictionary for _STR:3_ . for every cat in value under the _STR:4_ key of the item dictionary ,
5
'type' ||| _STR:3_
'length' ||| _STR:2_
'url' ||| _STR:1_
'categories' ||| _STR:4_
'enclosure' ||| _STR:0_
example# 15475
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and cat .
1
'category' ||| _STR:0_
example# 15476
derive the class Atom1Feed from the SyndicationFeed base class .
0
example# 15477
mime_type is a string _STR:0_ .
1
'application/atom+xml; charset=utf-8' ||| _STR:0_
example# 15478
ns is a string _STR:0_ .
1
"http://www.w3.org/2005/Atom" ||| _STR:0_
example# 15479
define the method write with 3 arguments : self , outfile and encoding .
0
example# 15480
handler is an instance of SimplerXMLGenerator class , created with 2 arguments : outfile and encoding .
0
example# 15481
call the method handler.startDocument [ handler . startDocument ] .
0
example# 15482
call the method handler.startElement [ handler . startElement ] with 2 arguments : string _STR:0_ and result of the method self.root_attributes [ self . root_attributes ] .
1
'feed' ||| _STR:0_
example# 15483
call the method self.add_root_elements [ self . add_root_elements ] with an argument handler .
0
example# 15484
call the method self.write_items [ self . write_items ] with an argument handler .
0
example# 15485
call the method handler.endElement [ handler . endElement ] with an argument string _STR:0_ .
1
'feed' ||| _STR:0_
example# 15486
define the method root_attributes with an argument self .
0
example# 15487
if value under the _STR:0_ key of the self.feed [ self . feed ] dictionary is not None ,
1
'language' ||| _STR:0_
example# 15488
return a dictionary with 2 entries : value under the _STR:0_ key of the self.feed [ self . feed ] dictionary for _STR:1_ ,
2
"xml:lang" ||| _STR:1_
'language' ||| _STR:0_
example# 15489
and self.ns [ self . ns ] for _STR:0_ . if not ,
1
"xmlns" ||| _STR:0_
example# 15490
return a dictionary with an entry : self.ns [ self . ns ] for _STR:0_ .
1
"xmlns" ||| _STR:0_
example# 15491
define the method add_root_elements with 2 arguments : self and handler .
0
example# 15492
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and value under the _STR:0_ key of the self.feed [ self . feed ] dictionary .
1
'title' ||| _STR:0_
example# 15493
call the method handler.addQuickElement [ handler . addQuickElement ] with 3 arguments : string _STR:0_ , an empty string and a dictionary with 2 entries :
1
'link' ||| _STR:0_
example# 15494
_STR:0_ for _STR:1_ and value under the _STR:2_ key of self.feed [ self . feed ] dictionary for _STR:3_ . if value under the _STR:4_ key of the self.feed [ self . feed ] dictionary is not None ,
5
'link' ||| _STR:2_
'alternate' ||| _STR:0_
'feed_url' ||| _STR:4_
'rel' ||| _STR:1_
'href' ||| _STR:3_
example# 15495
call the method handler.addQuickElement [ handler . addQuickElement ] with 3 arguments : string _STR:0_ , an empty string and a dictionary with 2 entries :
1
'link' ||| _STR:0_
example# 15496
_STR:0_ for _STR:1_ and value under the _STR:2_ key of self.feed [ self . feed ] dictionary for _STR:3_ . call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:4_ and value under the _STR:4_ key of the self.feed [ self . feed ] dictionary .
5
'href' ||| _STR:3_
'feed_url' ||| _STR:2_
'rel' ||| _STR:1_
'self' ||| _STR:0_
'title' ||| _STR:4_
example# 15497
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and result of the function rfc3339_date ,
1
'updated' ||| _STR:0_
example# 15498
called with an argument result of the method self.latest_post_date [ self . latest_post_date ] . if value under the _STR:0_ key of the self.feed [ self . feed ] dictionary is not None ,
1
'author_name' ||| _STR:0_
example# 15499
call the method handler.startElement [ handler . startElement ] with 2 arguments : string _STR:0_ and an empty dictionary .
1
'author' ||| _STR:0_
example# 15500
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and value under the _STR:1_ key of the self.feed [ self . feed ] dictionary .
2
'author_name' ||| _STR:1_
'name' ||| _STR:0_
example# 15501
if value under the _STR:0_ key of the self.feed [ self . feed ] dictionary is not None ,
1
'author_email' ||| _STR:0_
example# 15502
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and value under the _STR:1_ key of the self.feed [ self . feed ] dictionary .
2
'author_email' ||| _STR:1_
'email' ||| _STR:0_
example# 15503
if value under the _STR:0_ key of the self.feed [ self . feed ] dictionary is not None ,
1
'author_link' ||| _STR:0_
example# 15504
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and value under the _STR:1_ key of the self.feed [ self . feed ] dictionary .
2
'author_link' ||| _STR:1_
'uri' ||| _STR:0_
example# 15505
call the method handler.endElement [ handler . endElement ] with an argument string _STR:0_ .
1
'author' ||| _STR:0_
example# 15506
if value under the _STR:0_ key of the self.feed [ self . feed ] dictionary is not None ,
1
'subtitle' ||| _STR:0_
example# 15507
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and value under the _STR:0_ key of the self.feed [ self . feed ] dictionary .
1
'subtitle' ||| _STR:0_
example# 15508
for every cat in value under the _STR:0_ key of the self.feed [ self . feed ] dictionary .
1
'categories' ||| _STR:0_
example# 15509
call the method handler.addQuickElement [ handler . addQuickElement ] with 3 arguments : string _STR:0_ , an empty string and a dictionary with an entry :
1
'category' ||| _STR:0_
example# 15510
cat for _STR:0_ . if value under the _STR:1_ key of the self.feed [ self . feed ] dictionary is not None ,
2
'feed_copyright' ||| _STR:1_
'term' ||| _STR:0_
example# 15511
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and value under the _STR:1_ key of the self.feed [ self . feed ] dictionary .
2
'feed_copyright' ||| _STR:1_
'rights' ||| _STR:0_
example# 15512
define the method write_items with 2 arguments : self and handler .
0
example# 15513
for every item in self.items [ self . items ] ,
0
example# 15514
call the method handler.startElement [ handler . startElement ] with 2 arguments : string _STR:0_ and result of the function self.item_attributes [ self . item_attributes ] ,
1
'entry' ||| _STR:0_
example# 15515
called with an argument item . call the method self.add_item_elements [ self . add_item_elements ] with 2 arguments : handler and item .
0
example# 15516
call the method handler.endElement [ handler . endElement ] with an argument string _STR:0_ .
1
'entry' ||| _STR:0_
example# 15517
define the method add_item_elements with 3 arguments : self , handler and item .
0
example# 15518
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and value under the _STR:0_ key of the item dictionary .
1
'title' ||| _STR:0_
example# 15519
call the method handler.addQuickElement [ handler . addQuickElement ] with 3 arguments : string _STR:0_ , an empty string and a dictionary with 2 entries :
1
'link' ||| _STR:0_
example# 15520
value under the _STR:0_ key of item dictionary for _STR:1_ and _STR:2_ for _STR:3_ . if value under the _STR:4_ key of the item dictionary is not None ,
5
'link' ||| _STR:0_
'href' ||| _STR:1_
"rel" ||| _STR:3_
'pubdate' ||| _STR:4_
"alternate" ||| _STR:2_
example# 15521
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and result of the function rfc3339_date ,
1
'published' ||| _STR:0_
example# 15522
called with an argument value under the _STR:0_ key of the item dictionary . if value under the _STR:1_ key of the item dictionary is not None ,
2
'updateddate' ||| _STR:1_
'pubdate' ||| _STR:0_
example# 15523
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and result of the function rfc3339_date ,
1
'updated' ||| _STR:0_
example# 15524
called with an argument value under the _STR:0_ key of the item dictionary . if value under the _STR:1_ key of the item dictionary is not None ,
2
'author_name' ||| _STR:1_
'updateddate' ||| _STR:0_
example# 15525
call the method handler.endElement [ handler . endElement ] with 2 arguments : string _STR:0_ and an empty dictionary .
1
'author' ||| _STR:0_
example# 15526
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and value under the _STR:1_ key of the item dictionary .
2
'author_name' ||| _STR:1_
'name' ||| _STR:0_
example# 15527
if value under the _STR:0_ key of the item dictionary is not None ,
1
'author_email' ||| _STR:0_
example# 15528
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and value under the _STR:1_ key of the item dictionary .
2
'author_email' ||| _STR:1_
'email' ||| _STR:0_
example# 15529
if value under the _STR:0_ key of the item dictionary is not None ,
1
'author_link' ||| _STR:0_
example# 15530
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and value under the _STR:1_ key of the item dictionary .
2
'author_link' ||| _STR:1_
'uri' ||| _STR:0_
example# 15531
call the method handler.endElement [ handler . endElement ] with an argument string _STR:0_ .
1
'author' ||| _STR:0_
example# 15532
if value under the _STR:0_ key of the item dictionary is not None ,
1
'unique_id' ||| _STR:0_
example# 15533
substitute value under _STR:0_ key of item dictionary for unique_id .
1
'unique_id' ||| _STR:0_
example# 15534
if not ,
0
example# 15535
call the function get_tag_uri with 2 arguments : values under _STR:0_ and _STR:1_ keys of item dictionary , substitute the result for unique_id .
2
'link' ||| _STR:0_
'pubdate' ||| _STR:1_
example# 15536
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and unique_id .
1
'id' ||| _STR:0_
example# 15537
if value under the _STR:0_ key of the item dictionary is not None ,
1
'description' ||| _STR:0_
example# 15538
call the method handler.addQuickElement [ handler . addQuickElement ] with 3 arguments : string _STR:0_ , value under the _STR:1_ key of item dictionary ,
2
'description' ||| _STR:1_
'summary' ||| _STR:0_
example# 15539
and dictionary with an entry : _STR:0_ for _STR:1_ . if value under the _STR:2_ key of the item dictionary is not None ,
3
'html' ||| _STR:0_
'type' ||| _STR:1_
'enclosure' ||| _STR:2_
example# 15540
call the method handler.addQuickElement [ handler . addQuickElement ] with 3 arguments : string _STR:0_ , an empty string and a dictionary with 4 entries :
1
'link' ||| _STR:0_
example# 15541
_STR:0_ for _STR:1_ , field url of value under the _STR:0_ key of item dictionary for _STR:2_ , field length of value under the _STR:0_ key of item dictionary for _STR:3_ , and field mime_type of value under the _STR:0_ key of item dictionary for _STR:4_ . for every cat in value under _STR:5_ key of item dictionary ,
6
'categories' ||| _STR:5_
'href' ||| _STR:2_
'length' ||| _STR:3_
"enclosure" ||| _STR:0_
'rel' ||| _STR:1_
'type' ||| _STR:4_
example# 15542
call the method handler.addQuickElement [ handler . addQuickElement ] with 3 arguments : string _STR:0_ , an empty string and a dictionary with an entry :
1
'link' ||| _STR:0_
example# 15543
cat for _STR:0_ . if value under the _STR:1_ key of the item dictionary is not None ,
2
'term' ||| _STR:0_
'item_copyright' ||| _STR:1_
example# 15544
call the method handler.addQuickElement [ handler . addQuickElement ] with 2 arguments : string _STR:0_ and value under the _STR:1_ key of the item dictionary .
2
'rights' ||| _STR:0_
'item_copyright' ||| _STR:1_
example# 15545
substitute Rss201rev2Feed for DefaultFeed .
0
example# 15546
from __future__ import absolute_ into default name space .
0
example# 15547
import module decimal .
0
example# 15548
import module datetime .
0
example# 15549
from importlib import import_module into default name space .
0
example# 15550
import module unicodedata .
0
example# 15551
from django.conf [ django . conf ] import settings into default name space .
0
example# 15552
from django.utils [ django . utils ] import dateformat , numberformat and datetime_safe into default name space .
0
example# 15553
from django.utils.encoding [ django . utils . encoding ] import force_str into default name space .
0
example# 15554
from django.utils.functional [ django . utils . functional ] import lazy into default name space .
0
example# 15555
from django.utils.safestring [ django . utils . safestring ] import mark_safe into default name space .
0
example# 15556
from django.utils [ django . utils ] import six into default name space .
0
example# 15557
from django.utils.translation [ django . utils . translation ] import get_language , to_locale and check_for_language into default name space .
0
example# 15558
_format_cache is an empty dictionary .
0
example# 15559
_format_modules_cache is an empty dictionary .
0
example# 15560
ISO_INPUT_FORMATS is a dictionary with 3 entries : tuple with an element string _STR:0_ for _STR:1_ ,
2
'%Y-%m-%d' ||| _STR:0_
'DATE_INPUT_FORMATS' ||| _STR:1_
example# 15561
tuple with 3 elements : strings _STR:0_ , _STR:1_ and _STR:2_ for _STR:3_ , tuple with 4 elements : strings _STR:4_ , _STR:5_ , _STR:6_ and _STR:7_ for _STR:8_ . define the function reset_format_cache .
9
'%Y-%m-%d %H:%M:%S' ||| _STR:4_
'%Y-%m-%d' ||| _STR:7_
'%H:%M:%S.%f' ||| _STR:1_
'TIME_INPUT_FORMATS' ||| _STR:3_
'%H:%M:%S' ||| _STR:0_
'DATETIME_INPUT_FORMATS' ||| _STR:8_
'%H:%M' ||| _STR:2_
'%Y-%m-%d %H:%M' ||| _STR:6_
'%Y-%m-%d %H:%M:%S.%f' ||| _STR:5_
example# 15562
use global variables _format_cache and _format_modules_cache .
0
example# 15563
_format_cache is an empty dictionary .
0
example# 15564
_format_modules_cache is an empty dictionary .
0
example# 15565
define the function iter_format_modules with 2 arguments : lang and format_module_path set to None .
0
example# 15566
call the function check_for_language with an argument lang , if it evaluates to false ,
0
example# 15567
return nothing .
0
example# 15568
if format_module_path is None .
0
example# 15569
substitute settings.FORMAT_MODULE_PATH [ settings . FORMAT_MODULE_PATH ] for settings.FORMAT_MODULE_PATH [ settings . FORMAT_MODULE_PATH ] .
0
example# 15570
format_locations is an empty list .
0
example# 15571
if format_module_path is true ,
0
example# 15572
if format_module_path is an instance of six.string_types [ six . string_types ] ,
0
example# 15573
format_module_path is a list containing an element format_module_path .
0
example# 15574
for every path in format_module_path ,
0
example# 15575
concatenate path and string _STR:0_ , append the result to format_module_path .
1
'.%s' ||| _STR:0_
example# 15576
append string _STR:0_ to format_locations .
1
'django.conf.locale.%s' ||| _STR:0_
example# 15577
call the function to_locale with an argument lang , substitute the result for locale .
0
example# 15578
locales is a list with an element locale .
0
example# 15579
if _STR:0_ is contained in locale ,
1
'_' ||| _STR:0_
example# 15580
split locale by _STR:0_ , append the first element of the result to locales .
1
'_' ||| _STR:0_
example# 15581
for every location in format_locations ,
0
example# 15582
for every loc in locales ,
0
example# 15583
try ,
0
example# 15584
call the function import_module with an argument string _STR:0_ formated with location , which is formated with loc ,
1
'%s.formats' ||| _STR:0_
example# 15585
yield the result . if ImportError exception is caught ,
0
example# 15586
do nothing .
0
example# 15587
define the function get_format_modules with 2 arguments : lang set to None and reverse set to boolean False .
0
example# 15588
if lang is None ,
0
example# 15589
call the function get_language , substitute the result for lang .
0
example# 15590
call the method _format_modules_cache.setdefault [ _format_modules_cache . setdefault ] with 2 arguments : lang and list created out of the results of the function ,
0
example# 15591
iter_format_modules called with 2 arguments : lang and settings.FORMAT_MODULE_PATH [ settings . FORMAT_MODULE_PATH ] , substitute the result for modules . if reverse is true ,
0
example# 15592
reverse the order of modules elements , put them into a list , return it .
0
example# 15593
return modules.s [ modules . s ]
0
example# 15594
define the function get_format with 3 arguments : format_type , lang set to None and use_l10n set to None .
0
example# 15595
call the function force_str with an argument format_type , substitute the result for format_type .
0
example# 15596
if use_l10n is true , or if use_l10n is None and settings.USE_L10N [ settings . USE_L10N ] is true ,
0
example# 15597
if lang is None ,
0
example# 15598
call the function get_language , substitute the result for lang .
0
example# 15599
cache_key is a tuple with 2 argumetns : format_type and lang .
0
example# 15600
try ,
0
example# 15601
substitute value under the cache_key key of the _format_cache dictionary for cached .
0
example# 15602
if cached is not None ,
0
example# 15603
return cached .
0
example# 15604
if not ,
0
example# 15605
get format_type attribute of the settings object , return it .
0
example# 15606
if KeyError exception is caught ,
0
example# 15607
call the function get_format_modules with an argument lang , for every module in the result ,
0
example# 15608
try ,
0
example# 15609
get format_type attribute of module object , substitute the result for val .
0
example# 15610
get the value under the if iso_input not in val key of the ISO_INPUT_FORMATS dictionary , if it doesnt exists return an empty tuple ,
0
example# 15611
for every iso_input in the result , if iso_input is not contained in val ,
0
example# 15612
if val is an instance of tuple ,
0
example# 15613
convert val to an list , substitute it for val .
0
example# 15614
append iso_input to val .
0
example# 15615
substitute val for the value under the cache_key key of the _format_cache dictionary .
0
example# 15616
return val .
0
example# 15617
if AttributeError exception is caught ,
0
example# 15618
do nothing .
0
example# 15619
value under the cache_key key of the _format_cache dictionary is None .
0
example# 15620
get format_type attribute of the settings object , return it .
0
example# 15621
call the function lazy with 4 arguments : get_format , six.text_type [ six . text_type ] , list and tuple , substitute the result for get_format_lazy .
0
example# 15622
define the function date_format with 3 arguments : value , format set to None and use_l10n set to None .
0
example# 15623
call the function dateformat.format [ dateformat . format ] with 2 arguments : value and result of the function get_format called with 2 arguments :
0
example# 15624
format , if its true , otherwise string _STR:0_ and use_l10n as use_l10n , return the result . define the function time_format with 3 arguments : value , format set to None and use_l10n set to None .
1
'DATE_FORMAT' ||| _STR:0_
example# 15625
call the function dateformat.time_format [ dateformat . time_format ] with 2 arguments : value and result of the function get_format called with 2 arguments :
0
example# 15626
format , if its true , otherwise string _STR:0_ and use_l10n as use_l10n , return the result . define the function number_format with 4 arguments : value , decimal_pos set to None , use_l10n set to None ,
1
'TIME_FORMAT' ||| _STR:0_
example# 15627
if use_l10n is true , or use_l10n is None and settings.USE_L10N [ settings . USE_L10N ] is true ,
0
example# 15628
call the function get_language , substitute the result for lang .
0
example# 15629
if not ,
0
example# 15630
lang is None .
0
example# 15631
call the method numberformat.format [ numberformat . format ] with 6 arguments : value , result of the function get_format called with 3 arguments :
0
example# 15632
string _STR:0_ , lang and use_l10n set to use_l10n , decimal_pos , result of the function get_format called with 3 arguments : string _STR:1_ , lang and use_l10n as use_l10n , result of the function get_format called with an argument : string _STR:2_ , lang and use_l10n as use_l10n and force_grouping as force_grouping , return the result . define the function localize with 2 arguments value and use_l10n set to None .
3
'THOUSAND_SEPARATOR' ||| _STR:2_
'NUMBER_GROUPING' ||| _STR:1_
'DECIMAL_SEPARATOR' ||| _STR:0_
example# 15633
if value is an instance of bool .
0
example# 15634
call the function six.text_type [ six . text_type ] with an argument value , use the result as an argument for the call to the function mark_safe ,
0
example# 15635
return the result . otherwise if value is an instance of decimal.Decimal [ decimal . Decimal ] , float or six.integer_types [ six . integer_types ] ,
0
example# 15636
call the function number_format with 2 arguments : value and use_l10 as use_l10n , return the result .
0
example# 15637
otherwise if value is an instance of datetime.datetime [ datetime . datetime ] ,
0
example# 15638
call the function date_format with 2 arguments : value , string _STR:0_ and use_l10n as use_l10n , return the result .
1
'DATETIME_FORMAT' ||| _STR:0_
example# 15639
otherwise if value is an instance of datetime.date [ datetime . date ] ,
0
example# 15640
call the function date_format with 2 arguments : value and use_l10n as use_l10n , return the result .
0
example# 15641
otherwise if value is an instance of datetime.time [ datetime . time ] ,
0
example# 15642
call the function time_format with 3 arguments : value , string _STR:0_ and use_l10n as use_l10n , return the result .
1
'TIME_FORMAT' ||| _STR:0_
example# 15643
if not ,
0
example# 15644
return value .
0
example# 15645
define the function localize_input with 2 arguments value and default set to None .
0
example# 15646
otherwise if value is an instance of decimal.Decimal [ decimal . Decimal ] , float or six.integer_types [ six . integer_types ] ,
0
example# 15647
call the function number_format with an argument value , return the result .
0
example# 15648
otherwise if value is an instance of datetime.datetime [ datetime . datetime ] ,
0
example# 15649
call the method datetime_safe.new_datetime [ datetime_safe . new_datetime ] with an argument value , substitute the result for value .
0
example# 15650
call the function force_str with an argument : default if it is true , or if not , first element of the result of the function ,
0
example# 15651
get_format called with an argument string _STR:0_ , substitute the result for format . call the method value.strftime [ value . strftime ] with an argument format , return the result .
1
'DATETIME_INPUT_FORMATS' ||| _STR:0_
example# 15652
otherwise if value is an instance of datetime.date [ datetime . date ] ,
0
example# 15653
call the method datetime_safe.new_date [ datetime_safe . new_date ] with an argument value , substitute the result for value .
0
example# 15654
call the function force_str with an argument : default if it is true , or if not , first element of the result of the function ,
0
example# 15655
get_format called with an argument string _STR:0_ , substitute the result for format . call the method value.strftime [ value . strftime ] with an argument format , return the result .
1
'DATE_INPUT_FORMATS' ||| _STR:0_
example# 15656
otherwise if value is an instance of datetime.time [ datetime . time ] ,
0
example# 15657
call the function force_str with an argument : default if it is true , or if not , first element of the result of the function ,
0
example# 15658
get_format called with an argument string _STR:0_ , substitute the result for format . call the method value.strftime [ value . strftime ] with an argument format , return the result .
1
'TIME_INPUT_FORMATS' ||| _STR:0_
example# 15659
return value .
0
example# 15660
define the function sanitize_separators with an argument value .
0
example# 15661
if settings.USE_L10N [ settings . USE_L10N ] is true and value is an instance of six.string_types [ six . string_types ] ,
0
example# 15662
parts is an empty list .
0
example# 15663
call the function get_format with an argument string _STR:0_ , substitute the result for decimal_separator .
1
'DECIMAL_SEPARATOR' ||| _STR:0_
example# 15664
if decimal_separator is contained in value ,
0
example# 15665
split value into two parts by decimal_separator , assign the result to value and decimals .
0
example# 15666
append decimals to parts .
0
example# 15667
if settings.USE_THOUSAND_SEPARATOR [ settings . USE_THOUSAND_SEPARATOR ] is true ,
0
example# 15668
call the function get_format with an argument string _STR:0_ , substitute the result for thousand_sep .
1
'THOUSAND_SEPARATOR' ||| _STR:0_
example# 15669
call the function unicodedata.normalize [ unicodedata . normalize ] with 2 arguments : string _STR:0_ and thousand_sep , put the result and thousand_sep into a set ,
1
'NFKD' ||| _STR:0_
example# 15670
for every replacement in the resulting set , replace every occurrence of replacement in value for an empty string , substitute the result for value .
0
example# 15671
append value to parts .
0
example# 15672
reverse order of parts , join them into a string , separated with _STR:0_ , substitute the result for value .
1
'.' ||| _STR:0_
example# 15673
return value .
0
example# 15674
import module copy .
0
example# 15675
import module opera .
0
example# 15676
from functools import wraps into default name space .
0
example# 15677
import module sys .
0
example# 15678
import module warnings .
0
example# 15679
from django.utils [ django . utils ] import six into default name space .
0
example# 15680
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
0
example# 15681
from django.utils.six.moves [ django . utils . six . moves ] import copyreg into default name space .
0
example# 15682
define the function curry with 3 arguments : _curried_func , unpacked list args and unpacked dictionary kwargs .
0
example# 15683
define the function _curried with 2 arguments : unpacked list moreargs and unpacked dictionary morekwargs .
0
example# 15684
call the function _curried_func with 2 arguments : list moreargs appended to args and unpacked ,
0
example# 15685
unpacked dictionary created with elements of morekwargs dictionary through the kwargs mapping , return the result . return _curried .
0
example# 15686
define the function memoize with 3 arguments : func , cache and num_args .
0
example# 15687
call the function warnings.warn [ warnings . warn ] with 3 arguments :
0
example# 15688
string _STR:0_ , RemovedInDjango19Warning and stacklevel set to integer 2. decorator function wraps with an argument func .
1
"memoize wrapper is deprecated and will be removed in Django 1.9. Use django.utils.lru_cache instead." ||| _STR:0_
example# 15689
define the function wrapper with an argument unpacked list args .
0
example# 15690
mem_args is a list containing of first num_args elements of args list .
0
example# 15691
if mem_args is contained in cache ,
0
example# 15692
get the value under the mem_args key of the cache dictionary , return it .
0
example# 15693
call the function func with an argument unpacked list args , substitute the result for result .
0
example# 15694
substitute result for value under the mem_args key of the cache dictionary .
0
example# 15695
return result .
0
example# 15696
return wrapper .
0
example# 15697
derive the class cached_property from the object base class .
0
example# 15698
define the method __init__ with 3 arguments : self , func and name set to None .
0
example# 15699
substitute func for self.func [ self . func ] .
0
example# 15700
if name is true , substitute it for self.name [ self . name ] , otherwise substitute func.__name__ [ func . __name__ ] for self.name [ self . name ] .
0
example# 15701
define the method __get__ with 3 arguments : self , instance and name type to None .
0
example# 15702
if instance is None ,
0
example# 15703
return self .
0
example# 15704
call the function self.func [ self . func ] with an argument instance , substitute the result for res and value under the self.name [ self . name ] key of the instance.__dict__ [ instance . __dict__ ] dictionary .
0
example# 15705
return res .
0
example# 15706
derive the class Promise from the object base class .
0
example# 15707
do nothing .
0
example# 15708
define the function lazy with 2 arguments : func and unpacked list resultclasses .
0
example# 15709
decorator total_ordering ,
0
example# 15710
derive the class __proxy__ from the Promise base class .
0
example# 15711
__dispatch is None .
0
example# 15712
define the method __init__ with 3 arguments : self , args and kw .
0
example# 15713
substitute args for self.__args [ self . __args ] .
0
example# 15714
substitute kw for self.__kw [ self . __kw ] .
0
example# 15715
if self.__dispatch [ self . __dispatch ] is None .
0
example# 15716
call the method self.__prepare_class__ [ self . __prepare_class__ ] .
0
example# 15717
define the method __reduce__ with an argument self .
0
example# 15718
return a tuple wit 2 elements : _lazy_proxy_unpickle and tuple with 3 elements : func , self.__args [ self . __args ] , self.__kw [ self . __kw ] and resultclasses .
0
example# 15719
classmethod decorator ,
0
example# 15720
define the method __prepare_class__ with an argument self .
0
example# 15721
cls.__dispatch [ cls . __dispatch ] is an empty dictionary .
0
example# 15722
for every resultclass in resultclasses ,
0
example# 15723
value under the resultclass key of the cls.__dispatch [ cls . __dispatch ] dictionary is an empty dictionary .
0
example# 15724
call the method resultclass.mro [ resultclass . mro ] , reverse the order of elements , for every type_ in the result .
0
example# 15725
for every k and v in result of the call to the method type_.__dict__.items [ type_ . __dict__ . items ] ,
0
example# 15726
call the method cls.__promise__ [ cls . __promise__ ] with 3 arguments : resultclass , k and v , substitute the result for meth .
0
example# 15727
if cls has an attribute k ,
0
example# 15728
skip this loop iteration ,
0
example# 15729
set k attribute of cls object to meth .
0
example# 15730
if bytes is contained in resultclasses , cls._delegate_bytes [ cls . _delegate_bytes ] is boolean True , otherwise it is boolean False .
0
example# 15731
if six.text_type [ six . text_type ] is contained in resultclasses , cls._delegate_text [ cls . _delegate_text ] is boolean True , otherwise it is boolean False .
0
example# 15732
if cls._delegate_bytes [ cls . _delegate_bytes ] and cls._delegate_text [ cls . _delegate_text ] are both false , raise an error , with an argument string _STR:0_ .
1
"Cannot call lazy() with both bytes and text return types." ||| _STR:0_
example# 15733
if cls._delegate_text [ cls . _delegate_text ] is true ,
0
example# 15734
if six.PY3 [ six . PY3 ] is true ,
0
example# 15735
substitute cls.__text_cast [ cls . __text_cast ] for cls.__str__ [ cls . __str__ ] .
0
example# 15736
if not ,
0
example# 15737
substitute cls.__text_cast [ cls . __text_cast ] for cls.__text_cast [ cls . __text_cast ] .
0
example# 15738
otherwise if cls._delegate_bytes [ cls . _delegate_bytes ] is true ,
0
example# 15739
if six.PY3 [ six . PY3 ] is true ,
0
example# 15740
substitute cls.__bytes_cast [ cls . __bytes_cast ] for cls.__bytes__ [ cls . __bytes__ ] .
0
example# 15741
if not ,
0
example# 15742
substitute cls.__bytes_cast [ cls . __bytes_cast ] for cls.__str__ [ cls . __str__ ] .
0
example# 15743
class method decorator ,
0
example# 15744
define the method __promise__ with 4 arguments : cls , klass , funcname and method .
0
example# 15745
define the method __wrapper__ with 3 arguments : self , unpacked list args and unpacked dictionary kw .
0
example# 15746
call the function func with 2 arguments : unpacked list self.__args [ self . __args ] and unpacked dictionary self.__kw [ self . __kw ] , substitute the result for res .
0
example# 15747
get the type of res , call the method mro on the result , for every t in the result ,
0
example# 15748
if t is contained in self.__dispatch [ self . __dispatch ] ,
0
example# 15749
get the value under the funcname key of the t-th elment of self.__dispatch [ self . __dispatch ] dictionary , call the result with 3 arguments : res ,
0
example# 15750
unpacked list args and unpacked dictionary kw , return the result . raise an TypeError exception with an argument sting _STR:0_ .
1
"Lazy object returned unexpected type." ||| _STR:0_
example# 15751
if klass is not contained in cls.__dispatch [ cls . __dispatch ] ,
0
example# 15752
value under the klass key of the cls.__dispatch [ cls . __dispatch ] dictionary is an empty dictionary .
0
example# 15753
substitute method for value under the funcname key of the dictionary under the klass key of the cls.__dispatch [ cls . __dispatch ] dictionary .
0
example# 15754
return __wrapper__ .
0
example# 15755
define the method __text_cast with an argument self .
0
example# 15756
call the function func with 2 arguments : unpacked list self.__args [ self . __args ] and unpacked dictionary self.__kw [ self . __kw ] , return the result .
0
example# 15757
define the method __bytes_cast with an argument self .
0
example# 15758
call the function func with 2 arguments : unpacked list self.__args [ self . __args ] and unpacked dictionary self.__kw [ self . __kw ] ,
0
example# 15759
use the result as an argument for the call to the function bytes , return the result . define the method __cast with an argument self .
0
example# 15760
if self._delegate_bytes [ self . _delegate_bytes ] is true ,
0
example# 15761
call the method self.__bytes_cast [ self . __bytes_cast ] , return the result .
0
example# 15762
otherwise if self._delegate_text [ self . _delegate_text ] is true ,
0
example# 15763
call the method self.__text_cast [ self . __text_cast ] , return the result .
0
example# 15764
if not ,
0
example# 15765
call the function func with 2 arguments : unpacked list self.__args [ self . __args ] and unpacked dictionary self.__kw [ self . __kw ] , return the result .
0
example# 15766
define the method __ne__ with 2 arguments : self and other .
0
example# 15767
if other is an instance of Promise class ,
0
example# 15768
call the method other.__cast [ other . __cast ] , substitute the result for other .
0
example# 15769
call the method self.__cast [ self . __cast ] , if the result doesnt equal to other , return boolean True , otherwise return boolean False .
0
example# 15770
define the method __ne__ with 2 arguments : self and other .
0
example# 15771
if other is an instance of Promise class ,
0
example# 15772
call the method other.__cast [ other . __cast ] , substitute the result for other .
0
example# 15773
call the method self.__cast [ self . __cast ] , if the result equals other , return boolean True , otherwise return boolean False .
0
example# 15774
define the method __lt__ with 2 arguments : self and other .
0
example# 15775
if other is an instance of Promise ,
0
example# 15776
call the method other.__cast [ other . __cast ] , substitute the result for other .
0
example# 15777
call the method self.__cast [ self . __cast ] , if the result is lesser than other , return boolean True , otherwise return boolean False .
0
example# 15778
define the method __hash__ with an argument self .
0
example# 15779
call the method self.__cast [ self . __cast ] , return the hash value of the result .
0
example# 15780
define the method __mod__ with 2 arguments : self and rhs .
0
example# 15781
if self._delegate_bytes [ self . _delegate_bytes ] and six.PY2 [ six . PY2 ] are both true ,
0
example# 15782
call the function bytes with an argument self , divide the result with rhs and return the reminder of the division .
0
example# 15783
otherwise if self._delegate_text [ self . _delegate_text ] is true ,
0
example# 15784
call the function six.text_type [ six . text_type ] with an argument self , divide the result with rhs and return the reminder of the division .
0
example# 15785
call the function sself.__cast [ sself . __cast ] with an argument self , divide the result with rhs and return the reminder of the division .
0
example# 15786
define the method __deepcopy__ with 2 arguments : self and memo .
0
example# 15787
get the id of the self object , use it as a key to obtain the value from the memo dictionary , substitute self with it .
0
example# 15788
return self .
0
example# 15789
decorator function wraps with an argument func .
0
example# 15790
define the function __wrapper__ with 2 arguments : unpacked list args and unpacked dictionary kw .
0
example# 15791
call the function __proxy__ with 2 arguments : args and kw , return the result .
0
example# 15792
return __wrapper__ .
0
example# 15793
define the function _lazy_proxy_unpickle with 4 arguments : func , args , kwargs and unpacked list resultclasses .
0
example# 15794
call the function lazy with 2 arguments : func and unpacked list resultclasses , call the result with 2 arguments : unpacked list args ,
0
example# 15795
and unpacked dictionary kwargs . define the function allow_lazy with 2 arguments : func and unpacked list resultclasses .
0
example# 15796
decorator function wraps with an argument func .
0
example# 15797
define the function wrapper with 2 arguments : unpacked list args and unpacked dictionary kwargs .
0
example# 15798
call the function six.itervalues [ six . itervalues ] with an argument kwargs , convert the result to a list and append it to a list containing args ,
0
example# 15799
for every arg in the result , if arg is an instance of Promise class ,
0
example# 15800
break from the loop execution ,
0
example# 15801
if not ,
0
example# 15802
call the function func with 2 arguments : unpacked list args and unpacked dictionary kwargs .
0
example# 15803
call the function lazy with 2 arguments : func and unpacked list resultclasses , call the result with 2 arguments : unpacked list args ,
0
example# 15804
and unpacked dictionary kwargs , return the result . return wrapper .
0
example# 15805
empty is an instance of object class .
0
example# 15806
define the function new_method_proxy with an argument func .
0
example# 15807
define the method inner with 2 arguments : self and unpacked list args .
0
example# 15808
if self._wrapped [ self . _wrapped ] is contained in empty ,
0
example# 15809
call the method self._setup [ self . _setup ] .
0
example# 15810
call the function func with 2 arguments : self._wrapped [ self . _wrapped ] and unpacked list args .
0
example# 15811
self._wrapped [ self . _wrapped ] .
0
example# 15812
derive the class LazyObject from the object base class .
0
example# 15813
_wrapped is None .
0
example# 15814
define the method __init__ with an argument self .
0
example# 15815
substitute empty for self._wrapped [ self . _wrapped ] .
0
example# 15816
call the function new_method_proxy with an argument getattr , substitute the result for __getattr__ .
0
example# 15817
define the method __setattr__ with 3 arguments : self , name and value .
0
example# 15818
if name equals string _STR:0_ ,
1
"_wrapped" ||| _STR:0_
example# 15819
substitute value under the _STR:0_ key of the self.__dict__ [ self . __dict__ ] dictionary .
1
"_wrapped" ||| _STR:0_
example# 15820
if not ,
0
example# 15821
if self._wrapped [ self . _wrapped ] is empty ,
0
example# 15822
call the method self._setup [ self . _setup ] .
0
example# 15823
set name attribute of self._wrapped [ self . _wrapped ] object to value .
0
example# 15824
define the method __delattr__ with 2 arguments self and name .
0
example# 15825
if name equals string _STR:0_ ,
1
"_wrapped" ||| _STR:0_
example# 15826
raise an TypeError exception with an argument sting _STR:0_ .
1
"can't delete _wrapped." ||| _STR:0_
example# 15827
if self._wrapped [ self . _wrapped ] is empty ,
0
example# 15828
call the method self._setup [ self . _setup ] .
0
example# 15829
delete name attribute from self._wrapped [ self . _wrapped ] object .
0
example# 15830
define the method _setup with an argument self .
0
example# 15831
raise an NotImplementedError exception with an argument sting _STR:0_ .
1
'subclasses of LazyObject must provide a _setup() method' ||| _STR:0_
example# 15832
define the method __getstate__ with an argument self .
0
example# 15833
if self._wrapped [ self . _wrapped ] is empty ,
0
example# 15834
call the method self._setup [ self . _setup ] .
0
example# 15835
return self._wrapped.__dict__ [ self . _wrapped . __dict__ ] .
0
example# 15836
classmethod decorator ,
0
example# 15837
define the method __newobj__ with 2 arguments cls and unpacked list args .
0
example# 15838
call the method cls.__new__ [ cls . __new__ ] with 2 arguments : cls and unpacked list args .
0
example# 15839
define the method __reduce_ex__ with 2 arguments self and proto .
0
example# 15840
if proto is greater than or equal to integer 2 ,
0
example# 15841
return a tuple with 3 elements : self.__newobj__ [ self . __newobj__ ] , tuple with an element self.__class__ [ self . __class__ ] and result of the method self.__getstate__ [ self . __getstate__ ] .
0
example# 15842
if not ,
0
example# 15843
return a tuple with 3 elements : copyreg._reconstructor [ copyreg . _reconstructor ] , tuple with 3 elements : self.__class__ [ self . __class__ ] , object and None ,
0
example# 15844
and result of the method self.__getstate__ [ self . __getstate__ ] . define the method __deepcopy__ with 2 arguments self and memo .
0
example# 15845
if self._wrapped [ self . _wrapped ] is empty ,
0
example# 15846
get type of self , call it and substitute the result for result .
0
example# 15847
get the id of the self object , use it as a key to obtain the value from the memo dictionary , substitute self with it .
0
example# 15848
return result .
0
example# 15849
call the method copy.deepcopy [ copy . deepcopy ] with 2 arguments : self._wrapped [ self . _wrapped ] and memo , return the result .
0
example# 15850
if six.PY3 [ six . PY3 ] is true ,
0
example# 15851
call the function new_method_proxy with an argument bytes , substitute the result for __bytes__ .
0
example# 15852
call the function new_method_proxy with an argument str , substitute the result for __str__ .
0
example# 15853
call the function new_method_proxy with an argument bool , substitute the result for __bool__ .
0
example# 15854
if not ,
0
example# 15855
call the function new_method_proxy with an argument str , substitute the result for __str__ .
0
example# 15856
call the function new_method_proxy with an argument unicode , substitute the result for __unicode__ .
0
example# 15857
call the function new_method_proxy with an argument bool , substitute the result for __nonzero__ .
0
example# 15858
call the function new_method_proxy with an argument dir , substitute the result for __dir__ .
0
example# 15859
cal the method operator.attrgetter [ operator . attrgetter ] with an argument string _STR:0_ , use the result as an argument for the call to the function ,
1
"__class__" ||| _STR:0_
example# 15860
new_method_proxy , __class__ is an property object created with previous result as an argument . call the function new_method_proxy with an argument operator.eq [ operator . eq ] , substitute the result for __eq__ .
0
example# 15861
call the function new_method_proxy with an argument operator.ne [ operator . ne ] , substitute the result for __ne__ .
0
example# 15862
call the function new_method_proxy with an argument hash , substitute the result for __hash__ .
0
example# 15863
call the function new_method_proxy with an argument operator.getitem [ operator . getitem ] , substitute the result for __getitem__ .
0
example# 15864
call the function new_method_proxy with an argument operator.setitem [ operator . setitem ] , substitute the result for __setitem__ .
0
example# 15865
call the function new_method_proxy with an argument operator.delitem [ operator . delitem ] , substitute the result for __delitem__ .
0
example# 15866
call the function new_method_proxy with an argument len , substitute the result for __len__ .
0
example# 15867
call the function new_method_proxy with an argument operator.contains [ operator . contains ] , substitute the result for __contains__ .
0
example# 15868
substitute super for _super .
0
example# 15869
derive the class SimpleLazyObject from the LazyObject base class .
0
example# 15870
define the method __init__ with 2 arguments self and func .
0
example# 15871
substitute func for value under the _STR:0_ key of the self.__dict__ [ self . __dict__ ] dictionary .
1
'_setupfunc' ||| _STR:0_
example# 15872
call the function _super with 2 arguments : class SimpleLazyObject and self , call the method __init__ on the result .
0
example# 15873
define the method _setup with an argument self .
0
example# 15874
call the method self._setupfunc [ self . _setupfunc ] , substitute the result for self._wrapped [ self . _wrapped ] .
0
example# 15875
define the method __repr__ with an argument self .
0
example# 15876
if self._wrapped [ self . _wrapped ] is empty ,
0
example# 15877
substitute self._setupfunc [ self . _setupfunc ] for repr_attr .
0
example# 15878
if not ,
0
example# 15879
substitute self._wrapped [ self . _wrapped ] for repr_attr .
0
example# 15880
return a string _STR:0_ , format it with __name__ field of the self class and repr_attr .
1
'<%s: %r>' ||| _STR:0_
example# 15881
define the method __deepcopy__ with 2 arguments self and memo .
0
example# 15882
if self._wrapped [ self . _wrapped ] is empty ,
0
example# 15883
result is an instance of SimpleLazyObject class , created with an argument self._setupfunc [ self . _setupfunc ] .
0
example# 15884
get the id of the self object , use it as a key to obtain the value from the memo dictionary , substitute self with it .
0
example# 15885
return result .
0
example# 15886
call the method copy.deepcopy [ copy . deepcopy ] with 2 arguments : self._wrapped [ self . _wrapped ] and memo , return the result .
0
example# 15887
derive the class lazy_property from the property base class .
0
example# 15888
define the method __new__ with 5 arguments : cls , fget set to None , fset set to None , fdel set to None and doc set to None .
0
example# 15889
if fget is not None ,
0
example# 15890
decorator function wraps with an argument fget .
0
example# 15891
define the function fget with 3 arguments : instance , instance_type set to None and name set to fget.__name__ [ fget . __name__ ] .
0
example# 15892
get name attribute from the instance object , call it and return the result .
0
example# 15893
if fset is not None ,
0
example# 15894
decorator function wraps with an argument fset .
0
example# 15895
define the function fset with 3 arguments : instance , valse to None and name set to fset.__name__ [ fset . __name__ ] .
0
example# 15896
get name attribute from the instance object , call it with an argument value and return the result .
0
example# 15897
if fdel is not None ,
0
example# 15898
decorator function wraps with an argument fdel .
0
example# 15899
define the function fdel with 2 arguments : instance and name set to fdel.__name__ [ fdel . __name__ ] .
0
example# 15900
get name attribute from the instance object , call it and return the result .
0
example# 15901
return an property object with getter function fget , setter function fset , destructor fdel and documentation string doc .
0
example# 15902
define the function partition with 2 arguments : predicate and values .
0
example# 15903
results is a tuple with 2 elements , 2 empty lists .
0
example# 15904
for every item in values ,
0
example# 15905
call the function predicate with an argument item , use it as a key to get results dictionary value , append item to it .
0
example# 15906
return results .
0
example# 15907
if sys.version_info [ sys . version_info ] is greater than or equal to a tuple with 3 elements : integers 2 , 7 and 2 , respectively ,
0
example# 15908
from functools import total_ordering .
0
example# 15909
if not ,
0
example# 15910
define the function total_ordering with an argument cls .
0
example# 15911
convert is a dictionary with 4 initial entries : list with 3 tuples : tuple with 2 elements : string _STR:0_ ,
1
'__gt__' ||| _STR:0_
example# 15912
and lambda function with 2 arguments : self and other , resulting boolean False if self is lesser than other or self is equal to other , tuple with 2 elements : string _STR:0_ , and lambda function with 2 arguments : self and other , resulting boolean True if self is lesser than other or self is equal to other , tuple with 2 elements : string _STR:1_ , and lambda function with 2 arguments : self and other , resulting boolean False if self is lesser than other , for _STR:2_ , list with 3 tuples : tuple with 2 elements : string _STR:1_ , and lambda function with 2 arguments : self and other , resulting boolean False if self is lesser than or equal to other , or self is equal to other , tuple with 2 elements : string _STR:2_ , and lambda function with 2 arguments : self and other , resulting boolean True if self is lesser than or equal to other , or self is not equal to other , tuple with 2 elements : string _STR:3_ , and lambda function with 2 arguments : self and other , resulting boolean False if self is lesser than or equal to other , for _STR:0_ , list with 3 tuples : tuple with 2 elements : string _STR:2_ , and lambda function with 2 arguments : self and other , resulting boolean False if self is greater than other or self is equal to other , tuple with 2 elements : string _STR:1_ , and lambda function with 2 arguments : self and other , resulting boolean True if self is greater than other or self is equal to other , tuple with 2 elements : string _STR:0_ , and lambda function with 2 arguments : self and other , resulting boolean False if self is greater than other , for _STR:3_ , and list with 3 tuples : tuple with 2 elements : string _STR:0_ , and lambda function with 2 arguments : self and other , resulting boolean True if self is not greater than or is not equal to other , or self is equal to other , tuple with 2 elements : string _STR:3_ , and lambda function with 2 arguments : self and other , resulting boolean True if self is greater than or not equal to other , or self is not equal to other , tuple with 2 elements : string _STR:2_ , and lambda function with 2 arguments : self and other , resulting boolean False if self is greater than or equal to other , for _STR:1_ , convert cls to a dictionary , convert the result into a set and convert convert into a set , roots is a set of differences of the two previous sets .
4
'__le__' ||| _STR:0_
'__lt__' ||| _STR:2_
'__ge__' ||| _STR:1_
'__gt__' ||| _STR:3_
example# 15913
if roots is false ,
0
example# 15914
raise an ValueError exception with an argument string _STR:0_ .
1
'must define at least one ordering operation: < > <= >=' ||| _STR:0_
example# 15915
get maximal element from roots and substitute it for root .
0
example# 15916
get the value under the root key of the convert dictionary , for every opname and opfunc in the result ,
0
example# 15917
if opname is not contained in roots ,
0
example# 15918
substitute opname for opfunc.__name__ [ opfunc . __name__ ] .
0
example# 15919
get opname attribute from int object , substitute its field __doc__ for opfunc.__doc__ [ opfunc . __doc__ ] .
0
example# 15920
set opname attribute of cls object to opfunc .
0
example# 15921
return cls .
0
example# 15922
from __future__ import unicode_literals into default name space .
0
example# 15923
import module re .
0
example# 15924
import module sys .
0
example# 15925
from django.utils.encoding [ django . utils . encoding ] import force_text and force_str into default name space .
0
example# 15926
from django.utils.functional [ django . utils . functional ] import allow_lazy into default name space .
0
example# 15927
from django.utils.safestring [ django . utils . safestring ] import SafeData and mark_safe into default name space .
0
example# 15928
from django.utils [ django . utils ] import six into default name space .
0
example# 15929
from django.utils.six.moves.urllib.parse [ django . utils . six . moves . urllib . parse ] import quote , unquote , urlsplit and urlunsplit into default name space .
0
example# 15930
from django.utils.text [ django . utils . text ] import normalize_newlines into default name space .
0
example# 15931
from .html_parser import HTMLParser and HTMLParseError into default name space .
0
example# 15932
TRAILING_PUNCTUATION is a list with 7 elements : _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ , _STR:5_ and _STR:6_ .
7
'"' ||| _STR:5_
':' ||| _STR:2_
'.)' ||| _STR:4_
';' ||| _STR:3_
',' ||| _STR:1_
'.' ||| _STR:0_
'\'' ||| _STR:6_
example# 15933
WRAPPING_PUNCTUATION is a list with 6 elements : tuple with 2 elements : _STR:0_ and _STR:1_ , tuple with 2 elements : _STR:2_ and _STR:3_ ,
4
')' ||| _STR:1_
'(' ||| _STR:0_
'>' ||| _STR:3_
'<' ||| _STR:2_
example# 15934
tuple with 2 elements : _STR:0_ and _STR:1_ , tuple with 2 elements : _STR:2_ and _STR:3_ , tuple with 2 elements : _STR:4_ and _STR:4_ , and tuple with 2 elements : _STR:5_ and _STR:5_ . DOTS is a list with 6 elements : strings _STR:6_ , _STR:7_ , _STR:8_ , _STR:9_ , _STR:10_ and _STR:11_ .
12
'"' ||| _STR:4_
'&lt' ||| _STR:2_
'&gt' ||| _STR:3_
'[' ||| _STR:0_
'&#8226;' ||| _STR:11_
'&middot;' ||| _STR:6_
'&bull;' ||| _STR:10_
'\'' ||| _STR:5_
'&#149;' ||| _STR:9_
'*' ||| _STR:7_
'\u2022' ||| _STR:8_
']' ||| _STR:1_
example# 15935
call the function re.compile [ re . compile ] with raw string _STR:0_ , substitute the result for unencoded_ampersands_re .
1
'&(?!(\w+|#\d+);)' ||| _STR:0_
example# 15936
call the function re.compile [ re . compile ] with raw string _STR:0_ , substitute the result for word_split_re .
1
'(\s+)' ||| _STR:0_
example# 15937
call the function re.compile [ re . compile ] with 2 arguments : raw string _STR:0_ and re.IGNORECASE [ re . IGNORECASE ] , substitute the result for simple_url_re .
1
'^https?://\[?\w' ||| _STR:0_
example# 15938
call the function re.compile [ re . compile ] with 2 arguments : raw string _STR:0_ ,
1
'^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)($|/.*)$' ||| _STR:0_
example# 15939
and re.IGNORECASE [ re . IGNORECASE ] , substitute the result for simple_url_re . call the function re.compile [ re . compile ] with raw string _STR:0_ , substitute the result for simple_email_re .
1
'&(?!(\w+|#\d+);)' ||| _STR:0_
example# 15940
call the function re.compile [ re . compile ] with raw string _STR:0_ , substitute the result for link_target_attribute_re .
1
'(<a [^>]*?)target=[^\s>]+' ||| _STR:0_
example# 15941
call the function re.compile [ re . compile ] with 2 arguments :
0
example# 15942
raw string _STR:0_ and re.IGNORECASE [ re . IGNORECASE ] , substitute the result for html_gunk_re . call the function re.compile [ re . compile ] with 2 arguments : raw string _STR:1_ ,
2
'((?:<p>(?:%s).*?[a-zA-Z].*?</p>\s*)+)' ||| _STR:1_
'(?:<br clear="all">|<i><\/i>|<b><\/b>|<em><\/em>|<strong><\/strong>|<\/?smallcaps>|<\/?uppercase>)' ||| _STR:0_
example# 15943
formated with string created by joining elements of result of the function re.escape [ re . escape ] with an argument x , with separator _STR:0_ , for every x in DOTS , and re.DOTALL [ re . DOTALL ] , substitute the result for hard_coded_bullets_re . call the function re.compile [ re . compile ] with raw string _STR:1_ , substitute the result for trailing_empty_content_re .
2
'(?:<p>(?:&nbsp;|\s|<br \/>)*?</p>\s*)+\Z' ||| _STR:1_
'|' ||| _STR:0_
example# 15944
define the function escape with an argument text .
0
example# 15945
call the function force_text with an argument text , replace every occurrence of _STR:0_ in the result with _STR:1_ ,
2
'&amp;' ||| _STR:1_
'&' ||| _STR:0_
example# 15946
every occurrence of _STR:0_ with _STR:1_ , every occurrence of _STR:2_ with _STR:3_ , every occurrence of _STR:4_ with _STR:5_ , and every occurrence of _STR:6_ with _STR:7_ , call the function mark_safe with the previous result as an argument , return the result . call the function allow_lazy with 2 arguments : escape , six.text_type [ six . text_type ] , substitute the result for escape .
8
'"' ||| _STR:4_
"'" ||| _STR:6_
'>' ||| _STR:2_
'&quot;' ||| _STR:5_
'&lt;' ||| _STR:1_
'&gt;' ||| _STR:3_
'&#39;' ||| _STR:7_
'<' ||| _STR:0_
example# 15947
_js_escapes is a dictionary with 11 initial entries : _STR:0_ for integer representation of string '\\ ' ,
1
'\\u005C' ||| _STR:0_
example# 15948
_STR:0_ for integer representation of string _STR:1_\\u0022_STR:2_ '' _STR:3_\\u003E_STR:2_ > _STR:4_\\u003C_STR:2_ < _STR:3_\\u0026_STR:2_ % _STR:4_\\u003D_STR:2_=_STR:3_\\u002D_STR:2_-_STR:4_\\u003B_STR:2_ ; _STR:3_\\u2028_STR:2_\u2028_STR:5_\\u2029_STR:2_\u2029_STR:6_\\u % 04X ' formated with z ,
7
' for integer representation of string ' ||| _STR:2_
',   ' ||| _STR:3_
', ' ||| _STR:4_
'\\u0027' ||| _STR:0_
' and ' ||| _STR:5_
'\', ' ||| _STR:1_
'.   for eery z in range of integers from 0 to 31, update _js_escapes dictionary with ' ||| _STR:6_
example# 15949
for integer representation of z converted into a string . define the function escapejs with an argument value .
0
example# 15950
call the function force_text with an argument value , call the method translate on the result , with an argument _js_escapes ,
0
example# 15951
use the result as an argument for the call to the mark_safe function , return the result . call the function allow_lazy with 2 arguments : escapejs , six.text_type [ six . text_type ] , substitute the result for escapejs .
0
example# 15952
define the function conditional_escape with an argument text .
0
example# 15953
if text has an _STR:0_ attribute ,
1
'__html__' ||| _STR:0_
example# 15954
call the method text.__html__ [ text . __html__ ] , return the result .
0
example# 15955
if not ,
0
example# 15956
call the function escape with an argument text , return the result .
0
example# 15957
define the function format_html with 3 arguments : format_string , unpacked list args and unpacked dictionary kwargs .
0
example# 15958
map elements from args through the function conditional_escape , substitute the result for args_safe .
0
example# 15959
kwargs_safe is a dictionary created for every k and v in result of the function six.iteritems [ six . iteritems ] called with an argument kwargs ,
0
example# 15960
with value result of the conditional_escape function called with an argument v for key k. call the method format_string.format [ format_string . format ] with 2 arguments : unpacked list args_safe and unpacked dictionary kwargs_safe ,
0
example# 15961
use the result as an argument for the call to the function mark_safe , return the result . define the function format_html_join with 3 arguments : sep , format_string and args_generator .
0
example# 15962
join results of format_html called with 2 arguments : format_string and tuple with an element args , into a string ,
0
example# 15963
separated with result of the function conditional_escape with an argument sep , for every args in args_generator , use the result as an argument for the call to the function mark_safe , return the result . define the function linebreaks with 2 arguments : value and autoescape set to boolean False .
0
example# 15964
call the function normalize_newlines with an argument value , substitute the result for value .
0
example# 15965
call the method re.split [ re . split ] with 2 arguments : string _STR:0_ and value , substitute the result for paras .
1
'\n{2,}' ||| _STR:0_
example# 15966
if autoescape is true ,
0
example# 15967
call the function escape with an argument p , replace every occurrence of _STR:0_ in the result for _STR:1_ ,
2
'<br />' ||| _STR:1_
'\n' ||| _STR:0_
example# 15968
format the string _STR:0_ with the result , for every p in paras , substitute list of results for paras . if not ,
1
'<p>%s</p>' ||| _STR:0_
example# 15969
replace every occurrence of _STR:0_ in p for _STR:1_ ,
2
'<br />' ||| _STR:1_
'\n' ||| _STR:0_
example# 15970
format the string _STR:0_ with the result , for every p in paras , substitute list of results for paras . join elements of paras into a string separated with _STR:1_ , return the result .
2
'\n\n' ||| _STR:1_
'<p>%s</p>' ||| _STR:0_
example# 15971
call the function allow_lazy with 2 arguments : linebreaks , six.text_type [ six . text_type ] , substitute the result for linebreaks .
0
example# 15972
derive the class MLStripper from the HTMLParser base class .
0
example# 15973
define the method __init__ with an argument self .
0
example# 15974
if fist and second element of sys.version_info [ sys . version_info ] equals to integer 3 and 2 , respectively ,
0
example# 15975
call the method HTMLParser.__init__ [ HTMLParser . __init__ ] with 2 arguments : self and strict set to boolean False .
0
example# 15976
if not ,
0
example# 15977
call the method HTMLParser.__init__ [ HTMLParser . __init__ ] with an argument self .
0
example# 15978
call the method self.reset [ self . reset ] .
0
example# 15979
self.fed [ self . fed ] is an empty list .
0
example# 15980
define the method handle_data with 2 arguments self and d .
0
example# 15981
append d to self.fed [ self . fed ] .
0
example# 15982
define the method handle_entityref with 2 arguments self and name .
0
example# 15983
format string _STR:0_ with name , append it to self.fed [ self . fed ] .
1
'&%s;' ||| _STR:0_
example# 15984
define the method handle_charref with 2 arguments self and name .
0
example# 15985
format string _STR:0_ with name , append it to self.fed [ self . fed ] .
1
'&#%s;' ||| _STR:0_
example# 15986
define the method get_data with an argument self .
0
example# 15987
join elements of self.fed [ self . fed ] into a string , return the result .
0
example# 15988
define the function _strip_once with an argument value .
0
example# 15989
s is an instance of MLStripper class .
0
example# 15990
try ,
0
example# 15991
call the method s.feed [ s . feed ] with an argument value .
0
example# 15992
if HTMLParseError exception is caught ,
0
example# 15993
return value .
0
example# 15994
try ,
0
example# 15995
close file descriptor s .
0
example# 15996
if HTMLParseError or UnboundLocalError exceptions are caught ,
0
example# 15997
sum the result of the method s.get_data [ s . get_data ] and s.rawdata [ s . rawdata ] , return the result .
0
example# 15998
if not ,
0
example# 15999
call the method s.get_data [ s . get_data ] , return the result .
0
example# 16000
define the function strip_tags with an argument value .
0
example# 16001
while _STR:0_ is contained in value and _STR:1_ is contained in value ,
2
'>' ||| _STR:1_
'<' ||| _STR:0_
example# 16002
call the function _strip_once with an argument value , substitute the result for new_value .
0
example# 16003
if new_value equals value ,
0
example# 16004
break from the loop execution .
0
example# 16005
substitute new_value for value .
0
example# 16006
return value .
0
example# 16007
call the function allow_lazy with an argument strip_tags , substitute the result for strip_tags .
0
example# 16008
define the function remove_tags with 2 arguments : html and tags .
0
example# 16009
tags is a list containing results of the function re.escape [ re . escape ] with an argument tag , for every tag in tags split into words .
0
example# 16010
join elements of tags into a string , separated with _STR:0_ , format string _STR:1_ with it , substitute the result for tags_re .
2
'(%s)' ||| _STR:1_
'|' ||| _STR:0_
example# 16011
call the function re.compile [ re . compile ] with 2 arguments : raw string _STR:0_ formated with tags_re and re.U [ re . U ] ,
1
'<%s(/?>|(\s+[^>]*>))' ||| _STR:0_
example# 16012
substitute the result for starttag_re . call the function re.compile [ re . compile ] with an argument string _STR:0_ formated with tags_re , substitute the result for endtag_re .
1
'</%s>' ||| _STR:0_
example# 16013
call the function starttag_re.sub [ starttag_re . sub ] with 2 arguments : an empty string and html , substitute the result for html .
0
example# 16014
call the function endtag_re.sub [ endtag_re . sub ] with 2 arguments : an empty string and html , substitute the result for html .
0
example# 16015
return html .
0
example# 16016
call the function allow_lazy with 2 arguments : remove_tags , six.text_type [ six . text_type ] , substitute the result for remove_tags .
0
example# 16017
define the function strip_spaces_between_tags with an argument value .
0
example# 16018
call the method re.sub [ re . sub ] with 3 arguments : raw string _STR:0_ , string _STR:1_ and result of the function force_text ,
2
'>\s+<' ||| _STR:0_
'><' ||| _STR:1_
example# 16019
called with an argument value , return the result . call the function allow_lazy with 2 arguments : strip_spaces_between_tags , six.text_type [ six . text_type ] , substitute the result for strip_spaces_between_tags .
0
example# 16020
define the function strip_entities with an argument value .
0
example# 16021
call the method re.sub [ re . sub ] with 3 arguments : raw string _STR:0_ , empty string and result of the function force_text ,
1
'&(?:\w+|#\d+);' ||| _STR:0_
example# 16022
called with an argument value , return the result . call the function allow_lazy with 2 arguments : strip_entities , six.text_type [ six . text_type ] , substitute the result for strip_entities .
0
example# 16023
define the function smart_urlquote with an argument url .
0
example# 16024
try ,
0
example# 16025
call the function urlsplit with an argument url , assign the result to scheme , netloc , path , query and fragment , respectively .
0
example# 16026
try ,
0
example# 16027
call the method netloc.encode [ netloc . encode ] with an argument string _STR:0_ , call the method decode on the result with an argument _STR:1_ ,
2
'idna' ||| _STR:0_
'ascii' ||| _STR:1_
example# 16028
substitute the result for netloc . if UnicodeError exception is caught ,
0
example# 16029
do nothing .
0
example# 16030
if not ,
0
example# 16031
call the function urlunsplit with an argument tuple with 4 elements : scheme , netloc , path , query and fragment , substitute the result for url .
0
example# 16032
if ValueError exception is caught ,
0
example# 16033
do nothing .
0
example# 16034
call the function force_str with an argument url , use the result as an argument for the call to the function unquote , substitute the result for url .
0
example# 16035
call the function quote with 2 arguments : url and safe as bytes string _STR:0_ , substitute the result for url .
1
'!*\'();:@&=+$,/?#[]~' ||| _STR:0_
example# 16036
call the function force_text with an argument url , return the result .
0
example# 16037
define the function urlize with 4 arguments : text , trim_url_limit set to None , nofollow set to boolean False ,
0
example# 16038
define the function trim_url with 2 arguments : x and limit set to trim_url_limit .
0
example# 16039
if limit is None or length of x is lesser than or equal to limit ,
0
example# 16040
return x .
0
example# 16041
return a string _STR:0_ formated with elements of x up to the index equal to the maximum value between integer 0 and 3 subtracted from limit .
1
'%s...' ||| _STR:0_
example# 16042
if text is an instance of SafeData , safe_input is boolean True , otherwise is boolean False .
0
example# 16043
call the function force_text with an argument text , split by it word_split_re , substitute it for words .
0
example# 16044
for every i and word in enumerated iterable words ,
0
example# 16045
if _STR:0_ is contained in words or _STR:1_ is contained in word or _STR:2_ is contained in word ,
3
':' ||| _STR:2_
'@' ||| _STR:1_
'.' ||| _STR:0_
example# 16046
substitute empty string , word an empty string for lead , middle and trail , respectively .
0
example# 16047
for every punctuation in TRAILING_PUNCTUATION ,
0
example# 16048
if middle ends with punctuation ,
0
example# 16049
substitute elements of middle from the beginning to the negative length of punctuation , for middle .
0
example# 16050
sum punctuation and trail , substitute the result for trail .
0
example# 16051
for every opening and closing in WRAPPING_PUNCTUATION ,
0
example# 16052
if middle starts with opening ,
0
example# 16053
substitute elements of middle from length of opening index to the end , for middle .
0
example# 16054
sum lead and opening , substitute the result for lead .
0
example# 16055
if middle ends with closing and count of occurrence of closing in middle equals count of occurrence of opening in middle incremented by one ,
0
example# 16056
substitute elements of middle from the beginning to the negative length of closing , for middle .
0
example# 16057
sum trail and closing , substitute the result for lead .
0
example# 16058
url is None .
0
example# 16059
if nofollow is true nofollow_attr is a string _STR:0_ , otherwise nofollow_attr is an empty string .
1
' rel="nofollow"' ||| _STR:0_
example# 16060
call the method simple_url_re.match [ simple_url_re . match ] with an argument middle , if it evaluates to true ,
0
example# 16061
call the function smart_urlquote with an argument middle , substitute the result for url .
0
example# 16062
otherwise if call the method simple_url_2_re.match [ simple_url_2_re . match ] with an argument middle evaluates to true ,
0
example# 16063
call the function smart_urlquote with an argument string _STR:0_ formated with an argument middle , substitute the result for url .
1
'http://%s' ||| _STR:0_
example# 16064
otherwise if _STR:0_ is not contained in middle and result of the function simple_email_re.match [ simple_email_re . match ] called with an argument middle ,
1
':' ||| _STR:0_
example# 16065
evaluates to true , split middle into two parts from the right by _STR:0_ character , assign the resulting parts to local and domain .
1
'@' ||| _STR:0_
example# 16066
try ,
0
example# 16067
call the method domain.encode [ domain . encode ] with an argument string _STR:0_ , call the method decode on the result with an argument string _STR:1_ ,
2
'idna' ||| _STR:0_
'ascii' ||| _STR:1_
example# 16068
substitute the result for domain . if UnicodeError exception is caught ,
0
example# 16069
skip this loop iteration .
0
example# 16070
url is a string _STR:0_ formated with local and domain .
1
'mailto:%s@%s' ||| _STR:0_
example# 16071
nofollow_attr is an empty string .
0
example# 16072
if url is true ,
0
example# 16073
call the function trim_url with an argument middle , substitute the result for trimmed .
0
example# 16074
if autoescape is true and safe_input is false ,
0
example# 16075
call the function escape with an argument lead , substitute the result for lead , call the function escape with an argument trail ,
0
example# 16076
substitute the result for trail . call the function escape with an argument url , substitute the result for url , call the function escape with an argument trimmed ,
0
example# 16077
substitute the result for trimmed . middle is a string _STR:0_ formated with url , nofollow_attr and trimmed .
1
'<a href="%s"%s>%s</a>' ||| _STR:0_
example# 16078
format string _STR:0_ with lead , middle and trail , use it as an argument for the call to the function mark_safe ,
1
'<a href="%s"%s>%s</a>' ||| _STR:0_
example# 16079
substitute the result for i-th element of words . if not ,
0
example# 16080
if safe_input is true ,
0
example# 16081
call the function mark_safe with an argument word , substitute the result for i-th element of words .
0
example# 16082
otherwise if autoescape is true ,
0
example# 16083
call the function escape with an argument word , substitute the result for i-th element of words .
0
example# 16084
otherwise if safe_input is true ,
0
example# 16085
call the function mark_safe with an argument word , substitute the result for i-th element of words .
0
example# 16086
otherwise if autoescape is true ,
0
example# 16087
call the function escape with an argument word , substitute the result for i-th element of words .
0
example# 16088
join elements of words into a string , return it .
0
example# 16089
call the function allow_lazy with 2 arguments : urlize , six.text_type [ six . text_type ] , substitute the result for urlize .
0
example# 16090
define the function avoid_wrapping with an argument value .
0
example# 16091
replace every occurrence of _STR:0_ in value for _STR:1_ , return the result .
2
'\xa0' ||| _STR:1_
' ' ||| _STR:0_
example# 16092
from django.utils.six.moves [ django . utils . six . moves ] import html_parser as _html_parse into default name space .
0
example# 16093
import module re .
0
example# 16094
import module sys .
0
example# 16095
substitute version_info from module sys for surrent_version .
0
example# 16096
set use_workaround to boolean True if current_version tuple elements are smaller than the tuple ( 2,7,3 ) , respectively ,
0
example# 16097
or if current_version is greater than ( 3,0 ) , but smaller than ( 3,2,3 ) , otherwise set use_workaround to boolean False . substitute HTMLParseError from the module _html_parser for HTMLParseError .
0
example# 16098
if use_workaround is boolean False ,
0
example# 16099
if tuple current_version elements are greater or equal to ( 3 , 4 ) , respectively ,
0
example# 16100
derive the class HTMLParser from the base class HTMLParser located in the module _html_parser .
0
example# 16101
define the initialization method __init__ , with self instance of this class , convert_charrefs set to boolean False ,
0
example# 16102
and dictionary of arbitrary length **kwargs as arguments . call the initialization method for the base class , _html_parser.HTMLParser.__init__ [ _html_parser . HTMLParser . __init__ ] with self ,
0
example# 16103
convert_charrefs set to convert_charrefs and dictionary **kwargs as the arguments . if not ,
0
example# 16104
substitute HTMLParser from the module _html_parser for HTMLParser .
0
example# 16105
if not ,
0
example# 16106
compile a regular expression pattern string _STR:0_ into a regular expression object and assign it to tagfind .
1
'([a-zA-Z][-.a-zA-Z0-9:_]*)(?:\s|/(?!>))*' ||| _STR:0_
example# 16107
derive the class HTMLParser from the base class HTMLParser located in the module _html_parser .
0
example# 16108
define initialization method __init__ with self instance of the class as an argument .
0
example# 16109
call the initialization method _html_parser.HTMLParser.__init__ [ _html_parser . HTMLParser . __init__ ] ( self ) for the base class .
0
example# 16110
set field cdata_tag for this class instance to None .
0
example# 16111
define method set_cdata_mode , with self class instance and tag as the arguments .
0
example# 16112
try ,
0
example# 16113
set field interesting for this class instance to interesting_cdata from module _html_parser .
0
example# 16114
if AttributeError exception is caught ,
0
example# 16115
replace ' % s ' in the string _STR:0_ with the result of the function call tag.lower [ tag . lower ] ( ) ,
1
'</\s*%s\s*>' ||| _STR:0_
example# 16116
use it and the re.I [ re . I ] as the input arguments for function re.compile [ re . compile ] , put the result in the self.interesting [ self . interesting ] . evaluate function tag.lower [ tag . lower ] , without the arguments , put the result in the self.cdata_tag [ self . cdata_tag ] .
0
example# 16117
define method clear_cdata_mode , with self class instance as an argument .
0
example# 16118
substitute _html_parser.interesting_normal [ _html_parser . interesting_normal ] for self.interesting [ self . interesting ] .
0
example# 16119
set self.cdata_tag [ self . cdata_tag ] to None .
0
example# 16120
define method parse_starttag with self class instance and i as the arguments .
0
example# 16121
set self.__starttag_text [ self . __starttag_text ] to None .
0
example# 16122
call the method self.check_for_whole_start_tag [ self . check_for_whole_start_tag ] with i as an argument , substitute result for the endpos .
0
example# 16123
if endpos is lesser than zero ,
0
example# 16124
return endpos .
0
example# 16125
substitute self.rawdata [ self . rawdata ] for rawdata .
0
example# 16126
slice the list from the i-th to the endpos-th element , substitute it for self.__starttag_text [ self . __starttag_text ] .
0
example# 16127
attrs is a empty list .
0
example# 16128
match the rawdata from the position i+1 , with tagfind pattern , assign the result to the match .
0
example# 16129
if match evaluates to False throw an exception with the string message _STR:0_ .
1
'unexpected call to parse_starttag()' ||| _STR:0_
example# 16130
find the ending position of the regular expression match of the object match , substitute the result for k .
0
example# 16131
find the first subgroup of the matched string from the match object , convert it to lowercase , substitute it for tag and self.lasttag [ self . lasttag ] .
0
example# 16132
as long k is smaller than endpos ,
0
example# 16133
match the rawdata from the position k , with attrfind pattern , assign the result to the m .
0
example# 16134
if m is not False , None is considered False ,
0
example# 16135
breaks from the smallest enclosing loop .
0
example# 16136
find the first , second and third subgroup of the m regular expression match , assign the result to the attrname , rest and attrvalue , respectively .
0
example# 16137
if rest is not False , None is considered False ,
0
example# 16138
set attrvalue to None .
0
example# 16139
otherwise , if first and the last character of attrvalue are _STR:0_ '' ' character ,
1
'\' charter  or first and last character of attrvalue are ' ||| _STR:0_
example# 16140
remove first and last character from the attrvalue , substitute it for attrvalue .
0
example# 16141
if attrvalue is not an empty string ,
0
example# 16142
call the method unescape with attrvalue as the argument on the self class instance , substitute the result for attrvalue .
0
example# 16143
form the tuple from the attrname converted to lowercase and attrvalue , append it to the end of attrs .
0
example# 16144
find the ending position of the regular expression match of the object match , substitute the result for k .
0
example# 16145
slice the rawdata string from the k-th to the endpos-th index , remove the whitespaces from the start and the end of the string , substitute it for end .
0
example# 16146
if end is not a _STR:0_ or _STR:1_ character ,
2
'/>' ||| _STR:1_
'>' ||| _STR:0_
example# 16147
evaluate the self.getpos [ self . getpos ] ( ) and assign the result to the lineno and offset respectfully .
0
example# 16148
if self.__stattag_text [ self . __stattag_text ] contains newline character ,
0
example# 16149
increment the lineno by the count of the newlines in self.__starttag_text [ self . __starttag_text ] .
0
example# 16150
find the last index of newline occurrence in self.__starttag_text [ self . __starttag_text ] , subtract it from total length of self.__starttag_text [ self . __starttag_text ] ,
0
example# 16151
substitute the result for offset . if not ,
0
example# 16152
increment the offset by the length of self.__starttag_text [ self . __starttag_text ] .
0
example# 16153
slice the rawdata from k to endpos , then take the first 20 elements of the previous slice ,
0
example# 16154
with it replace % r in the string _STR:0_ , call the method self.error [ self . error ] with the resulting string as an argument . if string end ends with string _STR:1_ ,
2
"junk characters in start tag: %r" ||| _STR:0_
'/>' ||| _STR:1_
example# 16155
call the method self.handle_startendtag [ self . handle_startendtag ] with tag and attrs as the arguments .
0
example# 16156
if not ,
0
example# 16157
call the method self.handle_starttag [ self . handle_starttag ] , with tag and attrs as the arguments .
0
example# 16158
if tag is contained in self.CDATA_CONTENT_ELEMENTS [ self . CDATA_CONTENT_ELEMENTS ] ,
0
example# 16159
call the method self.set_cdata_mode [ self . set_cdata_mode ] with tag as the argument .
0
example# 16160
return endpos .
0
example# 16161
define the method parse_endtag with self class instance and i as the arguments .
0
example# 16162
substitute self.rawdata [ self . rawdata ] for rawdata .
0
example# 16163
take two characters from the i-th element of rawdata , if they are not equal to the string _STR:0_ ,
1
'</' ||| _STR:0_
example# 16164
throw an exception with string _STR:0_ as the message . search anywhere in the rawdata string starting from the ( i+1 ) -th element for the _html_parser.endendeag [ _html_parser . endendeag ] , replace the result for match .
1
"unexpected call to parse_endtag" ||| _STR:0_
example# 16165
if there is no match ,
0
example# 16166
return integer -1 .
0
example# 16167
find the ending position of the regular expression match of the object match , substitute the result for j .
0
example# 16168
match the rawdata from the position i , with _html_parser.endtagfind [ _html_parser . endtagfind ] pattern , assign the result to the match .
0
example# 16169
if there is no match ,
0
example# 16170
if self.cdata_tag [ self . cdata_tag ] is not None ,
0
example# 16171
slice the rawdata to obtain substring from i-th to j-th element , use it as the argument for the method call to the self.handle_data [ self . handle_data ] .
0
example# 16172
return j .
0
example# 16173
slice the rawdata from i-th to the j-th element , replace with it _STR:0_ in the string _STR:1_ , use it to call the method self.error [ self . error ] .
2
'%r' ||| _STR:0_
"bad end tag: %r" ||| _STR:1_
example# 16174
find the first subgroup of the matched string from the match object , strip the whitespaces from the begging and end , replace it for tag .
0
example# 16175
if self.cdata_tag [ self . cdata_tag ] is not None ,
0
example# 16176
convert tag to lowercase if it is not equal to self.cdata_tag [ self . cdata_tag ] ,
0
example# 16177
slice the rawdata to obtain substring from i-th to j-th element , use it as the argument for the method call to the self.handle_data [ self . handle_data ] .
0
example# 16178
return j .
0
example# 16179
convert tag to lowercase , use it as the argument for the call to the method self.handle_endtag [ self . handle_endtag ] .
0
example# 16180
call the method self.clear_cdata_mode [ self . clear_cdata_mode ] .
0
example# 16181
return j .
0
example# 16182
from __future__ import unicode_literals into default name space .
0
example# 16183
import module base64 .
0
example# 16184
import module calendar .
0
example# 16185
import module datetime .
0
example# 16186
import module re .
0
example# 16187
import module sys .
0
example# 16188
from binascii import Error as BinasciiError into default name space .
0
example# 16189
from email.utils [ email . utils ] import formatdate into default name space .
0
example# 16190
from django.utils.datastructures [ django . utils . datastructures ] import MultiValueDict into default name space .
0
example# 16191
from django.utils.encoding [ django . utils . encoding ] import force_str and force_text into default name space .
0
example# 16192
from django.utils.functional [ django . utils . functional ] import allow_lazy into default name space .
0
example# 16193
from django.utils [ django . utils ] import six into default name space .
0
example# 16194
from django.utils.six.moves.urllib.parse [ django . utils . six . moves . urllib . parse ] import quote , quote_plus , unquote , unquote_plus , urlparse , urlencode as original_urlencode .
0
example# 16195
call the function re.compile [ re . compile ] with an argument raw string _STR:0_ , substitute the result for ETAG_MATCH .
1
'(?:W/)?"((?:\\.|[^"])*)"' ||| _STR:0_
example# 16196
MONTHS is a list with 12 elements : strings _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ , _STR:5_ , _STR:6_ , _STR:7_ , _STR:8_ , _STR:9_ , _STR:10_ , and _STR:11_ .
12
'feb' ||| _STR:1_
'apr' ||| _STR:3_
'may' ||| _STR:4_
'nov' ||| _STR:10_
'dec' ||| _STR:11_
'jan' ||| _STR:0_
'jun' ||| _STR:5_
'aug' ||| _STR:7_
'mar' ||| _STR:2_
'oct' ||| _STR:9_
'sep' ||| _STR:8_
'jul' ||| _STR:6_
example# 16197
__D is a raw string _STR:0_ .
1
'(?P<day>\d{2})' ||| _STR:0_
example# 16198
__D2 is a raw string _STR:0_ .
1
'(?P<day>[ \d]\d)' ||| _STR:0_
example# 16199
__M is a raw string _STR:0_ .
1
'(?P<mon>\w{3})' ||| _STR:0_
example# 16200
__Y is a raw string _STR:0_ .
1
'(?P<year>\d{4})' ||| _STR:0_
example# 16201
__Y2 is a raw string _STR:0_ .
1
'(?P<year>\d{2})' ||| _STR:0_
example# 16202
__T is a raw string _STR:0_ .
1
'(?P<hour>\d{2}):(?P<min>\d{2}):(?P<sec>\d{2})' ||| _STR:0_
example# 16203
call the function re.compile [ re . compile ] with an argument raw string _STR:0_ formated with __D , __M , __Y and __T ,
1
'^\w{3}, %s %s %s %s GMT$' ||| _STR:0_
example# 16204
substitute the result for RFC1123_DATE . call the function re.compile [ re . compile ] with an argument raw string _STR:0_ formated with __D , __M , __Y2 and __T ,
1
'^\w{6,9}, %s-%s-%s %s GMT$' ||| _STR:0_
example# 16205
substitute the result for RFC850_DATE . call the function re.compile [ re . compile ] with an argument raw string _STR:0_ formated with __M , __D2 , __T and __Y ,
1
'^\w{3} %s %s %s %s$' ||| _STR:0_
example# 16206
substitute the result for ASCTIME_DATE . define the function urlquote with 2 arguments : url and safe set to _STR:0_ .
1
'/' ||| _STR:0_
example# 16207
call the function quote with 2 arguments : result of the function force_str called with an argument url ,
0
example# 16208
and result of the function force_str called with an argument safe , use the result as an argument for the call to the function force_text , return the result . call the function allow_lazy with 2 arguments : urlquote and six.text_type [ six . text_type ] , substitute the result for urlquote .
0
example# 16209
define the function urlquote_plus with 2 arguments : url and safe set to an empty string .
0
example# 16210
call the function quote_plus with 2 arguments : result of the function force_str called with an argument url ,
0
example# 16211
and result of the function force_str called with an argument safe , use the result as an argument for the call to the function force_text , return the result . call the function allow_lazy with 2 arguments : urlquote_plus and six.text_type [ six . text_type ] , substitute the result for urlquote_plus .
0
example# 16212
define the function urlunquote with an argument quoted_url .
0
example# 16213
call the function force_str with an argument quoted_url , use the result as an argument for the call to the function unquote ,
0
example# 16214
use the result as an argument for the call to the function force_text , return the result . call the function allow_lazy with 2 arguments : urlunquote and six.text_type [ six . text_type ] , substitute the result for urlunquote .
0
example# 16215
define the function urlunquote with an argument quoted_url .
0
example# 16216
call the function force_str with an argument quoted_url , use the result as an argument for the call to the function unquote_plus ,
0
example# 16217
use the result as an argument for the call to the function force_text , return the result . call the function allow_lazy with 2 arguments : urlunquote_plus and six.text_type [ six . text_type ] , substitute the result for urlunquote_plus .
0
example# 16218
define the function urlencode with 2 arguments query and doseq set to integer 0 .
0
example# 16219
if query is an instance of MultiValueDict class ,
0
example# 16220
call the method query.lists [ query . lists ] , substitute the result for query .
0
example# 16221
otherwise if query has an attribute _STR:0_ ,
1
'items' ||| _STR:0_
example# 16222
call the method query.items [ query . items ] , substitute the result for query .
0
example# 16223
call the function original_urlencode with 2 arguments : list with 2 elements : result of the function force_str with an argument k ,
0
example# 16224
and list with results of the function force_str with an argument i , for every i in v , only if v is a list or a tuple , otherwise second element is result of the function force_str with an argument v , for every k and v in query , and doseq , return the result . define the function cookie_date with an argument epoch_seconds set to None .
0
example# 16225
call the function formatdate with an argument epoch_seconds , substitute the result for rfcdate .
0
example# 16226
return a string _STR:0_ , formated with : first 7 elements of rfcdate , elements of rfcdate from 8-th to the 11-th index ,
1
'%s-%s-%s GMT' ||| _STR:0_
example# 16227
and elements of rfcdate from 12-th to the 25-th index . define the function http_date with an argument epoch_seconds set to None .
0
example# 16228
call the function formatdate with 2 arguments : epoch_seconds and usegmt set to boolean True , return the result .
0
example# 16229
define the function parse_http_date with an argument date .
0
example# 16230
for every regex in tuple with 3 elements : RFC1123_DATE , RFC850_DATE and ASCTIME_DATE ,
0
example# 16231
call the method regex.match [ regex . match ] with an argument date , substitute the result for m .
0
example# 16232
if m is not None ,
0
example# 16233
break from the loop execution .
0
example# 16234
if not ,
0
example# 16235
raise an ValueError exception with an argument string _STR:0_ formated with date .
1
"%r is not in a valid HTTP date format" ||| _STR:0_
example# 16236
try ,
0
example# 16237
call the method m.group [ m . group ] with an argument string _STR:0_ , convert the result into a string , substitute it for year .
1
'year' ||| _STR:0_
example# 16238
if year is lesser than integer 100 ,
0
example# 16239
if year is lesser than integer 70 ,
0
example# 16240
increment year by integer 2000 .
0
example# 16241
if not ,
0
example# 16242
increment year by integer 1900 .
0
example# 16243
call the method m.group [ m . group ] with an argument string _STR:0_ , convert the result to lowercase , use it as an argument for the call to the ,
1
'mon' ||| _STR:0_
example# 16244
method MONTHS.index [ MONTHS . index ] , increment the result by integer 1 , substitute it for month . call the method m.group [ m . group ] with an argument string _STR:0_ , convert the result into a string , substitute it for day .
1
'fay' ||| _STR:0_
example# 16245
call the method m.group [ m . group ] with an argument string _STR:0_ , convert the result into a string , substitute it for hour .
1
'hour' ||| _STR:0_
example# 16246
call the method m.group [ m . group ] with an argument string _STR:0_ , convert the result into a string , substitute it for min .
1
'min' ||| _STR:0_
example# 16247
call the method m.group [ m . group ] with an argument string _STR:0_ , convert the result into a string , substitute it for sec .
1
'sec' ||| _STR:0_
example# 16248
call the method MONTHS.index [ MONTHS . index ] with 6 arguments : year , month , day , hour , min and sec , substitute the result for result .
0
example# 16249
call the method result.utctimetuple [ result . utctimetuple ] , use the result as an argument for the call to the method calendar.timegm [ calendar . timegm ] , return the result .
0
example# 16250
if Exception exception is caught .
0
example# 16251
call the function six.reraise [ six . reraise ] with 3 arguments : ValueError , instance of a class ValueError , created with an argument string ,
0
example# 16252
_STR:0_ formated with date and third element of the result of the function sys.exc_info [ sys . exc_info ] . define the function parse_http_date_safe an argument date .
1
"%r is not a valid date" ||| _STR:0_
example# 16253
try ,
0
example# 16254
call the function parse_http_date with an argument date , return the result .
0
example# 16255
if Exception exception is caught .
0
example# 16256
do nothing .
0
example# 16257
define the functionbase36_to_int with an argument s .
0
example# 16258
if length of s is greater than integer 13 ,
0
example# 16259
raise an ValueError exception with an argument string _STR:0_ .
1
"Base36 input too large" ||| _STR:0_
example# 16260
convert s to integer of base 36 , substitute it for value .
0
example# 16261
if six.PY2 [ six . PY2 ] is true and value is greater than sys.maxint [ sys . maxint ] ,
0
example# 16262
raise an ValueError exception with an argument string _STR:0_ .
1
"Base36 input too large" ||| _STR:0_
example# 16263
return value .
0
example# 16264
define the function int_to_base36 with an argument i .
0
example# 16265
digits is a string _STR:0_ .
1
"0123456789abcdefghijklmnopqrstuvwxyz" ||| _STR:0_
example# 16266
factor is integer 0 .
0
example# 16267
if i is smaller than integer 0 ,
0
example# 16268
raise an ValueError exception with an argument string _STR:0_ .
1
"Negative base36 conversion input." ||| _STR:0_
example# 16269
if six.PY2 [ six . PY2 ] is true ,
0
example# 16270
if i is not an instance of six.integer_types [ six . integer_types ] class ,
0
example# 16271
raise an TypeError exception with an argument string _STR:0_ .
1
"Non-integer base36 conversion input." ||| _STR:0_
example# 16272
if i is greater than sys.maxint [ sys . maxint ] ,
0
example# 16273
raise an ValueError exception with an argument string _STR:0_ .
1
"Base36 conversion input too large." ||| _STR:0_
example# 16274
endless loop ,
0
example# 16275
increment factor by one .
0
example# 16276
bring integer 36 to the power of factor , if i is smaller than the result ,
0
example# 16277
decrement factor by one .
0
example# 16278
break from the loop execution .
0
example# 16279
base36 is an empty list .
0
example# 16280
while factor is greater or equal to integer 0 ,
0
example# 16281
bring integer 36 to the power of factor , substitute the result for j .
0
example# 16282
floor the division of i by j , use it an an index to get the element of the digits list , append the result for base36 .
0
example# 16283
i is the reminder of the division of i by j .
0
example# 16284
decrement factor by one .
0
example# 16285
join elements of base36 into a string , return it .
0
example# 16286
define the function urlsafe_base64_encode with an argument s .
0
example# 16287
call the method base64.urlsafe_b64encode [ base64 . urlsafe_b64encode ] with an argument s , strip the result of the bytes string _STR:0_ from the right , return it .
1
'\n=' ||| _STR:0_
example# 16288
define the function urlsafe_base64_decode with an argument s .
0
example# 16289
call the method s.encode [ s . encode ] with an argument string _STR:0_ , substitute the result for s .
1
'utf-8' ||| _STR:0_
example# 16290
try ,
0
example# 16291
left justify string s in a field of width equal to the sum of length of s and reminder of the division of length of s by integer 4 ,
0
example# 16292
pad the rest of the field with bytes string _STR:0_ , use the result as an argument for the call to the method base64.urlsafe_b64decode [ base64 . urlsafe_b64decode ] , return the result . if LookupError or BinasciiError , renamed to e , exceptions are caught .
1
'=' ||| _STR:0_
example# 16293
raise an ValueError exception with an argument e .
0
example# 16294
define the function parse_etags with an argument etag_str .
0
example# 16295
call the method ETAG_MATCH.findall [ ETAG_MATCH . findall ] with an argument etag_str , substitute the result for etags .
0
example# 16296
if etags is false ,
0
example# 16297
return a list with an element etag_str .
0
example# 16298
for every e in etags call the method e.encode [ e . encode ] with an argument string _STR:0_ , call the method decode on the result with an argument ,
1
'ascii' ||| _STR:0_
example# 16299
string _STR:0_ , substitute the list of results for etags . return etags .
1
'unicode_escape' ||| _STR:0_
example# 16300
define the function quote_etag with an argument etag .
0
example# 16301
return a string _STR:0_ formated with etag , in which every occurrence of _STR:1_\\\\_STR:2_ '' ' ,
3
'"%s"' ||| _STR:0_
'\\' is replaced with ' ||| _STR:1_
' and every occurrence of ' ||| _STR:2_
example# 16302
is replaced with _STR:0_ . define the function same_origin with 2 arguments url1 and url2 .
1
'\\"' ||| _STR:0_
example# 16303
substitute result of the function urlparse with an argument ur1 for p1 and result of the function urlparse with an argument ur2 for p2 .
0
example# 16304
try ,
0
example# 16305
if p2.scheme [ p2 . scheme ] , p2.hostname [ p2 . hostname ] and p2.port [ p2 . port ] equals p1.scheme [ p1 . scheme ] , p1.hostname [ p1 . hostname ] and p1.port [ p1 . port ] , respectively , return boolean True , otherwise return boolean False .
0
example# 16306
if ValueError exception is caught .
0
example# 16307
return boolean False .
0
example# 16308
define the function is_safe_url with 2 arguments url and host set to None .
0
example# 16309
if url is false ,
0
example# 16310
return boolean False .
0
example# 16311
replace every occurrence of _STR:0_/ ' .
1
'\\' in url with ' ||| _STR:0_
example# 16312
if url starts with _STR:0_ ,
1
'///' ||| _STR:0_
example# 16313
return boolean False .
0
example# 16314
call the function urlparse with an argument url , substitute the result for url_info .
0
example# 16315
if url_info.netloc [ url_info . netloc ] is false and url_info.scheme [ url_info . scheme ] is true ,
0
example# 16316
return boolean False .
0
example# 16317
if url_info.netloc [ url_info . netloc ] is false or url_info.netloc [ url_info . netloc ] equals host , and if url_info.scheme [ url_info . scheme ] is false or url_info.scheme [ url_info . scheme ] equals ,
0
example# 16318
import module warnings .
0
example# 16319
import module sys .
0
example# 16320
from django.utils [ django . utils ] import six into default name space .
0
example# 16321
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
0
example# 16322
call the function warnings.warn [ warnings . warn ] with 3 arguments : string _STR:0_ ,
1
"django.utils.importlib will be removed in Django 1.9." ||| _STR:0_
example# 16323
RemovedInDjango19Warning and stacklevel set to integer 2. define the function _resolve_name with 3 arguments : name , package and level .
0
example# 16324
if package doesnt have an _STR:0_ attribute ,
1
'rindex' ||| _STR:0_
example# 16325
raise an ValueError with an argument string _STR:0_ .
1
"'package' not set to a string" ||| _STR:0_
example# 16326
substitute length of package for dot .
0
example# 16327
for every x is the range of integers from level to the integer 2 , in the reversed order ,
0
example# 16328
try ,
0
example# 16329
call the method package.rindex [ package . rindex ] with 3 arguments : string _STR:0_ , integer 0 and dot , substitute the result for dot .
1
'.' ||| _STR:0_
example# 16330
if ValueError exception is caught ,
0
example# 16331
raise an ValueError with an argument string _STR:0_ .
1
"attempted relative import beyond top-level package" ||| _STR:0_
example# 16332
return a string _STR:0_ formated with first dot package elements and name .
1
"%s.%s" ||| _STR:0_
example# 16333
if six.PY3 [ six . PY3 ] is true ,
0
example# 16334
from importlib import import_module .
0
example# 16335
if not ,
0
example# 16336
define the function import_module with 3 arguments : name and package set to None .
0
example# 16337
if name starts with an string _STR:0_ ,
1
'.' ||| _STR:0_
example# 16338
if package is false ,
0
example# 16339
raise an TypeError with an argument string _STR:0_ .
1
"relative imports require the 'package' argument" ||| _STR:0_
example# 16340
level is an integer 0 .
0
example# 16341
for every character in name ,
0
example# 16342
if character is not equal to a string _STR:0_ ,
1
'.' ||| _STR:0_
example# 16343
break from the loop execution .
0
example# 16344
increment level by one .
0
example# 16345
call the function _resolve_name with 3 arguments : name list elements from the level index to the end , package and level ,
0
example# 16346
substitute the result for name . call the function __import__ with an argument name .
0
example# 16347
return sys.modules [ sys . modules ] dictionary value under the name key .
0
example# 16348
from django.core.exceptions [ django . core . exceptions ] import ValidationError into default name space .
0
example# 16349
from django.utils.translation [ django . utils . translation ] import ugettext_lazy as _ into default name space .
0
example# 16350
from django.utils.six.moves [ django . utils . six . moves ] import xrange into default name space .
0
example# 16351
define the function clean_ipv6_address with 3 arguments : ip_str , unpack_ipv4 set to boolean False and error_message ,
0
example# 16352
best_doublecolon_start is an integer -1 .
0
example# 16353
best_doublecolon_len is an integer 0 .
0
example# 16354
doublecolon_start is an integer -1 .
0
example# 16355
doublecolon_len is an integer 0 .
0
example# 16356
call he function is_valid_ipv6_address with an argument ip_str , if it evaluates to false ,
0
example# 16357
raise an ValidationError exception with 2 arguments : error_message and code as a string _STR:0_ .
1
'invalid' ||| _STR:0_
example# 16358
call the function _explode_shorthand_ip_string with an argument ip_str , substitute the result for ip_str .
0
example# 16359
call the function _explode_shorthand_ip_string with an argument ip_str , substitute the result for ip_str .
0
example# 16360
if unpack_ipv4 is true ,
0
example# 16361
call the function _unpack_ipv4 with an argument ip_str , substitute the result for ipv4_unpacked .
0
example# 16362
if ipv4_unpacked is true ,
0
example# 16363
return ipv4_unpacked .
0
example# 16364
split ip_str by _STR:0_ , substitute the result for hextets .
1
':' ||| _STR:0_
example# 16365
for every index in range of integers from 0 to length of hextets , not included ,
0
example# 16366
get the value under the index key of the hextets dictionary , remove the leading _STR:0_ characters ,
1
'0' ||| _STR:0_
example# 16367
substitute the result for value under the index key of the hextets dictionary . get the value under the index key of the hextets dictionary , if it is false ,
0
example# 16368
value under the index key of the hextets dictionary is a string _STR:0_ .
1
'0' ||| _STR:0_
example# 16369
if value under the index key of the hextets dictionary equals to string _STR:0_ ,
1
'0' ||| _STR:0_
example# 16370
increment doublecolon_len by integer 1 ,
0
example# 16371
if doublecolon_start equals integer -1 ,
0
example# 16372
substitute index for doublecolon_start .
0
example# 16373
if doublecolon_len is greater than best_doublecolon_len ,
0
example# 16374
substitute doublecolon_len for best_doublecolon_len .
0
example# 16375
substitute doublecolon_start for best_doublecolon_start .
0
example# 16376
if not ,
0
example# 16377
doublecolon_len is integer 0 .
0
example# 16378
doublecolon_start is integer -1 .
0
example# 16379
if best_doublecolon_len is greater than integer 1 ,
0
example# 16380
sum best_doublecolon_start and best_doublecolon_len , substitute the result for best_doublecolon_end ,
0
example# 16381
if best_doublecolon_end equals length of hextets ,
0
example# 16382
append an empty string to list hextets .
0
example# 16383
replace hextets list from the best_doublecolon_start index to best_doublecolon_end index with an empty string .
0
example# 16384
if best_doublecolon_start equals integer 0 ,
0
example# 16385
prepend an empty string to hextets list .
0
example# 16386
join elements of hextets into a string , separated with _STR:0_ , substitute it for result .
1
':' ||| _STR:0_
example# 16387
convert result to lowercase and return it .
0
example# 16388
define the function _sanitize_ipv4_mapping with an argument ip_str .
0
example# 16389
convert ip_str to lowercase , if it doesnt start with a string _STR:0_ ,
1
'0000:0000:0000:0000:0000:ffff:' ||| _STR:0_
example# 16390
return ip_str .
0
example# 16391
split ip_str into parts by _STR:0_ , substitute the result for hextets .
1
':' ||| _STR:0_
example# 16392
if _STR:0_ is contained in last elements of hextets ,
1
'.' ||| _STR:0_
example# 16393
return ip_str .
0
example# 16394
ipv4_address is a string _STR:0_ formated with first 2 elements of seventh element of hextets converted into hexadecimal number ,
1
"%d.%d.%d.%d" ||| _STR:0_
example# 16395
second 2 elements of seventh element of hextets converted into hexadecimal number , first 2 elements of eight element of hextets converted into hexadecimal number , second 2 elements of eight element of hextets converted into hexadecimal number . join first 5 elements of hextets into a string , separated by _STR:0_ , substitute the result for result .
1
':' ||| _STR:0_
example# 16396
append _STR:0_ and ipv4_address to result .
1
':' ||| _STR:0_
example# 16397
return result .
0
example# 16398
define the function _unpack_ipv4 with an argument ip_str .
0
example# 16399
convert ip_str to lowercase , if it doesnt start with a string _STR:0_ ,
1
'0000:0000:0000:0000:0000:ffff:' ||| _STR:0_
example# 16400
return None .
0
example# 16401
split ip_str into 2 parts from right , return second element of the result .
0
example# 16402
define the function is_valid_ipv6_address with an argument ip_str .
0
example# 16403
from django.core.validators [ django . core . validators ] import validate_ipv4_address .
0
example# 16404
if _STR:0_ is not contained in ip_str .
1
':' ||| _STR:0_
example# 16405
return boolean False .
0
example# 16406
if count of occurrence of _STR:0_ in ip_str is greater than integer 1 ,
1
'::' ||| _STR:0_
example# 16407
return boolean False .
0
example# 16408
if string _STR:0_ is contained in ip_str ,
1
':::' ||| _STR:0_
example# 16409
return boolean False .
0
example# 16410
if ip_str starts with _STR:0_ : :_STR:1_ : , but it doesnt ends with _STR:2_ ,
3
'::' ||| _STR:2_
':, but it doesnt starts with ' ||| _STR:0_
', or if ip_str ends with ' ||| _STR:1_
example# 16411
return boolean False .
0
example# 16412
if count of occurrence of _STR:0_ in ip_str is greater than integer 7 ,
1
':' ||| _STR:0_
example# 16413
return boolean False .
0
example# 16414
if _STR:0_ is not contained in ip_str and number of occurrences of _STR:1_ in ip_str is not equal to integer 7 ,
2
':' ||| _STR:1_
'::' ||| _STR:0_
example# 16415
if count of occurrence of _STR:0_ in ip_str is not equal to integer 3 ,
1
'.' ||| _STR:0_
example# 16416
return boolean False .
0
example# 16417
call the function _explode_shorthand_ip_string with an argument ip_str , substitute the result for ip_str .
0
example# 16418
split ip_str into parts by _STR:0_ , for every hextet in the result ,
1
':' ||| _STR:0_
example# 16419
if count of occurrence of _STR:0_ in ip_str is equal to integer 3 ,
1
'.' ||| _STR:0_
example# 16420
split ip_str by _STR:0_ , if last element of the result is not equal to hextet .
1
':' ||| _STR:0_
example# 16421
return boolean False .
0
example# 16422
try ,
0
example# 16423
call the function validate_ipv4_address with an argument hextet .
0
example# 16424
if ValidationError exception is caught ,
0
example# 16425
return boolean False .
0
example# 16426
if not ,
0
example# 16427
try ,
0
example# 16428
if hextet converted to hexadecimal number is smaller than hexadecimal 0 , or hextet converted to hexadecimal number is smaller than hexadecimal FFFF ,
0
example# 16429
return boolean False .
0
example# 16430
if ValueError exception is caught .
0
example# 16431
return boolean False .
0
example# 16432
return boolean True .
0
example# 16433
define the function _explode_shorthand_ip_string with an argument ip_str .
0
example# 16434
call the function _is_shorthand_ip with an argument ip_str , if it evaluates to false ,
0
example# 16435
return ip_str .
0
example# 16436
new_ip is an empty list ,
0
example# 16437
split ip_str by _STR:0_ , substitute it for hextet .
1
'::' ||| _STR:0_
example# 16438
split ip_str into parts by _STR:0_ , if _STR:1_ is contained in the last element of the result ,
2
':' ||| _STR:0_
'.' ||| _STR:1_
example# 16439
fill_to is an integer 7 .
0
example# 16440
if not ,
0
example# 16441
fill_to is an integer 8 .
0
example# 16442
if length of hextet is greater than integer 1 ,
0
example# 16443
split first and second element of hextet into parts by _STR:0_ , sum their lengths , substitute the result for sep .
1
':' ||| _STR:0_
example# 16444
split first element of hextet into parts by _STR:0_ , append them to new_ip .
1
':' ||| _STR:0_
example# 16445
for every __ in range of integers from 0 up to sep subtracted from fill_to ,
0
example# 16446
append string _STR:0_ to new_ip .
1
'0000' ||| _STR:0_
example# 16447
split second element of hextet into parts by _STR:0_ , append them to new_ip .
1
':' ||| _STR:0_
example# 16448
if not ,
0
example# 16449
split ip_str into parts by _STR:0_ , substitute the result for new_ip .
1
':' ||| _STR:0_
example# 16450
ret_ip is an empty list .
0
example# 16451
for every hextet in new_ip ,
0
example# 16452
subtract length of hextet from 4 , create a string with previous result number of character _STR:0_ , append hextet to it ,
1
'0' ||| _STR:0_
example# 16453
convert the result into a lowercase , append it to ret_ip . join elements of ret_ip into a string separated with _STR:0_ , return it .
1
':' ||| _STR:0_
example# 16454
define the function _is_shorthand_ip with an argument ip_str .
0
example# 16455
if count of occurrence of _STR:0_ in ip_str equals integer 1 ,
1
'::' ||| _STR:0_
example# 16456
return boolean True .
0
example# 16457
split ip_str into parts by _STR:0_ , for every x in the result , calculate length of x , if any is smaller than integer 4 ,
1
':' ||| _STR:0_
example# 16458
return boolean True .
0
example# 16459
return boolean False .
0
example# 16460
define the function is_iterable with an argument x .
0
example# 16461
try ,
0
example# 16462
create an iterator out of x .
0
example# 16463
if TypeError exception is caught ,
0
example# 16464
return boolean False .
0
example# 16465
if not ,
0
example# 16466
return boolean True .
0
example# 16467
import module re .
0
example# 16468
derive the class Tok from the object base class .
0
example# 16469
num is an integer 0 .
0
example# 16470
define the method __init__ with 4 arguments : self , name , regex and next set to None .
0
example# 16471
substitute Tok.num [ Tok . num ] for self.id [ self . id ] .
0
example# 16472
increment Tok.num [ Tok . num ] with an integer 1 .
0
example# 16473
substitute name for self.name [ self . name ] .
0
example# 16474
substitute regex for self.regex [ self . regex ] .
0
example# 16475
substitute next for self.next [ self . next ] .
0
example# 16476
define the function literals with 3 arguments : choices , prefix set to an empty string and suffix set to an empty string .
0
example# 16477
for every c in choices split into words , concatenate prefix , result of the function re.escape [ re . escape ] with an argument c and suffix ,
0
example# 16478
and join the results into a string , separated with _STR:0_ character , return the result . derive the class Lexer from the object base class .
1
'|' ||| _STR:0_
example# 16479
define the method __init__ with 3 arguments self , states and first .
0
example# 16480
self.regexes [ self . regexes ] is an empty dictionary .
0
example# 16481
self.tokens [ self . tokens ] is an empty dictionary .
0
example# 16482
call the method states.items [ states . items ] , for every state and rules in the result ,
0
example# 16483
parts is an empty list .
0
example# 16484
for every tok in rules ,
0
example# 16485
groupid is a string _STR:0_ formated with tok.id [ tok . id ] .
1
"t%d" ||| _STR:0_
example# 16486
substitute tok for value under the groupid key of the self.toks [ self . toks ] dictionary .
0
example# 16487
format a string _STR:0_ with groupid and tok.regex [ tok . regex ] , append it to the parts .
1
"(?P<%s>%s)" ||| _STR:0_
example# 16488
call the function re.compile [ re . compile ] with 2 arguments : elements of parts joined into a string , separated with _STR:0_ ,
1
'|' ||| _STR:0_
example# 16489
and result of bitwise OR performed on 2 operands : re.MULTILINE [ re . MULTILINE ] and re.VERBOSE [ re . VERBOSE ] , substitute the result for value under the state key of the self.regexes [ self . regexes ] dictionary . substitute first for self.state [ self . state ] .
0
example# 16490
define the method lex with 2 arguments self and text .
0
example# 16491
substitute length of text for end .
0
example# 16492
substitute self.state [ self . state ] for state .
0
example# 16493
substitute self.regexes [ self . regexes ] for regexes .
0
example# 16494
substitute self.toks [ self . toks ] for toks .
0
example# 16495
start is an integer 0 .
0
example# 16496
while start is lesser than end .
0
example# 16497
get the value under the state key of the regexes dictionary , call the method finditer on the result with 2 arguments : text and start ,
0
example# 16498
for every match in the result , substitute match.lastgroup [ match . lastgroup ] for name .
0
example# 16499
substitute value under the name key of the toks dictionary for tok .
0
example# 16500
call the method match.group [ match . group ] with an arugument name , substitute the result for toktext .
0
example# 16501
increment start by length of toktext .
0
example# 16502
yield a tuple with 2 elements : tok.name [ tok . name ] and toktext .
0
example# 16503
if tok.next [ tok . next ] is true ,
0
example# 16504
substitute tok.next [ tok . next ] for state .
0
example# 16505
break from the loop execution .
0
example# 16506
substitute state for self.state [ self . state ] .
0
example# 16507
derive the class JsLexer from the Lexer base class .
0
example# 16508
both_before is a list containing 14 elements , all of them are instances of Tok class , created with 2 arguments , a string and a raw string .
0
example# 16509
both_after is an list with an element instance of Tok class , created with 2 arguments : string _STR:0_ and raw string _STR:1_ .
2
'other' ||| _STR:0_
'.' ||| _STR:1_
example# 16510
states is a dictionary with 2 arguments : appended list with an element instance of a class Tok , created with 3 arguments : _STR:0_ ,
1
"punct" ||| _STR:0_
example# 16511
result of the function literals called with an argument string _STR:0_ and next as a string _STR:1_ , to the both_before , appended both_after to the previous result , for _STR:2_ and appended list with an element instance of a class Tok , created with 3 arguments : string _STR:3_ , raw string _STR:4_ , and next as a string _STR:2_ , to the both_before , appended both_after to the previous result for _STR:2_ . define the method __init__ with an argument self .
5
'div' ||| _STR:2_
'reg' ||| _STR:1_
"regex" ||| _STR:3_
'/([^*\\/[]|\\.|\[(   [^\]\\]|   \\.)*\])(   [^\\/[]|   \\.|   \[(   [^\]\\]|   \\.)*\])*/[a-zA-Z0-9]*' ||| _STR:4_
"/= /" ||| _STR:0_
example# 16512
call the method __init__ with 2 arguments : self.states [ self . states ] and string _STR:0_ from the base class of the class JsLexer .
1
'reg' ||| _STR:0_
example# 16513
define the function prepare_js_for_gettext with an argument js .
0
example# 16514
define the function escape_quotes with an argument m .
0
example# 16515
call the method m.group [ m . group ] with an argument integer 0 , substitute the result for s .
0
example# 16516
if s equals a string _STR:0_ ,
1
'"' ||| _STR:0_
example# 16517
return an raw string _STR:0_ .
1
'\"' ||| _STR:0_
example# 16518
if not ,
0
example# 16519
return s .
0
example# 16520
lexer is an instance of JsLexer class .
0
example# 16521
c is an empty list .
0
example# 16522
call the method lexer.lex [ lexer . lex ] with an arguments js , for every name and tok in the result ,
0
example# 16523
if name equals a string _STR:0_ ,
1
'regex' ||| _STR:0_
example# 16524
tok is a string _STR:0_ ,
1
'"REGEX"' ||| _STR:0_
example# 16525
otherwise if name starts with a string _STR:0_ ,
1
'string' ||| _STR:0_
example# 16526
if tok starts with _STR:0_ ,
1
"'" ||| _STR:0_
example# 16527
call the function re.sub [ re . sub ] with 3 arguments : raw string _STR:0_ , escape_quotes and tok without the first and last element ,
1
"\\.|." ||| _STR:0_
example# 16528
substitute the result for guts . concatenate string _STR:0_ , guts and string _STR:0_ , substitute the result for tok .
1
'"' ||| _STR:0_
example# 16529
otherwise if name equals a string _STR:0_ .
1
'id' ||| _STR:0_
example# 16530
replace every occurrence of _STR:0_U ' , substitute the result for tok .
1
'\\' in tok with ' ||| _STR:0_
example# 16531
append tok to c .
0
example# 16532
join elements of c into a string , return it .
0
example# 16533
import module logging .
0
example# 16534
import module sys .
0
example# 16535
import module warnings .
0
example# 16536
from django.conf [ django . conf ] import settings into default name space .
0
example# 16537
from django.core [ django . core ] import mail into default name space .
0
example# 16538
from django.core.mail [ django . core . mail ] import get_connection into default name space .
0
example# 16539
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInNextVersionWarning into default name space .
0
example# 16540
from django.utils.module_loading [ django . utils . module_loading ] import import_string into default name space .
0
example# 16541
from django.views.debug [ django . views . debug ] import ExceptionReporter and get_exception_reporter_filter into default name space .
0
example# 16542
from logging import NullHandler .
0
example# 16543
from logging.config [ logging . config ] import dictConfig .
0
example# 16544
substitute logging.getLogger [ logging . getLogger ] for getLogger .
0
example# 16545
DEFAULT_LOGGING is a dictionary with 5 initial entries : 1 for _STR:0_ , False for _STR:1_ ,
2
'version' ||| _STR:0_
'disable_existing_loggers' ||| _STR:1_
example# 16546
and 3 additional pairs of dictionaries for string . define the function configure_logging with 2 arguments : logging_config and logging_settings .
0
example# 16547
if sys.warnoptions [ sys . warnoptions ] is false ,
0
example# 16548
call the method logging.captureWarnings [ logging . captureWarnings ] with an argument boolean True .
0
example# 16549
call the function warnings.simplefilter [ warnings . simplefilter ] with 2 arguments : string _STR:0_ and RemovedInNextVersionWarning .
1
"default" ||| _STR:0_
example# 16550
if logging_config is true ,
0
example# 16551
call the function import_string with an argument logging_config , substitute the result for logging_config_func .
0
example# 16552
call the function logging_config_func with an argument DEFAULT_LOGGING .
0
example# 16553
if logging_settings is true ,
0
example# 16554
call the function logging_config_func with an argument logging_settings .
0
example# 16555
derive the class AdminEmailHandler from logging.Handler [ logging . Handler ] base class .
0
example# 16556
define the method __init__ with 3 arguments : self , include_html set to boolean False and email_backend set to None .
0
example# 16557
call the method logging.Handler.__init__ [ logging . Handler . __init__ ] with an argument self .
0
example# 16558
substitute include_html for self.include_html [ self . include_html ] .
0
example# 16559
substitute email_backend for self.email_backend [ self . email_backend ] .
0
example# 16560
define the method emit with 2 arguments : self and record .
0
example# 16561
try ,
0
example# 16562
substitute record.request [ record . request ] for request .
0
example# 16563
subject is an string _STR:0_ , formated with record.levelname [ record . levelname ] , string _STR:1_ if value under the _STR:2_ key ,
3
'%s (%s IP): %s' ||| _STR:0_
'internal' ||| _STR:1_
'REMOTE_ADDR' ||| _STR:2_
example# 16564
of the request.META [ request . META ] dictionary is contained in settings.INTERNAL_IPS [ settings . INTERNAL_IPS ] , otherwise use string _STR:0_ , and result of the method record.getMessage [ record . getMessage ] . call the function get_exception_reporter_filter with an argument request , substitute the result for filter .
1
'EXTERNAL' ||| _STR:0_
example# 16565
call the method filter.get_request_repr [ filter . get_request_repr ] with an argument request , format string _STR:0_ with the result , substitute the result for request_repr .
1
'\n{0}' ||| _STR:0_
example# 16566
if Exception exception is caught ,
0
example# 16567
subject is an string _STR:0_ formated with record.levelname [ record . levelname ] and result of the method record.getMessage [ record . getMessage ] , respectively .
1
'%s: %s' ||| _STR:0_
example# 16568
request is None .
0
example# 16569
request_repr is a string _STR:0_ .
1
"unavailable" ||| _STR:0_
example# 16570
call the function self.format_subject [ self . format_subject ] with an argument subject , substitute the result for subject .
0
example# 16571
if record.exc_info [ record . exc_info ] is true ,
0
example# 16572
substitute record.exc_info [ record . exc_info ] for exc_info .
0
example# 16573
if not ,
0
example# 16574
exc_info is an tuple with 3 elements : None , result of method record.getMessage [ record . getMessage ] and None .
0
example# 16575
message is an string _STR:0_ formated with the result of the metod self.format [ self . format ] with an argument record ,
1
"%s\n\nRequest repr(): %s" ||| _STR:0_
example# 16576
and request_repr , respectively . reporter is an instance of ExceptionReporter class , created with 3 arguments : request , is_email as boolean True ,
0
example# 16577
unpacked list exc_info . if self.include_html [ self . include_html ] is true , call the method reporter.get_traceback_html [ reporter . get_traceback_html ] and substitute the result for html_message ,
0
example# 16578
otherwise html_message is None . call the method mail.mail_admins [ mail . mail_admins ] with 5 arguments : subject , message , fail_silently as boolean True , tml_message as html_message ,
0
example# 16579
and connection as the result of the method self.connection [ self . connection ] . define the connection with an argument self .
0
example# 16580
call the function get_connection with 2 arguments : backend set to self.email_backend [ self . email_backend ] and fail_silently set to boolean True .
0
example# 16581
define the method format_subject with 2 arguments : self and subject .
0
example# 16582
replace every occurrence of _STR:0_ in subject with _STR:1_ and replace every occurrence of _STR:2_ in subject with _STR:3_ ,
4
'\r' ||| _STR:2_
'\\n' ||| _STR:1_
'\n' ||| _STR:0_
'\\r' ||| _STR:3_
example# 16583
substitute the result for formatted_subject . return first 989 elements of formatted_subject .
0
example# 16584
derive the class CallbackFilter from logging.Filter [ logging . Filter ] base class .
0
example# 16585
define the method __init__ with 2 arguments : self and callback .
0
example# 16586
substitute callback for self.callback [ self . callback ] .
0
example# 16587
define the method filter with 2 arguments : self and record .
0
example# 16588
call the method self.callback [ self . callback ] with an argument record , if the result evaluates to true ,
0
example# 16589
return integer 1 .
0
example# 16590
return integer 0 .
0
example# 16591
derive the class RequireDebugFalse from logging.Filter [ logging . Filter ] base class .
0
example# 16592
define the method filter with 2 arguments : self and record .
0
example# 16593
if settings.DEBUG [ settings . DEBUG ] is true , return boolean False , otherwise return boolean True .
0
example# 16594
derive the class RequireDebugTrue from logging.Filter [ logging . Filter ] base class .
0
example# 16595
define the method filter with 2 arguments : self and record .
0
example# 16596
return settings.DEBUG [ settings . DEBUG ] .
0
example# 16597
try ,
0
example# 16598
from functools import lru_cache .
0
example# 16599
if ImportError exception is caught .
0
example# 16600
from collections import namedtuple .
0
example# 16601
from functools import update_wrapper .
0
example# 16602
from threading import RLock .
0
example# 16603
_CacheInfo is an instance of namedtuple class created with 2 arguments : string _STR:0_ and a list with 4 elements : string _STR:1_ ,
2
"CacheInfo" ||| _STR:0_
'hits' ||| _STR:1_
example# 16604
_STR:0_ , _STR:1_ and _STR:2_ . derive class _HashedSeq from list base class .
3
"maxsize" ||| _STR:1_
"currsize" ||| _STR:2_
"misses" ||| _STR:0_
example# 16605
__slots__ is a string _STR:0_ .
1
'hashvalue' ||| _STR:0_
example# 16606
define the method __init__ with 3 arguments : self , tup and hash set to hash .
0
example# 16607
substitute tup for elements of self .
0
example# 16608
get the hash value of the tup , substitute it for self.hashvalue [ self . hashvalue ] .
0
example# 16609
define the method __hash__ with an argument self .
0
example# 16610
return self.hashvalue [ self . hashvalue ] .
0
example# 16611
define the function _make_key with 9 arguments : args , kwds , typed , kwd_mark as a tuple with an element result of the function object ,
0
example# 16612
substitute args for key .
0
example# 16613
if kwds is true ,
0
example# 16614
sort elements of kwds , substitute the result for sorted_items .
0
example# 16615
increment key by kwd_mark .
0
example# 16616
for every item in sorted_items ,
0
example# 16617
increment key by item .
0
example# 16618
if typed is true ,
0
example# 16619
create a tuple out of types of v , for every v in args , extend key tuple with the result .
0
example# 16620
if kwds is true ,
0
example# 16621
create a tuple out of types of v , for every k and v in sorted_items , extend key tuple with the result .
0
example# 16622
otherwise if length of key equals integer 1 and type of first element of key is contained in fasttypes ,
0
example# 16623
return first element of key .
0
example# 16624
return instance of _HashedSeq class , created with an argument key .
0
example# 16625
define the function lru_cache with 2 arguments maxsize set to integer 100 and typed set to boolean False .
0
example# 16626
define the function decorating_function with an argument user_function .
0
example# 16627
cache is an empty dictionary .
0
example# 16628
stats is an list with 2 elements : 2 integers 0 .
0
example# 16629
HITS and MISSES are integer 0 and 1 , respectively .
0
example# 16630
substitute _make_key for make_key .
0
example# 16631
substitute cache.get [ cache . get ] for cache_get .
0
example# 16632
substitute len for _len .
0
example# 16633
lock is an instance of RLock class .
0
example# 16634
root is an empty list .
0
example# 16635
root is a list with elements : root , root , None and None .
0
example# 16636
nonlocal_root is an list with an element root .
0
example# 16637
substitute integers 0 , 1 , 2 and 3 for PREV , NEXT , KEY and RESULT , respectivley .
0
example# 16638
if maxsize equals integer 0 ,
0
example# 16639
define the function wrapper with 2 arguments : unpacked list args and unpacked dictionary kwds .
0
example# 16640
call the function user_function with 2 arguments : unpacked list args and unpacked dictionary kwds , substitute the result for result .
0
example# 16641
increment stats dictionary value under the MISSES key by integer 1 .
0
example# 16642
return result .
0
example# 16643
otherwise if maxsize is None ,
0
example# 16644
define the function wrapper with 2 arguments : unpacked list args and unpacked dictionary kwds .
0
example# 16645
call the function make_key with 3 arguments : args , kwds and typed , substitute the result for key .
0
example# 16646
call the function cache_get with 2 arguments : key and root , substitute the result for result .
0
example# 16647
if result is not root ,
0
example# 16648
increment stats dictionary value under the HITS key by integer 1 .
0
example# 16649
return result .
0
example# 16650
call the function user_function with 2 arguments unpacked list args and unpacked dictionary kwds , substitute the result for result .
0
example# 16651
substitute result for cache dictionary value under the key key .
0
example# 16652
increment stats dictionary value under the MISSES key by integer 1 .
0
example# 16653
return result .
0
example# 16654
if not ,
0
example# 16655
define the function wrapper with 2 arguments : unpacked list args and unpacked dictionary kwds .
0
example# 16656
if kwds is true or typed is true , call the function make_key with 3 arguments : args , kwds and typed , substitute the result for key ,
0
example# 16657
otherwise substitute args for key . with lock ,
0
example# 16658
call the function cache_get with an argument key , substitute the result for link .
0
example# 16659
if link is not None ,
0
example# 16660
substitute nonlocal_root for a tuple with an element root .
0
example# 16661
substitute link for link_prev , link_next , key and result , respectively .
0
example# 16662
substitute link_next for value under the NEXT key of the link_prev dictionary .
0
example# 16663
substitute link_prev for value under the PREV key of the link_next dictionary .
0
example# 16664
substitute value under the PREV key of the root dictionary for last .
0
example# 16665
substitute link for values under the NEXT key of the last dictionary and PREV key of the root dictionary .
0
example# 16666
substitute last for value under the PREV key of the link dictionary .
0
example# 16667
substitute root for value under the NEXT key of the link dictionary .
0
example# 16668
increment stats dictionary value under the HITS key by integer 1 .
0
example# 16669
return result .
0
example# 16670
call the function user_function with 2 arguments : unpacked list args and unpacked dictionary kwds , substitute the result for result .
0
example# 16671
with lock ,
0
example# 16672
substitute nonlocal_root for tuple root .
0
example# 16673
if key is contained in cache ,
0
example# 16674
do nothing .
0
example# 16675
otherwise if result of the call to the function _len with an argument cache is greater than or equal to maxsize ,
0
example# 16676
substitute root for oldroot .
0
example# 16677
substitute key for value under the KEY key of the oldroot dictionary .
0
example# 16678
substitute result for value under the RESULT key of the oldroot dictionary .
0
example# 16679
substitute value under the NEXT key of the oldroot dictionary for root and first element of nonlocal_root .
0
example# 16680
substitute value under the KEY key of the root dictionary for oldkey .
0
example# 16681
substitute value under the RESULT key of the root dictionary for oldvalue .
0
example# 16682
root dictionary values under the KEY and RESULT keys are both None .
0
example# 16683
delete entry under the oldkey key of the cache dictionary .
0
example# 16684
substitute oldroot for value under the key key of the cache dictionary .
0
example# 16685
if not ,
0
example# 16686
substitute value under the PREV key of the root dictionary for last .
0
example# 16687
link is a list with 4 elements : last , root , key and result .
0
example# 16688
substitute link for value under the NEXT key of the last dictionary , for value under the PREV key of the root dictionary ,
0
example# 16689
for value under the key key of the cache dictionary . increment stats dictionary value under the MISSES key by integer 1 .
0
example# 16690
return result .
0
example# 16691
define the function cache_info .
0
example# 16692
with lock ,
0
example# 16693
return an instance of _CacheInfo class , created with 4 arguments : value under the HITS key of the stats dictionary ,
0
example# 16694
value under the MISSES key of the stats dictionary , maxsize and length of cache . define the function cache_clear .
0
example# 16695
with lock ,
0
example# 16696
call the method cache.clear [ cache . clear ] .
0
example# 16697
substitute first element of nonlocal_root for root .
0
example# 16698
root is an list with 4 elements : root , root , None and None .
0
example# 16699
stats is a list with 2 elements : 2 integers 0 .
0
example# 16700
substitute user_function for wrapper.__wrapped__ [ wrapper . __wrapped__ ] .
0
example# 16701
substitute cache_info for wrapper.cache_info [ wrapper . cache_info ] .
0
example# 16702
substitute cache_clear for wrapper.cache_clear [ wrapper . cache_clear ] .
0
example# 16703
call the function update_wrapper with 2 arguments : wrapper and user_function , return the result .
0
example# 16704
return decorating_function .
0
example# 16705
from __future__ import absolute_import into default name space .
0
example# 16706
import module copy .
0
example# 16707
from importlib import import_module into default name space .
0
example# 16708
import module os .
0
example# 16709
import module sys .
0
example# 16710
import module warnings .
0
example# 16711
from django.core.exceptions [ django . core . exceptions ] import ImproperlyConfigured into default name space .
0
example# 16712
from django.utils [ django . utils ] import six into default name space .
0
example# 16713
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
0
example# 16714
define the function import_string with an argument dotted_path .
0
example# 16715
try ,
0
example# 16716
split dotted_path into two parts from the right at the _STR:0_ character , assign the result to module_path and class_name , respectively .
1
'.' ||| _STR:0_
example# 16717
if ValueError exception is caught ,
0
example# 16718
msg is a string _STR:0_ formated with dotted_path .
1
"%s doesn't look like a module path" ||| _STR:0_
example# 16719
call the function six.reraise [ six . reraise ] with 3 arguments : ImportError , instance of ImportError class created with an argument msg ,
0
example# 16720
and third element of result of the function sys.exc_info [ sys . exc_info ] . call the function import_module with an argument module_path , substitute the result for module .
0
example# 16721
try ,
0
example# 16722
get attribute class_name form the module object , return it .
0
example# 16723
if AttributeError exception is caught ,
0
example# 16724
msg is a string _STR:0_ formated with dotted_path and class_name , respectively .
1
'Module "%s" does not define a "%s" attribute/class' ||| _STR:0_
example# 16725
call the function six.reraise [ six . reraise ] with 3 arguments : ImportError , instance of ImportError class created with an argument msg ,
0
example# 16726
and third element of result of the function sys.exc_info [ sys . exc_info ] . define the function import_by_path with 2 arguments dotted_path and error_prefix set to an empty string.. [ string .  .  ]
0
example# 16727
call the function warnings.warn [ warnings . warn ] with 3 arguments : string _STR:0_ ,
1
'import_by_path() has been deprecated. Use import_string() instead.' ||| _STR:0_
example# 16728
RemovedInDjango19Warning and stacklevel as integer 2. try ,
0
example# 16729
call the function import_string with an argument dotted_path , substitute the result for attr .
0
example# 16730
if ImportError , renamed to e , exception is caught ,
0
example# 16731
msg is a string _STR:0_ , where ' % s ' is replaced with error_prefix , dotted_path and e , respectively .
1
'%sError importing module %s: "%s"' ||| _STR:0_
example# 16732
call the function six.reraise [ six . reraise ] with 3 arguments : ImproperlyConfigured , instance of ImproperlyConfigured class created with msg ,
0
example# 16733
and third element of the function sys.exc_info [ sys . exc_info ] result . return attr .
0
example# 16734
define the function autodiscover_modules with 2 arguments unpacked list args and unpacked dictionary kwargs .
0
example# 16735
from django.apps [ django . apps ] import apps .
0
example# 16736
get value under the _STR:0_ key of the kwargs dictionary , substitute it for register_to .
1
'register_to' ||| _STR:0_
example# 16737
call the method apps.get_app_configs [ apps . get_app_configs ] , for every app_config in the result ,
0
example# 16738
try ,
0
example# 16739
if register_to is true ,
0
example# 16740
call the method copy.copy [ copy . copy ] with an argument register_to._registry [ register_to . _registry ] , substitute the result for before_import_registry .
0
example# 16741
for every module_to_search in args ,
0
example# 16742
call the function import_module with an argument string _STR:0_ , where ' % s ' is replaced with app_config.name [ app_config . name ] and module_to_search .
1
'%s.%s' ||| _STR:0_
example# 16743
is exception is caught ,
0
example# 16744
if register_to is true ,
0
example# 16745
substitute before_import_registry for register_to._registry [ register_to . _registry ] .
0
example# 16746
if call to the function module_has_submodule with 2 arguments : app_config.module [ app_config . module ] and module_to_search evaluates to true ,
0
example# 16747
raise an exception ,
0
example# 16748
if first and second element of sys.version_info [ sys . version_info ] are both equal to integer 3 ,
0
example# 16749
if first and second element of sys.version_info [ sys . version_info ] are equal to integers 3 and 4 , respectively ,
0
example# 16750
from importlib.util [ importlib . util ] import find_spec as importlib_find .
0
example# 16751
if not ,
0
example# 16752
from importlib import find_loader as importlib_find .
0
example# 16753
define the function module_has_submodule with 2 arguments : package and module_name .
0
example# 16754
try ,
0
example# 16755
substitute package.__name__ [ package . __name__ ] for package_name .
0
example# 16756
substitute package.__path__ [ package . __path__ ] for package_path .
0
example# 16757
if AttributeError exception is caught ,
0
example# 16758
return boolean False .
0
example# 16759
concatenate package_name , string _STR:0_ and module_name , substitute it for full_module_name .
1
'.' ||| _STR:0_
example# 16760
call the function importlib_find with 2 arguments : full_module_name and package_path , if the result is not None , return boolean True ,
0
example# 16761
otherwise return boolean False . if not ,
0
example# 16762
import imp .
0
example# 16763
define the function module_has_submodule with 2 arguments : package and module_name .
0
example# 16764
join package.__name__ [ package . __name__ ] and module_name into a string separated with _STR:0_ , substitute it for name .
1
'.' ||| _STR:0_
example# 16765
try ,
0
example# 16766
if value under the name key of the sys.modules [ sys . modules ] dictionary is not None , return boolean True , otherwise return boolean False .
0
example# 16767
if KeyError exception is caught ,
0
example# 16768
do nothing .
0
example# 16769
try ,
0
example# 16770
substitute package.__path__ [ package . __path__ ] for package_path .
0
example# 16771
if AttributeError exception is caught ,
0
example# 16772
return boolean False .
0
example# 16773
for every finder in sys.meta_path [ sys . meta_path ] ,
0
example# 16774
if call to the method finder.find_module [ finder . find_module ] with 2 arguments : name and package_path evaluates to true ,
0
example# 16775
return boolean True .
0
example# 16776
for every entry in package_path ,
0
example# 16777
try ,
0
example# 16778
substitute the value under the entry key of the sys.path_importer_cache [ sys . path_importer_cache ] dictionary for finder .
0
example# 16779
if finder is None ,
0
example# 16780
try ,
0
example# 16781
call the method imp.find_module [ imp . find_module ] with 2 arguments : module_name and list containing element entry , assign the result to file_ , _ ,
0
example# 16782
and _ , respectively . if file_ is true ,
0
example# 16783
close file_ file descriptor .
0
example# 16784
return boolean True .
0
example# 16785
if ImportError exception is caught ,
0
example# 16786
skip this loop iteration ,
0
example# 16787
otherwise if call to the method finder.find_module [ finder . find_module ] with an argument name evaluates to true ,
0
example# 16788
return boolean True .
0
example# 16789
if not ,
0
example# 16790
skip this loop iteration ,
0
example# 16791
if KeyError exception is caught ,
0
example# 16792
for every hook in sys.path_hooks [ sys . path_hooks ] ,
0
example# 16793
try ,
0
example# 16794
call the function hook with an argument entry , substitute the result for finder .
0
example# 16795
if call to the method finder.find_module [ finder . find_module ] with an argument name evaluates to true ,
0
example# 16796
return boolean True .
0
example# 16797
if not ,
0
example# 16798
break from the loop execution ,
0
example# 16799
if ImportError exception is caught ,
0
example# 16800
skip this loop iteration ,
0
example# 16801
if not ,
0
example# 16802
if entry is a directory ,
0
example# 16803
try ,
0
example# 16804
call the method imp.find_module [ imp . find_module ] with 2 arguments : module_name and list containing element entry , assign the result to file_ , _ ,
0
example# 16805
and _ , respectively . if file_ is true ,
0
example# 16806
close file_ file descriptor .
0
example# 16807
return boolean True .
0
example# 16808
if ImportError exception is caught ,
0
example# 16809
do nothing .
0
example# 16810
if not ,
0
example# 16811
return boolean False .
0
example# 16812
from django.conf [ django . conf ] import settings into default name space .
0
example# 16813
from django.utils.safestring [ django . utils . safestring ] import mark_safe into default name space .
0
example# 16814
from django.utils [ django . utils ] import six into default name space .
0
example# 16815
define the function format with 6 arguments : number , decimal_sep , decimal_pos set to None , grouping set to integer 0 ,
0
example# 16816
if settings.USE_L10N [ settings . USE_L10N ] is true , substitute settings.USE_THOUSAND_SEPARATOR [ settings . USE_THOUSAND_SEPARATOR ] for use_grouping ,
0
example# 16817
otherwise substitute settings.USE_L10N [ settings . USE_L10N ] for use_grouping . if use_grouping is true substitute it for use_grouping , otherwise substitute force_grouping for use_grouping .
0
example# 16818
if use_grouping is true and grouping is greater than integer 0 , use_grouping is boolean True , otherwise it is boolean False .
0
example# 16819
if number is an integer and use_grouping is false and decimal_pos is false ,
0
example# 16820
call the function six.text_type [ six . text_type ] with an argument number , use the result as an argument for the call to the function mark_safe ,
0
example# 16821
return the result . sign is an empty string .
0
example# 16822
call the function six.text_type [ six . text_type ] with an argument number , substitute the result for str_number .
0
example# 16823
if first element of str_number equals a string _STR:0_ .
1
'-' ||| _STR:0_
example# 16824
sign is a string _STR:0_ .
1
'-' ||| _STR:0_
example# 16825
remove the first element from str_number .
0
example# 16826
if _STR:0_ is not contained in str_number ,
1
'.' ||| _STR:0_
example# 16827
split str_number by _STR:0_ , substitute the result for int_part and dec_part , respectively .
1
'.' ||| _STR:0_
example# 16828
if decimal_pos is not None ,
0
example# 16829
substitute first decimal_pos elements of dec_part for dec_part .
0
example# 16830
if not ,
0
example# 16831
substitute str_number and an empty string for int_part and dec_part .
0
example# 16832
if decimal_pos is not None
0
example# 16833
subtract length of dec_part from decimal_pos , multiply the number of character _STR:0_ by the result ,
1
'0' ||| _STR:0_
example# 16834
append the resulting string to dec_part , substitute it for dec_part . if dec_part is true ,
0
example# 16835
add decimal_sep and dec_part , substitute the result for dec_part .
0
example# 16836
if use_grouping is true ,
0
example# 16837
int_part_gd is an empty string .
0
example# 16838
for every cnt and digit in enumerated list int_part with reversed ordering of elements ,
0
example# 16839
if cnt is true and remained of dividing cnt with grouping is zero ,
0
example# 16840
increment int_part_gd by thousand_sep .
0
example# 16841
append digit to int_part_gd .
0
example# 16842
invert the ordering of elements of int_part_gd , substitute it for int_part .
0
example# 16843
sum sign , int_part and dec_part , return the result .
0
example# 16844
from __future__ import unicode_literals into default name space .
0
example# 16845
from django.utils [ django . utils ] import six into default name space .
0
example# 16846
from django.utils.six.moves [ django . utils . six . moves ] import zip into default name space .
0
example# 16847
ESCAPE_MAPPINGS is an dictionary with 10 initial entries : None for _STR:0_ , None for _STR:1_ , None for _STR:2_ , _STR:3_ for _STR:4_ , _STR:5_ for _STR:6_ ,
7
'b' ||| _STR:1_
'x' ||| _STR:5_
'B' ||| _STR:2_
'D' ||| _STR:6_
'0' ||| _STR:3_
'd' ||| _STR:4_
'A' ||| _STR:0_
example# 16848
_STR:0_ for _STR:1_ , _STR:2_ for _STR:3_ , _STR:2_ for _STR:4_ , _STR:5_ for _STR:4_ and None for _STR:6_ . derive the class Choice from list base class .
7
'W' ||| _STR:4_
'x' ||| _STR:2_
's' ||| _STR:1_
'Z' ||| _STR:6_
'S' ||| _STR:3_
'!' ||| _STR:5_
' ' ||| _STR:0_
example# 16849
derive the class Group from list base class .
0
example# 16850
derive the class NonCapture from list base class .
0
example# 16851
define the function normalize with an argument pattern .
0
example# 16852
result is an empty list .
0
example# 16853
non_capturing_groups is an empty list .
0
example# 16854
consume_next is boolean True .
0
example# 16855
call the function next_char with an argument iterator pattern , substitute the result for pattern_iter .
0
example# 16856
num_args is an integer 0 .
0
example# 16857
try ,
0
example# 16858
get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively .
0
example# 16859
if StopIteration exception ,
0
example# 16860
return a list with an element tuple with 2 elements : an empty string and an empty list .
0
example# 16861
try ,
0
example# 16862
endless loop ,
0
example# 16863
if escaped is true ,
0
example# 16864
append ch to result .
0
example# 16865
otherwise if ch equals a string _STR:0_ ,
1
'.' ||| _STR:0_
example# 16866
append string _STR:0_ to result .
1
'.' ||| _STR:0_
example# 16867
otherwise if ch equals a string _STR:0_ ,
1
'|' ||| _STR:0_
example# 16868
raise an NotImplementedError exception with an argument string _STR:0_ .
1
'Awaiting Implementation' ||| _STR:0_
example# 16869
otherwise if ch equals a string _STR:0_ ,
1
'^' ||| _STR:0_
example# 16870
do nothing .
0
example# 16871
otherwise if ch equals a string _STR:0_ ,
1
'$' ||| _STR:0_
example# 16872
skip this loop iteration .
0
example# 16873
otherwise if ch equals a string _STR:0_ ,
1
')' ||| _STR:0_
example# 16874
remove first element from non_capturing_groups , substitute it for start .
0
example# 16875
inner is an instance of NonCapture , created with elements of result from start index to the end .
0
example# 16876
append list with element inner to list containing first start elements of result , substitute it for result .
0
example# 16877
otherwise if ch equals a string _STR:0_ ,
1
'[' ||| _STR:0_
example# 16878
get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively .
0
example# 16879
append ch to result .
0
example# 16880
get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively .
0
example# 16881
while escaped is true or ch is not equal to a string _STR:0_ ,
1
']' ||| _STR:0_
example# 16882
get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively .
0
example# 16883
otherwise if ch equals a string _STR:0_ ,
1
'(' ||| _STR:0_
example# 16884
get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively .
0
example# 16885
if ch is not equal to a sring _STR:0_ or escaped is true ,
1
'?' ||| _STR:0_
example# 16886
name is a string _STR:0_ formated with num_args .
1
"_%d" ||| _STR:0_
example# 16887
increment num_args by one .
0
example# 16888
instantiate a class Group with 2 arguments : string _STR:0_ formated with name , and name , append it to result .
1
"%%(%s)s" ||| _STR:0_
example# 16889
call the function walk_to_end with 2 arguments : ch and pattern_iter .
0
example# 16890
if not ,
0
example# 16891
get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively .
0
example# 16892
if ch is contained in string _STR:0_ ,
1
"iLmsu#" ||| _STR:0_
example# 16893
call the function walk_to_end with 2 arguments : ch and pattern_iter .
0
example# 16894
otherwise if ch equals a string _STR:0_ ,
1
':' ||| _STR:0_
example# 16895
append length of result to non_capturing_groups .
0
example# 16896
otherwise if ch equals a string _STR:0_ ,
1
'P' ||| _STR:0_
example# 16897
raise an ValueError with an argument string _STR:0_ formated with ch .
1
"Non-reversible reg-exp portion: '(?%s'" ||| _STR:0_
example# 16898
if not ,
0
example# 16899
get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively .
0
example# 16900
if ch is not equal to string _STR:0_ or string _STR:1_ ,
2
'=' ||| _STR:1_
'<' ||| _STR:0_
example# 16901
raise an ValueError with an argument string _STR:0_ formated with ch .
1
"Non-reversible reg-exp portion: '(?P%s'" ||| _STR:0_
example# 16902
if ch equals a string _STR:0_ ,
1
'<' ||| _STR:0_
example# 16903
terminal_char is an string _STR:0_ .
1
'>' ||| _STR:0_
example# 16904
if not ,
0
example# 16905
terminal_char is an string _STR:0_ .
1
')' ||| _STR:0_
example# 16906
name is an empty list .
0
example# 16907
get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively .
0
example# 16908
while ch is not equal to terminal_char ,
0
example# 16909
append ch to result .
0
example# 16910
get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively .
0
example# 16911
join elements of name into a string , substitute it for param .
0
example# 16912
if terminal_char is not equal to string _STR:0_ ,
1
')' ||| _STR:0_
example# 16913
instantiate a class Group with 2 arguments : string _STR:0_ formated with param , and param , append it to result .
1
"%%(%s)s" ||| _STR:0_
example# 16914
call the function walk_to_end with 2 arguments : ch and pattern_iter .
0
example# 16915
if not ,
0
example# 16916
instantiate a class Group with 2 arguments : string _STR:0_ formated with param , and None , append it to result .
1
"%%(%s)s" ||| _STR:0_
example# 16917
otherwise if ch is contained in string _STR:0_ ,
1
"*?+{" ||| _STR:0_
example# 16918
call the function get_quantifier with 2 arguments : ch and pattern_iter , substitute the result for count and ch , respectively .
0
example# 16919
if ch is true ,
0
example# 16920
consume_next is boolean False .
0
example# 16921
if count is equal to integer 0 .
0
example# 16922
if call to the function contains with 2 arguments : last element of result and Group , evaluates to true ,
0
example# 16923
last element of result is an instance of Choice class , created with an argument list with 2 elements : None and last element of result .
0
example# 16924
if not ,
0
example# 16925
remove the first element from result .
0
example# 16926
otherwise if count is greater than integer 1 ,
0
example# 16927
create a list with count decremented by 1 number of last element of result elements , extend list result with it .
0
example# 16928
if not ,
0
example# 16929
append ch to result .
0
example# 16930
if consume_next is true ,
0
example# 16931
get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively .
0
example# 16932
if not ,
0
example# 16933
consume_next is boolean True .
0
example# 16934
if StopIteration exception ,
0
example# 16935
do nothing .
0
example# 16936
if NotImplementedError exception ,
0
example# 16937
return a list with an element tuple with 2 elements : an empty string and an empty list .
0
example# 16938
call the function flatten_result with an argument result , unpack the resulting list and zip it in the list of tuples , return the result .
0
example# 16939
define the function next_char with an argument input_iter .
0
example# 16940
for every ch in input_iter ,
0
example# 16941
if ch is not equal to string '\\ ' .
0
example# 16942
yield ch and boolean False .
0
example# 16943
skip this loop iteration .
0
example# 16944
get the next element of the iterable pattern_iter , assign the result for ch .
0
example# 16945
get the value under ch key of the ESCAPE_MAPPINGS dictionary , if it exists substitute it for representative , if not substitute ch for representative .
0
example# 16946
if representative is None ,
0
example# 16947
skip this loop iteration .
0
example# 16948
yield representative and boolean True .
0
example# 16949
define the function walk_to_end with 2 arguments ch and input_iter .
0
example# 16950
if ch equal a string _STR:0_ ,
1
'(' ||| _STR:0_
example# 16951
nesting is integer 1 .
0
example# 16952
if not ,
0
example# 16953
nesting is integer 0 .
0
example# 16954
for every ch and escaped in input_iter ,
0
example# 16955
if escaped is true ,
0
example# 16956
skip this loop iteration .
0
example# 16957
otherwise if ch equals a string _STR:0_ ,
1
'(' ||| _STR:0_
example# 16958
increment nesting by one .
0
example# 16959
otherwise if ch equals a string _STR:0_ ,
1
')' ||| _STR:0_
example# 16960
if nesting is false ,
0
example# 16961
return nothing .
0
example# 16962
decrement nesting by one .
0
example# 16963
define the function get_quantifier with 2 arguments ch and input_iter .
0
example# 16964
if ch is contained in string _STR:0_ ,
1
'*?+' ||| _STR:0_
example# 16965
try ,
0
example# 16966
get the next element of the iterable pattern_iter , assign the result for ch2 and escaped , respectively .
0
example# 16967
if StopIteration exception ,
0
example# 16968
ch2 is None .
0
example# 16969
if ch2 equals string _STR:0_ ,
1
'?' ||| _STR:0_
example# 16970
ch2 is None .
0
example# 16971
if ch equals string _STR:0_ ,
1
'+' ||| _STR:0_
example# 16972
return integer 1 and ch2 .
0
example# 16973
return integer 0 and ch2 .
0
example# 16974
quant is an empty list .
0
example# 16975
while ch is not equal to a string _STR:0_ ,
1
'}' ||| _STR:0_
example# 16976
get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively .
0
example# 16977
append ch to quant .
0
example# 16978
remove last element for quant .
0
example# 16979
join elements of quant into a string , split it by string _STR:0_ , substitute the result for values .
1
',' ||| _STR:0_
example# 16980
try ,
0
example# 16981
get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively .
0
example# 16982
if StopIteration exception ,
0
example# 16983
ch is None .
0
example# 16984
if ch equals a string _STR:0_ ,
1
'?' ||| _STR:0_
example# 16985
ch is None .
0
example# 16986
convert first element of values into a integer , return the result and ch .
0
example# 16987
define the function contains with 2 arguments source and inst .
0
example# 16988
if source is an instance of inst class ,
0
example# 16989
return boolean True .
0
example# 16990
if source is an instance of NonCapture class ,
0
example# 16991
for every elt in source ,
0
example# 16992
call the function contains with 2 arguments : elt and inst , if it evaluates to true ,
0
example# 16993
return boolean True .
0
example# 16994
return boolean False .
0
example# 16995
define the function flatten_result with an argument source .
0
example# 16996
if source is None ,
0
example# 16997
return a list containing an empty string and a list containing an empty list .
0
example# 16998
if source is an instance of Group class ,
0
example# 16999
if second element of source is None ,
0
example# 17000
params is an empty list ,
0
example# 17001
if not ,
0
example# 17002
params is a list with second element of source as a element .
0
example# 17003
return a list containing first element of source and a list containing params .
0
example# 17004
result is a list containing an empty string .
0
example# 17005
result_args is a list containing an empty list .
0
example# 17006
pos and last are integer 0 .
0
example# 17007
for every pos and elt in enumerated iterable source ,
0
example# 17008
if elt is an instance of six.string_types [ six . string_types ] class ,
0
example# 17009
skip this loop iteration .
0
example# 17010
join source list elements from last till pos indexes into a string , substitute the result for piece .
0
example# 17011
if elt is an instance of Group class ,
0
example# 17012
increment piece by firs element of elt .
0
example# 17013
substitute second element of elt for param .
0
example# 17014
if not ,
0
example# 17015
param is None .
0
example# 17016
increment pos by one , substitute the result for last .
0
example# 17017
for every i in range of integers from 0 to length of result , not included ,
0
example# 17018
increment i-th element of result by piece .
0
example# 17019
if param is true ,
0
example# 17020
append param to i-th element of result_args .
0
example# 17021
if elt is an instance of Choice or NonCapture classes ,
0
example# 17022
if elt is an instance of NonCapture class ,
0
example# 17023
elt is an list with an element elt .
0
example# 17024
inner_result and inner_args are empty lists .
0
example# 17025
for every item in elt ,
0
example# 17026
call the function flatten_result with an argument item , assign the result to res and args , respectively .
0
example# 17027
extend list inner_result with res .
0
example# 17028
extend list inner_args with args .
0
example# 17029
new_result is an empty list .
0
example# 17030
new_args is an empty list .
0
example# 17031
zip elements of result and result_args into a list of tuples , for every item and args in the result ,
0
example# 17032
zip elements of inner_result and inner_args into a list of tuples , for every i_item and i_args in the result ,
0
example# 17033
sum item and i_item together , append the result to new_result .
0
example# 17034
append i_args to args , append new_args with the result .
0
example# 17035
substitute new_result for result .
0
example# 17036
substitute new_args for result_args .
0
example# 17037
if pos is greater than or equal to last ,
0
example# 17038
join elements of list source from index last to the end into a string , substitute it for piece .
0
example# 17039
for every i in range of integers from 0 to length of result , not included ,
0
example# 17040
increment i-th element of result by piece .
0
example# 17041
return result and result_args .
0
example# 17042
from django.utils.functional [ django . utils . functional ] import curry and Promise into default name space .
0
example# 17043
from django.utils [ django . utils ] import six into default name space .
0
example# 17044
derive the class EscapeData from object base class .
0
example# 17045
do nothing .
0
example# 17046
derive the class EscapeBytes from bytes and EscapeData base classes .
0
example# 17047
do nothing .
0
example# 17048
derive the class EscapeText from six.text_type [ six . text_type ] and EscapeData base classes .
0
example# 17049
do nothing .
0
example# 17050
if six.PY3 [ six . PY3 ] is true ,
0
example# 17051
substitute EscapeText for EscapeString .
0
example# 17052
if not ,
0
example# 17053
substitute EscapeBytes for EscapeString .
0
example# 17054
substitute EscapeText for EscapeUnicode .
0
example# 17055
derive the class SafeData from object base class .
0
example# 17056
define the method __html__ with an argument self .
0
example# 17057
return self .
0
example# 17058
derive the class SafeBytes from bytes and SafeData base classes .
0
example# 17059
define the method __add__ with 2 arguments self and rhs .
0
example# 17060
call the __add__ method with an arguments rhs from the base class of the class SafeBytes , substitute the result for t .
0
example# 17061
if rhs is an instance of SafeText ,
0
example# 17062
return an instance of SafeText , created with an argument t .
0
example# 17063
otherwise if rhs is an instance of SafeBytes ,
0
example# 17064
return an instance of SafeBytes , created with an argument t .
0
example# 17065
return t .
0
example# 17066
define the method _proxy_method with 3 arguments self , unpacked list args and unpacked dictionary kwargs .
0
example# 17067
remove kwargs dictionary element under the _STR:0_ key , substitute it for method .
1
'method' ||| _STR:0_
example# 17068
call the function method with 3 arguments : self , unpacked list args and unpacked dictionary kwargs , substitute the result for data .
0
example# 17069
if data is an instance of bytes ,
0
example# 17070
return an instance of SafeBytes , created with an argument data .
0
example# 17071
if not ,
0
example# 17072
return an instance of SafeText , created with an argument data .
0
example# 17073
call the function curry with 2 arguments : _proxy_method and method set to bytes.decode [ bytes . decode ] , substitute the result for decode .
0
example# 17074
derive the class SafeText from six.text_type [ six . text_type ] and SafeData base classes .
0
example# 17075
define the method __add__ with 2 arguments self and rhs .
0
example# 17076
call the __add__ method with an arguments rhs from the base class of the class SafeText , substitute the result for t .
0
example# 17077
if rhs is an instance of SafeData .
0
example# 17078
return an instance of SafeText , created with an argument t .
0
example# 17079
return t .
0
example# 17080
define the method _proxy_method with 3 arguments self , unpacked list args and unpacked dictionary kwargs .
0
example# 17081
remove kwargs dictionary element under the _STR:0_ key , substitute it for method .
1
'method' ||| _STR:0_
example# 17082
call the function method with 3 arguments : self , unpacked list args and unpacked dictionary kwargs , substitute the result for data .
0
example# 17083
if data is an instance of bytes .
0
example# 17084
return an instance of SafeBytes , created with an argument data .
0
example# 17085
if not ,
0
example# 17086
return an instance of SafeText , created with an argument data .
0
example# 17087
call the function curry with 2 arguments : _proxy_method and method set to six.text_type.encode [ six . text_type . encode ] , substitute the result for encode .
0
example# 17088
if six.PY3 [ six . PY3 ] is true ,
0
example# 17089
substitute SafeText for SafeString .
0
example# 17090
if not ,
0
example# 17091
substitute SafeBytes for SafeString .
0
example# 17092
substitute SafeText for SafeUnicode .
0
example# 17093
define the function mark_safe with an argument s .
0
example# 17094
if s is an instance of SafeData .
0
example# 17095
return s .
0
example# 17096
if s is an instance of bytes or Promise and s._delegate_bytes [ s . _delegate_bytes ] is true ,
0
example# 17097
return an instance of SafeBytes , created with an argument s .
0
example# 17098
if s is an instance of six.text_type [ six . text_type ] or Promise ,
0
example# 17099
return an instance of SafeText , created with an argument s .
0
example# 17100
return an instance of SafeText , created with an argument s converted into a string .
0
example# 17101
define the function mark_for_escaping with an argument s .
0
example# 17102
if s is an instance of SafeData or EscapeData ,
0
example# 17103
return s .
0
example# 17104
if s is an instance of bytes or Promise and s._delegate_bytes [ s . _delegate_bytes ] is true ,
0
example# 17105
return an instance of EscapeBytes , created with an argument s .
0
example# 17106
if s is an instance of six.text_type [ six . text_type ] or Promise ,
0
example# 17107
return an instance of EscapeText , created with an argument s .
0
example# 17108
return an instance of EscapeBytes , created with an argument , reuslt of the call to the function bytes with an argument s .
0
example# 17109
import module opera .
0
example# 17110
import module sys .
0
example# 17111
import module types .
0
example# 17112
__author__ is a string _STR:0_ .
1
"Benjamin Peterson <benjamin@python.org>" ||| _STR:0_
example# 17113
__version__ is a string _STR:0_ .
1
"1.6.1" ||| _STR:0_
example# 17114
if first element of sys.version_info [ sys . version_info ] equals integer 2 , PY2 is boolean True , otherwise it is boolean False .
0
example# 17115
if first element of sys.version_info [ sys . version_info ] equals integer 3 , PY3 is boolean True , otherwise it is boolean False .
0
example# 17116
if PY3 is true ,
0
example# 17117
substitute str for string_types .
0
example# 17118
substitute int for integer_types .
0
example# 17119
substitute type for class_types .
0
example# 17120
substitute str for text_type .
0
example# 17121
substitute bytes for binary_type .
0
example# 17122
substitute sys.maxsize [ sys . maxsize ] for MAXSIZE .
0
example# 17123
if not ,
0
example# 17124
substitute basestring for string_types .
0
example# 17125
integer_types is a tuple with 2 elements int and long .
0
example# 17126
class_types is a tuple with 2 elements : type and types.ClassType [ types . ClassType ] .
0
example# 17127
substitute unicode for text_type .
0
example# 17128
substitute str for binary_type .
0
example# 17129
if sys.platform [ sys . platform ] starts with string _STR:0_ ,
1
'java' ||| _STR:0_
example# 17130
bitwise shift integer 1 to the left by 31 spaces , substitute integer 1 from the result , convert the result to a integer , substitute it for MAXSIZE .
0
example# 17131
if not ,
0
example# 17132
derive class X from the object base class .
0
example# 17133
define the method __len__ with an argument self .
0
example# 17134
bitwise shift integer 1 to the left by 31 spaces , return the result .
0
example# 17135
try
0
example# 17136
instantiate class X , get its length .
0
example# 17137
if OverflowError exception is caught ,
0
example# 17138
bitwise shift integer 1 to the left by 31 spaces , substitute integer 1 from the result , convert the result to a integer , substitute it for MAXSIZE .
0
example# 17139
if not ,
0
example# 17140
bitwise shift integer 1 to the left by 63 spaces , substitute integer 1 from the result , convert the result to a integer , substitute it for MAXSIZE .
0
example# 17141
delete X .
0
example# 17142
define the function _add_doc with 2 arguments : func and doc .
0
example# 17143
substitute doc for func.__doc__ [ func . __doc__ ] .
0
example# 17144
define the function _import_module with an argument name .
0
example# 17145
call the function __import__ with an argument name .
0
example# 17146
return value under the name key of the sys.modules [ sys . modules ] dictionary .
0
example# 17147
derive class _LazyDescr from the object base class .
0
example# 17148
define the method __init__ with 2 arguments : self and name .
0
example# 17149
substitute name for self.name [ self . name ] .
0
example# 17150
define the method __get__ with 3 arguments : self , obj and tp .
0
example# 17151
try ,
0
example# 17152
call the method self._resolve [ self . _resolve ] , substitute the result for result .
0
example# 17153
if ImportError exception is caught ,
0
example# 17154
raise an AttributeError with an argument string _STR:0_ , formated with self.name [ self . name ] .
1
"%s could not be imported " ||| _STR:0_
example# 17155
set self.name [ self . name ] attribute of the obj object to result .
0
example# 17156
delete self.name [ self . name ] attribute from the obj.__class__ [ obj . __class__ ] object .
0
example# 17157
return result .
0
example# 17158
derive class MovedModule from the _LazyDescr base class .
0
example# 17159
define the method __init__ with 4 arguments : self , name , old and new set to None .
0
example# 17160
call the __init__ method with an argument name from the base class of the MovedModule class .
0
example# 17161
if PY3 is true ,
0
example# 17162
if new is None ,
0
example# 17163
substitute name for new .
0
example# 17164
substitute new for self.mod [ self . mod ] .
0
example# 17165
if not ,
0
example# 17166
substitute old for self.mod [ self . mod ] .
0
example# 17167
define the method _resolve with an argument self .
0
example# 17168
call the function _import_module with an argument self.mod [ self . mod ] , return the result .
0
example# 17169
define the method __getattr__ with 2 arguments : self and attr set to None .
0
example# 17170
if attr equals any of the strings _STR:0_ , _STR:1_ or _STR:2_ and self.mod [ self . mod ] is not contained in sys.modules [ sys . modules ] ,
3
"__file__" ||| _STR:0_
"__path__" ||| _STR:2_
"__name__" ||| _STR:1_
example# 17171
raise an AttributeError with an argument attr .
0
example# 17172
try ,
0
example# 17173
call the method self._resolve [ self . _resolve ] , substitute the result for _module .
0
example# 17174
if ImportError exception is caught ,
0
example# 17175
raise an AttributeError with an argument attr .
0
example# 17176
get attr attribute from the _module object , substitute it for value .
0
example# 17177
set attr attribute of the self object to value .
0
example# 17178
return value .
0
example# 17179
derive class _LazyModule from the types.ModuleType [ types . ModuleType ] base class .
0
example# 17180
define the method __init__ with 2 arguments : self and name .
0
example# 17181
call the method __init__ with an argument name form the base class of the class _LazyModule .
0
example# 17182
substitute self.__class__.__doc__ [ self . __class__ . __doc__ ] for self.__doc__ [ self . __doc__ ] .
0
example# 17183
define the method __dir__ with an argument self .
0
example# 17184
attrs is a list with 2 elements : strings _STR:0_ and _STR:1_ .
2
"__doc__" ||| _STR:0_
"__name__" ||| _STR:1_
example# 17185
append attr.name [ attr . name ] to attrs for every attr in self._moved_attributes [ self . _moved_attributes ] .
0
example# 17186
return attrs .
0
example# 17187
_moved_attributes is an empty list .
0
example# 17188
derive class MovedAttribute from the _LazyDescr base class .
0
example# 17189
define the method __init__ with 6 arguments : self , name , old_mod , new_mod , old_attr set to None , new_attr set to None .
0
example# 17190
call the method __init__ with an argument name form the base class of the class MovedAttribute .
0
example# 17191
if PY3 is true ,
0
example# 17192
if new_mod is None ,
0
example# 17193
substitute name for new_mod .
0
example# 17194
substitute new_mod for self.mod [ self . mod ] .
0
example# 17195
if new_attr is None ,
0
example# 17196
if old_attr is None ,
0
example# 17197
substitute name for new_attr .
0
example# 17198
if not ,
0
example# 17199
substitute old_attr for new_attr .
0
example# 17200
substitute new_attr for self.attr [ self . attr ] .
0
example# 17201
if not ,
0
example# 17202
substitute old_mod for self.mod [ self . mod ] .
0
example# 17203
if old_attr is None ,
0
example# 17204
substitute name for old_attr .
0
example# 17205
substitute old_attr for self.attr [ self . attr ] .
0
example# 17206
define the method _resolve with an argument self .
0
example# 17207
call the function _import_module with an argument self.mod [ self . mod ] , substitute the result for module .
0
example# 17208
gett self.attr [ self . attr ] from the module object , return it .
0
example# 17209
derive class _MovedItems from the _LazyModule base class .
0
example# 17210
_moved_attributes is a list with 55 initial elements , 13 of them are the results of the call to the function MovedAttribute ,
0
example# 17211
with different 3 string arguments , the others are results of the call to the function MovedModule called with 3 string arguments . for every attr in _moved_attributes ,
0
example# 17212
set attr.name [ attr . name ] attribute of the _MovedItemst object to attr .
0
example# 17213
if attr is an instance of MovedModule .
0
example# 17214
concatenate __name__ , string _STR:0_ and attr.name [ attr . name ] together , use it as an key to get the value from the sys.modules [ sys . modules ] dictionary ,
1
'.moves' ||| _STR:0_
example# 17215
substitute attr for the obtained value . delete attr .
0
example# 17216
substitute _moved_attributes for _MovedItems._moved_attributes [ _MovedItems . _moved_attributes ] .
0
example# 17217
append string _STR:0_ to __name__ , use it as an argument to instantiate _MovedItems class , assign it to moves ,
1
'.moves' ||| _STR:0_
example# 17218
and to value under the _STR:0_ appended to __name__ key of the sys.modules [ sys . modules ] dictionary . derive class Module_six_moves_urllib_parse from the _LazyModule base class .
1
'.moves' ||| _STR:0_
example# 17219
_urllib_parse_moved_attributes is a list with 16 elemetns , all of them are the results of the call to the function MovedAttribute with different 3 string arguments .
0
example# 17220
for every attr in _urllib_parse_moved_attributes ,
0
example# 17221
set attr.name [ attr . name ] attribute of the Module_six_moves_urllib_parse object to attr .
0
example# 17222
delete attr .
0
example# 17223
substitute _urllib_parse_moved_attributes for Module_six_moves_urllib_parse._moved_attributes [ Module_six_moves_urllib_parse . _moved_attributes ] .
0
example# 17224
call the method Module_six_moves_urllib_request with an argument : string _STR:0_ appended to __name__ ,
1
".moves.urllib_parse" ||| _STR:0_
example# 17225
assign the result to the value under the string _STR:0_ appended to __name__ key of the sys.modules [ sys . modules ] dictionary , and to the value under the string _STR:1_ appended to __name__ key of the sys.modules [ sys . modules ] dictionary . derive class Module_six_moves_urllib_error from the _LazyModule base class .
2
".moves.urllib.parse" ||| _STR:1_
".moves.urllib_parse" ||| _STR:0_
example# 17226
_urllib_error_moved_attributes is a list with 3 elements : result of the call to the function MovedAttribute with 3 arguments :
0
example# 17227
strings _STR:0_ , _STR:1_ , _STR:2_ , result of the call to the function MovedAttribute with 3 arguments : strings _STR:3_ , _STR:1_ , _STR:2_ and result of the call to the function MovedAttribute with 3 arguments : strings _STR:4_ , _STR:5_ , _STR:2_ . for every attr in _urllib_error_moved_attributes ,
6
"HTTPError" ||| _STR:3_
"urllib" ||| _STR:5_
"URLError" ||| _STR:0_
"urllib.error" ||| _STR:2_
"ContentTooShortError" ||| _STR:4_
"urllib2" ||| _STR:1_
example# 17228
set attr.name [ attr . name ] attribute of the Module_six_moves_urllib_error object to attr .
0
example# 17229
delete attr .
0
example# 17230
substitute _urllib_error_moved_attributes for Module_six_moves_urllib_error._moved_attributes [ Module_six_moves_urllib_error . _moved_attributes ] .
0
example# 17231
call the method Module_six_moves_urllib_request with an argument : string _STR:0_ appended to __name__ ,
1
".moves.urllib.error" ||| _STR:0_
example# 17232
assign the result to the value under the string _STR:0_ appended to __name__ key of the sys.modules [ sys . modules ] dictionary , and to the value under the string _STR:1_ appended to __name__ key of the sys.modules [ sys . modules ] dictionary . derive class Module_six_moves_urllib_request from the _LazyModule base class .
2
".moves.urllib_error" ||| _STR:0_
".moves.urllib.error" ||| _STR:1_
example# 17233
_urllib_request_moved_attributes is an list with 33 elements , all of them are the results of the call to the function MovedAttribute with 3 different string arguments .
0
example# 17234
for every attr in _urllib_request_moved_attributes ,
0
example# 17235
set attr.name [ attr . name ] attribute of the Module_six_moves_urllib_request object to attr .
0
example# 17236
delete attr .
0
example# 17237
substitute _urllib_request_moved_attributes for Module_six_moves_urllib_request._moved_attributes [ Module_six_moves_urllib_request . _moved_attributes ] .
0
example# 17238
call the method Module_six_moves_urllib_request with an argument : string _STR:0_ appended to __name__ ,
1
".moves.urllib.request" ||| _STR:0_
example# 17239
assign the result to the value under the string _STR:0_ appended to __name__ key of the sys.modules [ sys . modules ] dictionary , and to the value under the string _STR:1_ appended to __name__ key of the sys.modules [ sys . modules ] dictionary . derive class Module_six_moves_urllib_response from the _LazyModule base class .
2
".moves.urllib_request" ||| _STR:0_
".moves.urllib.request" ||| _STR:1_
example# 17240
_urllib_response_moved_attributes is a list with 4 elements : result of the function MovedAttribute , called with 3 arguments :
0
example# 17241
strings _STR:0_ , _STR:1_ and _STR:2_ , result of the function MovedAttribute , called with 3 arguments : strings _STR:3_ , _STR:1_ , _STR:2_ , result of the function MovedAttribute , called with 3 arguments : strings _STR:4_ , _STR:1_ , _STR:2_ and result of the function MovedAttribute , called with 3 arguments : strings _STR:5_ , _STR:1_ , _STR:2_ . for every attr in _urllib_response_moved_attributes ,
6
"addclosehook" ||| _STR:3_
"addinfourl" ||| _STR:5_
"urllib" ||| _STR:1_
"urllib.response" ||| _STR:2_
"addbase" ||| _STR:0_
"addinfo" ||| _STR:4_
example# 17242
set attr.name [ attr . name ] attribute of Module_six_moves_urllib_response object to attr .
0
example# 17243
delete attr .
0
example# 17244
substitute _urllib_response_moved_attributes for Module_six_moves_urllib_response._moved_attributes [ Module_six_moves_urllib_response . _moved_attributes ] .
0
example# 17245
instantiate class Module_six_moves_urllib_response with an argument , string _STR:0_ appended to __name__ ,
1
".moves.urllib.response" ||| _STR:0_
example# 17246
assign it to value under the string _STR:0_ appended to __name__ key of the sys.modules [ sys . modules ] dictionary , and to value under the string _STR:1_ appended to __name__ key of the sys.modules [ sys . modules ] dictionary . derive class Module_six_moves_urllib_robotparser from the _LazyModule base class .
2
".moves.urllib_response" ||| _STR:0_
".moves.urllib.response" ||| _STR:1_
example# 17247
_urllib_robotparser_moved_attributes is a list containing an instance of MovedAttribute class , created with 3 argument : strings ,
0
example# 17248
_STR:0_ , _STR:1_ , _STR:2_ . for every attr in _urllib_robotparser_moved_attributes ,
3
"RobotFileParser" ||| _STR:0_
"urllib.robotparser" ||| _STR:2_
"robotparser" ||| _STR:1_
example# 17249
set attr.name [ attr . name ] attribute of Module_six_moves_urllib_robotparser object to attr .
0
example# 17250
delete attr .
0
example# 17251
substitute _urllib_robotparser_moved_attributes for Module_six_moves_urllib_robotparser._moved_attributes [ Module_six_moves_urllib_robotparser . _moved_attributes ] .
0
example# 17252
instantiate class Module_six_moves_urllib_robotparser with an argument , string _STR:0_ appended to __name__ ,
1
".moves.urllib.robotparser" ||| _STR:0_
example# 17253
assign it to value under the string _STR:0_ appended to __name__ key of the sys.modules [ sys . modules ] dictionary , and to value under the string _STR:1_ appended to __name__ key of the sys.modules [ sys . modules ] dictionary . derive class Module_six_moves_urllib from the types.ModuleType [ types . ModuleType ] base class .
2
".moves.urllib.robotparser" ||| _STR:1_
".moves.urllib_robotparser" ||| _STR:0_
example# 17254
append string _STR:0_ to __name__ , use it as an key to get the value from the sys.modules [ sys . modules ] dictionary , substitute it for parse .
1
".moves.urllib_parse" ||| _STR:0_
example# 17255
append string _STR:0_ to __name__ , use it as an key to get the value from the sys.modules [ sys . modules ] dictionary , substitute it for error .
1
".moves.urllib_error" ||| _STR:0_
example# 17256
append string _STR:0_ to __name__ , use it as an key to get the value from the sys.modules [ sys . modules ] dictionary , substitute it for request .
1
".moves.urllib_request" ||| _STR:0_
example# 17257
append string _STR:0_ to __name__ , use it as an key to get the value from the sys.modules [ sys . modules ] dictionary , substitute it for response .
1
".moves.urllib_response" ||| _STR:0_
example# 17258
append string _STR:0_ to __name__ , use it as an key to get the value from the sys.modules [ sys . modules ] dictionary , substitute it for robotparser .
1
".moves.urllib_robotparser" ||| _STR:0_
example# 17259
define the method __dir__ with an argument self .
0
example# 17260
return a list with 5 elements : strings _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ and _STR:4_ .
5
'error' ||| _STR:1_
'request' ||| _STR:2_
'response' ||| _STR:3_
'parse' ||| _STR:0_
'robotparser' ||| _STR:4_
example# 17261
instantiate class Module_six_moves_urllib with an argument , string _STR:0_ appended to __name__ ,
1
".moves.urllib" ||| _STR:0_
example# 17262
substitute it for value under the string _STR:0_ appended to __name__ key of the sys.modules [ sys . modules ] dictionary . define the function add_move with an argument move .
1
".moves.urllib" ||| _STR:0_
example# 17263
set move.name [ move . name ] attribute of the _MovedItems to move .
0
example# 17264
define the function remove_move with an argument name .
0
example# 17265
try ,
0
example# 17266
delete name attribute of the _MovedItems object .
0
example# 17267
if AttributeError exception is caught ,
0
example# 17268
try ,
0
example# 17269
delete entry under the name key of the moves.__dict__ [ moves . __dict__ ] dictionary .
0
example# 17270
if NameError exception is caught ,
0
example# 17271
raise an AttributeError with an argument string _STR:0_ , formated with a tuple with an element name .
1
"no such move, %r" ||| _STR:0_
example# 17272
if PY3 is true ,
0
example# 17273
_meth_func is a string _STR:0_ .
1
"__func__" ||| _STR:0_
example# 17274
_meth_self is a string _STR:0_ .
1
"__self__" ||| _STR:0_
example# 17275
_func_closure is a string _STR:0_ .
1
"__closure__" ||| _STR:0_
example# 17276
_func_code is a string _STR:0_ .
1
"__code__" ||| _STR:0_
example# 17277
_func_defaults is a string _STR:0_ .
1
"__defaults__" ||| _STR:0_
example# 17278
_func_globals is a string _STR:0_ .
1
"__globals__" ||| _STR:0_
example# 17279
_iterkeys is a string _STR:0_ .
1
"keys" ||| _STR:0_
example# 17280
_itervalues is a string _STR:0_ .
1
"values" ||| _STR:0_
example# 17281
_iteritems is a string _STR:0_ .
1
"items" ||| _STR:0_
example# 17282
_iterlists is a string _STR:0_ .
1
"lists" ||| _STR:0_
example# 17283
if not ,
0
example# 17284
_meth_func is a string _STR:0_ .
1
"im_func" ||| _STR:0_
example# 17285
_meth_self is a string _STR:0_ .
1
"im_self" ||| _STR:0_
example# 17286
_func_closure is a string _STR:0_ .
1
"func_closure" ||| _STR:0_
example# 17287
_func_code is a string _STR:0_ .
1
"func_code" ||| _STR:0_
example# 17288
_func_defaults is a string _STR:0_ .
1
"func_defaults" ||| _STR:0_
example# 17289
_func_globals is a string _STR:0_ .
1
"func_globals" ||| _STR:0_
example# 17290
_iterkeys is a string _STR:0_ .
1
"iterkeys" ||| _STR:0_
example# 17291
_iterkeys is a string _STR:0_ .
1
"iterkeys" ||| _STR:0_
example# 17292
_iteritems is a string _STR:0_ .
1
"iteritems" ||| _STR:0_
example# 17293
_iterlists is a string _STR:0_ .
1
"iterlists" ||| _STR:0_
example# 17294
try ,
0
example# 17295
substitute next for advance_iterator .
0
example# 17296
if NameError exception is caught ,
0
example# 17297
define the function advance_iterator with an argument it .
0
example# 17298
return next element of the iterable it .
0
example# 17299
substitute klass.__dict__ [ klass . __dict__ ] for next .
0
example# 17300
try ,
0
example# 17301
substitute callable for callable .
0
example# 17302
if NameError exception is caught ,
0
example# 17303
define the function callable with an argument obj .
0
example# 17304
if _STR:0_ is contained in klass.__dict__ [ klass . __dict__ ] for any klass in __mro__ field of the obj class , return boolean True , otherwise return False .
1
"__call__" ||| _STR:0_
example# 17305
if PY3 is true ,
0
example# 17306
define the function get_unbound_function with an argument unbound .
0
example# 17307
return unbound .
0
example# 17308
substitute Iterator for create_bound_method .
0
example# 17309
substitute object for Iterator .
0
example# 17310
if not ,
0
example# 17311
define the function get_unbound_function with an argument unbound .
0
example# 17312
return unbound.im_func [ unbound . im_func ] .
0
example# 17313
define the function create_bound_function with 2 arguments : func and obj .
0
example# 17314
call the method types.MethodType [ types . MethodType ] with 3 arguments : func , obj and obj.__class__ [ obj . __class__ ] , return the result .
0
example# 17315
derive the class Iterator from the base class object .
0
example# 17316
define the method next with an argument self .
0
example# 17317
call the function type with an argument self , on the result call the method __next__ with an argument self , return the result .
0
example# 17318
substitute callable for callable .
0
example# 17319
call the function _add_doc with 2 arguments : get_unbound_function and string _STR:0_ '' Get the function out of a possibly unbound function_STR:0_ '' .
2
"Get the function out of a possibly unbound function" ||| _STR:1_
"" ||| _STR:0_
example# 17320
call the method operator.attrgetter [ operator . attrgetter ] with an argument _meth_func , substitute the result for get_method_function .
0
example# 17321
call the method operator.attrgetter [ operator . attrgetter ] with an argument _meth_self , substitute the result for get_method_self .
0
example# 17322
call the method operator.attrgetter [ operator . attrgetter ] with an argument _func_closure , substitute the result for get_method_closure .
0
example# 17323
call the method operator.attrgetter [ operator . attrgetter ] with an argument _func_code , substitute the result for get_method_code .
0
example# 17324
call the method operator.attrgetter [ operator . attrgetter ] with an argument _func_defaults , substitute the result for get_method_defaults .
0
example# 17325
call the method operator.attrgetter [ operator . attrgetter ] with an argument _func_globals , substitute the result for get_method_globals .
0
example# 17326
define the function iterkeys with 2 arguments : d and unpacked dictionary kw .
0
example# 17327
get _iterkeys attribute of the class d , call the result with an argument unpacked dictionary kw , convert the result to a iterable ,
0
example# 17328
return it . define the function itervalues with 2 arguments : d and unpacked dictionary kw .
0
example# 17329
get _itervalues attribute of the class d , call the result with an argument unpacked dictionary kw , convert the result to a iterable ,
0
example# 17330
return it . define the function iteritems with 2 arguments : d and unpacked dictionary kw .
0
example# 17331
get _iteritems attribute of the class d , call the result with an argument unpacked dictionary kw , convert the result to a iterable ,
0
example# 17332
return it . define the function iterlists with 2 arguments : d and unpacked dictionary kw .
0
example# 17333
get _iterlists attribute of the class d , call the result with an argument unpacked dictionary kw , convert the result to a iterable ,
0
example# 17334
return it . if PY3 is true ,
0
example# 17335
define the function b with an argument s .
0
example# 17336
call the method e.encode [ e . encode ] with an argument string _STR:0_ .
1
"latin-1" ||| _STR:0_
example# 17337
define the function u with an argument s .
0
example# 17338
return s .
0
example# 17339
substitute chr for unichr .
0
example# 17340
if second element of sys.version_info [ sys . version_info ] is smaller than or equal to integer 1 ,
0
example# 17341
define the function int2byte with an argument i .
0
example# 17342
call the function bytes with an argument tuple with an element i , return the result .
0
example# 17343
if not ,
0
example# 17344
call the method operator.methodcaller [ operator . methodcaller ] with 3 arguments : string _STR:0_ , integer 1 and string _STR:1_ , substitute the result for int2byte .
2
'big' ||| _STR:1_
'to_bytes' ||| _STR:0_
example# 17345
call te method operator.itemgetter [ operator . itemgetter ] with an argument integer 0 , substitute the result for byte2int .
0
example# 17346
substitute operator.getitem [ operator . getitem ] for indexbytes .
0
example# 17347
substitute iter for iterbytes .
0
example# 17348
import io .
0
example# 17349
substitute io.StringIO [ io . StringIO ] for StringIO .
0
example# 17350
substitute io.BytesIO [ io . BytesIO ] for BytesIO .
0
example# 17351
if not ,
0
example# 17352
define the function b with an argument s .
0
example# 17353
return s .
0
example# 17354
define the function u with an argument s .
0
example# 17355
replace every occurrence of raw string _STR:0_\\\\ ' , use the result and string _STR:1_ ,
2
'\\' in s with a raw string ' ||| _STR:0_
"unicode_escape" ||| _STR:1_
example# 17356
as arguments for the call to the unicode function , return the result . substitute unichr for unichr .
0
example# 17357
substitute chr for int2byte .
0
example# 17358
define the function byte2int with an argument bs .
0
example# 17359
get the integer representation of the first element of bs , return it .
0
example# 17360
define the function indexbytes with 2 arguments buf and i .
0
example# 17361
get the integer representation of the i-th element of buf , return it .
0
example# 17362
define the function iterbytes with an argument buf .
0
example# 17363
convert byte to its integer representation , return all of the results for every byte in buf .
0
example# 17364
import StringIO .
0
example# 17365
assign StringIO.StringIO [ StringIO . StringIO ] to StringIO and BytesIO .
0
example# 17366
call the function _add_doc with 2 arguments : b and string _STR:0_ '' Byte literal_STR:0_ '' .
2
"" ||| _STR:0_
"Byte literal" ||| _STR:1_
example# 17367
call the function _add_doc with 2 arguments : u and string _STR:0_ '' Text literal_STR:0_ '' .
2
"Text literal" ||| _STR:1_
"" ||| _STR:0_
example# 17368
if PY3 is true ,
0
example# 17369
get _STR:0_ attribute from the moves.builtins [ moves . builtins ] object , substitute it for exec_ .
1
'exec' ||| _STR:0_
example# 17370
define the function reraise with 3 arguments : tp , value and tb set to None .
0
example# 17371
if value.__traceback__ [ value . __traceback__ ] is not tb ,
0
example# 17372
raise an value.with_traceback [ value . with_traceback ] exception with an argument tb .
0
example# 17373
raise an exception value .
0
example# 17374
if not ,
0
example# 17375
define the function exec with 3 arguments : _code_ , _globs_ set to None and _locs_ set to None .
0
example# 17376
if _globs_ is None ,
0
example# 17377
call the method sys._getframe [ sys . _getframe ] with an argument 1 , substitute the result for frame .
0
example# 17378
substitute frame.f_globals [ frame . f_globals ] for _globs_ .
0
example# 17379
if _locs_ is None ,
0
example# 17380
substitute if _locs_ is None for _locs_ .
0
example# 17381
delete frame .
0
example# 17382
otherwise if _locs_ is None ,
0
example# 17383
substitute _globs_ with an argument _locs_ .
0
example# 17384
execute code statement _STR:0_ '' exec _code_ in _globs_ , _locs__STR:0_ '' .
2
"" ||| _STR:0_
"exec _code_ in _globs_, _locs_" ||| _STR:1_
example# 17385
call the function exec_ with an argument string _STR:0_ '' def reraise ( tp , value , tb=None ) : raise tp , value , tb_STR:0_ '' .
2
"" ||| _STR:0_
"def reraise(tp, value, tb=None):    raise tp, value, tb" ||| _STR:1_
example# 17386
get attribute _STR:0_ from the moves.builtins [ moves . builtins ] object , if it exists substitute it for print_ , if not print_ is None .
1
'print' ||| _STR:0_
example# 17387
if print_ is None ,
0
example# 17388
define the function print_ with 2 arguments : unpacked list args and unpacked dictionary kwargs .
0
example# 17389
remover _STR:0_ key from the kwargs dictionary , if it exists substitute it for fp , if not substitute sys.stdout [ sys . stdout ] for fp .
1
'file' ||| _STR:0_
example# 17390
if fp is None ,
0
example# 17391
return nothing .
0
example# 17392
define the function write with an argument data .
0
example# 17393
if data is not an instance of basestring ,
0
example# 17394
convert data to string , substitute it for data .
0
example# 17395
if fp is an instance of file and data is an instance of unicode and fp.encoding [ fp . encoding ] is not None ,
0
example# 17396
get _STR:0_ attribute from fp object , substitute it for errors if it exists , if not errors is None .
1
'errors' ||| _STR:0_
example# 17397
if errors is None ,
0
example# 17398
errors is a string _STR:0_ .
1
"strict" ||| _STR:0_
example# 17399
call the method data.encode [ data . encode ] with 2 arguments : fp.encoding [ fp . encoding ] and errors , substitute the result for data .
0
example# 17400
write data to fp .
0
example# 17401
want_unicode is boolean False .
0
example# 17402
remove _STR:0_ key from the kwargs dictionary , if it exists substitute it for sep , if not sep is None .
1
'sep' ||| _STR:0_
example# 17403
if sep is not None ,
0
example# 17404
if sep is an instance of unicode ,
0
example# 17405
want_unicode is boolean True .
0
example# 17406
otherwise if sep is not an instance of string type ,
0
example# 17407
raise an TypeError exception with an argument string _STR:0_ .
1
"sep must be None or a string" ||| _STR:0_
example# 17408
remove _STR:0_ key from the kwargs dictionary , if it exists substitute it for end , if not end is None .
1
'end' ||| _STR:0_
example# 17409
if end is not None ,
0
example# 17410
if end is an instance of unicode ,
0
example# 17411
want_unicode is boolean True .
0
example# 17412
otherwise if end is not an instance of string type ,
0
example# 17413
raise an TypeError exception with an argument string _STR:0_ .
1
"end must be None or a string" ||| _STR:0_
example# 17414
if kwargs is true ,
0
example# 17415
raise an TypeError exception with an argument string _STR:0_ .
1
"invalid keyword arguments to print()" ||| _STR:0_
example# 17416
if want_unicode is false ,
0
example# 17417
for every arg in args ,
0
example# 17418
if arg is an instance of unicode ,
0
example# 17419
want_unicode is boolean True .
0
example# 17420
break from the loop execution .
0
example# 17421
if want_unicode is true ,
0
example# 17422
convert newline character to unicode and substitute the result for newline .
0
example# 17423
convert whitespace character to unicode and substitute the result for space .
0
example# 17424
if not ,
0
example# 17425
substitute newline character for newline .
0
example# 17426
substitute string _STR:0_ for space .
1
" " ||| _STR:0_
example# 17427
if sep is None ,
0
example# 17428
substitute space for sep .
0
example# 17429
if end is None
0
example# 17430
substitute space for end .
0
example# 17431
for every i and arg in enumerated iterable args ,
0
example# 17432
if i is true ,
0
example# 17433
call the function write with an argument sep .
0
example# 17434
call the function write with an argument arg .
0
example# 17435
call the function write with an argument end .
0
example# 17436
call the function _add_doc with 2 arguments : reraise and string _STR:0_ '' Reraise an exception._STR:0_ [ exception . _STR:0_ ] '' .
2
"Reraise an exception." ||| _STR:1_
"" ||| _STR:0_
example# 17437
define the function with_metaclass with 2 arguments meta and unpacked list bases .
0
example# 17438
derive the class metaclass form the meta base class .
0
example# 17439
substitute type.__call__ [ type . __call__ ] for __call__ .
0
example# 17440
substitute type.__init__ [ type . __init__ ] for __init__ .
0
example# 17441
define the method __new__ with 4 arguments : cls , name , this_bases and d .
0
example# 17442
if this_bases is None ,
0
example# 17443
call the method type.__new__ [ type . __new__ ] with 4 arguments : cls , name , empty tuple and d , return the result .
0
example# 17444
call the function meta with 3 arguments : name , base and d .
0
example# 17445
return an instance of metaclass class , created with 3 arguments : string _STR:0_ , None and an empty dictionary .
1
'temporary_class' ||| _STR:0_
example# 17446
define the function add_metaclass with an argument metaclass .
0
example# 17447
define the function wrapper with an argument cls .
0
example# 17448
call the method cls.__dict__.copy [ cls . __dict__ . copy ] substitute the result for orig_vars .
0
example# 17449
remove _STR:0_ key from the orig_vars dictionary .
1
'__dict__' ||| _STR:0_
example# 17450
remove _STR:0_ key from the orig_vars dictionary .
1
'__weakref__' ||| _STR:0_
example# 17451
get the value under the _STR:0_ key of the orig_vars dictionary , substitute it for slots .
1
'__slots__' ||| _STR:0_
example# 17452
if slots is not None ,
0
example# 17453
if slots is an instance of str ,
0
example# 17454
slots is a list with an element , slots .
0
example# 17455
for every slots_var in slots ,
0
example# 17456
remove slots_var key from the orig_vars dictionary .
0
example# 17457
return an instance of metaclass class , created with 3 arguments : cls.__name__ [ cls . __name__ ] , cls.__bases__ [ cls . __bases__ ] and orig_vars .
0
example# 17458
return wrapper .
0
example# 17459
if PY3 is true ,
0
example# 17460
_assertCountEqual is a strnig _STR:0_ .
1
"assertCountEqual" ||| _STR:0_
example# 17461
_assertRaisesRegex is a strnig _STR:0_ .
1
"assertRaisesRegex" ||| _STR:0_
example# 17462
_assertRegex is a strnig _STR:0_ .
1
"assertRegex" ||| _STR:0_
example# 17463
substitute memoryview for memoryview .
0
example# 17464
buffer_types is a tuple with 3 elements : bytes , bytearray and memoryview .
0
example# 17465
if not ,
0
example# 17466
_assertCountEqual is a strnig _STR:0_ .
1
"assertItemsEqual" ||| _STR:0_
example# 17467
_assertRaisesRegex is a strnig _STR:0_ .
1
"assertRaisesRegexp" ||| _STR:0_
example# 17468
_assertRegex is a strnig _STR:0_ .
1
"assertRegexpMatches" ||| _STR:0_
example# 17469
if sys.platform [ sys . platform ] starts with a string _STR:0_ ,
1
'java' ||| _STR:0_
example# 17470
substitute memoryview for memoryview .
0
example# 17471
if not ,
0
example# 17472
substitute buffer for memoryview .
0
example# 17473
buffer_types is a tuple with 2 elements bytearray and memoryview .
0
example# 17474
define the function assertCountEqual with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
0
example# 17475
get _assertCountEqual attribute of the self object , call the result with 2 arguments : unpacked list args ,
0
example# 17476
and unpacked dictionary kwargs , return the result . define the function assertRaisesRegex with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
0
example# 17477
get _assertRaisesRegex attribute of the self object , call the result with 2 arguments : unpacked list args ,
0
example# 17478
and unpacked dictionary kwargs , return the result . define the function assertRegex with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
0
example# 17479
get _assertRegex attribute of the self object , call the result with 2 arguments : unpacked list args ,
0
example# 17480
and unpacked dictionary kwargs , return the result . call the function MovedModule with 2 arguments : strings _STR:0_ and _STR:1_ ,
2
"dummy_thread" ||| _STR:1_
"_dummy_thread" ||| _STR:0_
example# 17481
use the result as an argument for the call to the add_move function . call the function MovedModule with 2 arguments : strings _STR:0_ and _STR:1_ ,
2
"_thread" ||| _STR:0_
"thread" ||| _STR:1_
example# 17482
import module contextlib .
0
example# 17483
try ,
0
example# 17484
import threading .
0
example# 17485
except ImportError .
0
example# 17486
import dummy_threading as threading .
0
example# 17487
derive the class RWLock from the object base class .
0
example# 17488
define the method __init__ with an argument self .
0
example# 17489
call the method threading.RLock [ threading . RLock ] , substitute the result for self.mutex [ self . mutex ] .
0
example# 17490
call the method threading.Semaphore [ threading . Semaphore ] with an argument integer 0 , substitute the result for self.can_read [ self . can_read ] .
0
example# 17491
call the method threading.Semaphore [ threading . Semaphore ] with an argument integer 0 , substitute the result for self.can_write [ self . can_write ] .
0
example# 17492
self.active_readers [ self . active_readers ] is an integer 0 .
0
example# 17493
self.active_writers [ self . active_writers ] is an integer 0 .
0
example# 17494
self.waiting_readers [ self . waiting_readers ] is an integer 0 .
0
example# 17495
self.waiting_writers [ self . waiting_writers ] is an integer 0 .
0
example# 17496
define the method reader_enters with an argument self .
0
example# 17497
with self.mutex [ self . mutex ] perform ,
0
example# 17498
if self.active_writers [ self . active_writers ] and self.waiting_writers [ self . waiting_writers ] both equal to integer 0 ,
0
example# 17499
increment self.active_readers [ self . active_readers ] by 1 .
0
example# 17500
call the method self.can_read.release [ self . can_read . release ] .
0
example# 17501
if not ,
0
example# 17502
increment self.waiting_readers [ self . waiting_readers ] by 1 .
0
example# 17503
call the method self.can_read.acquire [ self . can_read . acquire ] .
0
example# 17504
define the method reader_leaves with an argument self .
0
example# 17505
with self.mutex [ self . mutex ] perform ,
0
example# 17506
decrement self.active_readers [ self . active_readers ] by integer 1 ,
0
example# 17507
if self.active_readers [ self . active_readers ] equals integer 0 and self.waiting_writers [ self . waiting_writers ] is not equal to integer 0 ,
0
example# 17508
increment self.active_writers [ self . active_writers ] by 1 .
0
example# 17509
decrement self.waiting_writers [ self . waiting_writers ] by integer 1 ,
0
example# 17510
call the method self.can_write.release [ self . can_write . release ] .
0
example# 17511
contextlib.contextmanager [ contextlib . contextmanager ] decorator ,
0
example# 17512
define the method reader with an argument self .
0
example# 17513
call the method self.reader_enters [ self . reader_enters ] .
0
example# 17514
try ,
0
example# 17515
yield nothing .
0
example# 17516
finally perform ,
0
example# 17517
call the method self.reader_leaves [ self . reader_leaves ] .
0
example# 17518
define the method writer_enters with an argument self .
0
example# 17519
with self.mutex [ self . mutex ] perform ,
0
example# 17520
if self.active_writers [ self . active_writers ] equals integer 0 and self.waiting_writers [ self . waiting_writers ] equals integer 0 and self.active_readers [ self . active_readers ] equals integer 0 ,
0
example# 17521
increment self.active_writers [ self . active_writers ] by integer 1 ,
0
example# 17522
call the method self.can_write.release [ self . can_write . release ] .
0
example# 17523
if not ,
0
example# 17524
increment self.waiting_writers [ self . waiting_writers ] by integer 1 ,
0
example# 17525
call the method self.can_write.acquire [ self . can_write . acquire ] .
0
example# 17526
define the method writer_leaves with an argument self .
0
example# 17527
with self.mutex [ self . mutex ] perform ,
0
example# 17528
decrement self.active_writers [ self . active_writers ] by integer 1 ,
0
example# 17529
if self.waiting_writers [ self . waiting_writers ] is not equal to integer 0 ,
0
example# 17530
increment self.active_writers [ self . active_writers ] by integer 1 ,
0
example# 17531
decrement self.waiting_writers [ self . waiting_writers ] by integer 1 ,
0
example# 17532
call the method self.can_write.release [ self . can_write . release ] .
0
example# 17533
otherwise if self.waiting_readers [ self . waiting_readers ] is not equal to integer 0 ,
0
example# 17534
substitute self.waiting_readers [ self . waiting_readers ] for t .
0
example# 17535
self.waiting_readers [ self . waiting_readers ] is integer 0 .
0
example# 17536
increment self.active_readers [ self . active_readers ] by t .
0
example# 17537
while t is greater than integer 0 ,
0
example# 17538
call the method self.can_read.release [ self . can_read . release ] .
0
example# 17539
decrement t by integer 1 ,
0
example# 17540
contextlib.contextmanager [ contextlib . contextmanager ] decorator ,
0
example# 17541
define the method writer with an argument self .
0
example# 17542
call the method self.writer_enters [ self . writer_enters ] .
0
example# 17543
try ,
0
example# 17544
yield nothing .
0
example# 17545
finally perform ,
0
example# 17546
call the method self.writer_leaves [ self . writer_leaves ] .
0
example# 17547
from django.utils [ django . utils ] import six into default name space .
0
example# 17548
color_names is a tuple with 8 elements : strings _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ , _STR:5_ , _STR:6_ and _STR:7_ .
8
'black' ||| _STR:0_
'yellow' ||| _STR:3_
'blue' ||| _STR:4_
'white' ||| _STR:7_
'magenta' ||| _STR:5_
'cyan' ||| _STR:6_
'green' ||| _STR:2_
'red' ||| _STR:1_
example# 17549
foreground is a dictionary created with elements : x appended to a string _STR:0_ for value under the key x of color_names dictionary ,
1
'3' ||| _STR:0_
example# 17550
for every x in sequence of integers from 0 to 7. background is a dictionary created with elements : x appended to a string _STR:0_ for value under the key x of color_names dictionary ,
1
'4' ||| _STR:0_
example# 17551
for every x in sequence of integers from 0 to 7 . RESET is a string _STR:0_ .
1
'0' ||| _STR:0_
example# 17552
opt_dict is an dictionary with 5 elements : _STR:0_ for _STR:1_ , _STR:2_ for _STR:3_ , _STR:4_ for _STR:5_ , _STR:6_ for _STR:7_ ,
8
'7' ||| _STR:6_
'5' ||| _STR:4_
'underscore' ||| _STR:3_
'4' ||| _STR:2_
'1' ||| _STR:0_
'blink' ||| _STR:5_
'bold' ||| _STR:1_
'reverse' ||| _STR:7_
example# 17553
and _STR:0_ for _STR:1_ . define the method colorize with 3 arguments : text set to an empty string , opts set to an empty tuple and unpacked dictionary kwargs .
2
'8' ||| _STR:0_
'conceal' ||| _STR:1_
example# 17554
code_list is an empty list .
0
example# 17555
if text is an empty string and length of opts equals integer 1 and first element of opts equals string _STR:0_ ,
1
'reset' ||| _STR:0_
example# 17556
format string _STR:0_ with RESET , return the result .
1
'\x1b[%sm' ||| _STR:0_
example# 17557
call the function six.iteritems [ six . iteritems ] with an argument kwargs , for every k and v in the result ,
0
example# 17558
if k equals a string _STR:0_ ,
1
'fg' ||| _STR:0_
example# 17559
append value under the key v of foreground dictionary to code_list .
0
example# 17560
otherwise if k equals a string _STR:0_ ,
1
'bg' ||| _STR:0_
example# 17561
append value under the key v of background dictionary to code_list .
0
example# 17562
for every o in opts ,
0
example# 17563
if o is contained in opt_dict ,
0
example# 17564
append value under the 0 key of the opt_dict dictionary to code_list .
0
example# 17565
if string _STR:0_ is not contained in opts ,
1
'noreset' ||| _STR:0_
example# 17566
if text is true format with it and RESET a string _STR:0_ , if not format it with an empty string and RESET , substitute the result for text .
1
'%s\x1b[%sm' ||| _STR:0_
example# 17567
join elements of code_list in a string , separated by _STR:0_ , format string _STR:1_ with it , append text to the result if exists ,
2
'\x1b[%sm' ||| _STR:1_
';' ||| _STR:0_
example# 17568
return the string . define the function make_style with 2 arguments : opts set to an empty tuple and unpacked dictionary kwargs .
0
example# 17569
return lambda function with text as argument and return value being result of the function colorize , called with 3 arguments : text ,
0
example# 17570
opts and unpacked dictionary kwargs . NOCOLOR_PALETTE is a string _STR:0_ .
1
'nocolor' ||| _STR:0_
example# 17571
DARK_PALETTE is a string _STR:0_ .
1
'dark' ||| _STR:0_
example# 17572
LIGHT_PALETTE is a string _STR:0_ .
1
'light' ||| _STR:0_
example# 17573
PALETTES is a dictionary containing 3 elements , a dictionary with 18 pairs of dictionary value and string keys for NOCOLOR_PALETTE ,
0
example# 17574
a dictionary with 18 pairs of dictionary value and string keys for DARK_PALETTE , and a dictionary with 18 pairs of dictionary value and string keys for LIGHT_PALETTE . substitute DARK_PALETTE for DEFAULT_PALETTE .
0
example# 17575
define the function parse_color_setting with an argument config_string .
0
example# 17576
if config_string is false ,
0
example# 17577
return value under the DEFAULT_PALETTE key of the PALETTES dictionary .
0
example# 17578
convert config_string to lowercase and split it by _STR:0_ character , substitute the result for parts .
1
';' ||| _STR:0_
example# 17579
get value under the config_string key of the PALETTES dictionary , call the copy method on the result and substitute it for palette .
0
example# 17580
for every part in parts ,
0
example# 17581
if part is contained in PALETTES ,
0
example# 17582
get the value under the part key of the PALETTES dictionary , update with it palette dictionary .
0
example# 17583
otherwise if _STR:0_ is contained in part ,
1
'=' ||| _STR:0_
example# 17584
definition is an empty dictionary ,
0
example# 17585
split part by _STR:0_ character , substitute the result for role and instructions , respectively .
1
'=' ||| _STR:0_
example# 17586
convert role to uppercase .
0
example# 17587
split instructions by _STR:0_ character , substitute the result for styles .
1
',' ||| _STR:0_
example# 17588
reverse the order of elements of styles .
0
example# 17589
remove first element from styles , split it by the _STR:0_ character , substitute the result for colors .
1
'/' ||| _STR:0_
example# 17590
reverse the order of colors elements ,
0
example# 17591
remove the first element from colors , substitute it for fg .
0
example# 17592
if fg is contained in color_names ,
0
example# 17593
substitute fg for value under the _STR:0_ key of definition dictionary .
1
'fg' ||| _STR:0_
example# 17594
if colors is true and last element of colors is contained in color_names ,
0
example# 17595
substitute last element of colors for value under the _STR:0_ key of definition dictionary .
1
'bg' ||| _STR:0_
example# 17596
opts is a tuple created out of elements s , for every s in styles is s is in the keys of the opt_dict dictionary .
0
example# 17597
if opts is true ,
0
example# 17598
substitute opts for value under the _STR:0_ key of definition dictionary .
1
'opts' ||| _STR:0_
example# 17599
if role is contained in value under the NOCOLOR_PALETTE key of the PALETTES dictionary and definition is true ,
0
example# 17600
substitute definition for value under the role key of palette dictionary .
0
example# 17601
if palette equals value under the NOCOLOR_PALETTE key of the PALETTES dictionary ,
0
example# 17602
return None .
0
example# 17603
return palette .
0
example# 17604
from __future__ import unicode_literals into default name space .
0
example# 17605
import module re .
0
example# 17606
import module unicodedata .
0
example# 17607
from gzip import GzipFile into default name space .
0
example# 17608
from io import BytesIO into default name space .
0
example# 17609
import module warnings .
0
example# 17610
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
0
example# 17611
from django.utils.encoding [ django . utils . encoding ] import force_text into default name space .
0
example# 17612
from django.utils.functional [ django . utils . functional ] import allow_lazy and SimpleLazyObject into default name space .
0
example# 17613
from django.utils [ django . utils ] import six into default name space .
0
example# 17614
from django.utils.six.moves [ django . utils . six . moves ] import html_entities into default name space .
0
example# 17615
from django.utils.translation [ django . utils . translation ] import ugettext_lazy , ugettext as _ and pgettext into default name space .
0
example# 17616
from django.utils.safestring [ django . utils . safestring ] import mark_safe into default name space .
0
example# 17617
if six.PY2 [ six . PY2 ] is true ,
0
example# 17618
from django.utils.encoding [ django . utils . encoding ] import force_unicode .
0
example# 17619
if identity lambda function returns false , substitute the x for capfirst , if not call the function force_text with an argument x ,
0
example# 17620
convert the first element of the result to uppercase , append to it the rest of the result , substitute it for capfirst . call the function allow_lazy with 3 arguments : capfirst and six.text_type [ six . text_type ] .
0
example# 17621
call the function re.compile [ re . compile ] with 2 arguments : raw string _STR:0_ and bitwise OR performed with 2 operands ,
1
'<.*?>|((?:\w[-\w]*|&.*?;)+)' ||| _STR:0_
example# 17622
re.U [ re . U ] and re.S [ re . S ] , substitute the result for re_words . call the function re.compile [ re . compile ] with 2 arguments : raw string _STR:0_ and bitwise OR performed with 2 operands ,
1
'<.*?>|(.)' ||| _STR:0_
example# 17623
re.U [ re . U ] and re.S [ re . S ] , substitute the result for re_chars . call the function re.compile [ re . compile ] with 2 arguments : raw string _STR:0_ and bitwise OR performed with 2 operands ,
1
'<(/)?([^ ]+?)(?:(\s*/)| .*?)?>' ||| _STR:0_
example# 17624
re.U [ re . U ] and re.S [ re . S ] , substitute the result for re_chars . call the function re.compile [ re . compile ] with an argument raw string _STR:0_ , substitute the result for re_newlines .
1
'\r\n|\r' ||| _STR:0_
example# 17625
call the function re.compile [ re . compile ] with an argument raw string _STR:0_ , substitute the result for re_camel_case .
1
'(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))' ||| _STR:0_
example# 17626
define the function wrap with 2 arguments text and width .
0
example# 17627
call the function force_text with an argument text , substitute the result for text .
0
example# 17628
define the function _generator .
0
example# 17629
call the method text.splitlines [ text . splitlines ] with an argument boolean True , for every line in the result ,
0
example# 17630
if line ends with a new line character substitute width incremented by integer 1 for max_width , if not substitute width for max_width .
0
example# 17631
while length of line is grater than max_width ,
0
example# 17632
get fist max_width incremented by 1 elements from line , find index of the first occurrenece of whitespace from the right side ,
0
example# 17633
add integer 1 to it , substitute the result for space . if space equals integer 0 ,
0
example# 17634
find first index of whitespace occurrence in line , add integer 1 to it , substitute the result for space .
0
example# 17635
if space equals integer 0 ,
0
example# 17636
yield line .
0
example# 17637
line is an empty string .
0
example# 17638
break from the loop execution
0
example# 17639
get the first space decremented with integer 1 elements from string line , append newline character to it , and yield the result .
0
example# 17640
remove all the elements from space index of line .
0
example# 17641
if line ends with a new line character substitute width incremented by integer 1 for max_width , if not substitute width for max_width .
0
example# 17642
if line is true ,
0
example# 17643
yield line .
0
example# 17644
call the function _generator , join the result into a string , return the result .
0
example# 17645
call the function allow_lazy with 2 arguments : wrap and six.text_type [ six . text_type ] , substitute the result for wrap .
0
example# 17646
derive the class Truncator form the SimpleLazyObject class .
0
example# 17647
define the method __init__ with 2 arguments : self and text .
0
example# 17648
call the method __init__ from the base class of the class Truncator ,
0
example# 17649
called with with an argument lambda function which returns result of the force_text function called with an argument text . define the method add_truncation_text with 3 arguments : self , text and truncate set to None .
0
example# 17650
if truncate is None ,
0
example# 17651
call the function pgettext with an argument _STR:0_ , _STR:1_ , substitute the result for truncate .
2
'%(truncated_text)s...' ||| _STR:1_
'String to return when truncating text' ||| _STR:0_
example# 17652
call the function force_text with an argument truncate , substitute the result for truncate .
0
example# 17653
if string _STR:0_ is contained in truncate ,
1
'%(truncated_text)s' ||| _STR:0_
example# 17654
format truncate with a dictionary with an element : text for _STR:0_ , return the result .
1
'truncated_text' ||| _STR:0_
example# 17655
if text ends with truncate ,
0
example# 17656
return text .
0
example# 17657
append truncate to text , return the result .
0
example# 17658
define the method chars with 4 arguments : self , num , truncate set to None , html set to boolean False .
0
example# 17659
convert num to an integer , substitute it for length .
0
example# 17660
call the function unicodedata.normalize [ unicodedata . normalize ] with 2 arguments : string _STR:0_ and self._wrapped [ self . _wrapped ] , substitute the result for text .
1
'NFC' ||| _STR:0_
example# 17661
substitute length for truncate_len .
0
example# 17662
for every char in result of the self.add_truncation_text [ self . add_truncation_text ] , called with 2 arguments : an empty string and truncate .
0
example# 17663
call the method unicodedata.combining [ unicodedata . combining ] with an argument char , if it evaluates to false ,
0
example# 17664
decrement truncate_len by integer 1 .
0
example# 17665
if truncate_len equals integer 0 .
0
example# 17666
break from the loop execution .
0
example# 17667
if html is true ,
0
example# 17668
call the function self._truncate_html [ self . _truncate_html ] with 5 arguments : length , truncate , text , truncate_len and boolean False , return the result .
0
example# 17669
call the method self._text_chars [ self . _text_chars ] with 4 arguments : length , truncate , text and truncate_len , return the result .
0
example# 17670
call the function allow_lazy with an argument chars , substitute the result for chars .
0
example# 17671
define the method _text_chars with 5 arguments : self , length , truncate , text and truncate_len .
0
example# 17672
s_len is integer 0 .
0
example# 17673
end_index is None .
0
example# 17674
for every i and char in enumerated text ,
0
example# 17675
call the function unicodedata.combining [ unicodedata . combining ] with an argument char , if it evaluates to true ,
0
example# 17676
skip this loop iteration , s
0
example# 17677
increment s_len by integer 1 ,
0
example# 17678
if end_index is None and s_len is greater than truncate_len ,
0
example# 17679
substitute i for end_index .
0
example# 17680
if s_len is greater than length ,
0
example# 17681
call the method self.add_truncation_text [ self . add_truncation_text ] with 2 arguments : if end_index is greater than zero , first end_index elements of text ,
0
example# 17682
if not an empty string , and truncate , return the result . return text .
0
example# 17683
define the method words with 4 arguments : self , num , truncate set to None , html set to boolean False .
0
example# 17684
convert num to an integer , substitute the result for length .
0
example# 17685
if html is true ,
0
example# 17686
call the method self._truncate_html [ self . _truncate_html ] with 5 arguments : length , truncate , self._wrapped [ self . _wrapped ] , length and boolean True , return the result .
0
example# 17687
call the method self._text_words [ self . _text_words ] with 2 arguments length and truncate , return the result .
0
example# 17688
call the function allow_lazy with an argument words , substitute the result for words .
0
example# 17689
define the method _text_words with 3 arguments : self , length and truncate .
0
example# 17690
split self._wrapped [ self . _wrapped ] into words , substitute the result for words .
0
example# 17691
if length of words is greater than length ,
0
example# 17692
substitute first length elements of words for words .
0
example# 17693
call the method self.add_truncation_text [ self . add_truncation_text ] with 2 arguments : elements of words joined in a string , separated with whitespaces ,
0
example# 17694
and truncate , return the result . return elements of words joined in a string , separated with whitespaces .
0
example# 17695
define the method _truncate_html with 6 arguments : self , length , truncate , text , truncate_len and words .
0
example# 17696
if words is not empty and length is smaller than or equal to integer 0 ,
0
example# 17697
return an empty string .
0
example# 17698
html4_singlets is a tuple with 9 elements : strings _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ , _STR:5_ , _STR:6_ , _STR:7_ and _STR:8_ .
9
'param' ||| _STR:5_
'col' ||| _STR:1_
'br' ||| _STR:0_
'img' ||| _STR:4_
'base' ||| _STR:3_
'input' ||| _STR:8_
'hr' ||| _STR:7_
'link' ||| _STR:2_
'area' ||| _STR:6_
example# 17699
pos is equal to integer 0 .
0
example# 17700
end_text_pos is equal to integer 0 .
0
example# 17701
current_len is equal to integer 0 .
0
example# 17702
open_tags is an empty list .
0
example# 17703
if words is true , substitute re_words for regex , if not substitute re_chars for regex .
0
example# 17704
while current_len is smaller than or equal to length ,
0
example# 17705
call the method regex.search [ regex . search ] with 2 arguments : text and pos .
0
example# 17706
if m is false ,
0
example# 17707
break from the loop execution ,
0
example# 17708
call the method m.end [ m . end ] with an argument integer 0 , substitute the result for pos .
0
example# 17709
call the function m.group [ m . group ] , if the result evaluates to true ,
0
example# 17710
increment current_len by integer 1 ,
0
example# 17711
if current_len equals truncate_len ,
0
example# 17712
substitute pos for end_text_pos .
0
example# 17713
skip this loop iteration .
0
example# 17714
call the method m.group [ m . group ] with an argument integer 0 , use it as an argument for the call to the re_tag.match [ re_tag . match ] function ,
0
example# 17715
substitute the result for tag . if tag is false or current_len is greater or equal to truncate_len ,
0
example# 17716
skip this loop iteration .
0
example# 17717
call the method tag.groups [ tag . groups ] , substitute the result for closing_tag , tagname and self_closing , respectively .
0
example# 17718
convert tagname to lowercase , substitute it for tagname .
0
example# 17719
if self_closing is true or tagname is contained in html4_singlets ,
0
example# 17720
do nothing .
0
example# 17721
otherwise if closing_tag is true ,
0
example# 17722
try ,
0
example# 17723
get the index of the first occurrence of tagname , substitute it for i .
0
example# 17724
if ValueError exception is caught ,
0
example# 17725
do nothing .
0
example# 17726
if not ,
0
example# 17727
create a list out of open_tags elements form ( i+1 ) -th index to the end , substitute it for open_tags .
0
example# 17728
if not ,
0
example# 17729
insert tagname at the beginning of open_tags .
0
example# 17730
if current_len is smaller than or equal to length ,
0
example# 17731
return text .
0
example# 17732
create a list out of fist end_text_pos text elemnts , substitue it for out .
0
example# 17733
call the method self.add_truncation_text [ self . add_truncation_text ] with 2 arguments : an empty string and truncate , substitute it for truncate_text .
0
example# 17734
if truncate_text is true ,
0
example# 17735
append truncate_text to out .
0
example# 17736
for every tag in open_tags ,
0
example# 17737
replace ' % s ' in string _STR:0_ with tag , append the result to out .
1
'</%s>' ||| _STR:0_
example# 17738
return out .
0
example# 17739
define the function get_valid_filename with an argument s .
0
example# 17740
call the function force_text with an argument s , strip the result of whitespaces from both ends ,
0
example# 17741
replace every occurrence of whitespaces in the previous result for _STR:0_ , substitute the result for s. call the function re.sub [ re . sub ] with 3 arguments : raw string _STR:1_ , an empty string and s , return the result .
2
'_' ||| _STR:0_
'(?u)[^-\w.]' ||| _STR:1_
example# 17742
call the function allow_lazy with 2 arguments : get_valid_filename and six.text_type [ six . text_type ] , substitute the result for get_valid_filename .
0
example# 17743
define the function get_text_list with 2 arguments : list_ and last_word set to result of the function ugettext_lazy called with an argument string _STR:0_ .
1
'or' ||| _STR:0_
example# 17744
is length of list_ equals integer 0 ,
0
example# 17745
return an empty string .
0
example# 17746
if length of list_ equals integer 1 ,
0
example# 17747
call the function force_text with first element of list_ as an argument , return the result .
0
example# 17748
return a string _STR:0_ formated with 3 elements : result of the function force_text called with an argument i ,
1
'%s %s %s' ||| _STR:0_
example# 17749
separated by result of the function _ called with an argument string _STR:0_ , for every i in list_ without last element , result of the function force_text called with an argument last_word , result of the function force_text called with an argument : last element of list_ . call the function allow_lazy with 2 arguments : get_text_list and six.text_type [ six . text_type ] , substitute the result for get_text_list .
1
', ' ||| _STR:0_
example# 17750
define the function normalize_newlines with an argument text .
0
example# 17751
call the function force_text with an argument text , substitute the result for text .
0
example# 17752
call the method re_newlines.sub [ re_newlines . sub ] with 2 arguments : _STR:0_ and text , return the result .
1
'\n' ||| _STR:0_
example# 17753
call the function allow_lazy with 2 arguments : normalize_newlines and six.text_type [ six . text_type ] , substitute the result for normalize_newlines .
0
example# 17754
define the function phone2numeric with an argument phone .
0
example# 17755
char2number is an dictionary , with 26 elements : 2 for _STR:0_ , 2 for _STR:1_ , 2 for _STR:2_ , 3 for _STR:3_ , 3 for _STR:4_ , 3 for _STR:5_ , 4 for _STR:6_ ,
7
'b' ||| _STR:1_
'c' ||| _STR:2_
'g' ||| _STR:6_
'e' ||| _STR:4_
'd' ||| _STR:3_
'a' ||| _STR:0_
'f' ||| _STR:5_
example# 17756
4 for _STR:0_ , 4 for _STR:1_ , 4 for _STR:2_ , 5 for _STR:3_ , 5 for _STR:4_ , 5 for _STR:5_ , 6 for _STR:6_ , 6 for _STR:7_ , 6 for _STR:8_ , 7 for _STR:9_ , 7 for _STR:10_ , 7 for _STR:10_ , 7 for _STR:11_ , 7 for _STR:12_ , 8 for _STR:12_ , 8 for _STR:13_ , 8 for _STR:14_ , 9 for _STR:15_ , 9 for _STR:16_ , 9 for _STR:17_ and 9 for _STR:18_ . for every c in phone converted to lowercase , join the value under the c key of the char2number dictionary into a string , return it .
19
'y' ||| _STR:17_
'w' ||| _STR:15_
'x' ||| _STR:16_
'u' ||| _STR:13_
't' ||| _STR:12_
'q' ||| _STR:9_
'z' ||| _STR:18_
'o' ||| _STR:7_
'p' ||| _STR:8_
'm' ||| _STR:5_
'v' ||| _STR:14_
'l' ||| _STR:4_
'i' ||| _STR:1_
'r' ||| _STR:10_
'h' ||| _STR:0_
'n' ||| _STR:6_
's' ||| _STR:11_
'j' ||| _STR:2_
'k' ||| _STR:3_
example# 17757
call the function allow_lazy with an argument phone2numeric , substitute the result for phone2numeric .
0
example# 17758
define the function compress_string with an argument s .
0
example# 17759
zbuf is an instance of BytesIO class .
0
example# 17760
zfile is an instance of GzipFile class , created with 3 arguments : mode set to string _STR:0_ , compresslevel set to integer 6 ,
1
'wb' ||| _STR:0_
example# 17761
and fileobj set to zbuf . call the method zfile.write [ zfile . write ] with an argument s .
0
example# 17762
call the method zfile.close [ zfile . close ] .
0
example# 17763
call the method zbuf.getvalue [ zbuf . getvalue ] , return the result .
0
example# 17764
derive the class StreamingBuffer from the object base class .
0
example# 17765
define the method __init__ with an argument self .
0
example# 17766
self.vals [ self . vals ] is an empty list .
0
example# 17767
define the method write with 2 arguments : self and val .
0
example# 17768
append val to self.vals [ self . vals ] .
0
example# 17769
define the method read with an argument self .
0
example# 17770
join elements of self.vals [ self . vals ] into a bytes string , substitute the result for ret .
0
example# 17771
self.vals [ self . vals ] is an empty list .
0
example# 17772
return ret .
0
example# 17773
define the method flush with an argument self .
0
example# 17774
return nothing .
0
example# 17775
define the method close with an argument self .
0
example# 17776
return nothing .
0
example# 17777
define the function compress_sequence with an argument sequence .
0
example# 17778
buf is an instance of StreamingBuffer class .
0
example# 17779
zfile is an instance of GzipFile class , created with 3 arguments : mode set to string _STR:0_ , compresslevel set to integer 6 ,
1
'wb' ||| _STR:0_
example# 17780
and fileobj set to buf . read data from buf file stream , yield the result .
0
example# 17781
for every item in sequence ,
0
example# 17782
write item to zfile stream .
0
example# 17783
flush zfile stream buffer .
0
example# 17784
read data from buf , yield the result .
0
example# 17785
close zfile stream .
0
example# 17786
read data from buf , yield the result .
0
example# 17787
call the function re.compile [ re . compile ] with an argument string _STR:0_ , substitute the result for ustring_re .
1
"([\u0080-\uffff])" ||| _STR:0_
example# 17788
define the function javascript_quote with 2 arguments : s and quote_double_quotes set to boolean False .
0
example# 17789
msg is an string _STR:0_ .
1
"django.utils.text.javascript_quote() is deprecated. Use django.utils.html.escapejs() instead." ||| _STR:0_
example# 17790
call the function warnings.warn [ warnings . warn ] with 3 arguments : msg , RemovedInDjango19Warning and stacklevel as integer 2 .
0
example# 17791
define the function fix with an argument match .
0
example# 17792
get the unicode representation of result of the method match.group [ match . group ] called with an integer 1 , format with in a string _STR:0_ ,
1
"\\u%04x" ||| _STR:0_
example# 17793
return the result . if type of s equals bytes ,
0
example# 17794
call the method s.decode [ s . decode ] with an argument string _STR:0_ , substitute the result for s .
1
'utf-8' ||| _STR:0_
example# 17795
otherwise if , type of s doesnt equal to six.text_type [ six . text_type ] ,
0
example# 17796
raise an TypeError with an argument s .
0
example# 17797
replace every occurrence of _STR:0_\\\\ ' .
1
'\\' in s with ' ||| _STR:0_
example# 17798
replace every occurrence of _STR:0_ in s with _STR:1_ .
2
'\r' ||| _STR:0_
'\\r' ||| _STR:1_
example# 17799
replace every occurrence of _STR:0_ in s with _STR:1_ .
2
'\\n' ||| _STR:1_
'\n' ||| _STR:0_
example# 17800
replace every occurrence of _STR:0_ in s with _STR:1_ .
2
'\\t' ||| _STR:1_
'\t' ||| _STR:0_
example# 17801
replace every occurrence of _STR:0_ in s with _STR:1_ .
2
"'" ||| _STR:0_
"\\'" ||| _STR:1_
example# 17802
replace every occurrence of _STR:0_ in s with _STR:1_ .
2
'<\\/' ||| _STR:1_
'</' ||| _STR:0_
example# 17803
if quote_double_quotes is true ,
0
example# 17804
replace every occurrence of _STR:0_ in s with _STR:1_ .
2
'"' ||| _STR:0_
'&quot;' ||| _STR:1_
example# 17805
call the method ustring_re.sub [ ustring_re . sub ] with 2 arguments : fix and s , return the result .
0
example# 17806
call the function allow_lazy with 2 arguments : javascript_quote and six.text_type [ six . text_type ] , substitute the result for javascript_quote .
0
example# 17807
call the function re.compile [ re . compile ] with 2 arguments : raw string _STR:0_ ] * ( ? : ( ? : _STR:1_\\ ] |\\ . ) *_STR:2_ ] * ) + ) | \+ ) '' ,
3
"(?:[^" ||| _STR:1_
"((?:[^\s'" ||| _STR:0_
" | '(?:[^'\\]|\\.)*')[^\s'" ||| _STR:2_
example# 17808
and re.VERBOSE [ re . VERBOSE ] , substitute the result for smart_split_re . define the function smart_split with an argument text .
0
example# 17809
call the function force_text with an argument text , substitute the result for text .
0
example# 17810
call the method smart_split_re.finditer [ smart_split_re . finditer ] with an argument text , for every bit in result ,
0
example# 17811
call the method bit.group [ bit . group ] with an argument integer 0 , yield the result .
0
example# 17812
define the function _replace_entity with an argument match .
0
example# 17813
call the method match.group [ match . group ] with an argument integer 1 , substitute the result for text .
0
example# 17814
if first element of text equals _STR:0_ ,
1
'#' ||| _STR:0_
example# 17815
remove first element of text .
0
example# 17816
try ,
0
example# 17817
if first element of text is contained in _STR:0_ .
1
'xX' ||| _STR:0_
example# 17818
convert text without first element to hexadecimal integer , substitute it for c .
0
example# 17819
if nor ,
0
example# 17820
convert text to an integer , substitute it for c .
0
example# 17821
call the method six.unichr [ six . unichr ] with an argument c , return the result .
0
example# 17822
if ValueError exception is caught ,
0
example# 17823
call the method match.group [ match . group ] with an argument integer 0 , return the result .
0
example# 17824
if not ,
0
example# 17825
try ,
0
example# 17826
call the function six.unichr [ six . unichr ] with value under the text key of the html_entities.name2codepoint [ html_entities . name2codepoint ] dictionary , return the result .
0
example# 17827
if OverflowError or ValueError exceptions are caught ,
0
example# 17828
call the method match.group [ match . group ] with an argument integer 0 , return the result .
0
example# 17829
call the method re.compile [ re . compile ] with an argument raw string _STR:0_ , substitute the result for _entity_re .
1
"&(#?[xX]?(?:[0-9a-fA-F]+|\w{1,8}));" ||| _STR:0_
example# 17830
define the function unescape_entities with an argument text .
0
example# 17831
call the method _entity_re.sub [ _entity_re . sub ] with 2 arguments : _replace_entity and text , return the result .
0
example# 17832
call the function allow_lazy with 2 arguments : unescape_entities and six.text_type [ six . text_type ] , substitute the result for unescape_entities .
0
example# 17833
define the function unescape_string_literal with an argument s .
0
example# 17834
if first element of s is not contained in _STR:0_ or last element of s is not equal to first element of s ,
1
"\"'" ||| _STR:0_
example# 17835
raise an ValueError exception wit an argument string _STR:0_ , where _STR:1_ is replaced with s .
2
"%r" ||| _STR:1_
"Not a string literal: %r" ||| _STR:0_
example# 17836
substitute first element of s for quote .
0
example# 17837
remove first and last elements of s , replace every occurrence of string _STR:0_ formated with quote with quote ,
1
'\%s' ||| _STR:0_
example# 17838
replace every occurrence of raw string _STR:0_\\ ' , return the result . call the function allow_lazy with an argument unescape_string_literal , substitute the result for unescape_string_literal .
1
'\\' in the result with string ' ||| _STR:0_
example# 17839
define the function slugify with an argument value .
0
example# 17840
call the method unicodedata.normalize [ unicodedata . normalize ] with 2 arguments : string _STR:0_ and value , encode the result with 2 arguments : string _STR:1_ ,
2
'ascii' ||| _STR:1_
'NFKD' ||| _STR:0_
example# 17841
and string _STR:0_ , call the method decode on the result with an argument string _STR:1_ , substitute the result for value . call the method re.sub [ re . sub ] with 3 arguments : string _STR:2_ , empty string and value , strip the result of whitespaces from both ends ,
3
'ascii' ||| _STR:1_
'[^\w\s-]' ||| _STR:2_
'ignore' ||| _STR:0_
example# 17842
and convert it to lowercase , substitute the result for value . call the function re.sub [ re . sub ] with 3 arguments : string _STR:0_ , string _STR:1_ and value , use the result as an argument for the call to the ,
2
'[-\s]+' ||| _STR:0_
'-' ||| _STR:1_
example# 17843
mark_safe function , return the result . call the function allow_lazy with 2 arguments : slugify and six.text_type [ six . text_type ] , substitute the result slugify .
0
example# 17844
define the function camel_case_to_spaces with an argument value .
0
example# 17845
call the method re_camel_case.sub [ re_camel_case . sub ] with 2 arguments : raw string _STR:0_ and value , strip the result of whitespaces from both ends ,
1
' \1' ||| _STR:0_
example# 17846
from __future__ import unicode_literals into default name space .
0
example# 17847
import module datetime .
0
example# 17848
from django.utils.html [ django . utils . html ] import avoid_wrapping into default name space .
0
example# 17849
from django.utils.timezone [ django . utils . timezone ] import is_aware and utc into default name space .
0
example# 17850
from django.utils.translation [ django . utils . translation ] import ugettext and ungettext_lazy into default name space .
0
example# 17851
define the function timesince with d , now defaulting to None , reversed defaulting to False as arguments .
0
example# 17852
chunks is a tuple containing 6 initial tuples :
0
example# 17853
result of multiplication of integers : 60,60,24,365 , and return value of ungettext_lazy with 2 arguments : _STR:0_ , _STR:1_ , result of multiplication of integers : 60,60,24,30 , and return value of ungettext_lazy with 2 arguments : _STR:2_ , _STR:2_ , result of multiplication of integers : 60,60,24,7 , and return value of ungettext_lazy with 2 arguments : _STR:3_ , _STR:3_ , result of multiplication of integers : 60,60,24 , and return value of ungettext_lazy with 2 arguments : _STR:4_ , _STR:4_ , result of multiplication of integers : 60,60 , and return value of ungettext_lazy with 2 arguments : _STR:5_ , _STR:5_ , result of multiplication of integers : 60 , and return value of ungettext_lazy with 2 arguments : _STR:6_ , _STR:6_ , if d is not an instance of datetime.datetime [ datetime . datetime ] ,
7
'%d days' ||| _STR:4_
'%d weeks' ||| _STR:3_
'%d hours' ||| _STR:5_
'%d month' ||| _STR:2_
'%d year' ||| _STR:0_
'%d minutes' ||| _STR:6_
'%d years' ||| _STR:1_
example# 17854
call the function datetime.datetime [ datetime . datetime ] with 3 arguments , d.year [ d . year ] , d.month [ d . month ] and d.day [ d . day ] , substitute the result for d .
0
example# 17855
if now equals to boolean True and now is not an instance of datetime.datetime [ datetime . datetime ] ,
0
example# 17856
call the function datetime.datetime [ datetime . datetime ] with 3 arguments , now.year [ now . year ] , now.month [ now . month ] and now.day [ now . day ] , substitute the result for now .
0
example# 17857
if now is false ,
0
example# 17858
call the function datetime.datetime [ datetime . datetime ] with utc as argument if call to the is_aware ( d ) returns True , if not None is the argument , store the result in now .
0
example# 17859
if reversed is True substitute difference of d and now for delta , if not substitute the difference of now and d for delta .
0
example# 17860
multiply delta.days [ delta . days ] , integer 24 , integer 60 and integer 60 add delta.seconds [ delta . seconds ] to it , substitute the result for since .
0
example# 17861
if since is lesser or equal to integer 0 ,
0
example# 17862
call the function ugettext with _STR:0_ as argument , use the result as the argument for the call to the avoid_wrapping function , return the result .
1
'0 minutes' ||| _STR:0_
example# 17863
for every i and tuple containing 2 elements : seconds and name , in enumerated chunks ,
0
example# 17864
divide since by seconds , store the floored result in count .
0
example# 17865
if count does not equals to integer 0 ,
0
example# 17866
break the execution of the smallest enclosing loop .
0
example# 17867
use the remainder of the division of name by count as the argument for the call to the avoid_wrapping function , store the result in result .
0
example# 17868
if i incremented by 1 is lesser than length of chunks ,
0
example# 17869
get the element of chunks at the ( i+1 ) -the index , assign it to the seconds2 and name2 , respectively .
0
example# 17870
multiply seconds by count , subtract it from since , divide the result by seconds2 , store the floored result in count2 .
0
example# 17871
if count2 does not equals to integer 0 ,
0
example# 17872
call avoid_wrapping function with name2 modulus count2 as argument , call the ugettext with _STR:0_ as argument , add previous 2 results , increment variable result by it .
1
', ' ||| _STR:0_
example# 17873
return result .
0
example# 17874
define the function timeuntil with 2 arguments , d and now defaulting to none .
0
example# 17875
evaluate the function timesince with d , now and reversed set to boolean true as arguments , return the result .
0
example# 17876
from datetime import datetime , timedelta and tzinfo into default name space .
0
example# 17877
from threading import local into default name space .
0
example# 17878
import module sys .
0
example# 17879
import module time as _time .
0
example# 17880
try ,
0
example# 17881
import pytz .
0
example# 17882
if ImportError exception is caught ,
0
example# 17883
pytz is None .
0
example# 17884
from django.conf [ django . conf ] import settings into default name space .
0
example# 17885
from django.utils [ django . utils ] import six into default name space .
0
example# 17886
__all__ is a list with 15 elements : strings _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ ,
4
'get_default_timezone_name' ||| _STR:3_
'get_fixed_timezone' ||| _STR:1_
'get_default_timezone' ||| _STR:2_
'utc' ||| _STR:0_
example# 17887
_STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ , _STR:5_ , _STR:6_ , _STR:7_ , _STR:8_ , _STR:9_ and _STR:10_ . call the function timedelta with an argument integer 0 , substitute the result for ZERO .
11
'override' ||| _STR:4_
'now' ||| _STR:6_
'make_naive' ||| _STR:10_
'is_naive' ||| _STR:8_
'get_current_timezone' ||| _STR:0_
'activate' ||| _STR:2_
'is_aware' ||| _STR:7_
'deactivate' ||| _STR:3_
'get_current_timezone_name' ||| _STR:1_
'localtime' ||| _STR:5_
'make_aware' ||| _STR:9_
example# 17888
derive the class UTC from the tzinfo base class .
0
example# 17889
define the method __repr__ with an argument self .
0
example# 17890
return a string _STR:0_ .
1
"<UTC>" ||| _STR:0_
example# 17891
define the method utcoffset with 2 arguments self and dt .
0
example# 17892
return ZERO .
0
example# 17893
define the method tzname with 2 arguments self and dt .
0
example# 17894
return a string _STR:0_ .
1
"UTC" ||| _STR:0_
example# 17895
define the method dst with 2 arguments self and dt .
0
example# 17896
return ZERO .
0
example# 17897
derive the class FixedOffset from the tzinfo base class .
0
example# 17898
define the method __init__ with 3 arguments : self , offset set to None , name set to None .
0
example# 17899
if offset is not None ,
0
example# 17900
call the function timedelta with an argument minutes set to offset , substitute the result for self.__offset [ self . __offset ] .
0
example# 17901
if name is not None ,
0
example# 17902
substitute name for self.__name [ self . __name ] .
0
example# 17903
define the method utcoffset with 2 arguments : self and dt .
0
example# 17904
return self.__offset [ self . __offset ] .
0
example# 17905
define the method tzname with 2 arguments : self and dt .
0
example# 17906
return self.__name [ self . __name ] .
0
example# 17907
define the method dst with 2 arguments : self and dt .
0
example# 17908
return ZERO .
0
example# 17909
derive the class ReferenceLocalTimezone from the tzinfo base class .
0
example# 17910
define the method __init__ with an argument self .
0
example# 17911
call the function timedelta with an argument seconds set to negative _time.timezone [ _time . timezone ] , substitute the result for self.STDOFFSET [ self . STDOFFSET ] .
0
example# 17912
if _time.daylight [ _time . daylight ] is true ,
0
example# 17913
call the function timedelta with an argument seconds set to negative _time.altzone [ _time . altzone ] , substitute the result for self.DSTOFFSET [ self . DSTOFFSET ] .
0
example# 17914
if not ,
0
example# 17915
substitute self.STDOFFSET [ self . STDOFFSET ] for self.DSTOFFSET [ self . DSTOFFSET ] .
0
example# 17916
subtract self.STDOFFSET [ self . STDOFFSET ] with self.DSTOFFSET [ self . DSTOFFSET ] , substitute the result for self.DSTDIFF [ self . DSTDIFF ] .
0
example# 17917
call the method tzinfo.__init__ [ tzinfo . __init__ ] with an argument self .
0
example# 17918
define the method utcoffset with 2 arguments : self and dt .
0
example# 17919
call the method self._isdst [ self . _isdst ] with an argument dt , if it evaluates to true ,
0
example# 17920
return self.DSTOFFSET [ self . DSTOFFSET ] .
0
example# 17921
if not ,
0
example# 17922
return self.STDOFFSET [ self . STDOFFSET ] .
0
example# 17923
define the method utcoffset with 2 arguments : self and dt .
0
example# 17924
call the method self._isdst [ self . _isdst ] with an argument dt , if it evaluates to true ,
0
example# 17925
return self.DSTDIFF [ self . DSTDIFF ] .
0
example# 17926
if not ,
0
example# 17927
return ZERO .
0
example# 17928
define the method tzname with 2 arguments : self and dt .
0
example# 17929
call the method self._isdst [ self . _isdst ] with an argument dt , use it as an key to get the value from the _time.tzname [ _time . tzname ] dictionary , return it .
0
example# 17930
define the method _isdst with 2 arguments : self and dt .
0
example# 17931
tt is a tuple with 9 elements : dt.year [ dt . year ] , dt.month [ dt . month ] , dt.day [ dt . day ] , dt.hour [ dt . hour ] , dt.minute [ dt . minute ] , dt.second [ dt . second ] , result of the method dt.weekday [ dt . weekday ] ,
0
example# 17932
ingeter 0 and integer 0. call the method _time.mktime [ _time . mktime ] with an argument tt , substitute the result for stamp .
0
example# 17933
call the method _time.localtime [ _time . localtime ] with an argument stamp , substitute the result for tt .
0
example# 17934
if tt.tm_isdst [ tt . tm_isdst ] is greater than integer 0 , return the result .
0
example# 17935
derive the class LocalTimezone from the ReferenceLocalTimezone base class .
0
example# 17936
define the method tzname with 2 arguments : self and dt .
0
example# 17937
if dt is None , is_dst is boolean False , otherwise call the method _isdst with an argument dt , substitute the result for is_dst .
0
example# 17938
return the value under the is_dst key of the _time.tzname [ _time . tzname ] dictionary .
0
example# 17939
define the method _isdst with 2 arguments : self and dt .
0
example# 17940
try ,
0
example# 17941
call the method _isdst with an argument dt from the base class of the class LocalTimezone , return the result .
0
example# 17942
if OverflowError or ValueError , renamed to exc , exceptions are caught ,
0
example# 17943
get the type of the exc object , substitute it for exc_type .
0
example# 17944
call the function exc_type with an argument string _STR:0_ , replace ' % s ' with dt ,
1
"Unsupported value: %r. You should install pytz." ||| _STR:0_
example# 17945
substitute the result for exc_value . substitute exc for exc_value.__cause__ [ exc_value . __cause__ ] .
0
example# 17946
call the function six.reraise [ six . reraise ] with 3 arguments : exc_type , exc_value and third element of the result of the method sys.exc_info [ sys . exc_info ] .
0
example# 17947
if pytz is true , substitute pytz.utc [ pytz . utc ] for utc , otherwise substitute result of the function UTC for utc .
0
example# 17948
define the function get_fixed_timezone with an argument offset .
0
example# 17949
if offset is an instance of timedelta class ,
0
example# 17950
substitute offset.seconds [ offset . seconds ] for offset .
0
example# 17951
if offset is smaller than integer 0 , sign is _STR:0_ , otherwise sign is _STR:1_ .
2
'-' ||| _STR:0_
'+' ||| _STR:1_
example# 17952
divide absolute offset by module 60 , use the result to format string _STR:0_ , substitute it for hhmm .
1
'%02d%02d' ||| _STR:0_
example# 17953
sum sign and hhmm , substitute the result for name .
0
example# 17954
return an instance of FixedOffset class , created with 2 arguments : offset and name .
0
example# 17955
_localtime is None .
0
example# 17956
define the function get_default_timezone .
0
example# 17957
use global variable _localtime .
0
example# 17958
if _localtime is None ,
0
example# 17959
if settings.TIME_ZONE [ settings . TIME_ZONE ] is an instance of six.string_types [ six . string_types ] and pytz is not None ,
0
example# 17960
call the method pytz.timezone [ pytz . timezone ] with an argument settings.TIME_ZONE [ settings . TIME_ZONE ] , substitute the result for _localtime .
0
example# 17961
if not ,
0
example# 17962
_localtime is an instance of LocalTimezone class .
0
example# 17963
return _localtime .
0
example# 17964
define the function get_default_timezone_name .
0
example# 17965
call the function get_default_timezone , use the result as an argument for the call to the function _get_timezone_name , return the result .
0
example# 17966
call the method local , substitute the result for _active .
0
example# 17967
define the function get_current_timezone .
0
example# 17968
get _STR:0_ attribute of the _active object , if it exists return it , if not , call the function get_default_timezone and return the result .
1
'value' ||| _STR:0_
example# 17969
define the function get_current_timezone_name .
0
example# 17970
call the function get_current_timezone , use the result as an argument for the call to the function _get_timezone_name , return the result .
0
example# 17971
define the function _get_timezone_name with an argument timezone .
0
example# 17972
try ,
0
example# 17973
return timezone.zone [ timezone . zone ] .
0
example# 17974
if AttributeError exception is caught ,
0
example# 17975
call the method timezone.tzname [ timezone . tzname ] with an argument None , return the result .
0
example# 17976
define the function activate with an argument timezone .
0
example# 17977
if timezone is an instance of tzinfo ,
0
example# 17978
substitute timezone for _active.value [ _active . value ] .
0
example# 17979
otherwise if timezone is an instance of six.string_types [ six . string_types ] and pytz is not None ,
0
example# 17980
call the method pytz.timezone [ pytz . timezone ] with an argument timezone , substitute the result for _active.value [ _active . value ] .
0
example# 17981
if not ,
0
example# 17982
raise an ValueError with an argument string _STR:0_ , substitute _STR:1_ with timezone .
2
"Invalid timezone: %r" ||| _STR:0_
'%r' ||| _STR:1_
example# 17983
define the function deactivate .
0
example# 17984
if active has an attribute _STR:0_ ,
1
'value' ||| _STR:0_
example# 17985
delete _active.value [ _active . value ] .
0
example# 17986
derive the class override from the object base class .
0
example# 17987
define the method __init__ with 2 arguments : self and timezone .
0
example# 17988
substitute timezone for self.timezone [ self . timezone ] .
0
example# 17989
get _STR:0_ attribute of the _active object
1
'value' ||| _STR:0_
example# 17990
define the method __enter__ with an argument self .
0
example# 17991
if self.timezone [ self . timezone ] is None ,
0
example# 17992
call the method deactivate .
0
example# 17993
if not ,
0
example# 17994
call the method activate with an argument self.timezone [ self . timezone ] .
0
example# 17995
define the method __exit__ with 4 arguments self , exc_type , exc_value and traceback .
0
example# 17996
if self.old_timezone [ self . old_timezone ] is None ,
0
example# 17997
call the method deactivate .
0
example# 17998
if not ,
0
example# 17999
substitute self.old_timezone [ self . old_timezone ] for _active.value [ _active . value ] .
0
example# 18000
define the function template_localtime with 2 arguments : value and use_tz set to None .
0
example# 18001
if value is an instance of datetime and settings.USE_TZ [ settings . USE_TZ ] if use_tz is None else use_tz and call to the function is_naive ,
0
example# 18002
with an argument value evaluates to false , and if _STR:0_ attribute of value object doesnt exists , or is it does is boolean True , should_convert is boolean True , otherwise is boolean False . if should_convert is true , call the function localtime with an argument value and return the result , otherwise return value .
1
'convert_to_local_time' ||| _STR:0_
example# 18003
define the function localtime with 2 arguments : value and timezone set to None .
0
example# 18004
if timezone is None ,
0
example# 18005
call the function get_current_timezone , substitute the result for timezone .
0
example# 18006
call the method value.astimezone [ value . astimezone ] with an argument timezone , substitute the result for value .
0
example# 18007
if timezone has an attribute _STR:0_ ,
1
'normalize' ||| _STR:0_
example# 18008
call the method timezone.normalize [ timezone . normalize ] with an argument value , substitute the result for value .
0
example# 18009
return value .
0
example# 18010
define the function now .
0
example# 18011
if settings.USE_TZ [ settings . USE_TZ ] is true ,
0
example# 18012
call the method datetime.utcnow [ datetime . utcnow ] , on the result call the method replace with an argument tzinfo set to utc , return the result .
0
example# 18013
if not ,
0
example# 18014
call the method datetime.now [ datetime . now ] , return the result .
0
example# 18015
define the function is_aware with an argument value .
0
example# 18016
if value.tzinfo [ value . tzinfo ] is not None and call to the method value.tzinfo.utcoffset [ value . tzinfo . utcoffset ] called with an argument value evaluates to not None ,
0
example# 18017
return boolean True , otherwise return boolean False . define the function is_naive with an argument value .
0
example# 18018
if value.tzinfo [ value . tzinfo ] is None and call to the method value.tzinfo.utcoffset [ value . tzinfo . utcoffset ] called with an argument value evaluates to None ,
0
example# 18019
return boolean True , otherwise return boolean False . define the function make_aware with 2 arguments : value and timezone .
0
example# 18020
if timezone has an attribute _STR:0_ ,
1
'localize' ||| _STR:0_
example# 18021
call the method timezone.localize [ timezone . localize ] with 2 arguments : value and is_dst as None , return the result .
0
example# 18022
if not ,
0
example# 18023
call the function is_aware with an argument value , if it evaluates to true ,
0
example# 18024
raise an ValueError exception with an argument string _STR:0_ , where ' % s ' is replaced with value .
1
"make_aware expects a naive datetime, got %s" ||| _STR:0_
example# 18025
call the method value.replace [ value . replace ] with an argument tzinfo as timezone , return the result .
0
example# 18026
define the function make_naive with 2 arguments : value and timezone .
0
example# 18027
call the method value.astimezone [ value . astimezone ] with an argument timezone , substitute the result for value .
0
example# 18028
if timezone has an attribute _STR:0_ ,
1
'normalize' ||| _STR:0_
example# 18029
call the method timezone.normalize [ timezone . normalize ] with an argument value , substitute the result for value .
0
example# 18030
call the method value.replace [ value . replace ] with an arugment tzinfo set to None , return the result .
0
example# 18031
from __future__ import unicode_literals into default name space .
0
example# 18032
import module re .
0
example# 18033
from django.utils.encoding [ django . utils . encoding ] import force_text into default name space .
0
example# 18034
from django.utils.functional [ django . utils . functional ] import lazy into default name space .
0
example# 18035
from django.utils [ django . utils ] import six into default name space .
0
example# 18036
__all__ is an list containing strings : _STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ ,
5
'deactivate' ||| _STR:1_
'override' ||| _STR:2_
'deactivate_all' ||| _STR:3_
'activate' ||| _STR:0_
'get_language' ||| _STR:4_
example# 18037
_STR:0_ , _STR:1_ , _STR:2_ , _STR:3_ , _STR:4_ , _STR:5_ , _STR:6_ , _STR:7_ , _STR:8_ , _STR:9_ , _STR:10_ , _STR:11_ , _STR:12_ , _STR:13_ , _STR:14_ , _STR:15_ , _STR:16_ , _STR:17_ , _STR:18_ , _STR:19_ , _STR:20_ and _STR:21_ . LANGUAGE_SESSION_KEY is an string _STR:22_ .
23
'get_language_info' ||| _STR:1_
'LANGUAGE_SESSION_KEY' ||| _STR:21_
'_language' ||| _STR:22_
'pgettext_lazy' ||| _STR:18_
'npgettext_lazy' ||| _STR:20_
'pgettext' ||| _STR:17_
'ungettext_lazy' ||| _STR:16_
'get_language_bidi' ||| _STR:2_
'get_language_from_request' ||| _STR:0_
'check_for_language' ||| _STR:3_
'npgettext' ||| _STR:19_
'ngettext_lazy' ||| _STR:14_
'ugettext_noop' ||| _STR:12_
'ugettext' ||| _STR:10_
'ngettext' ||| _STR:13_
'gettext_noop' ||| _STR:9_
'gettext' ||| _STR:7_
'gettext_lazy' ||| _STR:8_
'to_locale' ||| _STR:4_
'string_concat' ||| _STR:6_
'ungettext' ||| _STR:15_
'ugettext_lazy' ||| _STR:11_
'templatize' ||| _STR:5_
example# 18038
derive the class TranslatorCommentWarning from the SyntaxWarning base class .
0
example# 18039
do nothing .
0
example# 18040
derive the class Trans from the object base class .
0
example# 18041
define the method __getattr__ with 2 arguments : self and real_name .
0
example# 18042
from django.conf [ django . conf ] import settings .
0
example# 18043
if settings.USE_I18N [ settings . USE_I18N ] is true ,
0
example# 18044
from django.utils.translation [ django . utils . translation ] import trans_real as trans .
0
example# 18045
if not ,
0
example# 18046
from django.utils.translation [ django . utils . translation ] import trans_null as trans .
0
example# 18047
set real_name attribute of the self object to value of real_name attribute of trans object .
0
example# 18048
get attribute real_name from the trans object , return it .
0
example# 18049
_trans is an instance of Trans class .
0
example# 18050
delete Trans .
0
example# 18051
define the function gettext_noop with an argument message .
0
example# 18052
call the method _trans.gettext_noop [ _trans . gettext_noop ] with an argument message .
0
example# 18053
substitute gettext_noop for ugettext_noop .
0
example# 18054
define the function gettext_noop with an argument message .
0
example# 18055
call the method _trans.gettext [ _trans . gettext ] with an argument message .
0
example# 18056
define the function ngettext with 3 arguments : singular , plural and number .
0
example# 18057
call the method _trans.ngettext [ _trans . ngettext ] with 3 arguments singular , plural and number .
0
example# 18058
define the method ugettext with an argument message .
0
example# 18059
call the method _trans.gettext_noop [ _trans . gettext_noop ] with an argument message .
0
example# 18060
define the function ungettext with 3 arguments : singular , plural and number .
0
example# 18061
call the method _trans.ungettext [ _trans . ungettext ] with 3 arguments singular , plural and number .
0
example# 18062
define the function pgettext with 2 arguments : context and message .
0
example# 18063
call the method _trans.pgettext [ _trans . pgettext ] with 2 arguments context and message .
0
example# 18064
define the function npgettext with 4 arguments : context , singular , plural and number .
0
example# 18065
call the method _trans.npgettext [ _trans . npgettext ] with 4 arguments context , singular , plural and number .
0
example# 18066
call the function lazy with 2 arguments : gettext and str , substitute gettext_lazy .
0
example# 18067
call the function lazy with 2 arguments : ugettext and six.text_type [ six . text_type ] , substitute ugettext_lazy .
0
example# 18068
call the function lazy with 2 arguments : pgettext and six.text_type [ six . text_type ] , substitute pgettext_lazy .
0
example# 18069
define the function lazy_number with 4 arguments : func , resultclass , number set to None and unpacked dictionary kwargs .
0
example# 18070
if number is an instance of int type .
0
example# 18071
substitute number for value under the _STR:0_ key of the kwargs dictionary .
1
'number' ||| _STR:0_
example# 18072
call the function lazy with 2 arguments : func and resultclass , call the result with an argument , unpacked dictionary kwargs ,
0
example# 18073
substitute the result for proxy . if not ,
0
example# 18074
derive the class NumberAwareString from the resultclass base class .
0
example# 18075
define the method __mod__ with 2 arguments : self and rhs .
0
example# 18076
if rhs is an instance of dict type and number is true ,
0
example# 18077
try ,
0
example# 18078
substitute value under the number key of the rhs dictionary for number_value .
0
example# 18079
if KeyError exception is caught ,
0
example# 18080
raise an KeyError with an argument string _STR:0_
1
'Your dictionary lacks key \'%s\'. Please provide it, because it is required to ' ||| _STR:0_
example# 18081
_STR:0_ , where ' % s ' is replaced with number . if not ,
1
'determine whether string is singular or plural.' ||| _STR:0_
example# 18082
substitute rhs for number_value .
0
example# 18083
substitute number_value for kwargs dictionary value under the _STR:0_ key .
1
'number' ||| _STR:0_
example# 18084
call the function func with unpacked dictionary kwargs as an argument , substitute the result for translated .
0
example# 18085
try ,
0
example# 18086
format translated with rhs , substitute the result for translated .
0
example# 18087
if TypeError exception is caught ,
0
example# 18088
do nothing .
0
example# 18089
return translated .
0
example# 18090
call the function lazy with 2 arguments : lambda function with unpacked dictionary kwargs as an argument and return value an instance of NumberAwareString class and NumberAwareString , call the result with an argument unpacked dictionary kwargs , substitute the result for proxy .
0
example# 18091
return proxy .
0
example# 18092
define the function ngettext_lazy with 3 arguments : singular , plural and number set to None .
0
example# 18093
call the function lazy_number with 5 arguments : ngettext , str , singular set to singular , plural set to plural ,
0
example# 18094
and number set to number , return the result . define the function ungettext_lazy with 3 arguments : singular , plural and number set to None .
0
example# 18095
call the function lazy_number with 5 arguments : ungettext , six.text_type [ six . text_type ] , singular set to singular , plural set to plural ,
0
example# 18096
and number set to number , return the result . define the function npgettext_lazy with 4 arguments : context , singular , plural and number set to None .
0
example# 18097
call the function lazy_number with 6 arguments : npgettext , six.text_type [ six . text_type ] , context set to context , singular set to singular ,
0
example# 18098
plural set to plural and number set to number , return the result . define the function activate with an argument language .
0
example# 18099
call the function _trans.activate [ _trans . activate ] with an argument language , return the result .
0
example# 18100
define the function deactivate .
0
example# 18101
call the function _trans.deactivate [ _trans . deactivate ] , return the result .
0
example# 18102
derive the class override from the object base class .
0
example# 18103
define the method __init__ with 3 arguments : self , language and deactivate set to boolean False .
0
example# 18104
substitute language for self.language [ self . language ] .
0
example# 18105
substitute deactivate for self.deactivate [ self . deactivate ] .
0
example# 18106
call the function get_language , substitute the result for self.old_language [ self . old_language ] .
0
example# 18107
define the method __enter__ with an argument self .
0
example# 18108
if self.language [ self . language ] is not None ,
0
example# 18109
call the function activate with an argument self.language [ self . language ] .
0
example# 18110
if not ,
0
example# 18111
call the function deactivate_all .
0
example# 18112
define the method __exit__ with 4 arguments : self , exc_type , exc_value and traceback .
0
example# 18113
if self.deactivate [ self . deactivate ] is true ,
0
example# 18114
call the method deactivate .
0
example# 18115
if not ,
0
example# 18116
call the method activate with an argument self.old_language [ self . old_language ] .
0
example# 18117
define the function get_language .
0
example# 18118
call the function _trans.get_language [ _trans . get_language ] , return the result .
0
example# 18119
define the function get_language_bidi .
0
example# 18120
call the function _trans.get_language_bidi [ _trans . get_language_bidi ] , return the result .
0
example# 18121
define the function check_for_language with an argument lang_code .
0
example# 18122
call the function _trans.check_for_language [ _trans . check_for_language ] with an argument lang_code , return the result .
0
example# 18123
define the function to_locale with an argument language .
0
example# 18124
call the function _trans.to_locale [ _trans . to_locale ] with an argument language , return the result .
0
example# 18125
define the function get_language_from_request with 2 arguments : request and check_path set to boolean False .
0
example# 18126
call the function _trans.get_language_from_request [ _trans . get_language_from_request ] with 2 arguments : request and check_path , return the result .
0
example# 18127
define the function get_language_from_path with an argument path .
0
example# 18128
call the function _trans.get_language_from_path [ _trans . get_language_from_path ] with an argument path , return the result .
0
example# 18129
define the function templatize with 2 arguments : src and origin set to None .
0
example# 18130
call the function _trans.templatize [ _trans . templatize ] with 2 arguments : src and origin , return the result .
0
example# 18131
define the function deactivate_all .
0
example# 18132
call the function _trans.deactivate_all [ _trans . deactivate_all ] , return the result .
0
example# 18133
define the function _string_concat with an argument unpacked list strings .
0
example# 18134
for every s in strings , call the function force_text with an argument s , join the results in a string , return the result .
0
example# 18135
call the function lazy with 2 arguments : _string_concat and six.text_type [ six . text_type ] , substitute the result for string_concat .
0
example# 18136
define the function get_language_info with an argument lang_code .
0
example# 18137
from django.conf.locale [ django . conf . locale ] import LANG_INFO .
0
example# 18138
try ,
0
example# 18139
get the value under the lang_code key of the LANG_INFO dictionary , return it .
0
example# 18140
if KeyError exception is caught ,
0
example# 18141
if character _STR:0_ is not contained in lang_code ,
1
'-' ||| _STR:0_
example# 18142
raise an KeyError with an argument _STR:0_ , where ' % s ' is replaced with lang_code .
1
"Unknown language code %s." ||| _STR:0_
example# 18143
split lang_code by character _STR:0_ , substitute the first element of the result for generic_lang_code .
1
'-' ||| _STR:0_
example# 18144
try ,
0
example# 18145
get the LANG_INFO dictionary value under the generic_lang_code key , return the result .
0
example# 18146
if KeyError exception is caught ,
0
example# 18147
raise an KeyError with an argument string _STR:0_ , where ' % s ' is replaced with lang_code ,
1
"Unknown language code %s and %s." ||| _STR:0_
example# 18148
and generic_lang_code . call the function re.compile [ re . compile ] with an argument string _STR:0_ , substitute the result for trim_whitespace_re .
1
'\s*\n\s*' ||| _STR:0_
example# 18149
define the function trim_whitespace with an argument s .
0
example# 18150
call strip s of the surrounding whitespaces , substitute every occurrence of the whitespace in the trim_whitespace_re with previous result , return the result .
0
example# 18151
from django.conf [ django . conf ] import settings into default name space .
0
example# 18152
from django.utils.encoding [ django . utils . encoding ] import force_text into default name space .
0
example# 18153
from django.utils.safestring [ django . utils . safestring ] import mark_safe and SafeData into default name space .
0
example# 18154
define the function ngettext with 3 arguments : singular , plural and number .
0
example# 18155
if number equals integer 1 ,
0
example# 18156
return singular .
0
example# 18157
return plural .
0
example# 18158
substitute ngettext for ngettext_lazy .
0
example# 18159
define the function ungettext with 3 arguments : singular , plural and number .
0
example# 18160
call the function ngettext with 3 arguments : singular , plural and number , use the result as an argument for the call to the force_text ,
0
example# 18161
return the result . define the function pgettext with 2 arguments : context and message .
0
example# 18162
call the function ugettext with an argument message .
0
example# 18163
define the function ngettext with 4 arguments : context , singular , plural and number .
0
example# 18164
call the function ungettext with 3 arguments : singular , plural and number , return the result .
0
example# 18165
activate is a lambda function which returns None for any argument x .
0
example# 18166
deactivate and deactivate_all are lambda functions returning None .
0
example# 18167
get_language is a lambda function returning settings.LANGUAGE_CODE [ settings . LANGUAGE_CODE ] .
0
example# 18168
get_language_bidi is lambda function returning boolean True if settings.LANGUAGE_CODE [ settings . LANGUAGE_CODE ] is contained in settings.LANGUAGES_BIDI [ settings . LANGUAGES_BIDI ] .
0
example# 18169
check_for_language is lambda function that returns boolean True for every argument x .
0
example# 18170
define the function gettext with an argument message .
0
example# 18171
if message is an instance of SafeData .
0
example# 18172
call the function mark_safe with an argument message , return the result .
0
example# 18173
return message .
0
example# 18174
define the function ugettext with an argument message .
0
example# 18175
call the function gettext with an argument message , use the result as an argument for the call to the force_text function , return the result .
0
example# 18176
substitute gettext for gettext_noop , gettext_lazy and _ .
0
example# 18177
define the function to_locale with an argument language .
0
example# 18178
find position of _STR:0_ in the index of the language , substitute the result for p .
1
'-' ||| _STR:0_
example# 18179
if p is greater or equal to integer 0 ,
0
example# 18180
append _STR:0_ to string created from first p elements of languages converted to lowercase ,
1
'_' ||| _STR:0_
example# 18181
convert slice of language string from ( p+1 ) -th index to the end to uppercase , append it to the previous result , return the resulting string . if not ,
0
example# 18182
convert language to lowercase and return it .
0
example# 18183
define the function get_language_from_request with 2 arguments : request and check_path set to boolean False .
0
example# 18184
return settings.LANGUAGE_CODE [ settings . LANGUAGE_CODE ] .
0
example# 18185
define the function get_language_from_path with an argument request .
0
example# 18186
return None .
0
example# 18187
from __future__ import unicode_literals into default name space .
0
example# 18188
from collections import OrderedDict into default name space .
0
example# 18189
import module os .
0
example# 18190
import module re .
0
example# 18191
import module sys .
0
example# 18192
import module gettext as gettext_module .
0
example# 18193
from threading import local into default name space .
0
example# 18194
import module warnings .
0
example# 18195
from django.apps [ django . apps ] import apps into default name space .
0
example# 18196
from django.conf [ django . conf ] import settings into default name space .
0
example# 18197
from django.core.exceptions [ django . core . exceptions ] import AppRegistryNotReady into default name space .
0
example# 18198
from django.dispatch [ django . dispatch ] import receiver into default name space .
0
example# 18199
from django.test.signals [ django . test . signals ] import setting_changed into default name space .
0
example# 18200
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
0
example# 18201
from django.utils.encoding [ django . utils . encoding ] import force_text into default name space .
0
example# 18202
from django.utils._os [ django . utils . _os ] import upath into default name space .
0
example# 18203
from django.utils.safestring [ django . utils . safestring ] import mark_safe and SafeData into default name space .
0
example# 18204
from django.utils [ django . utils ] import six and lru_cache into default name space .
0
example# 18205
from django.utils.six [ django . utils . six ] import StringIO into default name space .
0
example# 18206
from django.utils.translation [ django . utils . translation ] import TranslatorCommentWarning , trim_whitespace and LANGUAGE_SESSION_KEY into default name space .
0
example# 18207
_translations is an empty dictionary .
0
example# 18208
call the function local , substitute the result for _active .
0
example# 18209
_default is None .
0
example# 18210
_supported is None .
0
example# 18211
CONTEXT_SEPARATOR is a string _STR:0_ .
1
"\x04" ||| _STR:0_
example# 18212
call the function re.compile [ re . compile ] with 2 arguments : raw string _STR:0_ ,
1
"([A-Za-z]{1,8}(?:-[A-Za-z0-9]{1,8})*|\*)(?:\s*;\s*q=(0(?:\.\d{,3})?|1(?:.0{,3})?))?(?:\s*,\s*|$)" ||| _STR:0_
example# 18213
and re.VERBOSE [ re . VERBOSE ] , substitute the result for accept_language_re . call the function re.compile [ re . compile ] with 2 arguments : raw string _STR:0_ and re.IGNORECASE [ re . IGNORECASE ] ,
1
'^[a-z]{1,8}(?:-[a-z0-9]{1,8})*$' ||| _STR:0_
example# 18214
substitute the result for language_code_re . call the function re.compile [ re . compile ] with an argument raw string _STR:0_ , substitute the result for language_code_prefix_re .
1
'^/([\w-]+)(/|$)' ||| _STR:0_
example# 18215
_BROWSERS_DEPRECATED_LOCALES is an dictionary with 2 initial entries : _STR:0_ for _STR:1_ and _STR:2_ for _STR:3_ .
4
'zh-tw' ||| _STR:3_
'zh-cn' ||| _STR:1_
'zh-hans' ||| _STR:0_
'zh-hant' ||| _STR:2_
example# 18216
substitute _BROWSERS_DEPRECATED_LOCALES for _DJANGO_DEPRECATED_LOCALES .
0
example# 18217
decorator function receiver with an argument setting_changed ,
0
example# 18218
define the function reset_cache with an argument unpacked dictionary kwargs .
0
example# 18219
if value under the _STR:0_ key of the kwargs dictionary is equal to string _STR:1_ or strnig _STR:2_ ,
3
'LANGUAGE_CODE' ||| _STR:2_
'LANGUAGES' ||| _STR:1_
'setting' ||| _STR:0_
example# 18220
use global variable _supported .
0
example# 18221
_supported is None .
0
example# 18222
call the method check_for_language.cache_clear [ check_for_language . cache_clear ] .
0
example# 18223
call the method get_supported_language_variant.cache_clear [ get_supported_language_variant . cache_clear ] .
0
example# 18224
define the function to_locale with 2 arguments language and to_lower set to boolean False .
0
example# 18225
find first index of occurrence of character _STR:0_ in language , substitute it for p .
1
'-' ||| _STR:0_
example# 18226
if p is greater or equal to integer 0 ,
0
example# 18227
if to_lower is true ,
0
example# 18228
convert fist p elements of language to lowercase , append _STR:0_ to it ,
1
'_' ||| _STR:0_
example# 18229
covert to lowercase language elements from ( p+1 ) -th index to the end , append it to the previous result , return it . if not ,
0
example# 18230
slice language from ( p+1 ) -th index to the end , calculate the length of the obtained segment , if it is greater than integer 2 ,
0
example# 18231
convert fist p elements of language to lowercase , append _STR:0_ to it ,
1
'_' ||| _STR:0_
example# 18232
covert to lowercase language element at ( p+1 ) -th index , append it to the previous result , covert to lowercase language elements from ( p+2 ) -th index to the end , append it to the previous result , return it . convert fist p elements of language to lowercase , append _STR:0_ to it ,
1
'_' ||| _STR:0_
example# 18233
covert to uppercase language elements from ( p+1 ) -th index to the end , append it to the previous result , return it . if not ,
0
example# 18234
convert language to lowercase , return it .
0
example# 18235
define the function to_language with an argument locale .
0
example# 18236
find first index of occurrence of character _STR:0_ in locale , substitute it for p .
1
'-' ||| _STR:0_
example# 18237
if p is greater or equal to integer 0 ,
0
example# 18238
convert fist p elements of locale to lowercase , append _STR:0_ to it ,
1
'_' ||| _STR:0_
example# 18239
covert to lowercase locale elements from ( p+1 ) -th index to the end , append it to the previous result , return it . if not ,
0
example# 18240
convert locale to lowercase and return it .
0
example# 18241
derive the class DjangoTranslation from gettext_module.GNUTranslations [ gettext_module . GNUTranslations ] base class .
0
example# 18242
define the method __init__ with 2 arguments : self and language .
0
example# 18243
call the method gettext_module.GNUTranslations.__init__ [ gettext_module . GNUTranslations . __init__ ] with an argument self .
0
example# 18244
substitute language for self.__language [ self . __language ] .
0
example# 18245
call the function to_language with an argument language , substitute it for self.__to_language [ self . __to_language ] .
0
example# 18246
call the function to_locale with an argument language , substitute it for self.__locale [ self . __locale ] .
0
example# 18247
self.plural [ self . plural ] is an lambda function with an argument n , which returns result of boolean expression n not equal to integer 1 ,
0
example# 18248
converted to an integer . call the method self._init_translation_catalog [ self . _init_translation_catalog ] .
0
example# 18249
call the method self._add_installed_apps_translations [ self . _add_installed_apps_translations ] .
0
example# 18250
call the method self._add_local_translations [ self . _add_local_translations ] .
0
example# 18251
call the method self._add_fallback [ self . _add_fallback ] .
0
example# 18252
define the method __repr__ with an argument self .
0
example# 18253
return a string _STR:0_ , where ' % s ' is replaced with self.__language [ self . __language ] .
1
"<DjangoTranslation lang:%s>" ||| _STR:0_
example# 18254
define the method _new_gnu_trans with 3 arguments : self , localedir and use_null_fallback set to boolean True .
0
example# 18255
call the method gettext_module.translation [ gettext_module . translation ] with 5 arguments : domain set to string _STR:0_ , localedir set to localedir ,
1
'django' ||| _STR:0_
example# 18256
languages set to a list with an element self.__locale [ self . __locale ] , codeset set to a string _STR:0_ and fallback set to use_null_fallback , substitute the result for translation . if translation has an attribute _STR:1_ ,
2
'_catalog' ||| _STR:1_
'utf-8' ||| _STR:0_
example# 18257
translation._catalog [ translation . _catalog ] is an empty dictionary .
0
example# 18258
translation._info [ translation . _info ] is an empty dictionary .
0
example# 18259
return translation .
0
example# 18260
define the method _init_translation_catalog with an argument self .
0
example# 18261
get the value under the settings.__module__ [ settings . __module__ ] key of the sys.modules [ sys . modules ] dictionary ,
0
example# 18262
use its __file__ field as an argument for the call to the function upath , substitute the result for settingsfile . call the function os.path.dirname [ os . path . dirname ] with an argument settingsfile , join the result an string _STR:0_ into a file path ,
1
'locale' ||| _STR:0_
example# 18263
substitute it for localedir . use_null_fallback is boolean True .
0
example# 18264
if self.__language [ self . __language ] equals settings.LANGUAGE_CODE [ settings . LANGUAGE_CODE ] ,
0
example# 18265
use_null_fallback is boolean False .
0
example# 18266
call the function self._new_gnu_trans [ self . _new_gnu_trans ] with 2 arguments : localedir and use_null_fallback , substitute the result for translation .
0
example# 18267
call the method translation._info.copy [ translation . _info . copy ] , substitute the result for self._info [ self . _info ] .
0
example# 18268
call the method translation._catalog.copy [ translation . _catalog . copy ] , substitute the result for self._catalog [ self . _catalog ] .
0
example# 18269
define the method _add_installed_apps_translations with an argument self .
0
example# 18270
try ,
0
example# 18271
call the method apps.get_app_configs [ apps . get_app_configs ] , convert the result in a list , reverse the order of elements , substitute the result for app_configs .
0
example# 18272
if AppRegistryNotReady exception is caught ,
0
example# 18273
rais an AppRegistryNotReady exception with an argument string _STR:0_
1
"The translation infrastructure cannot be initialized before the " ||| _STR:0_
example# 18274
_STR:0_ . for every app_config in app_configs ,
1
"apps registry is ready. Check that you don't make non-lazy gettext calls at import time." ||| _STR:0_
example# 18275
join app_config.path [ app_config . path ] and string _STR:0_ into a file path , substitute it for localedir .
1
'locale' ||| _STR:0_
example# 18276
call the method self._new_gnu_trans [ self . _new_gnu_trans ] with an argument localedir , substitute the result for translation .
0
example# 18277
call the method self.merge [ self . merge ] with an argument translation .
0
example# 18278
define the method _add_local_translations with an argument self .
0
example# 18279
reverse settings.LOCALE_PATHS [ settings . LOCALE_PATHS ] element order , for every localedir in the result ,
0
example# 18280
call the function self._new_gnu_trans [ self . _new_gnu_trans ] with an argument localedir , substitute the result for translation .
0
example# 18281
call the method self.merge [ self . merge ] with an argument translation .
0
example# 18282
define the method _add_fallback with an argument self .
0
example# 18283
if self.__language [ self . __language ] equals settings.LANGUAGE_CODE [ settings . LANGUAGE_CODE ] or self.__language [ self . __language ] equals a string _STR:0_ ,
1
"en-us" ||| _STR:0_
example# 18284
return .
0
example# 18285
call the function translation with an argument settings.LANGUAGE_CODE [ settings . LANGUAGE_CODE ] , substitute the result for default_translation .
0
example# 18286
call the method self.add_fallback [ self . add_fallback ] with an argument default_translation .
0
example# 18287
define the method merge with 2 arguments self and other .
0
example# 18288
update the self._catalog [ self . _catalog ] dictionary with other._catalog [ other . _catalog ] .
0
example# 18289
define the method language with an argument self .
0
example# 18290
return self.__language [ self . __language ] .
0
example# 18291
define the method to_language with an argument self .
0
example# 18292
return self.__to_language [ self . __to_language ] .
0
example# 18293
define the function translation with an argument language .
0
example# 18294
use global variable _translations .
0
example# 18295
if language is not contained in _translations ,
0
example# 18296
_translations dictionary value , under the language key is an instance of DjangoTranslation class , created with an argument language .
0
example# 18297
return _translations dictionary value , under the language key .
0
example# 18298
define the function activate with an argument language .
0
example# 18299
if language is contained in _DJANGO_DEPRECATED_LOCALES ,
0
example# 18300
msg is a string _STR:0_ .
1
"The use of the language code '%s' is deprecated. Please use the '%s' translation instead." ||| _STR:0_
example# 18301
call the method call the function warnings.warn [ warnings . warn ] with 3 arguments : msg formatted with language and value under the language key ,
0
example# 18302
of the _DJANGO_DEPRECATED_LOCALES dictionary , RemovedInDjango19Warning and stacklevel set to integer 2. call the function translation with an argument language , substitute the result for _active.value [ _active . value ] .
0
example# 18303
define the function deactivate .
0
example# 18304
if _active has an attribute _STR:0_ ,
1
"value" ||| _STR:0_
example# 18305
delete _active.value [ _active . value ] .
0
example# 18306
define the function deactivate_all .
0
example# 18307
call the method gettext_module.NullTranslations [ gettext_module . NullTranslations ] , substitute the result for _active.value [ _active . value ] .
0
example# 18308
define the function get_language .
0
example# 18309
get _STR:0_ attribute of the _active object , if it exists substitute it for t , if not t is None .
1
'value' ||| _STR:0_
example# 18310
if t is not None ,
0
example# 18311
try ,
0
example# 18312
call the method t.to_language [ t . to_language ] , return the result .
0
example# 18313
if AttributeError exception is caught ,
0
example# 18314
do nothing .
0
example# 18315
return settings.LANGUAGE_CODE [ settings . LANGUAGE_CODE ] .
0
example# 18316
define the function get_language_bidi .
0
example# 18317
call the function get_language , split the result by _STR:0_ , substitute the first element of the result for base_lang .
1
'-' ||| _STR:0_
example# 18318
if base_lang is contained in settings.LANGUAGES_BIDI [ settings . LANGUAGES_BIDI ] , return boolean True , if not , return boolean False .
0
example# 18319
define the function catalog .
0
example# 18320
use global variable _default .
0
example# 18321
get _STR:0_ attribute of the _active object , if it exists substitute it for t , if not t is None .
1
'value' ||| _STR:0_
example# 18322
if t is not None
0
example# 18323
return t .
0
example# 18324
if _default is None
0
example# 18325
call the function translation with an argument settings.LANGUAGE_CODE [ settings . LANGUAGE_CODE ] , substitute the result for _default .
0
example# 18326
return _default .
0
example# 18327
define the function do_translate with 2 arguments : message and translation_function .
0
example# 18328
use global variable _default .
0
example# 18329
replace every occurrence of string _STR:0_ in message with _STR:1_ , replace every occurrence of string _STR:2_ ,
3
'\r\n' ||| _STR:0_
'\r' ||| _STR:2_
'\n' ||| _STR:1_
example# 18330
in the previous result for with string _STR:0_ , substitute the result for eol_message . get _STR:1_ attribute of the _active object , if it exists substitute it for t , if not t is None .
2
'value' ||| _STR:1_
'\n' ||| _STR:0_
example# 18331
if t is not None ,
0
example# 18332
get translation_function attribute of the object t , call the result with an argument eol_message , substitute the result for result .
0
example# 18333
if not ,
0
example# 18334
if _default is None ,
0
example# 18335
call the function translation with an argument settings.LANGUAGE_CODE [ settings . LANGUAGE_CODE ] , substitute the result for _default .
0
example# 18336
get translation_function attribute of the object _default , call the result with an argument eol_message , substitute the result for result .
0
example# 18337
if message is an instance of SafeData ,
0
example# 18338
call the function mark_safe with an argument result , return it .
0
example# 18339
return result .
0
example# 18340
define the function gettext with an argument message .
0
example# 18341
call the function do_translate with 2 arguments : message and string _STR:0_ , return the result .
1
'gettext' ||| _STR:0_
example# 18342
if six.PY3 [ six . PY3 ] is true ,
0
example# 18343
substitute gettext for ugettext .
0
example# 18344
if not ,
0
example# 18345
define the function ugettext with an argument message .
0
example# 18346
call the function do_translate with 2 arguments : message and string _STR:0_ , return the result .
1
'ugettext' ||| _STR:0_
example# 18347
define the function pgettext with 2 arguments : context and message .
0
example# 18348
convert to strings and concatenate context , CONTEXT_SEPARATOR and message , substitute the result for msg_with_ctxt .
0
example# 18349
call the function ugettext with an argument msg_with_ctxt , substitute the result for result .
0
example# 18350
if CONTEXT_SEPARATOR is contained in result ,
0
example# 18351
call the function force_text with an argument message , return the result .
0
example# 18352
return result .
0
example# 18353
define the function locale with an argument locale .
0
example# 18354
return message .
0
example# 18355
define the function do_ntranslate with 4 arguments : singular , plural , number and translation_function .
0
example# 18356
use global variable _default .
0
example# 18357
get _STR:0_ attribute of the _active object , if it exists substitute it for t , if not t is None .
1
'value' ||| _STR:0_
example# 18358
if t is not None ,
0
example# 18359
get translation_function attribute of the t object , call the result with 3 arguments : singular , plural and number , return the result .
0
example# 18360
if _default is None ,
0
example# 18361
call the function translation with an argument settings.LANGUAGE_CODE [ settings . LANGUAGE_CODE ] , substitute the result for _default .
0
example# 18362
get translation_function attribute of the _default object , call the result with 3 arguments : singular , plural and number , return the result .
0
example# 18363
define the function ngettext with 3 arguments : singular , plural and number .
0
example# 18364
call the function do_ntranslate with 3 arguments : singular , plural , number and string _STR:0_ , return the result .
1
'ngettext' ||| _STR:0_
example# 18365
if six.PY3 [ six . PY3 ] is true ,
0
example# 18366
substitute ngettext for ungettext .
0
example# 18367
if not ,
0
example# 18368
define the function ungettext with 3 arguments : singular , plural and number .
0
example# 18369
call the function do_ntranslate with 3 arguments : singular , plural , number and string _STR:0_ , return the result .
1
'ngettext' ||| _STR:0_
example# 18370
define the function npgettext with 4 arguments : context , singular , plural and number .
0
example# 18371
msgs_with_ctxt is a tuple containing 2 elements : string created by concatenating context , CONTEXT_SEPARATOR and singular ,
0
example# 18372
string created by concatenating context , CONTEXT_SEPARATOR and plural and number . call the function ungettext with unpacked dictionary msgs_with_ctxt , substitute the result for result .
0
example# 18373
if CONTEXT_SEPARATOR is contained in result ,
0
example# 18374
call the function ungettext with 3 arguments : singular , plural and number , substitute the result for result .
0
example# 18375
return result .
0
example# 18376
define the function all_locale_paths .
0
example# 18377
get the value under the settings.__module__ [ settings . __module__ ] key of the sys.modules [ sys . modules ] dictionary , use its __file__ field as an argument ,
0
example# 18378
for the call to the function upath , get the directory name of the resulting system path , join the result and string _STR:0_ , into a valid file path , substitute it for globalpath . append settings.LOCALE_PATHS [ settings . LOCALE_PATHS ] converted into a list to a list containing an element globalpath , return it .
1
'locale' ||| _STR:0_
example# 18379
decorator function lru_cache.lru_cache [ lru_cache . lru_cache ] with an argument maxsize set to integer 1000 .
0
example# 18380
define the function check_for_language with an argument lang_code .
0
example# 18381
call the method language_code_re.search [ language_code_re . search ] with an argument lang_code , if it evaluates to false ,
0
example# 18382
return boolean False .
0
example# 18383
call the function all_locale_paths , for every path is the result ,
0
example# 18384
call the method gettext_module.find [ gettext_module . find ] with 3 arguments : string _STR:0_ , path and list with an element : result of the function ,
1
'django' ||| _STR:0_
example# 18385
to_locale called with an argument lang_code , if the result is not None , return boolean True .
0
example# 18386
return boolean False .
0
example# 18387
decorator function lru_cache.lru_cache [ lru_cache . lru_cache ] with an argument maxsize set to integer 1000 .
0
example# 18388
define the function get_supported_language_variant with 2 arguments : lang_code and strict set to boolean False .
0
example# 18389
use global variable _supported .
0
example# 18390
if _supported is None ,
0
example# 18391
_supported is an instance of OrderedDict class , created with an argument settings.LANGUAGES [ settings . LANGUAGES ] .
0
example# 18392
if lang_code is true ,
0
example# 18393
get the value under the lang_code key of the _BROWSERS_DEPRECATED_LOCALES dictionary , substitute it for replacement .
0
example# 18394
if lang_code is not contained in _supported and replacement is contained in _supported ,
0
example# 18395
return replacement .
0
example# 18396
split lang_code by _STR:0_ , substitute the first element of the result for generic_lang_code .
1
'-' ||| _STR:0_
example# 18397
for every code in tuple with 2 elements : lang_code and generic_lang_code ,
0
example# 18398
if code is contained in _supported and call to the function check_for_language with an argument code evaluates to true ,
0
example# 18399
return code .
0
example# 18400
if strict is false ,
0
example# 18401
for every supported_code in _supported ,
0
example# 18402
append _STR:0_ to generic_lang_code , if supported_code starts with it ,
1
'-' ||| _STR:0_
example# 18403
return supported_code .
0
example# 18404
raise an LookupError with an argument lang_code .
0
example# 18405
define the function get_language_from_path with 2 arguments : path and strict set to boolean False .
0
example# 18406
call the function language_code_prefix_re.match [ language_code_prefix_re . match ] with an argument path , substitute it for regex_match .
0
example# 18407
if regex_match is false ,
0
example# 18408
return None .
0
example# 18409
call the method regex_match.group [ regex_match . group ] with an argument integer 1 , substitute the result for lang_code .
0
example# 18410
try ,
0
example# 18411
call the function get_supported_language_variant with 2 arguments : lang_code and strict set to strict , return the result .
0
example# 18412
if LookupError exception is caught ,
0
example# 18413
return None .
0
example# 18414
define the function get_language_from_request with 2 arguments : request and check_path set to boolean False .
0
example# 18415
use global variable _supported .
0
example# 18416
if _supported is None ,
0
example# 18417
_supported is an instance of OrderedDict class , created with an argument settings.LANGUAGES [ settings . LANGUAGES ] .
0
example# 18418
if check_path is true ,
0
example# 18419
call the function get_language_from_path with an argument request.path_info [ request . path_info ] , substitute it for lang_code .
0
example# 18420
if lang_code is not None ,
0
example# 18421
return lang_code .
0
example# 18422
if request has an attribute _STR:0_ ,
1
'session' ||| _STR:0_
example# 18423
get the value under the LANGUAGE_SESSION_KEY key of the request.session [ request . session ] dictionary , substitute it for lang_code .
0
example# 18424
if lang_code is contained in _supported and lang_code is not None and result of the function check_for_language ,
0
example# 18425
called with an argument lang_code is true , return lang_code .
0
example# 18426
get the value under the settings.LANGUAGE_COOKIE_NAME [ settings . LANGUAGE_COOKIE_NAME ] key of the request.COOKIES [ request . COOKIES ] dictionary , substitute it for lang_code .
0
example# 18427
try ,
0
example# 18428
call the function get_supported_language_variant with an argument lang_code , return the result .
0
example# 18429
if LookupError exception is caught ,
0
example# 18430
do nothing .
0
example# 18431
get the value under the _STR:0_ key of the request.META [ request . META ] dictionary , if it exists substitute it for accept ,
1
'HTTP_ACCEPT_LANGUAGE' ||| _STR:0_
example# 18432
if not accept is an empty string . call the function parse_accept_lang_header with an argument accept , for every accept_lang and unused in the result ,
0
example# 18433
if accept_lang equals _STR:0_ ,
1
'*' ||| _STR:0_
example# 18434
break from the loop execution .
0
example# 18435
call the method language_code_re.search [ language_code_re . search ] with an argument accept_lang , if it evaluates to false ,
0
example# 18436
skip this loop iteration .
0
example# 18437
try ,
0
example# 18438
call the function get_supported_language_variant with an argument accept_lang , return the result .
0
example# 18439
if LookupError exception is caught ,
0
example# 18440
skip this loop iteration .
0
example# 18441
try ,
0
example# 18442
call the function get_supported_language_variant with an argument settings.LANGUAGE_CODE [ settings . LANGUAGE_CODE ] , return the result .
0
example# 18443
if LookupError exception is caught ,
0
example# 18444
return settings.LANGUAGE_CODE [ settings . LANGUAGE_CODE ] .
0
example# 18445
call the function re.compile [ re . compile ] with an argument raw string _STR:0_ , substitute it for dot_re .
1
'\S' ||| _STR:0_
example# 18446
define the function blankout with 2 arguments : src and char .
0
example# 18447
call the method dot_re.sub [ dot_re . sub ] with 2 arguments : char and src , return the result .
0
example# 18451
substitute the result for block_re . call the function re.compile [ re . compile ] with an argument raw string _STR:0_ , substitute the result for endblock_re .
1
"^\s*endblocktrans$" ||| _STR:0_
example# 18452
call the function re.compile [ re . compile ] with an argument raw string _STR:0_ , substitute the result for plural_re .
1
"^\s*plural$" ||| _STR:0_
example# 18454
call the function re.compile [ re . compile ] with an argument raw string _STR:0_ , substitute the result for one_percent_re .
1
"(?<!%)%(?!%)" ||| _STR:0_
example# 18455
define the function templatize with 2 arguments : src and origin set to None .
0
example# 18456
from django.template [ django . template ] import Lexer , TOKEN_TEXT , TOKEN_VAR , TOKEN_BLOCK , TOKEN_COMMENT and TRANSLATOR_COMMENT_MARK .
0
example# 18457
call the function force_text with 2 arguments : src and settings.FILE_CHARSET [ settings . FILE_CHARSET ] .
0
example# 18458
out is an instance of StringIO class , created with an empty string as an argument .
0
example# 18459
message_context is None .
0
example# 18460
intrans is boolean False .
0
example# 18461
inplural is boolean False .
0
example# 18462
trimmed is boolean False .
0
example# 18463
singular is an empty list .
0
example# 18464
plural is an empty list .
0
example# 18465
incomment is boolean False .
0
example# 18466
comment is an empty list .
0
example# 18467
lineno_comment_map is an dictionary .
0
example# 18468
comment_lineno_cache is None .
0
example# 18469
define the function join_tokens with 2 arguments : tokens and trim set to boolean False .
0
example# 18470
join tokens elements into a string , substitute it for message .
0
example# 18471
if trim is true ,
0
example# 18472
call the function trim_whitespace with an argument message , substitute the result for message .
0
example# 18473
return message .
0
example# 18474
instantiate Lexer class with 2 argumets src and origin , call the method tokenize from it , for every t in the result ,
0
example# 18475
if incomment is true ,
0
example# 18476
if t.token_type [ t . token_type ] equals TOKEN_BLOCK and t.contents [ t . contents ] equals _STR:0_ ,
1
'endcomment' ||| _STR:0_
example# 18477
join comment elements into a string , substitute it for content .
0
example# 18478
translators_comment_start is None .
0
example# 18479
for every lineno and line is enumerated result of the method content.splitlines [ content . splitlines ] , called with an argument boolean True ,
0
example# 18480
call the method line.lstrip [ line . lstrip ] , if the result starts with TRANSLATOR_COMMENT_MARK ,
0
example# 18481
substitute lineno for translators_comment_start .
0
example# 18482
for every lineno and line is enumerated result of the method content.splitlines [ content . splitlines ] , called with an argument boolean True ,
0
example# 18483
if translators_comment_start is not None and lineno is greater than or equal to translators_comment_start ,
0
example# 18484
substitute ' % s ' in string _STR:0_ with line , write it to out file .
1
' # %s' ||| _STR:0_
example# 18485
if not ,
0
example# 18486
write string _STR:0_ to out file .
1
' #\n' ||| _STR:0_
example# 18487
incomment is boolean False .
0
example# 18488
comment is an empty list .
0
example# 18489
if not ,
0
example# 18490
append t.contents [ t . contents ] to comment .
0
example# 18491
otherwise if intrans is true ,
0
example# 18492
if t.token_type [ t . token_type ] equals TOKEN_BLOCK ,
0
example# 18493
call the function endblock_re.match [ endblock_re . match ] with an argument t.contents [ t . contents ] , substitute the result for endbmatch .
0
example# 18494
call the function plural_re.match [ plural_re . match ] with an argument t.contents [ t . contents ] , substitute the result for pluralmatch .
0
example# 18495
if endbmatch is true ,
0
example# 18496
if inplural is true ,
0
example# 18497
if message_context is true ,
0
example# 18498
substitute _STR:0_ in string _STR:1_ with message_context , result of the function join_tokens ,
2
' npgettext(%r, %r, %r,count) ' ||| _STR:1_
'%r' ||| _STR:0_
example# 18499
called with 2 arguments : singular and trimmed and result of the function join_tokens called with 2 arguments : plural and trimmed , write the result to out . if not ,
0
example# 18500
substitute _STR:0_ in string _STR:1_ with result of the function join_tokens , called with 2 arguments : singular ,
2
' ngettext(%r, %r, count) ' ||| _STR:1_
'%r' ||| _STR:0_
example# 18501
and trimmed and result of the function join_tokens called with 2 arguments : plural and trimmed , write the result to out . for every part in singular ,
0
example# 18502
call the method blankout with 2 arguments : part and _STR:0_ , write the result to out .
1
'S' ||| _STR:0_
example# 18503
for every part in plural ,
0
example# 18504
call the method blankout with 2 arguments : part and _STR:0_ , write the result to out .
1
'P' ||| _STR:0_
example# 18505
if not ,
0
example# 18506
if message_context is true ,
0
example# 18507
substitute _STR:0_ in string _STR:1_ with message_context and result of the function join_tokens ,
2
' pgettext(%r, %r) ' ||| _STR:1_
'%r' ||| _STR:0_
example# 18508
called with 2 arguments : singular and trimmed , write the result to out . if not ,
0
example# 18509
substitute _STR:0_ in string _STR:1_ with result of the function join_tokens , called with 2 arguments : singular ,
2
' gettext(%r) ' ||| _STR:1_
'%r' ||| _STR:0_
example# 18510
and trimmed , write the result to out . for every part in singular ,
0
example# 18511
call the method blankout with 2 arguments : part and _STR:0_ , write the result to out .
1
'S' ||| _STR:0_
example# 18512
message_context is None .
0
example# 18513
intrans is boolean False .
0
example# 18514
inplural is boolean False .
0
example# 18515
singular is an empty list .
0
example# 18516
plural is an empty list .
0
example# 18517
otherwise if pluralmatch is true ,
0
example# 18518
inplural is boolean True .
0
example# 18519
if not ,
0
example# 18520
filemsg is an empty string .
0
example# 18521
if origin is true ,
0
example# 18522
filemsg is a string _STR:0_ , where ' % s ' is replaced with origin .
1
'file %s, ' ||| _STR:0_
example# 18523
raise an SyntaxError with an argument string _STR:0_ ,
1
"Translation blocks must not include other block tags: %s (%sline %d)" ||| _STR:0_
example# 18524
formated with t.contents [ t . contents ] , filemsg and t.lineno [ t . lineno ] . otherwise if t.token_type [ t . token_type ] equals TOKEN_VAR ,
0
example# 18525
if inplural is true ,
0
example# 18526
append string _STR:0_ to plural , where ' % s ' is replaced with t.contents [ t . contents ] .
1
'%%(%s)s' ||| _STR:0_
example# 18527
if not ,
0
example# 18528
append string _STR:0_ to singular , where ' % s ' is replaced with t.contents [ t . contents ] .
1
'%%(%s)s' ||| _STR:0_
example# 18529
if t.token_type [ t . token_type ] == TOKEN_TEXT :
0
example# 18530
call the method one_percent_re.sub [ one_percent_re . sub ] with 2 arguments : string _STR:0_ and t.contents [ t . contents ] , substitute the result for contents .
1
'%%' ||| _STR:0_
example# 18531
if inplural is true ,
0
example# 18532
append contents to plural .
0
example# 18533
if not ,
0
example# 18534
append contents to singular .
0
example# 18535
if not ,
0
example# 18536
if comment_lineno_cache is not None ,
0
example# 18537
count occurrences of _STR:0_ in t.contents [ t . contents ] , add the result to t.lineno [ t . lineno ] , substitute the result for cur_lineno .
1
'\n' ||| _STR:0_
example# 18538
if comment_lineno_cache equals cur_lineno .
0
example# 18539
if t.token_type [ t . token_type ] is not equal to TOKEN_COMMENT ,
0
example# 18540
for every c in lineno_comment_map dictionary value under the comment_lineno_cache key ,
0
example# 18541
filemsg is an empty string .
0
example# 18542
if origin is true ,
0
example# 18543
filemsg is a string _STR:0_ , where ' % s ' is replaced with origin .
1
'file %s, ' ||| _STR:0_
example# 18544
warn_msg is a string _STR:0_ ,
1
"The translator-targeted comment '%s' (%sline %d) was ignored, because it wasn't the last item on the line." ||| _STR:0_
example# 18545
formated with c , filemsg and comment_lineno_cache . call the function warnings.warn [ warnings . warn ] with 2 arguments : warn_msg and TranslatorCommentWarning .
0
example# 18546
value under the comment_lineno_cache key of the lineno_comment_map dictionary is an empty string .
0
example# 18547
if not ,
0
example# 18548
join lineno_comment_map dictionary value under the comment_lineno_cache key into a string , separated with _STR:0_ ,
1
' | ' ||| _STR:0_
example# 18549
format with it a string _STR:0_ , write it to out . comment_lineno_cache is None ,
1
'# %s' ||| _STR:0_
example# 18550
if t.token_type [ t . token_type ] equals TOKEN_BLOCK ,
0
example# 18551
call the function inline_re.match [ inline_re . match ] with an argument t.contents [ t . contents ] , substitute the result for imatch .
0
example# 18552
call the function block_re.match [ block_re . match ] with an argument t.contents [ t . contents ] , substitute the result for bmatch .
0
example# 18553
call the function constant_re.findall [ constant_re . findall ] with an argument t.contents [ t . contents ] , substitute the result for cmatches .
0
example# 18554
if imatch is true ,
0
example# 18555
call the method imatch.group [ imatch . group ] with an argument integer 1 , substitute the result for g .
0
example# 18556
if first element of g equals a string _STR:0_ ,
1
'"' ||| _STR:0_
example# 18557
strip g of _STR:0_ from both ends ,
1
'"' ||| _STR:0_
example# 18558
otherwise if first element of g equals a string _STR:0_ ,
1
"'" ||| _STR:0_
example# 18559
strip g of _STR:0_ from both ends ,
1
"'" ||| _STR:0_
example# 18560
call the method one_percent_re.sub [ one_percent_re . sub ] with 2 arguments : string _STR:0_ and g , substitute the result for .
1
'%%' ||| _STR:0_
example# 18561
call the method imatch.group [ imatch . group ] with an argument integer 1 , if it evaluates to true ,
0
example# 18562
call the method imatch.group [ imatch . group ] with an argument integer 2 , use the result as an argument for the call to the method context_re.match [ context_re . match ] ,
0
example# 18563
substitute the result for context_match . call the method context_match.group [ context_match . group ] with an argument integer 1 , substitute the result for message_context .
0
example# 18564
if first element of message_context equals to character _STR:0_ ,
1
'"' ||| _STR:0_
example# 18565
strip message_context of _STR:0_ characters from both ends , substitute the result for message_context .
1
'"' ||| _STR:0_
example# 18566
otherwise if , first element of message_context is equal to _STR:0_ ,
1
"'" ||| _STR:0_
example# 18567
strip message_context of _STR:0_ characters from both ends , substitute the result for message_context .
1
"'" ||| _STR:0_
example# 18568
format string _STR:0_ with message_context and g , write it to out .
1
' pgettext(%r, %r) ' ||| _STR:0_
example# 18569
message_context is None .
0
example# 18570
if not ,
0
example# 18571
format string _STR:0_ with g , write it to out .
1
' gettext(%r) ' ||| _STR:0_
example# 18572
otherwise if bmatch is true ,
0
example# 18573
call the method constant_re.findall [ constant_re . findall ] with an argument t.contents [ t . contents ] , for every fmatch in the result ,
0
example# 18574
format string _STR:0_ , with fmatch , write it to out .
1
' _(%s) ' ||| _STR:0_
example# 18575
call the method bmatch.group [ bmatch . group ] with an argument integer 1 , if it evaluates to true ,
0
example# 18576
call the method bmatch.group [ bmatch . group ] with an argument integer 1 , use the result as an argument for the call to the function context_re.match [ context_re . match ] ,
0
example# 18577
substitute the result for context_match . call the method context_match.group [ context_match . group ] with an argument integer 1 , substitute the result for message_context .
0
example# 18578
if first element of message_context equals to character _STR:0_ ,
1
'"' ||| _STR:0_
example# 18579
strip message_context of _STR:0_ characters from both ends , substitute the result for message_context .
1
'"' ||| _STR:0_
example# 18580
otherwise if first element of message_context equals to character _STR:0_ ,
1
"'" ||| _STR:0_
example# 18581
strip message_context of _STR:0_ characters from both ends , substitute the result for message_context .
1
"'" ||| _STR:0_
example# 18582
intrans is boolean True .
0
example# 18583
inplural is boolean False .
0
example# 18584
if string _STR:0_ is contained in result of the method t.split_contents [ t . split_contents ] , trimmed is boolean True , otherwise is boolean False .
1
'trimmed' ||| _STR:0_
example# 18585
singular is an empty list .
0
example# 18586
plural is an empty list .
0
example# 18587
otherwise if cmatches is true ,
0
example# 18588
for every cmatch in cmatches ,
0
example# 18589
format string _STR:0_ , with fmatch , write it to out .
1
' _(%s) ' ||| _STR:0_
example# 18590
otherwise if t.contents [ t . contents ] equals a string _STR:0_ ,
1
'comment' ||| _STR:0_
example# 18591
incomment is boolean True .
0
example# 18592
if not ,
0
example# 18593
call the function blankout with 2 arguments : t.contents [ t . contents ] and _STR:0_ , write the result to out .
1
'B' ||| _STR:0_
example# 18594
otherwise if t.token_type [ t . token_type ] equals TOKEN_VAR ,
0
example# 18595
split t.contents [ t . contents ] by _STR:0_ symbol , substitute the result for parts ,
1
'|' ||| _STR:0_
example# 18596
call the method constant_re.match [ constant_re . match ] with first element of parts as an argument , substitute the result for cmatch .
0
example# 18597
if cmatch is true ,
0
example# 18598
call the method cmatch.group [ cmatch . group ] with an argument integer 1 , format with the result string _STR:0_ , write it to out .
1
' _(%s) ' ||| _STR:0_
example# 18599
for every p in parts without the first element ,
0
example# 18600
find index of the occurrence of string _STR:0_ in p , if its greater or equal to integer 0 ,
1
':_(' ||| _STR:0_
example# 18601
split p into two parts at the first _STR:0_ , use the second element of the result to format string _STR:1_ , write it to out .
2
':' ||| _STR:0_
' _(%s) ' ||| _STR:1_
example# 18602
if not ,
0
example# 18603
call the function blankout with 2 arguments : p and _STR:0_ , write the result to out .
1
'F' ||| _STR:0_
example# 18604
otherwise if t.token_type [ t . token_type ] equals TOKEN_COMMENT ,
0
example# 18605
strip t.contents [ t . contents ] from the left side of whitespaces , if the result starts with TRANSLATOR_COMMENT_MARK ,
0
example# 18606
call the method lineno_comment_map.setdefault [ lineno_comment_map . setdefault ] with 2 arguments : t.lineno [ t . lineno ] and an empty list , append t.contents [ t . contents ] to the result .
0
example# 18607
substitute t.lineno [ t . lineno ] for comment_lineno_cache .
0
example# 18608
if not ,
0
example# 18609
call the function blankout with 2 arguments : t.contents [ t . contents ] and _STR:0_ , write the result to out .
1
'X' ||| _STR:0_
example# 18610
call the method out.getvalue [ out . getvalue ] , return the result .
0
example# 18611
define the function parse_accept_lang_header with an argument lang_string .
0
example# 18612
result is an empty list .
0
example# 18613
convert lang_string to lowercase , split by the result string accept_language_re , substitute the result for pieces .
0
example# 18614
if last element of pieces is true ,
0
example# 18615
return an empty list .
0
example# 18616
for every i in range of integers from integer 0 to the length of pieces decremented by one , with step of integer 3 ,
0
example# 18617
substitute 3 successive elements starting from the i-th index of pieces for first , lang and priority , respectively .
0
example# 18618
if first is true ,
0
example# 18619
return an empty list .
0
example# 18620
if priority is true ,
0
example# 18621
try ,
0
example# 18622
convert priority into a floating point integer , substitute it for priority .
0
example# 18623
if ValueError exception is caught ,
0
example# 18624
return an empty list .
0
example# 18625
if priority is false ,
0
example# 18626
priority is floating point number 1.0 [ 1 . 0 ] .
0
example# 18627
append a tuple with 2 entries lang and priority to result .
0
example# 18628
sort result in reversed order by the key as lambda function with an argument k and reeturn value second element of k .
0
example# 18629
return result .
0
example# 18630
import module copy .
0
example# 18631
derive the class Node from object base class .
0
example# 18632
default is a string _STR:0_ .
1
'DEFAULT' ||| _STR:0_
example# 18633
define the method __init__ with 4 arguments : self , children set to None , connector set to None and negated set to boolean False .
0
example# 18634
if children is true , copy children list to self.children [ self . children ] , otherwise self.children [ self . children ] is an empty list .
0
example# 18635
if connector is true , substitute it for self.connector [ self . connector ] , otherwise substitute self.default [ self . default ] for self.connector [ self . connector ] .
0
example# 18636
substitute negated for self.negated [ self . negated ] .
0
example# 18637
decorator classmethod ,
0
example# 18638
define the method _new_instance with 4 arguments : ( cls , children set to None , connector set to None and negated set to boolean False .
0
example# 18639
obj is an instance of Node class , created with 3 arguments : children , connector and negated .
0
example# 18640
substitute cls for obj.__class__ [ obj . __class__ ] .
0
example# 18641
return obj .
0
example# 18642
define the method __str__ with an argument self .
0
example# 18643
if self.negated [ self . negated ] ,
0
example# 18644
return string _STR:0_ , formated with self.connector [ self . connector ] and string created by joining c into a string , separated by _STR:1_ ,
2
', ' ||| _STR:1_
'(NOT (%s: %s))' ||| _STR:0_
example# 18645
for every c in self.children [ self . children ] . return string _STR:0_ , formated with self.connector [ self . connector ] and string created by joining c into a string , separated by _STR:1_ ,
2
', ' ||| _STR:1_
'(%s: %s)' ||| _STR:0_
example# 18646
for every c in self.children [ self . children ] . define the method __repr__ with an argument self .
0
example# 18647
return string _STR:0_ , formated with self.__class__.__name__ [ self . __class__ . __name__ ] and self .
1
"<%s: %s>" ||| _STR:0_
example# 18648
define the method __deepcopy__ with 2 arguments : self and memodict .
0
example# 18649
obj is an instance of Node class , created with 2 arguments : connector set to self.connector [ self . connector ] and negated set to self.negated [ self . negated ] .
0
example# 18650
substitute self.__class__ [ self . __class__ ] for obj.__class__ [ obj . __class__ ] .
0
example# 18651
call the function copy.deepcopy [ copy . deepcopy ] with 2 arguments : self.children [ self . children ] and memodict , substitute the result for obj.children [ obj . children ] .
0
example# 18652
return obj .
0
example# 18653
define the method __len__ with an argument self .
0
example# 18654
return the length of self.children [ self . children ] .
0
example# 18655
define the method __bool__ with an argument self .
0
example# 18656
convert self.children [ self . children ] into an boolean , return it .
0
example# 18657
define the method __nonzero__ with an argument self .
0
example# 18658
get the type of the self object , on the result call the __bool__ method with an argument self , return the result .
0
example# 18659
define the method __contains__ with 2 arguments : self and other .
0
example# 18660
if other is contained in self.children [ self . children ] , return boolean True , otherwise return boolean False .
0
example# 18661
define the method _prepare_data with 2 arguments : self and data .
0
example# 18662
return data .
0
example# 18663
define the method add with 4 arguments : self , data , conn_type and squash set to boolean True .
0
example# 18664
if data is contained in self.children [ self . children ] ,
0
example# 18665
return data .
0
example# 18666
call the method self._prepare_data [ self . _prepare_data ] with an argument data , substitute the result for data .
0
example# 18667
if squash is false ,
0
example# 18668
append data to self.children [ self . children ] .
0
example# 18669
return data .
0
example# 18670
if self.connector [ self . connector ] equals conn_type ,
0
example# 18671
if data is instance of Node and data.negated [ data . negated ] is false , and if data.connector [ data . connector ] equals conn_type or length of data equals integer 1 ,
0
example# 18672
extend self.children [ self . children ] list with data.children [ data . children ] .
0
example# 18673
return self .
0
example# 18674
if not ,
0
example# 18675
append data to self.children [ self . children ] .
0
example# 18676
return data .
0
example# 18677
if not ,
0
example# 18678
call the method self._new_instance [ self . _new_instance ] with 3 arguments : self.children [ self . children ] , self.connector [ self . connector ] and self.negated [ self . negated ] , substitute the result for obj .
0
example# 18679
substitute conn_type for self.connector [ self . connector ] .
0
example# 18680
self.children [ self . children ] is an list with 2 elements : obj and data .
0
example# 18681
return data .
0
example# 18682
define the method negate with an argument self .
0
example# 18683
invert self.negated [ self . negated ] .
0
example# 18684
from __future__ import unicode_literals into default name space .
0
example# 18685
from datetime import timedelta and tzinfo into default name space .
0
example# 18686
import module time .
0
example# 18687
import module warnings .
0
example# 18688
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
0
example# 18689
from django.utils.encoding [ django . utils . encoding ] import force_str , force_text and DEFAULT_LOCALE_ENCODING into default name space .
0
example# 18690
call the function warnings.warn [ warnings . warn ] with 3 arguments : string _STR:0_
1
"django.utils.tzinfo will be removed in Django 1.9. " ||| _STR:0_
example# 18691
_STR:0_ , RemovedInDjango19Warning and stacklevel set to 2. derive the class FixedOffset from the tzinfo base class .
1
"Use django.utils.timezone instead." ||| _STR:0_
example# 18692
define the method __init__ with 2 arguments : self and offset .
0
example# 18693
call the function warnings.warn [ warnings . warn ] with 2 arguments : _STR:0_
1
"django.utils.tzinfo.FixedOffset will be removed in Django 1.9. " ||| _STR:0_
example# 18694
_STR:0_ and RemovedInDjango19Warning . if offset is an instance of timedelta class ,
1
"Use django.utils.timezone.get_fixed_timezone instead." ||| _STR:0_
example# 18695
substitute offset for self.__offset [ self . __offset ] .
0
example# 18696
substitute self.__offset.seconds [ self . __offset . seconds ] for offset .
0
example# 18697
if not ,
0
example# 18698
call the function timedelta with an argument minutes set to offset , substitute the result for self.__offset [ self . __offset ] .
0
example# 18699
if offset is lesser than integer 0 , sign is set to _STR:0_ , otherwise sign is _STR:1_ ,
2
'-' ||| _STR:0_
'+' ||| _STR:1_
example# 18700
self.__name [ self . __name ] is a string _STR:0_ , replace ' % s ' with sign , _STR:1_ is replaced with absolute value of offset divided by 60 ,
2
"%s%02d%02d" ||| _STR:0_
'%02d' ||| _STR:1_
example# 18701
and placed into 2 character spaces , and _STR:0_ is replaced with reminder of the division of absolute offset by integer 60 , and placed into 2 character spaces . define the method __repr__ with an argument self .
1
'%02d' ||| _STR:0_
example# 18702
return self.__name [ self . __name ] .
0
example# 18703
define the method __getinitargs__ with an argument self .
0
example# 18704
return a tuple with an element self.__offset [ self . __offset ] .
0
example# 18705
define the method utcoffset with 2 arguments self and dt .
0
example# 18706
return self.__offset [ self . __offset ] .
0
example# 18707
define the method tzname with 2 arguments self and dt .
0
example# 18708
return self.__name [ self . __name ] .
0
example# 18709
define the method dst with 2 arguments self and dt .
0
example# 18710
call the function timedelta with an argument integer 0 , return the result .
0
example# 18711
derive the class LocalTimezone from the tzinfo base class .
0
example# 18712
define the method __init__ with 2 arguments self and dt .
0
example# 18713
call the function warnings.warn [ warnings . warn ] with 2 arguments : string _STR:0_
1
"django.utils.tzinfo.LocalTimezone will be removed in Django 1.9. " ||| _STR:0_
example# 18714
_STR:0_ and RemovedInDjango19Warning . call the method tzinfo.__init__ [ tzinfo . __init__ ] with an argument self .
1
"Use django.utils.timezone.get_default_timezone instead." ||| _STR:0_
example# 18715
substitute dt for self.__dt [ self . __dt ] .
0
example# 18716
call the method self.tzname [ self . tzname ] with an argument dt , substitute the result for self._tzname [ self . _tzname ] .
0
example# 18717
define the method __repr__ with an argument self .
0
example# 18718
call the function force_str with an argument self._tzname [ self . _tzname ] , return the result .
0
example# 18719
define the method __getinitargs__ with an argument self .
0
example# 18720
return a tuple with an element self.__dt [ self . __dt ] .
0
example# 18721
define the method utcoffset with 2 arguments self and dt .
0
example# 18722
call the nethod self._isdst [ self . _isdst ] with an argument dt , if it evaluates to true ,
0
example# 18723
call the function timedelta with an argument seconds as negative time.altzone [ time . altzone ] , return the result .
0
example# 18724
if not ,
0
example# 18725
call the function timedelta with an argument seconds as negative time.timezone [ time . timezone ] , return the result .
0
example# 18726
define the method dst with 2 arguments self and dt .
0
example# 18727
call the nethod self._isdst [ self . _isdst ] with an argument dt , if it evaluates to true ,
0
example# 18728
call the function timedelta with an argument seconds as negative time.timezone [ time . timezone ] , subtract the result from the result of the call ,
0
example# 18729
to the function timedelta called with an argument seconds as negative time.altzone [ time . altzone ] , return the result . if not ,
0
example# 18730
call the function timedelta with an argument integer 0 , return the result .
0
example# 18731
define the method tzname with 2 arguments self and dt .
0
example# 18732
if dt is None is_dst is boolean False , otherwise call the method self._isdst [ self . _isdst ] with an argument dt , substitute the result for is_dst .
0
example# 18733
try ,
0
example# 18734
call the function force_text with 2 arguments : value under the is_dst key of the time.tzname [ time . tzname ] and DEFAULT_LOCALE_ENCODING ,
0
example# 18735
return the result . if UnicodeDecodeError exception is caught ,
0
example# 18736
return None .
0
example# 18737
define the method _isdst with 2 arguments self and dt .
0
example# 18738
tt is an tuple with 9 elements : dt.year [ dt . year ] , dt.month [ dt . month ] , dt.day [ dt . day ] , dt.hour [ dt . hour ] , dt.minute [ dt . minute ] , dt.second [ dt . second ] , result of the function dt.weekday [ dt . weekday ] ,
0
example# 18739
integer 0 and integer 0. try ,
0
example# 18740
call the method time.mktime [ time . mktime ] with an argument tt , substitute the result for stamp .
0
example# 18741
if OverflowError or ValueError exceptions are caught ,
0
example# 18742
create a tuple out a tuple with an element integer 2037 and a list tt elements without the first element , substitute the result for tt .
0
example# 18743
call the method time.mktime [ time . mktime ] with an argument tt , substitute the result for stamp .
0
example# 18744
call the method time.localtime [ time . localtime ] with an argument stamp , substitute the result for tt .
0
example# 18745
if tt.tm_isdst [ tt . tm_isdst ] is greater than intger 0 , return boolean True , otherwise return boolean False .
0
example# 18746
from __future__ import absolute_import into default name space .
0
example# 18747
import module warnings .
0
example# 18748
from django.utils.deprecation [ django . utils . deprecation ] import RemovedInDjango19Warning into default name space .
0
example# 18749
call the function warnings.warn [ warnings . warn ] with 3 arguments : string _STR:0_ ,
1
"django.utils.unittest will be removed in Django 1.9." ||| _STR:0_
example# 18750
RemovedInDjango19Warning and stacklevel as integer 2. try ,
0
example# 18751
from unittest2 import everything .
0
example# 18752
if ImportError exception is caught ,
0
example# 18753
from unittest import import everything .
0
example# 18754
from __future__ import unicode_literals into default name space .
0
example# 18755
import module datetime .
0
example# 18756
import module os .
0
example# 18757
import module subprocess .
0
example# 18758
define the function get_version with version set to None as argument .
0
example# 18759
call the get_complete_version function with version as argument , store the result in version .
0
example# 18760
call the get_major_version wit version as argument , store the result in major .
0
example# 18761
sub is an empty string .
0
example# 18762
if fourth element of version equals to string _STR:0_ and fight element of version equals to integer 0 ,
1
'alpha' ||| _STR:0_
example# 18763
call the function get_git_changeset , store the result in git_changeset .
0
example# 18764
if git_changeset is true ,
0
example# 18765
convert git_changeset to string , append it to the string _STR:0_ , replace it for sub .
1
'.dev' ||| _STR:0_
example# 18766
otherwise if fourth element of version does not equals to _STR:0_ ,
1
'final' ||| _STR:0_
example# 18767
mapping is a dictionary with 3 initial entries : _STR:0_ for _STR:1_ , _STR:2_ for _STR:3_ and _STR:4_ for _STR:5_ .
6
'b' ||| _STR:2_
'c' ||| _STR:4_
'rc' ||| _STR:5_
'alpha' ||| _STR:1_
'beta' ||| _STR:3_
'a' ||| _STR:0_
example# 18768
use fourth element of version as a key to get the value from mapping dictionary , append to it fourth element of version converted to string , substitute it for sub .
0
example# 18769
sum major and sub , return the result converted to string .
0
example# 18770
define the function get_major_version with an argument version defaulting to None .
0
example# 18771
call the get_complete_version with an argument version , store the result in version .
0
example# 18772
assign integer 2 to parts if third element of version equals to zero , otherwise assign it integer 3 .
0
example# 18773
convert x into a string for every x in list of version elements up to the parts index , join the previous into a string separated by _STR:0_ , assign the result to major .
1
'.' ||| _STR:0_
example# 18774
return major .
0
example# 18775
define the function get_complete_version with in argument version , defaulting to None .
0
example# 18776
if version is None ,
0
example# 18777
from django import VERSION as version into default name space .
0
example# 18778
if not ,
0
example# 18779
if length of version does not equals to integer 5 , raise an exception .
0
example# 18780
if fourth element of version does not equals to string _STR:0_ or _STR:1_ or _STR:2_ or _STR:3_ , raise an exception .
4
'rc' ||| _STR:2_
'alpha' ||| _STR:0_
'beta' ||| _STR:1_
'final' ||| _STR:3_
example# 18781
return version
0
example# 18782
define the function get_git_changeset .
0
example# 18783
if get_git_changeset has an attribute _STR:0_ ,
1
'cache' ||| _STR:0_
example# 18784
return get_git_changeset.cache [ get_git_changeset . cache ] .
0
example# 18785
get the absolute path of the __file__ , repo_dir is name of the directory two leveles above it .
0
example# 18786
call the subprocess.Popen [ subprocess . Popen ] function with , _STR:0_ , stdout set to subprocess.PIPE [ subprocess . PIPE ] ,
1
'git log --pretty=format:%ct --quiet -1 HEAD' ||| _STR:0_
example# 18787
stderr set to subprocess.PIPE [ subprocess . PIPE ] , shell set to boolean True , cwd set to repo_dir and universal_newlines set to boolean True , as arguments , substitute the result for git_log . evaluate the method git_log.communicate [ git_log . communicate ] , substitute first element of the result for timestamp .
0
example# 18788
try
0
example# 18789
call the datetime.datetime.utcfromtimestamp [ datetime . datetime . utcfromtimestamp ] with timestamp converted to an integer as argument , substitute result for timestamp .
0
example# 18790
if ValueError exception is caught ,
0
example# 18791
changeset is None .
0
example# 18792
if not ,
0
example# 18793
call the timestamp.strftime [ timestamp . strftime ] with string _STR:0_ as an argument , substitute the result for changeset .
1
'%Y%m%d%H%M%S' ||| _STR:0_
example# 18794
substitute changeset for get_git_changeset.cache [ get_git_changeset . cache ] .
0
example# 18795
return changeset .
0
example# 18796
from xml.sax.saxutils [ xml . sax . saxutils ] import XMLGenerator into default name space .
0
example# 18797
derive the class SimplerXMLGenerator form the XMLGenerator base class .
0
example# 18798
define the method addQuickElement with 4 arguments : self , name , contents set to None and attrs set to None .
0
example# 18799
if attrs is None ,
0
example# 18800
attrs is an empty dictionary .
0
example# 18801
cal the method self.startElement [ self . startElement ] with 2 arguments : name and attrs .
0
example# 18802
if contents is not None ,
0
example# 18803
call the method self.characters [ self . characters ] with an argument contents .
0
example# 18804
call the method self.endElement [ self . endElement ] with an argument name .
0
